
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a99c  0800a99c  0000b99c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  0000c26c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a9dc  0800a9dc  0000b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e4  0800a9e4  0000c26c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e4  0800a9e4  0000b9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a9e8  0800a9e8  0000b9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000026c  20000000  0800a9ec  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  2000026c  0800ac58  0000c26c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000137c  0800ac58  0000c37c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ef35  00000000  00000000  0000c29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003852  00000000  00000000  0002b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  0002ea28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133b  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f01  00000000  00000000  0003160b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d2e1  00000000  00000000  0005a50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00116596  00000000  00000000  000777ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018dd83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c70  00000000  00000000  0018ddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00194a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000026c 	.word	0x2000026c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a984 	.word	0x0800a984

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000270 	.word	0x20000270
 8000214:	0800a984 	.word	0x0800a984

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 8000544:	b480      	push	{r7}
 8000546:	b089      	sub	sp, #36	@ 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	61f8      	str	r0, [r7, #28]
 800054c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000550:	edc7 0a05 	vstr	s1, [r7, #20]
 8000554:	ed87 1a04 	vstr	s2, [r7, #16]
 8000558:	edc7 1a03 	vstr	s3, [r7, #12]
 800055c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000560:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	3322      	adds	r3, #34	@ 0x22
 800056a:	edd7 7a06 	vldr	s15, [r7, #24]
 800056e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000572:	ee17 2a90 	vmov	r2, s15
 8000576:	b292      	uxth	r2, r2
 8000578:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x12].U16 = theta_pos;
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	3324      	adds	r3, #36	@ 0x24
 8000580:	edd7 7a05 	vldr	s15, [r7, #20]
 8000584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000588:	ee17 2a90 	vmov	r2, s15
 800058c:	b292      	uxth	r2, r2
 800058e:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x13].U16 = r_Velo;
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	3326      	adds	r3, #38	@ 0x26
 8000596:	edd7 7a04 	vldr	s15, [r7, #16]
 800059a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800059e:	ee17 2a90 	vmov	r2, s15
 80005a2:	b292      	uxth	r2, r2
 80005a4:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x14].U16 = theta_Velo;
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	3328      	adds	r3, #40	@ 0x28
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	b292      	uxth	r2, r2
 80005ba:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x15].U16 = r_accel;
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	332a      	adds	r3, #42	@ 0x2a
 80005c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ca:	ee17 2a90 	vmov	r2, s15
 80005ce:	b292      	uxth	r2, r2
 80005d0:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	332c      	adds	r3, #44	@ 0x2c
 80005d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e0:	ee17 2a90 	vmov	r2, s15
 80005e4:	b292      	uxth	r2, r2
 80005e6:	801a      	strh	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	3724      	adds	r7, #36	@ 0x24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float point,
		uint8_t index) {
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000600:	460b      	mov	r3, r1
 8000602:	71fb      	strb	r3, [r7, #7]
	hmodbus->RegisterAddress[0x20 + index].U16 = point;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	685a      	ldr	r2, [r3, #4]
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	3320      	adds	r3, #32
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	4413      	add	r3, r2
 8000610:	edd7 7a02 	vldr	s15, [r7, #8]
 8000614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000618:	ee17 2a90 	vmov	r2, s15
 800061c:	b292      	uxth	r2, r2
 800061e:	801a      	strh	r2, [r3, #0]
}
 8000620:	bf00      	nop
 8000622:	3714      	adds	r7, #20
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr

0800062c <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x30].U16;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	3360      	adds	r3, #96	@ 0x60
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	81fb      	strh	r3, [r7, #14]
	return goal_r_position;
 800063e:	89fb      	ldrh	r3, [r7, #14]
}
 8000640:	4618      	mov	r0, r3
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x31].U16;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	685b      	ldr	r3, [r3, #4]
 8000658:	3362      	adds	r3, #98	@ 0x62
 800065a:	881b      	ldrh	r3, [r3, #0]
 800065c:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position;
 800065e:	89fb      	ldrh	r3, [r7, #14]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr

0800066c <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 800067c:	213c      	movs	r1, #60	@ 0x3c
 800067e:	6838      	ldr	r0, [r7, #0]
 8000680:	f005 ffc8 	bl	8006614 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <Encoder_setLimit>:
    enc->lastPosition = enc->position;
    enc->lastVelocity = enc->velocity;
}

void Encoder_setLimit(Encoder *enc, float limit)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	ed87 0a00 	vstr	s0, [r7]
		enc->position = limit;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	609a      	str	r2, [r3, #8]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ec:	4812      	ldr	r0, [pc, #72]	@ (8000738 <PS2_ReadData+0x58>)
 80006ee:	f003 ffa1 	bl	8004634 <HAL_GPIO_WritePin>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	e012      	b.n	800071e <PS2_ReadData+0x3e>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a10      	ldr	r2, [pc, #64]	@ (800073c <PS2_ReadData+0x5c>)
 80006fc:	1899      	adds	r1, r3, r2
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <PS2_ReadData+0x60>)
 8000702:	441a      	add	r2, r3
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	480d      	ldr	r0, [pc, #52]	@ (8000744 <PS2_ReadData+0x64>)
 800070e:	f005 f89c 	bl	800584a <HAL_SPI_TransmitReceive>
		HAL_Delay(1);  // delay เล็กๆ เพื่อให้จอยตอบกลับได้ทัน
 8000712:	2001      	movs	r0, #1
 8000714:	f002 f89c 	bl	8002850 <HAL_Delay>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3301      	adds	r3, #1
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b07      	cmp	r3, #7
 8000722:	dde9      	ble.n	80006f8 <PS2_ReadData+0x18>
	}
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800072a:	4803      	ldr	r0, [pc, #12]	@ (8000738 <PS2_ReadData+0x58>)
 800072c:	f003 ff82 	bl	8004634 <HAL_GPIO_WritePin>
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	48000800 	.word	0x48000800
 800073c:	20000000 	.word	0x20000000
 8000740:	20000288 	.word	0x20000288
 8000744:	20000300 	.word	0x20000300

08000748 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000750:	4b04      	ldr	r3, [pc, #16]	@ (8000764 <modbus_1t5_Timeout+0x1c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2201      	movs	r2, #1
 8000756:	751a      	strb	r2, [r3, #20]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000290 	.word	0x20000290

08000768 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <modbus_3t5_Timeout+0x1c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2201      	movs	r2, #1
 8000776:	755a      	strb	r2, [r3, #21]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	20000290 	.word	0x20000290

08000788 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000792:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <modbus_UART_Recived+0x60>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	2201      	movs	r2, #1
 8000798:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800079a:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <modbus_UART_Recived+0x60>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 80007a2:	1c59      	adds	r1, r3, #1
 80007a4:	b289      	uxth	r1, r1
 80007a6:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 80007aa:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80007ae:	d210      	bcs.n	80007d2 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <modbus_UART_Recived+0x60>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68d8      	ldr	r0, [r3, #12]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <modbus_UART_Recived+0x60>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <modbus_UART_Recived+0x60>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80007c6:	4413      	add	r3, r2
 80007c8:	3302      	adds	r3, #2
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	f007 fd3b 	bl	8008248 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <modbus_UART_Recived+0x60>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000290 	.word	0x20000290

080007ec <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80007f6:	4a24      	ldr	r2, [pc, #144]	@ (8000888 <Modbus_init+0x9c>)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80007fc:	4b22      	ldr	r3, [pc, #136]	@ (8000888 <Modbus_init+0x9c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000804:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <Modbus_init+0x9c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	4a20      	ldr	r2, [pc, #128]	@ (800088c <Modbus_init+0xa0>)
 800080c:	2114      	movs	r1, #20
 800080e:	4618      	mov	r0, r3
 8000810:	f006 fc10 	bl	8007034 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <Modbus_init+0x9c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <Modbus_init+0xa4>)
 800081c:	210e      	movs	r1, #14
 800081e:	4618      	mov	r0, r3
 8000820:	f006 fc08 	bl	8007034 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <Modbus_init+0x9c>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	4a1a      	ldr	r2, [pc, #104]	@ (8000894 <Modbus_init+0xa8>)
 800082c:	2103      	movs	r1, #3
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fc50 	bl	80080d4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <Modbus_init+0x9c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	68d8      	ldr	r0, [r3, #12]
 800083a:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <Modbus_init+0x9c>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <Modbus_init+0x9c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000846:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800084a:	4413      	add	r3, r2
 800084c:	3302      	adds	r3, #2
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	f007 fcf9 	bl	8008248 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <Modbus_init+0x9c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b01      	cmp	r3, #1
 8000864:	d10c      	bne.n	8000880 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <Modbus_init+0x9c>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	4618      	mov	r0, r3
 800086e:	f005 fbd3 	bl	8006018 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000872:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <Modbus_init+0x9c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	691b      	ldr	r3, [r3, #16]
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f005 fd88 	bl	8006390 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000290 	.word	0x20000290
 800088c:	08000749 	.word	0x08000749
 8000890:	08000769 	.word	0x08000769
 8000894:	08000789 	.word	0x08000789

08000898 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 80008a4:	23ff      	movs	r3, #255	@ 0xff
 80008a6:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 80008a8:	23ff      	movs	r3, #255	@ 0xff
 80008aa:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 80008ac:	e013      	b.n	80008d6 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	7bbb      	ldrb	r3, [r7, #14]
 80008b8:	4053      	eors	r3, r2
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 80008be:	4a10      	ldr	r2, [pc, #64]	@ (8000900 <CRC16+0x68>)
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4413      	add	r3, r2
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
 80008c8:	4053      	eors	r3, r2
 80008ca:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <CRC16+0x6c>)
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80008d6:	883b      	ldrh	r3, [r7, #0]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	803a      	strh	r2, [r7, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1e6      	bne.n	80008ae <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80008e0:	7bfb      	ldrb	r3, [r7, #15]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	b29b      	uxth	r3, r3
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000108 	.word	0x20000108
 8000904:	20000008 	.word	0x20000008

08000908 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800090e:	4b80      	ldr	r3, [pc, #512]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	7e1b      	ldrb	r3, [r3, #24]
 8000914:	3b01      	subs	r3, #1
 8000916:	2b03      	cmp	r3, #3
 8000918:	d80a      	bhi.n	8000930 <Modbus_Protocal_Worker+0x28>
 800091a:	a201      	add	r2, pc, #4	@ (adr r2, 8000920 <Modbus_Protocal_Worker+0x18>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	0800093b 	.word	0x0800093b
 8000924:	08000ad9 	.word	0x08000ad9
 8000928:	080009c5 	.word	0x080009c5
 800092c:	080009eb 	.word	0x080009eb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000930:	4b77      	ldr	r3, [pc, #476]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2201      	movs	r2, #1
 8000936:	761a      	strb	r2, [r3, #24]
		break;
 8000938:	e0e6      	b.n	8000b08 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800093a:	4b75      	ldr	r3, [pc, #468]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000946:	f000 f9d5 	bl	8000cf4 <Modbus_Emission>
 800094a:	e01c      	b.n	8000986 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 800094c:	4b70      	ldr	r3, [pc, #448]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	7d9b      	ldrb	r3, [r3, #22]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d017      	beq.n	8000986 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000956:	4b6e      	ldr	r3, [pc, #440]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800095e:	4b6c      	ldr	r3, [pc, #432]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2200      	movs	r2, #0
 8000964:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000966:	4b6a      	ldr	r3, [pc, #424]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	4b67      	ldr	r3, [pc, #412]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f042 0201 	orr.w	r2, r2, #1
 800097c:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800097e:	4b64      	ldr	r3, [pc, #400]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2203      	movs	r2, #3
 8000984:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000986:	4b62      	ldr	r3, [pc, #392]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000990:	2b20      	cmp	r3, #32
 8000992:	f040 80b2 	bne.w	8000afa <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000996:	4b5e      	ldr	r3, [pc, #376]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2200      	movs	r2, #0
 800099c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80009a0:	4b5b      	ldr	r3, [pc, #364]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68d8      	ldr	r0, [r3, #12]
 80009a6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b59      	ldr	r3, [pc, #356]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80009b2:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80009b6:	4413      	add	r3, r2
 80009b8:	3302      	adds	r3, #2
 80009ba:	2201      	movs	r2, #1
 80009bc:	4619      	mov	r1, r3
 80009be:	f007 fc43 	bl	8008248 <HAL_UART_Receive_IT>
		}
		break;
 80009c2:	e09a      	b.n	8000afa <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80009c4:	4b52      	ldr	r3, [pc, #328]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	7d1b      	ldrb	r3, [r3, #20]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	f000 8097 	beq.w	8000afe <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80009d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80009d8:	4b4d      	ldr	r3, [pc, #308]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	22fe      	movs	r2, #254	@ 0xfe
 80009de:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80009e0:	4b4b      	ldr	r3, [pc, #300]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2204      	movs	r2, #4
 80009e6:	761a      	strb	r2, [r3, #24]
		}
		break;
 80009e8:	e089      	b.n	8000afe <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80009ea:	4b49      	ldr	r3, [pc, #292]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	7d9b      	ldrb	r3, [r3, #22]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d009      	beq.n	8000a08 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 80009f4:	4b46      	ldr	r3, [pc, #280]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d103      	bne.n	8000a08 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000a00:	4b43      	ldr	r3, [pc, #268]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	22ff      	movs	r2, #255	@ 0xff
 8000a06:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000a08:	4b41      	ldr	r3, [pc, #260]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000a10:	f113 0f02 	cmn.w	r3, #2
 8000a14:	d150      	bne.n	8000ab8 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000a16:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000a26:	4b3a      	ldr	r3, [pc, #232]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	4619      	mov	r1, r3
 8000a32:	4610      	mov	r0, r2
 8000a34:	f7ff ff30 	bl	8000898 <CRC16>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000a3c:	793a      	ldrb	r2, [r7, #4]
 8000a3e:	4b34      	ldr	r3, [pc, #208]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a40:	6819      	ldr	r1, [r3, #0]
 8000a42:	4b33      	ldr	r3, [pc, #204]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a4a:	3b02      	subs	r3, #2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d10c      	bne.n	8000a70 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000a56:	797a      	ldrb	r2, [r7, #5]
 8000a58:	4b2d      	ldr	r3, [pc, #180]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a5a:	6819      	ldr	r1, [r3, #0]
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a64:	3b01      	subs	r3, #1
 8000a66:	440b      	add	r3, r1
 8000a68:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d004      	beq.n	8000a7a <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000a70:	4b27      	ldr	r3, [pc, #156]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	22ff      	movs	r2, #255	@ 0xff
 8000a76:	75da      	strb	r2, [r3, #23]
				break;
 8000a78:	e046      	b.n	8000b08 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000a7a:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000a82:	4b23      	ldr	r3, [pc, #140]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d113      	bne.n	8000ab4 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000a8c:	4b20      	ldr	r3, [pc, #128]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000a94:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000a9c:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000aa6:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f009 ff3b 	bl	800a924 <memcpy>

			//execute command
			Modbus_frame_response();
 8000aae:	f000 f909 	bl	8000cc4 <Modbus_frame_response>
 8000ab2:	e001      	b.n	8000ab8 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000ab4:	bf00      	nop
					}
		break;


	}
}
 8000ab6:	e027      	b.n	8000b08 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000ab8:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	7d5b      	ldrb	r3, [r3, #21]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d01f      	beq.n	8000b02 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 fc85 	bl	80083e0 <HAL_UART_AbortReceive>
		break;
 8000ad6:	e014      	b.n	8000b02 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	2b20      	cmp	r3, #32
 8000ae4:	d10f      	bne.n	8000b06 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000af0:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <Modbus_Protocal_Worker+0x208>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2201      	movs	r2, #1
 8000af6:	761a      	strb	r2, [r3, #24]
		break;
 8000af8:	e005      	b.n	8000b06 <Modbus_Protocal_Worker+0x1fe>
		break;
 8000afa:	bf00      	nop
 8000afc:	e004      	b.n	8000b08 <Modbus_Protocal_Worker+0x200>
		break;
 8000afe:	bf00      	nop
 8000b00:	e002      	b.n	8000b08 <Modbus_Protocal_Worker+0x200>
		break;
 8000b02:	bf00      	nop
 8000b04:	e000      	b.n	8000b08 <Modbus_Protocal_Worker+0x200>
		break;
 8000b06:	bf00      	nop
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000290 	.word	0x20000290

08000b14 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	7e9b      	ldrb	r3, [r3, #26]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	4a1a      	ldr	r2, [pc, #104]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	7ed2      	ldrb	r2, [r2, #27]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000b2e:	88fa      	ldrh	r2, [r7, #6]
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d903      	bls.n	8000b42 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f000 f8a0 	bl	8000c80 <ModbusErrorReply>
			 return;
 8000b40:	e023      	b.n	8000b8a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6859      	ldr	r1, [r3, #4]
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	440b      	add	r3, r1
 8000b52:	7f12      	ldrb	r2, [r2, #28]
 8000b54:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000b56:	4b0e      	ldr	r3, [pc, #56]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6859      	ldr	r1, [r3, #4]
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	440b      	add	r3, r1
 8000b66:	7f52      	ldrb	r2, [r2, #29]
 8000b68:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000b6a:	4b09      	ldr	r3, [pc, #36]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000b78:	2208      	movs	r2, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f009 fed2 	bl	800a924 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000b80:	4b03      	ldr	r3, [pc, #12]	@ (8000b90 <modbusWrite1Register+0x7c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2205      	movs	r2, #5
 8000b86:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000290 	.word	0x20000290

08000b94 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000b9a:	4b38      	ldr	r3, [pc, #224]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	7f1b      	ldrb	r3, [r3, #28]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4a35      	ldr	r2, [pc, #212]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	7f52      	ldrb	r2, [r2, #29]
 8000baa:	4413      	add	r3, r2
 8000bac:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000bae:	4b33      	ldr	r3, [pc, #204]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	7e9b      	ldrb	r3, [r3, #26]
 8000bb4:	021b      	lsls	r3, r3, #8
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	4a30      	ldr	r2, [pc, #192]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000bba:	6812      	ldr	r2, [r2, #0]
 8000bbc:	7ed2      	ldrb	r2, [r2, #27]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000bc2:	88fb      	ldrh	r3, [r7, #6]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <modbusRead1Register+0x3a>
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	2b7d      	cmp	r3, #125	@ 0x7d
 8000bcc:	d903      	bls.n	8000bd6 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f856 	bl	8000c80 <ModbusErrorReply>
		 return;
 8000bd4:	e04e      	b.n	8000c74 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	4b28      	ldr	r3, [pc, #160]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d808      	bhi.n	8000bf4 <modbusRead1Register+0x60>
 8000be2:	88ba      	ldrh	r2, [r7, #4]
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	4413      	add	r3, r2
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b24      	ldr	r3, [pc, #144]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d903      	bls.n	8000bfc <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	f000 f843 	bl	8000c80 <ModbusErrorReply>
		 return;
 8000bfa:	e03b      	b.n	8000c74 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	2203      	movs	r2, #3
 8000c02:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	0052      	lsls	r2, r2, #1
 8000c10:	b2d2      	uxtb	r2, r2
 8000c12:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000c16:	2400      	movs	r4, #0
 8000c18:	e020      	b.n	8000c5c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000c1a:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	88bb      	ldrh	r3, [r7, #4]
 8000c22:	4423      	add	r3, r4
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	18d1      	adds	r1, r2, r3
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	1c63      	adds	r3, r4, #1
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	7849      	ldrb	r1, [r1, #1]
 8000c32:	4413      	add	r3, r2
 8000c34:	460a      	mov	r2, r1
 8000c36:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	88bb      	ldrh	r3, [r7, #4]
 8000c42:	4423      	add	r3, r4
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	18d1      	adds	r1, r2, r3
 8000c48:	4b0c      	ldr	r3, [pc, #48]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	0063      	lsls	r3, r4, #1
 8000c4e:	3303      	adds	r3, #3
 8000c50:	7809      	ldrb	r1, [r1, #0]
 8000c52:	4413      	add	r3, r2
 8000c54:	460a      	mov	r2, r1
 8000c56:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000c5a:	3401      	adds	r4, #1
 8000c5c:	88fb      	ldrh	r3, [r7, #6]
 8000c5e:	429c      	cmp	r4, r3
 8000c60:	dbdb      	blt.n	8000c1a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	3301      	adds	r3, #1
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <modbusRead1Register+0xe8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	0052      	lsls	r2, r2, #1
 8000c6e:	b2d2      	uxtb	r2, r2
 8000c70:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000290 	.word	0x20000290

08000c80 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc0 <ModbusErrorReply+0x40>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	7e5a      	ldrb	r2, [r3, #25]
 8000c90:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <ModbusErrorReply+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <ModbusErrorReply+0x40>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	@ (8000cc0 <ModbusErrorReply+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2202      	movs	r2, #2
 8000cae:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000290 	.word	0x20000290

08000cc4 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000cc8:	4b09      	ldr	r3, [pc, #36]	@ (8000cf0 <Modbus_frame_response+0x2c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	7e5b      	ldrb	r3, [r3, #25]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d004      	beq.n	8000cdc <Modbus_frame_response+0x18>
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d105      	bne.n	8000ce2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000cd6:	f7ff ff1d 	bl	8000b14 <modbusWrite1Register>
		break;
 8000cda:	e006      	b.n	8000cea <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000cdc:	f7ff ff5a 	bl	8000b94 <modbusRead1Register>
		break;
 8000ce0:	e003      	b.n	8000cea <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff ffcc 	bl	8000c80 <ModbusErrorReply>
		break;
 8000ce8:	bf00      	nop

	}
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000290 	.word	0x20000290

08000cf4 <Modbus_Emission>:

void Modbus_Emission()
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8000dec <Modbus_Emission+0xf8>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d04:	2b20      	cmp	r3, #32
 8000d06:	d15d      	bne.n	8000dc4 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000d08:	4b38      	ldr	r3, [pc, #224]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000d16:	4b35      	ldr	r3, [pc, #212]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000d1e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000d20:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000d28:	4b30      	ldr	r3, [pc, #192]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000d30:	461a      	mov	r2, r3
 8000d32:	f009 fdf7 	bl	800a924 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000d36:	4b2d      	ldr	r3, [pc, #180]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3203      	adds	r2, #3
 8000d46:	b292      	uxth	r2, r2
 8000d48:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000d54:	4b25      	ldr	r3, [pc, #148]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4610      	mov	r0, r2
 8000d62:	f7ff fd99 	bl	8000898 <CRC16>
 8000d66:	4603      	mov	r3, r0
 8000d68:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000d76:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000d78:	7939      	ldrb	r1, [r7, #4]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000d8e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000d90:	7979      	ldrb	r1, [r7, #5]
 8000d92:	4413      	add	r3, r2
 8000d94:	460a      	mov	r2, r1
 8000d96:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <Modbus_Emission+0xf8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da4:	2b20      	cmp	r3, #32
 8000da6:	d10d      	bne.n	8000dc4 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000da8:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <Modbus_Emission+0xf8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000dae:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <Modbus_Emission+0xf8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000db6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dec <Modbus_Emission+0xf8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000dba:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	f007 fa8e 	bl	80082e0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <Modbus_Emission+0xf8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <Modbus_Emission+0xf8>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <Modbus_Emission+0xf8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	@ (8000dec <Modbus_Emission+0xf8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2202      	movs	r2, #2
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000290 	.word	0x20000290

08000df0 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08c      	sub	sp, #48	@ 0x30
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6178      	str	r0, [r7, #20]
 8000df8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000dfc:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e00:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e04:	edc7 1a01 	vstr	s3, [r7, #4]
 8000e08:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8000e0c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e10:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e18:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8000e1c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e28:	db02      	blt.n	8000e30 <InitTrajectorySegment+0x40>
 8000e2a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e2e:	e000      	b.n	8000e32 <InitTrajectorySegment+0x42>
 8000e30:	4b43      	ldr	r3, [pc, #268]	@ (8000f40 <InitTrajectorySegment+0x150>)
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8000e34:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000e38:	eef0 7ae7 	vabs.f32	s15, s15
 8000e3c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8000e40:	edd7 6a02 	vldr	s13, [r7, #8]
 8000e44:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8000e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e54:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e58:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e64:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e6c:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8000e70:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e78:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000e7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e84:	d517      	bpl.n	8000eb6 <InitTrajectorySegment+0xc6>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8000e86:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e8e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000e92:	eeb0 0a66 	vmov.f32	s0, s13
 8000e96:	f009 fd53 	bl	800a940 <sqrtf>
 8000e9a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f04f 0200 	mov.w	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8000ea6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000eaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	edc3 7a07 	vstr	s15, [r3, #28]
 8000eb4:	e01e      	b.n	8000ef4 <InitTrajectorySegment+0x104>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8000eb6:	edd7 7a08 	vldr	s15, [r7, #32]
 8000eba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ebe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8000eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8000ece:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ed2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8000edc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000ee0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    seg->start_pos = start;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	605a      	str	r2, [r3, #4]
    seg->v_max = v_max * dir;
 8000f00:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	edc3 7a02 	vstr	s15, [r3, #8]
    seg->a_max = a_max * dir;
 8000f12:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f28:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f2e:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	621a      	str	r2, [r3, #32]
}
 8000f36:	bf00      	nop
 8000f38:	3730      	adds	r7, #48	@ 0x30
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	bf800000 	.word	0xbf800000

08000f44 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8000f44:	b480      	push	{r7}
 8000f46:	b08f      	sub	sp, #60	@ 0x3c
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f56:	ed97 7a00 	vldr	s14, [r7]
 8000f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8000f62:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6e:	d503      	bpl.n	8000f78 <GetTrajectoryPosition+0x34>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	edd3 7a00 	vldr	s15, [r3]
 8000f76:	e0b4      	b.n	80010e2 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f7e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	db03      	blt.n	8000f94 <GetTrajectoryPosition+0x50>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f92:	e0a6      	b.n	80010e2 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000fb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	d512      	bpl.n	8000fe0 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8000fba:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8000fbe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fc6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fce:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	e080      	b.n	80010e2 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	ed93 7a04 	vldr	s14, [r3, #16]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffc:	d525      	bpl.n	800104a <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001004:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001008:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800100c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001010:	edd7 7a04 	vldr	s15, [r7, #16]
 8001014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001018:	edd7 7a04 	vldr	s15, [r7, #16]
 800101c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001020:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001028:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 800102c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001030:	edd7 7a04 	vldr	s15, [r7, #16]
 8001034:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001038:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800103c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001040:	edd7 7a03 	vldr	s15, [r7, #12]
 8001044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001048:	e04b      	b.n	80010e2 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8001056:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800105a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800105e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001062:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001072:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 800107e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001082:	edd7 7a08 	vldr	s15, [r7, #32]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	ed97 7a07 	vldr	s14, [r7, #28]
 800108e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001092:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8001096:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800109a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800109e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010aa:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 80010ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80010be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010c2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80010c6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80010ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80010ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80010da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010de:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80010e2:	eeb0 0a67 	vmov.f32	s0, s15
 80010e6:	373c      	adds	r7, #60	@ 0x3c
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001102:	ed97 7a00 	vldr	s14, [r7]
 8001106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800110a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 800110e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <GetTrajectoryVelocity+0x32>
 800111c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80011cc <GetTrajectoryVelocity+0xdc>
 8001120:	e04d      	b.n	80011be <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	edd3 7a07 	vldr	s15, [r3, #28]
 8001128:	ed97 7a05 	vldr	s14, [r7, #20]
 800112c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001134:	db02      	blt.n	800113c <GetTrajectoryVelocity+0x4c>
 8001136:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80011cc <GetTrajectoryVelocity+0xdc>
 800113a:	e040      	b.n	80011be <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a04 	vldr	s15, [r3, #16]
 800114e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001152:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115a:	d506      	bpl.n	800116a <GetTrajectoryVelocity+0x7a>
        return a * t;
 800115c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001160:	edd7 7a05 	vldr	s15, [r7, #20]
 8001164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001168:	e029      	b.n	80011be <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	edd3 7a05 	vldr	s15, [r3, #20]
 8001176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117a:	ed97 7a05 	vldr	s14, [r7, #20]
 800117e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d502      	bpl.n	800118e <GetTrajectoryVelocity+0x9e>
        return v;
 8001188:	edd7 7a03 	vldr	s15, [r7, #12]
 800118c:	e017      	b.n	80011be <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	edd3 7a04 	vldr	s15, [r3, #16]
 8001194:	ed97 7a05 	vldr	s14, [r7, #20]
 8001198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	edd3 7a05 	vldr	s15, [r3, #20]
 80011a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a6:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 80011aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80011ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ba:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80011be:	eeb0 0a67 	vmov.f32	s0, s15
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	00000000 	.word	0x00000000

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f001 faca 	bl	800276e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f961 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f000 fe15 	bl	8001e0c <MX_GPIO_Init>
  MX_DMA_Init();
 80011e2:	f000 fde9 	bl	8001db8 <MX_DMA_Init>
  MX_TIM3_Init();
 80011e6:	f000 fb01 	bl	80017ec <MX_TIM3_Init>
  MX_ADC1_Init();
 80011ea:	f000 f9a5 	bl	8001538 <MX_ADC1_Init>
  MX_TIM1_Init();
 80011ee:	f000 fa5b 	bl	80016a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011f2:	f000 faad 	bl	8001750 <MX_TIM2_Init>
  MX_TIM4_Init();
 80011f6:	f000 fb4f 	bl	8001898 <MX_TIM4_Init>
  MX_TIM20_Init();
 80011fa:	f000 fcd3 	bl	8001ba4 <MX_TIM20_Init>
  MX_TIM8_Init();
 80011fe:	f000 fba1 	bl	8001944 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001202:	f000 fc4f 	bl	8001aa4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 8001206:	f000 fd89 	bl	8001d1c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800120a:	f000 fa0f 	bl	800162c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init(&encoder1, &htim4);
 800120e:	4985      	ldr	r1, [pc, #532]	@ (8001424 <main+0x254>)
 8001210:	4885      	ldr	r0, [pc, #532]	@ (8001428 <main+0x258>)
 8001212:	f7ff fa2b 	bl	800066c <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8001216:	4985      	ldr	r1, [pc, #532]	@ (800142c <main+0x25c>)
 8001218:	4885      	ldr	r0, [pc, #532]	@ (8001430 <main+0x260>)
 800121a:	f7ff fa27 	bl	800066c <Encoder_Init>

	InitTrajectorySegment(&segments[0], 0.0f, 100.0f, 50.0f, 100.0f, 0.0f);
 800121e:	ed9f 2a85 	vldr	s4, [pc, #532]	@ 8001434 <main+0x264>
 8001222:	eddf 1a85 	vldr	s3, [pc, #532]	@ 8001438 <main+0x268>
 8001226:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 800143c <main+0x26c>
 800122a:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8001438 <main+0x268>
 800122e:	ed9f 0a81 	vldr	s0, [pc, #516]	@ 8001434 <main+0x264>
 8001232:	4883      	ldr	r0, [pc, #524]	@ (8001440 <main+0x270>)
 8001234:	f7ff fddc 	bl	8000df0 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[1], 100.0f, 50.0f, 40.0f, 80.0f, segments[0].t_start + segments[0].t_total);
 8001238:	4b81      	ldr	r3, [pc, #516]	@ (8001440 <main+0x270>)
 800123a:	ed93 7a08 	vldr	s14, [r3, #32]
 800123e:	4b80      	ldr	r3, [pc, #512]	@ (8001440 <main+0x270>)
 8001240:	edd3 7a07 	vldr	s15, [r3, #28]
 8001244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001248:	eeb0 2a67 	vmov.f32	s4, s15
 800124c:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 8001444 <main+0x274>
 8001250:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 8001448 <main+0x278>
 8001254:	eddf 0a79 	vldr	s1, [pc, #484]	@ 800143c <main+0x26c>
 8001258:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8001438 <main+0x268>
 800125c:	487b      	ldr	r0, [pc, #492]	@ (800144c <main+0x27c>)
 800125e:	f7ff fdc7 	bl	8000df0 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[2], 50.0f, 200.0f, 60.0f, 120.0f, segments[1].t_start + segments[1].t_total);
 8001262:	4b77      	ldr	r3, [pc, #476]	@ (8001440 <main+0x270>)
 8001264:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8001268:	4b75      	ldr	r3, [pc, #468]	@ (8001440 <main+0x270>)
 800126a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800126e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001272:	eeb0 2a67 	vmov.f32	s4, s15
 8001276:	eddf 1a76 	vldr	s3, [pc, #472]	@ 8001450 <main+0x280>
 800127a:	ed9f 1a76 	vldr	s2, [pc, #472]	@ 8001454 <main+0x284>
 800127e:	eddf 0a76 	vldr	s1, [pc, #472]	@ 8001458 <main+0x288>
 8001282:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 800143c <main+0x26c>
 8001286:	4875      	ldr	r0, [pc, #468]	@ (800145c <main+0x28c>)
 8001288:	f7ff fdb2 	bl	8000df0 <InitTrajectorySegment>

	int lastTick = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	61bb      	str	r3, [r7, #24]
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001290:	213c      	movs	r1, #60	@ 0x3c
 8001292:	4866      	ldr	r0, [pc, #408]	@ (800142c <main+0x25c>)
 8001294:	f005 f9be 	bl	8006614 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001298:	213c      	movs	r1, #60	@ 0x3c
 800129a:	4862      	ldr	r0, [pc, #392]	@ (8001424 <main+0x254>)
 800129c:	f005 f9ba 	bl	8006614 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 80012a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001460 <main+0x290>)
 80012a2:	4a70      	ldr	r2, [pc, #448]	@ (8001464 <main+0x294>)
 80012a4:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80012a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001460 <main+0x290>)
 80012a8:	4a6f      	ldr	r2, [pc, #444]	@ (8001468 <main+0x298>)
 80012aa:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80012ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001460 <main+0x290>)
 80012ae:	2215      	movs	r2, #21
 80012b0:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 80012b2:	4b6b      	ldr	r3, [pc, #428]	@ (8001460 <main+0x290>)
 80012b4:	22c8      	movs	r2, #200	@ 0xc8
 80012b6:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80012b8:	496c      	ldr	r1, [pc, #432]	@ (800146c <main+0x29c>)
 80012ba:	4869      	ldr	r0, [pc, #420]	@ (8001460 <main+0x290>)
 80012bc:	f7ff fa96 	bl	80007ec <Modbus_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		float r_pos = 5;
 80012c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001470 <main+0x2a0>)
 80012c2:	617b      	str	r3, [r7, #20]
		float theta_pos = 6;
 80012c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001474 <main+0x2a4>)
 80012c6:	613b      	str	r3, [r7, #16]
		float r_Velo = 7;
 80012c8:	4b6b      	ldr	r3, [pc, #428]	@ (8001478 <main+0x2a8>)
 80012ca:	60fb      	str	r3, [r7, #12]
		float theta_Velo = 8;
 80012cc:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80012d0:	60bb      	str	r3, [r7, #8]
		float r_accel = 9;
 80012d2:	4b6a      	ldr	r3, [pc, #424]	@ (800147c <main+0x2ac>)
 80012d4:	607b      	str	r3, [r7, #4]
		float theta_accel = 10;
 80012d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001480 <main+0x2b0>)
 80012d8:	603b      	str	r3, [r7, #0]
		Modbus_Protocal_Worker();
 80012da:	f7ff fb15 	bl	8000908 <Modbus_Protocal_Worker>
		//modbus_r_position(&hmodbus,7);
		hmodbus.RegisterAddress[0x00].U16 = 22881;
 80012de:	4b60      	ldr	r3, [pc, #384]	@ (8001460 <main+0x290>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f645 1261 	movw	r2, #22881	@ 0x5961
 80012e6:	801a      	strh	r2, [r3, #0]
//		modbus_theta_position(&hmodbus,5);
//		modbus_r_velocity(&hmodbus,5);
//		modbus_theta_velocity(&hmodbus,5);
//		modbus_r_acceleration(&hmodbus,5);
//		modbus_theta_acceleration(&hmodbus,5);
		modbus_Update_All(&hmodbus, r_pos, theta_pos, r_Velo, theta_Velo,
 80012e8:	edd7 2a00 	vldr	s5, [r7]
 80012ec:	ed97 2a01 	vldr	s4, [r7, #4]
 80012f0:	edd7 1a02 	vldr	s3, [r7, #8]
 80012f4:	ed97 1a03 	vldr	s2, [r7, #12]
 80012f8:	edd7 0a04 	vldr	s1, [r7, #16]
 80012fc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001300:	4857      	ldr	r0, [pc, #348]	@ (8001460 <main+0x290>)
 8001302:	f7ff f91f 	bl	8000544 <modbus_Update_All>
				r_accel, theta_accel);
		for (int i = 0; i < 10; i++) {
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e00f      	b.n	800132c <main+0x15c>
			set_Target_Position_ten_points(&hmodbus, i, i);
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	484f      	ldr	r0, [pc, #316]	@ (8001460 <main+0x290>)
 8001322:	f7ff f967 	bl	80005f4 <set_Target_Position_ten_points>
		for (int i = 0; i < 10; i++) {
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	2b09      	cmp	r3, #9
 8001330:	ddec      	ble.n	800130c <main+0x13c>
		}
		Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8001332:	484b      	ldr	r0, [pc, #300]	@ (8001460 <main+0x290>)
 8001334:	f7ff f97a 	bl	800062c <modbus_set_goal_r_position>
 8001338:	4603      	mov	r3, r0
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	4b50      	ldr	r3, [pc, #320]	@ (8001484 <main+0x2b4>)
 8001344:	edc3 7a00 	vstr	s15, [r3]
		Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 8001348:	4845      	ldr	r0, [pc, #276]	@ (8001460 <main+0x290>)
 800134a:	f7ff f97f 	bl	800064c <modbus_set_goal_theta_position>
 800134e:	4603      	mov	r3, r0
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001358:	4b4b      	ldr	r3, [pc, #300]	@ (8001488 <main+0x2b8>)
 800135a:	edc3 7a00 	vstr	s15, [r3]
//			a2 = Encoder_GetAcceleration(&encoder2);

// Now use p1,v1,a1 and p2,v2,a2 as needed
		//}

		t_global = HAL_GetTick() / 1000.0f;
 800135e:	f001 fa6b 	bl	8002838 <HAL_GetTick>
 8001362:	ee07 0a90 	vmov	s15, r0
 8001366:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800136a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800148c <main+0x2bc>
 800136e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001372:	4b47      	ldr	r3, [pc, #284]	@ (8001490 <main+0x2c0>)
 8001374:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[current_segment], t_global);
 8001378:	4b46      	ldr	r3, [pc, #280]	@ (8001494 <main+0x2c4>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4a2e      	ldr	r2, [pc, #184]	@ (8001440 <main+0x270>)
 8001386:	4413      	add	r3, r2
 8001388:	4a41      	ldr	r2, [pc, #260]	@ (8001490 <main+0x2c0>)
 800138a:	edd2 7a00 	vldr	s15, [r2]
 800138e:	eeb0 0a67 	vmov.f32	s0, s15
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fdd6 	bl	8000f44 <GetTrajectoryPosition>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
 800139c:	4b3e      	ldr	r3, [pc, #248]	@ (8001498 <main+0x2c8>)
 800139e:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[current_segment], t_global);
 80013a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001494 <main+0x2c4>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4613      	mov	r3, r2
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4a24      	ldr	r2, [pc, #144]	@ (8001440 <main+0x270>)
 80013b0:	4413      	add	r3, r2
 80013b2:	4a37      	ldr	r2, [pc, #220]	@ (8001490 <main+0x2c0>)
 80013b4:	edd2 7a00 	vldr	s15, [r2]
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fe97 	bl	80010f0 <GetTrajectoryVelocity>
 80013c2:	eef0 7a40 	vmov.f32	s15, s0
 80013c6:	4b35      	ldr	r3, [pc, #212]	@ (800149c <main+0x2cc>)
 80013c8:	edc3 7a00 	vstr	s15, [r3]
		// ถ้าจบ segment ปัจจุบันให้ข้ามไปอันถัดไป
		if (t_global > segments[current_segment].t_start + segments[current_segment].t_total) {
 80013cc:	4b31      	ldr	r3, [pc, #196]	@ (8001494 <main+0x2c4>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	491b      	ldr	r1, [pc, #108]	@ (8001440 <main+0x270>)
 80013d2:	4613      	mov	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4413      	add	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	440b      	add	r3, r1
 80013dc:	3320      	adds	r3, #32
 80013de:	ed93 7a00 	vldr	s14, [r3]
 80013e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001494 <main+0x2c4>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4916      	ldr	r1, [pc, #88]	@ (8001440 <main+0x270>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	331c      	adds	r3, #28
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013fc:	4b24      	ldr	r3, [pc, #144]	@ (8001490 <main+0x2c0>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800140a:	d508      	bpl.n	800141e <main+0x24e>
			if (current_segment < MAX_SEGMENTS - 1) {
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <main+0x2c4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b08      	cmp	r3, #8
 8001412:	dc04      	bgt.n	800141e <main+0x24e>
				current_segment++;
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <main+0x2c4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <main+0x2c4>)
 800141c:	6013      	str	r3, [r2, #0]
			}
		}

		PS2_ReadData();
 800141e:	f7ff f95f 	bl	80006e0 <PS2_ReadData>
	while (1) {
 8001422:	e74d      	b.n	80012c0 <main+0xf0>
 8001424:	200005c8 	.word	0x200005c8
 8001428:	20000a24 	.word	0x20000a24
 800142c:	200004fc 	.word	0x200004fc
 8001430:	20000a40 	.word	0x20000a40
 8001434:	00000000 	.word	0x00000000
 8001438:	42c80000 	.word	0x42c80000
 800143c:	42480000 	.word	0x42480000
 8001440:	20000a64 	.word	0x20000a64
 8001444:	42a00000 	.word	0x42a00000
 8001448:	42200000 	.word	0x42200000
 800144c:	20000a88 	.word	0x20000a88
 8001450:	42f00000 	.word	0x42f00000
 8001454:	42700000 	.word	0x42700000
 8001458:	43480000 	.word	0x43480000
 800145c:	20000aac 	.word	0x20000aac
 8001460:	20000bd8 	.word	0x20000bd8
 8001464:	200008f8 	.word	0x200008f8
 8001468:	20000760 	.word	0x20000760
 800146c:	200010b0 	.word	0x200010b0
 8001470:	40a00000 	.word	0x40a00000
 8001474:	40c00000 	.word	0x40c00000
 8001478:	40e00000 	.word	0x40e00000
 800147c:	41100000 	.word	0x41100000
 8001480:	41200000 	.word	0x41200000
 8001484:	20000208 	.word	0x20000208
 8001488:	2000020c 	.word	0x2000020c
 800148c:	447a0000 	.word	0x447a0000
 8001490:	20000bd0 	.word	0x20000bd0
 8001494:	20000bcc 	.word	0x20000bcc
 8001498:	20000a5c 	.word	0x20000a5c
 800149c:	20000a60 	.word	0x20000a60

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	@ 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0318 	add.w	r3, r7, #24
 80014aa:	2238      	movs	r2, #56	@ 0x38
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f009 fa06 	bl	800a8c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014c2:	2000      	movs	r0, #0
 80014c4:	f003 f8e6 	bl	8004694 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014c8:	2302      	movs	r3, #2
 80014ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014d2:	2340      	movs	r3, #64	@ 0x40
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d6:	2302      	movs	r3, #2
 80014d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014da:	2302      	movs	r3, #2
 80014dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014de:	2304      	movs	r3, #4
 80014e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014e2:	2355      	movs	r3, #85	@ 0x55
 80014e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ea:	2302      	movs	r3, #2
 80014ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014f2:	f107 0318 	add.w	r3, r7, #24
 80014f6:	4618      	mov	r0, r3
 80014f8:	f003 f980 	bl	80047fc <HAL_RCC_OscConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001502:	f000 fd5f 	bl	8001fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001506:	230f      	movs	r3, #15
 8001508:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800150a:	2303      	movs	r3, #3
 800150c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2104      	movs	r1, #4
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fc7e 	bl	8004e20 <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800152a:	f000 fd4b 	bl	8001fc4 <Error_Handler>
  }
}
 800152e:	bf00      	nop
 8001530:	3750      	adds	r7, #80	@ 0x50
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08c      	sub	sp, #48	@ 0x30
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800153e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	2220      	movs	r2, #32
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f009 f9b5 	bl	800a8c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001556:	4b32      	ldr	r3, [pc, #200]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001558:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800155c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800155e:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001560:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001564:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001566:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800156c:	4b2c      	ldr	r3, [pc, #176]	@ (8001620 <MX_ADC1_Init+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001578:	4b29      	ldr	r3, [pc, #164]	@ (8001620 <MX_ADC1_Init+0xe8>)
 800157a:	2200      	movs	r2, #0
 800157c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800157e:	4b28      	ldr	r3, [pc, #160]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001580:	2204      	movs	r2, #4
 8001582:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001584:	4b26      	ldr	r3, [pc, #152]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001586:	2200      	movs	r2, #0
 8001588:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800158a:	4b25      	ldr	r3, [pc, #148]	@ (8001620 <MX_ADC1_Init+0xe8>)
 800158c:	2200      	movs	r2, #0
 800158e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001590:	4b23      	ldr	r3, [pc, #140]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001592:	2201      	movs	r2, #1
 8001594:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001596:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <MX_ADC1_Init+0xe8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <MX_ADC1_Init+0xe8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <MX_ADC1_Init+0xe8>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <MX_ADC1_Init+0xe8>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015b8:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_ADC1_Init+0xe8>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015c0:	4817      	ldr	r0, [pc, #92]	@ (8001620 <MX_ADC1_Init+0xe8>)
 80015c2:	f001 fb3d 	bl	8002c40 <HAL_ADC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80015cc:	f000 fcfa 	bl	8001fc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80015d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d8:	4619      	mov	r1, r3
 80015da:	4811      	ldr	r0, [pc, #68]	@ (8001620 <MX_ADC1_Init+0xe8>)
 80015dc:	f002 f952 	bl	8003884 <HAL_ADCEx_MultiModeConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80015e6:	f000 fced 	bl	8001fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001624 <MX_ADC1_Init+0xec>)
 80015ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015ee:	2306      	movs	r3, #6
 80015f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80015f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_ADC1_Init+0xf0>)
 80015f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fa:	2304      	movs	r3, #4
 80015fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	@ (8001620 <MX_ADC1_Init+0xe8>)
 8001608:	f001 fcd6 	bl	8002fb8 <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001612:	f000 fcd7 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3730      	adds	r7, #48	@ 0x30
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000294 	.word	0x20000294
 8001624:	04300002 	.word	0x04300002
 8001628:	407f0000 	.word	0x407f0000

0800162c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001632:	4a1c      	ldr	r2, [pc, #112]	@ (80016a4 <MX_SPI1_Init+0x78>)
 8001634:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001636:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001638:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800163c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163e:	4b18      	ldr	r3, [pc, #96]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001644:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001646:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800164a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <MX_SPI1_Init+0x74>)
 800164e:	2202      	movs	r2, #2
 8001650:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001652:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001654:	2201      	movs	r2, #1
 8001656:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <MX_SPI1_Init+0x74>)
 800165a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800165e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001660:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001662:	2238      	movs	r2, #56	@ 0x38
 8001664:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001666:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001668:	2280      	movs	r2, #128	@ 0x80
 800166a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_SPI1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001672:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001678:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_SPI1_Init+0x74>)
 800167a:	2207      	movs	r2, #7
 800167c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800167e:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001684:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_SPI1_Init+0x74>)
 8001686:	2200      	movs	r2, #0
 8001688:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_SPI1_Init+0x74>)
 800168c:	f004 f832 	bl	80056f4 <HAL_SPI_Init>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001696:	f000 fc95 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000300 	.word	0x20000300
 80016a4:	40013000 	.word	0x40013000

080016a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c6:	4b20      	ldr	r3, [pc, #128]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016c8:	4a20      	ldr	r2, [pc, #128]	@ (800174c <MX_TIM1_Init+0xa4>)
 80016ca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016da:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80016de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016f2:	4815      	ldr	r0, [pc, #84]	@ (8001748 <MX_TIM1_Init+0xa0>)
 80016f4:	f004 fc2c 	bl	8005f50 <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80016fe:	f000 fc61 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001706:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001708:	f107 0310 	add.w	r3, r7, #16
 800170c:	4619      	mov	r1, r3
 800170e:	480e      	ldr	r0, [pc, #56]	@ (8001748 <MX_TIM1_Init+0xa0>)
 8001710:	f005 fb16 	bl	8006d40 <HAL_TIM_ConfigClockSource>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800171a:	f000 fc53 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4619      	mov	r1, r3
 800172e:	4806      	ldr	r0, [pc, #24]	@ (8001748 <MX_TIM1_Init+0xa0>)
 8001730:	f006 faf6 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800173a:	f000 fc43 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	3720      	adds	r7, #32
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000364 	.word	0x20000364
 800174c:	40012c00 	.word	0x40012c00

08001750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <MX_TIM2_Init+0x98>)
 8001770:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001774:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_TIM2_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_TIM2_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001782:	4b19      	ldr	r3, [pc, #100]	@ (80017e8 <MX_TIM2_Init+0x98>)
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b17      	ldr	r3, [pc, #92]	@ (80017e8 <MX_TIM2_Init+0x98>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <MX_TIM2_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001796:	4814      	ldr	r0, [pc, #80]	@ (80017e8 <MX_TIM2_Init+0x98>)
 8001798:	f004 fbda 	bl	8005f50 <HAL_TIM_Base_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017a2:	f000 fc0f 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <MX_TIM2_Init+0x98>)
 80017b4:	f005 fac4 	bl	8006d40 <HAL_TIM_ConfigClockSource>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017be:	f000 fc01 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4806      	ldr	r0, [pc, #24]	@ (80017e8 <MX_TIM2_Init+0x98>)
 80017d0:	f006 faa6 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017da:	f000 fbf3 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	3720      	adds	r7, #32
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000430 	.word	0x20000430

080017ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	@ 0x30
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	2224      	movs	r2, #36	@ 0x24
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f009 f860 	bl	800a8c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	463b      	mov	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800180a:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <MX_TIM3_Init+0xa4>)
 800180c:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <MX_TIM3_Init+0xa8>)
 800180e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001810:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <MX_TIM3_Init+0xa4>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001816:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <MX_TIM3_Init+0xa4>)
 8001818:	2200      	movs	r2, #0
 800181a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800181c:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <MX_TIM3_Init+0xa4>)
 800181e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001824:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <MX_TIM3_Init+0xa4>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182a:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <MX_TIM3_Init+0xa4>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001830:	2303      	movs	r3, #3
 8001832:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001838:	2301      	movs	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001848:	2301      	movs	r3, #1
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	@ (8001890 <MX_TIM3_Init+0xa4>)
 800185c:	f004 fe26 	bl	80064ac <HAL_TIM_Encoder_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001866:	f000 fbad 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001872:	463b      	mov	r3, r7
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <MX_TIM3_Init+0xa4>)
 8001878:	f006 fa52 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001882:	f000 fb9f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3730      	adds	r7, #48	@ 0x30
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200004fc 	.word	0x200004fc
 8001894:	40000400 	.word	0x40000400

08001898 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	@ 0x30
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2224      	movs	r2, #36	@ 0x24
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f009 f80a 	bl	800a8c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	463b      	mov	r3, r7
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <MX_TIM4_Init+0xa4>)
 80018b8:	4a21      	ldr	r2, [pc, #132]	@ (8001940 <MX_TIM4_Init+0xa8>)
 80018ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <MX_TIM4_Init+0xa4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <MX_TIM4_Init+0xa4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 80018c8:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <MX_TIM4_Init+0xa4>)
 80018ca:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80018ce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <MX_TIM4_Init+0xa4>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <MX_TIM4_Init+0xa4>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018dc:	2303      	movs	r3, #3
 80018de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e4:	2301      	movs	r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f4:	2301      	movs	r3, #1
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	4619      	mov	r1, r3
 8001906:	480d      	ldr	r0, [pc, #52]	@ (800193c <MX_TIM4_Init+0xa4>)
 8001908:	f004 fdd0 	bl	80064ac <HAL_TIM_Encoder_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001912:	f000 fb57 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800191e:	463b      	mov	r3, r7
 8001920:	4619      	mov	r1, r3
 8001922:	4806      	ldr	r0, [pc, #24]	@ (800193c <MX_TIM4_Init+0xa4>)
 8001924:	f006 f9fc 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800192e:	f000 fb49 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	3730      	adds	r7, #48	@ 0x30
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200005c8 	.word	0x200005c8
 8001940:	40000800 	.word	0x40000800

08001944 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b09c      	sub	sp, #112	@ 0x70
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001964:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2234      	movs	r2, #52	@ 0x34
 800197c:	2100      	movs	r1, #0
 800197e:	4618      	mov	r0, r3
 8001980:	f008 ff9e 	bl	800a8c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001984:	4b45      	ldr	r3, [pc, #276]	@ (8001a9c <MX_TIM8_Init+0x158>)
 8001986:	4a46      	ldr	r2, [pc, #280]	@ (8001aa0 <MX_TIM8_Init+0x15c>)
 8001988:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800198a:	4b44      	ldr	r3, [pc, #272]	@ (8001a9c <MX_TIM8_Init+0x158>)
 800198c:	2200      	movs	r2, #0
 800198e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b42      	ldr	r3, [pc, #264]	@ (8001a9c <MX_TIM8_Init+0x158>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001996:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <MX_TIM8_Init+0x158>)
 8001998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a9c <MX_TIM8_Init+0x158>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019a4:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <MX_TIM8_Init+0x158>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	4b3c      	ldr	r3, [pc, #240]	@ (8001a9c <MX_TIM8_Init+0x158>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019b0:	483a      	ldr	r0, [pc, #232]	@ (8001a9c <MX_TIM8_Init+0x158>)
 80019b2:	f004 facd 	bl	8005f50 <HAL_TIM_Base_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80019bc:	f000 fb02 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80019ca:	4619      	mov	r1, r3
 80019cc:	4833      	ldr	r0, [pc, #204]	@ (8001a9c <MX_TIM8_Init+0x158>)
 80019ce:	f005 f9b7 	bl	8006d40 <HAL_TIM_ConfigClockSource>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80019d8:	f000 faf4 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80019dc:	482f      	ldr	r0, [pc, #188]	@ (8001a9c <MX_TIM8_Init+0x158>)
 80019de:	f004 fc01 	bl	80061e4 <HAL_TIM_PWM_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80019e8:	f000 faec 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019fc:	4619      	mov	r1, r3
 80019fe:	4827      	ldr	r0, [pc, #156]	@ (8001a9c <MX_TIM8_Init+0x158>)
 8001a00:	f006 f98e 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001a0a:	f000 fadb 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a0e:	2360      	movs	r3, #96	@ 0x60
 8001a10:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a16:	2300      	movs	r3, #0
 8001a18:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a2e:	220c      	movs	r2, #12
 8001a30:	4619      	mov	r1, r3
 8001a32:	481a      	ldr	r0, [pc, #104]	@ (8001a9c <MX_TIM8_Init+0x158>)
 8001a34:	f005 f870 	bl	8006b18 <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001a3e:	f000 fac1 	bl	8001fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4807      	ldr	r0, [pc, #28]	@ (8001a9c <MX_TIM8_Init+0x158>)
 8001a80:	f006 f9e4 	bl	8007e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001a8a:	f000 fa9b 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001a8e:	4803      	ldr	r0, [pc, #12]	@ (8001a9c <MX_TIM8_Init+0x158>)
 8001a90:	f000 fcaa 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8001a94:	bf00      	nop
 8001a96:	3770      	adds	r7, #112	@ 0x70
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000694 	.word	0x20000694
 8001aa0:	40013400 	.word	0x40013400

08001aa4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b094      	sub	sp, #80	@ 0x50
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aaa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	615a      	str	r2, [r3, #20]
 8001abc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001abe:	463b      	mov	r3, r7
 8001ac0:	2234      	movs	r2, #52	@ 0x34
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f008 fefb 	bl	800a8c0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001aca:	4b34      	ldr	r3, [pc, #208]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001acc:	4a34      	ldr	r2, [pc, #208]	@ (8001ba0 <MX_TIM16_Init+0xfc>)
 8001ace:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001ad0:	4b32      	ldr	r3, [pc, #200]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001ad2:	22a9      	movs	r2, #169	@ 0xa9
 8001ad4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad6:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001adc:	4b2f      	ldr	r3, [pc, #188]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001ade:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001ae2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001aea:	4b2c      	ldr	r3, [pc, #176]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001af6:	4829      	ldr	r0, [pc, #164]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001af8:	f004 fa2a 	bl	8005f50 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001b02:	f000 fa5f 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001b06:	4825      	ldr	r0, [pc, #148]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001b08:	f004 fafe 	bl	8006108 <HAL_TIM_OC_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001b12:	f000 fa57 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001b16:	2108      	movs	r1, #8
 8001b18:	4820      	ldr	r0, [pc, #128]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001b1a:	f004 fbd1 	bl	80062c0 <HAL_TIM_OnePulse_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001b24:	f000 fa4e 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001b28:	2310      	movs	r3, #16
 8001b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001b2c:	f240 5399 	movw	r3, #1433	@ 0x599
 8001b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b32:	2300      	movs	r3, #0
 8001b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b36:	2300      	movs	r3, #0
 8001b38:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4813      	ldr	r0, [pc, #76]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001b50:	f004 ff68 	bl	8006a24 <HAL_TIM_OC_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8001b5a:	f000 fa33 	bl	8001fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <MX_TIM16_Init+0xf8>)
 8001b86:	f006 f961 	bl	8007e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8001b90:	f000 fa18 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3750      	adds	r7, #80	@ 0x50
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000760 	.word	0x20000760
 8001ba0:	40014400 	.word	0x40014400

08001ba4 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b09c      	sub	sp, #112	@ 0x70
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]
 8001bd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2234      	movs	r2, #52	@ 0x34
 8001bdc:	2100      	movs	r1, #0
 8001bde:	4618      	mov	r0, r3
 8001be0:	f008 fe6e 	bl	800a8c0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001be4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001be6:	4a4c      	ldr	r2, [pc, #304]	@ (8001d18 <MX_TIM20_Init+0x174>)
 8001be8:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001bea:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf0:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001bf6:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001bf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bfc:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfe:	4b45      	ldr	r3, [pc, #276]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001c04:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b42      	ldr	r3, [pc, #264]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001c10:	4840      	ldr	r0, [pc, #256]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c12:	f004 f99d 	bl	8005f50 <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001c1c:	f000 f9d2 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c24:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001c26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4839      	ldr	r0, [pc, #228]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c2e:	f005 f887 	bl	8006d40 <HAL_TIM_ConfigClockSource>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001c38:	f000 f9c4 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001c3c:	4835      	ldr	r0, [pc, #212]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c3e:	f004 fad1 	bl	80061e4 <HAL_TIM_PWM_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001c48:	f000 f9bc 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001c58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	482d      	ldr	r0, [pc, #180]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c60:	f006 f85e 	bl	8007d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001c6a:	f000 f9ab 	bl	8001fc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6e:	2360      	movs	r3, #96	@ 0x60
 8001c70:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c8e:	2200      	movs	r2, #0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4820      	ldr	r0, [pc, #128]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001c94:	f004 ff40 	bl	8006b18 <HAL_TIM_PWM_ConfigChannel>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001c9e:	f000 f991 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ca2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	4619      	mov	r1, r3
 8001caa:	481a      	ldr	r0, [pc, #104]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001cac:	f004 ff34 	bl	8006b18 <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001cb6:	f000 f985 	bl	8001fc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ce0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001cf8:	f006 f8a8 	bl	8007e4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001d02:	f000 f95f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001d06:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <MX_TIM20_Init+0x170>)
 8001d08:	f000 fb6e 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 8001d0c:	bf00      	nop
 8001d0e:	3770      	adds	r7, #112	@ 0x70
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2000082c 	.word	0x2000082c
 8001d18:	40015000 	.word	0x40015000

08001d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d20:	4b23      	ldr	r3, [pc, #140]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d22:	4a24      	ldr	r2, [pc, #144]	@ (8001db4 <MX_USART2_UART_Init+0x98>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d28:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001d2e:	4b20      	ldr	r3, [pc, #128]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d30:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d34:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d46:	220c      	movs	r2, #12
 8001d48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d50:	4b17      	ldr	r3, [pc, #92]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d56:	4b16      	ldr	r3, [pc, #88]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d5c:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d62:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d68:	4811      	ldr	r0, [pc, #68]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d6a:	f006 f953 	bl	8008014 <HAL_UART_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001d74:	f000 f926 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d78:	2100      	movs	r1, #0
 8001d7a:	480d      	ldr	r0, [pc, #52]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d7c:	f008 fcd5 	bl	800a72a <HAL_UARTEx_SetTxFifoThreshold>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001d86:	f000 f91d 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4808      	ldr	r0, [pc, #32]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d8e:	f008 fd0a 	bl	800a7a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001d98:	f000 f914 	bl	8001fc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <MX_USART2_UART_Init+0x94>)
 8001d9e:	f008 fc8b 	bl	800a6b8 <HAL_UARTEx_DisableFifoMode>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001da8:	f000 f90c 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	200008f8 	.word	0x200008f8
 8001db4:	40004400 	.word	0x40004400

08001db8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001dbe:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <MX_DMA_Init+0x50>)
 8001dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc2:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <MX_DMA_Init+0x50>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001dca:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <MX_DMA_Init+0x50>)
 8001dcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e08 <MX_DMA_Init+0x50>)
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <MX_DMA_Init+0x50>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6493      	str	r3, [r2, #72]	@ 0x48
 8001de2:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <MX_DMA_Init+0x50>)
 8001de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	200b      	movs	r0, #11
 8001df4:	f001 ff29 	bl	8003c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001df8:	200b      	movs	r0, #11
 8001dfa:	f001 ff40 	bl	8003c7e <HAL_NVIC_EnableIRQ>

}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	@ 0x28
 8001e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
 8001e1e:	60da      	str	r2, [r3, #12]
 8001e20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	4b53      	ldr	r3, [pc, #332]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	4a52      	ldr	r2, [pc, #328]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2e:	4b50      	ldr	r3, [pc, #320]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e3a:	4b4d      	ldr	r3, [pc, #308]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e3e:	4a4c      	ldr	r2, [pc, #304]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e40:	f043 0320 	orr.w	r3, r3, #32
 8001e44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e46:	4b4a      	ldr	r3, [pc, #296]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	4a46      	ldr	r2, [pc, #280]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e5e:	4b44      	ldr	r3, [pc, #272]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6e:	4a40      	ldr	r2, [pc, #256]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e76:	4b3e      	ldr	r3, [pc, #248]	@ (8001f70 <MX_GPIO_Init+0x164>)
 8001e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	f241 0102 	movw	r1, #4098	@ 0x1002
 8001e88:	483a      	ldr	r0, [pc, #232]	@ (8001f74 <MX_GPIO_Init+0x168>)
 8001e8a:	f002 fbd3 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e94:	4838      	ldr	r0, [pc, #224]	@ (8001f78 <MX_GPIO_Init+0x16c>)
 8001e96:	f002 fbcd 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_MD20A_24V_Pin DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin;
 8001e9a:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4830      	ldr	r0, [pc, #192]	@ (8001f74 <MX_GPIO_Init+0x168>)
 8001eb4:	f002 fa3c 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 8001eb8:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ebe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ec2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4829      	ldr	r0, [pc, #164]	@ (8001f74 <MX_GPIO_Init+0x168>)
 8001ed0:	f002 fa2e 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Prismatic2_Pin;
 8001ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ed8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eda:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ede:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_Switch_Prismatic2_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f107 0314 	add.w	r3, r7, #20
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4822      	ldr	r0, [pc, #136]	@ (8001f74 <MX_GPIO_Init+0x168>)
 8001eec:	f002 fa20 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8001ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001efa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f0a:	f002 fa11 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Attention_Pin;
 8001f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f14:	2301      	movs	r3, #1
 8001f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PS2_Attention_GPIO_Port, &GPIO_InitStruct);
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4619      	mov	r1, r3
 8001f26:	4814      	ldr	r0, [pc, #80]	@ (8001f78 <MX_GPIO_Init+0x16c>)
 8001f28:	f002 fa02 	bl	8004330 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8001f2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	4619      	mov	r1, r3
 8001f42:	480d      	ldr	r0, [pc, #52]	@ (8001f78 <MX_GPIO_Init+0x16c>)
 8001f44:	f002 f9f4 	bl	8004330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2017      	movs	r0, #23
 8001f4e:	f001 fe7c 	bl	8003c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f52:	2017      	movs	r0, #23
 8001f54:	f001 fe93 	bl	8003c7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	2028      	movs	r0, #40	@ 0x28
 8001f5e:	f001 fe74 	bl	8003c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f62:	2028      	movs	r0, #40	@ 0x28
 8001f64:	f001 fe8b 	bl	8003c7e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f68:	bf00      	nop
 8001f6a:	3728      	adds	r7, #40	@ 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	48000400 	.word	0x48000400
 8001f78:	48000800 	.word	0x48000800

08001f7c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10) {
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8c:	d10e      	bne.n	8001fac <HAL_GPIO_EXTI_Callback+0x30>
		Encoder_setLimit(&encoder1, 180);
 8001f8e:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8001fb4 <HAL_GPIO_EXTI_Callback+0x38>
 8001f92:	4809      	ldr	r0, [pc, #36]	@ (8001fb8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001f94:	f7fe fb94 	bl	80006c0 <Encoder_setLimit>
		Encoder_setLimit(&encoder2, 180);
 8001f98:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001fb4 <HAL_GPIO_EXTI_Callback+0x38>
 8001f9c:	4807      	ldr	r0, [pc, #28]	@ (8001fbc <HAL_GPIO_EXTI_Callback+0x40>)
 8001f9e:	f7fe fb8f 	bl	80006c0 <Encoder_setLimit>
		check += 1;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a05      	ldr	r2, [pc, #20]	@ (8001fc0 <HAL_GPIO_EXTI_Callback+0x44>)
 8001faa:	6013      	str	r3, [r2, #0]
	}
}
 8001fac:	bf00      	nop
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	43340000 	.word	0x43340000
 8001fb8:	20000a24 	.word	0x20000a24
 8001fbc:	20000a40 	.word	0x20000a40
 8001fc0:	20000bd4 	.word	0x20000bd4

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc8:	b672      	cpsid	i
}
 8001fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <Error_Handler+0x8>

08001fd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_MspInit+0x44>)
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fda:	4a0e      	ldr	r2, [pc, #56]	@ (8002014 <HAL_MspInit+0x44>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <HAL_MspInit+0x44>)
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_MspInit+0x44>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_MspInit+0x44>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_MspInit+0x44>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002006:	f002 fbe9 	bl	80047dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000

08002018 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b09e      	sub	sp, #120	@ 0x78
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	2254      	movs	r2, #84	@ 0x54
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f008 fc41 	bl	800a8c0 <memset>
  if(hadc->Instance==ADC1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002046:	d134      	bne.n	80020b2 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002048:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800204c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800204e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002052:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002054:	f107 0310 	add.w	r3, r7, #16
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f8fd 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002064:	f7ff ffae 	bl	8001fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002068:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_ADC_MspInit+0xa4>)
 800206a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206c:	4a13      	ldr	r2, [pc, #76]	@ (80020bc <HAL_ADC_MspInit+0xa4>)
 800206e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002072:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_ADC_MspInit+0xa4>)
 8002076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002078:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002080:	4b0e      	ldr	r3, [pc, #56]	@ (80020bc <HAL_ADC_MspInit+0xa4>)
 8002082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002084:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <HAL_ADC_MspInit+0xa4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800208c:	4b0b      	ldr	r3, [pc, #44]	@ (80020bc <HAL_ADC_MspInit+0xa4>)
 800208e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8002098:	2303      	movs	r3, #3
 800209a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800209c:	2303      	movs	r3, #3
 800209e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ae:	f002 f93f 	bl	8004330 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80020b2:	bf00      	nop
 80020b4:	3778      	adds	r7, #120	@ 0x78
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	@ 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a25      	ldr	r2, [pc, #148]	@ (8002174 <HAL_SPI_MspInit+0xb4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d144      	bne.n	800216c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e2:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020e6:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 80020e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002106:	4b1c      	ldr	r3, [pc, #112]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b19      	ldr	r3, [pc, #100]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a18      	ldr	r2, [pc, #96]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b16      	ldr	r3, [pc, #88]	@ (8002178 <HAL_SPI_MspInit+0xb8>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800212a:	2320      	movs	r3, #32
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800213a:	2305      	movs	r3, #5
 800213c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002148:	f002 f8f2 	bl	8004330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800214c:	2330      	movs	r3, #48	@ 0x30
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800215c:	2305      	movs	r3, #5
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <HAL_SPI_MspInit+0xbc>)
 8002168:	f002 f8e2 	bl	8004330 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	@ 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40013000 	.word	0x40013000
 8002178:	40021000 	.word	0x40021000
 800217c:	48000400 	.word	0x48000400

08002180 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a39      	ldr	r2, [pc, #228]	@ (8002274 <HAL_TIM_Base_MspInit+0xf4>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d11c      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002192:	4b39      	ldr	r3, [pc, #228]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002194:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002196:	4a38      	ldr	r2, [pc, #224]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002198:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800219c:	6613      	str	r3, [r2, #96]	@ 0x60
 800219e:	4b36      	ldr	r3, [pc, #216]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 80021a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2018      	movs	r0, #24
 80021b0:	f001 fd4b 	bl	8003c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80021b4:	2018      	movs	r0, #24
 80021b6:	f001 fd62 	bl	8003c7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2019      	movs	r0, #25
 80021c0:	f001 fd43 	bl	8003c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80021c4:	2019      	movs	r0, #25
 80021c6:	f001 fd5a 	bl	8003c7e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80021ca:	e04e      	b.n	800226a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d10c      	bne.n	80021f0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d6:	4b28      	ldr	r3, [pc, #160]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021da:	4a27      	ldr	r2, [pc, #156]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021e2:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	69bb      	ldr	r3, [r7, #24]
}
 80021ee:	e03c      	b.n	800226a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a21      	ldr	r2, [pc, #132]	@ (800227c <HAL_TIM_Base_MspInit+0xfc>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d10c      	bne.n	8002214 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 80021fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002200:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002204:	6613      	str	r3, [r2, #96]	@ 0x60
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800220a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
}
 8002212:	e02a      	b.n	800226a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	@ (8002280 <HAL_TIM_Base_MspInit+0x100>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d114      	bne.n	8002248 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002222:	4a15      	ldr	r2, [pc, #84]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002228:	6613      	str	r3, [r2, #96]	@ 0x60
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 800222c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2100      	movs	r1, #0
 800223a:	2019      	movs	r0, #25
 800223c:	f001 fd05 	bl	8003c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002240:	2019      	movs	r0, #25
 8002242:	f001 fd1c 	bl	8003c7e <HAL_NVIC_EnableIRQ>
}
 8002246:	e010      	b.n	800226a <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0d      	ldr	r2, [pc, #52]	@ (8002284 <HAL_TIM_Base_MspInit+0x104>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10b      	bne.n	800226a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002256:	4a08      	ldr	r2, [pc, #32]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002258:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225c:	6613      	str	r3, [r2, #96]	@ 0x60
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_TIM_Base_MspInit+0xf8>)
 8002260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
}
 800226a:	bf00      	nop
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40012c00 	.word	0x40012c00
 8002278:	40021000 	.word	0x40021000
 800227c:	40013400 	.word	0x40013400
 8002280:	40014400 	.word	0x40014400
 8002284:	40015000 	.word	0x40015000

08002288 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08e      	sub	sp, #56	@ 0x38
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a4b      	ldr	r2, [pc, #300]	@ (80023d4 <HAL_TIM_Encoder_MspInit+0x14c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d145      	bne.n	8002336 <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022aa:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	4a4a      	ldr	r2, [pc, #296]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022b6:	4b48      	ldr	r3, [pc, #288]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	623b      	str	r3, [r7, #32]
 80022c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	4b45      	ldr	r3, [pc, #276]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	4a44      	ldr	r2, [pc, #272]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ce:	4b42      	ldr	r3, [pc, #264]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022da:	4b3f      	ldr	r3, [pc, #252]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022de:	4a3e      	ldr	r2, [pc, #248]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022e6:	4b3c      	ldr	r3, [pc, #240]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 80022e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 80022f2:	2340      	movs	r3, #64	@ 0x40
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002302:	2302      	movs	r3, #2
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 8002306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800230a:	4619      	mov	r1, r3
 800230c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002310:	f002 f80e 	bl	8004330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002324:	2302      	movs	r3, #2
 8002326:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800232c:	4619      	mov	r1, r3
 800232e:	482b      	ldr	r0, [pc, #172]	@ (80023dc <HAL_TIM_Encoder_MspInit+0x154>)
 8002330:	f001 fffe 	bl	8004330 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002334:	e04a      	b.n	80023cc <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a29      	ldr	r2, [pc, #164]	@ (80023e0 <HAL_TIM_Encoder_MspInit+0x158>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d145      	bne.n	80023cc <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002340:	4b25      	ldr	r3, [pc, #148]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	4a24      	ldr	r2, [pc, #144]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	6593      	str	r3, [r2, #88]	@ 0x58
 800234c:	4b22      	ldr	r3, [pc, #136]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 800235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235c:	4a1e      	ldr	r2, [pc, #120]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002364:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 8002366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b19      	ldr	r3, [pc, #100]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 8002372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002374:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237c:	4b16      	ldr	r3, [pc, #88]	@ (80023d8 <HAL_TIM_Encoder_MspInit+0x150>)
 800237e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8002388:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800239a:	230a      	movs	r3, #10
 800239c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023a2:	4619      	mov	r1, r3
 80023a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a8:	f001 ffc2 	bl	8004330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 80023ac:	2380      	movs	r3, #128	@ 0x80
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023bc:	2302      	movs	r3, #2
 80023be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c4:	4619      	mov	r1, r3
 80023c6:	4807      	ldr	r0, [pc, #28]	@ (80023e4 <HAL_TIM_Encoder_MspInit+0x15c>)
 80023c8:	f001 ffb2 	bl	8004330 <HAL_GPIO_Init>
}
 80023cc:	bf00      	nop
 80023ce:	3738      	adds	r7, #56	@ 0x38
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40021000 	.word	0x40021000
 80023dc:	48000800 	.word	0x48000800
 80023e0:	40000800 	.word	0x40000800
 80023e4:	48000400 	.word	0x48000400

080023e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a31      	ldr	r2, [pc, #196]	@ (80024cc <HAL_TIM_MspPostInit+0xe4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d11d      	bne.n	8002446 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800240a:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 800240c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800240e:	4a30      	ldr	r2, [pc, #192]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002416:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8002422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002434:	2304      	movs	r3, #4
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	4825      	ldr	r0, [pc, #148]	@ (80024d4 <HAL_TIM_MspPostInit+0xec>)
 8002440:	f001 ff76 	bl	8004330 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002444:	e03d      	b.n	80024c2 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a23      	ldr	r2, [pc, #140]	@ (80024d8 <HAL_TIM_MspPostInit+0xf0>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d138      	bne.n	80024c2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002450:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 8002452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002454:	4a1e      	ldr	r2, [pc, #120]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 8002456:	f043 0302 	orr.w	r3, r3, #2
 800245a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245c:	4b1c      	ldr	r3, [pc, #112]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 800245e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002468:	4b19      	ldr	r3, [pc, #100]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 800246a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246c:	4a18      	ldr	r2, [pc, #96]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002474:	4b16      	ldr	r3, [pc, #88]	@ (80024d0 <HAL_TIM_MspPostInit+0xe8>)
 8002476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8002480:	2304      	movs	r3, #4
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002490:	2303      	movs	r3, #3
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4810      	ldr	r0, [pc, #64]	@ (80024dc <HAL_TIM_MspPostInit+0xf4>)
 800249c:	f001 ff48 	bl	8004330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 80024a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 80024b2:	2306      	movs	r3, #6
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	@ (80024d4 <HAL_TIM_MspPostInit+0xec>)
 80024be:	f001 ff37 	bl	8004330 <HAL_GPIO_Init>
}
 80024c2:	bf00      	nop
 80024c4:	3728      	adds	r7, #40	@ 0x28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40013400 	.word	0x40013400
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48000800 	.word	0x48000800
 80024d8:	40015000 	.word	0x40015000
 80024dc:	48000400 	.word	0x48000400

080024e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b09e      	sub	sp, #120	@ 0x78
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	2254      	movs	r2, #84	@ 0x54
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f008 f9dd 	bl	800a8c0 <memset>
  if(huart->Instance==USART2)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a37      	ldr	r2, [pc, #220]	@ (80025e8 <HAL_UART_MspInit+0x108>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d167      	bne.n	80025e0 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002510:	2302      	movs	r3, #2
 8002512:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002518:	f107 0310 	add.w	r3, r7, #16
 800251c:	4618      	mov	r0, r3
 800251e:	f002 fe9b 	bl	8005258 <HAL_RCCEx_PeriphCLKConfig>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002528:	f7ff fd4c 	bl	8001fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800252c:	4b2f      	ldr	r3, [pc, #188]	@ (80025ec <HAL_UART_MspInit+0x10c>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002530:	4a2e      	ldr	r2, [pc, #184]	@ (80025ec <HAL_UART_MspInit+0x10c>)
 8002532:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002536:	6593      	str	r3, [r2, #88]	@ 0x58
 8002538:	4b2c      	ldr	r3, [pc, #176]	@ (80025ec <HAL_UART_MspInit+0x10c>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b29      	ldr	r3, [pc, #164]	@ (80025ec <HAL_UART_MspInit+0x10c>)
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	4a28      	ldr	r2, [pc, #160]	@ (80025ec <HAL_UART_MspInit+0x10c>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002550:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <HAL_UART_MspInit+0x10c>)
 8002552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800255c:	230c      	movs	r3, #12
 800255e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256c:	2307      	movs	r3, #7
 800256e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002570:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002574:	4619      	mov	r1, r3
 8002576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800257a:	f001 fed9 	bl	8004330 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800257e:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 8002580:	4a1c      	ldr	r2, [pc, #112]	@ (80025f4 <HAL_UART_MspInit+0x114>)
 8002582:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002584:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 8002586:	221b      	movs	r2, #27
 8002588:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800258a:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 800258c:	2210      	movs	r2, #16
 800258e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002590:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002596:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 8002598:	2280      	movs	r2, #128	@ 0x80
 800259a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259c:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 800259e:	2200      	movs	r2, #0
 80025a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a2:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ae:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025b4:	480e      	ldr	r0, [pc, #56]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 80025b6:	f001 fb7d 	bl	8003cb4 <HAL_DMA_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80025c0:	f7ff fd00 	bl	8001fc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 80025c8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_UART_MspInit+0x110>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	2026      	movs	r0, #38	@ 0x26
 80025d6:	f001 fb38 	bl	8003c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025da:	2026      	movs	r0, #38	@ 0x26
 80025dc:	f001 fb4f 	bl	8003c7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80025e0:	bf00      	nop
 80025e2:	3778      	adds	r7, #120	@ 0x78
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40004400 	.word	0x40004400
 80025ec:	40021000 	.word	0x40021000
 80025f0:	200009c4 	.word	0x200009c4
 80025f4:	40020008 	.word	0x40020008

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <NMI_Handler+0x4>

08002600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <HardFault_Handler+0x4>

08002608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <MemManage_Handler+0x4>

08002610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <UsageFault_Handler+0x4>

08002620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264e:	f000 f8e1 	bl	8002814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800265c:	4802      	ldr	r0, [pc, #8]	@ (8002668 <DMA1_Channel1_IRQHandler+0x10>)
 800265e:	f001 fd0c 	bl	800407a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	200009c4 	.word	0x200009c4

0800266c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8002670:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002674:	f001 fff6 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}

0800267c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002680:	4802      	ldr	r0, [pc, #8]	@ (800268c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002682:	f004 f855 	bl	8006730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000364 	.word	0x20000364

08002690 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002694:	4803      	ldr	r0, [pc, #12]	@ (80026a4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002696:	f004 f84b 	bl	8006730 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800269a:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800269c:	f004 f848 	bl	8006730 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20000364 	.word	0x20000364
 80026a8:	20000760 	.word	0x20000760

080026ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <USART2_IRQHandler+0x10>)
 80026b2:	f005 ff4b 	bl	800854c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	200008f8 	.word	0x200008f8

080026c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80026c4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80026c8:	f001 ffcc 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80026cc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80026d0:	f001 ffc8 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80026d4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80026d8:	f001 ffc4 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 80026dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026e0:	f001 ffc0 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 80026e4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80026e8:	f001 ffbc 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 80026ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80026f0:	f001 ffb8 	bl	8004664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026fc:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <SystemInit+0x20>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <SystemInit+0x20>)
 8002704:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002708:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800271c:	480d      	ldr	r0, [pc, #52]	@ (8002754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800271e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002720:	f7ff ffea 	bl	80026f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480c      	ldr	r0, [pc, #48]	@ (8002758 <LoopForever+0x6>)
  ldr r1, =_edata
 8002726:	490d      	ldr	r1, [pc, #52]	@ (800275c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <LoopForever+0xe>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800273c:	4c0a      	ldr	r4, [pc, #40]	@ (8002768 <LoopForever+0x16>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274a:	f008 f8c7 	bl	800a8dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800274e:	f7fe fd3f 	bl	80011d0 <main>

08002752 <LoopForever>:

LoopForever:
    b LoopForever
 8002752:	e7fe      	b.n	8002752 <LoopForever>
  ldr   r0, =_estack
 8002754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8002760:	0800a9ec 	.word	0x0800a9ec
  ldr r2, =_sbss
 8002764:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8002768:	2000137c 	.word	0x2000137c

0800276c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC1_2_IRQHandler>

0800276e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002778:	2003      	movs	r0, #3
 800277a:	f001 fa5b 	bl	8003c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f80e 	bl	80027a0 <HAL_InitTick>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	e001      	b.n	8002794 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002790:	f7ff fc1e 	bl	8001fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002794:	79fb      	ldrb	r3, [r7, #7]

}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80027ac:	4b16      	ldr	r3, [pc, #88]	@ (8002808 <HAL_InitTick+0x68>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d022      	beq.n	80027fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80027b4:	4b15      	ldr	r3, [pc, #84]	@ (800280c <HAL_InitTick+0x6c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <HAL_InitTick+0x68>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 fa66 	bl	8003c9a <HAL_SYSTICK_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b0f      	cmp	r3, #15
 80027d8:	d809      	bhi.n	80027ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027da:	2200      	movs	r2, #0
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	f04f 30ff 	mov.w	r0, #4294967295
 80027e2:	f001 fa32 	bl	8003c4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <HAL_InitTick+0x70>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	e007      	b.n	80027fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	e004      	b.n	80027fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e001      	b.n	80027fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80027fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000218 	.word	0x20000218
 800280c:	20000210 	.word	0x20000210
 8002810:	20000214 	.word	0x20000214

08002814 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002818:	4b05      	ldr	r3, [pc, #20]	@ (8002830 <HAL_IncTick+0x1c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <HAL_IncTick+0x20>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4413      	add	r3, r2
 8002822:	4a03      	ldr	r2, [pc, #12]	@ (8002830 <HAL_IncTick+0x1c>)
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	20001240 	.word	0x20001240
 8002834:	20000218 	.word	0x20000218

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_GetTick+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20001240 	.word	0x20001240

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffee 	bl	8002838 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d004      	beq.n	8002874 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800286a:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <HAL_Delay+0x40>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4413      	add	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002874:	bf00      	nop
 8002876:	f7ff ffdf 	bl	8002838 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	429a      	cmp	r2, r3
 8002884:	d8f7      	bhi.n	8002876 <HAL_Delay+0x26>
  {
  }
}
 8002886:	bf00      	nop
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	20000218 	.word	0x20000218

08002894 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3360      	adds	r3, #96	@ 0x60
 800290e:	461a      	mov	r2, r3
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b08      	ldr	r3, [pc, #32]	@ (8002940 <LL_ADC_SetOffset+0x44>)
 800291e:	4013      	ands	r3, r2
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	4313      	orrs	r3, r2
 800292c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002934:	bf00      	nop
 8002936:	371c      	adds	r7, #28
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	03fff000 	.word	0x03fff000

08002944 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3360      	adds	r3, #96	@ 0x60
 8002952:	461a      	mov	r2, r3
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4413      	add	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002964:	4618      	mov	r0, r3
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	3360      	adds	r3, #96	@ 0x60
 8002980:	461a      	mov	r2, r3
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	431a      	orrs	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800299a:	bf00      	nop
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3360      	adds	r3, #96	@ 0x60
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029d0:	bf00      	nop
 80029d2:	371c      	adds	r7, #28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3360      	adds	r3, #96	@ 0x60
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	615a      	str	r2, [r3, #20]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	3330      	adds	r3, #48	@ 0x30
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	0a1b      	lsrs	r3, r3, #8
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	4413      	add	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	211f      	movs	r1, #31
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	401a      	ands	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0e9b      	lsrs	r3, r3, #26
 8002a70:	f003 011f 	and.w	r1, r3, #31
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 031f 	and.w	r3, r3, #31
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a84:	bf00      	nop
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b087      	sub	sp, #28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	3314      	adds	r3, #20
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	0e5b      	lsrs	r3, r3, #25
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	4413      	add	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0d1b      	lsrs	r3, r3, #20
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	2107      	movs	r1, #7
 8002abe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	401a      	ands	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0d1b      	lsrs	r3, r3, #20
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b00:	43db      	mvns	r3, r3
 8002b02:	401a      	ands	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f003 0318 	and.w	r3, r3, #24
 8002b0a:	4908      	ldr	r1, [pc, #32]	@ (8002b2c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b0c:	40d9      	lsrs	r1, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	400b      	ands	r3, r1
 8002b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b1e:	bf00      	nop
 8002b20:	3714      	adds	r7, #20
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	0007ffff 	.word	0x0007ffff

08002b30 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	6093      	str	r3, [r2, #8]
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b68:	d101      	bne.n	8002b6e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bb8:	d101      	bne.n	8002bbe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <LL_ADC_IsEnabled+0x18>
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <LL_ADC_IsEnabled+0x1a>
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c40:	b590      	push	{r4, r7, lr}
 8002c42:	b089      	sub	sp, #36	@ 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e1a9      	b.n	8002fae <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d109      	bne.n	8002c7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff f9d5 	bl	8002018 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff67 	bl	8002b54 <LL_ADC_IsDeepPowerDownEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d004      	beq.n	8002c96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff4d 	bl	8002b30 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff ff82 	bl	8002ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d115      	bne.n	8002cd2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff66 	bl	8002b7c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	@ (8002f24 <HAL_ADC_Init+0x2e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	099b      	lsrs	r3, r3, #6
 8002cb6:	4a9c      	ldr	r2, [pc, #624]	@ (8002f28 <HAL_ADC_Init+0x2e8>)
 8002cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cc4:	e002      	b.n	8002ccc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f9      	bne.n	8002cc6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff64 	bl	8002ba4 <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10d      	bne.n	8002cfe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	f043 0210 	orr.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf2:	f043 0201 	orr.w	r2, r3, #1
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff ff75 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8002d08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 8142 	bne.w	8002f9c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 813e 	bne.w	8002f9c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d24:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d28:	f043 0202 	orr.w	r2, r3, #2
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff49 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d141      	bne.n	8002dc4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d48:	d004      	beq.n	8002d54 <HAL_ADC_Init+0x114>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a77      	ldr	r2, [pc, #476]	@ (8002f2c <HAL_ADC_Init+0x2ec>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d10f      	bne.n	8002d74 <HAL_ADC_Init+0x134>
 8002d54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d58:	f7ff ff38 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	4873      	ldr	r0, [pc, #460]	@ (8002f2c <HAL_ADC_Init+0x2ec>)
 8002d60:	f7ff ff34 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4323      	orrs	r3, r4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e012      	b.n	8002d9a <HAL_ADC_Init+0x15a>
 8002d74:	486e      	ldr	r0, [pc, #440]	@ (8002f30 <HAL_ADC_Init+0x2f0>)
 8002d76:	f7ff ff29 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	486d      	ldr	r0, [pc, #436]	@ (8002f34 <HAL_ADC_Init+0x2f4>)
 8002d7e:	f7ff ff25 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d82:	4603      	mov	r3, r0
 8002d84:	431c      	orrs	r4, r3
 8002d86:	486c      	ldr	r0, [pc, #432]	@ (8002f38 <HAL_ADC_Init+0x2f8>)
 8002d88:	f7ff ff20 	bl	8002bcc <LL_ADC_IsEnabled>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4323      	orrs	r3, r4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002da6:	d004      	beq.n	8002db2 <HAL_ADC_Init+0x172>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a5f      	ldr	r2, [pc, #380]	@ (8002f2c <HAL_ADC_Init+0x2ec>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_Init+0x176>
 8002db2:	4a62      	ldr	r2, [pc, #392]	@ (8002f3c <HAL_ADC_Init+0x2fc>)
 8002db4:	e000      	b.n	8002db8 <HAL_ADC_Init+0x178>
 8002db6:	4a62      	ldr	r2, [pc, #392]	@ (8002f40 <HAL_ADC_Init+0x300>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f7ff fd68 	bl	8002894 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	7f5b      	ldrb	r3, [r3, #29]
 8002dc8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002dce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002dd4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002dda:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002de2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d106      	bne.n	8002e00 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df6:	3b01      	subs	r3, #1
 8002df8:	045b      	lsls	r3, r3, #17
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	4b48      	ldr	r3, [pc, #288]	@ (8002f44 <HAL_ADC_Init+0x304>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fee4 	bl	8002c18 <LL_ADC_INJ_IsConversionOngoing>
 8002e50:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d17f      	bne.n	8002f58 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d17c      	bne.n	8002f58 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e62:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e6a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e7a:	f023 0302 	bic.w	r3, r3, #2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6812      	ldr	r2, [r2, #0]
 8002e82:	69b9      	ldr	r1, [r7, #24]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d017      	beq.n	8002ec0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e9e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ea8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6911      	ldr	r1, [r2, #16]
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ebe:	e013      	b.n	8002ee8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ece:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ee0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ee4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12a      	bne.n	8002f48 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002efc:	f023 0304 	bic.w	r3, r3, #4
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f08:	4311      	orrs	r1, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f0e:	4311      	orrs	r1, r2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f14:	430a      	orrs	r2, r1
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f042 0201 	orr.w	r2, r2, #1
 8002f20:	611a      	str	r2, [r3, #16]
 8002f22:	e019      	b.n	8002f58 <HAL_ADC_Init+0x318>
 8002f24:	20000210 	.word	0x20000210
 8002f28:	053e2d63 	.word	0x053e2d63
 8002f2c:	50000100 	.word	0x50000100
 8002f30:	50000400 	.word	0x50000400
 8002f34:	50000500 	.word	0x50000500
 8002f38:	50000600 	.word	0x50000600
 8002f3c:	50000300 	.word	0x50000300
 8002f40:	50000700 	.word	0x50000700
 8002f44:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10c      	bne.n	8002f7a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f023 010f 	bic.w	r1, r3, #15
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f78:	e007      	b.n	8002f8a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 020f 	bic.w	r2, r2, #15
 8002f88:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f9a:	e007      	b.n	8002fac <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fac:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3724      	adds	r7, #36	@ 0x24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd90      	pop	{r4, r7, pc}
 8002fb6:	bf00      	nop

08002fb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b0b6      	sub	sp, #216	@ 0xd8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d102      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x24>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	f000 bc13 	b.w	8003802 <HAL_ADC_ConfigChannel+0x84a>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fe02 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f040 83f3 	bne.w	80037dc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	f7ff fd18 	bl	8002a38 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fdf0 	bl	8002bf2 <LL_ADC_REG_IsConversionOngoing>
 8003012:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fdfc 	bl	8002c18 <LL_ADC_INJ_IsConversionOngoing>
 8003020:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003024:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 81d9 	bne.w	80033e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800302e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 81d4 	bne.w	80033e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003040:	d10f      	bne.n	8003062 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	4619      	mov	r1, r3
 800304e:	f7ff fd1f 	bl	8002a90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fcd9 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonConfig>
 8003060:	e00e      	b.n	8003080 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	6819      	ldr	r1, [r3, #0]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	461a      	mov	r2, r3
 8003070:	f7ff fd0e 	bl	8002a90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fcc9 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	08db      	lsrs	r3, r3, #3
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d022      	beq.n	80030e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030b2:	f7ff fc23 	bl	80028fc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6919      	ldr	r1, [r3, #16]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	461a      	mov	r2, r3
 80030c4:	f7ff fc6f 	bl	80029a6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d102      	bne.n	80030de <HAL_ADC_ConfigChannel+0x126>
 80030d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030dc:	e000      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x128>
 80030de:	2300      	movs	r3, #0
 80030e0:	461a      	mov	r2, r3
 80030e2:	f7ff fc7b 	bl	80029dc <LL_ADC_SetOffsetSaturation>
 80030e6:	e17b      	b.n	80033e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fc28 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10a      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x15c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fc1d 	bl	8002944 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	e01e      	b.n	8003152 <HAL_ADC_ConfigChannel+0x19a>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff fc12 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003120:	4603      	mov	r3, r0
 8003122:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800312a:	fa93 f3a3 	rbit	r3, r3
 800312e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003132:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003136:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800313a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003142:	2320      	movs	r3, #32
 8003144:	e004      	b.n	8003150 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003146:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_ADC_ConfigChannel+0x1b2>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	0e9b      	lsrs	r3, r3, #26
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	e018      	b.n	800319c <HAL_ADC_ConfigChannel+0x1e4>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800317e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003182:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e004      	b.n	800319c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800319c:	429a      	cmp	r2, r3
 800319e:	d106      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2200      	movs	r2, #0
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fbe1 	bl	8002970 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2101      	movs	r1, #1
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fbc5 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_ADC_ConfigChannel+0x222>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fbba 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80031d0:	4603      	mov	r3, r0
 80031d2:	0e9b      	lsrs	r3, r3, #26
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	e01e      	b.n	8003218 <HAL_ADC_ConfigChannel+0x260>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fbaf 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80031f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003208:	2320      	movs	r3, #32
 800320a:	e004      	b.n	8003216 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800320c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003210:	fab3 f383 	clz	r3, r3
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x278>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0e9b      	lsrs	r3, r3, #26
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	e018      	b.n	8003262 <HAL_ADC_ConfigChannel+0x2aa>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003244:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003248:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800324c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003254:	2320      	movs	r3, #32
 8003256:	e004      	b.n	8003262 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003258:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003262:	429a      	cmp	r2, r3
 8003264:	d106      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	2101      	movs	r1, #1
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fb7e 	bl	8002970 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2102      	movs	r1, #2
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fb62 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003280:	4603      	mov	r3, r0
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x2e8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2102      	movs	r1, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fb57 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003296:	4603      	mov	r3, r0
 8003298:	0e9b      	lsrs	r3, r3, #26
 800329a:	f003 021f 	and.w	r2, r3, #31
 800329e:	e01e      	b.n	80032de <HAL_ADC_ConfigChannel+0x326>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2102      	movs	r1, #2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fb4c 	bl	8002944 <LL_ADC_GetOffsetChannel>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032b6:	fa93 f3a3 	rbit	r3, r3
 80032ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80032be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80032c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032ce:	2320      	movs	r3, #32
 80032d0:	e004      	b.n	80032dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032d6:	fab3 f383 	clz	r3, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x33e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	0e9b      	lsrs	r3, r3, #26
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	e016      	b.n	8003324 <HAL_ADC_ConfigChannel+0x36c>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003308:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800330a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800330e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003316:	2320      	movs	r3, #32
 8003318:	e004      	b.n	8003324 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800331a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800331e:	fab3 f383 	clz	r3, r3
 8003322:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003324:	429a      	cmp	r2, r3
 8003326:	d106      	bne.n	8003336 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2200      	movs	r2, #0
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff fb1d 	bl	8002970 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2103      	movs	r1, #3
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff fb01 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003342:	4603      	mov	r3, r0
 8003344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_ADC_ConfigChannel+0x3aa>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2103      	movs	r1, #3
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff faf6 	bl	8002944 <LL_ADC_GetOffsetChannel>
 8003358:	4603      	mov	r3, r0
 800335a:	0e9b      	lsrs	r3, r3, #26
 800335c:	f003 021f 	and.w	r2, r3, #31
 8003360:	e017      	b.n	8003392 <HAL_ADC_ConfigChannel+0x3da>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2103      	movs	r1, #3
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff faeb 	bl	8002944 <LL_ADC_GetOffsetChannel>
 800336e:	4603      	mov	r3, r0
 8003370:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003374:	fa93 f3a3 	rbit	r3, r3
 8003378:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800337a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800337c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800337e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003384:	2320      	movs	r3, #32
 8003386:	e003      	b.n	8003390 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800338a:	fab3 f383 	clz	r3, r3
 800338e:	b2db      	uxtb	r3, r3
 8003390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800339a:	2b00      	cmp	r3, #0
 800339c:	d105      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x3f2>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	0e9b      	lsrs	r3, r3, #26
 80033a4:	f003 031f 	and.w	r3, r3, #31
 80033a8:	e011      	b.n	80033ce <HAL_ADC_ConfigChannel+0x416>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80033b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80033bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033c2:	2320      	movs	r3, #32
 80033c4:	e003      	b.n	80033ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c8:	fab3 f383 	clz	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d106      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	2103      	movs	r1, #3
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fac8 	bl	8002970 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fbf1 	bl	8002bcc <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f040 813d 	bne.w	800366c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6819      	ldr	r1, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	461a      	mov	r2, r3
 8003400:	f7ff fb72 	bl	8002ae8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4aa2      	ldr	r2, [pc, #648]	@ (8003694 <HAL_ADC_ConfigChannel+0x6dc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	f040 812e 	bne.w	800366c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x480>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0e9b      	lsrs	r3, r3, #26
 8003426:	3301      	adds	r3, #1
 8003428:	f003 031f 	and.w	r3, r3, #31
 800342c:	2b09      	cmp	r3, #9
 800342e:	bf94      	ite	ls
 8003430:	2301      	movls	r3, #1
 8003432:	2300      	movhi	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e019      	b.n	800346c <HAL_ADC_ConfigChannel+0x4b4>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003446:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003448:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800344a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003454:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	2b09      	cmp	r3, #9
 8003464:	bf94      	ite	ls
 8003466:	2301      	movls	r3, #1
 8003468:	2300      	movhi	r3, #0
 800346a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346c:	2b00      	cmp	r3, #0
 800346e:	d079      	beq.n	8003564 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_ADC_ConfigChannel+0x4d4>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	069b      	lsls	r3, r3, #26
 8003486:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800348a:	e015      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x500>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800349a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800349c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80034a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x520>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	e017      	b.n	8003508 <HAL_ADC_ConfigChannel+0x550>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80034e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80034ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_ADC_ConfigChannel+0x576>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	051b      	lsls	r3, r3, #20
 800352c:	e018      	b.n	8003560 <HAL_ADC_ConfigChannel+0x5a8>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003546:	2320      	movs	r3, #32
 8003548:	e003      	b.n	8003552 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800354a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3301      	adds	r3, #1
 8003554:	f003 021f 	and.w	r2, r3, #31
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003560:	430b      	orrs	r3, r1
 8003562:	e07e      	b.n	8003662 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356c:	2b00      	cmp	r3, #0
 800356e:	d107      	bne.n	8003580 <HAL_ADC_ConfigChannel+0x5c8>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	0e9b      	lsrs	r3, r3, #26
 8003576:	3301      	adds	r3, #1
 8003578:	069b      	lsls	r3, r3, #26
 800357a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800357e:	e015      	b.n	80035ac <HAL_ADC_ConfigChannel+0x5f4>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003588:	fa93 f3a3 	rbit	r3, r3
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800358e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003590:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003598:	2320      	movs	r3, #32
 800359a:	e003      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	069b      	lsls	r3, r3, #26
 80035a8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x614>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	0e9b      	lsrs	r3, r3, #26
 80035be:	3301      	adds	r3, #1
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	2101      	movs	r1, #1
 80035c6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ca:	e017      	b.n	80035fc <HAL_ADC_ConfigChannel+0x644>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	61fb      	str	r3, [r7, #28]
  return result;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	ea42 0103 	orr.w	r1, r2, r3
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x670>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	3301      	adds	r3, #1
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	4613      	mov	r3, r2
 800361a:	005b      	lsls	r3, r3, #1
 800361c:	4413      	add	r3, r2
 800361e:	3b1e      	subs	r3, #30
 8003620:	051b      	lsls	r3, r3, #20
 8003622:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003626:	e01b      	b.n	8003660 <HAL_ADC_ConfigChannel+0x6a8>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	613b      	str	r3, [r7, #16]
  return result;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	f003 021f 	and.w	r2, r3, #31
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	3b1e      	subs	r3, #30
 800365a:	051b      	lsls	r3, r3, #20
 800365c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003660:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003666:	4619      	mov	r1, r3
 8003668:	f7ff fa12 	bl	8002a90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_ADC_ConfigChannel+0x6e0>)
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80be 	beq.w	80037f6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003682:	d004      	beq.n	800368e <HAL_ADC_ConfigChannel+0x6d6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a04      	ldr	r2, [pc, #16]	@ (800369c <HAL_ADC_ConfigChannel+0x6e4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d10a      	bne.n	80036a4 <HAL_ADC_ConfigChannel+0x6ec>
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003690:	e009      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x6ee>
 8003692:	bf00      	nop
 8003694:	407f0000 	.word	0x407f0000
 8003698:	80080000 	.word	0x80080000
 800369c:	50000100 	.word	0x50000100
 80036a0:	50000300 	.word	0x50000300
 80036a4:	4b59      	ldr	r3, [pc, #356]	@ (800380c <HAL_ADC_ConfigChannel+0x854>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff f91a 	bl	80028e0 <LL_ADC_GetCommonPathInternalCh>
 80036ac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_ADC_ConfigChannel+0x858>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d004      	beq.n	80036c4 <HAL_ADC_ConfigChannel+0x70c>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a55      	ldr	r2, [pc, #340]	@ (8003814 <HAL_ADC_ConfigChannel+0x85c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d13a      	bne.n	800373a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d134      	bne.n	800373a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d8:	d005      	beq.n	80036e6 <HAL_ADC_ConfigChannel+0x72e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a4e      	ldr	r2, [pc, #312]	@ (8003818 <HAL_ADC_ConfigChannel+0x860>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	f040 8085 	bne.w	80037f0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ee:	d004      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x742>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a49      	ldr	r2, [pc, #292]	@ (800381c <HAL_ADC_ConfigChannel+0x864>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x746>
 80036fa:	4a49      	ldr	r2, [pc, #292]	@ (8003820 <HAL_ADC_ConfigChannel+0x868>)
 80036fc:	e000      	b.n	8003700 <HAL_ADC_ConfigChannel+0x748>
 80036fe:	4a43      	ldr	r2, [pc, #268]	@ (800380c <HAL_ADC_ConfigChannel+0x854>)
 8003700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003704:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003708:	4619      	mov	r1, r3
 800370a:	4610      	mov	r0, r2
 800370c:	f7ff f8d5 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003710:	4b44      	ldr	r3, [pc, #272]	@ (8003824 <HAL_ADC_ConfigChannel+0x86c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	4a44      	ldr	r2, [pc, #272]	@ (8003828 <HAL_ADC_ConfigChannel+0x870>)
 8003718:	fba2 2303 	umull	r2, r3, r2, r3
 800371c:	099b      	lsrs	r3, r3, #6
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800372a:	e002      	b.n	8003732 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3b01      	subs	r3, #1
 8003730:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f9      	bne.n	800372c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003738:	e05a      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a3b      	ldr	r2, [pc, #236]	@ (800382c <HAL_ADC_ConfigChannel+0x874>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d125      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d11f      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a31      	ldr	r2, [pc, #196]	@ (800381c <HAL_ADC_ConfigChannel+0x864>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d104      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x7ac>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a34      	ldr	r2, [pc, #208]	@ (8003830 <HAL_ADC_ConfigChannel+0x878>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d047      	beq.n	80037f4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800376c:	d004      	beq.n	8003778 <HAL_ADC_ConfigChannel+0x7c0>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2a      	ldr	r2, [pc, #168]	@ (800381c <HAL_ADC_ConfigChannel+0x864>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x7c4>
 8003778:	4a29      	ldr	r2, [pc, #164]	@ (8003820 <HAL_ADC_ConfigChannel+0x868>)
 800377a:	e000      	b.n	800377e <HAL_ADC_ConfigChannel+0x7c6>
 800377c:	4a23      	ldr	r2, [pc, #140]	@ (800380c <HAL_ADC_ConfigChannel+0x854>)
 800377e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003782:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003786:	4619      	mov	r1, r3
 8003788:	4610      	mov	r0, r2
 800378a:	f7ff f896 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800378e:	e031      	b.n	80037f4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a27      	ldr	r2, [pc, #156]	@ (8003834 <HAL_ADC_ConfigChannel+0x87c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d12d      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800379a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800379e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d127      	bne.n	80037f6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1c      	ldr	r2, [pc, #112]	@ (800381c <HAL_ADC_ConfigChannel+0x864>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b8:	d004      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x80c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a17      	ldr	r2, [pc, #92]	@ (800381c <HAL_ADC_ConfigChannel+0x864>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x810>
 80037c4:	4a16      	ldr	r2, [pc, #88]	@ (8003820 <HAL_ADC_ConfigChannel+0x868>)
 80037c6:	e000      	b.n	80037ca <HAL_ADC_ConfigChannel+0x812>
 80037c8:	4a10      	ldr	r2, [pc, #64]	@ (800380c <HAL_ADC_ConfigChannel+0x854>)
 80037ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff f870 	bl	80028ba <LL_ADC_SetCommonPathInternalCh>
 80037da:	e00c      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80037ee:	e002      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037f0:	bf00      	nop
 80037f2:	e000      	b.n	80037f6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80037fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003802:	4618      	mov	r0, r3
 8003804:	37d8      	adds	r7, #216	@ 0xd8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	50000700 	.word	0x50000700
 8003810:	c3210000 	.word	0xc3210000
 8003814:	90c00010 	.word	0x90c00010
 8003818:	50000600 	.word	0x50000600
 800381c:	50000100 	.word	0x50000100
 8003820:	50000300 	.word	0x50000300
 8003824:	20000210 	.word	0x20000210
 8003828:	053e2d63 	.word	0x053e2d63
 800382c:	c7520000 	.word	0xc7520000
 8003830:	50000500 	.word	0x50000500
 8003834:	cb840000 	.word	0xcb840000

08003838 <LL_ADC_IsEnabled>:
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <LL_ADC_IsEnabled+0x18>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <LL_ADC_IsEnabled+0x1a>
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <LL_ADC_REG_IsConversionOngoing>:
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b04      	cmp	r3, #4
 8003870:	d101      	bne.n	8003876 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b0a1      	sub	sp, #132	@ 0x84
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0e7      	b.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038aa:	2300      	movs	r3, #0
 80038ac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038ae:	2300      	movs	r3, #0
 80038b0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ba:	d102      	bne.n	80038c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80038bc:	4b6f      	ldr	r3, [pc, #444]	@ (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038be:	60bb      	str	r3, [r7, #8]
 80038c0:	e009      	b.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d102      	bne.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80038cc:	4b6d      	ldr	r3, [pc, #436]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	e001      	b.n	80038d6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0be      	b.n	8003a72 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff ffb1 	bl	800385e <LL_ADC_REG_IsConversionOngoing>
 80038fc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff ffab 	bl	800385e <LL_ADC_REG_IsConversionOngoing>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	f040 80a0 	bne.w	8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003910:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003912:	2b00      	cmp	r3, #0
 8003914:	f040 809c 	bne.w	8003a50 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003920:	d004      	beq.n	800392c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a55      	ldr	r2, [pc, #340]	@ (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d101      	bne.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800392c:	4b56      	ldr	r3, [pc, #344]	@ (8003a88 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800392e:	e000      	b.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003930:	4b56      	ldr	r3, [pc, #344]	@ (8003a8c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003932:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d04b      	beq.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800393c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	6859      	ldr	r1, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800394e:	035b      	lsls	r3, r3, #13
 8003950:	430b      	orrs	r3, r1
 8003952:	431a      	orrs	r2, r3
 8003954:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003956:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003960:	d004      	beq.n	800396c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a45      	ldr	r2, [pc, #276]	@ (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10f      	bne.n	800398c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800396c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003970:	f7ff ff62 	bl	8003838 <LL_ADC_IsEnabled>
 8003974:	4604      	mov	r4, r0
 8003976:	4841      	ldr	r0, [pc, #260]	@ (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003978:	f7ff ff5e 	bl	8003838 <LL_ADC_IsEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	4323      	orrs	r3, r4
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e012      	b.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800398c:	483c      	ldr	r0, [pc, #240]	@ (8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800398e:	f7ff ff53 	bl	8003838 <LL_ADC_IsEnabled>
 8003992:	4604      	mov	r4, r0
 8003994:	483b      	ldr	r0, [pc, #236]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003996:	f7ff ff4f 	bl	8003838 <LL_ADC_IsEnabled>
 800399a:	4603      	mov	r3, r0
 800399c:	431c      	orrs	r4, r3
 800399e:	483c      	ldr	r0, [pc, #240]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039a0:	f7ff ff4a 	bl	8003838 <LL_ADC_IsEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4323      	orrs	r3, r4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d056      	beq.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80039be:	f023 030f 	bic.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	6811      	ldr	r1, [r2, #0]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	6892      	ldr	r2, [r2, #8]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	431a      	orrs	r2, r3
 80039ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80039d2:	e047      	b.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039de:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039e8:	d004      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a23      	ldr	r2, [pc, #140]	@ (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d10f      	bne.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80039f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039f8:	f7ff ff1e 	bl	8003838 <LL_ADC_IsEnabled>
 80039fc:	4604      	mov	r4, r0
 80039fe:	481f      	ldr	r0, [pc, #124]	@ (8003a7c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a00:	f7ff ff1a 	bl	8003838 <LL_ADC_IsEnabled>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4323      	orrs	r3, r4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	e012      	b.n	8003a3a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a14:	481a      	ldr	r0, [pc, #104]	@ (8003a80 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a16:	f7ff ff0f 	bl	8003838 <LL_ADC_IsEnabled>
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4819      	ldr	r0, [pc, #100]	@ (8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a1e:	f7ff ff0b 	bl	8003838 <LL_ADC_IsEnabled>
 8003a22:	4603      	mov	r3, r0
 8003a24:	431c      	orrs	r4, r3
 8003a26:	481a      	ldr	r0, [pc, #104]	@ (8003a90 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a28:	f7ff ff06 	bl	8003838 <LL_ADC_IsEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	4323      	orrs	r3, r4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d012      	beq.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a46:	f023 030f 	bic.w	r3, r3, #15
 8003a4a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a4c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a4e:	e009      	b.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a54:	f043 0220 	orr.w	r2, r3, #32
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003a62:	e000      	b.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a64:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a6e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3784      	adds	r7, #132	@ 0x84
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	50000100 	.word	0x50000100
 8003a80:	50000400 	.word	0x50000400
 8003a84:	50000500 	.word	0x50000500
 8003a88:	50000300 	.word	0x50000300
 8003a8c:	50000700 	.word	0x50000700
 8003a90:	50000600 	.word	0x50000600

08003a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ac6:	4a04      	ldr	r2, [pc, #16]	@ (8003ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	60d3      	str	r3, [r2, #12]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae0:	4b04      	ldr	r3, [pc, #16]	@ (8003af4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 0307 	and.w	r3, r3, #7
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000ed00 	.word	0xe000ed00

08003af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	db0b      	blt.n	8003b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4907      	ldr	r1, [pc, #28]	@ (8003b30 <__NVIC_EnableIRQ+0x38>)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2001      	movs	r0, #1
 8003b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	db0a      	blt.n	8003b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	490c      	ldr	r1, [pc, #48]	@ (8003b80 <__NVIC_SetPriority+0x4c>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	0112      	lsls	r2, r2, #4
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	440b      	add	r3, r1
 8003b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b5c:	e00a      	b.n	8003b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	4908      	ldr	r1, [pc, #32]	@ (8003b84 <__NVIC_SetPriority+0x50>)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	3b04      	subs	r3, #4
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	440b      	add	r3, r1
 8003b72:	761a      	strb	r2, [r3, #24]
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr
 8003b80:	e000e100 	.word	0xe000e100
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b089      	sub	sp, #36	@ 0x24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 0307 	and.w	r3, r3, #7
 8003b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	f1c3 0307 	rsb	r3, r3, #7
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	bf28      	it	cs
 8003ba6:	2304      	movcs	r3, #4
 8003ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3304      	adds	r3, #4
 8003bae:	2b06      	cmp	r3, #6
 8003bb0:	d902      	bls.n	8003bb8 <NVIC_EncodePriority+0x30>
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3b03      	subs	r3, #3
 8003bb6:	e000      	b.n	8003bba <NVIC_EncodePriority+0x32>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43da      	mvns	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	401a      	ands	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bda:	43d9      	mvns	r1, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	4313      	orrs	r3, r2
         );
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3724      	adds	r7, #36	@ 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c00:	d301      	bcc.n	8003c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c02:	2301      	movs	r3, #1
 8003c04:	e00f      	b.n	8003c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c06:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <SysTick_Config+0x40>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c0e:	210f      	movs	r1, #15
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	f7ff ff8e 	bl	8003b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <SysTick_Config+0x40>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1e:	4b04      	ldr	r3, [pc, #16]	@ (8003c30 <SysTick_Config+0x40>)
 8003c20:	2207      	movs	r2, #7
 8003c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	e000e010 	.word	0xe000e010

08003c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff ff29 	bl	8003a94 <__NVIC_SetPriorityGrouping>
}
 8003c42:	bf00      	nop
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	4603      	mov	r3, r0
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
 8003c56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c58:	f7ff ff40 	bl	8003adc <__NVIC_GetPriorityGrouping>
 8003c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7ff ff90 	bl	8003b88 <NVIC_EncodePriority>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6e:	4611      	mov	r1, r2
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff ff5f 	bl	8003b34 <__NVIC_SetPriority>
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b082      	sub	sp, #8
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff ff33 	bl	8003af8 <__NVIC_EnableIRQ>
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffa4 	bl	8003bf0 <SysTick_Config>
 8003ca8:	4603      	mov	r3, r0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e08d      	b.n	8003de2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b47      	ldr	r3, [pc, #284]	@ (8003dec <HAL_DMA_Init+0x138>)
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d80f      	bhi.n	8003cf2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b45      	ldr	r3, [pc, #276]	@ (8003df0 <HAL_DMA_Init+0x13c>)
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a45      	ldr	r2, [pc, #276]	@ (8003df4 <HAL_DMA_Init+0x140>)
 8003cde:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	009a      	lsls	r2, r3, #2
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a42      	ldr	r2, [pc, #264]	@ (8003df8 <HAL_DMA_Init+0x144>)
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40
 8003cf0:	e00e      	b.n	8003d10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4b40      	ldr	r3, [pc, #256]	@ (8003dfc <HAL_DMA_Init+0x148>)
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8003df4 <HAL_DMA_Init+0x140>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	091b      	lsrs	r3, r3, #4
 8003d04:	009a      	lsls	r2, r3, #2
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e00 <HAL_DMA_Init+0x14c>)
 8003d0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa82 	bl	800426c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d70:	d102      	bne.n	8003d78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_DMA_Init+0x104>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d80c      	bhi.n	8003db8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 faa2 	bl	80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40020407 	.word	0x40020407
 8003df0:	bffdfff8 	.word	0xbffdfff8
 8003df4:	cccccccd 	.word	0xcccccccd
 8003df8:	40020000 	.word	0x40020000
 8003dfc:	bffdfbf8 	.word	0xbffdfbf8
 8003e00:	40020400 	.word	0x40020400

08003e04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_DMA_Start_IT+0x20>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e066      	b.n	8003ef2 <HAL_DMA_Start_IT+0xee>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d155      	bne.n	8003ee4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f9c7 	bl	80041f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d008      	beq.n	8003e7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 020e 	orr.w	r2, r2, #14
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e00f      	b.n	8003e9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0204 	bic.w	r2, r2, #4
 8003e8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 020a 	orr.w	r2, r2, #10
 8003e9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d007      	beq.n	8003ed2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	e005      	b.n	8003ef0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b085      	sub	sp, #20
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d005      	beq.n	8003f1e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2204      	movs	r2, #4
 8003f16:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
 8003f1c:	e037      	b.n	8003f8e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 020e 	bic.w	r2, r2, #14
 8003f2c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f3c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f003 021f 	and.w	r2, r3, #31
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f60:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f6a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00c      	beq.n	8003f8e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f82:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f8c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d00d      	beq.n	8003fe0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	73fb      	strb	r3, [r7, #15]
 8003fde:	e047      	b.n	8004070 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 020e 	bic.w	r2, r2, #14
 8003fee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 0201 	bic.w	r2, r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800400a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800400e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004014:	f003 021f 	and.w	r2, r3, #31
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401c:	2101      	movs	r1, #1
 800401e:	fa01 f202 	lsl.w	r2, r1, r2
 8004022:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800402c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00c      	beq.n	8004050 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004044:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800404e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	4798      	blx	r3
    }
  }
  return status;
 8004070:	7bfb      	ldrb	r3, [r7, #15]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2204      	movs	r2, #4
 800409c:	409a      	lsls	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4013      	ands	r3, r2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d026      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x7a>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d021      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 0204 	bic.w	r2, r2, #4
 80040cc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	f003 021f 	and.w	r2, r3, #31
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	2104      	movs	r1, #4
 80040dc:	fa01 f202 	lsl.w	r2, r1, r2
 80040e0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d071      	beq.n	80041ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040f2:	e06c      	b.n	80041ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2202      	movs	r2, #2
 80040fe:	409a      	lsls	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d02e      	beq.n	8004166 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d029      	beq.n	8004166 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 020a 	bic.w	r2, r2, #10
 800412e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	2102      	movs	r1, #2
 8004146:	fa01 f202 	lsl.w	r2, r1, r2
 800414a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d038      	beq.n	80041ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004164:	e033      	b.n	80041ce <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	2208      	movs	r2, #8
 8004170:	409a      	lsls	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4013      	ands	r3, r2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d02a      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d025      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 020e 	bic.w	r2, r2, #14
 8004192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	2101      	movs	r1, #1
 80041a2:	fa01 f202 	lsl.w	r2, r1, r2
 80041a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
}
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004206:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004218:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f003 021f 	and.w	r2, r3, #31
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f202 	lsl.w	r2, r1, r2
 800422c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b10      	cmp	r3, #16
 800423c:	d108      	bne.n	8004250 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800424e:	e007      	b.n	8004260 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	68ba      	ldr	r2, [r7, #8]
 8004256:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	60da      	str	r2, [r3, #12]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	4b16      	ldr	r3, [pc, #88]	@ (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800427c:	429a      	cmp	r2, r3
 800427e:	d802      	bhi.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004280:	4b15      	ldr	r3, [pc, #84]	@ (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e001      	b.n	800428a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004286:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004288:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b2db      	uxtb	r3, r3
 8004294:	3b08      	subs	r3, #8
 8004296:	4a12      	ldr	r2, [pc, #72]	@ (80042e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	461a      	mov	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a0b      	ldr	r2, [pc, #44]	@ (80042e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 031f 	and.w	r3, r3, #31
 80042be:	2201      	movs	r2, #1
 80042c0:	409a      	lsls	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40020407 	.word	0x40020407
 80042d8:	40020800 	.word	0x40020800
 80042dc:	40020820 	.word	0x40020820
 80042e0:	cccccccd 	.word	0xcccccccd
 80042e4:	40020880 	.word	0x40020880

080042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	461a      	mov	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a08      	ldr	r2, [pc, #32]	@ (800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800430a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3b01      	subs	r3, #1
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	2201      	movs	r2, #1
 8004316:	409a      	lsls	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	1000823f 	.word	0x1000823f
 800432c:	40020940 	.word	0x40020940

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800433e:	e15a      	b.n	80045f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	2101      	movs	r1, #1
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	fa01 f303 	lsl.w	r3, r1, r3
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 814c 	beq.w	80045f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f003 0303 	and.w	r3, r3, #3
 8004360:	2b01      	cmp	r3, #1
 8004362:	d005      	beq.n	8004370 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800436c:	2b02      	cmp	r3, #2
 800436e:	d130      	bne.n	80043d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	2203      	movs	r2, #3
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4013      	ands	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043a6:	2201      	movs	r2, #1
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	f003 0201 	and.w	r2, r3, #1
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d017      	beq.n	800440e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	2203      	movs	r2, #3
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4013      	ands	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d123      	bne.n	8004462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	08da      	lsrs	r2, r3, #3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3208      	adds	r2, #8
 8004422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	220f      	movs	r2, #15
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	43db      	mvns	r3, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4013      	ands	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	08da      	lsrs	r2, r3, #3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3208      	adds	r2, #8
 800445c:	6939      	ldr	r1, [r7, #16]
 800445e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	2203      	movs	r2, #3
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43db      	mvns	r3, r3
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4013      	ands	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 0203 	and.w	r2, r3, #3
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	fa02 f303 	lsl.w	r3, r2, r3
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4313      	orrs	r3, r2
 800448e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f000 80a6 	beq.w	80045f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a4:	4b5b      	ldr	r3, [pc, #364]	@ (8004614 <HAL_GPIO_Init+0x2e4>)
 80044a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a8:	4a5a      	ldr	r2, [pc, #360]	@ (8004614 <HAL_GPIO_Init+0x2e4>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80044b0:	4b58      	ldr	r3, [pc, #352]	@ (8004614 <HAL_GPIO_Init+0x2e4>)
 80044b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044bc:	4a56      	ldr	r2, [pc, #344]	@ (8004618 <HAL_GPIO_Init+0x2e8>)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	3302      	adds	r3, #2
 80044c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	220f      	movs	r2, #15
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044e6:	d01f      	beq.n	8004528 <HAL_GPIO_Init+0x1f8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a4c      	ldr	r2, [pc, #304]	@ (800461c <HAL_GPIO_Init+0x2ec>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d019      	beq.n	8004524 <HAL_GPIO_Init+0x1f4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a4b      	ldr	r2, [pc, #300]	@ (8004620 <HAL_GPIO_Init+0x2f0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_GPIO_Init+0x1f0>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004624 <HAL_GPIO_Init+0x2f4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00d      	beq.n	800451c <HAL_GPIO_Init+0x1ec>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a49      	ldr	r2, [pc, #292]	@ (8004628 <HAL_GPIO_Init+0x2f8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <HAL_GPIO_Init+0x1e8>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a48      	ldr	r2, [pc, #288]	@ (800462c <HAL_GPIO_Init+0x2fc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d101      	bne.n	8004514 <HAL_GPIO_Init+0x1e4>
 8004510:	2305      	movs	r3, #5
 8004512:	e00a      	b.n	800452a <HAL_GPIO_Init+0x1fa>
 8004514:	2306      	movs	r3, #6
 8004516:	e008      	b.n	800452a <HAL_GPIO_Init+0x1fa>
 8004518:	2304      	movs	r3, #4
 800451a:	e006      	b.n	800452a <HAL_GPIO_Init+0x1fa>
 800451c:	2303      	movs	r3, #3
 800451e:	e004      	b.n	800452a <HAL_GPIO_Init+0x1fa>
 8004520:	2302      	movs	r3, #2
 8004522:	e002      	b.n	800452a <HAL_GPIO_Init+0x1fa>
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_GPIO_Init+0x1fa>
 8004528:	2300      	movs	r3, #0
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	f002 0203 	and.w	r2, r2, #3
 8004530:	0092      	lsls	r2, r2, #2
 8004532:	4093      	lsls	r3, r2
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800453a:	4937      	ldr	r1, [pc, #220]	@ (8004618 <HAL_GPIO_Init+0x2e8>)
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	089b      	lsrs	r3, r3, #2
 8004540:	3302      	adds	r3, #2
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004548:	4b39      	ldr	r3, [pc, #228]	@ (8004630 <HAL_GPIO_Init+0x300>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	43db      	mvns	r3, r3
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4013      	ands	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800456c:	4a30      	ldr	r2, [pc, #192]	@ (8004630 <HAL_GPIO_Init+0x300>)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004572:	4b2f      	ldr	r3, [pc, #188]	@ (8004630 <HAL_GPIO_Init+0x300>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	43db      	mvns	r3, r3
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4013      	ands	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004596:	4a26      	ldr	r2, [pc, #152]	@ (8004630 <HAL_GPIO_Init+0x300>)
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800459c:	4b24      	ldr	r3, [pc, #144]	@ (8004630 <HAL_GPIO_Init+0x300>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4013      	ands	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045c0:	4a1b      	ldr	r2, [pc, #108]	@ (8004630 <HAL_GPIO_Init+0x300>)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004630 <HAL_GPIO_Init+0x300>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	43db      	mvns	r3, r3
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4013      	ands	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ea:	4a11      	ldr	r2, [pc, #68]	@ (8004630 <HAL_GPIO_Init+0x300>)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	3301      	adds	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	f47f ae9d 	bne.w	8004340 <HAL_GPIO_Init+0x10>
  }
}
 8004606:	bf00      	nop
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40021000 	.word	0x40021000
 8004618:	40010000 	.word	0x40010000
 800461c:	48000400 	.word	0x48000400
 8004620:	48000800 	.word	0x48000800
 8004624:	48000c00 	.word	0x48000c00
 8004628:	48001000 	.word	0x48001000
 800462c:	48001400 	.word	0x48001400
 8004630:	40010400 	.word	0x40010400

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004650:	e002      	b.n	8004658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	4603      	mov	r3, r0
 800466c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800466e:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004670:	695a      	ldr	r2, [r3, #20]
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800467a:	4a05      	ldr	r2, [pc, #20]	@ (8004690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800467c:	88fb      	ldrh	r3, [r7, #6]
 800467e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004680:	88fb      	ldrh	r3, [r7, #6]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd fc7a 	bl	8001f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40010400 	.word	0x40010400

08004694 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d141      	bne.n	8004726 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046a2:	4b4b      	ldr	r3, [pc, #300]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ae:	d131      	bne.n	8004714 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046b0:	4b47      	ldr	r3, [pc, #284]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046b6:	4a46      	ldr	r2, [pc, #280]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046c0:	4b43      	ldr	r3, [pc, #268]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80046c8:	4a41      	ldr	r2, [pc, #260]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046d0:	4b40      	ldr	r3, [pc, #256]	@ (80047d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2232      	movs	r2, #50	@ 0x32
 80046d6:	fb02 f303 	mul.w	r3, r2, r3
 80046da:	4a3f      	ldr	r2, [pc, #252]	@ (80047d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046dc:	fba2 2303 	umull	r2, r3, r2, r3
 80046e0:	0c9b      	lsrs	r3, r3, #18
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046e6:	e002      	b.n	80046ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ee:	4b38      	ldr	r3, [pc, #224]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d102      	bne.n	8004702 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004702:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800470a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800470e:	d158      	bne.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e057      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004714:	4b2e      	ldr	r3, [pc, #184]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800471a:	4a2d      	ldr	r2, [pc, #180]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004720:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004724:	e04d      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800472c:	d141      	bne.n	80047b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800472e:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004736:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800473a:	d131      	bne.n	80047a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800473c:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004742:	4a23      	ldr	r2, [pc, #140]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004748:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004754:	4a1e      	ldr	r2, [pc, #120]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004756:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800475a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800475c:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2232      	movs	r2, #50	@ 0x32
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	4a1c      	ldr	r2, [pc, #112]	@ (80047d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	0c9b      	lsrs	r3, r3, #18
 800476e:	3301      	adds	r3, #1
 8004770:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004772:	e002      	b.n	800477a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3b01      	subs	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800477a:	4b15      	ldr	r3, [pc, #84]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004786:	d102      	bne.n	800478e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f2      	bne.n	8004774 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800478e:	4b10      	ldr	r3, [pc, #64]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479a:	d112      	bne.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e011      	b.n	80047c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a0:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a6:	4a0a      	ldr	r2, [pc, #40]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047b0:	e007      	b.n	80047c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047b2:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047ba:	4a05      	ldr	r2, [pc, #20]	@ (80047d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40007000 	.word	0x40007000
 80047d4:	20000210 	.word	0x20000210
 80047d8:	431bde83 	.word	0x431bde83

080047dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80047e0:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4a04      	ldr	r2, [pc, #16]	@ (80047f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80047e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ea:	6093      	str	r3, [r2, #8]
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40007000 	.word	0x40007000

080047fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e2fe      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d075      	beq.n	8004906 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481a:	4b97      	ldr	r3, [pc, #604]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004824:	4b94      	ldr	r3, [pc, #592]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d102      	bne.n	800483a <HAL_RCC_OscConfig+0x3e>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d002      	beq.n	8004840 <HAL_RCC_OscConfig+0x44>
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d10b      	bne.n	8004858 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004840:	4b8d      	ldr	r3, [pc, #564]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d05b      	beq.n	8004904 <HAL_RCC_OscConfig+0x108>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d157      	bne.n	8004904 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e2d9      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004860:	d106      	bne.n	8004870 <HAL_RCC_OscConfig+0x74>
 8004862:	4b85      	ldr	r3, [pc, #532]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a84      	ldr	r2, [pc, #528]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e01d      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0x98>
 800487a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a7e      	ldr	r2, [pc, #504]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b7c      	ldr	r3, [pc, #496]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7b      	ldr	r2, [pc, #492]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0xb0>
 8004894:	4b78      	ldr	r3, [pc, #480]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a77      	ldr	r2, [pc, #476]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800489a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b75      	ldr	r3, [pc, #468]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a74      	ldr	r2, [pc, #464]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fd ffc0 	bl	8002838 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fd ffbc 	bl	8002838 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	@ 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e29e      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0xc0>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fd ffac 	bl	8002838 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fd ffa8 	bl	8002838 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	@ 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e28a      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80048f6:	4b60      	ldr	r3, [pc, #384]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0xe8>
 8004902:	e000      	b.n	8004906 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d075      	beq.n	80049fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004912:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491c:	4b56      	ldr	r3, [pc, #344]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d102      	bne.n	8004932 <HAL_RCC_OscConfig+0x136>
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d002      	beq.n	8004938 <HAL_RCC_OscConfig+0x13c>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11f      	bne.n	8004978 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004938:	4b4f      	ldr	r3, [pc, #316]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_OscConfig+0x154>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e25d      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b49      	ldr	r3, [pc, #292]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	061b      	lsls	r3, r3, #24
 800495e:	4946      	ldr	r1, [pc, #280]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004960:	4313      	orrs	r3, r2
 8004962:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004964:	4b45      	ldr	r3, [pc, #276]	@ (8004a7c <HAL_RCC_OscConfig+0x280>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4618      	mov	r0, r3
 800496a:	f7fd ff19 	bl	80027a0 <HAL_InitTick>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d043      	beq.n	80049fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e249      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d023      	beq.n	80049c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004980:	4b3d      	ldr	r3, [pc, #244]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3c      	ldr	r2, [pc, #240]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498c:	f7fd ff54 	bl	8002838 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004994:	f7fd ff50 	bl	8002838 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e232      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049a6:	4b34      	ldr	r3, [pc, #208]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b2:	4b31      	ldr	r3, [pc, #196]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	061b      	lsls	r3, r3, #24
 80049c0:	492d      	ldr	r1, [pc, #180]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	604b      	str	r3, [r1, #4]
 80049c6:	e01a      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d4:	f7fd ff30 	bl	8002838 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049dc:	f7fd ff2c 	bl	8002838 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e20e      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ee:	4b22      	ldr	r3, [pc, #136]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x1e0>
 80049fa:	e000      	b.n	80049fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d041      	beq.n	8004a8e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d01c      	beq.n	8004a4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a12:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a22:	f7fd ff09 	bl	8002838 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2a:	f7fd ff05 	bl	8002838 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e1e7      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d0ef      	beq.n	8004a2a <HAL_RCC_OscConfig+0x22e>
 8004a4a:	e020      	b.n	8004a8e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a52:	4a09      	ldr	r2, [pc, #36]	@ (8004a78 <HAL_RCC_OscConfig+0x27c>)
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5c:	f7fd feec 	bl	8002838 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a62:	e00d      	b.n	8004a80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a64:	f7fd fee8 	bl	8002838 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d906      	bls.n	8004a80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e1ca      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	20000214 	.word	0x20000214
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a80:	4b8c      	ldr	r3, [pc, #560]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1ea      	bne.n	8004a64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80a6 	beq.w	8004be8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aa0:	4b84      	ldr	r3, [pc, #528]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2b4>
 8004aac:	2301      	movs	r3, #1
 8004aae:	e000      	b.n	8004ab2 <HAL_RCC_OscConfig+0x2b6>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aba:	4a7e      	ldr	r2, [pc, #504]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ad2:	4b79      	ldr	r3, [pc, #484]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ade:	4b76      	ldr	r3, [pc, #472]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a75      	ldr	r2, [pc, #468]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fd fea5 	bl	8002838 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fd fea1 	bl	8002838 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e183      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b04:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb8 <HAL_RCC_OscConfig+0x4bc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d108      	bne.n	8004b2a <HAL_RCC_OscConfig+0x32e>
 8004b18:	4b66      	ldr	r3, [pc, #408]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b1e:	4a65      	ldr	r2, [pc, #404]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b28:	e024      	b.n	8004b74 <HAL_RCC_OscConfig+0x378>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d110      	bne.n	8004b54 <HAL_RCC_OscConfig+0x358>
 8004b32:	4b60      	ldr	r3, [pc, #384]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b38:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b42:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b48:	4a5a      	ldr	r2, [pc, #360]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b52:	e00f      	b.n	8004b74 <HAL_RCC_OscConfig+0x378>
 8004b54:	4b57      	ldr	r3, [pc, #348]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5a:	4a56      	ldr	r2, [pc, #344]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b5c:	f023 0301 	bic.w	r3, r3, #1
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b64:	4b53      	ldr	r3, [pc, #332]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	4a52      	ldr	r2, [pc, #328]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	f023 0304 	bic.w	r3, r3, #4
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d016      	beq.n	8004baa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7c:	f7fd fe5c 	bl	8002838 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b82:	e00a      	b.n	8004b9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b84:	f7fd fe58 	bl	8002838 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e138      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	4b46      	ldr	r3, [pc, #280]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ed      	beq.n	8004b84 <HAL_RCC_OscConfig+0x388>
 8004ba8:	e015      	b.n	8004bd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fd fe45 	bl	8002838 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb0:	e00a      	b.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb2:	f7fd fe41 	bl	8002838 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e121      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bc8:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ed      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b35      	ldr	r3, [pc, #212]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be0:	4a34      	ldr	r2, [pc, #208]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0320 	and.w	r3, r3, #32
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d03c      	beq.n	8004c6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01c      	beq.n	8004c36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c02:	4a2c      	ldr	r2, [pc, #176]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fd fe14 	bl	8002838 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c14:	f7fd fe10 	bl	8002838 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0f2      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c26:	4b23      	ldr	r3, [pc, #140]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ef      	beq.n	8004c14 <HAL_RCC_OscConfig+0x418>
 8004c34:	e01b      	b.n	8004c6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c36:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c46:	f7fd fdf7 	bl	8002838 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c4e:	f7fd fdf3 	bl	8002838 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0d5      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c60:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ef      	bne.n	8004c4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80c9 	beq.w	8004e0a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c78:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f003 030c 	and.w	r3, r3, #12
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	f000 8083 	beq.w	8004d8c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d15e      	bne.n	8004d4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8e:	4b09      	ldr	r3, [pc, #36]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a08      	ldr	r2, [pc, #32]	@ (8004cb4 <HAL_RCC_OscConfig+0x4b8>)
 8004c94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fd fdcd 	bl	8002838 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca0:	e00c      	b.n	8004cbc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fd fdc9 	bl	8002838 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d905      	bls.n	8004cbc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e0ab      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	4b55      	ldr	r3, [pc, #340]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1ec      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc8:	4b52      	ldr	r3, [pc, #328]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b52      	ldr	r3, [pc, #328]	@ (8004e18 <HAL_RCC_OscConfig+0x61c>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6a11      	ldr	r1, [r2, #32]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cd8:	3a01      	subs	r2, #1
 8004cda:	0112      	lsls	r2, r2, #4
 8004cdc:	4311      	orrs	r1, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004ce2:	0212      	lsls	r2, r2, #8
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004cea:	0852      	lsrs	r2, r2, #1
 8004cec:	3a01      	subs	r2, #1
 8004cee:	0552      	lsls	r2, r2, #21
 8004cf0:	4311      	orrs	r1, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004cf6:	0852      	lsrs	r2, r2, #1
 8004cf8:	3a01      	subs	r2, #1
 8004cfa:	0652      	lsls	r2, r2, #25
 8004cfc:	4311      	orrs	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d02:	06d2      	lsls	r2, r2, #27
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4943      	ldr	r1, [pc, #268]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0c:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a40      	ldr	r2, [pc, #256]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d18:	4b3e      	ldr	r3, [pc, #248]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd fd88 	bl	8002838 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd fd84 	bl	8002838 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e066      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d3e:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x530>
 8004d4a:	e05e      	b.n	8004e0a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b31      	ldr	r3, [pc, #196]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a30      	ldr	r2, [pc, #192]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d58:	f7fd fd6e 	bl	8002838 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d60:	f7fd fd6a 	bl	8002838 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e04c      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d72:	4b28      	ldr	r3, [pc, #160]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d1f0      	bne.n	8004d60 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d7e:	4b25      	ldr	r3, [pc, #148]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	4924      	ldr	r1, [pc, #144]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d84:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <HAL_RCC_OscConfig+0x620>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	60cb      	str	r3, [r1, #12]
 8004d8a:	e03e      	b.n	8004e0a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69db      	ldr	r3, [r3, #28]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e039      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <HAL_RCC_OscConfig+0x618>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0203 	and.w	r2, r3, #3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d12c      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	3b01      	subs	r3, #1
 8004db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d123      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d11b      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d113      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de8:	085b      	lsrs	r3, r3, #1
 8004dea:	3b01      	subs	r3, #1
 8004dec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d109      	bne.n	8004e06 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d001      	beq.n	8004e0a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e000      	b.n	8004e0c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40021000 	.word	0x40021000
 8004e18:	019f800c 	.word	0x019f800c
 8004e1c:	feeefffc 	.word	0xfeeefffc

08004e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e11e      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b91      	ldr	r3, [pc, #580]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d910      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b8e      	ldr	r3, [pc, #568]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 020f 	bic.w	r2, r3, #15
 8004e4e:	498c      	ldr	r1, [pc, #560]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b8a      	ldr	r3, [pc, #552]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e106      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d073      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d129      	bne.n	8004ed0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7c:	4b81      	ldr	r3, [pc, #516]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e0f4      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004e8c:	f000 f99e 	bl	80051cc <RCC_GetSysClockFreqFromPLLSource>
 8004e90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	4a7c      	ldr	r2, [pc, #496]	@ (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d93f      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e9a:	4b7a      	ldr	r3, [pc, #488]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d033      	beq.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d12f      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004eba:	4b72      	ldr	r3, [pc, #456]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ec2:	4a70      	ldr	r2, [pc, #448]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ec8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e024      	b.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d107      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0c6      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee8:	4b66      	ldr	r3, [pc, #408]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0be      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ef8:	f000 f8ce 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8004efc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4a61      	ldr	r2, [pc, #388]	@ (8005088 <HAL_RCC_ClockConfig+0x268>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d909      	bls.n	8004f1a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f06:	4b5f      	ldr	r3, [pc, #380]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f0e:	4a5d      	ldr	r2, [pc, #372]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f14:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f023 0203 	bic.w	r2, r3, #3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	4957      	ldr	r1, [pc, #348]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f2c:	f7fd fc84 	bl	8002838 <HAL_GetTick>
 8004f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f34:	f7fd fc80 	bl	8002838 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e095      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f4a:	4b4e      	ldr	r3, [pc, #312]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 020c 	and.w	r2, r3, #12
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d1eb      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f74:	4b43      	ldr	r3, [pc, #268]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f7e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d007      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f94:	4a3b      	ldr	r2, [pc, #236]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f96:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f9c:	4b39      	ldr	r3, [pc, #228]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4936      	ldr	r1, [pc, #216]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	608b      	str	r3, [r1, #8]
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2b80      	cmp	r3, #128	@ 0x80
 8004fb4:	d105      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fb6:	4b33      	ldr	r3, [pc, #204]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	4a32      	ldr	r2, [pc, #200]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8004fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fc0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d21d      	bcs.n	800500c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 020f 	bic.w	r2, r3, #15
 8004fd8:	4929      	ldr	r1, [pc, #164]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fe0:	f7fd fc2a 	bl	8002838 <HAL_GetTick>
 8004fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fe8:	f7fd fc26 	bl	8002838 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e03b      	b.n	8005076 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffe:	4b20      	ldr	r3, [pc, #128]	@ (8005080 <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 030f 	and.w	r3, r3, #15
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d1ed      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005018:	4b1a      	ldr	r3, [pc, #104]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	4917      	ldr	r1, [pc, #92]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005036:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	490f      	ldr	r1, [pc, #60]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005046:	4313      	orrs	r3, r2
 8005048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800504a:	f000 f825 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800504e:	4602      	mov	r2, r0
 8005050:	4b0c      	ldr	r3, [pc, #48]	@ (8005084 <HAL_RCC_ClockConfig+0x264>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	490c      	ldr	r1, [pc, #48]	@ (800508c <HAL_RCC_ClockConfig+0x26c>)
 800505c:	5ccb      	ldrb	r3, [r1, r3]
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	fa22 f303 	lsr.w	r3, r2, r3
 8005066:	4a0a      	ldr	r2, [pc, #40]	@ (8005090 <HAL_RCC_ClockConfig+0x270>)
 8005068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800506a:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <HAL_RCC_ClockConfig+0x274>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7fd fb96 	bl	80027a0 <HAL_InitTick>
 8005074:	4603      	mov	r3, r0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	40022000 	.word	0x40022000
 8005084:	40021000 	.word	0x40021000
 8005088:	04c4b400 	.word	0x04c4b400
 800508c:	0800a99c 	.word	0x0800a99c
 8005090:	20000210 	.word	0x20000210
 8005094:	20000214 	.word	0x20000214

08005098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	b480      	push	{r7}
 800509a:	b087      	sub	sp, #28
 800509c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800509e:	4b2c      	ldr	r3, [pc, #176]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d102      	bne.n	80050b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050ac:	613b      	str	r3, [r7, #16]
 80050ae:	e047      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050b0:	4b27      	ldr	r3, [pc, #156]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d102      	bne.n	80050c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050bc:	4b26      	ldr	r3, [pc, #152]	@ (8005158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050be:	613b      	str	r3, [r7, #16]
 80050c0:	e03e      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80050c2:	4b23      	ldr	r3, [pc, #140]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b0c      	cmp	r3, #12
 80050cc:	d136      	bne.n	800513c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050ce:	4b20      	ldr	r3, [pc, #128]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	091b      	lsrs	r3, r3, #4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	3301      	adds	r3, #1
 80050e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005158 <HAL_RCC_GetSysClockFreq+0xc0>)
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a16      	ldr	r2, [pc, #88]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f6:	68d2      	ldr	r2, [r2, #12]
 80050f8:	0a12      	lsrs	r2, r2, #8
 80050fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	617b      	str	r3, [r7, #20]
      break;
 8005104:	e00c      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005106:	4a13      	ldr	r2, [pc, #76]	@ (8005154 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	fbb2 f3f3 	udiv	r3, r2, r3
 800510e:	4a10      	ldr	r2, [pc, #64]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005110:	68d2      	ldr	r2, [r2, #12]
 8005112:	0a12      	lsrs	r2, r2, #8
 8005114:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
      break;
 800511e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005120:	4b0b      	ldr	r3, [pc, #44]	@ (8005150 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	0e5b      	lsrs	r3, r3, #25
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	3301      	adds	r3, #1
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	fbb2 f3f3 	udiv	r3, r2, r3
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e001      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005140:	693b      	ldr	r3, [r7, #16]
}
 8005142:	4618      	mov	r0, r3
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	40021000 	.word	0x40021000
 8005154:	00f42400 	.word	0x00f42400
 8005158:	016e3600 	.word	0x016e3600

0800515c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005160:	4b03      	ldr	r3, [pc, #12]	@ (8005170 <HAL_RCC_GetHCLKFreq+0x14>)
 8005162:	681b      	ldr	r3, [r3, #0]
}
 8005164:	4618      	mov	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	20000210 	.word	0x20000210

08005174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005178:	f7ff fff0 	bl	800515c <HAL_RCC_GetHCLKFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	4904      	ldr	r1, [pc, #16]	@ (800519c <HAL_RCC_GetPCLK1Freq+0x28>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005194:	4618      	mov	r0, r3
 8005196:	bd80      	pop	{r7, pc}
 8005198:	40021000 	.word	0x40021000
 800519c:	0800a9ac 	.word	0x0800a9ac

080051a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051a4:	f7ff ffda 	bl	800515c <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b06      	ldr	r3, [pc, #24]	@ (80051c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0adb      	lsrs	r3, r3, #11
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4904      	ldr	r1, [pc, #16]	@ (80051c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40021000 	.word	0x40021000
 80051c8:	0800a9ac 	.word	0x0800a9ac

080051cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051d2:	4b1e      	ldr	r3, [pc, #120]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051dc:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d10c      	bne.n	800520a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051f0:	4a17      	ldr	r2, [pc, #92]	@ (8005250 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f8:	4a14      	ldr	r2, [pc, #80]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051fa:	68d2      	ldr	r2, [r2, #12]
 80051fc:	0a12      	lsrs	r2, r2, #8
 80051fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	617b      	str	r3, [r7, #20]
    break;
 8005208:	e00c      	b.n	8005224 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800520a:	4a12      	ldr	r2, [pc, #72]	@ (8005254 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005212:	4a0e      	ldr	r2, [pc, #56]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005214:	68d2      	ldr	r2, [r2, #12]
 8005216:	0a12      	lsrs	r2, r2, #8
 8005218:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800521c:	fb02 f303 	mul.w	r3, r2, r3
 8005220:	617b      	str	r3, [r7, #20]
    break;
 8005222:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005224:	4b09      	ldr	r3, [pc, #36]	@ (800524c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	0e5b      	lsrs	r3, r3, #25
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	3301      	adds	r3, #1
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	fbb2 f3f3 	udiv	r3, r2, r3
 800523c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800523e:	687b      	ldr	r3, [r7, #4]
}
 8005240:	4618      	mov	r0, r3
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	40021000 	.word	0x40021000
 8005250:	016e3600 	.word	0x016e3600
 8005254:	00f42400 	.word	0x00f42400

08005258 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005260:	2300      	movs	r3, #0
 8005262:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005264:	2300      	movs	r3, #0
 8005266:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8098 	beq.w	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800527a:	4b43      	ldr	r3, [pc, #268]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800527c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800527e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10d      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b40      	ldr	r3, [pc, #256]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528a:	4a3f      	ldr	r2, [pc, #252]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005290:	6593      	str	r3, [r2, #88]	@ 0x58
 8005292:	4b3d      	ldr	r3, [pc, #244]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529e:	2301      	movs	r3, #1
 80052a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052a2:	4b3a      	ldr	r3, [pc, #232]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a39      	ldr	r2, [pc, #228]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ae:	f7fd fac3 	bl	8002838 <HAL_GetTick>
 80052b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b4:	e009      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fd fabf 	bl	8002838 <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d902      	bls.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	74fb      	strb	r3, [r7, #19]
        break;
 80052c8:	e005      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052ca:	4b30      	ldr	r3, [pc, #192]	@ (800538c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0ef      	beq.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80052d6:	7cfb      	ldrb	r3, [r7, #19]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d159      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d01e      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d019      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052f8:	4b23      	ldr	r3, [pc, #140]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005302:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005304:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005310:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005314:	4b1c      	ldr	r3, [pc, #112]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531a:	4a1b      	ldr	r2, [pc, #108]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005324:	4a18      	ldr	r2, [pc, #96]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005336:	f7fd fa7f 	bl	8002838 <HAL_GetTick>
 800533a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533c:	e00b      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800533e:	f7fd fa7b 	bl	8002838 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534c:	4293      	cmp	r3, r2
 800534e:	d902      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	74fb      	strb	r3, [r7, #19]
            break;
 8005354:	e006      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005356:	4b0c      	ldr	r3, [pc, #48]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0ec      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005364:	7cfb      	ldrb	r3, [r7, #19]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800536a:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005370:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005378:	4903      	ldr	r1, [pc, #12]	@ (8005388 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005380:	e008      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005382:	7cfb      	ldrb	r3, [r7, #19]
 8005384:	74bb      	strb	r3, [r7, #18]
 8005386:	e005      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005388:	40021000 	.word	0x40021000
 800538c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005394:	7c7b      	ldrb	r3, [r7, #17]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d105      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539a:	4ba7      	ldr	r3, [pc, #668]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800539e:	4aa6      	ldr	r2, [pc, #664]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053b2:	4ba1      	ldr	r3, [pc, #644]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053b8:	f023 0203 	bic.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	499d      	ldr	r1, [pc, #628]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053d4:	4b98      	ldr	r3, [pc, #608]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053da:	f023 020c 	bic.w	r2, r3, #12
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	4995      	ldr	r1, [pc, #596]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053f6:	4b90      	ldr	r3, [pc, #576]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	498c      	ldr	r1, [pc, #560]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005406:	4313      	orrs	r3, r2
 8005408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005418:	4b87      	ldr	r3, [pc, #540]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	4984      	ldr	r1, [pc, #528]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005428:	4313      	orrs	r3, r2
 800542a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800543a:	4b7f      	ldr	r3, [pc, #508]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800543c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	497b      	ldr	r1, [pc, #492]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00a      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800545c:	4b76      	ldr	r3, [pc, #472]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	4973      	ldr	r1, [pc, #460]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800546c:	4313      	orrs	r3, r2
 800546e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800547e:	4b6e      	ldr	r3, [pc, #440]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005484:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	496a      	ldr	r1, [pc, #424]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054a0:	4b65      	ldr	r3, [pc, #404]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	4962      	ldr	r1, [pc, #392]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c2:	4b5d      	ldr	r3, [pc, #372]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	4959      	ldr	r1, [pc, #356]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054e4:	4b54      	ldr	r3, [pc, #336]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f2:	4951      	ldr	r1, [pc, #324]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005506:	4b4c      	ldr	r3, [pc, #304]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800550c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	4948      	ldr	r1, [pc, #288]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d015      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005528:	4b43      	ldr	r3, [pc, #268]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800552a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800552e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005536:	4940      	ldr	r1, [pc, #256]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005538:	4313      	orrs	r3, r2
 800553a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005546:	d105      	bne.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005548:	4b3b      	ldr	r3, [pc, #236]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	4a3a      	ldr	r2, [pc, #232]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005552:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800555c:	2b00      	cmp	r3, #0
 800555e:	d015      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005560:	4b35      	ldr	r3, [pc, #212]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005566:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556e:	4932      	ldr	r1, [pc, #200]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800557e:	d105      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005580:	4b2d      	ldr	r3, [pc, #180]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4a2c      	ldr	r2, [pc, #176]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d015      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005598:	4b27      	ldr	r3, [pc, #156]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800559e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a6:	4924      	ldr	r1, [pc, #144]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055b6:	d105      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b8:	4b1f      	ldr	r3, [pc, #124]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d015      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d0:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	4916      	ldr	r1, [pc, #88]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055ee:	d105      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055f0:	4b11      	ldr	r3, [pc, #68]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4a10      	ldr	r2, [pc, #64]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d019      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	4908      	ldr	r1, [pc, #32]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005618:	4313      	orrs	r3, r2
 800561a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005626:	d109      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005628:	4b03      	ldr	r3, [pc, #12]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a02      	ldr	r2, [pc, #8]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005632:	60d3      	str	r3, [r2, #12]
 8005634:	e002      	b.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005636:	bf00      	nop
 8005638:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d015      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005648:	4b29      	ldr	r3, [pc, #164]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005656:	4926      	ldr	r1, [pc, #152]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005666:	d105      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005668:	4b21      	ldr	r3, [pc, #132]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4a20      	ldr	r2, [pc, #128]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800566e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005672:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d015      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005680:	4b1b      	ldr	r3, [pc, #108]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005686:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800568e:	4918      	ldr	r1, [pc, #96]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569e:	d105      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056a0:	4b13      	ldr	r3, [pc, #76]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	4a12      	ldr	r2, [pc, #72]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056aa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056b8:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056c6:	490a      	ldr	r1, [pc, #40]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d6:	d105      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d8:	4b05      	ldr	r3, [pc, #20]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	4a04      	ldr	r2, [pc, #16]	@ (80056f0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80056e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40021000 	.word	0x40021000

080056f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e09d      	b.n	8005842 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d108      	bne.n	8005720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005716:	d009      	beq.n	800572c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
 800571e:	e005      	b.n	800572c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc fcba 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005762:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800576c:	d902      	bls.n	8005774 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
 8005772:	e002      	b.n	800577a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005778:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005782:	d007      	beq.n	8005794 <HAL_SPI_Init+0xa0>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800578c:	d002      	beq.n	8005794 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d6:	ea42 0103 	orr.w	r1, r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	0c1b      	lsrs	r3, r3, #16
 80057f0:	f003 0204 	and.w	r2, r3, #4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005802:	f003 0308 	and.w	r3, r3, #8
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005810:	ea42 0103 	orr.w	r1, r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	69da      	ldr	r2, [r3, #28]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005830:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b08a      	sub	sp, #40	@ 0x28
 800584e:	af00      	add	r7, sp, #0
 8005850:	60f8      	str	r0, [r7, #12]
 8005852:	60b9      	str	r1, [r7, #8]
 8005854:	607a      	str	r2, [r7, #4]
 8005856:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005858:	2301      	movs	r3, #1
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800585c:	f7fc ffec 	bl	8002838 <HAL_GetTick>
 8005860:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005868:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005878:	7ffb      	ldrb	r3, [r7, #31]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d00c      	beq.n	8005898 <HAL_SPI_TransmitReceive+0x4e>
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005884:	d106      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <HAL_SPI_TransmitReceive+0x4a>
 800588e:	7ffb      	ldrb	r3, [r7, #31]
 8005890:	2b04      	cmp	r3, #4
 8005892:	d001      	beq.n	8005898 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
 8005896:	e1f3      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d005      	beq.n	80058aa <HAL_SPI_TransmitReceive+0x60>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_SPI_TransmitReceive+0x60>
 80058a4:	887b      	ldrh	r3, [r7, #2]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e1e8      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x72>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e1e1      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x436>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d003      	beq.n	80058d8 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2205      	movs	r2, #5
 80058d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	887a      	ldrh	r2, [r7, #2]
 80058e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	887a      	ldrh	r2, [r7, #2]
 80058fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	887a      	ldrh	r2, [r7, #2]
 8005904:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800591a:	d802      	bhi.n	8005922 <HAL_SPI_TransmitReceive+0xd8>
 800591c:	8abb      	ldrh	r3, [r7, #20]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d908      	bls.n	8005934 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005930:	605a      	str	r2, [r3, #4]
 8005932:	e007      	b.n	8005944 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005942:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594e:	2b40      	cmp	r3, #64	@ 0x40
 8005950:	d007      	beq.n	8005962 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800596a:	f240 8083 	bls.w	8005a74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_SPI_TransmitReceive+0x132>
 8005976:	8afb      	ldrh	r3, [r7, #22]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d16f      	bne.n	8005a5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005980:	881a      	ldrh	r2, [r3, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059a0:	e05c      	b.n	8005a5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0302 	and.w	r3, r3, #2
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d11b      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0x19e>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d016      	beq.n	80059e8 <HAL_SPI_TransmitReceive+0x19e>
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d113      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d0:	1c9a      	adds	r2, r3, #2
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d11c      	bne.n	8005a30 <HAL_SPI_TransmitReceive+0x1e6>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d016      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a14:	1c9a      	adds	r2, r3, #2
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a30:	f7fc ff02 	bl	8002838 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d80d      	bhi.n	8005a5c <HAL_SPI_TransmitReceive+0x212>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d009      	beq.n	8005a5c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e111      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d19d      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x158>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d197      	bne.n	80059a2 <HAL_SPI_TransmitReceive+0x158>
 8005a72:	e0e5      	b.n	8005c40 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_SPI_TransmitReceive+0x23a>
 8005a7c:	8afb      	ldrh	r3, [r7, #22]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	f040 80d1 	bne.w	8005c26 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d912      	bls.n	8005ab4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a92:	881a      	ldrh	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9e:	1c9a      	adds	r2, r3, #2
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b02      	subs	r3, #2
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ab2:	e0b8      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	330c      	adds	r3, #12
 8005abe:	7812      	ldrb	r2, [r2, #0]
 8005ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ada:	e0a4      	b.n	8005c26 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d134      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x30a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d02f      	beq.n	8005b54 <HAL_SPI_TransmitReceive+0x30a>
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d12c      	bne.n	8005b54 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d912      	bls.n	8005b2a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b08:	881a      	ldrh	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b14:	1c9a      	adds	r2, r3, #2
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	3b02      	subs	r3, #2
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b28:	e012      	b.n	8005b50 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	7812      	ldrb	r2, [r2, #0]
 8005b36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d148      	bne.n	8005bf4 <HAL_SPI_TransmitReceive+0x3aa>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d042      	beq.n	8005bf4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d923      	bls.n	8005bc2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b84:	b292      	uxth	r2, r2
 8005b86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8c:	1c9a      	adds	r2, r3, #2
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	3b02      	subs	r3, #2
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d81f      	bhi.n	8005bf0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005bbe:	605a      	str	r2, [r3, #4]
 8005bc0:	e016      	b.n	8005bf0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f103 020c 	add.w	r2, r3, #12
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	3b01      	subs	r3, #1
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bf4:	f7fc fe20 	bl	8002838 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d803      	bhi.n	8005c0c <HAL_SPI_TransmitReceive+0x3c2>
 8005c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d102      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x3c8>
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e02c      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f47f af55 	bne.w	8005adc <HAL_SPI_TransmitReceive+0x292>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f47f af4e 	bne.w	8005adc <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c40:	6a3a      	ldr	r2, [r7, #32]
 8005c42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f93d 	bl	8005ec4 <SPI_EndRxTxTransaction>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d008      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2220      	movs	r2, #32
 8005c54:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e00e      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
  }
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3728      	adds	r7, #40	@ 0x28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4613      	mov	r3, r2
 8005c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c98:	f7fc fdce 	bl	8002838 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	1a9b      	subs	r3, r3, r2
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ca8:	f7fc fdc6 	bl	8002838 <HAL_GetTick>
 8005cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cae:	4b39      	ldr	r3, [pc, #228]	@ (8005d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	015b      	lsls	r3, r3, #5
 8005cb4:	0d1b      	lsrs	r3, r3, #20
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	fb02 f303 	mul.w	r3, r2, r3
 8005cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cbe:	e054      	b.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc6:	d050      	beq.n	8005d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cc8:	f7fc fdb6 	bl	8002838 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	69fa      	ldr	r2, [r7, #28]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d902      	bls.n	8005cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d13d      	bne.n	8005d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cf6:	d111      	bne.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d00:	d004      	beq.n	8005d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d0a:	d107      	bne.n	8005d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d24:	d10f      	bne.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e017      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	bf0c      	ite	eq
 8005d7a:	2301      	moveq	r3, #1
 8005d7c:	2300      	movne	r3, #0
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	461a      	mov	r2, r3
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d19b      	bne.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000210 	.word	0x20000210

08005d98 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	@ 0x28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005daa:	f7fc fd45 	bl	8002838 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005dba:	f7fc fd3d 	bl	8002838 <HAL_GetTick>
 8005dbe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dc8:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	00da      	lsls	r2, r3, #3
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	0d1b      	lsrs	r3, r3, #20
 8005dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dda:	fb02 f303 	mul.w	r3, r2, r3
 8005dde:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005de0:	e060      	b.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005de8:	d107      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x62>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d104      	bne.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005df8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d050      	beq.n	8005ea4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e02:	f7fc fd19 	bl	8002838 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d13d      	bne.n	8005e94 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e30:	d111      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e3a:	d004      	beq.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e44:	d107      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e5e:	d10f      	bne.n	8005e80 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e6e:	601a      	str	r2, [r3, #0]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e010      	b.n	8005eb6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d196      	bne.n	8005de2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	@ 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000210 	.word	0x20000210

08005ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff ff5b 	bl	8005d98 <SPI_WaitFifoStateUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d007      	beq.n	8005ef8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eec:	f043 0220 	orr.w	r2, r3, #32
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e027      	b.n	8005f48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2200      	movs	r2, #0
 8005f00:	2180      	movs	r1, #128	@ 0x80
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fec0 	bl	8005c88 <SPI_WaitFlagStateUntilTimeout>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f12:	f043 0220 	orr.w	r2, r3, #32
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e014      	b.n	8005f48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f7ff ff34 	bl	8005d98 <SPI_WaitFifoStateUntilTimeout>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e000      	b.n	8005f48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e054      	b.n	800600c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d111      	bne.n	8005f92 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f001 fe5c 	bl	8007c34 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d102      	bne.n	8005f8a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a23      	ldr	r2, [pc, #140]	@ (8006014 <HAL_TIM_Base_Init+0xc4>)
 8005f88:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2202      	movs	r2, #2
 8005f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	f001 f9a5 	bl	80072f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	08002181 	.word	0x08002181

08006018 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006026:	b2db      	uxtb	r3, r3
 8006028:	2b01      	cmp	r3, #1
 800602a:	d001      	beq.n	8006030 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e054      	b.n	80060da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a26      	ldr	r2, [pc, #152]	@ (80060e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d022      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800605a:	d01d      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a22      	ldr	r2, [pc, #136]	@ (80060ec <HAL_TIM_Base_Start_IT+0xd4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d018      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a21      	ldr	r2, [pc, #132]	@ (80060f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d013      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1f      	ldr	r2, [pc, #124]	@ (80060f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d00e      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a1e      	ldr	r2, [pc, #120]	@ (80060f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d009      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1c      	ldr	r2, [pc, #112]	@ (80060fc <HAL_TIM_Base_Start_IT+0xe4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1b      	ldr	r2, [pc, #108]	@ (8006100 <HAL_TIM_Base_Start_IT+0xe8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d115      	bne.n	80060c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	4b19      	ldr	r3, [pc, #100]	@ (8006104 <HAL_TIM_Base_Start_IT+0xec>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2b06      	cmp	r3, #6
 80060a8:	d015      	beq.n	80060d6 <HAL_TIM_Base_Start_IT+0xbe>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060b0:	d011      	beq.n	80060d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c2:	e008      	b.n	80060d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0201 	orr.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e000      	b.n	80060d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40000400 	.word	0x40000400
 80060f0:	40000800 	.word	0x40000800
 80060f4:	40000c00 	.word	0x40000c00
 80060f8:	40013400 	.word	0x40013400
 80060fc:	40014000 	.word	0x40014000
 8006100:	40015000 	.word	0x40015000
 8006104:	00010007 	.word	0x00010007

08006108 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e054      	b.n	80061c4 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d111      	bne.n	800614a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f001 fd80 	bl	8007c34 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a23      	ldr	r2, [pc, #140]	@ (80061cc <HAL_TIM_OC_Init+0xc4>)
 8006140:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2202      	movs	r2, #2
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f001 f8c9 	bl	80072f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	080061d1 	.word	0x080061d1

080061d0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e054      	b.n	80062a0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d111      	bne.n	8006226 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f001 fd12 	bl	8007c34 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006214:	2b00      	cmp	r3, #0
 8006216:	d102      	bne.n	800621e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a23      	ldr	r2, [pc, #140]	@ (80062a8 <HAL_TIM_PWM_Init+0xc4>)
 800621c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	4619      	mov	r1, r3
 8006238:	4610      	mov	r0, r2
 800623a:	f001 f85b 	bl	80072f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	080062ad 	.word	0x080062ad

080062ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e04c      	b.n	800636e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d111      	bne.n	8006304 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f001 fca3 	bl	8007c34 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d102      	bne.n	80062fc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006378 <HAL_TIM_OnePulse_Init+0xb8>)
 80062fa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	4619      	mov	r1, r3
 8006316:	4610      	mov	r0, r2
 8006318:	f000 ffec 	bl	80072f4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0208 	bic.w	r2, r2, #8
 800632a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	430a      	orrs	r2, r1
 800633a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	0800637d 	.word	0x0800637d

0800637c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80063a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063b8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d108      	bne.n	80063d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d105      	bne.n	80063d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063c6:	7b7b      	ldrb	r3, [r7, #13]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063cc:	7b3b      	ldrb	r3, [r7, #12]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d001      	beq.n	80063d6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e059      	b.n	800648a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2202      	movs	r2, #2
 80063f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68da      	ldr	r2, [r3, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0202 	orr.w	r2, r2, #2
 8006404:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0204 	orr.w	r2, r2, #4
 8006414:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2201      	movs	r2, #1
 800641c:	2100      	movs	r1, #0
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fbe2 	bl	8007be8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2201      	movs	r2, #1
 800642a:	2104      	movs	r1, #4
 800642c:	4618      	mov	r0, r3
 800642e:	f001 fbdb 	bl	8007be8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a17      	ldr	r2, [pc, #92]	@ (8006494 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d018      	beq.n	800646e <HAL_TIM_OnePulse_Start_IT+0xde>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a15      	ldr	r2, [pc, #84]	@ (8006498 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d013      	beq.n	800646e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a14      	ldr	r2, [pc, #80]	@ (800649c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d00e      	beq.n	800646e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a12      	ldr	r2, [pc, #72]	@ (80064a0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d009      	beq.n	800646e <HAL_TIM_OnePulse_Start_IT+0xde>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a11      	ldr	r2, [pc, #68]	@ (80064a4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d004      	beq.n	800646e <HAL_TIM_OnePulse_Start_IT+0xde>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a0f      	ldr	r2, [pc, #60]	@ (80064a8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d101      	bne.n	8006472 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006486:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3710      	adds	r7, #16
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40012c00 	.word	0x40012c00
 8006498:	40013400 	.word	0x40013400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	40015000 	.word	0x40015000

080064ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0a2      	b.n	8006606 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d111      	bne.n	80064f0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fbad 	bl	8007c34 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006610 <HAL_TIM_Encoder_Init+0x164>)
 80064e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6812      	ldr	r2, [r2, #0]
 8006502:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006506:	f023 0307 	bic.w	r3, r3, #7
 800650a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3304      	adds	r3, #4
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f000 feec 	bl	80072f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006544:	f023 0303 	bic.w	r3, r3, #3
 8006548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	021b      	lsls	r3, r3, #8
 8006554:	4313      	orrs	r3, r2
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006562:	f023 030c 	bic.w	r3, r3, #12
 8006566:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800656e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68da      	ldr	r2, [r3, #12]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	4313      	orrs	r3, r2
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	4313      	orrs	r3, r2
 8006584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	011a      	lsls	r2, r3, #4
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	031b      	lsls	r3, r3, #12
 8006592:	4313      	orrs	r3, r2
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80065a0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80065a8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	4313      	orrs	r3, r2
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	08002289 	.word	0x08002289

08006614 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006624:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800662c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006634:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800663c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d110      	bne.n	8006666 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d102      	bne.n	8006650 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800664a:	7b7b      	ldrb	r3, [r7, #13]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d001      	beq.n	8006654 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e069      	b.n	8006728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2202      	movs	r2, #2
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006664:	e031      	b.n	80066ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b04      	cmp	r3, #4
 800666a:	d110      	bne.n	800668e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d102      	bne.n	8006678 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006672:	7b3b      	ldrb	r3, [r7, #12]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d001      	beq.n	800667c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e055      	b.n	8006728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800668c:	e01d      	b.n	80066ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d108      	bne.n	80066a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006694:	7bbb      	ldrb	r3, [r7, #14]
 8006696:	2b01      	cmp	r3, #1
 8006698:	d105      	bne.n	80066a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800669a:	7b7b      	ldrb	r3, [r7, #13]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d102      	bne.n	80066a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80066a0:	7b3b      	ldrb	r3, [r7, #12]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d001      	beq.n	80066aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e03e      	b.n	8006728 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2202      	movs	r2, #2
 80066c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <HAL_TIM_Encoder_Start+0xc4>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d008      	beq.n	80066e8 <HAL_TIM_Encoder_Start+0xd4>
 80066d6:	e00f      	b.n	80066f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2201      	movs	r2, #1
 80066de:	2100      	movs	r1, #0
 80066e0:	4618      	mov	r0, r3
 80066e2:	f001 fa81 	bl	8007be8 <TIM_CCxChannelCmd>
      break;
 80066e6:	e016      	b.n	8006716 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	2104      	movs	r1, #4
 80066f0:	4618      	mov	r0, r3
 80066f2:	f001 fa79 	bl	8007be8 <TIM_CCxChannelCmd>
      break;
 80066f6:	e00e      	b.n	8006716 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2201      	movs	r2, #1
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f001 fa71 	bl	8007be8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2201      	movs	r2, #1
 800670c:	2104      	movs	r1, #4
 800670e:	4618      	mov	r0, r3
 8006710:	f001 fa6a 	bl	8007be8 <TIM_CCxChannelCmd>
      break;
 8006714:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f042 0201 	orr.w	r2, r2, #1
 8006724:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d026      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d021      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f06f 0202 	mvn.w	r2, #2
 8006764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	f003 0303 	and.w	r3, r3, #3
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
 8006784:	e009      	b.n	800679a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d026      	beq.n	80067f8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d021      	beq.n	80067f8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0204 	mvn.w	r2, #4
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
 80067dc:	e009      	b.n	80067f2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d026      	beq.n	8006850 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d021      	beq.n	8006850 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0208 	mvn.w	r2, #8
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2204      	movs	r2, #4
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d005      	beq.n	8006836 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3
 8006834:	e009      	b.n	800684a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	f003 0310 	and.w	r3, r3, #16
 8006856:	2b00      	cmp	r3, #0
 8006858:	d026      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b00      	cmp	r3, #0
 8006862:	d021      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0210 	mvn.w	r2, #16
 800686c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2208      	movs	r2, #8
 8006872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69db      	ldr	r3, [r3, #28]
 800687a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
 800688c:	e009      	b.n	80068a2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00e      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d009      	beq.n	80068d0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0201 	mvn.w	r2, #1
 80068c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d104      	bne.n	80068e4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00e      	beq.n	8006902 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80068f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00e      	beq.n	800692a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006912:	2b00      	cmp	r3, #0
 8006914:	d009      	beq.n	800692a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00e      	beq.n	8006952 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d009      	beq.n	8006952 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f003 0320 	and.w	r3, r3, #32
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00e      	beq.n	800697a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f06f 0220 	mvn.w	r2, #32
 800696e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d00e      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00e      	beq.n	80069ca <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80069be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00e      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80069e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
	...

08006a24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d101      	bne.n	8006a42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e066      	b.n	8006b10 <HAL_TIM_OC_ConfigChannel+0xec>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b14      	cmp	r3, #20
 8006a4e:	d857      	bhi.n	8006b00 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006a50:	a201      	add	r2, pc, #4	@ (adr r2, 8006a58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a56:	bf00      	nop
 8006a58:	08006aad 	.word	0x08006aad
 8006a5c:	08006b01 	.word	0x08006b01
 8006a60:	08006b01 	.word	0x08006b01
 8006a64:	08006b01 	.word	0x08006b01
 8006a68:	08006abb 	.word	0x08006abb
 8006a6c:	08006b01 	.word	0x08006b01
 8006a70:	08006b01 	.word	0x08006b01
 8006a74:	08006b01 	.word	0x08006b01
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006b01 	.word	0x08006b01
 8006a80:	08006b01 	.word	0x08006b01
 8006a84:	08006b01 	.word	0x08006b01
 8006a88:	08006ad7 	.word	0x08006ad7
 8006a8c:	08006b01 	.word	0x08006b01
 8006a90:	08006b01 	.word	0x08006b01
 8006a94:	08006b01 	.word	0x08006b01
 8006a98:	08006ae5 	.word	0x08006ae5
 8006a9c:	08006b01 	.word	0x08006b01
 8006aa0:	08006b01 	.word	0x08006b01
 8006aa4:	08006b01 	.word	0x08006b01
 8006aa8:	08006af3 	.word	0x08006af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fcd2 	bl	800745c <TIM_OC1_SetConfig>
      break;
 8006ab8:	e025      	b.n	8006b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f000 fd65 	bl	8007590 <TIM_OC2_SetConfig>
      break;
 8006ac6:	e01e      	b.n	8006b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fdf2 	bl	80076b8 <TIM_OC3_SetConfig>
      break;
 8006ad4:	e017      	b.n	8006b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fe7d 	bl	80077dc <TIM_OC4_SetConfig>
      break;
 8006ae2:	e010      	b.n	8006b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 ff0a 	bl	8007904 <TIM_OC5_SetConfig>
      break;
 8006af0:	e009      	b.n	8006b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 ff6d 	bl	80079d8 <TIM_OC6_SetConfig>
      break;
 8006afe:	e002      	b.n	8006b06 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	75fb      	strb	r3, [r7, #23]
      break;
 8006b04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3718      	adds	r7, #24
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e0ff      	b.n	8006d36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b14      	cmp	r3, #20
 8006b42:	f200 80f0 	bhi.w	8006d26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b46:	a201      	add	r2, pc, #4	@ (adr r2, 8006b4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006ba1 	.word	0x08006ba1
 8006b50:	08006d27 	.word	0x08006d27
 8006b54:	08006d27 	.word	0x08006d27
 8006b58:	08006d27 	.word	0x08006d27
 8006b5c:	08006be1 	.word	0x08006be1
 8006b60:	08006d27 	.word	0x08006d27
 8006b64:	08006d27 	.word	0x08006d27
 8006b68:	08006d27 	.word	0x08006d27
 8006b6c:	08006c23 	.word	0x08006c23
 8006b70:	08006d27 	.word	0x08006d27
 8006b74:	08006d27 	.word	0x08006d27
 8006b78:	08006d27 	.word	0x08006d27
 8006b7c:	08006c63 	.word	0x08006c63
 8006b80:	08006d27 	.word	0x08006d27
 8006b84:	08006d27 	.word	0x08006d27
 8006b88:	08006d27 	.word	0x08006d27
 8006b8c:	08006ca5 	.word	0x08006ca5
 8006b90:	08006d27 	.word	0x08006d27
 8006b94:	08006d27 	.word	0x08006d27
 8006b98:	08006d27 	.word	0x08006d27
 8006b9c:	08006ce5 	.word	0x08006ce5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fc58 	bl	800745c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699a      	ldr	r2, [r3, #24]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f042 0208 	orr.w	r2, r2, #8
 8006bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0204 	bic.w	r2, r2, #4
 8006bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6999      	ldr	r1, [r3, #24]
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	619a      	str	r2, [r3, #24]
      break;
 8006bde:	e0a5      	b.n	8006d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68b9      	ldr	r1, [r7, #8]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 fcd2 	bl	8007590 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	699a      	ldr	r2, [r3, #24]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6999      	ldr	r1, [r3, #24]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	021a      	lsls	r2, r3, #8
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	619a      	str	r2, [r3, #24]
      break;
 8006c20:	e084      	b.n	8006d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fd45 	bl	80076b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	69da      	ldr	r2, [r3, #28]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0208 	orr.w	r2, r2, #8
 8006c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69da      	ldr	r2, [r3, #28]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0204 	bic.w	r2, r2, #4
 8006c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69d9      	ldr	r1, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	61da      	str	r2, [r3, #28]
      break;
 8006c60:	e064      	b.n	8006d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fdb7 	bl	80077dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69da      	ldr	r2, [r3, #28]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	69d9      	ldr	r1, [r3, #28]
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	021a      	lsls	r2, r3, #8
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	61da      	str	r2, [r3, #28]
      break;
 8006ca2:	e043      	b.n	8006d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 fe2a 	bl	8007904 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0208 	orr.w	r2, r2, #8
 8006cbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0204 	bic.w	r2, r2, #4
 8006cce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006ce2:	e023      	b.n	8006d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fe74 	bl	80079d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	021a      	lsls	r2, r3, #8
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006d24:	e002      	b.n	8006d2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop

08006d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d101      	bne.n	8006d5c <HAL_TIM_ConfigClockSource+0x1c>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	e0f6      	b.n	8006f4a <HAL_TIM_ConfigClockSource+0x20a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a6f      	ldr	r2, [pc, #444]	@ (8006f54 <HAL_TIM_ConfigClockSource+0x214>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	f000 80c1 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8006f54 <HAL_TIM_ConfigClockSource+0x214>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	f200 80c6 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006da4:	4a6c      	ldr	r2, [pc, #432]	@ (8006f58 <HAL_TIM_ConfigClockSource+0x218>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	f000 80b9 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006dac:	4a6a      	ldr	r2, [pc, #424]	@ (8006f58 <HAL_TIM_ConfigClockSource+0x218>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	f200 80be 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006db4:	4a69      	ldr	r2, [pc, #420]	@ (8006f5c <HAL_TIM_ConfigClockSource+0x21c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	f000 80b1 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006dbc:	4a67      	ldr	r2, [pc, #412]	@ (8006f5c <HAL_TIM_ConfigClockSource+0x21c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	f200 80b6 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dc4:	4a66      	ldr	r2, [pc, #408]	@ (8006f60 <HAL_TIM_ConfigClockSource+0x220>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	f000 80a9 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006dcc:	4a64      	ldr	r2, [pc, #400]	@ (8006f60 <HAL_TIM_ConfigClockSource+0x220>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	f200 80ae 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dd4:	4a63      	ldr	r2, [pc, #396]	@ (8006f64 <HAL_TIM_ConfigClockSource+0x224>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	f000 80a1 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006ddc:	4a61      	ldr	r2, [pc, #388]	@ (8006f64 <HAL_TIM_ConfigClockSource+0x224>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	f200 80a6 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de4:	4a60      	ldr	r2, [pc, #384]	@ (8006f68 <HAL_TIM_ConfigClockSource+0x228>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	f000 8099 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006dec:	4a5e      	ldr	r2, [pc, #376]	@ (8006f68 <HAL_TIM_ConfigClockSource+0x228>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	f200 809e 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006df8:	f000 8091 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006dfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006e00:	f200 8096 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e08:	f000 8089 	beq.w	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006e0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e10:	f200 808e 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e18:	d03e      	beq.n	8006e98 <HAL_TIM_ConfigClockSource+0x158>
 8006e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1e:	f200 8087 	bhi.w	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e26:	f000 8086 	beq.w	8006f36 <HAL_TIM_ConfigClockSource+0x1f6>
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2e:	d87f      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e30:	2b70      	cmp	r3, #112	@ 0x70
 8006e32:	d01a      	beq.n	8006e6a <HAL_TIM_ConfigClockSource+0x12a>
 8006e34:	2b70      	cmp	r3, #112	@ 0x70
 8006e36:	d87b      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e38:	2b60      	cmp	r3, #96	@ 0x60
 8006e3a:	d050      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0x19e>
 8006e3c:	2b60      	cmp	r3, #96	@ 0x60
 8006e3e:	d877      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e40:	2b50      	cmp	r3, #80	@ 0x50
 8006e42:	d03c      	beq.n	8006ebe <HAL_TIM_ConfigClockSource+0x17e>
 8006e44:	2b50      	cmp	r3, #80	@ 0x50
 8006e46:	d873      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e48:	2b40      	cmp	r3, #64	@ 0x40
 8006e4a:	d058      	beq.n	8006efe <HAL_TIM_ConfigClockSource+0x1be>
 8006e4c:	2b40      	cmp	r3, #64	@ 0x40
 8006e4e:	d86f      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e50:	2b30      	cmp	r3, #48	@ 0x30
 8006e52:	d064      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006e54:	2b30      	cmp	r3, #48	@ 0x30
 8006e56:	d86b      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e58:	2b20      	cmp	r3, #32
 8006e5a:	d060      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d867      	bhi.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d05c      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d05a      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0x1de>
 8006e68:	e062      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e7a:	f000 fe95 	bl	8007ba8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	609a      	str	r2, [r3, #8]
      break;
 8006e96:	e04f      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ea8:	f000 fe7e 	bl	8007ba8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eba:	609a      	str	r2, [r3, #8]
      break;
 8006ebc:	e03c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f000 fdf0 	bl	8007ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2150      	movs	r1, #80	@ 0x50
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fe49 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8006edc:	e02c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eea:	461a      	mov	r2, r3
 8006eec:	f000 fe0f 	bl	8007b0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2160      	movs	r1, #96	@ 0x60
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fe39 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8006efc:	e01c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f000 fdd0 	bl	8007ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2140      	movs	r1, #64	@ 0x40
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fe29 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8006f1c:	e00c      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4619      	mov	r1, r3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	f000 fe20 	bl	8007b6e <TIM_ITRx_SetConfig>
      break;
 8006f2e:	e003      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	73fb      	strb	r3, [r7, #15]
      break;
 8006f34:	e000      	b.n	8006f38 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	00100070 	.word	0x00100070
 8006f58:	00100060 	.word	0x00100060
 8006f5c:	00100050 	.word	0x00100050
 8006f60:	00100040 	.word	0x00100040
 8006f64:	00100030 	.word	0x00100030
 8006f68:	00100020 	.word	0x00100020

08006f6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr

08006fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007000:	bf00      	nop
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	460b      	mov	r3, r1
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e14a      	b.n	80072e6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b01      	cmp	r3, #1
 800705a:	f040 80dd 	bne.w	8007218 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	2b1f      	cmp	r3, #31
 8007062:	f200 80d6 	bhi.w	8007212 <HAL_TIM_RegisterCallback+0x1de>
 8007066:	a201      	add	r2, pc, #4	@ (adr r2, 800706c <HAL_TIM_RegisterCallback+0x38>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	080070ed 	.word	0x080070ed
 8007070:	080070f5 	.word	0x080070f5
 8007074:	080070fd 	.word	0x080070fd
 8007078:	08007105 	.word	0x08007105
 800707c:	0800710d 	.word	0x0800710d
 8007080:	08007115 	.word	0x08007115
 8007084:	0800711d 	.word	0x0800711d
 8007088:	08007125 	.word	0x08007125
 800708c:	0800712d 	.word	0x0800712d
 8007090:	08007135 	.word	0x08007135
 8007094:	0800713d 	.word	0x0800713d
 8007098:	08007145 	.word	0x08007145
 800709c:	0800714d 	.word	0x0800714d
 80070a0:	08007155 	.word	0x08007155
 80070a4:	0800715f 	.word	0x0800715f
 80070a8:	08007169 	.word	0x08007169
 80070ac:	08007173 	.word	0x08007173
 80070b0:	0800717d 	.word	0x0800717d
 80070b4:	08007187 	.word	0x08007187
 80070b8:	08007191 	.word	0x08007191
 80070bc:	0800719b 	.word	0x0800719b
 80070c0:	080071a5 	.word	0x080071a5
 80070c4:	080071af 	.word	0x080071af
 80070c8:	080071b9 	.word	0x080071b9
 80070cc:	080071c3 	.word	0x080071c3
 80070d0:	080071cd 	.word	0x080071cd
 80070d4:	080071d7 	.word	0x080071d7
 80070d8:	080071e1 	.word	0x080071e1
 80070dc:	080071eb 	.word	0x080071eb
 80070e0:	080071f5 	.word	0x080071f5
 80070e4:	080071ff 	.word	0x080071ff
 80070e8:	08007209 	.word	0x08007209
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80070f2:	e0f7      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80070fa:	e0f3      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007102:	e0ef      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800710a:	e0eb      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007112:	e0e7      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800711a:	e0e3      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007122:	e0df      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800712a:	e0db      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007132:	e0d7      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800713a:	e0d3      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007142:	e0cf      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800714a:	e0cb      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007152:	e0c7      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800715c:	e0c2      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007166:	e0bd      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007170:	e0b8      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800717a:	e0b3      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007184:	e0ae      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800718e:	e0a9      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007198:	e0a4      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80071a2:	e09f      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80071ac:	e09a      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80071b6:	e095      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80071c0:	e090      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80071ca:	e08b      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80071d4:	e086      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80071de:	e081      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80071e8:	e07c      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80071f2:	e077      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80071fc:	e072      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007206:	e06d      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007210:	e068      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	75fb      	strb	r3, [r7, #23]
        break;
 8007216:	e065      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d15d      	bne.n	80072e0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007224:	7afb      	ldrb	r3, [r7, #11]
 8007226:	2b0d      	cmp	r3, #13
 8007228:	d857      	bhi.n	80072da <HAL_TIM_RegisterCallback+0x2a6>
 800722a:	a201      	add	r2, pc, #4	@ (adr r2, 8007230 <HAL_TIM_RegisterCallback+0x1fc>)
 800722c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007230:	08007269 	.word	0x08007269
 8007234:	08007271 	.word	0x08007271
 8007238:	08007279 	.word	0x08007279
 800723c:	08007281 	.word	0x08007281
 8007240:	08007289 	.word	0x08007289
 8007244:	08007291 	.word	0x08007291
 8007248:	08007299 	.word	0x08007299
 800724c:	080072a1 	.word	0x080072a1
 8007250:	080072a9 	.word	0x080072a9
 8007254:	080072b1 	.word	0x080072b1
 8007258:	080072b9 	.word	0x080072b9
 800725c:	080072c1 	.word	0x080072c1
 8007260:	080072c9 	.word	0x080072c9
 8007264:	080072d1 	.word	0x080072d1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800726e:	e039      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007276:	e035      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800727e:	e031      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007286:	e02d      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800728e:	e029      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007296:	e025      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800729e:	e021      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80072a6:	e01d      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80072ae:	e019      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80072b6:	e015      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80072be:	e011      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80072c6:	e00d      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80072ce:	e009      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80072d8:	e004      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	75fb      	strb	r3, [r7, #23]
        break;
 80072de:	e001      	b.n	80072e4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	371c      	adds	r7, #28
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop

080072f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a4c      	ldr	r2, [pc, #304]	@ (8007438 <TIM_Base_SetConfig+0x144>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d017      	beq.n	800733c <TIM_Base_SetConfig+0x48>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007312:	d013      	beq.n	800733c <TIM_Base_SetConfig+0x48>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a49      	ldr	r2, [pc, #292]	@ (800743c <TIM_Base_SetConfig+0x148>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00f      	beq.n	800733c <TIM_Base_SetConfig+0x48>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a48      	ldr	r2, [pc, #288]	@ (8007440 <TIM_Base_SetConfig+0x14c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00b      	beq.n	800733c <TIM_Base_SetConfig+0x48>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a47      	ldr	r2, [pc, #284]	@ (8007444 <TIM_Base_SetConfig+0x150>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d007      	beq.n	800733c <TIM_Base_SetConfig+0x48>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a46      	ldr	r2, [pc, #280]	@ (8007448 <TIM_Base_SetConfig+0x154>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_Base_SetConfig+0x48>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a45      	ldr	r2, [pc, #276]	@ (800744c <TIM_Base_SetConfig+0x158>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d108      	bne.n	800734e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a39      	ldr	r2, [pc, #228]	@ (8007438 <TIM_Base_SetConfig+0x144>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d023      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800735c:	d01f      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a36      	ldr	r2, [pc, #216]	@ (800743c <TIM_Base_SetConfig+0x148>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01b      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a35      	ldr	r2, [pc, #212]	@ (8007440 <TIM_Base_SetConfig+0x14c>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d017      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a34      	ldr	r2, [pc, #208]	@ (8007444 <TIM_Base_SetConfig+0x150>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a33      	ldr	r2, [pc, #204]	@ (8007448 <TIM_Base_SetConfig+0x154>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d00f      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a33      	ldr	r2, [pc, #204]	@ (8007450 <TIM_Base_SetConfig+0x15c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d00b      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a32      	ldr	r2, [pc, #200]	@ (8007454 <TIM_Base_SetConfig+0x160>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d007      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a31      	ldr	r2, [pc, #196]	@ (8007458 <TIM_Base_SetConfig+0x164>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_Base_SetConfig+0xaa>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a2c      	ldr	r2, [pc, #176]	@ (800744c <TIM_Base_SetConfig+0x158>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d108      	bne.n	80073b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a18      	ldr	r2, [pc, #96]	@ (8007438 <TIM_Base_SetConfig+0x144>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <TIM_Base_SetConfig+0x110>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a1a      	ldr	r2, [pc, #104]	@ (8007448 <TIM_Base_SetConfig+0x154>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d00f      	beq.n	8007404 <TIM_Base_SetConfig+0x110>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a1a      	ldr	r2, [pc, #104]	@ (8007450 <TIM_Base_SetConfig+0x15c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00b      	beq.n	8007404 <TIM_Base_SetConfig+0x110>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a19      	ldr	r2, [pc, #100]	@ (8007454 <TIM_Base_SetConfig+0x160>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d007      	beq.n	8007404 <TIM_Base_SetConfig+0x110>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a18      	ldr	r2, [pc, #96]	@ (8007458 <TIM_Base_SetConfig+0x164>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d003      	beq.n	8007404 <TIM_Base_SetConfig+0x110>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a13      	ldr	r2, [pc, #76]	@ (800744c <TIM_Base_SetConfig+0x158>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d103      	bne.n	800740c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	691a      	ldr	r2, [r3, #16]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b01      	cmp	r3, #1
 800741c:	d105      	bne.n	800742a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f023 0201 	bic.w	r2, r3, #1
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	611a      	str	r2, [r3, #16]
  }
}
 800742a:	bf00      	nop
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40012c00 	.word	0x40012c00
 800743c:	40000400 	.word	0x40000400
 8007440:	40000800 	.word	0x40000800
 8007444:	40000c00 	.word	0x40000c00
 8007448:	40013400 	.word	0x40013400
 800744c:	40015000 	.word	0x40015000
 8007450:	40014000 	.word	0x40014000
 8007454:	40014400 	.word	0x40014400
 8007458:	40014800 	.word	0x40014800

0800745c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800745c:	b480      	push	{r7}
 800745e:	b087      	sub	sp, #28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a1b      	ldr	r3, [r3, #32]
 800746a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	f023 0201 	bic.w	r2, r3, #1
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800748a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	f023 0302 	bic.w	r3, r3, #2
 80074a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a30      	ldr	r2, [pc, #192]	@ (8007578 <TIM_OC1_SetConfig+0x11c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <TIM_OC1_SetConfig+0x88>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a2f      	ldr	r2, [pc, #188]	@ (800757c <TIM_OC1_SetConfig+0x120>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00f      	beq.n	80074e4 <TIM_OC1_SetConfig+0x88>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a2e      	ldr	r2, [pc, #184]	@ (8007580 <TIM_OC1_SetConfig+0x124>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d00b      	beq.n	80074e4 <TIM_OC1_SetConfig+0x88>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007584 <TIM_OC1_SetConfig+0x128>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_OC1_SetConfig+0x88>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a2c      	ldr	r2, [pc, #176]	@ (8007588 <TIM_OC1_SetConfig+0x12c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_OC1_SetConfig+0x88>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a2b      	ldr	r2, [pc, #172]	@ (800758c <TIM_OC1_SetConfig+0x130>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d10c      	bne.n	80074fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	f023 0308 	bic.w	r3, r3, #8
 80074ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f023 0304 	bic.w	r3, r3, #4
 80074fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1d      	ldr	r2, [pc, #116]	@ (8007578 <TIM_OC1_SetConfig+0x11c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d013      	beq.n	800752e <TIM_OC1_SetConfig+0xd2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a1c      	ldr	r2, [pc, #112]	@ (800757c <TIM_OC1_SetConfig+0x120>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d00f      	beq.n	800752e <TIM_OC1_SetConfig+0xd2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1b      	ldr	r2, [pc, #108]	@ (8007580 <TIM_OC1_SetConfig+0x124>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d00b      	beq.n	800752e <TIM_OC1_SetConfig+0xd2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a1a      	ldr	r2, [pc, #104]	@ (8007584 <TIM_OC1_SetConfig+0x128>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d007      	beq.n	800752e <TIM_OC1_SetConfig+0xd2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a19      	ldr	r2, [pc, #100]	@ (8007588 <TIM_OC1_SetConfig+0x12c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d003      	beq.n	800752e <TIM_OC1_SetConfig+0xd2>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a18      	ldr	r2, [pc, #96]	@ (800758c <TIM_OC1_SetConfig+0x130>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d111      	bne.n	8007552 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800753c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	4313      	orrs	r3, r2
 8007546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	621a      	str	r2, [r3, #32]
}
 800756c:	bf00      	nop
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	40012c00 	.word	0x40012c00
 800757c:	40013400 	.word	0x40013400
 8007580:	40014000 	.word	0x40014000
 8007584:	40014400 	.word	0x40014400
 8007588:	40014800 	.word	0x40014800
 800758c:	40015000 	.word	0x40015000

08007590 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a1b      	ldr	r3, [r3, #32]
 800759e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a1b      	ldr	r3, [r3, #32]
 80075a4:	f023 0210 	bic.w	r2, r3, #16
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	021b      	lsls	r3, r3, #8
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0320 	bic.w	r3, r3, #32
 80075de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	011b      	lsls	r3, r3, #4
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a2c      	ldr	r2, [pc, #176]	@ (80076a0 <TIM_OC2_SetConfig+0x110>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_OC2_SetConfig+0x74>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a2b      	ldr	r2, [pc, #172]	@ (80076a4 <TIM_OC2_SetConfig+0x114>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_OC2_SetConfig+0x74>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a2a      	ldr	r2, [pc, #168]	@ (80076a8 <TIM_OC2_SetConfig+0x118>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d10d      	bne.n	8007620 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800760a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800761e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a1f      	ldr	r2, [pc, #124]	@ (80076a0 <TIM_OC2_SetConfig+0x110>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d013      	beq.n	8007650 <TIM_OC2_SetConfig+0xc0>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a1e      	ldr	r2, [pc, #120]	@ (80076a4 <TIM_OC2_SetConfig+0x114>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00f      	beq.n	8007650 <TIM_OC2_SetConfig+0xc0>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a1e      	ldr	r2, [pc, #120]	@ (80076ac <TIM_OC2_SetConfig+0x11c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_OC2_SetConfig+0xc0>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a1d      	ldr	r2, [pc, #116]	@ (80076b0 <TIM_OC2_SetConfig+0x120>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_OC2_SetConfig+0xc0>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a1c      	ldr	r2, [pc, #112]	@ (80076b4 <TIM_OC2_SetConfig+0x124>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_OC2_SetConfig+0xc0>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a17      	ldr	r2, [pc, #92]	@ (80076a8 <TIM_OC2_SetConfig+0x118>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d113      	bne.n	8007678 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40012c00 	.word	0x40012c00
 80076a4:	40013400 	.word	0x40013400
 80076a8:	40015000 	.word	0x40015000
 80076ac:	40014000 	.word	0x40014000
 80076b0:	40014400 	.word	0x40014400
 80076b4:	40014800 	.word	0x40014800

080076b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0303 	bic.w	r3, r3, #3
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	021b      	lsls	r3, r3, #8
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a2b      	ldr	r2, [pc, #172]	@ (80077c4 <TIM_OC3_SetConfig+0x10c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d007      	beq.n	800772a <TIM_OC3_SetConfig+0x72>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a2a      	ldr	r2, [pc, #168]	@ (80077c8 <TIM_OC3_SetConfig+0x110>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d003      	beq.n	800772a <TIM_OC3_SetConfig+0x72>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a29      	ldr	r2, [pc, #164]	@ (80077cc <TIM_OC3_SetConfig+0x114>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d10d      	bne.n	8007746 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	021b      	lsls	r3, r3, #8
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a1e      	ldr	r2, [pc, #120]	@ (80077c4 <TIM_OC3_SetConfig+0x10c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <TIM_OC3_SetConfig+0xbe>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a1d      	ldr	r2, [pc, #116]	@ (80077c8 <TIM_OC3_SetConfig+0x110>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00f      	beq.n	8007776 <TIM_OC3_SetConfig+0xbe>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a1d      	ldr	r2, [pc, #116]	@ (80077d0 <TIM_OC3_SetConfig+0x118>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00b      	beq.n	8007776 <TIM_OC3_SetConfig+0xbe>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a1c      	ldr	r2, [pc, #112]	@ (80077d4 <TIM_OC3_SetConfig+0x11c>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d007      	beq.n	8007776 <TIM_OC3_SetConfig+0xbe>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a1b      	ldr	r2, [pc, #108]	@ (80077d8 <TIM_OC3_SetConfig+0x120>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d003      	beq.n	8007776 <TIM_OC3_SetConfig+0xbe>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a16      	ldr	r2, [pc, #88]	@ (80077cc <TIM_OC3_SetConfig+0x114>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d113      	bne.n	800779e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800777c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	4313      	orrs	r3, r2
 8007790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	693a      	ldr	r2, [r7, #16]
 80077a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685a      	ldr	r2, [r3, #4]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	621a      	str	r2, [r3, #32]
}
 80077b8:	bf00      	nop
 80077ba:	371c      	adds	r7, #28
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40013400 	.word	0x40013400
 80077cc:	40015000 	.word	0x40015000
 80077d0:	40014000 	.word	0x40014000
 80077d4:	40014400 	.word	0x40014400
 80077d8:	40014800 	.word	0x40014800

080077dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077dc:	b480      	push	{r7}
 80077de:	b087      	sub	sp, #28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	69db      	ldr	r3, [r3, #28]
 8007802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800782a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	031b      	lsls	r3, r3, #12
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a2c      	ldr	r2, [pc, #176]	@ (80078ec <TIM_OC4_SetConfig+0x110>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d007      	beq.n	8007850 <TIM_OC4_SetConfig+0x74>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a2b      	ldr	r2, [pc, #172]	@ (80078f0 <TIM_OC4_SetConfig+0x114>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d003      	beq.n	8007850 <TIM_OC4_SetConfig+0x74>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	4a2a      	ldr	r2, [pc, #168]	@ (80078f4 <TIM_OC4_SetConfig+0x118>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d10d      	bne.n	800786c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	031b      	lsls	r3, r3, #12
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	4313      	orrs	r3, r2
 8007862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800786a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a1f      	ldr	r2, [pc, #124]	@ (80078ec <TIM_OC4_SetConfig+0x110>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <TIM_OC4_SetConfig+0xc0>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	4a1e      	ldr	r2, [pc, #120]	@ (80078f0 <TIM_OC4_SetConfig+0x114>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00f      	beq.n	800789c <TIM_OC4_SetConfig+0xc0>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a1e      	ldr	r2, [pc, #120]	@ (80078f8 <TIM_OC4_SetConfig+0x11c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00b      	beq.n	800789c <TIM_OC4_SetConfig+0xc0>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a1d      	ldr	r2, [pc, #116]	@ (80078fc <TIM_OC4_SetConfig+0x120>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d007      	beq.n	800789c <TIM_OC4_SetConfig+0xc0>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a1c      	ldr	r2, [pc, #112]	@ (8007900 <TIM_OC4_SetConfig+0x124>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d003      	beq.n	800789c <TIM_OC4_SetConfig+0xc0>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a17      	ldr	r2, [pc, #92]	@ (80078f4 <TIM_OC4_SetConfig+0x118>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d113      	bne.n	80078c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	019b      	lsls	r3, r3, #6
 80078b2:	693a      	ldr	r2, [r7, #16]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	019b      	lsls	r3, r3, #6
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	685a      	ldr	r2, [r3, #4]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	621a      	str	r2, [r3, #32]
}
 80078de:	bf00      	nop
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40012c00 	.word	0x40012c00
 80078f0:	40013400 	.word	0x40013400
 80078f4:	40015000 	.word	0x40015000
 80078f8:	40014000 	.word	0x40014000
 80078fc:	40014400 	.word	0x40014400
 8007900:	40014800 	.word	0x40014800

08007904 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007904:	b480      	push	{r7}
 8007906:	b087      	sub	sp, #28
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4313      	orrs	r3, r2
 8007940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007948:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	041b      	lsls	r3, r3, #16
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a19      	ldr	r2, [pc, #100]	@ (80079c0 <TIM_OC5_SetConfig+0xbc>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d013      	beq.n	8007986 <TIM_OC5_SetConfig+0x82>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a18      	ldr	r2, [pc, #96]	@ (80079c4 <TIM_OC5_SetConfig+0xc0>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d00f      	beq.n	8007986 <TIM_OC5_SetConfig+0x82>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a17      	ldr	r2, [pc, #92]	@ (80079c8 <TIM_OC5_SetConfig+0xc4>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00b      	beq.n	8007986 <TIM_OC5_SetConfig+0x82>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a16      	ldr	r2, [pc, #88]	@ (80079cc <TIM_OC5_SetConfig+0xc8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d007      	beq.n	8007986 <TIM_OC5_SetConfig+0x82>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a15      	ldr	r2, [pc, #84]	@ (80079d0 <TIM_OC5_SetConfig+0xcc>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d003      	beq.n	8007986 <TIM_OC5_SetConfig+0x82>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a14      	ldr	r2, [pc, #80]	@ (80079d4 <TIM_OC5_SetConfig+0xd0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d109      	bne.n	800799a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800798c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4313      	orrs	r3, r2
 8007998:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	621a      	str	r2, [r3, #32]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40013400 	.word	0x40013400
 80079c8:	40014000 	.word	0x40014000
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40014800 	.word	0x40014800
 80079d4:	40015000 	.word	0x40015000

080079d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	021b      	lsls	r3, r3, #8
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	051b      	lsls	r3, r3, #20
 8007a26:	693a      	ldr	r2, [r7, #16]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007a98 <TIM_OC6_SetConfig+0xc0>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d013      	beq.n	8007a5c <TIM_OC6_SetConfig+0x84>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a19      	ldr	r2, [pc, #100]	@ (8007a9c <TIM_OC6_SetConfig+0xc4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d00f      	beq.n	8007a5c <TIM_OC6_SetConfig+0x84>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a18      	ldr	r2, [pc, #96]	@ (8007aa0 <TIM_OC6_SetConfig+0xc8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00b      	beq.n	8007a5c <TIM_OC6_SetConfig+0x84>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a17      	ldr	r2, [pc, #92]	@ (8007aa4 <TIM_OC6_SetConfig+0xcc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d007      	beq.n	8007a5c <TIM_OC6_SetConfig+0x84>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a16      	ldr	r2, [pc, #88]	@ (8007aa8 <TIM_OC6_SetConfig+0xd0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d003      	beq.n	8007a5c <TIM_OC6_SetConfig+0x84>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a15      	ldr	r2, [pc, #84]	@ (8007aac <TIM_OC6_SetConfig+0xd4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d109      	bne.n	8007a70 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	029b      	lsls	r3, r3, #10
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	697a      	ldr	r2, [r7, #20]
 8007a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	693a      	ldr	r2, [r7, #16]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40012c00 	.word	0x40012c00
 8007a9c:	40013400 	.word	0x40013400
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800
 8007aac:	40015000 	.word	0x40015000

08007ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1b      	ldr	r3, [r3, #32]
 8007ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f023 0201 	bic.w	r2, r3, #1
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	699b      	ldr	r3, [r3, #24]
 8007ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 030a 	bic.w	r3, r3, #10
 8007aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	bf00      	nop
 8007b04:	371c      	adds	r7, #28
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b087      	sub	sp, #28
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	f023 0210 	bic.w	r2, r3, #16
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	031b      	lsls	r3, r3, #12
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b4a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	b085      	sub	sp, #20
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	6078      	str	r0, [r7, #4]
 8007b76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b8a:	683a      	ldr	r2, [r7, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	f043 0307 	orr.w	r3, r3, #7
 8007b94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	609a      	str	r2, [r3, #8]
}
 8007b9c:	bf00      	nop
 8007b9e:	3714      	adds	r7, #20
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr

08007ba8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b087      	sub	sp, #28
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	021a      	lsls	r2, r3, #8
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	609a      	str	r2, [r3, #8]
}
 8007bdc:	bf00      	nop
 8007bde:	371c      	adds	r7, #28
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 031f 	and.w	r3, r3, #31
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6a1a      	ldr	r2, [r3, #32]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	43db      	mvns	r3, r3
 8007c0a:	401a      	ands	r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a1a      	ldr	r2, [r3, #32]
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c20:	431a      	orrs	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	621a      	str	r2, [r3, #32]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a26      	ldr	r2, [pc, #152]	@ (8007cd8 <TIM_ResetCallback+0xa4>)
 8007c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a25      	ldr	r2, [pc, #148]	@ (8007cdc <TIM_ResetCallback+0xa8>)
 8007c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a24      	ldr	r2, [pc, #144]	@ (8007ce0 <TIM_ResetCallback+0xac>)
 8007c50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a23      	ldr	r2, [pc, #140]	@ (8007ce4 <TIM_ResetCallback+0xb0>)
 8007c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a22      	ldr	r2, [pc, #136]	@ (8007ce8 <TIM_ResetCallback+0xb4>)
 8007c60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a21      	ldr	r2, [pc, #132]	@ (8007cec <TIM_ResetCallback+0xb8>)
 8007c68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a20      	ldr	r2, [pc, #128]	@ (8007cf0 <TIM_ResetCallback+0xbc>)
 8007c70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a1f      	ldr	r2, [pc, #124]	@ (8007cf4 <TIM_ResetCallback+0xc0>)
 8007c78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf8 <TIM_ResetCallback+0xc4>)
 8007c80:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a1d      	ldr	r2, [pc, #116]	@ (8007cfc <TIM_ResetCallback+0xc8>)
 8007c88:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8007d00 <TIM_ResetCallback+0xcc>)
 8007c90:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a1b      	ldr	r2, [pc, #108]	@ (8007d04 <TIM_ResetCallback+0xd0>)
 8007c98:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8007d08 <TIM_ResetCallback+0xd4>)
 8007ca0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a19      	ldr	r2, [pc, #100]	@ (8007d0c <TIM_ResetCallback+0xd8>)
 8007ca8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a18      	ldr	r2, [pc, #96]	@ (8007d10 <TIM_ResetCallback+0xdc>)
 8007cb0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a17      	ldr	r2, [pc, #92]	@ (8007d14 <TIM_ResetCallback+0xe0>)
 8007cb8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a16      	ldr	r2, [pc, #88]	@ (8007d18 <TIM_ResetCallback+0xe4>)
 8007cc0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a15      	ldr	r2, [pc, #84]	@ (8007d1c <TIM_ResetCallback+0xe8>)
 8007cc8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	08006f6d 	.word	0x08006f6d
 8007cdc:	08006f81 	.word	0x08006f81
 8007ce0:	08006ff9 	.word	0x08006ff9
 8007ce4:	0800700d 	.word	0x0800700d
 8007ce8:	08006fa9 	.word	0x08006fa9
 8007cec:	08006fbd 	.word	0x08006fbd
 8007cf0:	08006f95 	.word	0x08006f95
 8007cf4:	08006fd1 	.word	0x08006fd1
 8007cf8:	08006fe5 	.word	0x08006fe5
 8007cfc:	08007021 	.word	0x08007021
 8007d00:	08007f75 	.word	0x08007f75
 8007d04:	08007f89 	.word	0x08007f89
 8007d08:	08007f9d 	.word	0x08007f9d
 8007d0c:	08007fb1 	.word	0x08007fb1
 8007d10:	08007fc5 	.word	0x08007fc5
 8007d14:	08007fd9 	.word	0x08007fd9
 8007d18:	08007fed 	.word	0x08007fed
 8007d1c:	08008001 	.word	0x08008001

08007d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e074      	b.n	8007e22 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a34      	ldr	r2, [pc, #208]	@ (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a33      	ldr	r2, [pc, #204]	@ (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a31      	ldr	r2, [pc, #196]	@ (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d108      	bne.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007d7c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a21      	ldr	r2, [pc, #132]	@ (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d022      	beq.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db8:	d01d      	beq.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d018      	beq.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d013      	beq.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d00e      	beq.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a15      	ldr	r2, [pc, #84]	@ (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d009      	beq.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a18      	ldr	r2, [pc, #96]	@ (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d004      	beq.n	8007df6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a11      	ldr	r2, [pc, #68]	@ (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d10c      	bne.n	8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40013400 	.word	0x40013400
 8007e38:	40015000 	.word	0x40015000
 8007e3c:	40000400 	.word	0x40000400
 8007e40:	40000800 	.word	0x40000800
 8007e44:	40000c00 	.word	0x40000c00
 8007e48:	40014000 	.word	0x40014000

08007e4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d101      	bne.n	8007e68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e078      	b.n	8007f5a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	041b      	lsls	r3, r3, #16
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f68 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d009      	beq.n	8007f0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a1b      	ldr	r2, [pc, #108]	@ (8007f6c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d004      	beq.n	8007f0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a19      	ldr	r2, [pc, #100]	@ (8007f70 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d11c      	bne.n	8007f48 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f18:	051b      	lsls	r3, r3, #20
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f44:	4313      	orrs	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40013400 	.word	0x40013400
 8007f70:	40015000 	.word	0x40015000

08007f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007f90:	bf00      	nop
 8007f92:	370c      	adds	r7, #12
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007fb8:	bf00      	nop
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007fcc:	bf00      	nop
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e050      	b.n	80080c8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800802c:	2b00      	cmp	r3, #0
 800802e:	d114      	bne.n	800805a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fe37 	bl	8008cac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d103      	bne.n	8008050 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a21      	ldr	r2, [pc, #132]	@ (80080d0 <HAL_UART_Init+0xbc>)
 800804c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2224      	movs	r2, #36	@ 0x24
 800805e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0201 	bic.w	r2, r2, #1
 8008070:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f001 f964 	bl	8009348 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fe65 	bl	8008d50 <UART_SetConfig>
 8008086:	4603      	mov	r3, r0
 8008088:	2b01      	cmp	r3, #1
 800808a:	d101      	bne.n	8008090 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e01b      	b.n	80080c8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800809e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f9e3 	bl	800948c <UART_CheckIdleState>
 80080c6:	4603      	mov	r3, r0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	080024e1 	.word	0x080024e1

080080d4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	460b      	mov	r3, r1
 80080de:	607a      	str	r2, [r7, #4]
 80080e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d109      	bne.n	8008100 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080f2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e09c      	b.n	800823a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008106:	2b20      	cmp	r3, #32
 8008108:	d16c      	bne.n	80081e4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800810a:	7afb      	ldrb	r3, [r7, #11]
 800810c:	2b0c      	cmp	r3, #12
 800810e:	d85e      	bhi.n	80081ce <HAL_UART_RegisterCallback+0xfa>
 8008110:	a201      	add	r2, pc, #4	@ (adr r2, 8008118 <HAL_UART_RegisterCallback+0x44>)
 8008112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008116:	bf00      	nop
 8008118:	0800814d 	.word	0x0800814d
 800811c:	08008157 	.word	0x08008157
 8008120:	08008161 	.word	0x08008161
 8008124:	0800816b 	.word	0x0800816b
 8008128:	08008175 	.word	0x08008175
 800812c:	0800817f 	.word	0x0800817f
 8008130:	08008189 	.word	0x08008189
 8008134:	08008193 	.word	0x08008193
 8008138:	0800819d 	.word	0x0800819d
 800813c:	080081a7 	.word	0x080081a7
 8008140:	080081b1 	.word	0x080081b1
 8008144:	080081bb 	.word	0x080081bb
 8008148:	080081c5 	.word	0x080081c5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008154:	e070      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800815e:	e06b      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008168:	e066      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008172:	e061      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800817c:	e05c      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008186:	e057      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008190:	e052      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800819a:	e04d      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80081a4:	e048      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80081ae:	e043      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80081b8:	e03e      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80081c2:	e039      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80081cc:	e034      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
        break;
 80081e2:	e029      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d11a      	bne.n	8008224 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80081ee:	7afb      	ldrb	r3, [r7, #11]
 80081f0:	2b0b      	cmp	r3, #11
 80081f2:	d002      	beq.n	80081fa <HAL_UART_RegisterCallback+0x126>
 80081f4:	2b0c      	cmp	r3, #12
 80081f6:	d005      	beq.n	8008204 <HAL_UART_RegisterCallback+0x130>
 80081f8:	e009      	b.n	800820e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008202:	e019      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800820c:	e014      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008214:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]
        break;
 8008222:	e009      	b.n	8008238 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800822a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008234:	2301      	movs	r3, #1
 8008236:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
}
 800823a:	4618      	mov	r0, r3
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08a      	sub	sp, #40	@ 0x28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	4613      	mov	r3, r2
 8008254:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800825c:	2b20      	cmp	r3, #32
 800825e:	d137      	bne.n	80082d0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <HAL_UART_Receive_IT+0x24>
 8008266:	88fb      	ldrh	r3, [r7, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e030      	b.n	80082d2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2200      	movs	r2, #0
 8008274:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a18      	ldr	r2, [pc, #96]	@ (80082dc <HAL_UART_Receive_IT+0x94>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d01f      	beq.n	80082c0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d018      	beq.n	80082c0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	613b      	str	r3, [r7, #16]
   return(result);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80082a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ac:	623b      	str	r3, [r7, #32]
 80082ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b0:	69f9      	ldr	r1, [r7, #28]
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	e841 2300 	strex	r3, r2, [r1]
 80082b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e6      	bne.n	800828e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80082c0:	88fb      	ldrh	r3, [r7, #6]
 80082c2:	461a      	mov	r2, r3
 80082c4:	68b9      	ldr	r1, [r7, #8]
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f001 f9f8 	bl	80096bc <UART_Start_Receive_IT>
 80082cc:	4603      	mov	r3, r0
 80082ce:	e000      	b.n	80082d2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082d0:	2302      	movs	r3, #2
  }
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3728      	adds	r7, #40	@ 0x28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	40008000 	.word	0x40008000

080082e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	@ 0x28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	4613      	mov	r3, r2
 80082ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d167      	bne.n	80083c8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d002      	beq.n	8008304 <HAL_UART_Transmit_DMA+0x24>
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e060      	b.n	80083ca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	88fa      	ldrh	r2, [r7, #6]
 800831a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2221      	movs	r2, #33	@ 0x21
 800832a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d028      	beq.n	8008388 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800833a:	4a26      	ldr	r2, [pc, #152]	@ (80083d4 <HAL_UART_Transmit_DMA+0xf4>)
 800833c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008342:	4a25      	ldr	r2, [pc, #148]	@ (80083d8 <HAL_UART_Transmit_DMA+0xf8>)
 8008344:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800834a:	4a24      	ldr	r2, [pc, #144]	@ (80083dc <HAL_UART_Transmit_DMA+0xfc>)
 800834c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008352:	2200      	movs	r2, #0
 8008354:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800835e:	4619      	mov	r1, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3328      	adds	r3, #40	@ 0x28
 8008366:	461a      	mov	r2, r3
 8008368:	88fb      	ldrh	r3, [r7, #6]
 800836a:	f7fb fd4b 	bl	8003e04 <HAL_DMA_Start_IT>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d009      	beq.n	8008388 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2210      	movs	r2, #16
 8008378:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2220      	movs	r2, #32
 8008380:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e020      	b.n	80083ca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2240      	movs	r2, #64	@ 0x40
 800838e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	613b      	str	r3, [r7, #16]
   return(result);
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	3308      	adds	r3, #8
 80083ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083b0:	623a      	str	r2, [r7, #32]
 80083b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b4:	69f9      	ldr	r1, [r7, #28]
 80083b6:	6a3a      	ldr	r2, [r7, #32]
 80083b8:	e841 2300 	strex	r3, r2, [r1]
 80083bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e5      	bne.n	8008390 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	e000      	b.n	80083ca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80083c8:	2302      	movs	r3, #2
  }
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3728      	adds	r7, #40	@ 0x28
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	08009a4f 	.word	0x08009a4f
 80083d8:	08009aed 	.word	0x08009aed
 80083dc:	08009b0d 	.word	0x08009b0d

080083e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b09a      	sub	sp, #104	@ 0x68
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80083f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008406:	657b      	str	r3, [r7, #84]	@ 0x54
 8008408:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800840c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e6      	bne.n	80083e8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3308      	adds	r3, #8
 8008420:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800842a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	663b      	str	r3, [r7, #96]	@ 0x60
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3308      	adds	r3, #8
 800843c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800843e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008444:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800844c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e3      	bne.n	800841a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008456:	2b01      	cmp	r3, #1
 8008458:	d118      	bne.n	800848c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	e853 3f00 	ldrex	r3, [r3]
 8008466:	61fb      	str	r3, [r7, #28]
   return(result);
 8008468:	69fb      	ldr	r3, [r7, #28]
 800846a:	f023 0310 	bic.w	r3, r3, #16
 800846e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800847a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800847e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008480:	e841 2300 	strex	r3, r2, [r1]
 8008484:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	2b00      	cmp	r3, #0
 800848a:	d1e6      	bne.n	800845a <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008496:	2b40      	cmp	r3, #64	@ 0x40
 8008498:	d13b      	bne.n	8008512 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	3308      	adds	r3, #8
 80084a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	3308      	adds	r3, #8
 80084b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80084ba:	61ba      	str	r2, [r7, #24]
 80084bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6979      	ldr	r1, [r7, #20]
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	613b      	str	r3, [r7, #16]
   return(result);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e5      	bne.n	800849a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d01c      	beq.n	8008512 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084de:	2200      	movs	r2, #0
 80084e0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fb fd06 	bl	8003efa <HAL_DMA_Abort>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00e      	beq.n	8008512 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fb fe6c 	bl	80041d8 <HAL_DMA_GetError>
 8008500:	4603      	mov	r3, r0
 8008502:	2b20      	cmp	r3, #32
 8008504:	d105      	bne.n	8008512 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2210      	movs	r2, #16
 800850a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e017      	b.n	8008542 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	220f      	movs	r2, #15
 8008520:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	699a      	ldr	r2, [r3, #24]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f042 0208 	orr.w	r2, r2, #8
 8008530:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3768      	adds	r7, #104	@ 0x68
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
	...

0800854c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b0ba      	sub	sp, #232	@ 0xe8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008576:	f640 030f 	movw	r3, #2063	@ 0x80f
 800857a:	4013      	ands	r3, r2
 800857c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d11b      	bne.n	80085c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800858c:	f003 0320 	and.w	r3, r3, #32
 8008590:	2b00      	cmp	r3, #0
 8008592:	d015      	beq.n	80085c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d105      	bne.n	80085ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d009      	beq.n	80085c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 8312 	beq.w	8008bda <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
      }
      return;
 80085be:	e30c      	b.n	8008bda <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80085c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	f000 8129 	beq.w	800881c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80085ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80085ce:	4b90      	ldr	r3, [pc, #576]	@ (8008810 <HAL_UART_IRQHandler+0x2c4>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d106      	bne.n	80085e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80085d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80085da:	4b8e      	ldr	r3, [pc, #568]	@ (8008814 <HAL_UART_IRQHandler+0x2c8>)
 80085dc:	4013      	ands	r3, r2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f000 811c 	beq.w	800881c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d011      	beq.n	8008614 <HAL_UART_IRQHandler+0xc8>
 80085f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2201      	movs	r2, #1
 8008602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800860a:	f043 0201 	orr.w	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d011      	beq.n	8008644 <HAL_UART_IRQHandler+0xf8>
 8008620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008624:	f003 0301 	and.w	r3, r3, #1
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2202      	movs	r2, #2
 8008632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800863a:	f043 0204 	orr.w	r2, r3, #4
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008648:	f003 0304 	and.w	r3, r3, #4
 800864c:	2b00      	cmp	r3, #0
 800864e:	d011      	beq.n	8008674 <HAL_UART_IRQHandler+0x128>
 8008650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2204      	movs	r2, #4
 8008662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800866a:	f043 0202 	orr.w	r2, r3, #2
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008678:	f003 0308 	and.w	r3, r3, #8
 800867c:	2b00      	cmp	r3, #0
 800867e:	d017      	beq.n	80086b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008684:	f003 0320 	and.w	r3, r3, #32
 8008688:	2b00      	cmp	r3, #0
 800868a:	d105      	bne.n	8008698 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800868c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008690:	4b5f      	ldr	r3, [pc, #380]	@ (8008810 <HAL_UART_IRQHandler+0x2c4>)
 8008692:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2208      	movs	r2, #8
 800869e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a6:	f043 0208 	orr.w	r2, r3, #8
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80086b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d012      	beq.n	80086e2 <HAL_UART_IRQHandler+0x196>
 80086bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00c      	beq.n	80086e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80086d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d8:	f043 0220 	orr.w	r2, r3, #32
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 8278 	beq.w	8008bde <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80086ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d013      	beq.n	8008722 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80086fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086fe:	f003 0320 	and.w	r3, r3, #32
 8008702:	2b00      	cmp	r3, #0
 8008704:	d105      	bne.n	8008712 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800870a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008736:	2b40      	cmp	r3, #64	@ 0x40
 8008738:	d005      	beq.n	8008746 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800873a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800873e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008742:	2b00      	cmp	r3, #0
 8008744:	d058      	beq.n	80087f8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 f91b 	bl	8009982 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008756:	2b40      	cmp	r3, #64	@ 0x40
 8008758:	d148      	bne.n	80087ec <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3308      	adds	r3, #8
 8008760:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008774:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008778:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3308      	adds	r3, #8
 8008782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008786:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800878a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008796:	e841 2300 	strex	r3, r2, [r1]
 800879a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800879e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1d9      	bne.n	800875a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d017      	beq.n	80087e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b6:	4a18      	ldr	r2, [pc, #96]	@ (8008818 <HAL_UART_IRQHandler+0x2cc>)
 80087b8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fb fbf3 	bl	8003fac <HAL_DMA_Abort_IT>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01f      	beq.n	800880c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80087da:	4610      	mov	r0, r2
 80087dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087de:	e015      	b.n	800880c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ea:	e00f      	b.n	800880c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f6:	e009      	b.n	800880c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800880a:	e1e8      	b.n	8008bde <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800880c:	bf00      	nop
    return;
 800880e:	e1e6      	b.n	8008bde <HAL_UART_IRQHandler+0x692>
 8008810:	10000001 	.word	0x10000001
 8008814:	04000120 	.word	0x04000120
 8008818:	08009b91 	.word	0x08009b91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008820:	2b01      	cmp	r3, #1
 8008822:	f040 8176 	bne.w	8008b12 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 816f 	beq.w	8008b12 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 8168 	beq.w	8008b12 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2210      	movs	r2, #16
 8008848:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008854:	2b40      	cmp	r3, #64	@ 0x40
 8008856:	f040 80dc 	bne.w	8008a12 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008868:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80b1 	beq.w	80089d4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008878:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800887c:	429a      	cmp	r2, r3
 800887e:	f080 80a9 	bcs.w	80089d4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008888:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	f040 8087 	bne.w	80089ae <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80088b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80088b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	461a      	mov	r2, r3
 80088c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80088ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80088ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80088d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80088e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d1da      	bne.n	80088a0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	3308      	adds	r3, #8
 80088f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80088fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80088fc:	f023 0301 	bic.w	r3, r3, #1
 8008900:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3308      	adds	r3, #8
 800890a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800890e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008912:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008916:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e1      	bne.n	80088ea <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3308      	adds	r3, #8
 800892c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800893c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800894a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800894c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008950:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008952:	e841 2300 	strex	r3, r2, [r1]
 8008956:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008958:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1e3      	bne.n	8008926 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2220      	movs	r2, #32
 8008962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800897a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800897c:	f023 0310 	bic.w	r3, r3, #16
 8008980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800898e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008990:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008992:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008994:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008996:	e841 2300 	strex	r3, r2, [r1]
 800899a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800899c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1e4      	bne.n	800896c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fb faa6 	bl	8003efa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2202      	movs	r2, #2
 80089b2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80089c6:	b292      	uxth	r2, r2
 80089c8:	1a8a      	subs	r2, r1, r2
 80089ca:	b292      	uxth	r2, r2
 80089cc:	4611      	mov	r1, r2
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80089d2:	e106      	b.n	8008be2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80089da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089de:	429a      	cmp	r2, r3
 80089e0:	f040 80ff 	bne.w	8008be2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	f040 80f5 	bne.w	8008be2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2202      	movs	r2, #2
 80089fc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
      return;
 8008a10:	e0e7      	b.n	8008be2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80d9 	beq.w	8008be6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	f000 80d4 	beq.w	8008be6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a46:	e853 3f00 	ldrex	r3, [r3]
 8008a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a68:	e841 2300 	strex	r3, r2, [r1]
 8008a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1e4      	bne.n	8008a3e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3308      	adds	r3, #8
 8008a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	623b      	str	r3, [r7, #32]
   return(result);
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a8a:	f023 0301 	bic.w	r3, r3, #1
 8008a8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3308      	adds	r3, #8
 8008a98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008a9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e1      	bne.n	8008a74 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	e853 3f00 	ldrex	r3, [r3]
 8008ad0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f023 0310 	bic.w	r3, r3, #16
 8008ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008ae6:	61fb      	str	r3, [r7, #28]
 8008ae8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	69b9      	ldr	r1, [r7, #24]
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	617b      	str	r3, [r7, #20]
   return(result);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e4      	bne.n	8008ac4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b06:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b10:	e069      	b.n	8008be6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d010      	beq.n	8008b40 <HAL_UART_IRQHandler+0x5f4>
 8008b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00a      	beq.n	8008b40 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008b32:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b3e:	e055      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d014      	beq.n	8008b76 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d105      	bne.n	8008b64 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d008      	beq.n	8008b76 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d03e      	beq.n	8008bea <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	4798      	blx	r3
    }
    return;
 8008b74:	e039      	b.n	8008bea <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d009      	beq.n	8008b96 <HAL_UART_IRQHandler+0x64a>
 8008b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f001 f812 	bl	8009bb8 <UART_EndTransmit_IT>
    return;
 8008b94:	e02a      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <HAL_UART_IRQHandler+0x66e>
 8008ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bb8:	e018      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d012      	beq.n	8008bec <HAL_UART_IRQHandler+0x6a0>
 8008bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da0e      	bge.n	8008bec <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bd8:	e008      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
      return;
 8008bda:	bf00      	nop
 8008bdc:	e006      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
    return;
 8008bde:	bf00      	nop
 8008be0:	e004      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
      return;
 8008be2:	bf00      	nop
 8008be4:	e002      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
      return;
 8008be6:	bf00      	nop
 8008be8:	e000      	b.n	8008bec <HAL_UART_IRQHandler+0x6a0>
    return;
 8008bea:	bf00      	nop
  }
}
 8008bec:	37e8      	adds	r7, #232	@ 0xe8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008c74:	bf00      	nop
 8008c76:	370c      	adds	r7, #12
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8008d20 <UART_InitCallbacksToDefault+0x74>)
 8008cb8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a19      	ldr	r2, [pc, #100]	@ (8008d24 <UART_InitCallbacksToDefault+0x78>)
 8008cc0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a18      	ldr	r2, [pc, #96]	@ (8008d28 <UART_InitCallbacksToDefault+0x7c>)
 8008cc8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a17      	ldr	r2, [pc, #92]	@ (8008d2c <UART_InitCallbacksToDefault+0x80>)
 8008cd0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a16      	ldr	r2, [pc, #88]	@ (8008d30 <UART_InitCallbacksToDefault+0x84>)
 8008cd8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a15      	ldr	r2, [pc, #84]	@ (8008d34 <UART_InitCallbacksToDefault+0x88>)
 8008ce0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a14      	ldr	r2, [pc, #80]	@ (8008d38 <UART_InitCallbacksToDefault+0x8c>)
 8008ce8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a13      	ldr	r2, [pc, #76]	@ (8008d3c <UART_InitCallbacksToDefault+0x90>)
 8008cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a12      	ldr	r2, [pc, #72]	@ (8008d40 <UART_InitCallbacksToDefault+0x94>)
 8008cf8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a11      	ldr	r2, [pc, #68]	@ (8008d44 <UART_InitCallbacksToDefault+0x98>)
 8008d00:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a10      	ldr	r2, [pc, #64]	@ (8008d48 <UART_InitCallbacksToDefault+0x9c>)
 8008d08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8008d4c <UART_InitCallbacksToDefault+0xa0>)
 8008d10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	08008c09 	.word	0x08008c09
 8008d24:	08008bf5 	.word	0x08008bf5
 8008d28:	08008c31 	.word	0x08008c31
 8008d2c:	08008c1d 	.word	0x08008c1d
 8008d30:	08008c45 	.word	0x08008c45
 8008d34:	08008c59 	.word	0x08008c59
 8008d38:	08008c6d 	.word	0x08008c6d
 8008d3c:	08008c81 	.word	0x08008c81
 8008d40:	0800a67d 	.word	0x0800a67d
 8008d44:	0800a691 	.word	0x0800a691
 8008d48:	0800a6a5 	.word	0x0800a6a5
 8008d4c:	08008c95 	.word	0x08008c95

08008d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d54:	b08c      	sub	sp, #48	@ 0x30
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	431a      	orrs	r2, r3
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	4baa      	ldr	r3, [pc, #680]	@ (8009028 <UART_SetConfig+0x2d8>)
 8008d80:	4013      	ands	r3, r2
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d88:	430b      	orrs	r3, r1
 8008d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a9f      	ldr	r2, [pc, #636]	@ (800902c <UART_SetConfig+0x2dc>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008db8:	4313      	orrs	r3, r2
 8008dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008dc6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	6812      	ldr	r2, [r2, #0]
 8008dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dd0:	430b      	orrs	r3, r1
 8008dd2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dda:	f023 010f 	bic.w	r1, r3, #15
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a90      	ldr	r2, [pc, #576]	@ (8009030 <UART_SetConfig+0x2e0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d125      	bne.n	8008e40 <UART_SetConfig+0xf0>
 8008df4:	4b8f      	ldr	r3, [pc, #572]	@ (8009034 <UART_SetConfig+0x2e4>)
 8008df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dfa:	f003 0303 	and.w	r3, r3, #3
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d81a      	bhi.n	8008e38 <UART_SetConfig+0xe8>
 8008e02:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <UART_SetConfig+0xb8>)
 8008e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e08:	08008e19 	.word	0x08008e19
 8008e0c:	08008e29 	.word	0x08008e29
 8008e10:	08008e21 	.word	0x08008e21
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	2301      	movs	r3, #1
 8008e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1e:	e116      	b.n	800904e <UART_SetConfig+0x2fe>
 8008e20:	2302      	movs	r3, #2
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e26:	e112      	b.n	800904e <UART_SetConfig+0x2fe>
 8008e28:	2304      	movs	r3, #4
 8008e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e2e:	e10e      	b.n	800904e <UART_SetConfig+0x2fe>
 8008e30:	2308      	movs	r3, #8
 8008e32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e36:	e10a      	b.n	800904e <UART_SetConfig+0x2fe>
 8008e38:	2310      	movs	r3, #16
 8008e3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e3e:	e106      	b.n	800904e <UART_SetConfig+0x2fe>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a7c      	ldr	r2, [pc, #496]	@ (8009038 <UART_SetConfig+0x2e8>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d138      	bne.n	8008ebc <UART_SetConfig+0x16c>
 8008e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8009034 <UART_SetConfig+0x2e4>)
 8008e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e50:	f003 030c 	and.w	r3, r3, #12
 8008e54:	2b0c      	cmp	r3, #12
 8008e56:	d82d      	bhi.n	8008eb4 <UART_SetConfig+0x164>
 8008e58:	a201      	add	r2, pc, #4	@ (adr r2, 8008e60 <UART_SetConfig+0x110>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008e95 	.word	0x08008e95
 8008e64:	08008eb5 	.word	0x08008eb5
 8008e68:	08008eb5 	.word	0x08008eb5
 8008e6c:	08008eb5 	.word	0x08008eb5
 8008e70:	08008ea5 	.word	0x08008ea5
 8008e74:	08008eb5 	.word	0x08008eb5
 8008e78:	08008eb5 	.word	0x08008eb5
 8008e7c:	08008eb5 	.word	0x08008eb5
 8008e80:	08008e9d 	.word	0x08008e9d
 8008e84:	08008eb5 	.word	0x08008eb5
 8008e88:	08008eb5 	.word	0x08008eb5
 8008e8c:	08008eb5 	.word	0x08008eb5
 8008e90:	08008ead 	.word	0x08008ead
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e9a:	e0d8      	b.n	800904e <UART_SetConfig+0x2fe>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ea2:	e0d4      	b.n	800904e <UART_SetConfig+0x2fe>
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eaa:	e0d0      	b.n	800904e <UART_SetConfig+0x2fe>
 8008eac:	2308      	movs	r3, #8
 8008eae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eb2:	e0cc      	b.n	800904e <UART_SetConfig+0x2fe>
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eba:	e0c8      	b.n	800904e <UART_SetConfig+0x2fe>
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800903c <UART_SetConfig+0x2ec>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d125      	bne.n	8008f12 <UART_SetConfig+0x1c2>
 8008ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8009034 <UART_SetConfig+0x2e4>)
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ecc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008ed0:	2b30      	cmp	r3, #48	@ 0x30
 8008ed2:	d016      	beq.n	8008f02 <UART_SetConfig+0x1b2>
 8008ed4:	2b30      	cmp	r3, #48	@ 0x30
 8008ed6:	d818      	bhi.n	8008f0a <UART_SetConfig+0x1ba>
 8008ed8:	2b20      	cmp	r3, #32
 8008eda:	d00a      	beq.n	8008ef2 <UART_SetConfig+0x1a2>
 8008edc:	2b20      	cmp	r3, #32
 8008ede:	d814      	bhi.n	8008f0a <UART_SetConfig+0x1ba>
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <UART_SetConfig+0x19a>
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	d008      	beq.n	8008efa <UART_SetConfig+0x1aa>
 8008ee8:	e00f      	b.n	8008f0a <UART_SetConfig+0x1ba>
 8008eea:	2300      	movs	r3, #0
 8008eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef0:	e0ad      	b.n	800904e <UART_SetConfig+0x2fe>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef8:	e0a9      	b.n	800904e <UART_SetConfig+0x2fe>
 8008efa:	2304      	movs	r3, #4
 8008efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f00:	e0a5      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f02:	2308      	movs	r3, #8
 8008f04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f08:	e0a1      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f0a:	2310      	movs	r3, #16
 8008f0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f10:	e09d      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a4a      	ldr	r2, [pc, #296]	@ (8009040 <UART_SetConfig+0x2f0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d125      	bne.n	8008f68 <UART_SetConfig+0x218>
 8008f1c:	4b45      	ldr	r3, [pc, #276]	@ (8009034 <UART_SetConfig+0x2e4>)
 8008f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008f26:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f28:	d016      	beq.n	8008f58 <UART_SetConfig+0x208>
 8008f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008f2c:	d818      	bhi.n	8008f60 <UART_SetConfig+0x210>
 8008f2e:	2b80      	cmp	r3, #128	@ 0x80
 8008f30:	d00a      	beq.n	8008f48 <UART_SetConfig+0x1f8>
 8008f32:	2b80      	cmp	r3, #128	@ 0x80
 8008f34:	d814      	bhi.n	8008f60 <UART_SetConfig+0x210>
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <UART_SetConfig+0x1f0>
 8008f3a:	2b40      	cmp	r3, #64	@ 0x40
 8008f3c:	d008      	beq.n	8008f50 <UART_SetConfig+0x200>
 8008f3e:	e00f      	b.n	8008f60 <UART_SetConfig+0x210>
 8008f40:	2300      	movs	r3, #0
 8008f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f46:	e082      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4e:	e07e      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f50:	2304      	movs	r3, #4
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f56:	e07a      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5e:	e076      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f60:	2310      	movs	r3, #16
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e072      	b.n	800904e <UART_SetConfig+0x2fe>
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a35      	ldr	r2, [pc, #212]	@ (8009044 <UART_SetConfig+0x2f4>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d12a      	bne.n	8008fc8 <UART_SetConfig+0x278>
 8008f72:	4b30      	ldr	r3, [pc, #192]	@ (8009034 <UART_SetConfig+0x2e4>)
 8008f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f80:	d01a      	beq.n	8008fb8 <UART_SetConfig+0x268>
 8008f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f86:	d81b      	bhi.n	8008fc0 <UART_SetConfig+0x270>
 8008f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f8c:	d00c      	beq.n	8008fa8 <UART_SetConfig+0x258>
 8008f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f92:	d815      	bhi.n	8008fc0 <UART_SetConfig+0x270>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d003      	beq.n	8008fa0 <UART_SetConfig+0x250>
 8008f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f9c:	d008      	beq.n	8008fb0 <UART_SetConfig+0x260>
 8008f9e:	e00f      	b.n	8008fc0 <UART_SetConfig+0x270>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fa6:	e052      	b.n	800904e <UART_SetConfig+0x2fe>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fae:	e04e      	b.n	800904e <UART_SetConfig+0x2fe>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb6:	e04a      	b.n	800904e <UART_SetConfig+0x2fe>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fbe:	e046      	b.n	800904e <UART_SetConfig+0x2fe>
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc6:	e042      	b.n	800904e <UART_SetConfig+0x2fe>
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a17      	ldr	r2, [pc, #92]	@ (800902c <UART_SetConfig+0x2dc>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d13a      	bne.n	8009048 <UART_SetConfig+0x2f8>
 8008fd2:	4b18      	ldr	r3, [pc, #96]	@ (8009034 <UART_SetConfig+0x2e4>)
 8008fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008fdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fe0:	d01a      	beq.n	8009018 <UART_SetConfig+0x2c8>
 8008fe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008fe6:	d81b      	bhi.n	8009020 <UART_SetConfig+0x2d0>
 8008fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fec:	d00c      	beq.n	8009008 <UART_SetConfig+0x2b8>
 8008fee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ff2:	d815      	bhi.n	8009020 <UART_SetConfig+0x2d0>
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d003      	beq.n	8009000 <UART_SetConfig+0x2b0>
 8008ff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ffc:	d008      	beq.n	8009010 <UART_SetConfig+0x2c0>
 8008ffe:	e00f      	b.n	8009020 <UART_SetConfig+0x2d0>
 8009000:	2300      	movs	r3, #0
 8009002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009006:	e022      	b.n	800904e <UART_SetConfig+0x2fe>
 8009008:	2302      	movs	r3, #2
 800900a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800900e:	e01e      	b.n	800904e <UART_SetConfig+0x2fe>
 8009010:	2304      	movs	r3, #4
 8009012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009016:	e01a      	b.n	800904e <UART_SetConfig+0x2fe>
 8009018:	2308      	movs	r3, #8
 800901a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800901e:	e016      	b.n	800904e <UART_SetConfig+0x2fe>
 8009020:	2310      	movs	r3, #16
 8009022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009026:	e012      	b.n	800904e <UART_SetConfig+0x2fe>
 8009028:	cfff69f3 	.word	0xcfff69f3
 800902c:	40008000 	.word	0x40008000
 8009030:	40013800 	.word	0x40013800
 8009034:	40021000 	.word	0x40021000
 8009038:	40004400 	.word	0x40004400
 800903c:	40004800 	.word	0x40004800
 8009040:	40004c00 	.word	0x40004c00
 8009044:	40005000 	.word	0x40005000
 8009048:	2310      	movs	r3, #16
 800904a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4aae      	ldr	r2, [pc, #696]	@ (800930c <UART_SetConfig+0x5bc>)
 8009054:	4293      	cmp	r3, r2
 8009056:	f040 8097 	bne.w	8009188 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800905a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800905e:	2b08      	cmp	r3, #8
 8009060:	d823      	bhi.n	80090aa <UART_SetConfig+0x35a>
 8009062:	a201      	add	r2, pc, #4	@ (adr r2, 8009068 <UART_SetConfig+0x318>)
 8009064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009068:	0800908d 	.word	0x0800908d
 800906c:	080090ab 	.word	0x080090ab
 8009070:	08009095 	.word	0x08009095
 8009074:	080090ab 	.word	0x080090ab
 8009078:	0800909b 	.word	0x0800909b
 800907c:	080090ab 	.word	0x080090ab
 8009080:	080090ab 	.word	0x080090ab
 8009084:	080090ab 	.word	0x080090ab
 8009088:	080090a3 	.word	0x080090a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800908c:	f7fc f872 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8009090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009092:	e010      	b.n	80090b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009094:	4b9e      	ldr	r3, [pc, #632]	@ (8009310 <UART_SetConfig+0x5c0>)
 8009096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009098:	e00d      	b.n	80090b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800909a:	f7fb fffd 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 800909e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090a0:	e009      	b.n	80090b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090a8:	e005      	b.n	80090b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80090b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 8130 	beq.w	800931e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c2:	4a94      	ldr	r2, [pc, #592]	@ (8009314 <UART_SetConfig+0x5c4>)
 80090c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	4613      	mov	r3, r2
 80090d8:	005b      	lsls	r3, r3, #1
 80090da:	4413      	add	r3, r2
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d305      	bcc.n	80090ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d903      	bls.n	80090f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80090f4:	e113      	b.n	800931e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f8:	2200      	movs	r2, #0
 80090fa:	60bb      	str	r3, [r7, #8]
 80090fc:	60fa      	str	r2, [r7, #12]
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009102:	4a84      	ldr	r2, [pc, #528]	@ (8009314 <UART_SetConfig+0x5c4>)
 8009104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009108:	b29b      	uxth	r3, r3
 800910a:	2200      	movs	r2, #0
 800910c:	603b      	str	r3, [r7, #0]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009114:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009118:	f7f7 f87e 	bl	8000218 <__aeabi_uldivmod>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4610      	mov	r0, r2
 8009122:	4619      	mov	r1, r3
 8009124:	f04f 0200 	mov.w	r2, #0
 8009128:	f04f 0300 	mov.w	r3, #0
 800912c:	020b      	lsls	r3, r1, #8
 800912e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009132:	0202      	lsls	r2, r0, #8
 8009134:	6979      	ldr	r1, [r7, #20]
 8009136:	6849      	ldr	r1, [r1, #4]
 8009138:	0849      	lsrs	r1, r1, #1
 800913a:	2000      	movs	r0, #0
 800913c:	460c      	mov	r4, r1
 800913e:	4605      	mov	r5, r0
 8009140:	eb12 0804 	adds.w	r8, r2, r4
 8009144:	eb43 0905 	adc.w	r9, r3, r5
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	469a      	mov	sl, r3
 8009150:	4693      	mov	fp, r2
 8009152:	4652      	mov	r2, sl
 8009154:	465b      	mov	r3, fp
 8009156:	4640      	mov	r0, r8
 8009158:	4649      	mov	r1, r9
 800915a:	f7f7 f85d 	bl	8000218 <__aeabi_uldivmod>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4613      	mov	r3, r2
 8009164:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800916c:	d308      	bcc.n	8009180 <UART_SetConfig+0x430>
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009174:	d204      	bcs.n	8009180 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	6a3a      	ldr	r2, [r7, #32]
 800917c:	60da      	str	r2, [r3, #12]
 800917e:	e0ce      	b.n	800931e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009186:	e0ca      	b.n	800931e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	69db      	ldr	r3, [r3, #28]
 800918c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009190:	d166      	bne.n	8009260 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009192:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009196:	2b08      	cmp	r3, #8
 8009198:	d827      	bhi.n	80091ea <UART_SetConfig+0x49a>
 800919a:	a201      	add	r2, pc, #4	@ (adr r2, 80091a0 <UART_SetConfig+0x450>)
 800919c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a0:	080091c5 	.word	0x080091c5
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091d5 	.word	0x080091d5
 80091ac:	080091eb 	.word	0x080091eb
 80091b0:	080091db 	.word	0x080091db
 80091b4:	080091eb 	.word	0x080091eb
 80091b8:	080091eb 	.word	0x080091eb
 80091bc:	080091eb 	.word	0x080091eb
 80091c0:	080091e3 	.word	0x080091e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091c4:	f7fb ffd6 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 80091c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091ca:	e014      	b.n	80091f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091cc:	f7fb ffe8 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 80091d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091d2:	e010      	b.n	80091f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091d4:	4b4e      	ldr	r3, [pc, #312]	@ (8009310 <UART_SetConfig+0x5c0>)
 80091d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091d8:	e00d      	b.n	80091f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091da:	f7fb ff5d 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 80091de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091e0:	e009      	b.n	80091f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091e8:	e005      	b.n	80091f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80091ea:	2300      	movs	r3, #0
 80091ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8090 	beq.w	800931e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009202:	4a44      	ldr	r2, [pc, #272]	@ (8009314 <UART_SetConfig+0x5c4>)
 8009204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009208:	461a      	mov	r2, r3
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009210:	005a      	lsls	r2, r3, #1
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	085b      	lsrs	r3, r3, #1
 8009218:	441a      	add	r2, r3
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009222:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	2b0f      	cmp	r3, #15
 8009228:	d916      	bls.n	8009258 <UART_SetConfig+0x508>
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009230:	d212      	bcs.n	8009258 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	b29b      	uxth	r3, r3
 8009236:	f023 030f 	bic.w	r3, r3, #15
 800923a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	085b      	lsrs	r3, r3, #1
 8009240:	b29b      	uxth	r3, r3
 8009242:	f003 0307 	and.w	r3, r3, #7
 8009246:	b29a      	uxth	r2, r3
 8009248:	8bfb      	ldrh	r3, [r7, #30]
 800924a:	4313      	orrs	r3, r2
 800924c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	8bfa      	ldrh	r2, [r7, #30]
 8009254:	60da      	str	r2, [r3, #12]
 8009256:	e062      	b.n	800931e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800925e:	e05e      	b.n	800931e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009260:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009264:	2b08      	cmp	r3, #8
 8009266:	d828      	bhi.n	80092ba <UART_SetConfig+0x56a>
 8009268:	a201      	add	r2, pc, #4	@ (adr r2, 8009270 <UART_SetConfig+0x520>)
 800926a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926e:	bf00      	nop
 8009270:	08009295 	.word	0x08009295
 8009274:	0800929d 	.word	0x0800929d
 8009278:	080092a5 	.word	0x080092a5
 800927c:	080092bb 	.word	0x080092bb
 8009280:	080092ab 	.word	0x080092ab
 8009284:	080092bb 	.word	0x080092bb
 8009288:	080092bb 	.word	0x080092bb
 800928c:	080092bb 	.word	0x080092bb
 8009290:	080092b3 	.word	0x080092b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009294:	f7fb ff6e 	bl	8005174 <HAL_RCC_GetPCLK1Freq>
 8009298:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800929a:	e014      	b.n	80092c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800929c:	f7fb ff80 	bl	80051a0 <HAL_RCC_GetPCLK2Freq>
 80092a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092a2:	e010      	b.n	80092c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009310 <UART_SetConfig+0x5c0>)
 80092a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092a8:	e00d      	b.n	80092c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092aa:	f7fb fef5 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 80092ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092b0:	e009      	b.n	80092c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092b8:	e005      	b.n	80092c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80092ba:	2300      	movs	r3, #0
 80092bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092c4:	bf00      	nop
    }

    if (pclk != 0U)
 80092c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d028      	beq.n	800931e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	4a10      	ldr	r2, [pc, #64]	@ (8009314 <UART_SetConfig+0x5c4>)
 80092d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092da:	fbb3 f2f2 	udiv	r2, r3, r2
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	085b      	lsrs	r3, r3, #1
 80092e4:	441a      	add	r2, r3
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80092ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	2b0f      	cmp	r3, #15
 80092f4:	d910      	bls.n	8009318 <UART_SetConfig+0x5c8>
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092fc:	d20c      	bcs.n	8009318 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	b29a      	uxth	r2, r3
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60da      	str	r2, [r3, #12]
 8009308:	e009      	b.n	800931e <UART_SetConfig+0x5ce>
 800930a:	bf00      	nop
 800930c:	40008000 	.word	0x40008000
 8009310:	00f42400 	.word	0x00f42400
 8009314:	0800a9b4 	.word	0x0800a9b4
      }
      else
      {
        ret = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	2201      	movs	r2, #1
 8009322:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2201      	movs	r2, #1
 800932a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2200      	movs	r2, #0
 8009332:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2200      	movs	r2, #0
 8009338:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800933a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800933e:	4618      	mov	r0, r3
 8009340:	3730      	adds	r7, #48	@ 0x30
 8009342:	46bd      	mov	sp, r7
 8009344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009348 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009354:	f003 0308 	and.w	r3, r3, #8
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00a      	beq.n	8009372 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00a      	beq.n	8009394 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	430a      	orrs	r2, r1
 8009392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009398:	f003 0302 	and.w	r3, r3, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00a      	beq.n	80093b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093ba:	f003 0304 	and.w	r3, r3, #4
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00a      	beq.n	80093d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	430a      	orrs	r2, r1
 80093d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093dc:	f003 0310 	and.w	r3, r3, #16
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00a      	beq.n	80093fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01a      	beq.n	800945e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009446:	d10a      	bne.n	800945e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	430a      	orrs	r2, r1
 800945c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00a      	beq.n	8009480 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	430a      	orrs	r2, r1
 800947e:	605a      	str	r2, [r3, #4]
  }
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b098      	sub	sp, #96	@ 0x60
 8009490:	af02      	add	r7, sp, #8
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800949c:	f7f9 f9cc 	bl	8002838 <HAL_GetTick>
 80094a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d12f      	bne.n	8009510 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094b8:	2200      	movs	r2, #0
 80094ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f88e 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d022      	beq.n	8009510 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094de:	653b      	str	r3, [r7, #80]	@ 0x50
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80094ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e6      	bne.n	80094ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e063      	b.n	80095d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b04      	cmp	r3, #4
 800951c:	d149      	bne.n	80095b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800951e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009526:	2200      	movs	r2, #0
 8009528:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f857 	bl	80095e0 <UART_WaitOnFlagUntilTimeout>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d03c      	beq.n	80095b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	623b      	str	r3, [r7, #32]
   return(result);
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800954c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009556:	633b      	str	r3, [r7, #48]	@ 0x30
 8009558:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800955c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e6      	bne.n	8009538 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3308      	adds	r3, #8
 8009570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	e853 3f00 	ldrex	r3, [r3]
 8009578:	60fb      	str	r3, [r7, #12]
   return(result);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f023 0301 	bic.w	r3, r3, #1
 8009580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	3308      	adds	r3, #8
 8009588:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800958a:	61fa      	str	r2, [r7, #28]
 800958c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958e:	69b9      	ldr	r1, [r7, #24]
 8009590:	69fa      	ldr	r2, [r7, #28]
 8009592:	e841 2300 	strex	r3, r2, [r1]
 8009596:	617b      	str	r3, [r7, #20]
   return(result);
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d1e5      	bne.n	800956a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2220      	movs	r2, #32
 80095a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e012      	b.n	80095d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2220      	movs	r2, #32
 80095be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3758      	adds	r7, #88	@ 0x58
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	603b      	str	r3, [r7, #0]
 80095ec:	4613      	mov	r3, r2
 80095ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f0:	e04f      	b.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f8:	d04b      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fa:	f7f9 f91d 	bl	8002838 <HAL_GetTick>
 80095fe:	4602      	mov	r2, r0
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	429a      	cmp	r2, r3
 8009608:	d302      	bcc.n	8009610 <UART_WaitOnFlagUntilTimeout+0x30>
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e04e      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b00      	cmp	r3, #0
 8009620:	d037      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	2b80      	cmp	r3, #128	@ 0x80
 8009626:	d034      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b40      	cmp	r3, #64	@ 0x40
 800962c:	d031      	beq.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b08      	cmp	r3, #8
 800963a:	d110      	bne.n	800965e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2208      	movs	r2, #8
 8009642:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f99c 	bl	8009982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2208      	movs	r2, #8
 800964e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e029      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	69db      	ldr	r3, [r3, #28]
 8009664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800966c:	d111      	bne.n	8009692 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009676:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f000 f982 	bl	8009982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2220      	movs	r2, #32
 8009682:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	e00f      	b.n	80096b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69da      	ldr	r2, [r3, #28]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4013      	ands	r3, r2
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	429a      	cmp	r2, r3
 80096a0:	bf0c      	ite	eq
 80096a2:	2301      	moveq	r3, #1
 80096a4:	2300      	movne	r3, #0
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	461a      	mov	r2, r3
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d0a0      	beq.n	80095f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
	...

080096bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096bc:	b480      	push	{r7}
 80096be:	b0a3      	sub	sp, #140	@ 0x8c
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	88fa      	ldrh	r2, [r7, #6]
 80096d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	88fa      	ldrh	r2, [r7, #6]
 80096dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ee:	d10e      	bne.n	800970e <UART_Start_Receive_IT+0x52>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d105      	bne.n	8009704 <UART_Start_Receive_IT+0x48>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80096fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009702:	e02d      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	22ff      	movs	r2, #255	@ 0xff
 8009708:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800970c:	e028      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10d      	bne.n	8009732 <UART_Start_Receive_IT+0x76>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d104      	bne.n	8009728 <UART_Start_Receive_IT+0x6c>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	22ff      	movs	r2, #255	@ 0xff
 8009722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009726:	e01b      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	227f      	movs	r2, #127	@ 0x7f
 800972c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009730:	e016      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800973a:	d10d      	bne.n	8009758 <UART_Start_Receive_IT+0x9c>
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <UART_Start_Receive_IT+0x92>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	227f      	movs	r2, #127	@ 0x7f
 8009748:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800974c:	e008      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	223f      	movs	r2, #63	@ 0x3f
 8009752:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009756:	e003      	b.n	8009760 <UART_Start_Receive_IT+0xa4>
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2222      	movs	r2, #34	@ 0x22
 800976c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3308      	adds	r3, #8
 8009776:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009782:	f043 0301 	orr.w	r3, r3, #1
 8009786:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009794:	673a      	str	r2, [r7, #112]	@ 0x70
 8009796:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009798:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800979a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800979c:	e841 2300 	strex	r3, r2, [r1]
 80097a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80097a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1e3      	bne.n	8009770 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097b0:	d14f      	bne.n	8009852 <UART_Start_Receive_IT+0x196>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097b8:	88fa      	ldrh	r2, [r7, #6]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d349      	bcc.n	8009852 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097c6:	d107      	bne.n	80097d8 <UART_Start_Receive_IT+0x11c>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d103      	bne.n	80097d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	4a47      	ldr	r2, [pc, #284]	@ (80098f0 <UART_Start_Receive_IT+0x234>)
 80097d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80097d6:	e002      	b.n	80097de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4a46      	ldr	r2, [pc, #280]	@ (80098f4 <UART_Start_Receive_IT+0x238>)
 80097dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d01a      	beq.n	800981c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097ee:	e853 3f00 	ldrex	r3, [r3]
 80097f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80097f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009808:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800980a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800980e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e4      	bne.n	80097e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3308      	adds	r3, #8
 8009822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009826:	e853 3f00 	ldrex	r3, [r3]
 800982a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009832:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3308      	adds	r3, #8
 800983a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800983c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800983e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800984a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e5      	bne.n	800981c <UART_Start_Receive_IT+0x160>
 8009850:	e046      	b.n	80098e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800985a:	d107      	bne.n	800986c <UART_Start_Receive_IT+0x1b0>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d103      	bne.n	800986c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4a24      	ldr	r2, [pc, #144]	@ (80098f8 <UART_Start_Receive_IT+0x23c>)
 8009868:	675a      	str	r2, [r3, #116]	@ 0x74
 800986a:	e002      	b.n	8009872 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4a23      	ldr	r2, [pc, #140]	@ (80098fc <UART_Start_Receive_IT+0x240>)
 8009870:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d019      	beq.n	80098ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009882:	e853 3f00 	ldrex	r3, [r3]
 8009886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800988e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009898:	637b      	str	r3, [r7, #52]	@ 0x34
 800989a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800989e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80098a0:	e841 2300 	strex	r3, r2, [r1]
 80098a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80098a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1e6      	bne.n	800987a <UART_Start_Receive_IT+0x1be>
 80098ac:	e018      	b.n	80098e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	e853 3f00 	ldrex	r3, [r3]
 80098ba:	613b      	str	r3, [r7, #16]
   return(result);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	f043 0320 	orr.w	r3, r3, #32
 80098c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	461a      	mov	r2, r3
 80098ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098cc:	623b      	str	r3, [r7, #32]
 80098ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	69f9      	ldr	r1, [r7, #28]
 80098d2:	6a3a      	ldr	r2, [r7, #32]
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e6      	bne.n	80098ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	378c      	adds	r7, #140	@ 0x8c
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	0800a305 	.word	0x0800a305
 80098f4:	08009f95 	.word	0x08009f95
 80098f8:	08009dd5 	.word	0x08009dd5
 80098fc:	08009c15 	.word	0x08009c15

08009900 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009900:	b480      	push	{r7}
 8009902:	b08f      	sub	sp, #60	@ 0x3c
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	e853 3f00 	ldrex	r3, [r3]
 8009914:	61fb      	str	r3, [r7, #28]
   return(result);
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009928:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800992c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800992e:	e841 2300 	strex	r3, r2, [r1]
 8009932:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e6      	bne.n	8009908 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3308      	adds	r3, #8
 8009940:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	60bb      	str	r3, [r7, #8]
   return(result);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009950:	633b      	str	r3, [r7, #48]	@ 0x30
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	3308      	adds	r3, #8
 8009958:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800995a:	61ba      	str	r2, [r7, #24]
 800995c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995e:	6979      	ldr	r1, [r7, #20]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	e841 2300 	strex	r3, r2, [r1]
 8009966:	613b      	str	r3, [r7, #16]
   return(result);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1e5      	bne.n	800993a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2220      	movs	r2, #32
 8009972:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009976:	bf00      	nop
 8009978:	373c      	adds	r7, #60	@ 0x3c
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009982:	b480      	push	{r7}
 8009984:	b095      	sub	sp, #84	@ 0x54
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009992:	e853 3f00 	ldrex	r3, [r3]
 8009996:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800999e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80099aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e6      	bne.n	800998a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3308      	adds	r3, #8
 80099c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	e853 3f00 	ldrex	r3, [r3]
 80099ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80099e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e3      	bne.n	80099bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d118      	bne.n	8009a2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	f023 0310 	bic.w	r3, r3, #16
 8009a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	6979      	ldr	r1, [r7, #20]
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	613b      	str	r3, [r7, #16]
   return(result);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e6      	bne.n	80099fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009a42:	bf00      	nop
 8009a44:	3754      	adds	r7, #84	@ 0x54
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b090      	sub	sp, #64	@ 0x40
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0320 	and.w	r3, r3, #32
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d137      	bne.n	8009ada <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009a6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3308      	adds	r3, #8
 8009a78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	623b      	str	r3, [r7, #32]
   return(result);
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3308      	adds	r3, #8
 8009a90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a92:	633a      	str	r2, [r7, #48]	@ 0x30
 8009a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e5      	bne.n	8009a72 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	e853 3f00 	ldrex	r3, [r3]
 8009ab2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009aba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac8:	69b9      	ldr	r1, [r7, #24]
 8009aca:	69fa      	ldr	r2, [r7, #28]
 8009acc:	e841 2300 	strex	r3, r2, [r1]
 8009ad0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1e6      	bne.n	8009aa6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009ad8:	e004      	b.n	8009ae4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009ae0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009ae2:	4798      	blx	r3
}
 8009ae4:	bf00      	nop
 8009ae6:	3740      	adds	r7, #64	@ 0x40
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009af8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b04:	bf00      	nop
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b34:	2b80      	cmp	r3, #128	@ 0x80
 8009b36:	d109      	bne.n	8009b4c <UART_DMAError+0x40>
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	2b21      	cmp	r3, #33	@ 0x21
 8009b3c:	d106      	bne.n	8009b4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009b3e:	697b      	ldr	r3, [r7, #20]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009b46:	6978      	ldr	r0, [r7, #20]
 8009b48:	f7ff feda 	bl	8009900 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b56:	2b40      	cmp	r3, #64	@ 0x40
 8009b58:	d109      	bne.n	8009b6e <UART_DMAError+0x62>
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b22      	cmp	r3, #34	@ 0x22
 8009b5e:	d106      	bne.n	8009b6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	2200      	movs	r2, #0
 8009b64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009b68:	6978      	ldr	r0, [r7, #20]
 8009b6a:	f7ff ff0a 	bl	8009982 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b74:	f043 0210 	orr.w	r2, r3, #16
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009b84:	6978      	ldr	r0, [r7, #20]
 8009b86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b88:	bf00      	nop
 8009b8a:	3718      	adds	r7, #24
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bb0:	bf00      	nop
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bd4:	61fb      	str	r3, [r7, #28]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6979      	ldr	r1, [r7, #20]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	613b      	str	r3, [r7, #16]
   return(result);
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e6      	bne.n	8009bc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c0a:	bf00      	nop
 8009c0c:	3720      	adds	r7, #32
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
	...

08009c14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b09c      	sub	sp, #112	@ 0x70
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009c22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c2c:	2b22      	cmp	r3, #34	@ 0x22
 8009c2e:	f040 80c2 	bne.w	8009db6 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009c3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009c40:	b2d9      	uxtb	r1, r3
 8009c42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c4c:	400a      	ands	r2, r1
 8009c4e:	b2d2      	uxtb	r2, r2
 8009c50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	3b01      	subs	r3, #1
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f040 80a5 	bne.w	8009dc6 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c84:	e853 3f00 	ldrex	r3, [r3]
 8009c88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ca0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ca2:	e841 2300 	strex	r3, r2, [r1]
 8009ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d1e6      	bne.n	8009c7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb8:	e853 3f00 	ldrex	r3, [r3]
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc0:	f023 0301 	bic.w	r3, r3, #1
 8009cc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	3308      	adds	r3, #8
 8009ccc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009cce:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cd6:	e841 2300 	strex	r3, r2, [r1]
 8009cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1e5      	bne.n	8009cae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a35      	ldr	r2, [pc, #212]	@ (8009dd0 <UART_RxISR_8BIT+0x1bc>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d01f      	beq.n	8009d40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d018      	beq.n	8009d40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	623b      	str	r3, [r7, #32]
   return(result);
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d22:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e6      	bne.n	8009d0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d130      	bne.n	8009daa <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f023 0310 	bic.w	r3, r3, #16
 8009d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d6c:	61fb      	str	r3, [r7, #28]
 8009d6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	69b9      	ldr	r1, [r7, #24]
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	617b      	str	r3, [r7, #20]
   return(result);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e6      	bne.n	8009d4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	69db      	ldr	r3, [r3, #28]
 8009d86:	f003 0310 	and.w	r3, r3, #16
 8009d8a:	2b10      	cmp	r3, #16
 8009d8c:	d103      	bne.n	8009d96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2210      	movs	r2, #16
 8009d94:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009da2:	4611      	mov	r1, r2
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009da8:	e00d      	b.n	8009dc6 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	4798      	blx	r3
}
 8009db4:	e007      	b.n	8009dc6 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	699a      	ldr	r2, [r3, #24]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f042 0208 	orr.w	r2, r2, #8
 8009dc4:	619a      	str	r2, [r3, #24]
}
 8009dc6:	bf00      	nop
 8009dc8:	3770      	adds	r7, #112	@ 0x70
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	40008000 	.word	0x40008000

08009dd4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b09c      	sub	sp, #112	@ 0x70
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009de2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dec:	2b22      	cmp	r3, #34	@ 0x22
 8009dee:	f040 80c2 	bne.w	8009f76 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009df8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e00:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009e02:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009e06:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e10:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e16:	1c9a      	adds	r2, r3, #2
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	3b01      	subs	r3, #1
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 80a5 	bne.w	8009f86 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e44:	e853 3f00 	ldrex	r3, [r3]
 8009e48:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e50:	667b      	str	r3, [r7, #100]	@ 0x64
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009e5c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009e60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009e68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e6      	bne.n	8009e3c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e80:	f023 0301 	bic.w	r3, r3, #1
 8009e84:	663b      	str	r3, [r7, #96]	@ 0x60
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009e94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009e96:	e841 2300 	strex	r3, r2, [r1]
 8009e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d1e5      	bne.n	8009e6e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2220      	movs	r2, #32
 8009ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a35      	ldr	r2, [pc, #212]	@ (8009f90 <UART_RxISR_16BIT+0x1bc>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d01f      	beq.n	8009f00 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d018      	beq.n	8009f00 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	e853 3f00 	ldrex	r3, [r3]
 8009eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ee2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	461a      	mov	r2, r3
 8009eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009eee:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef4:	e841 2300 	strex	r3, r2, [r1]
 8009ef8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e6      	bne.n	8009ece <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d130      	bne.n	8009f6a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	e853 3f00 	ldrex	r3, [r3]
 8009f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f023 0310 	bic.w	r3, r3, #16
 8009f22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009f2c:	61bb      	str	r3, [r7, #24]
 8009f2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f30:	6979      	ldr	r1, [r7, #20]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	e841 2300 	strex	r3, r2, [r1]
 8009f38:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1e6      	bne.n	8009f0e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	f003 0310 	and.w	r3, r3, #16
 8009f4a:	2b10      	cmp	r3, #16
 8009f4c:	d103      	bne.n	8009f56 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2210      	movs	r2, #16
 8009f54:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009f62:	4611      	mov	r1, r2
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f68:	e00d      	b.n	8009f86 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	4798      	blx	r3
}
 8009f74:	e007      	b.n	8009f86 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	699a      	ldr	r2, [r3, #24]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f042 0208 	orr.w	r2, r2, #8
 8009f84:	619a      	str	r2, [r3, #24]
}
 8009f86:	bf00      	nop
 8009f88:	3770      	adds	r7, #112	@ 0x70
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	40008000 	.word	0x40008000

08009f94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b0ac      	sub	sp, #176	@ 0xb0
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009fa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fca:	2b22      	cmp	r3, #34	@ 0x22
 8009fcc:	f040 8189 	bne.w	800a2e2 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009fd6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fda:	e12c      	b.n	800a236 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009fe6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009fea:	b2d9      	uxtb	r1, r3
 8009fec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ff6:	400a      	ands	r2, r1
 8009ff8:	b2d2      	uxtb	r2, r2
 8009ffa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a000:	1c5a      	adds	r2, r3, #1
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a026:	f003 0307 	and.w	r3, r3, #7
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d055      	beq.n	800a0da <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d011      	beq.n	800a05e <UART_RxISR_8BIT_FIFOEN+0xca>
 800a03a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a03e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00b      	beq.n	800a05e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2201      	movs	r2, #1
 800a04c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a054:	f043 0201 	orr.w	r2, r3, #1
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a05e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a062:	f003 0302 	and.w	r3, r3, #2
 800a066:	2b00      	cmp	r3, #0
 800a068:	d011      	beq.n	800a08e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800a06a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00b      	beq.n	800a08e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2202      	movs	r2, #2
 800a07c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a084:	f043 0204 	orr.w	r2, r3, #4
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a08e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a092:	f003 0304 	and.w	r3, r3, #4
 800a096:	2b00      	cmp	r3, #0
 800a098:	d011      	beq.n	800a0be <UART_RxISR_8BIT_FIFOEN+0x12a>
 800a09a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a09e:	f003 0301 	and.w	r3, r3, #1
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2204      	movs	r2, #4
 800a0ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0b4:	f043 0202 	orr.w	r2, r3, #2
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d008      	beq.n	800a0da <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f040 80a7 	bne.w	800a236 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800a0f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	461a      	mov	r2, r3
 800a106:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a10a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a10c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a110:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800a112:	e841 2300 	strex	r3, r2, [r1]
 800a116:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800a118:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d1e4      	bne.n	800a0e8 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	3308      	adds	r3, #8
 800a124:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a128:	e853 3f00 	ldrex	r3, [r3]
 800a12c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800a12e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a134:	f023 0301 	bic.w	r3, r3, #1
 800a138:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	3308      	adds	r3, #8
 800a142:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a146:	66ba      	str	r2, [r7, #104]	@ 0x68
 800a148:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800a14c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a14e:	e841 2300 	strex	r3, r2, [r1]
 800a152:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800a154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1e1      	bne.n	800a11e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2220      	movs	r2, #32
 800a15e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a62      	ldr	r2, [pc, #392]	@ (800a2fc <UART_RxISR_8BIT_FIFOEN+0x368>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d021      	beq.n	800a1bc <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01a      	beq.n	800a1bc <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a18e:	e853 3f00 	ldrex	r3, [r3]
 800a192:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800a194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a196:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a19a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a1a8:	657b      	str	r3, [r7, #84]	@ 0x54
 800a1aa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a1ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a1b0:	e841 2300 	strex	r3, r2, [r1]
 800a1b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800a1b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d1e4      	bne.n	800a186 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d132      	bne.n	800a22a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d2:	e853 3f00 	ldrex	r3, [r3]
 800a1d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1da:	f023 0310 	bic.w	r3, r3, #16
 800a1de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1f4:	e841 2300 	strex	r3, r2, [r1]
 800a1f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d1e4      	bne.n	800a1ca <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	f003 0310 	and.w	r3, r3, #16
 800a20a:	2b10      	cmp	r3, #16
 800a20c:	d103      	bne.n	800a216 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	2210      	movs	r2, #16
 800a214:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a222:	4611      	mov	r1, r2
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a228:	e010      	b.n	800a24c <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	4798      	blx	r3
        break;
 800a234:	e00a      	b.n	800a24c <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a236:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d006      	beq.n	800a24c <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800a23e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a242:	f003 0320 	and.w	r3, r3, #32
 800a246:	2b00      	cmp	r3, #0
 800a248:	f47f aec8 	bne.w	8009fdc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a252:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a256:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d049      	beq.n	800a2f2 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a264:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800a268:	429a      	cmp	r2, r3
 800a26a:	d242      	bcs.n	800a2f2 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	3308      	adds	r3, #8
 800a272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	e853 3f00 	ldrex	r3, [r3]
 800a27a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a282:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3308      	adds	r3, #8
 800a28c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800a290:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a296:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a298:	e841 2300 	strex	r3, r2, [r1]
 800a29c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d1e3      	bne.n	800a26c <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a16      	ldr	r2, [pc, #88]	@ (800a300 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800a2a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	f043 0320 	orr.w	r3, r3, #32
 800a2be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	461a      	mov	r2, r3
 800a2c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6979      	ldr	r1, [r7, #20]
 800a2d2:	69ba      	ldr	r2, [r7, #24]
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e4      	bne.n	800a2aa <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2e0:	e007      	b.n	800a2f2 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	699a      	ldr	r2, [r3, #24]
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f042 0208 	orr.w	r2, r2, #8
 800a2f0:	619a      	str	r2, [r3, #24]
}
 800a2f2:	bf00      	nop
 800a2f4:	37b0      	adds	r7, #176	@ 0xb0
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	40008000 	.word	0x40008000
 800a300:	08009c15 	.word	0x08009c15

0800a304 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b0ae      	sub	sp, #184	@ 0xb8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a312:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a33a:	2b22      	cmp	r3, #34	@ 0x22
 800a33c:	f040 818d 	bne.w	800a65a <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a346:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a34a:	e130      	b.n	800a5ae <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a352:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a35a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a35e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800a362:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800a366:	4013      	ands	r3, r2
 800a368:	b29a      	uxth	r2, r3
 800a36a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a36e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a374:	1c9a      	adds	r2, r3, #2
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a380:	b29b      	uxth	r3, r3
 800a382:	3b01      	subs	r3, #1
 800a384:	b29a      	uxth	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a396:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d055      	beq.n	800a44e <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d011      	beq.n	800a3d2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a3ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00b      	beq.n	800a3d2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3c8:	f043 0201 	orr.w	r2, r3, #1
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d011      	beq.n	800a402 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a3de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3e2:	f003 0301 	and.w	r3, r3, #1
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00b      	beq.n	800a402 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2202      	movs	r2, #2
 800a3f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3f8:	f043 0204 	orr.w	r2, r3, #4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a406:	f003 0304 	and.w	r3, r3, #4
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d011      	beq.n	800a432 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a40e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2204      	movs	r2, #4
 800a420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a428:	f043 0202 	orr.w	r2, r3, #2
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d008      	beq.n	800a44e <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a454:	b29b      	uxth	r3, r3
 800a456:	2b00      	cmp	r3, #0
 800a458:	f040 80a9 	bne.w	800a5ae <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a464:	e853 3f00 	ldrex	r3, [r3]
 800a468:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a46a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a46c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	461a      	mov	r2, r3
 800a47a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a47e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a482:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a484:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a486:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a48a:	e841 2300 	strex	r3, r2, [r1]
 800a48e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a490:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1e2      	bne.n	800a45c <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	3308      	adds	r3, #8
 800a49c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4a0:	e853 3f00 	ldrex	r3, [r3]
 800a4a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a4a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4ac:	f023 0301 	bic.w	r3, r3, #1
 800a4b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800a4be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a4c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a4c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a4c6:	e841 2300 	strex	r3, r2, [r1]
 800a4ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a4cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1e1      	bne.n	800a496 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2220      	movs	r2, #32
 800a4d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4a62      	ldr	r2, [pc, #392]	@ (800a674 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d021      	beq.n	800a534 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d01a      	beq.n	800a534 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a506:	e853 3f00 	ldrex	r3, [r3]
 800a50a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a50c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a50e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	461a      	mov	r2, r3
 800a51c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a520:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a522:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a524:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a526:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a528:	e841 2300 	strex	r3, r2, [r1]
 800a52c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a52e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1e4      	bne.n	800a4fe <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d132      	bne.n	800a5a2 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54a:	e853 3f00 	ldrex	r3, [r3]
 800a54e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a550:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a552:	f023 0310 	bic.w	r3, r3, #16
 800a556:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	461a      	mov	r2, r3
 800a560:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a564:	647b      	str	r3, [r7, #68]	@ 0x44
 800a566:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a56a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e4      	bne.n	800a542 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	69db      	ldr	r3, [r3, #28]
 800a57e:	f003 0310 	and.w	r3, r3, #16
 800a582:	2b10      	cmp	r3, #16
 800a584:	d103      	bne.n	800a58e <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2210      	movs	r2, #16
 800a58c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a59a:	4611      	mov	r1, r2
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800a5a0:	e010      	b.n	800a5c4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
        break;
 800a5ac:	e00a      	b.n	800a5c4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a5ae:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d006      	beq.n	800a5c4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800a5b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5ba:	f003 0320 	and.w	r3, r3, #32
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f47f aec4 	bne.w	800a34c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5ca:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a5ce:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d049      	beq.n	800a66a <UART_RxISR_16BIT_FIFOEN+0x366>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800a5dc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d242      	bcs.n	800a66a <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	3308      	adds	r3, #8
 800a5ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	e853 3f00 	ldrex	r3, [r3]
 800a5f2:	623b      	str	r3, [r7, #32]
   return(result);
 800a5f4:	6a3b      	ldr	r3, [r7, #32]
 800a5f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3308      	adds	r3, #8
 800a604:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800a608:	633a      	str	r2, [r7, #48]	@ 0x30
 800a60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a60e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e3      	bne.n	800a5e4 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a16      	ldr	r2, [pc, #88]	@ (800a678 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800a620:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	e853 3f00 	ldrex	r3, [r3]
 800a62e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	f043 0320 	orr.w	r3, r3, #32
 800a636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a644:	61fb      	str	r3, [r7, #28]
 800a646:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a648:	69b9      	ldr	r1, [r7, #24]
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	e841 2300 	strex	r3, r2, [r1]
 800a650:	617b      	str	r3, [r7, #20]
   return(result);
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1e4      	bne.n	800a622 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a658:	e007      	b.n	800a66a <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	699a      	ldr	r2, [r3, #24]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f042 0208 	orr.w	r2, r2, #8
 800a668:	619a      	str	r2, [r3, #24]
}
 800a66a:	bf00      	nop
 800a66c:	37b8      	adds	r7, #184	@ 0xb8
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40008000 	.word	0x40008000
 800a678:	08009dd5 	.word	0x08009dd5

0800a67c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a690:	b480      	push	{r7}
 800a692:	b083      	sub	sp, #12
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d101      	bne.n	800a6ce <HAL_UARTEx_DisableFifoMode+0x16>
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	e027      	b.n	800a71e <HAL_UARTEx_DisableFifoMode+0x66>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2224      	movs	r2, #36	@ 0x24
 800a6da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 0201 	bic.w	r2, r2, #1
 800a6f4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a6fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2220      	movs	r2, #32
 800a710:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a73e:	2302      	movs	r3, #2
 800a740:	e02d      	b.n	800a79e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2224      	movs	r2, #36	@ 0x24
 800a74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f022 0201 	bic.w	r2, r2, #1
 800a768:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	430a      	orrs	r2, r1
 800a77c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 f850 	bl	800a824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68fa      	ldr	r2, [r7, #12]
 800a78a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2220      	movs	r2, #32
 800a790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d101      	bne.n	800a7be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	e02d      	b.n	800a81a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2224      	movs	r2, #36	@ 0x24
 800a7ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f022 0201 	bic.w	r2, r2, #1
 800a7e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	683a      	ldr	r2, [r7, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f812 	bl	800a824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3710      	adds	r7, #16
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a830:	2b00      	cmp	r3, #0
 800a832:	d108      	bne.n	800a846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a844:	e031      	b.n	800a8aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a846:	2308      	movs	r3, #8
 800a848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a84a:	2308      	movs	r3, #8
 800a84c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	0e5b      	lsrs	r3, r3, #25
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f003 0307 	and.w	r3, r3, #7
 800a85c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	0f5b      	lsrs	r3, r3, #29
 800a866:	b2db      	uxtb	r3, r3
 800a868:	f003 0307 	and.w	r3, r3, #7
 800a86c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	7b3a      	ldrb	r2, [r7, #12]
 800a872:	4911      	ldr	r1, [pc, #68]	@ (800a8b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a874:	5c8a      	ldrb	r2, [r1, r2]
 800a876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a87a:	7b3a      	ldrb	r2, [r7, #12]
 800a87c:	490f      	ldr	r1, [pc, #60]	@ (800a8bc <UARTEx_SetNbDataToProcess+0x98>)
 800a87e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a880:	fb93 f3f2 	sdiv	r3, r3, r2
 800a884:	b29a      	uxth	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a88c:	7bfb      	ldrb	r3, [r7, #15]
 800a88e:	7b7a      	ldrb	r2, [r7, #13]
 800a890:	4909      	ldr	r1, [pc, #36]	@ (800a8b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a892:	5c8a      	ldrb	r2, [r1, r2]
 800a894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a898:	7b7a      	ldrb	r2, [r7, #13]
 800a89a:	4908      	ldr	r1, [pc, #32]	@ (800a8bc <UARTEx_SetNbDataToProcess+0x98>)
 800a89c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a89e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a8aa:	bf00      	nop
 800a8ac:	3714      	adds	r7, #20
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	0800a9cc 	.word	0x0800a9cc
 800a8bc:	0800a9d4 	.word	0x0800a9d4

0800a8c0 <memset>:
 800a8c0:	4402      	add	r2, r0
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d100      	bne.n	800a8ca <memset+0xa>
 800a8c8:	4770      	bx	lr
 800a8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ce:	e7f9      	b.n	800a8c4 <memset+0x4>

0800a8d0 <__errno>:
 800a8d0:	4b01      	ldr	r3, [pc, #4]	@ (800a8d8 <__errno+0x8>)
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	2000021c 	.word	0x2000021c

0800a8dc <__libc_init_array>:
 800a8dc:	b570      	push	{r4, r5, r6, lr}
 800a8de:	4d0d      	ldr	r5, [pc, #52]	@ (800a914 <__libc_init_array+0x38>)
 800a8e0:	4c0d      	ldr	r4, [pc, #52]	@ (800a918 <__libc_init_array+0x3c>)
 800a8e2:	1b64      	subs	r4, r4, r5
 800a8e4:	10a4      	asrs	r4, r4, #2
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	42a6      	cmp	r6, r4
 800a8ea:	d109      	bne.n	800a900 <__libc_init_array+0x24>
 800a8ec:	4d0b      	ldr	r5, [pc, #44]	@ (800a91c <__libc_init_array+0x40>)
 800a8ee:	4c0c      	ldr	r4, [pc, #48]	@ (800a920 <__libc_init_array+0x44>)
 800a8f0:	f000 f848 	bl	800a984 <_init>
 800a8f4:	1b64      	subs	r4, r4, r5
 800a8f6:	10a4      	asrs	r4, r4, #2
 800a8f8:	2600      	movs	r6, #0
 800a8fa:	42a6      	cmp	r6, r4
 800a8fc:	d105      	bne.n	800a90a <__libc_init_array+0x2e>
 800a8fe:	bd70      	pop	{r4, r5, r6, pc}
 800a900:	f855 3b04 	ldr.w	r3, [r5], #4
 800a904:	4798      	blx	r3
 800a906:	3601      	adds	r6, #1
 800a908:	e7ee      	b.n	800a8e8 <__libc_init_array+0xc>
 800a90a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a90e:	4798      	blx	r3
 800a910:	3601      	adds	r6, #1
 800a912:	e7f2      	b.n	800a8fa <__libc_init_array+0x1e>
 800a914:	0800a9e4 	.word	0x0800a9e4
 800a918:	0800a9e4 	.word	0x0800a9e4
 800a91c:	0800a9e4 	.word	0x0800a9e4
 800a920:	0800a9e8 	.word	0x0800a9e8

0800a924 <memcpy>:
 800a924:	440a      	add	r2, r1
 800a926:	4291      	cmp	r1, r2
 800a928:	f100 33ff 	add.w	r3, r0, #4294967295
 800a92c:	d100      	bne.n	800a930 <memcpy+0xc>
 800a92e:	4770      	bx	lr
 800a930:	b510      	push	{r4, lr}
 800a932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a93a:	4291      	cmp	r1, r2
 800a93c:	d1f9      	bne.n	800a932 <memcpy+0xe>
 800a93e:	bd10      	pop	{r4, pc}

0800a940 <sqrtf>:
 800a940:	b508      	push	{r3, lr}
 800a942:	ed2d 8b02 	vpush	{d8}
 800a946:	eeb0 8a40 	vmov.f32	s16, s0
 800a94a:	f000 f817 	bl	800a97c <__ieee754_sqrtf>
 800a94e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a956:	d60c      	bvs.n	800a972 <sqrtf+0x32>
 800a958:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a978 <sqrtf+0x38>
 800a95c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a964:	d505      	bpl.n	800a972 <sqrtf+0x32>
 800a966:	f7ff ffb3 	bl	800a8d0 <__errno>
 800a96a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a96e:	2321      	movs	r3, #33	@ 0x21
 800a970:	6003      	str	r3, [r0, #0]
 800a972:	ecbd 8b02 	vpop	{d8}
 800a976:	bd08      	pop	{r3, pc}
 800a978:	00000000 	.word	0x00000000

0800a97c <__ieee754_sqrtf>:
 800a97c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a980:	4770      	bx	lr
	...

0800a984 <_init>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr

0800a990 <_fini>:
 800a990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a992:	bf00      	nop
 800a994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a996:	bc08      	pop	{r3}
 800a998:	469e      	mov	lr, r3
 800a99a:	4770      	bx	lr
