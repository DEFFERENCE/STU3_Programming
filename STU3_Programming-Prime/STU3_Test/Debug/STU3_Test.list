
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010aac  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08010c88  08010c88  00011c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080110e0  080110e0  00013264  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080110e0  080110e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080110e8  080110e8  00013264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080110e8  080110e8  000120e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080110ec  080110ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  080110f0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca0  20000268  08011354  00013268  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001f08  08011354  00013f08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a230  00000000  00000000  00013294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f0c  00000000  00000000  0003d4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  000423d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f8  00000000  00000000  00044170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6a5  00000000  00000000  00045868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028e84  00000000  00000000  00070f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b11f  00000000  00000000  00099d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b4eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000087cc  00000000  00000000  001b4ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001bd6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000268 	.word	0x20000268
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010c6c 	.word	0x08010c6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000026c 	.word	0x2000026c
 8000214:	08010c6c 	.word	0x08010c6c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b988 	b.w	8001114 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	468e      	mov	lr, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	d962      	bls.n	8000ef8 <__udivmoddi4+0xdc>
 8000e32:	fab2 f682 	clz	r6, r2
 8000e36:	b14e      	cbz	r6, 8000e4c <__udivmoddi4+0x30>
 8000e38:	f1c6 0320 	rsb	r3, r6, #32
 8000e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	ea43 0808 	orr.w	r8, r3, r8
 8000e4a:	40b4      	lsls	r4, r6
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fb01 f20c 	mul.w	r2, r1, ip
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e70:	f080 80ea 	bcs.w	8001048 <__udivmoddi4+0x22c>
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f240 80e7 	bls.w	8001048 <__udivmoddi4+0x22c>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	1a9a      	subs	r2, r3, r2
 8000e80:	b2a3      	uxth	r3, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e92:	459c      	cmp	ip, r3
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x8e>
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	f080 80d6 	bcs.w	800104c <__udivmoddi4+0x230>
 8000ea0:	459c      	cmp	ip, r3
 8000ea2:	f240 80d3 	bls.w	800104c <__udivmoddi4+0x230>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eae:	eba3 030c 	sub.w	r3, r3, ip
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40f3      	lsrs	r3, r6
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xb6>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb0>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x14c>
 8000eda:	4573      	cmp	r3, lr
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xc8>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 8105 	bhi.w	80010ee <__udivmoddi4+0x2d2>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	4690      	mov	r8, r2
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0e5      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ef6:	e7e2      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	f000 8090 	beq.w	800101e <__udivmoddi4+0x202>
 8000efe:	fab2 f682 	clz	r6, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f040 80a4 	bne.w	8001050 <__udivmoddi4+0x234>
 8000f08:	1a8a      	subs	r2, r1, r2
 8000f0a:	0c03      	lsrs	r3, r0, #16
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f22:	fb04 f20c 	mul.w	r2, r4, ip
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x11e>
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x11c>
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f200 80e0 	bhi.w	80010f8 <__udivmoddi4+0x2dc>
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f48:	fb02 f404 	mul.w	r4, r2, r4
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x144>
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x142>
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	f200 80ca 	bhi.w	80010f2 <__udivmoddi4+0x2d6>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	1b1b      	subs	r3, r3, r4
 8000f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa0e f401 	lsl.w	r4, lr, r1
 8000f78:	fa20 f306 	lsr.w	r3, r0, r6
 8000f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	fa1f fc87 	uxth.w	ip, r7
 8000f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000f92:	0c1c      	lsrs	r4, r3, #16
 8000f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x1a0>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fae:	f080 809c 	bcs.w	80010ea <__udivmoddi4+0x2ce>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f240 8099 	bls.w	80010ea <__udivmoddi4+0x2ce>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	eba4 040e 	sub.w	r4, r4, lr
 8000fc0:	fa1f fe83 	uxth.w	lr, r3
 8000fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x1ce>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fde:	f080 8082 	bcs.w	80010e6 <__udivmoddi4+0x2ca>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d97f      	bls.n	80010e6 <__udivmoddi4+0x2ca>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fee:	eba4 040c 	sub.w	r4, r4, ip
 8000ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ff6:	4564      	cmp	r4, ip
 8000ff8:	4673      	mov	r3, lr
 8000ffa:	46e1      	mov	r9, ip
 8000ffc:	d362      	bcc.n	80010c4 <__udivmoddi4+0x2a8>
 8000ffe:	d05f      	beq.n	80010c0 <__udivmoddi4+0x2a4>
 8001000:	b15d      	cbz	r5, 800101a <__udivmoddi4+0x1fe>
 8001002:	ebb8 0203 	subs.w	r2, r8, r3
 8001006:	eb64 0409 	sbc.w	r4, r4, r9
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	fa22 f301 	lsr.w	r3, r2, r1
 8001012:	431e      	orrs	r6, r3
 8001014:	40cc      	lsrs	r4, r1
 8001016:	e9c5 6400 	strd	r6, r4, [r5]
 800101a:	2100      	movs	r1, #0
 800101c:	e74f      	b.n	8000ebe <__udivmoddi4+0xa2>
 800101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8001022:	0c01      	lsrs	r1, r0, #16
 8001024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001028:	b280      	uxth	r0, r0
 800102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800102e:	463b      	mov	r3, r7
 8001030:	4638      	mov	r0, r7
 8001032:	463c      	mov	r4, r7
 8001034:	46b8      	mov	r8, r7
 8001036:	46be      	mov	lr, r7
 8001038:	2620      	movs	r6, #32
 800103a:	fbb1 f1f7 	udiv	r1, r1, r7
 800103e:	eba2 0208 	sub.w	r2, r2, r8
 8001042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001046:	e766      	b.n	8000f16 <__udivmoddi4+0xfa>
 8001048:	4601      	mov	r1, r0
 800104a:	e718      	b.n	8000e7e <__udivmoddi4+0x62>
 800104c:	4610      	mov	r0, r2
 800104e:	e72c      	b.n	8000eaa <__udivmoddi4+0x8e>
 8001050:	f1c6 0220 	rsb	r2, r6, #32
 8001054:	fa2e f302 	lsr.w	r3, lr, r2
 8001058:	40b7      	lsls	r7, r6
 800105a:	40b1      	lsls	r1, r6
 800105c:	fa20 f202 	lsr.w	r2, r0, r2
 8001060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001064:	430a      	orrs	r2, r1
 8001066:	fbb3 f8fe 	udiv	r8, r3, lr
 800106a:	b2bc      	uxth	r4, r7
 800106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8001070:	0c11      	lsrs	r1, r2, #16
 8001072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001076:	fb08 f904 	mul.w	r9, r8, r4
 800107a:	40b0      	lsls	r0, r6
 800107c:	4589      	cmp	r9, r1
 800107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001082:	b280      	uxth	r0, r0
 8001084:	d93e      	bls.n	8001104 <__udivmoddi4+0x2e8>
 8001086:	1879      	adds	r1, r7, r1
 8001088:	f108 3cff 	add.w	ip, r8, #4294967295
 800108c:	d201      	bcs.n	8001092 <__udivmoddi4+0x276>
 800108e:	4589      	cmp	r9, r1
 8001090:	d81f      	bhi.n	80010d2 <__udivmoddi4+0x2b6>
 8001092:	eba1 0109 	sub.w	r1, r1, r9
 8001096:	fbb1 f9fe 	udiv	r9, r1, lr
 800109a:	fb09 f804 	mul.w	r8, r9, r4
 800109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80010a2:	b292      	uxth	r2, r2
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	4542      	cmp	r2, r8
 80010aa:	d229      	bcs.n	8001100 <__udivmoddi4+0x2e4>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80010b2:	d2c4      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b4:	4542      	cmp	r2, r8
 80010b6:	d2c2      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b8:	f1a9 0102 	sub.w	r1, r9, #2
 80010bc:	443a      	add	r2, r7
 80010be:	e7be      	b.n	800103e <__udivmoddi4+0x222>
 80010c0:	45f0      	cmp	r8, lr
 80010c2:	d29d      	bcs.n	8001000 <__udivmoddi4+0x1e4>
 80010c4:	ebbe 0302 	subs.w	r3, lr, r2
 80010c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010cc:	3801      	subs	r0, #1
 80010ce:	46e1      	mov	r9, ip
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1e4>
 80010d2:	eba7 0909 	sub.w	r9, r7, r9
 80010d6:	4449      	add	r1, r9
 80010d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7db      	b.n	800109e <__udivmoddi4+0x282>
 80010e6:	4673      	mov	r3, lr
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1ce>
 80010ea:	4650      	mov	r0, sl
 80010ec:	e766      	b.n	8000fbc <__udivmoddi4+0x1a0>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e6fd      	b.n	8000eee <__udivmoddi4+0xd2>
 80010f2:	443b      	add	r3, r7
 80010f4:	3a02      	subs	r2, #2
 80010f6:	e733      	b.n	8000f60 <__udivmoddi4+0x144>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	443b      	add	r3, r7
 80010fe:	e71c      	b.n	8000f3a <__udivmoddi4+0x11e>
 8001100:	4649      	mov	r1, r9
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x222>
 8001104:	eba1 0109 	sub.w	r1, r1, r9
 8001108:	46c4      	mov	ip, r8
 800110a:	fbb1 f9fe 	udiv	r9, r1, lr
 800110e:	fb09 f804 	mul.w	r8, r9, r4
 8001112:	e7c4      	b.n	800109e <__udivmoddi4+0x282>

08001114 <__aeabi_idiv0>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <sign>:
#include <math.h>

/**
 * @brief Sign function: returns +1, -1, or 0 based on input value.
 */
int8_t sign(float32_t x) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0.0f) {
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd01      	ble.n	8001134 <sign+0x1c>
        return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e00a      	b.n	800114a <sign+0x32>
    } else if (x < 0.0f) {
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d502      	bpl.n	8001148 <sign+0x30>
        return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <sign+0x32>
    } else {
        return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Backlash_Update>:
 * @param pos_ref Desired reference position.
 * @param pos_act Actual measured position.
 * @param vel Measured or estimated velocity.
 * @return Compensated position to use in control.
 */
float32_t Backlash_Update(BacklashController *ctrl, float32_t pos_ref, float32_t pos_act, float32_t vel) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001162:	edc7 0a01 	vstr	s1, [r7, #4]
 8001166:	ed87 1a00 	vstr	s2, [r7]
    int8_t direction_now = sign(vel);
 800116a:	ed97 0a00 	vldr	s0, [r7]
 800116e:	f7ff ffd3 	bl	8001118 <sign>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]

    // Detect direction change
    if (direction_now != ctrl->direction_prev && direction_now != 0) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800117c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001180:	429a      	cmp	r2, r3
 8001182:	d01a      	beq.n	80011ba <Backlash_Update+0x64>
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d016      	beq.n	80011ba <Backlash_Update+0x64>
        ctrl->direction_prev = direction_now;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	7dfa      	ldrb	r2, [r7, #23]
 8001190:	721a      	strb	r2, [r3, #8]
        ctrl->state = TRANSITION;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	725a      	strb	r2, [r3, #9]

        if (direction_now > 0) {
 8001198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd04      	ble.n	80011aa <Backlash_Update+0x54>
            ctrl->backlash_offset = ctrl->backlash_width;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	e007      	b.n	80011ba <Backlash_Update+0x64>
        } else {
            ctrl->backlash_offset = -ctrl->backlash_width;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eef1 7a67 	vneg.f32	s15, s15
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }

    // Apply backlash offset to reference
    float32_t pos_ref_compensated = pos_ref + ctrl->backlash_offset;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if backlash has been taken up
    if (ctrl->state == TRANSITION) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11e      	bne.n	8001214 <Backlash_Update+0xbe>
        if (fabsf(pos_ref - pos_act) >= ctrl->backlash_width) {
 80011d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	db0e      	blt.n	8001214 <Backlash_Update+0xbe>
            if (direction_now > 0) {
 80011f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd03      	ble.n	8001206 <Backlash_Update+0xb0>
                ctrl->state = ENGAGED_POS;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	725a      	strb	r2, [r3, #9]
 8001204:	e002      	b.n	800120c <Backlash_Update+0xb6>
            } else {
                ctrl->state = ENGAGED_NEG;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	22ff      	movs	r2, #255	@ 0xff
 800120a:	725a      	strb	r2, [r3, #9]
            }
            ctrl->backlash_offset = 0.0f;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
        }
    }

    return pos_ref_compensated;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	ee07 3a90 	vmov	s15, r3
}
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <modbus_heartbeat>:

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
}

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	//if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001234:	801a      	strh	r2, [r3, #0]
	//}
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 8001242:	b480      	push	{r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	3302      	adds	r3, #2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	73fb      	strb	r3, [r7, #15]
	return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <modbus_servo_Status>:

void modbus_servo_Status(ModbusHandleTypedef *hmodbus, uint8_t Pen_status) {
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x03].U16 = Pen_status;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	3306      	adds	r3, #6
 8001274:	78fa      	ldrb	r2, [r7, #3]
 8001276:	b292      	uxth	r2, r2
 8001278:	801a      	strh	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <modbus_write_servo_up>:

uint8_t modbus_write_servo_up(ModbusHandleTypedef *hmodbus) {
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x04].U16;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	3308      	adds	r3, #8
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	73fb      	strb	r3, [r7, #15]
//	if (status == 1) {
//		if (hmodbus->RegisterAddress[0x05].U16 == 1) {
//			hmodbus->RegisterAddress[0x05].U16 = 0;
//		}
//	}
	return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]

}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <modbus_write_servo_down>:
uint8_t modbus_write_servo_down(ModbusHandleTypedef *hmodbus) {
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x05].U16;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	330a      	adds	r3, #10
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	73fb      	strb	r3, [r7, #15]
//		if (hmodbus->RegisterAddress[0x04].U16 == 1) {
//			hmodbus->RegisterAddress[0x04].U16 = 0;
//		}
//
//	}
	return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <R_Theta_moving_Status>:

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	3320      	adds	r3, #32
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	b292      	uxth	r2, r2
 80012dc:	801a      	strh	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b089      	sub	sp, #36	@ 0x24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	61f8      	str	r0, [r7, #28]
 80012f2:	ed87 0a06 	vstr	s0, [r7, #24]
 80012f6:	edc7 0a05 	vstr	s1, [r7, #20]
 80012fa:	ed87 1a04 	vstr	s2, [r7, #16]
 80012fe:	edc7 1a03 	vstr	s3, [r7, #12]
 8001302:	ed87 2a02 	vstr	s4, [r7, #8]
 8001306:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = format_robot_to_base(r_pos);
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f103 0422 	add.w	r4, r3, #34	@ 0x22
 8001312:	ed97 0a06 	vldr	s0, [r7, #24]
 8001316:	f000 faed 	bl	80018f4 <format_robot_to_base>
 800131a:	4603      	mov	r3, r0
 800131c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x12].U16 = format_robot_to_base(theta_pos);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8001326:	ed97 0a05 	vldr	s0, [r7, #20]
 800132a:	f000 fae3 	bl	80018f4 <format_robot_to_base>
 800132e:	4603      	mov	r3, r0
 8001330:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x13].U16 = format_robot_to_base(r_Velo);
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800133a:	ed97 0a04 	vldr	s0, [r7, #16]
 800133e:	f000 fad9 	bl	80018f4 <format_robot_to_base>
 8001342:	4603      	mov	r3, r0
 8001344:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x14].U16 = format_robot_to_base(theta_Velo);
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800134e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001352:	f000 facf 	bl	80018f4 <format_robot_to_base>
 8001356:	4603      	mov	r3, r0
 8001358:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x15].U16 = format_robot_to_base(r_accel);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 8001362:	ed97 0a02 	vldr	s0, [r7, #8]
 8001366:	f000 fac5 	bl	80018f4 <format_robot_to_base>
 800136a:	4603      	mov	r3, r0
 800136c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8001376:	ed97 0a01 	vldr	s0, [r7, #4]
 800137a:	f000 fabb 	bl	80018f4 <format_robot_to_base>
 800137e:	4603      	mov	r3, r0
 8001380:	8023      	strh	r3, [r4, #0]
}
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}

0800138a <modbus_set_goal_r_position>:
				r_pos);
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
				format_robot_to_base(theta_pos);
	}
}
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 800138a:	b580      	push	{r7, lr}
 800138c:	b084      	sub	sp, #16
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	3380      	adds	r3, #128	@ 0x80
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_r_position);
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 faca 	bl	8001938 <format_base_to_robot>
 80013a4:	eef0 7a40 	vmov.f32	s15, s0
 80013a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	b29b      	uxth	r3, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	3382      	adds	r3, #130	@ 0x82
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_theta_position);
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fab2 	bl	8001938 <format_base_to_robot>
 80013d4:	eef0 7a40 	vmov.f32	s15, s0
 80013d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013dc:	ee17 3a90 	vmov	r3, s15
 80013e0:	b29b      	uxth	r3, r3
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	0000      	movs	r0, r0
 80013ec:	0000      	movs	r0, r0
	...

080013f0 <Coordinate_Base_to_Robot>:

Robot_goal_point Coordinate_Base_to_Robot(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b090      	sub	sp, #64	@ 0x40
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6178      	str	r0, [r7, #20]
 80013f8:	ed87 0a04 	vstr	s0, [r7, #16]
 80013fc:	edc7 0a03 	vstr	s1, [r7, #12]

	Goal_point->r_goal_position = 0;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	605a      	str	r2, [r3, #4]

	float prismatic_pos;
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001410:	6938      	ldr	r0, [r7, #16]
 8001412:	f7ff f865 	bl	80004e0 <__aeabi_f2d>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	ed9f 1bd3 	vldr	d1, [pc, #844]	@ 8001768 <Coordinate_Base_to_Robot+0x378>
 800141e:	ec43 2b10 	vmov	d0, r2, r3
 8001422:	f00d fdff 	bl	800f024 <pow>
 8001426:	ec51 0b10 	vmov	r0, r1, d0
 800142a:	a3d1      	add	r3, pc, #836	@ (adr r3, 8001770 <Coordinate_Base_to_Robot+0x380>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7fe fef8 	bl	8000224 <__adddf3>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fb78 	bl	8000b30 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
	float gamma = 2 * r_position * Offet;
 8001444:	edd7 7a04 	vldr	s15, [r7, #16]
 8001448:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800144c:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 8001778 <Coordinate_Base_to_Robot+0x388>
 8001450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001454:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 8001458:	edd7 7a03 	vldr	s15, [r7, #12]
 800145c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001464:	db35      	blt.n	80014d2 <Coordinate_Base_to_Robot+0xe2>
 8001466:	edd7 7a03 	vldr	s15, [r7, #12]
 800146a:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 800146e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d82c      	bhi.n	80014d2 <Coordinate_Base_to_Robot+0xe2>
			{
		//Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90)));
 8001478:	edd7 7a03 	vldr	s15, [r7, #12]
 800147c:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 8001480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	f000 fa0a 	bl	80018a0 <degree_to_rad>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	f00d feac 	bl	800f1f0 <cosf>
 8001498:	eeb0 7a40 	vmov.f32	s14, s0
 800149c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	ee17 0a90 	vmov	r0, s15
 80014b0:	f7ff f816 	bl	80004e0 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	ec43 2b10 	vmov	d0, r2, r3
 80014bc:	f00d fe22 	bl	800f104 <sqrt>
 80014c0:	ec53 2b10 	vmov	r2, r3, d0
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb32 	bl	8000b30 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014d0:	e0b9      	b.n	8001646 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position + 90));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 80014d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d6:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	db35      	blt.n	8001550 <Coordinate_Base_to_Robot+0x160>
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8001784 <Coordinate_Base_to_Robot+0x394>
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	d82c      	bhi.n	8001550 <Coordinate_Base_to_Robot+0x160>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 80014f6:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001788 <Coordinate_Base_to_Robot+0x398>
 80014fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80014fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	f000 f9cb 	bl	80018a0 <degree_to_rad>
 800150a:	eef0 7a40 	vmov.f32	s15, s0
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	f00d fe6d 	bl	800f1f0 <cosf>
 8001516:	eeb0 7a40 	vmov.f32	s14, s0
 800151a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001522:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152a:	ee17 0a90 	vmov	r0, s15
 800152e:	f7fe ffd7 	bl	80004e0 <__aeabi_f2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	ec43 2b10 	vmov	d0, r2, r3
 800153a:	f00d fde3 	bl	800f104 <sqrt>
 800153e:	ec53 2b10 	vmov	r2, r3, d0
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff faf3 	bl	8000b30 <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800154e:	e07a      	b.n	8001646 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(180 - theta_position));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 8001550:	edd7 7a03 	vldr	s15, [r7, #12]
 8001554:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155c:	d835      	bhi.n	80015ca <Coordinate_Base_to_Robot+0x1da>
 800155e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001562:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 800177c <Coordinate_Base_to_Robot+0x38c>
 8001566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	db2c      	blt.n	80015ca <Coordinate_Base_to_Robot+0x1da>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 8001570:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8001788 <Coordinate_Base_to_Robot+0x398>
 8001574:	edd7 7a03 	vldr	s15, [r7, #12]
 8001578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	f000 f98e 	bl	80018a0 <degree_to_rad>
 8001584:	eef0 7a40 	vmov.f32	s15, s0
 8001588:	eeb0 0a67 	vmov.f32	s0, s15
 800158c:	f00d fe30 	bl	800f1f0 <cosf>
 8001590:	eeb0 7a40 	vmov.f32	s14, s0
 8001594:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80015a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a4:	ee17 0a90 	vmov	r0, s15
 80015a8:	f7fe ff9a 	bl	80004e0 <__aeabi_f2d>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	ec43 2b10 	vmov	d0, r2, r3
 80015b4:	f00d fda6 	bl	800f104 <sqrt>
 80015b8:	ec53 2b10 	vmov	r2, r3, d0
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fab6 	bl	8000b30 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015c8:	e03d      	b.n	8001646 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position - 90));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 80015ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ce:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800177c <Coordinate_Base_to_Robot+0x38c>
 80015d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d834      	bhi.n	8001646 <Coordinate_Base_to_Robot+0x256>
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8001780 <Coordinate_Base_to_Robot+0x390>
 80015e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	db2b      	blt.n	8001646 <Coordinate_Base_to_Robot+0x256>
			{
//		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(90 - theta_position));
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 80015ee:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001788 <Coordinate_Base_to_Robot+0x398>
 80015f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	f000 f94f 	bl	80018a0 <degree_to_rad>
 8001602:	eef0 7a40 	vmov.f32	s15, s0
 8001606:	eeb0 0a67 	vmov.f32	s0, s15
 800160a:	f00d fdf1 	bl	800f1f0 <cosf>
 800160e:	eeb0 7a40 	vmov.f32	s14, s0
 8001612:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800161e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001622:	ee17 0a90 	vmov	r0, s15
 8001626:	f7fe ff5b 	bl	80004e0 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	ec43 2b10 	vmov	d0, r2, r3
 8001632:	f00d fd67 	bl	800f104 <sqrt>
 8001636:	ec53 2b10 	vmov	r2, r3, d0
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa77 	bl	8000b30 <__aeabi_d2f>
 8001642:	4603      	mov	r3, r0
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	float up = pow(r_position, 2) - pow(prismatic_pos, 2) - pow(Offet, 2);
 8001646:	6938      	ldr	r0, [r7, #16]
 8001648:	f7fe ff4a 	bl	80004e0 <__aeabi_f2d>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8001768 <Coordinate_Base_to_Robot+0x378>
 8001654:	ec43 2b10 	vmov	d0, r2, r3
 8001658:	f00d fce4 	bl	800f024 <pow>
 800165c:	ec55 4b10 	vmov	r4, r5, d0
 8001660:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001662:	f7fe ff3d 	bl	80004e0 <__aeabi_f2d>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 8001768 <Coordinate_Base_to_Robot+0x378>
 800166e:	ec43 2b10 	vmov	d0, r2, r3
 8001672:	f00d fcd7 	bl	800f024 <pow>
 8001676:	ec53 2b10 	vmov	r2, r3, d0
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fdcf 	bl	8000220 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	a339      	add	r3, pc, #228	@ (adr r3, 8001770 <Coordinate_Base_to_Robot+0x380>)
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f7fe fdc6 	bl	8000220 <__aeabi_dsub>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff fa48 	bl	8000b30 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
	float down = -2 * prismatic_pos * Offet;
 80016a4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80016a8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80016ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001778 <Coordinate_Base_to_Robot+0x388>
 80016b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float arc = acosf(up/down);
 80016bc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80016c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016c8:	eeb0 0a66 	vmov.f32	s0, s13
 80016cc:	f00d fd46 	bl	800f15c <acosf>
 80016d0:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float alpha = rad_to_degree(arc);
 80016d4:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80016d8:	f000 f8b6 	bl	8001848 <rad_to_degree>
 80016dc:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 80016e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ec:	db18      	blt.n	8001720 <Coordinate_Base_to_Robot+0x330>
 80016ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 80016f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d80f      	bhi.n	8001720 <Coordinate_Base_to_Robot+0x330>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 8001700:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 8001704:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001708:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170c:	eeb0 0a67 	vmov.f32	s0, s15
 8001710:	f000 f8c6 	bl	80018a0 <degree_to_rad>
 8001714:	eef0 7a40 	vmov.f32	s15, s0
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	edc3 7a01 	vstr	s15, [r3, #4]
 800171e:	e07c      	b.n	800181a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90))));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001720:	edd7 7a03 	vldr	s15, [r7, #12]
 8001724:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 8001728:	eef4 7ac7 	vcmpe.f32	s15, s14
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	db30      	blt.n	8001794 <Coordinate_Base_to_Robot+0x3a4>
 8001732:	edd7 7a03 	vldr	s15, [r7, #12]
 8001736:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001784 <Coordinate_Base_to_Robot+0x394>
 800173a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001742:	d827      	bhi.n	8001794 <Coordinate_Base_to_Robot+0x3a4>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001744:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001748:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 800174c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001750:	eeb0 0a67 	vmov.f32	s0, s15
 8001754:	f000 f8a4 	bl	80018a0 <degree_to_rad>
 8001758:	eef0 7a40 	vmov.f32	s15, s0
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	edc3 7a01 	vstr	s15, [r3, #4]
 8001762:	e05a      	b.n	800181a <Coordinate_Base_to_Robot+0x42a>
 8001764:	f3af 8000 	nop.w
 8001768:	00000000 	.word	0x00000000
 800176c:	40000000 	.word	0x40000000
 8001770:	00000000 	.word	0x00000000
 8001774:	41058880 	.word	0x41058880
 8001778:	43d20000 	.word	0x43d20000
 800177c:	c2b40000 	.word	0xc2b40000
 8001780:	c3340000 	.word	0xc3340000
 8001784:	43340000 	.word	0x43340000
 8001788:	43870000 	.word	0x43870000
 800178c:	43b40000 	.word	0x43b40000
 8001790:	42b40000 	.word	0x42b40000
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(180 - theta_position))));
	} else if (theta_position <= 180 && theta_position >= 270) // quadrant 3
 8001794:	edd7 7a03 	vldr	s15, [r7, #12]
 8001798:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 8001784 <Coordinate_Base_to_Robot+0x394>
 800179c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a4:	d818      	bhi.n	80017d8 <Coordinate_Base_to_Robot+0x3e8>
 80017a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017aa:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 8001788 <Coordinate_Base_to_Robot+0x398>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	db0f      	blt.n	80017d8 <Coordinate_Base_to_Robot+0x3e8>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 80017b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017bc:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 80017c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c4:	eeb0 0a67 	vmov.f32	s0, s15
 80017c8:	f000 f86a 	bl	80018a0 <degree_to_rad>
 80017cc:	eef0 7a40 	vmov.f32	s15, s0
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	edc3 7a01 	vstr	s15, [r3, #4]
 80017d6:	e020      	b.n	800181a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position - 90))));
	} else if (theta_position <= 270 && theta_position >= 360) // quadrant 4
 80017d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017dc:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 8001788 <Coordinate_Base_to_Robot+0x398>
 80017e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e8:	d817      	bhi.n	800181a <Coordinate_Base_to_Robot+0x42a>
 80017ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ee:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 800178c <Coordinate_Base_to_Robot+0x39c>
 80017f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	db0e      	blt.n	800181a <Coordinate_Base_to_Robot+0x42a>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 80017fc:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 8001790 <Coordinate_Base_to_Robot+0x3a0>
 8001800:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	eeb0 0a67 	vmov.f32	s0, s15
 800180c:	f000 f848 	bl	80018a0 <degree_to_rad>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	edc3 7a01 	vstr	s15, [r3, #4]
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(90 - theta_position))));
	}

//	Goal_point->r_goal_position = format_base_to_robot(prismatic_pos);
	Goal_point->r_goal_position = prismatic_pos;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800181e:	601a      	str	r2, [r3, #0]

	return *Goal_point;
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182a:	e883 0003 	stmia.w	r3, {r0, r1}
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	6a3b      	ldr	r3, [r7, #32]
 8001832:	ee07 2a10 	vmov	s14, r2
 8001836:	ee07 3a90 	vmov	s15, r3
}
 800183a:	eeb0 0a47 	vmov.f32	s0, s14
 800183e:	eef0 0a67 	vmov.f32	s1, s15
 8001842:	3740      	adds	r7, #64	@ 0x40
 8001844:	46bd      	mov	sp, r7
 8001846:	bdb0      	pop	{r4, r5, r7, pc}

08001848 <rad_to_degree>:
	Goal_point->r_goal_position = Prismatic_pos;
	Goal_point->theta_goal_position = theta;
	return *Goal_point;
}

float rad_to_degree(float rad) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (rad * 180.0) / 3.142;
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe fe44 	bl	80004e0 <__aeabi_f2d>
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <rad_to_degree+0x50>)
 800185e:	f7fe fe97 	bl	8000590 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4610      	mov	r0, r2
 8001868:	4619      	mov	r1, r3
 800186a:	a309      	add	r3, pc, #36	@ (adr r3, 8001890 <rad_to_degree+0x48>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe ffb8 	bl	80007e4 <__aeabi_ddiv>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f958 	bl	8000b30 <__aeabi_d2f>
 8001880:	4603      	mov	r3, r0
 8001882:	ee07 3a90 	vmov	s15, r3
}
 8001886:	eeb0 0a67 	vmov.f32	s0, s15
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	e5604189 	.word	0xe5604189
 8001894:	400922d0 	.word	0x400922d0
 8001898:	40668000 	.word	0x40668000
 800189c:	00000000 	.word	0x00000000

080018a0 <degree_to_rad>:
float degree_to_rad(float degree) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree * 3.142) / 180.0;
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7fe fe18 	bl	80004e0 <__aeabi_f2d>
 80018b0:	a30e      	add	r3, pc, #56	@ (adr r3, 80018ec <degree_to_rad+0x4c>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fe6b 	bl	8000590 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <degree_to_rad+0x48>)
 80018c8:	f7fe ff8c 	bl	80007e4 <__aeabi_ddiv>
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f92c 	bl	8000b30 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	ee07 3a90 	vmov	s15, r3
}
 80018de:	eeb0 0a67 	vmov.f32	s0, s15
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40668000 	.word	0x40668000
 80018ec:	e5604189 	.word	0xe5604189
 80018f0:	400922d0 	.word	0x400922d0

080018f4 <format_robot_to_base>:
uint16_t format_robot_to_base(float degree) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t) (roundf(degree) * 10.0);
 80018fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8001902:	f00d fdab 	bl	800f45c <roundf>
 8001906:	ee10 3a10 	vmov	r3, s0
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fde8 	bl	80004e0 <__aeabi_f2d>
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <format_robot_to_base+0x40>)
 8001916:	f7fe fe3b 	bl	8000590 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f8e5 	bl	8000af0 <__aeabi_d2uiz>
 8001926:	4603      	mov	r3, r0
 8001928:	b29b      	uxth	r3, r3
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40240000 	.word	0x40240000

08001938 <format_base_to_robot>:
float format_base_to_robot(uint16_t degree) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	return (float) (degree / 10.0);
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fdb9 	bl	80004bc <__aeabi_i2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <format_base_to_robot+0x38>)
 8001950:	f7fe ff48 	bl	80007e4 <__aeabi_ddiv>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8e8 	bl	8000b30 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	ee07 3a90 	vmov	s15, r3
}
 8001966:	eeb0 0a67 	vmov.f32	s0, s15
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40240000 	.word	0x40240000

08001974 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 10.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001984:	213c      	movs	r1, #60	@ 0x3c
 8001986:	6838      	ldr	r0, [r7, #0]
 8001988:	f008 fcca 	bl	800a320 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	461a      	mov	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f04f 0200 	mov.w	r2, #0
 80019a6:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	61da      	str	r2, [r3, #28]
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f247 5230 	movw	r2, #30000	@ 0x7530
 80019ee:	4293      	cmp	r3, r2
 80019f0:	dd05      	ble.n	80019fe <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80019f8:	3b60      	subs	r3, #96	@ 0x60
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e008      	b.n	8001a10 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	4a48      	ldr	r2, [pc, #288]	@ (8001b24 <Encoder_Update+0x15c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	da04      	bge.n	8001a10 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001a0c:	3360      	adds	r3, #96	@ 0x60
 8001a0e:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a20:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001b28 <Encoder_Update+0x160>
 8001a24:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001a28:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001b2c <Encoder_Update+0x164>
 8001a2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	edd3 7a06 	vldr	s15, [r3, #24]
 8001a46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a4a:	ed97 7a00 	vldr	s14, [r7]
 8001a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a64:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a68:	ed97 7a00 	vldr	s14, [r7]
 8001a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a7c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001b30 <Encoder_Update+0x168>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ab0:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001b2c <Encoder_Update+0x164>
 8001ab4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ab8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001abc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001ad6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ada:	ed97 7a00 	vldr	s14, [r7]
 8001ade:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001af4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001af8:	ed97 7a00 	vldr	s14, [r7]
 8001afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1a      	ldr	r2, [r3, #32]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001b16:	bf00      	nop
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	ffff8ad0 	.word	0xffff8ad0
 8001b28:	40c90fda 	.word	0x40c90fda
 8001b2c:	463b8000 	.word	0x463b8000
 8001b30:	42651738 	.word	0x42651738

08001b34 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	ee07 3a90 	vmov	s15, r3
}
 8001b44:	eeb0 0a67 	vmov.f32	s0, s15
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	ee07 3a90 	vmov	s15, r3
}
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	ee07 3a90 	vmov	s15, r3
}
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	ee07 3a90 	vmov	s15, r3
}
 8001b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	ee07 3a90 	vmov	s15, r3
}
 8001bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd6:	ee07 3a90 	vmov	s15, r3
}
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf4:	ee07 3a90 	vmov	s15, r3
}
 8001bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af02      	add	r7, sp, #8
//	HAL_Delay(1);
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c14:	4811      	ldr	r0, [pc, #68]	@ (8001c5c <PS2_ReadData+0x54>)
 8001c16:	f006 fa11 	bl	800803c <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	e00f      	b.n	8001c40 <PS2_ReadData+0x38>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a0f      	ldr	r2, [pc, #60]	@ (8001c60 <PS2_ReadData+0x58>)
 8001c24:	1899      	adds	r1, r3, r2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a0e      	ldr	r2, [pc, #56]	@ (8001c64 <PS2_ReadData+0x5c>)
 8001c2a:	441a      	add	r2, r3
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2301      	movs	r3, #1
 8001c34:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <PS2_ReadData+0x60>)
 8001c36:	f007 fb0c 	bl	8009252 <HAL_SPI_TransmitReceive>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	ddec      	ble.n	8001c20 <PS2_ReadData+0x18>
//		HAL_Delay(5);
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c4c:	4803      	ldr	r0, [pc, #12]	@ (8001c5c <PS2_ReadData+0x54>)
 8001c4e:	f006 f9f5 	bl	800803c <HAL_GPIO_WritePin>
//	HAL_Delay(5);
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000284 	.word	0x20000284
 8001c68:	200015dc 	.word	0x200015dc

08001c6c <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <PS2_ButtonCircle+0x20>)
 8001c72:	791b      	ldrb	r3, [r3, #4]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bf0c      	ite	eq
 8001c7c:	2301      	moveq	r3, #1
 8001c7e:	2300      	movne	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	20000284 	.word	0x20000284

08001c90 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 8001c94:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <PS2_ButtonSquare+0x1c>)
 8001c96:	791b      	ldrb	r3, [r3, #4]
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	09db      	lsrs	r3, r3, #7
 8001ca0:	b2db      	uxtb	r3, r3
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	20000284 	.word	0x20000284

08001cb0 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 8001cb4:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <PS2_ButtonTriangle+0x20>)
 8001cb6:	791b      	ldrb	r3, [r3, #4]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	bf0c      	ite	eq
 8001cc0:	2301      	moveq	r3, #1
 8001cc2:	2300      	movne	r3, #0
 8001cc4:	b2db      	uxtb	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	20000284 	.word	0x20000284

08001cd4 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <PS2_ButtonCross+0x20>)
 8001cda:	791b      	ldrb	r3, [r3, #4]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	20000284 	.word	0x20000284

08001cf8 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 8001cfc:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <PS2_ButtonR1+0x20>)
 8001cfe:	791b      	ldrb	r3, [r3, #4]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf0c      	ite	eq
 8001d08:	2301      	moveq	r3, #1
 8001d0a:	2300      	movne	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	20000284 	.word	0x20000284

08001d1c <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <PS2_ButtonR2+0x20>)
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	20000284 	.word	0x20000284

08001d40 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <PS2_ButtonSelect+0x20>)
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	bf0c      	ite	eq
 8001d50:	2301      	moveq	r3, #1
 8001d52:	2300      	movne	r3, #0
 8001d54:	b2db      	uxtb	r3, r3
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	20000284 	.word	0x20000284

08001d64 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <PS2_ButtonStart+0x20>)
 8001d6a:	78db      	ldrb	r3, [r3, #3]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	20000284 	.word	0x20000284

08001d88 <PS2_ButtonL1>:

uint8_t PS2_ButtonL1() {
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x04);
 8001d8c:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <PS2_ButtonL1+0x20>)
 8001d8e:	791b      	ldrb	r3, [r3, #4]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000284 	.word	0x20000284

08001dac <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x01);
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <PS2_ButtonL2+0x20>)
 8001db2:	791b      	ldrb	r3, [r3, #4]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20000284 	.word	0x20000284

08001dd0 <PS2_ButtonUp>:

uint8_t PS2_ButtonUp() {
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x10);
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <PS2_ButtonUp+0x20>)
 8001dd6:	78db      	ldrb	r3, [r3, #3]
 8001dd8:	f003 0310 	and.w	r3, r3, #16
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	20000284 	.word	0x20000284

08001df4 <PS2_ButtonRight>:

uint8_t PS2_ButtonRight() {
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x20);
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <PS2_ButtonRight+0x20>)
 8001dfa:	78db      	ldrb	r3, [r3, #3]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	20000284 	.word	0x20000284

08001e18 <PS2_ButtonDown>:

uint8_t PS2_ButtonDown() {
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x40);
 8001e1c:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <PS2_ButtonDown+0x20>)
 8001e1e:	78db      	ldrb	r3, [r3, #3]
 8001e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	20000284 	.word	0x20000284

08001e3c <PS2_ButtonLeft>:

uint8_t PS2_ButtonLeft() {
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x80);
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <PS2_ButtonLeft+0x1c>)
 8001e42:	78db      	ldrb	r3, [r3, #3]
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	09db      	lsrs	r3, r3, #7
 8001e4c:	b2db      	uxtb	r3, r3
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20000284 	.word	0x20000284

08001e5c <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	3370      	adds	r3, #112	@ 0x70
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	f00c fc14 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 0008 	add.w	r0, r3, #8
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	33b0      	adds	r3, #176	@ 0xb0
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	2104      	movs	r1, #4
 8001e80:	f00c fc0b 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f103 0010 	add.w	r0, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	33f0      	adds	r3, #240	@ 0xf0
 8001e8e:	2204      	movs	r2, #4
 8001e90:	2104      	movs	r1, #4
 8001e92:	f00c fc02 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f103 0018 	add.w	r0, r3, #24
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	f00c fbf8 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f103 0020 	add.w	r0, r3, #32
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	2104      	movs	r1, #4
 8001eba:	f00c fbee 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001eca:	2204      	movs	r2, #4
 8001ecc:	2104      	movs	r1, #4
 8001ece:	f00c fbe4 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8001ede:	2204      	movs	r2, #4
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	f00c fbda 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	f00c fbd0 	bl	800e69a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8001f06:	2201      	movs	r2, #1
 8001f08:	2104      	movs	r1, #4
 8001f0a:	f00c fbc6 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	f00c fbbc 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f2e:	2201      	movs	r2, #1
 8001f30:	2104      	movs	r1, #4
 8001f32:	f00c fbb2 	bl	800e69a <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f42:	2204      	movs	r2, #4
 8001f44:	2104      	movs	r1, #4
 8001f46:	f00c fba8 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001f56:	2204      	movs	r2, #4
 8001f58:	2104      	movs	r1, #4
 8001f5a:	f00c fb9e 	bl	800e69a <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	f00c fb94 	bl	800e69a <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	e00b      	b.n	8001f90 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	338c      	adds	r3, #140	@ 0x8c
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	3304      	adds	r3, #4
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	ddf0      	ble.n	8001f78 <Kalman_Init+0x11c>
    }
}
 8001f96:	bf00      	nop
 8001f98:	bf00      	nop
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e01c      	b.n	8001fec <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	e013      	b.n	8001fe0 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d101      	bne.n	8001fc4 <Kalman_SetProcessNoise+0x24>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	e001      	b.n	8001fc8 <Kalman_SetProcessNoise+0x28>
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	0091      	lsls	r1, r2, #2
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	440a      	add	r2, r1
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	324c      	adds	r2, #76	@ 0x4c
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	440a      	add	r2, r1
 8001fd8:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	dde8      	ble.n	8001fb8 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	dddf      	ble.n	8001fb2 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8001ff2:	bf00      	nop
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	e01c      	b.n	800204c <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	e013      	b.n	8002040 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d101      	bne.n	8002024 <Kalman_SetMeasurementNoise+0x24>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	e001      	b.n	8002028 <Kalman_SetMeasurementNoise+0x28>
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	0091      	lsls	r1, r2, #2
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	440a      	add	r2, r1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	325c      	adds	r2, #92	@ 0x5c
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	440a      	add	r2, r1
 8002038:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	3301      	adds	r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b03      	cmp	r3, #3
 8002044:	dde8      	ble.n	8002018 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	3301      	adds	r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b03      	cmp	r3, #3
 8002050:	dddf      	ble.n	8002012 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3358      	adds	r3, #88	@ 0x58
 8002094:	461a      	mov	r2, r3
 8002096:	f00c fe8f 	bl	800edb8 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f103 0008 	add.w	r0, r3, #8
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3360      	adds	r3, #96	@ 0x60
 80020aa:	461a      	mov	r2, r3
 80020ac:	f00c fe84 	bl	800edb8 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3340      	adds	r3, #64	@ 0x40
 80020c0:	461a      	mov	r2, r3
 80020c2:	f00c faaf 	bl	800e624 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	3358      	adds	r3, #88	@ 0x58
 80020d2:	461a      	mov	r2, r3
 80020d4:	f00c fe70 	bl	800edb8 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3360      	adds	r3, #96	@ 0x60
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f00c ff1e 	bl	800ef22 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3328      	adds	r3, #40	@ 0x28
 80020f6:	461a      	mov	r2, r3
 80020f8:	f00c fe5e 	bl	800edb8 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f103 0118 	add.w	r1, r3, #24
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3328      	adds	r3, #40	@ 0x28
 800210c:	461a      	mov	r2, r3
 800210e:	f00c fa89 	bl	800e624 <arm_mat_add_f32>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 800211a:	b580      	push	{r7, lr}
 800211c:	b088      	sub	sp, #32
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
 8002128:	e00e      	b.n	8002148 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4413      	add	r3, r2
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3394      	adds	r3, #148	@ 0x94
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	3304      	adds	r3, #4
 8002140:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3301      	adds	r3, #1
 8002146:	61fb      	str	r3, [r7, #28]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b03      	cmp	r3, #3
 800214c:	dded      	ble.n	800212a <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f103 0210 	add.w	r2, r3, #16
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3360      	adds	r3, #96	@ 0x60
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f00c fee1 	bl	800ef22 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3358      	adds	r3, #88	@ 0x58
 8002170:	461a      	mov	r2, r3
 8002172:	f00c fe21 	bl	800edb8 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f103 0010 	add.w	r0, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3368      	adds	r3, #104	@ 0x68
 8002186:	461a      	mov	r2, r3
 8002188:	f00c fe16 	bl	800edb8 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 0120 	add.w	r1, r3, #32
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3368      	adds	r3, #104	@ 0x68
 800219c:	461a      	mov	r2, r3
 800219e:	f00c fa41 	bl	800e624 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3368      	adds	r3, #104	@ 0x68
 80021ac:	4619      	mov	r1, r3
 80021ae:	4610      	mov	r0, r2
 80021b0:	f00c fa8b 	bl	800e6ca <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3330      	adds	r3, #48	@ 0x30
 80021c4:	461a      	mov	r2, r3
 80021c6:	f00c fdf7 	bl	800edb8 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f103 0010 	add.w	r0, r3, #16
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3348      	adds	r3, #72	@ 0x48
 80021da:	461a      	mov	r2, r3
 80021dc:	f00c fdec 	bl	800edb8 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80021e0:	2300      	movs	r3, #0
 80021e2:	61bb      	str	r3, [r7, #24]
 80021e4:	e01c      	b.n	8002220 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	3394      	adds	r3, #148	@ 0x94
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	3390      	adds	r3, #144	@ 0x90
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	3390      	adds	r3, #144	@ 0x90
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	3304      	adds	r3, #4
 8002216:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3301      	adds	r3, #1
 800221e:	61bb      	str	r3, [r7, #24]
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b03      	cmp	r3, #3
 8002224:	dddf      	ble.n	80021e6 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3348      	adds	r3, #72	@ 0x48
 8002236:	461a      	mov	r2, r3
 8002238:	f00c fdbe 	bl	800edb8 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e01c      	b.n	800227c <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	338c      	adds	r3, #140	@ 0x8c
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3390      	adds	r3, #144	@ 0x90
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	338c      	adds	r3, #140	@ 0x8c
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b03      	cmp	r3, #3
 8002280:	dddf      	ble.n	8002242 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	e00b      	b.n	80022a0 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	3398      	adds	r3, #152	@ 0x98
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	3304      	adds	r3, #4
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	3301      	adds	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0f      	cmp	r3, #15
 80022a4:	ddf0      	ble.n	8002288 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	e00e      	b.n	80022ca <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4613      	mov	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4413      	add	r3, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	3398      	adds	r3, #152	@ 0x98
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80022c2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3301      	adds	r3, #1
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	dded      	ble.n	80022ac <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f103 0110 	add.w	r1, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3360      	adds	r3, #96	@ 0x60
 80022e0:	461a      	mov	r2, r3
 80022e2:	f00c fd69 	bl	800edb8 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3358      	adds	r3, #88	@ 0x58
 80022f6:	461a      	mov	r2, r3
 80022f8:	f00c fdd8 	bl	800eeac <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3328      	adds	r3, #40	@ 0x28
 800230c:	461a      	mov	r2, r3
 800230e:	f00c fd53 	bl	800edb8 <arm_mat_mult_f32>
}
 8002312:	bf00      	nop
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8002324:	4b04      	ldr	r3, [pc, #16]	@ (8002338 <modbus_1t5_Timeout+0x1c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	751a      	strb	r2, [r3, #20]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	2000028c 	.word	0x2000028c

0800233c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8002344:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <modbus_3t5_Timeout+0x1c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	755a      	strb	r2, [r3, #21]
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	2000028c 	.word	0x2000028c

0800235c <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8002366:	4b15      	ldr	r3, [pc, #84]	@ (80023bc <modbus_UART_Recived+0x60>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800236e:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <modbus_UART_Recived+0x60>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8002376:	1c59      	adds	r1, r3, #1
 8002378:	b289      	uxth	r1, r1
 800237a:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 800237e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002382:	d210      	bcs.n	80023a6 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002384:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <modbus_UART_Recived+0x60>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68d8      	ldr	r0, [r3, #12]
 800238a:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <modbus_UART_Recived+0x60>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <modbus_UART_Recived+0x60>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002396:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800239a:	4413      	add	r3, r2
 800239c:	3302      	adds	r3, #2
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	f009 fdcd 	bl	800bf40 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <modbus_UART_Recived+0x60>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000028c 	.word	0x2000028c

080023c0 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80023ca:	4a24      	ldr	r2, [pc, #144]	@ (800245c <Modbus_init+0x9c>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <Modbus_init+0x9c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80023d8:	4b20      	ldr	r3, [pc, #128]	@ (800245c <Modbus_init+0x9c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	4a20      	ldr	r2, [pc, #128]	@ (8002460 <Modbus_init+0xa0>)
 80023e0:	2114      	movs	r1, #20
 80023e2:	4618      	mov	r0, r3
 80023e4:	f008 fca2 	bl	800ad2c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80023e8:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <Modbus_init+0x9c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002464 <Modbus_init+0xa4>)
 80023f0:	210e      	movs	r1, #14
 80023f2:	4618      	mov	r0, r3
 80023f4:	f008 fc9a 	bl	800ad2c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80023f8:	4b18      	ldr	r3, [pc, #96]	@ (800245c <Modbus_init+0x9c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002468 <Modbus_init+0xa8>)
 8002400:	2103      	movs	r1, #3
 8002402:	4618      	mov	r0, r3
 8002404:	f009 fce2 	bl	800bdcc <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <Modbus_init+0x9c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68d8      	ldr	r0, [r3, #12]
 800240e:	4b13      	ldr	r3, [pc, #76]	@ (800245c <Modbus_init+0x9c>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b12      	ldr	r3, [pc, #72]	@ (800245c <Modbus_init+0x9c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800241a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800241e:	4413      	add	r3, r2
 8002420:	3302      	adds	r3, #2
 8002422:	2201      	movs	r2, #1
 8002424:	4619      	mov	r1, r3
 8002426:	f009 fd8b 	bl	800bf40 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <Modbus_init+0x9c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d10c      	bne.n	8002454 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800243a:	4b08      	ldr	r3, [pc, #32]	@ (800245c <Modbus_init+0x9c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	4618      	mov	r0, r3
 8002442:	f007 fb5d 	bl	8009b00 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <Modbus_init+0x9c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2100      	movs	r1, #0
 800244e:	4618      	mov	r0, r3
 8002450:	f007 fe24 	bl	800a09c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2000028c 	.word	0x2000028c
 8002460:	0800231d 	.word	0x0800231d
 8002464:	0800233d 	.word	0x0800233d
 8002468:	0800235d 	.word	0x0800235d

0800246c <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002478:	23ff      	movs	r3, #255	@ 0xff
 800247a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800247c:	23ff      	movs	r3, #255	@ 0xff
 800247e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002480:	e013      	b.n	80024aa <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	1c5a      	adds	r2, r3, #1
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	7bbb      	ldrb	r3, [r7, #14]
 800248c:	4053      	eors	r3, r2
 800248e:	b2db      	uxtb	r3, r3
 8002490:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002492:	4a10      	ldr	r2, [pc, #64]	@ (80024d4 <CRC16+0x68>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4413      	add	r3, r2
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	4053      	eors	r3, r2
 800249e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80024a0:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <CRC16+0x6c>)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	4413      	add	r3, r2
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80024aa:	883b      	ldrh	r3, [r7, #0]
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	803a      	strh	r2, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e6      	bne.n	8002482 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	021b      	lsls	r3, r3, #8
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	7bbb      	ldrb	r3, [r7, #14]
 80024be:	b21b      	sxth	r3, r3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	b29b      	uxth	r3, r3
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000108 	.word	0x20000108
 80024d8:	20000008 	.word	0x20000008

080024dc <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80024e2:	4b80      	ldr	r3, [pc, #512]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	7e1b      	ldrb	r3, [r3, #24]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	2b03      	cmp	r3, #3
 80024ec:	d80a      	bhi.n	8002504 <Modbus_Protocal_Worker+0x28>
 80024ee:	a201      	add	r2, pc, #4	@ (adr r2, 80024f4 <Modbus_Protocal_Worker+0x18>)
 80024f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024f4:	0800250f 	.word	0x0800250f
 80024f8:	080026ad 	.word	0x080026ad
 80024fc:	08002599 	.word	0x08002599
 8002500:	080025bf 	.word	0x080025bf
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002504:	4b77      	ldr	r3, [pc, #476]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	761a      	strb	r2, [r3, #24]
		break;
 800250c:	e0e6      	b.n	80026dc <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800250e:	4b75      	ldr	r3, [pc, #468]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800251a:	f000 f9d5 	bl	80028c8 <Modbus_Emission>
 800251e:	e01c      	b.n	800255a <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8002520:	4b70      	ldr	r3, [pc, #448]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	7d9b      	ldrb	r3, [r3, #22]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800252a:	4b6e      	ldr	r3, [pc, #440]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2200      	movs	r2, #0
 8002530:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8002532:	4b6c      	ldr	r3, [pc, #432]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800253a:	4b6a      	ldr	r3, [pc, #424]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4b67      	ldr	r3, [pc, #412]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 0201 	orr.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8002552:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2203      	movs	r2, #3
 8002558:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800255a:	4b62      	ldr	r3, [pc, #392]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002564:	2b20      	cmp	r3, #32
 8002566:	f040 80b2 	bne.w	80026ce <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800256a:	4b5e      	ldr	r3, [pc, #376]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002574:	4b5b      	ldr	r3, [pc, #364]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68d8      	ldr	r0, [r3, #12]
 800257a:	4b5a      	ldr	r3, [pc, #360]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002586:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800258a:	4413      	add	r3, r2
 800258c:	3302      	adds	r3, #2
 800258e:	2201      	movs	r2, #1
 8002590:	4619      	mov	r1, r3
 8002592:	f009 fcd5 	bl	800bf40 <HAL_UART_Receive_IT>
		}
		break;
 8002596:	e09a      	b.n	80026ce <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002598:	4b52      	ldr	r3, [pc, #328]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	7d1b      	ldrb	r3, [r3, #20]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8097 	beq.w	80026d2 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80025a4:	4b4f      	ldr	r3, [pc, #316]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80025ac:	4b4d      	ldr	r3, [pc, #308]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	22fe      	movs	r2, #254	@ 0xfe
 80025b2:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80025b4:	4b4b      	ldr	r3, [pc, #300]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2204      	movs	r2, #4
 80025ba:	761a      	strb	r2, [r3, #24]
		}
		break;
 80025bc:	e089      	b.n	80026d2 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80025be:	4b49      	ldr	r3, [pc, #292]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	7d9b      	ldrb	r3, [r3, #22]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d009      	beq.n	80025dc <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 80025c8:	4b46      	ldr	r3, [pc, #280]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80025d4:	4b43      	ldr	r3, [pc, #268]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	22ff      	movs	r2, #255	@ 0xff
 80025da:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80025dc:	4b41      	ldr	r3, [pc, #260]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80025e4:	f113 0f02 	cmn.w	r3, #2
 80025e8:	d150      	bne.n	800268c <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80025ea:	4b3e      	ldr	r3, [pc, #248]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2200      	movs	r2, #0
 80025f0:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80025f2:	4b3c      	ldr	r3, [pc, #240]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80025fa:	4b3a      	ldr	r3, [pc, #232]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002602:	3b02      	subs	r3, #2
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7ff ff30 	bl	800246c <CRC16>
 800260c:	4603      	mov	r3, r0
 800260e:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002610:	793a      	ldrb	r2, [r7, #4]
 8002612:	4b34      	ldr	r3, [pc, #208]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002614:	6819      	ldr	r1, [r3, #0]
 8002616:	4b33      	ldr	r3, [pc, #204]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800261e:	3b02      	subs	r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8002626:	429a      	cmp	r2, r3
 8002628:	d10c      	bne.n	8002644 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800262a:	797a      	ldrb	r2, [r7, #5]
 800262c:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	4b2c      	ldr	r3, [pc, #176]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002638:	3b01      	subs	r3, #1
 800263a:	440b      	add	r3, r1
 800263c:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002640:	429a      	cmp	r2, r3
 8002642:	d004      	beq.n	800264e <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002644:	4b27      	ldr	r3, [pc, #156]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	22ff      	movs	r2, #255	@ 0xff
 800264a:	75da      	strb	r2, [r3, #23]
				break;
 800264c:	e046      	b.n	80026dc <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800264e:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002656:	4b23      	ldr	r3, [pc, #140]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d113      	bne.n	8002688 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8002660:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002668:	4b1e      	ldr	r3, [pc, #120]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002670:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002672:	4b1c      	ldr	r3, [pc, #112]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800267a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800267c:	461a      	mov	r2, r3
 800267e:	f00c fcc3 	bl	800f008 <memcpy>

			//execute command
			Modbus_frame_response();
 8002682:	f000 f909 	bl	8002898 <Modbus_frame_response>
 8002686:	e001      	b.n	800268c <Modbus_Protocal_Worker+0x1b0>
				break;
 8002688:	bf00      	nop
					}
		break;


	}
}
 800268a:	e027      	b.n	80026dc <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 800268c:	4b15      	ldr	r3, [pc, #84]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	7d5b      	ldrb	r3, [r3, #21]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d01f      	beq.n	80026d6 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8002696:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2201      	movs	r2, #1
 800269c:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 800269e:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f009 fd17 	bl	800c0d8 <HAL_UART_AbortReceive>
		break;
 80026aa:	e014      	b.n	80026d6 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80026ac:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d10f      	bne.n	80026da <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 80026ba:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80026c4:	4b07      	ldr	r3, [pc, #28]	@ (80026e4 <Modbus_Protocal_Worker+0x208>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	761a      	strb	r2, [r3, #24]
		break;
 80026cc:	e005      	b.n	80026da <Modbus_Protocal_Worker+0x1fe>
		break;
 80026ce:	bf00      	nop
 80026d0:	e004      	b.n	80026dc <Modbus_Protocal_Worker+0x200>
		break;
 80026d2:	bf00      	nop
 80026d4:	e002      	b.n	80026dc <Modbus_Protocal_Worker+0x200>
		break;
 80026d6:	bf00      	nop
 80026d8:	e000      	b.n	80026dc <Modbus_Protocal_Worker+0x200>
		break;
 80026da:	bf00      	nop
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	2000028c 	.word	0x2000028c

080026e8 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80026ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <modbusWrite1Register+0x7c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	7e9b      	ldrb	r3, [r3, #26]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002764 <modbusWrite1Register+0x7c>)
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	7ed2      	ldrb	r2, [r2, #27]
 80026fe:	4413      	add	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	4b17      	ldr	r3, [pc, #92]	@ (8002764 <modbusWrite1Register+0x7c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d903      	bls.n	8002716 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800270e:	2002      	movs	r0, #2
 8002710:	f000 f8a0 	bl	8002854 <ModbusErrorReply>
			 return;
 8002714:	e023      	b.n	800275e <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002716:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <modbusWrite1Register+0x7c>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	4b12      	ldr	r3, [pc, #72]	@ (8002764 <modbusWrite1Register+0x7c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	440b      	add	r3, r1
 8002726:	7f12      	ldrb	r2, [r2, #28]
 8002728:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800272a:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <modbusWrite1Register+0x7c>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <modbusWrite1Register+0x7c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	440b      	add	r3, r1
 800273a:	7f52      	ldrb	r2, [r2, #29]
 800273c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <modbusWrite1Register+0x7c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <modbusWrite1Register+0x7c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800274c:	2208      	movs	r2, #8
 800274e:	4619      	mov	r1, r3
 8002750:	f00c fc5a 	bl	800f008 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002754:	4b03      	ldr	r3, [pc, #12]	@ (8002764 <modbusWrite1Register+0x7c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2205      	movs	r2, #5
 800275a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	2000028c 	.word	0x2000028c

08002768 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800276e:	4b38      	ldr	r3, [pc, #224]	@ (8002850 <modbusRead1Register+0xe8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	7f1b      	ldrb	r3, [r3, #28]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	b29b      	uxth	r3, r3
 8002778:	4a35      	ldr	r2, [pc, #212]	@ (8002850 <modbusRead1Register+0xe8>)
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	7f52      	ldrb	r2, [r2, #29]
 800277e:	4413      	add	r3, r2
 8002780:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002782:	4b33      	ldr	r3, [pc, #204]	@ (8002850 <modbusRead1Register+0xe8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	7e9b      	ldrb	r3, [r3, #26]
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	b29b      	uxth	r3, r3
 800278c:	4a30      	ldr	r2, [pc, #192]	@ (8002850 <modbusRead1Register+0xe8>)
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	7ed2      	ldrb	r2, [r2, #27]
 8002792:	4413      	add	r3, r2
 8002794:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <modbusRead1Register+0x3a>
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	2b7d      	cmp	r3, #125	@ 0x7d
 80027a0:	d903      	bls.n	80027aa <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80027a2:	2003      	movs	r0, #3
 80027a4:	f000 f856 	bl	8002854 <ModbusErrorReply>
		 return;
 80027a8:	e04e      	b.n	8002848 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80027aa:	88ba      	ldrh	r2, [r7, #4]
 80027ac:	4b28      	ldr	r3, [pc, #160]	@ (8002850 <modbusRead1Register+0xe8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d808      	bhi.n	80027c8 <modbusRead1Register+0x60>
 80027b6:	88ba      	ldrh	r2, [r7, #4]
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	4413      	add	r3, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4b24      	ldr	r3, [pc, #144]	@ (8002850 <modbusRead1Register+0xe8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d903      	bls.n	80027d0 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80027c8:	2002      	movs	r0, #2
 80027ca:	f000 f843 	bl	8002854 <ModbusErrorReply>
		 return;
 80027ce:	e03b      	b.n	8002848 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80027d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002850 <modbusRead1Register+0xe8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2203      	movs	r2, #3
 80027d6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4b1c      	ldr	r3, [pc, #112]	@ (8002850 <modbusRead1Register+0xe8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	0052      	lsls	r2, r2, #1
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80027ea:	2400      	movs	r4, #0
 80027ec:	e020      	b.n	8002830 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80027ee:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <modbusRead1Register+0xe8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	88bb      	ldrh	r3, [r7, #4]
 80027f6:	4423      	add	r3, r4
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	18d1      	adds	r1, r2, r3
 80027fc:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <modbusRead1Register+0xe8>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	1c63      	adds	r3, r4, #1
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	7849      	ldrb	r1, [r1, #1]
 8002806:	4413      	add	r3, r2
 8002808:	460a      	mov	r2, r1
 800280a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800280e:	4b10      	ldr	r3, [pc, #64]	@ (8002850 <modbusRead1Register+0xe8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	88bb      	ldrh	r3, [r7, #4]
 8002816:	4423      	add	r3, r4
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	18d1      	adds	r1, r2, r3
 800281c:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <modbusRead1Register+0xe8>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	0063      	lsls	r3, r4, #1
 8002822:	3303      	adds	r3, #3
 8002824:	7809      	ldrb	r1, [r1, #0]
 8002826:	4413      	add	r3, r2
 8002828:	460a      	mov	r2, r1
 800282a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 800282e:	3401      	adds	r4, #1
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	429c      	cmp	r4, r3
 8002834:	dbdb      	blt.n	80027ee <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b04      	ldr	r3, [pc, #16]	@ (8002850 <modbusRead1Register+0xe8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0052      	lsls	r2, r2, #1
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bd90      	pop	{r4, r7, pc}
 800284e:	bf00      	nop
 8002850:	2000028c 	.word	0x2000028c

08002854 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 800285e:	4b0d      	ldr	r3, [pc, #52]	@ (8002894 <ModbusErrorReply+0x40>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	7e5a      	ldrb	r2, [r3, #25]
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <ModbusErrorReply+0x40>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8002872:	4b08      	ldr	r3, [pc, #32]	@ (8002894 <ModbusErrorReply+0x40>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	79fa      	ldrb	r2, [r7, #7]
 8002878:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 800287c:	4b05      	ldr	r3, [pc, #20]	@ (8002894 <ModbusErrorReply+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2202      	movs	r2, #2
 8002882:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	2000028c 	.word	0x2000028c

08002898 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <Modbus_frame_response+0x2c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	7e5b      	ldrb	r3, [r3, #25]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d004      	beq.n	80028b0 <Modbus_frame_response+0x18>
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d105      	bne.n	80028b6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 80028aa:	f7ff ff1d 	bl	80026e8 <modbusWrite1Register>
		break;
 80028ae:	e006      	b.n	80028be <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 80028b0:	f7ff ff5a 	bl	8002768 <modbusRead1Register>
		break;
 80028b4:	e003      	b.n	80028be <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7ff ffcc 	bl	8002854 <ModbusErrorReply>
		break;
 80028bc:	bf00      	nop

	}
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2000028c 	.word	0x2000028c

080028c8 <Modbus_Emission>:

void Modbus_Emission()
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80028ce:	4b3c      	ldr	r3, [pc, #240]	@ (80029c0 <Modbus_Emission+0xf8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d15d      	bne.n	8002998 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80028dc:	4b38      	ldr	r3, [pc, #224]	@ (80029c0 <Modbus_Emission+0xf8>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b37      	ldr	r3, [pc, #220]	@ (80029c0 <Modbus_Emission+0xf8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	7812      	ldrb	r2, [r2, #0]
 80028e6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80028ea:	4b35      	ldr	r3, [pc, #212]	@ (80029c0 <Modbus_Emission+0xf8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80028f2:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80028f4:	4b32      	ldr	r3, [pc, #200]	@ (80029c0 <Modbus_Emission+0xf8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 80028fc:	4b30      	ldr	r3, [pc, #192]	@ (80029c0 <Modbus_Emission+0xf8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8002904:	461a      	mov	r2, r3
 8002906:	f00c fb7f 	bl	800f008 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 800290a:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <Modbus_Emission+0xf8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002912:	461a      	mov	r2, r3
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <Modbus_Emission+0xf8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3203      	adds	r2, #3
 800291a:	b292      	uxth	r2, r2
 800291c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002920:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <Modbus_Emission+0xf8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002928:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <Modbus_Emission+0xf8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002930:	3b02      	subs	r3, #2
 8002932:	4619      	mov	r1, r3
 8002934:	4610      	mov	r0, r2
 8002936:	f7ff fd99 	bl	800246c <CRC16>
 800293a:	4603      	mov	r3, r0
 800293c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800293e:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <Modbus_Emission+0xf8>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <Modbus_Emission+0xf8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800294a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800294c:	7939      	ldrb	r1, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	460a      	mov	r2, r1
 8002952:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <Modbus_Emission+0xf8>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <Modbus_Emission+0xf8>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002962:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002964:	7979      	ldrb	r1, [r7, #5]
 8002966:	4413      	add	r3, r2
 8002968:	460a      	mov	r2, r1
 800296a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800296e:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <Modbus_Emission+0xf8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002978:	2b20      	cmp	r3, #32
 800297a:	d10d      	bne.n	8002998 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800297c:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <Modbus_Emission+0xf8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <Modbus_Emission+0xf8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <Modbus_Emission+0xf8>)
 800298c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800298e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002992:	461a      	mov	r2, r3
 8002994:	f009 fb20 	bl	800bfd8 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <Modbus_Emission+0xf8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80029a0:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <Modbus_Emission+0xf8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <Modbus_Emission+0xf8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <Modbus_Emission+0xf8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2202      	movs	r2, #2
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000028c 	.word	0x2000028c

080029c4 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 80029c4:	b4b0      	push	{r4, r5, r7}
 80029c6:	b09f      	sub	sp, #124	@ 0x7c
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80029cc:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 80029d0:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 80029d4:	ed87 2b08 	vstr	d2, [r7, #32]
 80029d8:	ed87 3b06 	vstr	d3, [r7, #24]
 80029dc:	ed87 4b04 	vstr	d4, [r7, #16]
 80029e0:	ed87 5b02 	vstr	d5, [r7, #8]
 80029e4:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 80029e8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80029ec:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80029f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029f4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80029f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029fc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a04:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002a08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a0c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002a10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a14:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a1c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8002a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a22:	461d      	mov	r5, r3
 8002a24:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002a28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a38:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002a3c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a3e:	377c      	adds	r7, #124	@ 0x7c
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bcb0      	pop	{r4, r5, r7}
 8002a44:	4770      	bx	lr

08002a46 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8002a46:	b4b0      	push	{r4, r5, r7}
 8002a48:	b09f      	sub	sp, #124	@ 0x7c
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002a4e:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002a52:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002a56:	ed87 2b08 	vstr	d2, [r7, #32]
 8002a5a:	ed87 3b06 	vstr	d3, [r7, #24]
 8002a5e:	ed87 4b04 	vstr	d4, [r7, #16]
 8002a62:	ed87 5b02 	vstr	d5, [r7, #8]
 8002a66:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002a6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002a6e:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002a72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a76:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a7e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a86:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002a8a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a8e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002a92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a96:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a9e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8002aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aa4:	461d      	mov	r5, r3
 8002aa6:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ab6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aba:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002abe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ac0:	377c      	adds	r7, #124	@ 0x7c
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bcb0      	pop	{r4, r5, r7}
 8002ac6:	4770      	bx	lr

08002ac8 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6178      	str	r0, [r7, #20]
 8002ad0:	ed87 0a04 	vstr	s0, [r7, #16]
 8002ad4:	edc7 0a03 	vstr	s1, [r7, #12]
 8002ad8:	ed87 1a02 	vstr	s2, [r7, #8]
 8002adc:	edc7 1a01 	vstr	s3, [r7, #4]
 8002ae0:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002ae4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8002af4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b00:	db02      	blt.n	8002b08 <InitTrajectorySegment+0x40>
 8002b02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002b06:	e000      	b.n	8002b0a <InitTrajectorySegment+0x42>
 8002b08:	4b49      	ldr	r3, [pc, #292]	@ (8002c30 <InitTrajectorySegment+0x168>)
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8002b0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002b10:	eef0 7ae7 	vabs.f32	s15, s15
 8002b14:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8002b18:	edd7 6a02 	vldr	s13, [r7, #8]
 8002b1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b24:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8002b28:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b34:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b44:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8002b48:	edd7 7a08 	vldr	s15, [r7, #32]
 8002b4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b50:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5c:	d524      	bpl.n	8002ba8 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8002b5e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b6a:	eeb0 0a66 	vmov.f32	s0, s13
 8002b6e:	f00c fb21 	bl	800f1b4 <sqrtf>
 8002b72:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8002b7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002b8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b90:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	edc3 7a02 	vstr	s15, [r3, #8]
 8002ba6:	e027      	b.n	8002bf8 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002ba8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002bb0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bc0:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8002bce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002bd2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8002be6:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8002c04:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1a:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c20:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	621a      	str	r2, [r3, #32]
}
 8002c28:	bf00      	nop
 8002c2a:	3730      	adds	r7, #48	@ 0x30
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	bf800000 	.word	0xbf800000

08002c34 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8002c34:	b480      	push	{r7}
 8002c36:	b08f      	sub	sp, #60	@ 0x3c
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	edd3 7a08 	vldr	s15, [r3, #32]
 8002c46:	ed97 7a00 	vldr	s14, [r7]
 8002c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c4e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8002c52:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	d503      	bpl.n	8002c68 <GetTrajectoryPosition+0x34>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	edd3 7a00 	vldr	s15, [r3]
 8002c66:	e0b4      	b.n	8002dd2 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c6e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7a:	db03      	blt.n	8002c84 <GetTrajectoryPosition+0x50>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c82:	e0a6      	b.n	8002dd2 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 7a04 	vldr	s15, [r3, #16]
 8002c9c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002ca0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca8:	d512      	bpl.n	8002cd0 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8002caa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002cae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cb6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cbe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cce:	e080      	b.n	8002dd2 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	ed93 7a04 	vldr	s14, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	d525      	bpl.n	8002d3a <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8002cf4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002cf8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002cfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d00:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d08:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d10:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d18:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8002d1c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d28:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d30:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d38:	e04b      	b.n	8002dd2 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8002d46:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002d4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d52:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d5a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d62:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8002d6e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002d72:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d82:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8002d86:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002d8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d92:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9a:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 8002d9e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002da2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002daa:	edd7 7a06 	vldr	s15, [r7, #24]
 8002dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002db6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002dba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dbe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002dc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dce:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8002dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd6:	373c      	adds	r7, #60	@ 0x3c
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	edd3 7a08 	vldr	s15, [r3, #32]
 8002df2:	ed97 7a00 	vldr	s14, [r7]
 8002df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfa:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8002dfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0a:	d502      	bpl.n	8002e12 <GetTrajectoryVelocity+0x32>
 8002e0c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8002ebc <GetTrajectoryVelocity+0xdc>
 8002e10:	e04d      	b.n	8002eae <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	edd3 7a07 	vldr	s15, [r3, #28]
 8002e18:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	db02      	blt.n	8002e2c <GetTrajectoryVelocity+0x4c>
 8002e26:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002ebc <GetTrajectoryVelocity+0xdc>
 8002e2a:	e040      	b.n	8002eae <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d506      	bpl.n	8002e5a <GetTrajectoryVelocity+0x7a>
        return a * t;
 8002e4c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e50:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e58:	e029      	b.n	8002eae <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e76:	d502      	bpl.n	8002e7e <GetTrajectoryVelocity+0x9e>
        return v;
 8002e78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e7c:	e017      	b.n	8002eae <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e84:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e96:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 8002e9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8002eae:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08c      	sub	sp, #48	@ 0x30
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002ed2:	1d3b      	adds	r3, r7, #4
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f00c f863 	bl	800efa4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002ede:	4b32      	ldr	r3, [pc, #200]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002ee0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002ee4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ee6:	4b30      	ldr	r3, [pc, #192]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002ee8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002eec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002eee:	4b2e      	ldr	r3, [pc, #184]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002efa:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f00:	4b29      	ldr	r3, [pc, #164]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f06:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f08:	2204      	movs	r2, #4
 8002f0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002f0c:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f12:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002f18:	4b23      	ldr	r3, [pc, #140]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f1e:	4b22      	ldr	r3, [pc, #136]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f26:	4b20      	ldr	r3, [pc, #128]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f32:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002f40:	4b19      	ldr	r3, [pc, #100]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f48:	4817      	ldr	r0, [pc, #92]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f4a:	f003 f9dd 	bl	8006308 <HAL_ADC_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002f54:	f001 ffe6 	bl	8004f24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f60:	4619      	mov	r1, r3
 8002f62:	4811      	ldr	r0, [pc, #68]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f64:	f004 f97a 	bl	800725c <HAL_ADCEx_MultiModeConfigChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002f6e:	f001 ffd9 	bl	8004f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f72:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <MX_ADC1_Init+0xec>)
 8002f74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f76:	2306      	movs	r3, #6
 8002f78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002f7e:	237f      	movs	r3, #127	@ 0x7f
 8002f80:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002f82:	2304      	movs	r3, #4
 8002f84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f8a:	1d3b      	adds	r3, r7, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4806      	ldr	r0, [pc, #24]	@ (8002fa8 <MX_ADC1_Init+0xe8>)
 8002f90:	f003 fc68 	bl	8006864 <HAL_ADC_ConfigChannel>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002f9a:	f001 ffc3 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	3730      	adds	r7, #48	@ 0x30
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000290 	.word	0x20000290
 8002fac:	04300002 	.word	0x04300002

08002fb0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fb6:	463b      	mov	r3, r7
 8002fb8:	2220      	movs	r2, #32
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f00b fff1 	bl	800efa4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	@ (8003074 <MX_ADC2_Init+0xc4>)
 8002fc6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fc8:	4b29      	ldr	r3, [pc, #164]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002fca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002fce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002fd0:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fd6:	4b26      	ldr	r3, [pc, #152]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002fdc:	4b24      	ldr	r3, [pc, #144]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002fe2:	4b23      	ldr	r3, [pc, #140]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fe8:	4b21      	ldr	r3, [pc, #132]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002fea:	2204      	movs	r2, #4
 8002fec:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002fee:	4b20      	ldr	r3, [pc, #128]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003000:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003008:	4b19      	ldr	r3, [pc, #100]	@ (8003070 <MX_ADC2_Init+0xc0>)
 800300a:	2200      	movs	r2, #0
 800300c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800300e:	4b18      	ldr	r3, [pc, #96]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003014:	4b16      	ldr	r3, [pc, #88]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800301c:	4b14      	ldr	r3, [pc, #80]	@ (8003070 <MX_ADC2_Init+0xc0>)
 800301e:	2200      	movs	r2, #0
 8003020:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003022:	4b13      	ldr	r3, [pc, #76]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800302a:	4811      	ldr	r0, [pc, #68]	@ (8003070 <MX_ADC2_Init+0xc0>)
 800302c:	f003 f96c 	bl	8006308 <HAL_ADC_Init>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8003036:	f001 ff75 	bl	8004f24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800303a:	4b0f      	ldr	r3, [pc, #60]	@ (8003078 <MX_ADC2_Init+0xc8>)
 800303c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800303e:	2306      	movs	r3, #6
 8003040:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003046:	237f      	movs	r3, #127	@ 0x7f
 8003048:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800304a:	2304      	movs	r3, #4
 800304c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003052:	463b      	mov	r3, r7
 8003054:	4619      	mov	r1, r3
 8003056:	4806      	ldr	r0, [pc, #24]	@ (8003070 <MX_ADC2_Init+0xc0>)
 8003058:	f003 fc04 	bl	8006864 <HAL_ADC_ConfigChannel>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8003062:	f001 ff5f 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	3720      	adds	r7, #32
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	200002fc 	.word	0x200002fc
 8003074:	50000100 	.word	0x50000100
 8003078:	08600004 	.word	0x08600004

0800307c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b0a0      	sub	sp, #128	@ 0x80
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003084:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	605a      	str	r2, [r3, #4]
 800308e:	609a      	str	r2, [r3, #8]
 8003090:	60da      	str	r2, [r3, #12]
 8003092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	2254      	movs	r2, #84	@ 0x54
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f00b ff81 	bl	800efa4 <memset>
  if(adcHandle->Instance==ADC1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030aa:	d13e      	bne.n	800312a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80030ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80030b2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80030b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030b8:	f107 0318 	add.w	r3, r7, #24
 80030bc:	4618      	mov	r0, r3
 80030be:	f005 fdcf 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80030c8:	f001 ff2c 	bl	8004f24 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80030cc:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <HAL_ADC_MspInit+0x13c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	4a39      	ldr	r2, [pc, #228]	@ (80031b8 <HAL_ADC_MspInit+0x13c>)
 80030d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80030d6:	4b38      	ldr	r3, [pc, #224]	@ (80031b8 <HAL_ADC_MspInit+0x13c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d10b      	bne.n	80030f6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80030de:	4b37      	ldr	r3, [pc, #220]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030e2:	4a36      	ldr	r2, [pc, #216]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 80030e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030ea:	4b34      	ldr	r3, [pc, #208]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 80030ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 80030f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030fa:	4a30      	ldr	r2, [pc, #192]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003102:	4b2e      	ldr	r3, [pc, #184]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 800310e:	2303      	movs	r3, #3
 8003110:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003112:	2303      	movs	r3, #3
 8003114:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800311e:	4619      	mov	r1, r3
 8003120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003124:	f004 fdf0 	bl	8007d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003128:	e042      	b.n	80031b0 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a24      	ldr	r2, [pc, #144]	@ (80031c0 <HAL_ADC_MspInit+0x144>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d13d      	bne.n	80031b0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003138:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800313a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800313e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003140:	f107 0318 	add.w	r3, r7, #24
 8003144:	4618      	mov	r0, r3
 8003146:	f005 fd8b 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8003150:	f001 fee8 	bl	8004f24 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003154:	4b18      	ldr	r3, [pc, #96]	@ (80031b8 <HAL_ADC_MspInit+0x13c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <HAL_ADC_MspInit+0x13c>)
 800315c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800315e:	4b16      	ldr	r3, [pc, #88]	@ (80031b8 <HAL_ADC_MspInit+0x13c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d10b      	bne.n	800317e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003166:	4b15      	ldr	r3, [pc, #84]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 8003168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316a:	4a14      	ldr	r2, [pc, #80]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 800316c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003170:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003172:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 8003174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317e:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	4a0e      	ldr	r2, [pc, #56]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800318a:	4b0c      	ldr	r3, [pc, #48]	@ (80031bc <HAL_ADC_MspInit+0x140>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8003196:	2302      	movs	r3, #2
 8003198:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800319a:	2303      	movs	r3, #3
 800319c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 80031a2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031ac:	f004 fdac 	bl	8007d08 <HAL_GPIO_Init>
}
 80031b0:	bf00      	nop
 80031b2:	3780      	adds	r7, #128	@ 0x80
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000368 	.word	0x20000368
 80031bc:	40021000 	.word	0x40021000
 80031c0:	50000100 	.word	0x50000100

080031c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80031ca:	4b12      	ldr	r3, [pc, #72]	@ (8003214 <MX_DMA_Init+0x50>)
 80031cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ce:	4a11      	ldr	r2, [pc, #68]	@ (8003214 <MX_DMA_Init+0x50>)
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	6493      	str	r3, [r2, #72]	@ 0x48
 80031d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003214 <MX_DMA_Init+0x50>)
 80031d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031da:	f003 0304 	and.w	r3, r3, #4
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <MX_DMA_Init+0x50>)
 80031e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003214 <MX_DMA_Init+0x50>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80031ee:	4b09      	ldr	r3, [pc, #36]	@ (8003214 <MX_DMA_Init+0x50>)
 80031f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80031fa:	2200      	movs	r2, #0
 80031fc:	2100      	movs	r1, #0
 80031fe:	200b      	movs	r0, #11
 8003200:	f004 fa0f 	bl	8007622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003204:	200b      	movs	r0, #11
 8003206:	f004 fa26 	bl	8007656 <HAL_NVIC_EnableIRQ>

}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000

08003218 <emergency_switch_init>:

void emergency_switch_init(emergency_switch_t *filter,
                          float sample_rate_hz,
                          float cutoff_hz,
                          uint32_t debounce_ms)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	ed87 0a02 	vstr	s0, [r7, #8]
 8003224:	edc7 0a01 	vstr	s1, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
    if (filter == NULL || sample_rate_hz <= 0.0f || cutoff_hz <= 0.0f) {
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d040      	beq.n	80032b2 <emergency_switch_init+0x9a>
 8003230:	edd7 7a02 	vldr	s15, [r7, #8]
 8003234:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d939      	bls.n	80032b2 <emergency_switch_init+0x9a>
 800323e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	d932      	bls.n	80032b2 <emergency_switch_init+0x9a>
        return;
    }

    /* Calculate low-pass filter coefficient */
    filter->alpha = calculate_filter_coefficient(sample_rate_hz, cutoff_hz);
 800324c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003250:	ed97 0a02 	vldr	s0, [r7, #8]
 8003254:	f000 f8d8 	bl	8003408 <calculate_filter_coefficient>
 8003258:	eef0 7a40 	vmov.f32	s15, s0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	edc3 7a00 	vstr	s15, [r3]

    /* Initialize state */
    filter->filtered_value = 0.0f;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
    filter->stable_state = 0;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	721a      	strb	r2, [r3, #8]
    filter->debounce_count = 0;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]

    /* Calculate debounce limit in samples */
    filter->debounce_limit = (uint32_t)((debounce_ms * sample_rate_hz) / 1000.0f);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	ee07 3a90 	vmov	s15, r3
 800327c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003280:	edd7 7a02 	vldr	s15, [r7, #8]
 8003284:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003288:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80032bc <emergency_switch_init+0xa4>
 800328c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003294:	ee17 2a90 	vmov	r2, s15
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	611a      	str	r2, [r3, #16]
    if (filter->debounce_limit < 5) {
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d802      	bhi.n	80032aa <emergency_switch_init+0x92>
        filter->debounce_limit = 5;  /* Minimum 5 samples */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2205      	movs	r2, #5
 80032a8:	611a      	str	r2, [r3, #16]
    }

    filter->initialized = 1;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	751a      	strb	r2, [r3, #20]
 80032b0:	e000      	b.n	80032b4 <emergency_switch_init+0x9c>
        return;
 80032b2:	bf00      	nop
}
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	447a0000 	.word	0x447a0000

080032c0 <emergency_switch_update>:

uint8_t emergency_switch_update(emergency_switch_t *filter, uint8_t raw_switch_state)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
    if (filter == NULL || !filter->initialized) {
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <emergency_switch_update+0x1a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	7d1b      	ldrb	r3, [r3, #20]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <emergency_switch_update+0x1e>
        return 0;
 80032da:	2300      	movs	r3, #0
 80032dc:	e06f      	b.n	80033be <emergency_switch_update+0xfe>
    }

    /* Convert binary input to float */
    float raw_signal = (raw_switch_state > 0) ? 1.0f : 0.0f;
 80032de:	78fb      	ldrb	r3, [r7, #3]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <emergency_switch_update+0x2a>
 80032e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032e8:	e001      	b.n	80032ee <emergency_switch_update+0x2e>
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	60bb      	str	r3, [r7, #8]

    /* Apply low-pass filter (RC filter equation) */
    filter->filtered_value = filter->alpha * raw_signal +
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	ed93 7a00 	vldr	s14, [r3]
 80032f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032fa:	ee27 7a27 	vmul.f32	s14, s14, s15
                             (1.0f - filter->alpha) * filter->filtered_value;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003308:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003312:	ee66 7aa7 	vmul.f32	s15, s13, s15
    filter->filtered_value = filter->alpha * raw_signal +
 8003316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	edc3 7a01 	vstr	s15, [r3, #4]

    /* Clamp filtered value to valid range */
    filter->filtered_value = clamp_float(filter->filtered_value, 0.0f, 1.0f);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	edd3 7a01 	vldr	s15, [r3, #4]
 8003326:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800332a:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80033c8 <emergency_switch_update+0x108>
 800332e:	eeb0 0a67 	vmov.f32	s0, s15
 8003332:	f000 f8b5 	bl	80034a0 <clamp_float>
 8003336:	eef0 7a40 	vmov.f32	s15, s0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	edc3 7a01 	vstr	s15, [r3, #4]

    /* Determine desired state using hysteresis */
    uint8_t desired_state;
    if (filter->stable_state == 0) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	7a1b      	ldrb	r3, [r3, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10e      	bne.n	8003366 <emergency_switch_update+0xa6>
        /* Currently OFF - need strong signal to turn ON */
        desired_state = (filter->filtered_value > EMERGENCY_ON_THRESHOLD) ? 1 : 0;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	edd3 7a01 	vldr	s15, [r3, #4]
 800334e:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80033cc <emergency_switch_update+0x10c>
 8003352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	bfcc      	ite	gt
 800335c:	2301      	movgt	r3, #1
 800335e:	2300      	movle	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e00d      	b.n	8003382 <emergency_switch_update+0xc2>
    } else {
        /* Currently ON - need weak signal to turn OFF */
        desired_state = (filter->filtered_value > EMERGENCY_OFF_THRESHOLD) ? 1 : 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	edd3 7a01 	vldr	s15, [r3, #4]
 800336c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80033d0 <emergency_switch_update+0x110>
 8003370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	bfcc      	ite	gt
 800337a:	2301      	movgt	r3, #1
 800337c:	2300      	movle	r3, #0
 800337e:	b2db      	uxtb	r3, r3
 8003380:	73fb      	strb	r3, [r7, #15]
    }

    /* Debouncing logic */
    if (desired_state == filter->stable_state) {
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7a1b      	ldrb	r3, [r3, #8]
 8003386:	7bfa      	ldrb	r2, [r7, #15]
 8003388:	429a      	cmp	r2, r3
 800338a:	d104      	bne.n	8003396 <emergency_switch_update+0xd6>
        /* State is stable - reset counter */
        filter->debounce_count = 0;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
        return 0;  /* No state change */
 8003392:	2300      	movs	r3, #0
 8003394:	e013      	b.n	80033be <emergency_switch_update+0xfe>
    } else {
        /* State wants to change - count debounce samples */
        filter->debounce_count++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]

        if (filter->debounce_count >= filter->debounce_limit) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d307      	bcc.n	80033bc <emergency_switch_update+0xfc>
            /* Debounce time elapsed - confirm state change */
            filter->stable_state = desired_state;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	721a      	strb	r2, [r3, #8]
            filter->debounce_count = 0;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	60da      	str	r2, [r3, #12]
            return 1;  /* State changed */
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <emergency_switch_update+0xfe>
        }

        return 0;  /* Still debouncing */
 80033bc:	2300      	movs	r3, #0
    }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	00000000 	.word	0x00000000
 80033cc:	3f333333 	.word	0x3f333333
 80033d0:	3e99999a 	.word	0x3e99999a

080033d4 <emergency_switch_is_pressed>:
    }
    return filter->stable_state;
}

bool emergency_switch_is_pressed(const emergency_switch_t *filter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
    if (filter == NULL || !filter->initialized) {
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <emergency_switch_is_pressed+0x16>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	7d1b      	ldrb	r3, [r3, #20]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <emergency_switch_is_pressed+0x1a>
        return false;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e006      	b.n	80033fc <emergency_switch_is_pressed+0x28>
    }
    return (filter->stable_state == 1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7a1b      	ldrb	r3, [r3, #8]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <calculate_filter_coefficient>:
}

/* Private Functions */

static float calculate_filter_coefficient(float sample_rate_hz, float cutoff_hz)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003412:	edc7 0a00 	vstr	s1, [r7]
    /* Calculate RC low-pass filter coefficient */
    /* alpha = dt / (tau + dt), where tau = 1/(2*pi*fc) */

    float tau = 1.0f / (2.0f * M_PI * cutoff_hz);
 8003416:	6838      	ldr	r0, [r7, #0]
 8003418:	f7fd f862 	bl	80004e0 <__aeabi_f2d>
 800341c:	a31e      	add	r3, pc, #120	@ (adr r3, 8003498 <calculate_filter_coefficient+0x90>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fd f8b5 	bl	8000590 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	f04f 0000 	mov.w	r0, #0
 800342e:	4918      	ldr	r1, [pc, #96]	@ (8003490 <calculate_filter_coefficient+0x88>)
 8003430:	f7fd f9d8 	bl	80007e4 <__aeabi_ddiv>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fd fb78 	bl	8000b30 <__aeabi_d2f>
 8003440:	4603      	mov	r3, r0
 8003442:	617b      	str	r3, [r7, #20]
    float dt = 1.0f / sample_rate_hz;
 8003444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003448:	ed97 7a01 	vldr	s14, [r7, #4]
 800344c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003450:	edc7 7a04 	vstr	s15, [r7, #16]
    float alpha = dt / (tau + dt);
 8003454:	ed97 7a05 	vldr	s14, [r7, #20]
 8003458:	edd7 7a04 	vldr	s15, [r7, #16]
 800345c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003460:	edd7 6a04 	vldr	s13, [r7, #16]
 8003464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003468:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Clamp to reasonable range */
    return clamp_float(alpha, 0.001f, 0.5f);
 800346c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003470:	eddf 0a08 	vldr	s1, [pc, #32]	@ 8003494 <calculate_filter_coefficient+0x8c>
 8003474:	ed97 0a03 	vldr	s0, [r7, #12]
 8003478:	f000 f812 	bl	80034a0 <clamp_float>
 800347c:	eef0 7a40 	vmov.f32	s15, s0
}
 8003480:	eeb0 0a67 	vmov.f32	s0, s15
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	f3af 8000 	nop.w
 8003490:	3ff00000 	.word	0x3ff00000
 8003494:	3a83126f 	.word	0x3a83126f
 8003498:	54442d18 	.word	0x54442d18
 800349c:	401921fb 	.word	0x401921fb

080034a0 <clamp_float>:

static float clamp_float(float value, float min_val, float max_val)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80034aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80034ae:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_val) return min_val;
 80034b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80034b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c2:	d501      	bpl.n	80034c8 <clamp_float+0x28>
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	e00b      	b.n	80034e0 <clamp_float+0x40>
    if (value > max_val) return max_val;
 80034c8:	ed97 7a03 	vldr	s14, [r7, #12]
 80034cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80034d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d8:	dd01      	ble.n	80034de <clamp_float+0x3e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	e000      	b.n	80034e0 <clamp_float+0x40>
    return value;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	ee07 3a90 	vmov	s15, r3
 80034e4:	eeb0 0a67 	vmov.f32	s0, s15
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b08a      	sub	sp, #40	@ 0x28
 80034f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fa:	f107 0314 	add.w	r3, r7, #20
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800350a:	4b54      	ldr	r3, [pc, #336]	@ (800365c <MX_GPIO_Init+0x168>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	4a53      	ldr	r2, [pc, #332]	@ (800365c <MX_GPIO_Init+0x168>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003516:	4b51      	ldr	r3, [pc, #324]	@ (800365c <MX_GPIO_Init+0x168>)
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	613b      	str	r3, [r7, #16]
 8003520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003522:	4b4e      	ldr	r3, [pc, #312]	@ (800365c <MX_GPIO_Init+0x168>)
 8003524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003526:	4a4d      	ldr	r2, [pc, #308]	@ (800365c <MX_GPIO_Init+0x168>)
 8003528:	f043 0320 	orr.w	r3, r3, #32
 800352c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800352e:	4b4b      	ldr	r3, [pc, #300]	@ (800365c <MX_GPIO_Init+0x168>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800353a:	4b48      	ldr	r3, [pc, #288]	@ (800365c <MX_GPIO_Init+0x168>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	4a47      	ldr	r2, [pc, #284]	@ (800365c <MX_GPIO_Init+0x168>)
 8003540:	f043 0301 	orr.w	r3, r3, #1
 8003544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003546:	4b45      	ldr	r3, [pc, #276]	@ (800365c <MX_GPIO_Init+0x168>)
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003552:	4b42      	ldr	r3, [pc, #264]	@ (800365c <MX_GPIO_Init+0x168>)
 8003554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003556:	4a41      	ldr	r2, [pc, #260]	@ (800365c <MX_GPIO_Init+0x168>)
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800355e:	4b3f      	ldr	r3, [pc, #252]	@ (800365c <MX_GPIO_Init+0x168>)
 8003560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 800356a:	2200      	movs	r2, #0
 800356c:	2102      	movs	r1, #2
 800356e:	483c      	ldr	r0, [pc, #240]	@ (8003660 <MX_GPIO_Init+0x16c>)
 8003570:	f004 fd64 	bl	800803c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8003574:	2200      	movs	r2, #0
 8003576:	2140      	movs	r1, #64	@ 0x40
 8003578:	483a      	ldr	r0, [pc, #232]	@ (8003664 <MX_GPIO_Init+0x170>)
 800357a:	f004 fd5f 	bl	800803c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 800357e:	2201      	movs	r2, #1
 8003580:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003584:	4837      	ldr	r0, [pc, #220]	@ (8003664 <MX_GPIO_Init+0x170>)
 8003586:	f004 fd59 	bl	800803c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 800358a:	2302      	movs	r3, #2
 800358c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800358e:	2301      	movs	r3, #1
 8003590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003596:	2300      	movs	r3, #0
 8003598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	4619      	mov	r1, r3
 80035a0:	482f      	ldr	r0, [pc, #188]	@ (8003660 <MX_GPIO_Init+0x16c>)
 80035a2:	f004 fbb1 	bl	8007d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80035a6:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 80035aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80035ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80035b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b2:	2300      	movs	r3, #0
 80035b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b6:	f107 0314 	add.w	r3, r7, #20
 80035ba:	4619      	mov	r1, r3
 80035bc:	4828      	ldr	r0, [pc, #160]	@ (8003660 <MX_GPIO_Init+0x16c>)
 80035be:	f004 fba3 	bl	8007d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Left_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin|Limit_Switch_Prismatic2_Pin;
 80035c2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80035c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80035c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80035cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	4821      	ldr	r0, [pc, #132]	@ (8003660 <MX_GPIO_Init+0x16c>)
 80035da:	f004 fb95 	bl	8007d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 80035de:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80035e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035e4:	2301      	movs	r3, #1
 80035e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035f0:	f107 0314 	add.w	r3, r7, #20
 80035f4:	4619      	mov	r1, r3
 80035f6:	481b      	ldr	r0, [pc, #108]	@ (8003664 <MX_GPIO_Init+0x170>)
 80035f8:	f004 fb86 	bl	8007d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80035fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	4814      	ldr	r0, [pc, #80]	@ (8003664 <MX_GPIO_Init+0x170>)
 8003612:	f004 fb79 	bl	8007d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8003616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800361a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800361c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	4619      	mov	r1, r3
 800362c:	480d      	ldr	r0, [pc, #52]	@ (8003664 <MX_GPIO_Init+0x170>)
 800362e:	f004 fb6b 	bl	8007d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003632:	2200      	movs	r2, #0
 8003634:	2100      	movs	r1, #0
 8003636:	2017      	movs	r0, #23
 8003638:	f003 fff3 	bl	8007622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800363c:	2017      	movs	r0, #23
 800363e:	f004 f80a 	bl	8007656 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	2100      	movs	r1, #0
 8003646:	2028      	movs	r0, #40	@ 0x28
 8003648:	f003 ffeb 	bl	8007622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800364c:	2028      	movs	r0, #40	@ 0x28
 800364e:	f004 f802 	bl	8007656 <HAL_NVIC_EnableIRQ>

}
 8003652:	bf00      	nop
 8003654:	3728      	adds	r7, #40	@ 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40021000 	.word	0x40021000
 8003660:	48000400 	.word	0x48000400
 8003664:	48000800 	.word	0x48000800

08003668 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800366c:	f3bf 8f4f 	dsb	sy
}
 8003670:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003672:	4b06      	ldr	r3, [pc, #24]	@ (800368c <__NVIC_SystemReset+0x24>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800367a:	4904      	ldr	r1, [pc, #16]	@ (800368c <__NVIC_SystemReset+0x24>)
 800367c:	4b04      	ldr	r3, [pc, #16]	@ (8003690 <__NVIC_SystemReset+0x28>)
 800367e:	4313      	orrs	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003682:	f3bf 8f4f 	dsb	sy
}
 8003686:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003688:	bf00      	nop
 800368a:	e7fd      	b.n	8003688 <__NVIC_SystemReset+0x20>
 800368c:	e000ed00 	.word	0xe000ed00
 8003690:	05fa0004 	.word	0x05fa0004
 8003694:	00000000 	.word	0x00000000

08003698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800369c:	ed2d 8b04 	vpush	{d8-d9}
 80036a0:	b09a      	sub	sp, #104	@ 0x68
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036a4:	f002 fbb3 	bl	8005e0e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036a8:	f001 f8a8 	bl	80047fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036ac:	f7ff ff22 	bl	80034f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80036b0:	f7ff fd88 	bl	80031c4 <MX_DMA_Init>
  MX_TIM3_Init();
 80036b4:	f001 fe42 	bl	800533c <MX_TIM3_Init>
  MX_ADC1_Init();
 80036b8:	f7ff fc02 	bl	8002ec0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80036bc:	f001 fd9c 	bl	80051f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80036c0:	f001 fdee 	bl	80052a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80036c4:	f001 fe90 	bl	80053e8 <MX_TIM4_Init>
  MX_TIM20_Init();
 80036c8:	f002 f84a 	bl	8005760 <MX_TIM20_Init>
  MX_TIM8_Init();
 80036cc:	f001 ff18 	bl	8005500 <MX_TIM8_Init>
  MX_TIM16_Init();
 80036d0:	f001 ffc6 	bl	8005660 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80036d4:	f002 fa98 	bl	8005c08 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80036d8:	f7ff fc6a 	bl	8002fb0 <MX_ADC2_Init>
  MX_SPI1_Init();
 80036dc:	f001 fc28 	bl	8004f30 <MX_SPI1_Init>
  MX_TIM6_Init();
 80036e0:	f001 fed8 	bl	8005494 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80036e4:	48a3      	ldr	r0, [pc, #652]	@ (8003974 <main+0x2dc>)
 80036e6:	f006 f99b 	bl	8009a20 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80036ea:	48a3      	ldr	r0, [pc, #652]	@ (8003978 <main+0x2e0>)
 80036ec:	f006 f998 	bl	8009a20 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80036f0:	210c      	movs	r1, #12
 80036f2:	48a1      	ldr	r0, [pc, #644]	@ (8003978 <main+0x2e0>)
 80036f4:	f006 fb58 	bl	8009da8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80036f8:	2100      	movs	r1, #0
 80036fa:	489e      	ldr	r0, [pc, #632]	@ (8003974 <main+0x2dc>)
 80036fc:	f006 fb54 	bl	8009da8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 8003700:	2108      	movs	r1, #8
 8003702:	489c      	ldr	r0, [pc, #624]	@ (8003974 <main+0x2dc>)
 8003704:	f006 fb50 	bl	8009da8 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8003708:	499c      	ldr	r1, [pc, #624]	@ (800397c <main+0x2e4>)
 800370a:	489d      	ldr	r0, [pc, #628]	@ (8003980 <main+0x2e8>)
 800370c:	f7fe f932 	bl	8001974 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8003710:	499c      	ldr	r1, [pc, #624]	@ (8003984 <main+0x2ec>)
 8003712:	489d      	ldr	r0, [pc, #628]	@ (8003988 <main+0x2f0>)
 8003714:	f7fe f92e 	bl	8001974 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8003718:	489c      	ldr	r0, [pc, #624]	@ (800398c <main+0x2f4>)
 800371a:	f002 ffb1 	bl	8006680 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800371e:	489c      	ldr	r0, [pc, #624]	@ (8003990 <main+0x2f8>)
 8003720:	f006 f9ee 	bl	8009b00 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8003724:	489b      	ldr	r0, [pc, #620]	@ (8003994 <main+0x2fc>)
 8003726:	f006 f9eb 	bl	8009b00 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003736:	213c      	movs	r1, #60	@ 0x3c
 8003738:	4892      	ldr	r0, [pc, #584]	@ (8003984 <main+0x2ec>)
 800373a:	f006 fdf1 	bl	800a320 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800373e:	213c      	movs	r1, #60	@ 0x3c
 8003740:	488e      	ldr	r0, [pc, #568]	@ (800397c <main+0x2e4>)
 8003742:	f006 fded 	bl	800a320 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8003746:	4b94      	ldr	r3, [pc, #592]	@ (8003998 <main+0x300>)
 8003748:	4a94      	ldr	r2, [pc, #592]	@ (800399c <main+0x304>)
 800374a:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800374c:	4b92      	ldr	r3, [pc, #584]	@ (8003998 <main+0x300>)
 800374e:	4a94      	ldr	r2, [pc, #592]	@ (80039a0 <main+0x308>)
 8003750:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8003752:	4b91      	ldr	r3, [pc, #580]	@ (8003998 <main+0x300>)
 8003754:	2215      	movs	r2, #21
 8003756:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8003758:	4b8f      	ldr	r3, [pc, #572]	@ (8003998 <main+0x300>)
 800375a:	22c8      	movs	r2, #200	@ 0xc8
 800375c:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800375e:	4991      	ldr	r1, [pc, #580]	@ (80039a4 <main+0x30c>)
 8003760:	488d      	ldr	r0, [pc, #564]	@ (8003998 <main+0x300>)
 8003762:	f7fe fe2d 	bl	80023c0 <Modbus_init>

	Kalman_Init(&kf_pris);
 8003766:	4890      	ldr	r0, [pc, #576]	@ (80039a8 <main+0x310>)
 8003768:	f7fe fb78 	bl	8001e5c <Kalman_Init>

	kf_pris.A_data[0] = 1;
 800376c:	4b8e      	ldr	r3, [pc, #568]	@ (80039a8 <main+0x310>)
 800376e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003772:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8003774:	4b8c      	ldr	r3, [pc, #560]	@ (80039a8 <main+0x310>)
 8003776:	4a8d      	ldr	r2, [pc, #564]	@ (80039ac <main+0x314>)
 8003778:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 800377a:	4b8b      	ldr	r3, [pc, #556]	@ (80039a8 <main+0x310>)
 800377c:	4a8c      	ldr	r2, [pc, #560]	@ (80039b0 <main+0x318>)
 800377e:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 8003780:	4b89      	ldr	r3, [pc, #548]	@ (80039a8 <main+0x310>)
 8003782:	4a8c      	ldr	r2, [pc, #560]	@ (80039b4 <main+0x31c>)
 8003784:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8003786:	4b88      	ldr	r3, [pc, #544]	@ (80039a8 <main+0x310>)
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 8003790:	4b85      	ldr	r3, [pc, #532]	@ (80039a8 <main+0x310>)
 8003792:	4a89      	ldr	r2, [pc, #548]	@ (80039b8 <main+0x320>)
 8003794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 8003798:	4b83      	ldr	r3, [pc, #524]	@ (80039a8 <main+0x310>)
 800379a:	4a88      	ldr	r2, [pc, #544]	@ (80039bc <main+0x324>)
 800379c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 80037a0:	4b81      	ldr	r3, [pc, #516]	@ (80039a8 <main+0x310>)
 80037a2:	4a87      	ldr	r2, [pc, #540]	@ (80039c0 <main+0x328>)
 80037a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 80037a8:	4b7f      	ldr	r3, [pc, #508]	@ (80039a8 <main+0x310>)
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 80037b2:	4b7d      	ldr	r3, [pc, #500]	@ (80039a8 <main+0x310>)
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 80037bc:	4b7a      	ldr	r3, [pc, #488]	@ (80039a8 <main+0x310>)
 80037be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80037c2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80037c6:	4b78      	ldr	r3, [pc, #480]	@ (80039a8 <main+0x310>)
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80037d0:	4b75      	ldr	r3, [pc, #468]	@ (80039a8 <main+0x310>)
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 80037da:	4b73      	ldr	r3, [pc, #460]	@ (80039a8 <main+0x310>)
 80037dc:	4a79      	ldr	r2, [pc, #484]	@ (80039c4 <main+0x32c>)
 80037de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 80037e2:	4b71      	ldr	r3, [pc, #452]	@ (80039a8 <main+0x310>)
 80037e4:	4a78      	ldr	r2, [pc, #480]	@ (80039c8 <main+0x330>)
 80037e6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 80037ea:	4b6f      	ldr	r3, [pc, #444]	@ (80039a8 <main+0x310>)
 80037ec:	4a77      	ldr	r2, [pc, #476]	@ (80039cc <main+0x334>)
 80037ee:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 80037f2:	4b6d      	ldr	r3, [pc, #436]	@ (80039a8 <main+0x310>)
 80037f4:	4a76      	ldr	r2, [pc, #472]	@ (80039d0 <main+0x338>)
 80037f6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 80037fa:	4b6b      	ldr	r3, [pc, #428]	@ (80039a8 <main+0x310>)
 80037fc:	4a75      	ldr	r2, [pc, #468]	@ (80039d4 <main+0x33c>)
 80037fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8003802:	4b69      	ldr	r3, [pc, #420]	@ (80039a8 <main+0x310>)
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 800380c:	4b66      	ldr	r3, [pc, #408]	@ (80039a8 <main+0x310>)
 800380e:	4a72      	ldr	r2, [pc, #456]	@ (80039d8 <main+0x340>)
 8003810:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8003814:	2300      	movs	r3, #0
 8003816:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003818:	e01d      	b.n	8003856 <main+0x1be>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800381a:	2300      	movs	r3, #0
 800381c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800381e:	e014      	b.n	800384a <main+0x1b2>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8003820:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003822:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003824:	429a      	cmp	r2, r3
 8003826:	d102      	bne.n	800382e <main+0x196>
 8003828:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800382c:	e001      	b.n	8003832 <main+0x19a>
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003834:	0099      	lsls	r1, r3, #2
 8003836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003838:	440b      	add	r3, r1
 800383a:	495b      	ldr	r1, [pc, #364]	@ (80039a8 <main+0x310>)
 800383c:	333c      	adds	r3, #60	@ 0x3c
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8003844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003846:	3301      	adds	r3, #1
 8003848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800384a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800384c:	2b03      	cmp	r3, #3
 800384e:	dde7      	ble.n	8003820 <main+0x188>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8003850:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003852:	3301      	adds	r3, #1
 8003854:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003856:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003858:	2b03      	cmp	r3, #3
 800385a:	ddde      	ble.n	800381a <main+0x182>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 800385c:	4b52      	ldr	r3, [pc, #328]	@ (80039a8 <main+0x310>)
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 8003866:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <main+0x310>)
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8003870:	4b4d      	ldr	r3, [pc, #308]	@ (80039a8 <main+0x310>)
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 800387a:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <main+0x310>)
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 8003884:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 80039dc <main+0x344>
 8003888:	4847      	ldr	r0, [pc, #284]	@ (80039a8 <main+0x310>)
 800388a:	f7fe fbb9 	bl	8002000 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 800388e:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 80039e0 <main+0x348>
 8003892:	4845      	ldr	r0, [pc, #276]	@ (80039a8 <main+0x310>)
 8003894:	f7fe fb84 	bl	8001fa0 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 8003898:	4852      	ldr	r0, [pc, #328]	@ (80039e4 <main+0x34c>)
 800389a:	f7fe fadf 	bl	8001e5c <Kalman_Init>

	kf_rev.A_data[0] = 1;
 800389e:	4b51      	ldr	r3, [pc, #324]	@ (80039e4 <main+0x34c>)
 80038a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038a4:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 80038a6:	4b4f      	ldr	r3, [pc, #316]	@ (80039e4 <main+0x34c>)
 80038a8:	4a4f      	ldr	r2, [pc, #316]	@ (80039e8 <main+0x350>)
 80038aa:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80038ac:	4b4d      	ldr	r3, [pc, #308]	@ (80039e4 <main+0x34c>)
 80038ae:	4a4f      	ldr	r2, [pc, #316]	@ (80039ec <main+0x354>)
 80038b0:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80038b2:	4b4c      	ldr	r3, [pc, #304]	@ (80039e4 <main+0x34c>)
 80038b4:	4a4e      	ldr	r2, [pc, #312]	@ (80039f0 <main+0x358>)
 80038b6:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80038b8:	4b4a      	ldr	r3, [pc, #296]	@ (80039e4 <main+0x34c>)
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80038c2:	4b48      	ldr	r3, [pc, #288]	@ (80039e4 <main+0x34c>)
 80038c4:	4a4b      	ldr	r2, [pc, #300]	@ (80039f4 <main+0x35c>)
 80038c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80038ca:	4b46      	ldr	r3, [pc, #280]	@ (80039e4 <main+0x34c>)
 80038cc:	4a4a      	ldr	r2, [pc, #296]	@ (80039f8 <main+0x360>)
 80038ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80038d2:	4b44      	ldr	r3, [pc, #272]	@ (80039e4 <main+0x34c>)
 80038d4:	4a49      	ldr	r2, [pc, #292]	@ (80039fc <main+0x364>)
 80038d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 80038da:	4b42      	ldr	r3, [pc, #264]	@ (80039e4 <main+0x34c>)
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 80038e4:	4b3f      	ldr	r3, [pc, #252]	@ (80039e4 <main+0x34c>)
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 80038ee:	4b3d      	ldr	r3, [pc, #244]	@ (80039e4 <main+0x34c>)
 80038f0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038f4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 80038f8:	4b3a      	ldr	r3, [pc, #232]	@ (80039e4 <main+0x34c>)
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 8003902:	4b38      	ldr	r3, [pc, #224]	@ (80039e4 <main+0x34c>)
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 800390c:	4b35      	ldr	r3, [pc, #212]	@ (80039e4 <main+0x34c>)
 800390e:	4a3c      	ldr	r2, [pc, #240]	@ (8003a00 <main+0x368>)
 8003910:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8003914:	4b33      	ldr	r3, [pc, #204]	@ (80039e4 <main+0x34c>)
 8003916:	4a3b      	ldr	r2, [pc, #236]	@ (8003a04 <main+0x36c>)
 8003918:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 800391c:	4b31      	ldr	r3, [pc, #196]	@ (80039e4 <main+0x34c>)
 800391e:	4a3a      	ldr	r2, [pc, #232]	@ (8003a08 <main+0x370>)
 8003920:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8003924:	4b2f      	ldr	r3, [pc, #188]	@ (80039e4 <main+0x34c>)
 8003926:	4a39      	ldr	r2, [pc, #228]	@ (8003a0c <main+0x374>)
 8003928:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 800392c:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <main+0x34c>)
 800392e:	4a38      	ldr	r2, [pc, #224]	@ (8003a10 <main+0x378>)
 8003930:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8003934:	4b2b      	ldr	r3, [pc, #172]	@ (80039e4 <main+0x34c>)
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <main+0x34c>)
 8003940:	4a34      	ldr	r2, [pc, #208]	@ (8003a14 <main+0x37c>)
 8003942:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8003946:	2300      	movs	r3, #0
 8003948:	657b      	str	r3, [r7, #84]	@ 0x54
 800394a:	e079      	b.n	8003a40 <main+0x3a8>
		for (int j = 0; j < 4; j++) {
 800394c:	2300      	movs	r3, #0
 800394e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003950:	e070      	b.n	8003a34 <main+0x39c>
			if (i == j) {
 8003952:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003954:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003956:	429a      	cmp	r2, r3
 8003958:	d15e      	bne.n	8003a18 <main+0x380>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	009a      	lsls	r2, r3, #2
 800395e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003960:	4413      	add	r3, r2
 8003962:	4a20      	ldr	r2, [pc, #128]	@ (80039e4 <main+0x34c>)
 8003964:	333c      	adds	r3, #60	@ 0x3c
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e05d      	b.n	8003a2e <main+0x396>
 8003972:	bf00      	nop
 8003974:	20001bd4 	.word	0x20001bd4
 8003978:	20001a3c 	.word	0x20001a3c
 800397c:	200018a4 	.word	0x200018a4
 8003980:	2000036c 	.word	0x2000036c
 8003984:	200017d8 	.word	0x200017d8
 8003988:	200003a0 	.word	0x200003a0
 800398c:	20000290 	.word	0x20000290
 8003990:	2000170c 	.word	0x2000170c
 8003994:	20001970 	.word	0x20001970
 8003998:	200006f0 	.word	0x200006f0
 800399c:	20001ca0 	.word	0x20001ca0
 80039a0:	20001b08 	.word	0x20001b08
 80039a4:	20000bc8 	.word	0x20000bc8
 80039a8:	20000e84 	.word	0x20000e84
 80039ac:	3a5c11e4 	.word	0x3a5c11e4
 80039b0:	b4e160df 	.word	0xb4e160df
 80039b4:	3757157b 	.word	0x3757157b
 80039b8:	3f2dd97f 	.word	0x3f2dd97f
 80039bc:	ba5c11e4 	.word	0xba5c11e4
 80039c0:	3cd20afa 	.word	0x3cd20afa
 80039c4:	bd2c27a6 	.word	0xbd2c27a6
 80039c8:	37b03ea2 	.word	0x37b03ea2
 80039cc:	bdc3e426 	.word	0xbdc3e426
 80039d0:	36866b47 	.word	0x36866b47
 80039d4:	3c034092 	.word	0x3c034092
 80039d8:	3e90b0f2 	.word	0x3e90b0f2
 80039dc:	3c23d70a 	.word	0x3c23d70a
 80039e0:	3f666666 	.word	0x3f666666
 80039e4:	200011a8 	.word	0x200011a8
 80039e8:	3a830bb9 	.word	0x3a830bb9
 80039ec:	b6327146 	.word	0xb6327146
 80039f0:	33ae1e34 	.word	0x33ae1e34
 80039f4:	3f7fe5c9 	.word	0x3f7fe5c9
 80039f8:	bbae429e 	.word	0xbbae429e
 80039fc:	392a143b 	.word	0x392a143b
 8003a00:	c02fbe77 	.word	0xc02fbe77
 8003a04:	3bef4e01 	.word	0x3bef4e01
 8003a08:	3e0aa64c 	.word	0x3e0aa64c
 8003a0c:	34012bd0 	.word	0x34012bd0
 8003a10:	397c4992 	.word	0x397c4992
 8003a14:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8003a18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a1a:	009a      	lsls	r2, r3, #2
 8003a1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a75      	ldr	r2, [pc, #468]	@ (8003bf8 <main+0x560>)
 8003a22:	333c      	adds	r3, #60	@ 0x3c
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003a2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a30:	3301      	adds	r3, #1
 8003a32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	dd8b      	ble.n	8003952 <main+0x2ba>
	for (int i = 0; i < 2; i++) {
 8003a3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	dd82      	ble.n	800394c <main+0x2b4>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8003a46:	4b6c      	ldr	r3, [pc, #432]	@ (8003bf8 <main+0x560>)
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8003a50:	4b69      	ldr	r3, [pc, #420]	@ (8003bf8 <main+0x560>)
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8003a5a:	4b67      	ldr	r3, [pc, #412]	@ (8003bf8 <main+0x560>)
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8003a64:	4b64      	ldr	r3, [pc, #400]	@ (8003bf8 <main+0x560>)
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8003a6e:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8003bfc <main+0x564>
 8003a72:	4861      	ldr	r0, [pc, #388]	@ (8003bf8 <main+0x560>)
 8003a74:	f7fe fac4 	bl	8002000 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8003a78:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8003c00 <main+0x568>
 8003a7c:	485e      	ldr	r0, [pc, #376]	@ (8003bf8 <main+0x560>)
 8003a7e:	f7fe fa8f 	bl	8001fa0 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8003a82:	4c60      	ldr	r4, [pc, #384]	@ (8003c04 <main+0x56c>)
 8003a84:	463b      	mov	r3, r7
 8003a86:	ed9f 6b42 	vldr	d6, [pc, #264]	@ 8003b90 <main+0x4f8>
 8003a8a:	ed9f 5b43 	vldr	d5, [pc, #268]	@ 8003b98 <main+0x500>
 8003a8e:	ed9f 4b44 	vldr	d4, [pc, #272]	@ 8003ba0 <main+0x508>
 8003a92:	ed9f 3b43 	vldr	d3, [pc, #268]	@ 8003ba0 <main+0x508>
 8003a96:	ed9f 2b44 	vldr	d2, [pc, #272]	@ 8003ba8 <main+0x510>
 8003a9a:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 8003bb0 <main+0x518>
 8003a9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8003bb8 <main+0x520>
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe ff8e 	bl	80029c4 <create_prismatic_motor>
 8003aa8:	4625      	mov	r5, r4
 8003aaa:	463c      	mov	r4, r7
 8003aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ab8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003abc:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8003ac0:	4c51      	ldr	r4, [pc, #324]	@ (8003c08 <main+0x570>)
 8003ac2:	463b      	mov	r3, r7
 8003ac4:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 8003bc0 <main+0x528>
 8003ac8:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8003bc8 <main+0x530>
 8003acc:	ed9f 4b40 	vldr	d4, [pc, #256]	@ 8003bd0 <main+0x538>
 8003ad0:	ed9f 3b41 	vldr	d3, [pc, #260]	@ 8003bd8 <main+0x540>
 8003ad4:	ed9f 2b42 	vldr	d2, [pc, #264]	@ 8003be0 <main+0x548>
 8003ad8:	ed9f 1b43 	vldr	d1, [pc, #268]	@ 8003be8 <main+0x550>
 8003adc:	ed9f 0b44 	vldr	d0, [pc, #272]	@ 8003bf0 <main+0x558>
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fe ffb0 	bl	8002a46 <create_motor>
 8003ae6:	4625      	mov	r5, r4
 8003ae8:	463c      	mov	r4, r7
 8003aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003afa:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8003afe:	4b43      	ldr	r3, [pc, #268]	@ (8003c0c <main+0x574>)
 8003b00:	4a43      	ldr	r2, [pc, #268]	@ (8003c10 <main+0x578>)
 8003b02:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8003b04:	4b41      	ldr	r3, [pc, #260]	@ (8003c0c <main+0x574>)
 8003b06:	4a43      	ldr	r2, [pc, #268]	@ (8003c14 <main+0x57c>)
 8003b08:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8003b0a:	4b40      	ldr	r3, [pc, #256]	@ (8003c0c <main+0x574>)
 8003b0c:	4a40      	ldr	r2, [pc, #256]	@ (8003c10 <main+0x578>)
 8003b0e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8003b10:	2100      	movs	r1, #0
 8003b12:	483e      	ldr	r0, [pc, #248]	@ (8003c0c <main+0x574>)
 8003b14:	f00a fd50 	bl	800e5b8 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8003b18:	4b3f      	ldr	r3, [pc, #252]	@ (8003c18 <main+0x580>)
 8003b1a:	4a40      	ldr	r2, [pc, #256]	@ (8003c1c <main+0x584>)
 8003b1c:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c18 <main+0x580>)
 8003b20:	4a3c      	ldr	r2, [pc, #240]	@ (8003c14 <main+0x57c>)
 8003b22:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8003b24:	4b3c      	ldr	r3, [pc, #240]	@ (8003c18 <main+0x580>)
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	483a      	ldr	r0, [pc, #232]	@ (8003c18 <main+0x580>)
 8003b30:	f00a fd42 	bl	800e5b8 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 1.5;
 8003b34:	4b3a      	ldr	r3, [pc, #232]	@ (8003c20 <main+0x588>)
 8003b36:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003b3a:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.8;
 8003b3c:	4b38      	ldr	r3, [pc, #224]	@ (8003c20 <main+0x588>)
 8003b3e:	4a39      	ldr	r2, [pc, #228]	@ (8003c24 <main+0x58c>)
 8003b40:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.4;
 8003b42:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <main+0x588>)
 8003b44:	4a38      	ldr	r2, [pc, #224]	@ (8003c28 <main+0x590>)
 8003b46:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	4835      	ldr	r0, [pc, #212]	@ (8003c20 <main+0x588>)
 8003b4c:	f00a fd34 	bl	800e5b8 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8003b50:	4b36      	ldr	r3, [pc, #216]	@ (8003c2c <main+0x594>)
 8003b52:	4a37      	ldr	r2, [pc, #220]	@ (8003c30 <main+0x598>)
 8003b54:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8003b56:	4b35      	ldr	r3, [pc, #212]	@ (8003c2c <main+0x594>)
 8003b58:	4a36      	ldr	r2, [pc, #216]	@ (8003c34 <main+0x59c>)
 8003b5a:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8003b5c:	4b33      	ldr	r3, [pc, #204]	@ (8003c2c <main+0x594>)
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8003b64:	2100      	movs	r1, #0
 8003b66:	4831      	ldr	r0, [pc, #196]	@ (8003c2c <main+0x594>)
 8003b68:	f00a fd26 	bl	800e5b8 <arm_pid_init_f32>

	EMERGENCY_SWITCH_INIT_STANDARD(&emergency_filter);
 8003b6c:	2132      	movs	r1, #50	@ 0x32
 8003b6e:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8003b72:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8003c38 <main+0x5a0>
 8003b76:	4831      	ldr	r0, [pc, #196]	@ (8003c3c <main+0x5a4>)
 8003b78:	f7ff fb4e 	bl	8003218 <emergency_switch_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (emergency_active == 1) {
 8003b7c:	4b30      	ldr	r3, [pc, #192]	@ (8003c40 <main+0x5a8>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d161      	bne.n	8003c48 <main+0x5b0>
			state_Emer = 1;
 8003b84:	4b2f      	ldr	r3, [pc, #188]	@ (8003c44 <main+0x5ac>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e060      	b.n	8003c4e <main+0x5b6>
 8003b8c:	f3af 8000 	nop.w
 8003b90:	eb1c432d 	.word	0xeb1c432d
 8003b94:	3f5a36e2 	.word	0x3f5a36e2
 8003b98:	b50b0f28 	.word	0xb50b0f28
 8003b9c:	400ef9a6 	.word	0x400ef9a6
 8003ba0:	9db22d0e 	.word	0x9db22d0e
 8003ba4:	3fc6a7ef 	.word	0x3fc6a7ef
 8003ba8:	00000000 	.word	0x00000000
 8003bac:	3fec0000 	.word	0x3fec0000
 8003bb0:	3c968944 	.word	0x3c968944
 8003bb4:	3f3f969e 	.word	0x3f3f969e
 8003bb8:	05857aff 	.word	0x05857aff
 8003bbc:	3f2e03f7 	.word	0x3f2e03f7
 8003bc0:	fa8f7db7 	.word	0xfa8f7db7
 8003bc4:	3f3615eb 	.word	0x3f3615eb
 8003bc8:	f9db22d1 	.word	0xf9db22d1
 8003bcc:	3fe06a7e 	.word	0x3fe06a7e
 8003bd0:	a7daa4fc 	.word	0xa7daa4fc
 8003bd4:	3ff331e3 	.word	0x3ff331e3
 8003bd8:	e147ae14 	.word	0xe147ae14
 8003bdc:	3ffa147a 	.word	0x3ffa147a
 8003be0:	df3b645a 	.word	0xdf3b645a
 8003be4:	3fe78d4f 	.word	0x3fe78d4f
 8003be8:	003eea21 	.word	0x003eea21
 8003bec:	3f7c4da9 	.word	0x3f7c4da9
 8003bf0:	4dd2f1aa 	.word	0x4dd2f1aa
 8003bf4:	3fc81062 	.word	0x3fc81062
 8003bf8:	200011a8 	.word	0x200011a8
 8003bfc:	3da3d70a 	.word	0x3da3d70a
 8003c00:	3df5c28f 	.word	0x3df5c28f
 8003c04:	200014d0 	.word	0x200014d0
 8003c08:	20001508 	.word	0x20001508
 8003c0c:	20000d80 	.word	0x20000d80
 8003c10:	3e99999a 	.word	0x3e99999a
 8003c14:	3c23d70a 	.word	0x3c23d70a
 8003c18:	20000dc0 	.word	0x20000dc0
 8003c1c:	3da3d70a 	.word	0x3da3d70a
 8003c20:	20000e00 	.word	0x20000e00
 8003c24:	3f4ccccd 	.word	0x3f4ccccd
 8003c28:	3ecccccd 	.word	0x3ecccccd
 8003c2c:	20000e3c 	.word	0x20000e3c
 8003c30:	40400000 	.word	0x40400000
 8003c34:	3dcccccd 	.word	0x3dcccccd
 8003c38:	447a0000 	.word	0x447a0000
 8003c3c:	200015c0 	.word	0x200015c0
 8003c40:	200015d8 	.word	0x200015d8
 8003c44:	200015d9 	.word	0x200015d9
		} else {
			state_Emer = 0;
 8003c48:	4ba8      	ldr	r3, [pc, #672]	@ (8003eec <main+0x854>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	701a      	strb	r2, [r3, #0]
		}

		uint64_t currentTick = HAL_GetTick();
 8003c4e:	f002 f943 	bl	8005ed8 <HAL_GetTick>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2200      	movs	r2, #0
 8003c56:	469a      	mov	sl, r3
 8003c58:	4693      	mov	fp, r2
 8003c5a:	e9c7 ab12 	strd	sl, fp, [r7, #72]	@ 0x48
		float dt = (currentTick - lastTick) / 1000.0f;
 8003c5e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8003c62:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003c66:	ebb0 0802 	subs.w	r8, r0, r2
 8003c6a:	eb61 0903 	sbc.w	r9, r1, r3
 8003c6e:	4640      	mov	r0, r8
 8003c70:	4649      	mov	r1, r9
 8003c72:	f7fd f875 	bl	8000d60 <__aeabi_ul2f>
 8003c76:	ee06 0a90 	vmov	s13, r0
 8003c7a:	ed9f 7a9d 	vldr	s14, [pc, #628]	@ 8003ef0 <main+0x858>
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		Modbus_Protocal_Worker();
 8003c86:	f7fe fc29 	bl	80024dc <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8003c8a:	489a      	ldr	r0, [pc, #616]	@ (8003ef4 <main+0x85c>)
 8003c8c:	f7fd faca 	bl	8001224 <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8003c90:	4898      	ldr	r0, [pc, #608]	@ (8003ef4 <main+0x85c>)
 8003c92:	f7fd fad6 	bl	8001242 <modbus_Base_System_Status>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b97      	ldr	r3, [pc, #604]	@ (8003ef8 <main+0x860>)
 8003c9c:	701a      	strb	r2, [r3, #0]
		PS2_ReadData();
 8003c9e:	f7fd ffb3 	bl	8001c08 <PS2_ReadData>
		if (modbus_write_servo_up(&hmodbus) == 1) {
 8003ca2:	4894      	ldr	r0, [pc, #592]	@ (8003ef4 <main+0x85c>)
 8003ca4:	f7fd faef 	bl	8001286 <modbus_write_servo_up>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d102      	bne.n	8003cb4 <main+0x61c>
			plotter = 1;
 8003cae:	4b93      	ldr	r3, [pc, #588]	@ (8003efc <main+0x864>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
		}
		if (modbus_write_servo_down(&hmodbus) == 1) {
 8003cb4:	488f      	ldr	r0, [pc, #572]	@ (8003ef4 <main+0x85c>)
 8003cb6:	f7fd faf6 	bl	80012a6 <modbus_write_servo_down>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d102      	bne.n	8003cc6 <main+0x62e>
			plotter = 2;
 8003cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8003efc <main+0x864>)
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	601a      	str	r2, [r3, #0]
		}

		t_global = HAL_GetTick() / 1000.0f;
 8003cc6:	f002 f907 	bl	8005ed8 <HAL_GetTick>
 8003cca:	ee07 0a90 	vmov	s15, r0
 8003cce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cd2:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8003ef0 <main+0x858>
 8003cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cda:	4b89      	ldr	r3, [pc, #548]	@ (8003f00 <main+0x868>)
 8003cdc:	edc3 7a00 	vstr	s15, [r3]
//				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//				servo_state = 0;
//			}
//		}

		if (dt >= 0.001f) {
 8003ce0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003ce4:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 8003f04 <main+0x86c>
 8003ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf0:	f2c0 84a3 	blt.w	800463a <main+0xfa2>

			HAL_ADC_Start(&hadc1);
 8003cf4:	4884      	ldr	r0, [pc, #528]	@ (8003f08 <main+0x870>)
 8003cf6:	f002 fcc3 	bl	8006680 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8003cfa:	4884      	ldr	r0, [pc, #528]	@ (8003f0c <main+0x874>)
 8003cfc:	f002 fcc0 	bl	8006680 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8003d00:	4881      	ldr	r0, [pc, #516]	@ (8003f08 <main+0x870>)
 8003d02:	f002 fda1 	bl	8006848 <HAL_ADC_GetValue>
 8003d06:	4603      	mov	r3, r0
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	4b81      	ldr	r3, [pc, #516]	@ (8003f10 <main+0x878>)
 8003d0c:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8003d0e:	487f      	ldr	r0, [pc, #508]	@ (8003f0c <main+0x874>)
 8003d10:	f002 fd9a 	bl	8006848 <HAL_ADC_GetValue>
 8003d14:	4603      	mov	r3, r0
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	4b7e      	ldr	r3, [pc, #504]	@ (8003f14 <main+0x87c>)
 8003d1a:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8003d1c:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003d20:	487d      	ldr	r0, [pc, #500]	@ (8003f18 <main+0x880>)
 8003d22:	f7fd fe51 	bl	80019c8 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8003d26:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8003d2a:	487c      	ldr	r0, [pc, #496]	@ (8003f1c <main+0x884>)
 8003d2c:	f7fd fe4c 	bl	80019c8 <Encoder_Update>
			lastTick = currentTick;
 8003d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d34:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8003d38:	4b79      	ldr	r3, [pc, #484]	@ (8003f20 <main+0x888>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	4a79      	ldr	r2, [pc, #484]	@ (8003f24 <main+0x88c>)
 8003d40:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8003d42:	4b79      	ldr	r3, [pc, #484]	@ (8003f28 <main+0x890>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d48:	4a78      	ldr	r2, [pc, #480]	@ (8003f2c <main+0x894>)
 8003d4a:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition_mm(&encoder1);
 8003d4c:	4872      	ldr	r0, [pc, #456]	@ (8003f18 <main+0x880>)
 8003d4e:	f7fd ff2d 	bl	8001bac <Encoder_GetPosition_mm>
 8003d52:	eef0 7a40 	vmov.f32	s15, s0
 8003d56:	4b76      	ldr	r3, [pc, #472]	@ (8003f30 <main+0x898>)
 8003d58:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity_mm(&encoder1);
 8003d5c:	486e      	ldr	r0, [pc, #440]	@ (8003f18 <main+0x880>)
 8003d5e:	f7fd ff34 	bl	8001bca <Encoder_GetVelocity_mm>
 8003d62:	eef0 7a40 	vmov.f32	s15, s0
 8003d66:	4b73      	ldr	r3, [pc, #460]	@ (8003f34 <main+0x89c>)
 8003d68:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration_mm(&encoder1);
 8003d6c:	486a      	ldr	r0, [pc, #424]	@ (8003f18 <main+0x880>)
 8003d6e:	f7fd ff3b 	bl	8001be8 <Encoder_GetAcceleration_mm>
 8003d72:	eef0 7a40 	vmov.f32	s15, s0
 8003d76:	4b70      	ldr	r3, [pc, #448]	@ (8003f38 <main+0x8a0>)
 8003d78:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8003d7c:	4867      	ldr	r0, [pc, #412]	@ (8003f1c <main+0x884>)
 8003d7e:	f7fd fed9 	bl	8001b34 <Encoder_GetPosition>
 8003d82:	eef0 7a40 	vmov.f32	s15, s0
 8003d86:	4b6d      	ldr	r3, [pc, #436]	@ (8003f3c <main+0x8a4>)
 8003d88:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8003d8c:	4863      	ldr	r0, [pc, #396]	@ (8003f1c <main+0x884>)
 8003d8e:	f7fd fee0 	bl	8001b52 <Encoder_GetVelocity>
 8003d92:	eef0 7a40 	vmov.f32	s15, s0
 8003d96:	4b6a      	ldr	r3, [pc, #424]	@ (8003f40 <main+0x8a8>)
 8003d98:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8003d9c:	485f      	ldr	r0, [pc, #380]	@ (8003f1c <main+0x884>)
 8003d9e:	f7fd fee7 	bl	8001b70 <Encoder_GetAcceleration>
 8003da2:	eef0 7a40 	vmov.f32	s15, s0
 8003da6:	4b67      	ldr	r3, [pc, #412]	@ (8003f44 <main+0x8ac>)
 8003da8:	edc3 7a00 	vstr	s15, [r3]

			if (state_Emer == 1) {
 8003dac:	4b4f      	ldr	r3, [pc, #316]	@ (8003eec <main+0x854>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d10c      	bne.n	8003dce <main+0x736>
				//if (Emer_count % 2 == 1) {
				__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
 8003db4:	4b64      	ldr	r3, [pc, #400]	@ (8003f48 <main+0x8b0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2200      	movs	r2, #0
 8003dba:	635a      	str	r2, [r3, #52]	@ 0x34
				__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
 8003dbc:	4b62      	ldr	r3, [pc, #392]	@ (8003f48 <main+0x8b0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	63da      	str	r2, [r3, #60]	@ 0x3c
				Before_Emer = state_Emer;
 8003dc4:	4b49      	ldr	r3, [pc, #292]	@ (8003eec <main+0x854>)
 8003dc6:	781a      	ldrb	r2, [r3, #0]
 8003dc8:	4b60      	ldr	r3, [pc, #384]	@ (8003f4c <main+0x8b4>)
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	e1ee      	b.n	80041ac <main+0xb14>
				//    } else if (Emer_count % 2 == 0) {
				//     Emer_state = 9;
				//    }
			} else if (state_Emer == 0 && Before_Emer == 1) {
 8003dce:	4b47      	ldr	r3, [pc, #284]	@ (8003eec <main+0x854>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <main+0x74a>
 8003dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8003f4c <main+0x8b4>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <main+0x74a>
				//    }
				//    if (Home_Rev == 1 && Home_Pris == 1) {
				//     Home_two_dof = 1;
				//     __HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
				//     __HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
				NVIC_SystemReset();
 8003dde:	f7ff fc43 	bl	8003668 <__NVIC_SystemReset>
			}

			else if (Base_Sysytem_status == Base_Home) {
 8003de2:	4b45      	ldr	r3, [pc, #276]	@ (8003ef8 <main+0x860>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d104      	bne.n	8003df4 <main+0x75c>

				R_Theta_moving_Status(&hmodbus, Home);
 8003dea:	2101      	movs	r1, #1
 8003dec:	4841      	ldr	r0, [pc, #260]	@ (8003ef4 <main+0x85c>)
 8003dee:	f7fd fa6a 	bl	80012c6 <R_Theta_moving_Status>
 8003df2:	e1db      	b.n	80041ac <main+0xb14>
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
//					NVIC_SystemReset();
//				}

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8003df4:	4b40      	ldr	r3, [pc, #256]	@ (8003ef8 <main+0x860>)
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d158      	bne.n	8003eae <main+0x816>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	483d      	ldr	r0, [pc, #244]	@ (8003ef4 <main+0x85c>)
 8003e00:	f7fd fa61 	bl	80012c6 <R_Theta_moving_Status>

				Circle = PS2_ButtonCircle();
 8003e04:	f7fd ff32 	bl	8001c6c <PS2_ButtonCircle>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4b50      	ldr	r3, [pc, #320]	@ (8003f50 <main+0x8b8>)
 8003e0e:	601a      	str	r2, [r3, #0]
				Square = PS2_ButtonSquare();
 8003e10:	f7fd ff3e 	bl	8001c90 <PS2_ButtonSquare>
 8003e14:	4603      	mov	r3, r0
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b4e      	ldr	r3, [pc, #312]	@ (8003f54 <main+0x8bc>)
 8003e1a:	601a      	str	r2, [r3, #0]
				Triangle = PS2_ButtonTriangle();
 8003e1c:	f7fd ff48 	bl	8001cb0 <PS2_ButtonTriangle>
 8003e20:	4603      	mov	r3, r0
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b4c      	ldr	r3, [pc, #304]	@ (8003f58 <main+0x8c0>)
 8003e26:	601a      	str	r2, [r3, #0]
				Cross = PS2_ButtonCross();
 8003e28:	f7fd ff54 	bl	8001cd4 <PS2_ButtonCross>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b4a      	ldr	r3, [pc, #296]	@ (8003f5c <main+0x8c4>)
 8003e32:	601a      	str	r2, [r3, #0]
				R1 = PS2_ButtonR1();
 8003e34:	f7fd ff60 	bl	8001cf8 <PS2_ButtonR1>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b48      	ldr	r3, [pc, #288]	@ (8003f60 <main+0x8c8>)
 8003e3e:	601a      	str	r2, [r3, #0]
				R2 = PS2_ButtonR2();
 8003e40:	f7fd ff6c 	bl	8001d1c <PS2_ButtonR2>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b46      	ldr	r3, [pc, #280]	@ (8003f64 <main+0x8cc>)
 8003e4a:	601a      	str	r2, [r3, #0]
				Select = PS2_ButtonSelect();
 8003e4c:	f7fd ff78 	bl	8001d40 <PS2_ButtonSelect>
 8003e50:	4603      	mov	r3, r0
 8003e52:	461a      	mov	r2, r3
 8003e54:	4b44      	ldr	r3, [pc, #272]	@ (8003f68 <main+0x8d0>)
 8003e56:	601a      	str	r2, [r3, #0]
				Start = PS2_ButtonStart();
 8003e58:	f7fd ff84 	bl	8001d64 <PS2_ButtonStart>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4b42      	ldr	r3, [pc, #264]	@ (8003f6c <main+0x8d4>)
 8003e62:	601a      	str	r2, [r3, #0]
				L1 = PS2_ButtonL1();
 8003e64:	f7fd ff90 	bl	8001d88 <PS2_ButtonL1>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b40      	ldr	r3, [pc, #256]	@ (8003f70 <main+0x8d8>)
 8003e6e:	601a      	str	r2, [r3, #0]
				L2 = PS2_ButtonL2();
 8003e70:	f7fd ff9c 	bl	8001dac <PS2_ButtonL2>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	4b3e      	ldr	r3, [pc, #248]	@ (8003f74 <main+0x8dc>)
 8003e7a:	601a      	str	r2, [r3, #0]
				Up = PS2_ButtonUp();
 8003e7c:	f7fd ffa8 	bl	8001dd0 <PS2_ButtonUp>
 8003e80:	4603      	mov	r3, r0
 8003e82:	461a      	mov	r2, r3
 8003e84:	4b3c      	ldr	r3, [pc, #240]	@ (8003f78 <main+0x8e0>)
 8003e86:	601a      	str	r2, [r3, #0]
				Down = PS2_ButtonDown();
 8003e88:	f7fd ffc6 	bl	8001e18 <PS2_ButtonDown>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4b3a      	ldr	r3, [pc, #232]	@ (8003f7c <main+0x8e4>)
 8003e92:	601a      	str	r2, [r3, #0]
				Right = PS2_ButtonRight();
 8003e94:	f7fd ffae 	bl	8001df4 <PS2_ButtonRight>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	4b38      	ldr	r3, [pc, #224]	@ (8003f80 <main+0x8e8>)
 8003e9e:	601a      	str	r2, [r3, #0]
				Left = PS2_ButtonLeft();
 8003ea0:	f7fd ffcc 	bl	8001e3c <PS2_ButtonLeft>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b36      	ldr	r3, [pc, #216]	@ (8003f84 <main+0x8ec>)
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e17e      	b.n	80041ac <main+0xb14>
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 8003eae:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <main+0x860>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d16c      	bne.n	8003f90 <main+0x8f8>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8003eb6:	480f      	ldr	r0, [pc, #60]	@ (8003ef4 <main+0x85c>)
 8003eb8:	f7fd fa67 	bl	800138a <modbus_set_goal_r_position>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	4b30      	ldr	r3, [pc, #192]	@ (8003f88 <main+0x8f0>)
 8003ec8:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 8003ecc:	4809      	ldr	r0, [pc, #36]	@ (8003ef4 <main+0x85c>)
 8003ece:	f7fd fa74 	bl	80013ba <modbus_set_goal_theta_position>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	ee07 3a90 	vmov	s15, r3
 8003ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003edc:	4b2b      	ldr	r3, [pc, #172]	@ (8003f8c <main+0x8f4>)
 8003ede:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 8003ee2:	2104      	movs	r1, #4
 8003ee4:	4803      	ldr	r0, [pc, #12]	@ (8003ef4 <main+0x85c>)
 8003ee6:	f7fd f9ee 	bl	80012c6 <R_Theta_moving_Status>
 8003eea:	e15f      	b.n	80041ac <main+0xb14>
 8003eec:	200015d9 	.word	0x200015d9
 8003ef0:	447a0000 	.word	0x447a0000
 8003ef4:	200006f0 	.word	0x200006f0
 8003ef8:	20000d58 	.word	0x20000d58
 8003efc:	200015a0 	.word	0x200015a0
 8003f00:	200006bc 	.word	0x200006bc
 8003f04:	3a83126f 	.word	0x3a83126f
 8003f08:	20000290 	.word	0x20000290
 8003f0c:	200002fc 	.word	0x200002fc
 8003f10:	200006ec 	.word	0x200006ec
 8003f14:	200006ee 	.word	0x200006ee
 8003f18:	2000036c 	.word	0x2000036c
 8003f1c:	200003a0 	.word	0x200003a0
 8003f20:	200017d8 	.word	0x200017d8
 8003f24:	200003d4 	.word	0x200003d4
 8003f28:	200018a4 	.word	0x200018a4
 8003f2c:	200003d8 	.word	0x200003d8
 8003f30:	200006d0 	.word	0x200006d0
 8003f34:	200006d4 	.word	0x200006d4
 8003f38:	200006d8 	.word	0x200006d8
 8003f3c:	200006dc 	.word	0x200006dc
 8003f40:	200006e0 	.word	0x200006e0
 8003f44:	200006e4 	.word	0x200006e4
 8003f48:	20001bd4 	.word	0x20001bd4
 8003f4c:	200015da 	.word	0x200015da
 8003f50:	20001560 	.word	0x20001560
 8003f54:	20001564 	.word	0x20001564
 8003f58:	20001568 	.word	0x20001568
 8003f5c:	2000156c 	.word	0x2000156c
 8003f60:	20001570 	.word	0x20001570
 8003f64:	20001574 	.word	0x20001574
 8003f68:	20001578 	.word	0x20001578
 8003f6c:	2000157c 	.word	0x2000157c
 8003f70:	20001580 	.word	0x20001580
 8003f74:	20001584 	.word	0x20001584
 8003f78:	20001588 	.word	0x20001588
 8003f7c:	2000158c 	.word	0x2000158c
 8003f80:	20001590 	.word	0x20001590
 8003f84:	20001594 	.word	0x20001594
 8003f88:	20000d5c 	.word	0x20000d5c
 8003f8c:	20000d60 	.word	0x20000d60

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 8003f90:	4b5d      	ldr	r3, [pc, #372]	@ (8004108 <main+0xa70>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	f040 8109 	bne.w	80041ac <main+0xb14>

				R_Theta_moving_Status(&hmodbus, Go_to_Target);
 8003f9a:	2108      	movs	r1, #8
 8003f9c:	485b      	ldr	r0, [pc, #364]	@ (800410c <main+0xa74>)
 8003f9e:	f7fd f992 	bl	80012c6 <R_Theta_moving_Status>

				state_go_to = 1;
 8003fa2:	4b5b      	ldr	r3, [pc, #364]	@ (8004110 <main+0xa78>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

				if (!has_initialized_target_traj) {
 8003fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8004114 <main+0xa7c>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d159      	bne.n	8004064 <main+0x9cc>
					Coordinate_Base_to_Robot(&Go_to_point, Goal_r_position,
 8003fb0:	4b59      	ldr	r3, [pc, #356]	@ (8004118 <main+0xa80>)
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	4b59      	ldr	r3, [pc, #356]	@ (800411c <main+0xa84>)
 8003fb8:	ed93 7a00 	vldr	s14, [r3]
 8003fbc:	eef0 0a47 	vmov.f32	s1, s14
 8003fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc4:	4856      	ldr	r0, [pc, #344]	@ (8004120 <main+0xa88>)
 8003fc6:	f7fd fa13 	bl	80013f0 <Coordinate_Base_to_Robot>
							Goal_theta_position);

					traj_start_time_target = HAL_GetTick() / 1000.0f;
 8003fca:	f001 ff85 	bl	8005ed8 <HAL_GetTick>
 8003fce:	ee07 0a90 	vmov	s15, r0
 8003fd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fd6:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8004124 <main+0xa8c>
 8003fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fde:	4b52      	ldr	r3, [pc, #328]	@ (8004128 <main+0xa90>)
 8003fe0:	edc3 7a00 	vstr	s15, [r3]
					has_initialized_target_traj = 1;
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8004114 <main+0xa7c>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]

					start_p = Go_to_point.r_goal_position;
 8003fea:	4b4d      	ldr	r3, [pc, #308]	@ (8004120 <main+0xa88>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a4f      	ldr	r2, [pc, #316]	@ (800412c <main+0xa94>)
 8003ff0:	6013      	str	r3, [r2, #0]
					start_r = Go_to_point.theta_goal_position - 0.429351f + 0.02;
 8003ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8004120 <main+0xa88>)
 8003ff4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ff8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004130 <main+0xa98>
 8003ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004000:	ee17 0a90 	vmov	r0, s15
 8004004:	f7fc fa6c 	bl	80004e0 <__aeabi_f2d>
 8004008:	a33d      	add	r3, pc, #244	@ (adr r3, 8004100 <main+0xa68>)
 800400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400e:	f7fc f909 	bl	8000224 <__adddf3>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4610      	mov	r0, r2
 8004018:	4619      	mov	r1, r3
 800401a:	f7fc fd89 	bl	8000b30 <__aeabi_d2f>
 800401e:	4603      	mov	r3, r0
 8004020:	4a44      	ldr	r2, [pc, #272]	@ (8004134 <main+0xa9c>)
 8004022:	6013      	str	r3, [r2, #0]
					InitTrajectorySegment(&Prismatic[0], 0.0f, start_p,
 8004024:	4b41      	ldr	r3, [pc, #260]	@ (800412c <main+0xa94>)
 8004026:	edd3 7a00 	vldr	s15, [r3]
 800402a:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 8004138 <main+0xaa0>
 800402e:	eddf 1a43 	vldr	s3, [pc, #268]	@ 800413c <main+0xaa4>
 8004032:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 8004140 <main+0xaa8>
 8004036:	eef0 0a67 	vmov.f32	s1, s15
 800403a:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 8004138 <main+0xaa0>
 800403e:	4841      	ldr	r0, [pc, #260]	@ (8004144 <main+0xaac>)
 8004040:	f7fe fd42 	bl	8002ac8 <InitTrajectorySegment>
					v_max_pris, a_max_pris, 0.0f);
					InitTrajectorySegment(&Revolute[0], 0.0f, start_r,
 8004044:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <main+0xa9c>)
 8004046:	edd3 7a00 	vldr	s15, [r3]
 800404a:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 8004138 <main+0xaa0>
 800404e:	eddf 1a3e 	vldr	s3, [pc, #248]	@ 8004148 <main+0xab0>
 8004052:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004056:	eef0 0a67 	vmov.f32	s1, s15
 800405a:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8004138 <main+0xaa0>
 800405e:	483b      	ldr	r0, [pc, #236]	@ (800414c <main+0xab4>)
 8004060:	f7fe fd32 	bl	8002ac8 <InitTrajectorySegment>
					v_max_rev, a_max_rev, 0.0f);
				}

				float t_rel = t_global - traj_start_time_target;
 8004064:	4b3a      	ldr	r3, [pc, #232]	@ (8004150 <main+0xab8>)
 8004066:	ed93 7a00 	vldr	s14, [r3]
 800406a:	4b2f      	ldr	r3, [pc, #188]	@ (8004128 <main+0xa90>)
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004074:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
				pos_pris = GetTrajectoryPosition(&Prismatic[0], t_rel);
 8004078:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800407c:	4831      	ldr	r0, [pc, #196]	@ (8004144 <main+0xaac>)
 800407e:	f7fe fdd9 	bl	8002c34 <GetTrajectoryPosition>
 8004082:	eef0 7a40 	vmov.f32	s15, s0
 8004086:	4b33      	ldr	r3, [pc, #204]	@ (8004154 <main+0xabc>)
 8004088:	edc3 7a00 	vstr	s15, [r3]
				vel_pris = GetTrajectoryVelocity(&Prismatic[0], t_rel);
 800408c:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8004090:	482c      	ldr	r0, [pc, #176]	@ (8004144 <main+0xaac>)
 8004092:	f7fe fea5 	bl	8002de0 <GetTrajectoryVelocity>
 8004096:	eef0 7a40 	vmov.f32	s15, s0
 800409a:	4b2f      	ldr	r3, [pc, #188]	@ (8004158 <main+0xac0>)
 800409c:	edc3 7a00 	vstr	s15, [r3]
				pos_rev = GetTrajectoryPosition(&Revolute[0], t_rel);
 80040a0:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80040a4:	4829      	ldr	r0, [pc, #164]	@ (800414c <main+0xab4>)
 80040a6:	f7fe fdc5 	bl	8002c34 <GetTrajectoryPosition>
 80040aa:	eef0 7a40 	vmov.f32	s15, s0
 80040ae:	4b2b      	ldr	r3, [pc, #172]	@ (800415c <main+0xac4>)
 80040b0:	edc3 7a00 	vstr	s15, [r3]
				vel_rev = GetTrajectoryVelocity(&Revolute[0], t_rel);
 80040b4:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 80040b8:	4824      	ldr	r0, [pc, #144]	@ (800414c <main+0xab4>)
 80040ba:	f7fe fe91 	bl	8002de0 <GetTrajectoryVelocity>
 80040be:	eef0 7a40 	vmov.f32	s15, s0
 80040c2:	4b27      	ldr	r3, [pc, #156]	@ (8004160 <main+0xac8>)
 80040c4:	edc3 7a00 	vstr	s15, [r3]

				if (plotter == 1) // Pen_Up
 80040c8:	4b26      	ldr	r3, [pc, #152]	@ (8004164 <main+0xacc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d109      	bne.n	80040e4 <main+0xa4c>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 80040d0:	4b25      	ldr	r3, [pc, #148]	@ (8004168 <main+0xad0>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80040d8:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 80040da:	2102      	movs	r1, #2
 80040dc:	480b      	ldr	r0, [pc, #44]	@ (800410c <main+0xa74>)
 80040de:	f7fd f8c0 	bl	8001262 <modbus_servo_Status>
 80040e2:	e047      	b.n	8004174 <main+0xadc>
				} else if (plotter == 2) // Pen_Down
 80040e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004164 <main+0xacc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d13f      	bne.n	800416c <main+0xad4>
//					if (status < 2000) {
//						status += 1;
//					} else {
//						status += 0;
//					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 80040ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004168 <main+0xad0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80040f4:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 80040f6:	2101      	movs	r1, #1
 80040f8:	4804      	ldr	r0, [pc, #16]	@ (800410c <main+0xa74>)
 80040fa:	f7fd f8b2 	bl	8001262 <modbus_servo_Status>
 80040fe:	e039      	b.n	8004174 <main+0xadc>
 8004100:	47ae147b 	.word	0x47ae147b
 8004104:	3f947ae1 	.word	0x3f947ae1
 8004108:	20000d58 	.word	0x20000d58
 800410c:	200006f0 	.word	0x200006f0
 8004110:	200015a8 	.word	0x200015a8
 8004114:	200006cc 	.word	0x200006cc
 8004118:	20000d5c 	.word	0x20000d5c
 800411c:	20000d60 	.word	0x20000d60
 8004120:	20001598 	.word	0x20001598
 8004124:	447a0000 	.word	0x447a0000
 8004128:	200006c8 	.word	0x200006c8
 800412c:	200006c0 	.word	0x200006c0
 8004130:	3edbd3e5 	.word	0x3edbd3e5
 8004134:	200006c4 	.word	0x200006c4
 8004138:	00000000 	.word	0x00000000
 800413c:	437a0000 	.word	0x437a0000
 8004140:	43fa0000 	.word	0x43fa0000
 8004144:	200003ec 	.word	0x200003ec
 8004148:	3ecccccd 	.word	0x3ecccccd
 800414c:	20000554 	.word	0x20000554
 8004150:	200006bc 	.word	0x200006bc
 8004154:	200003dc 	.word	0x200003dc
 8004158:	200003e0 	.word	0x200003e0
 800415c:	200003e4 	.word	0x200003e4
 8004160:	200003e8 	.word	0x200003e8
 8004164:	200015a0 	.word	0x200015a0
 8004168:	20001a3c 	.word	0x20001a3c
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 800416c:	4bc4      	ldr	r3, [pc, #784]	@ (8004480 <main+0xde8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2200      	movs	r2, #0
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				float t_end = Revolute[0].t_start + Revolute[0].t_total;
 8004174:	4bc3      	ldr	r3, [pc, #780]	@ (8004484 <main+0xdec>)
 8004176:	ed93 7a08 	vldr	s14, [r3, #32]
 800417a:	4bc2      	ldr	r3, [pc, #776]	@ (8004484 <main+0xdec>)
 800417c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004184:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

				if (t_global > t_end + 2.0f) {
 8004188:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800418c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004190:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004194:	4bbc      	ldr	r3, [pc, #752]	@ (8004488 <main+0xdf0>)
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	d503      	bpl.n	80041ac <main+0xb14>
					R_Theta_moving_Status(&hmodbus, Idle);
 80041a4:	2100      	movs	r1, #0
 80041a6:	48b9      	ldr	r0, [pc, #740]	@ (800448c <main+0xdf4>)
 80041a8:	f7fd f88d 	bl	80012c6 <R_Theta_moving_Status>
				}
			}

			if (Base_Sysytem_status != Base_Go_to_Target) {
 80041ac:	4bb8      	ldr	r3, [pc, #736]	@ (8004490 <main+0xdf8>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d005      	beq.n	80041c0 <main+0xb28>
				has_initialized_target_traj = 0;
 80041b4:	4bb7      	ldr	r3, [pc, #732]	@ (8004494 <main+0xdfc>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	701a      	strb	r2, [r3, #0]
				state_go_to = 0;
 80041ba:	4bb7      	ldr	r3, [pc, #732]	@ (8004498 <main+0xe00>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
			}
//			if (state_start == 1 || state_go_to == 1)
//			{
			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 80041c0:	48b6      	ldr	r0, [pc, #728]	@ (800449c <main+0xe04>)
 80041c2:	f7fd fcf3 	bl	8001bac <Encoder_GetPosition_mm>
 80041c6:	eef0 7a40 	vmov.f32	s15, s0
 80041ca:	4bb5      	ldr	r3, [pc, #724]	@ (80044a0 <main+0xe08>)
 80041cc:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 80041d0:	48b2      	ldr	r0, [pc, #712]	@ (800449c <main+0xe04>)
 80041d2:	f7fd fcfa 	bl	8001bca <Encoder_GetVelocity_mm>
 80041d6:	eef0 7a40 	vmov.f32	s15, s0
 80041da:	4bb1      	ldr	r3, [pc, #708]	@ (80044a0 <main+0xe08>)
 80041dc:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 80041e0:	4baf      	ldr	r3, [pc, #700]	@ (80044a0 <main+0xe08>)
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 80041e8:	4bad      	ldr	r3, [pc, #692]	@ (80044a0 <main+0xe08>)
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 80041f0:	4bac      	ldr	r3, [pc, #688]	@ (80044a4 <main+0xe0c>)
 80041f2:	edd3 7a00 	vldr	s15, [r3]
 80041f6:	eeb0 0a67 	vmov.f32	s0, s15
 80041fa:	48ab      	ldr	r0, [pc, #684]	@ (80044a8 <main+0xe10>)
 80041fc:	f7fd ff30 	bl	8002060 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 8004200:	48a9      	ldr	r0, [pc, #676]	@ (80044a8 <main+0xe10>)
 8004202:	f7fd ff3d 	bl	8002080 <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 8004206:	49a6      	ldr	r1, [pc, #664]	@ (80044a0 <main+0xe08>)
 8004208:	48a7      	ldr	r0, [pc, #668]	@ (80044a8 <main+0xe10>)
 800420a:	f7fd ff86 	bl	800211a <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 800420e:	48a7      	ldr	r0, [pc, #668]	@ (80044ac <main+0xe14>)
 8004210:	f7fd fc90 	bl	8001b34 <Encoder_GetPosition>
 8004214:	ee10 3a10 	vmov	r3, s0
 8004218:	4618      	mov	r0, r3
 800421a:	f7fc f961 	bl	80004e0 <__aeabi_f2d>
 800421e:	a394      	add	r3, pc, #592	@ (adr r3, 8004470 <main+0xdd8>)
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f7fc fade 	bl	80007e4 <__aeabi_ddiv>
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	f7fc fc7e 	bl	8000b30 <__aeabi_d2f>
 8004234:	4603      	mov	r3, r0
 8004236:	4a9e      	ldr	r2, [pc, #632]	@ (80044b0 <main+0xe18>)
 8004238:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 800423a:	489c      	ldr	r0, [pc, #624]	@ (80044ac <main+0xe14>)
 800423c:	f7fd fc89 	bl	8001b52 <Encoder_GetVelocity>
 8004240:	ee10 3a10 	vmov	r3, s0
 8004244:	4618      	mov	r0, r3
 8004246:	f7fc f94b 	bl	80004e0 <__aeabi_f2d>
 800424a:	a389      	add	r3, pc, #548	@ (adr r3, 8004470 <main+0xdd8>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fc fac8 	bl	80007e4 <__aeabi_ddiv>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	f7fc fc68 	bl	8000b30 <__aeabi_d2f>
 8004260:	4603      	mov	r3, r0
 8004262:	4a93      	ldr	r2, [pc, #588]	@ (80044b0 <main+0xe18>)
 8004264:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 8004266:	4b92      	ldr	r3, [pc, #584]	@ (80044b0 <main+0xe18>)
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 800426e:	4b90      	ldr	r3, [pc, #576]	@ (80044b0 <main+0xe18>)
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8004276:	4b8f      	ldr	r3, [pc, #572]	@ (80044b4 <main+0xe1c>)
 8004278:	edd3 7a00 	vldr	s15, [r3]
 800427c:	eeb0 0a67 	vmov.f32	s0, s15
 8004280:	488d      	ldr	r0, [pc, #564]	@ (80044b8 <main+0xe20>)
 8004282:	f7fd feed 	bl	8002060 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8004286:	488c      	ldr	r0, [pc, #560]	@ (80044b8 <main+0xe20>)
 8004288:	f7fd fefa 	bl	8002080 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 800428c:	4988      	ldr	r1, [pc, #544]	@ (80044b0 <main+0xe18>)
 800428e:	488a      	ldr	r0, [pc, #552]	@ (80044b8 <main+0xe20>)
 8004290:	f7fd ff43 	bl	800211a <Kalman_Update>
//			}
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004294:	4881      	ldr	r0, [pc, #516]	@ (800449c <main+0xe04>)
 8004296:	f7fd fc89 	bl	8001bac <Encoder_GetPosition_mm>
 800429a:	eeb0 8a40 	vmov.f32	s16, s0
 800429e:	4883      	ldr	r0, [pc, #524]	@ (80044ac <main+0xe14>)
 80042a0:	f7fd fc75 	bl	8001b8e <Encoder_GetDegree>
 80042a4:	eef0 8a40 	vmov.f32	s17, s0
 80042a8:	487c      	ldr	r0, [pc, #496]	@ (800449c <main+0xe04>)
 80042aa:	f7fd fc8e 	bl	8001bca <Encoder_GetVelocity_mm>
 80042ae:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 80042b2:	487e      	ldr	r0, [pc, #504]	@ (80044ac <main+0xe14>)
 80042b4:	f7fd fc4d 	bl	8001b52 <Encoder_GetVelocity>
 80042b8:	ee10 3a10 	vmov	r3, s0
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f90f 	bl	80004e0 <__aeabi_f2d>
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	4b7d      	ldr	r3, [pc, #500]	@ (80044bc <main+0xe24>)
 80042c8:	f7fc f962 	bl	8000590 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	a368      	add	r3, pc, #416	@ (adr r3, 8004478 <main+0xde0>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fc fa83 	bl	80007e4 <__aeabi_ddiv>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	f7fc fc23 	bl	8000b30 <__aeabi_d2f>
 80042ea:	4604      	mov	r4, r0
 80042ec:	486b      	ldr	r0, [pc, #428]	@ (800449c <main+0xe04>)
 80042ee:	f7fd fc7b 	bl	8001be8 <Encoder_GetAcceleration_mm>
 80042f2:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 80042f6:	486d      	ldr	r0, [pc, #436]	@ (80044ac <main+0xe14>)
 80042f8:	f7fd fc3a 	bl	8001b70 <Encoder_GetAcceleration>
 80042fc:	ee10 3a10 	vmov	r3, s0
 8004300:	4618      	mov	r0, r3
 8004302:	f7fc f8ed 	bl	80004e0 <__aeabi_f2d>
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <main+0xe24>)
 800430c:	f7fc f940 	bl	8000590 <__aeabi_dmul>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	a357      	add	r3, pc, #348	@ (adr r3, 8004478 <main+0xde0>)
 800431a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431e:	f7fc fa61 	bl	80007e4 <__aeabi_ddiv>
 8004322:	4602      	mov	r2, r0
 8004324:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	f7fc fc01 	bl	8000b30 <__aeabi_d2f>
 800432e:	4603      	mov	r3, r0
 8004330:	ee02 3a90 	vmov	s5, r3
 8004334:	eeb0 2a69 	vmov.f32	s4, s19
 8004338:	ee01 4a90 	vmov	s3, r4
 800433c:	eeb0 1a49 	vmov.f32	s2, s18
 8004340:	eef0 0a68 	vmov.f32	s1, s17
 8004344:	eeb0 0a48 	vmov.f32	s0, s16
 8004348:	4850      	ldr	r0, [pc, #320]	@ (800448c <main+0xdf4>)
 800434a:	f7fc ffce 	bl	80012ea <modbus_Update_All>

			if ((state_start == 1 || state_go_to == 1) && state_Emer ==0) {
 800434e:	4b5c      	ldr	r3, [pc, #368]	@ (80044c0 <main+0xe28>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d004      	beq.n	8004360 <main+0xcc8>
 8004356:	4b50      	ldr	r3, [pc, #320]	@ (8004498 <main+0xe00>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2b01      	cmp	r3, #1
 800435c:	f040 816d 	bne.w	800463a <main+0xfa2>
 8004360:	4b58      	ldr	r3, [pc, #352]	@ (80044c4 <main+0xe2c>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f040 8168 	bne.w	800463a <main+0xfa2>
				Revolute_dis();
 800436a:	f000 fd9d 	bl	8004ea8 <Revolute_dis>
				count_Tim2 += 1;
 800436e:	4b56      	ldr	r3, [pc, #344]	@ (80044c8 <main+0xe30>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	4a54      	ldr	r2, [pc, #336]	@ (80044c8 <main+0xe30>)
 8004376:	6013      	str	r3, [r2, #0]
				// Velocity Control Prismatic
				velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 8004378:	4848      	ldr	r0, [pc, #288]	@ (800449c <main+0xe04>)
 800437a:	f7fd fc26 	bl	8001bca <Encoder_GetVelocity_mm>
 800437e:	eef0 7a40 	vmov.f32	s15, s0
 8004382:	4b52      	ldr	r3, [pc, #328]	@ (80044cc <main+0xe34>)
 8004384:	edc3 7a00 	vstr	s15, [r3]
				//			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
				setvelocity_pris = vel_pris + V_pris_posi_PID;
 8004388:	4b51      	ldr	r3, [pc, #324]	@ (80044d0 <main+0xe38>)
 800438a:	ed93 7a00 	vldr	s14, [r3]
 800438e:	4b51      	ldr	r3, [pc, #324]	@ (80044d4 <main+0xe3c>)
 8004390:	edd3 7a00 	vldr	s15, [r3]
 8004394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004398:	4b4f      	ldr	r3, [pc, #316]	@ (80044d8 <main+0xe40>)
 800439a:	edc3 7a00 	vstr	s15, [r3]
				delta_velo_pris = setvelocity_pris - velocity_pris;
 800439e:	4b4e      	ldr	r3, [pc, #312]	@ (80044d8 <main+0xe40>)
 80043a0:	ed93 7a00 	vldr	s14, [r3]
 80043a4:	4b49      	ldr	r3, [pc, #292]	@ (80044cc <main+0xe34>)
 80043a6:	edd3 7a00 	vldr	s15, [r3]
 80043aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ae:	4b4b      	ldr	r3, [pc, #300]	@ (80044dc <main+0xe44>)
 80043b0:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
				V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 80043b4:	4b49      	ldr	r3, [pc, #292]	@ (80044dc <main+0xe44>)
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	f000 fb8f 	bl	8004ae0 <Prismatic_velocity_control>
 80043c2:	eef0 7a40 	vmov.f32	s15, s0
 80043c6:	4b37      	ldr	r3, [pc, #220]	@ (80044a4 <main+0xe0c>)
 80043c8:	edc3 7a00 	vstr	s15, [r3]

				// Velocity Control revolute
				velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 80043cc:	4837      	ldr	r0, [pc, #220]	@ (80044ac <main+0xe14>)
 80043ce:	f7fd fbc0 	bl	8001b52 <Encoder_GetVelocity>
 80043d2:	ee10 3a10 	vmov	r3, s0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc f882 	bl	80004e0 <__aeabi_f2d>
 80043dc:	a324      	add	r3, pc, #144	@ (adr r3, 8004470 <main+0xdd8>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	f7fc f9ff 	bl	80007e4 <__aeabi_ddiv>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	f7fc fb9f 	bl	8000b30 <__aeabi_d2f>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4a3a      	ldr	r2, [pc, #232]	@ (80044e0 <main+0xe48>)
 80043f6:	6013      	str	r3, [r2, #0]
				//			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
				setvelocity_rev = vel_rev + V_rev_posi_PID;
 80043f8:	4b3a      	ldr	r3, [pc, #232]	@ (80044e4 <main+0xe4c>)
 80043fa:	ed93 7a00 	vldr	s14, [r3]
 80043fe:	4b3a      	ldr	r3, [pc, #232]	@ (80044e8 <main+0xe50>)
 8004400:	edd3 7a00 	vldr	s15, [r3]
 8004404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004408:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <main+0xe54>)
 800440a:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_rev = setvelocity_rev - velocity_rev;
				delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 800440e:	4b37      	ldr	r3, [pc, #220]	@ (80044ec <main+0xe54>)
 8004410:	ed93 7a00 	vldr	s14, [r3]
 8004414:	4b28      	ldr	r3, [pc, #160]	@ (80044b8 <main+0xe20>)
 8004416:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 800441a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800441e:	4b34      	ldr	r3, [pc, #208]	@ (80044f0 <main+0xe58>)
 8004420:	edc3 7a00 	vstr	s15, [r3]
				V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 8004424:	4b32      	ldr	r3, [pc, #200]	@ (80044f0 <main+0xe58>)
 8004426:	edd3 7a00 	vldr	s15, [r3]
 800442a:	eeb0 0a67 	vmov.f32	s0, s15
 800442e:	f000 fc7d 	bl	8004d2c <Revolute_velocity_control>
 8004432:	eef0 7a40 	vmov.f32	s15, s0
 8004436:	4b1f      	ldr	r3, [pc, #124]	@ (80044b4 <main+0xe1c>)
 8004438:	edc3 7a00 	vstr	s15, [r3]
				if (count_Tim2 >= 10) {
 800443c:	4b22      	ldr	r3, [pc, #136]	@ (80044c8 <main+0xe30>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b09      	cmp	r3, #9
 8004442:	f340 80fa 	ble.w	800463a <main+0xfa2>
					// Position Control Prismatic
					position_pris = Encoder_GetPosition_mm(&encoder1);
 8004446:	4815      	ldr	r0, [pc, #84]	@ (800449c <main+0xe04>)
 8004448:	f7fd fbb0 	bl	8001bac <Encoder_GetPosition_mm>
 800444c:	eef0 7a40 	vmov.f32	s15, s0
 8004450:	4b28      	ldr	r3, [pc, #160]	@ (80044f4 <main+0xe5c>)
 8004452:	edc3 7a00 	vstr	s15, [r3]
					//				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
					setposition_pris = pos_pris;
 8004456:	4b28      	ldr	r3, [pc, #160]	@ (80044f8 <main+0xe60>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a28      	ldr	r2, [pc, #160]	@ (80044fc <main+0xe64>)
 800445c:	6013      	str	r3, [r2, #0]
					delta_posi_pris = setposition_pris - position_pris;
 800445e:	4b27      	ldr	r3, [pc, #156]	@ (80044fc <main+0xe64>)
 8004460:	ed93 7a00 	vldr	s14, [r3]
 8004464:	4b23      	ldr	r3, [pc, #140]	@ (80044f4 <main+0xe5c>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	e049      	b.n	8004500 <main+0xe68>
 800446c:	f3af 8000 	nop.w
 8004470:	aaaaaaab 	.word	0xaaaaaaab
 8004474:	400aaaaa 	.word	0x400aaaaa
 8004478:	e5604189 	.word	0xe5604189
 800447c:	400922d0 	.word	0x400922d0
 8004480:	20001a3c 	.word	0x20001a3c
 8004484:	20000554 	.word	0x20000554
 8004488:	200006bc 	.word	0x200006bc
 800448c:	200006f0 	.word	0x200006f0
 8004490:	20000d58 	.word	0x20000d58
 8004494:	200006cc 	.word	0x200006cc
 8004498:	200015a8 	.word	0x200015a8
 800449c:	2000036c 	.word	0x2000036c
 80044a0:	20001540 	.word	0x20001540
 80044a4:	20000dec 	.word	0x20000dec
 80044a8:	20000e84 	.word	0x20000e84
 80044ac:	200003a0 	.word	0x200003a0
 80044b0:	20001550 	.word	0x20001550
 80044b4:	20000e68 	.word	0x20000e68
 80044b8:	200011a8 	.word	0x200011a8
 80044bc:	40668000 	.word	0x40668000
 80044c0:	200015a4 	.word	0x200015a4
 80044c4:	200015d9 	.word	0x200015d9
 80044c8:	20000d70 	.word	0x20000d70
 80044cc:	20000de4 	.word	0x20000de4
 80044d0:	200003e0 	.word	0x200003e0
 80044d4:	20000dac 	.word	0x20000dac
 80044d8:	20000de8 	.word	0x20000de8
 80044dc:	20000dfc 	.word	0x20000dfc
 80044e0:	20000e60 	.word	0x20000e60
 80044e4:	200003e8 	.word	0x200003e8
 80044e8:	20000e2c 	.word	0x20000e2c
 80044ec:	20000e64 	.word	0x20000e64
 80044f0:	20000e78 	.word	0x20000e78
 80044f4:	20000da4 	.word	0x20000da4
 80044f8:	200003dc 	.word	0x200003dc
 80044fc:	20000da8 	.word	0x20000da8
 8004500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004504:	4ba0      	ldr	r3, [pc, #640]	@ (8004788 <main+0x10f0>)
 8004506:	edc3 7a00 	vstr	s15, [r3]
					if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 800450a:	4b9f      	ldr	r3, [pc, #636]	@ (8004788 <main+0x10f0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f7fb ffe6 	bl	80004e0 <__aeabi_f2d>
 8004514:	a396      	add	r3, pc, #600	@ (adr r3, 8004770 <main+0x10d8>)
 8004516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451a:	f7fc fab5 	bl	8000a88 <__aeabi_dcmple>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d015      	beq.n	8004550 <main+0xeb8>
 8004524:	4b98      	ldr	r3, [pc, #608]	@ (8004788 <main+0x10f0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f7fb ffd9 	bl	80004e0 <__aeabi_f2d>
 800452e:	a392      	add	r3, pc, #584	@ (adr r3, 8004778 <main+0x10e0>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fc fab2 	bl	8000a9c <__aeabi_dcmpge>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <main+0xeb8>
						V_pris_posi_PID = 0;
 800453e:	4b93      	ldr	r3, [pc, #588]	@ (800478c <main+0x10f4>)
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
						V_pris_velo_PID = 0;
 8004546:	4b92      	ldr	r3, [pc, #584]	@ (8004790 <main+0x10f8>)
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	e00b      	b.n	8004568 <main+0xed0>
					} else {
						V_pris_posi_PID = Prismatic_position_control(
 8004550:	4b8d      	ldr	r3, [pc, #564]	@ (8004788 <main+0x10f0>)
 8004552:	edd3 7a00 	vldr	s15, [r3]
 8004556:	eeb0 0a67 	vmov.f32	s0, s15
 800455a:	f000 fa49 	bl	80049f0 <Prismatic_position_control>
 800455e:	eef0 7a40 	vmov.f32	s15, s0
 8004562:	4b8a      	ldr	r3, [pc, #552]	@ (800478c <main+0x10f4>)
 8004564:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_pris);
					}
					//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);

					// Position Control Revolute
					position_rev = (Encoder_GetPosition(&encoder2)
 8004568:	488a      	ldr	r0, [pc, #552]	@ (8004794 <main+0x10fc>)
 800456a:	f7fd fae3 	bl	8001b34 <Encoder_GetPosition>
 800456e:	ee10 3a10 	vmov	r3, s0
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb ffb4 	bl	80004e0 <__aeabi_f2d>
							/ (100.0 / 30.0));
 8004578:	a381      	add	r3, pc, #516	@ (adr r3, 8004780 <main+0x10e8>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc f931 	bl	80007e4 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f7fc fad1 	bl	8000b30 <__aeabi_d2f>
 800458e:	4603      	mov	r3, r0
					position_rev = (Encoder_GetPosition(&encoder2)
 8004590:	4a81      	ldr	r2, [pc, #516]	@ (8004798 <main+0x1100>)
 8004592:	6013      	str	r3, [r2, #0]
					//				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
					setposition_rev = pos_rev; //+ Rev_backlash.backlash_offset;
 8004594:	4b81      	ldr	r3, [pc, #516]	@ (800479c <main+0x1104>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a81      	ldr	r2, [pc, #516]	@ (80047a0 <main+0x1108>)
 800459a:	6013      	str	r3, [r2, #0]
					Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
 800459c:	4b7f      	ldr	r3, [pc, #508]	@ (800479c <main+0x1104>)
 800459e:	edd3 7a00 	vldr	s15, [r3]
 80045a2:	4b80      	ldr	r3, [pc, #512]	@ (80047a4 <main+0x110c>)
 80045a4:	ed93 7a00 	vldr	s14, [r3]
 80045a8:	4b7f      	ldr	r3, [pc, #508]	@ (80047a8 <main+0x1110>)
 80045aa:	edd3 6a00 	vldr	s13, [r3]
 80045ae:	eeb0 1a66 	vmov.f32	s2, s13
 80045b2:	eef0 0a47 	vmov.f32	s1, s14
 80045b6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ba:	487c      	ldr	r0, [pc, #496]	@ (80047ac <main+0x1114>)
 80045bc:	f7fc fdcb 	bl	8001156 <Backlash_Update>
					delta_posi_rev = setposition_rev - position_rev;
 80045c0:	4b77      	ldr	r3, [pc, #476]	@ (80047a0 <main+0x1108>)
 80045c2:	ed93 7a00 	vldr	s14, [r3]
 80045c6:	4b74      	ldr	r3, [pc, #464]	@ (8004798 <main+0x1100>)
 80045c8:	edd3 7a00 	vldr	s15, [r3]
 80045cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045d0:	4b77      	ldr	r3, [pc, #476]	@ (80047b0 <main+0x1118>)
 80045d2:	edc3 7a00 	vstr	s15, [r3]
					if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 80045d6:	4b76      	ldr	r3, [pc, #472]	@ (80047b0 <main+0x1118>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fb ff80 	bl	80004e0 <__aeabi_f2d>
 80045e0:	a363      	add	r3, pc, #396	@ (adr r3, 8004770 <main+0x10d8>)
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f7fc fa4f 	bl	8000a88 <__aeabi_dcmple>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d015      	beq.n	800461c <main+0xf84>
 80045f0:	4b6f      	ldr	r3, [pc, #444]	@ (80047b0 <main+0x1118>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fb ff73 	bl	80004e0 <__aeabi_f2d>
 80045fa:	a35f      	add	r3, pc, #380	@ (adr r3, 8004778 <main+0x10e0>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fc fa4c 	bl	8000a9c <__aeabi_dcmpge>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d008      	beq.n	800461c <main+0xf84>
						V_rev_posi_PID = 0;
 800460a:	4b6a      	ldr	r3, [pc, #424]	@ (80047b4 <main+0x111c>)
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	601a      	str	r2, [r3, #0]
						V_rev_velo_PID = 0;
 8004612:	4b69      	ldr	r3, [pc, #420]	@ (80047b8 <main+0x1120>)
 8004614:	f04f 0200 	mov.w	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e00b      	b.n	8004634 <main+0xf9c>
					} else {
						V_rev_posi_PID = Revolute_position_control(
 800461c:	4b64      	ldr	r3, [pc, #400]	@ (80047b0 <main+0x1118>)
 800461e:	edd3 7a00 	vldr	s15, [r3]
 8004622:	eeb0 0a67 	vmov.f32	s0, s15
 8004626:	f000 fb09 	bl	8004c3c <Revolute_position_control>
 800462a:	eef0 7a40 	vmov.f32	s15, s0
 800462e:	4b61      	ldr	r3, [pc, #388]	@ (80047b4 <main+0x111c>)
 8004630:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_rev);
					}

					count_Tim2 = 0;
 8004634:	4b61      	ldr	r3, [pc, #388]	@ (80047bc <main+0x1124>)
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if ((state_start == 1 || state_go_to == 1) && state_Emer ==0) {
 800463a:	4b61      	ldr	r3, [pc, #388]	@ (80047c0 <main+0x1128>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d004      	beq.n	800464c <main+0xfb4>
 8004642:	4b60      	ldr	r3, [pc, #384]	@ (80047c4 <main+0x112c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b01      	cmp	r3, #1
 8004648:	f47f aa98 	bne.w	8003b7c <main+0x4e4>
 800464c:	4b5e      	ldr	r3, [pc, #376]	@ (80047c8 <main+0x1130>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	f47f aa93 	bne.w	8003b7c <main+0x4e4>
			if (V_pris_velo_PID < 0) {
 8004656:	4b4e      	ldr	r3, [pc, #312]	@ (8004790 <main+0x10f8>)
 8004658:	edd3 7a00 	vldr	s15, [r3]
 800465c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004664:	d50b      	bpl.n	800467e <main+0xfe6>
				DIR_24V = 0;
 8004666:	4b59      	ldr	r3, [pc, #356]	@ (80047cc <main+0x1134>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = fabsf(V_pris_velo_PID);
 800466c:	4b48      	ldr	r3, [pc, #288]	@ (8004790 <main+0x10f8>)
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	eef0 7ae7 	vabs.f32	s15, s15
 8004676:	4b56      	ldr	r3, [pc, #344]	@ (80047d0 <main+0x1138>)
 8004678:	edc3 7a00 	vstr	s15, [r3]
 800467c:	e00e      	b.n	800469c <main+0x1004>
			} else if (V_pris_velo_PID > 0) {
 800467e:	4b44      	ldr	r3, [pc, #272]	@ (8004790 <main+0x10f8>)
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468c:	dd06      	ble.n	800469c <main+0x1004>
				DIR_24V = 1;
 800468e:	4b4f      	ldr	r3, [pc, #316]	@ (80047cc <main+0x1134>)
 8004690:	2201      	movs	r2, #1
 8004692:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = V_pris_velo_PID;
 8004694:	4b3e      	ldr	r3, [pc, #248]	@ (8004790 <main+0x10f8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a4d      	ldr	r2, [pc, #308]	@ (80047d0 <main+0x1138>)
 800469a:	6013      	str	r3, [r2, #0]
			}
			pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 800469c:	4b4c      	ldr	r3, [pc, #304]	@ (80047d0 <main+0x1138>)
 800469e:	edd3 7a00 	vldr	s15, [r3]
 80046a2:	eeb0 0a67 	vmov.f32	s0, s15
 80046a6:	f000 fbdf 	bl	8004e68 <voltage_to_pwm>
 80046aa:	eef0 7a40 	vmov.f32	s15, s0
 80046ae:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <main+0x113c>)
 80046b0:	edc3 7a00 	vstr	s15, [r3]
//			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
//			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, pwm_pris_velo);

			if (V_rev_velo_PID < 0) {
 80046b4:	4b40      	ldr	r3, [pc, #256]	@ (80047b8 <main+0x1120>)
 80046b6:	edd3 7a00 	vldr	s15, [r3]
 80046ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	d50b      	bpl.n	80046dc <main+0x1044>
				DIR_18V = 0;
 80046c4:	4b44      	ldr	r3, [pc, #272]	@ (80047d8 <main+0x1140>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]
				V_absolute_rev = fabsf(V_rev_velo_PID);
 80046ca:	4b3b      	ldr	r3, [pc, #236]	@ (80047b8 <main+0x1120>)
 80046cc:	edd3 7a00 	vldr	s15, [r3]
 80046d0:	eef0 7ae7 	vabs.f32	s15, s15
 80046d4:	4b41      	ldr	r3, [pc, #260]	@ (80047dc <main+0x1144>)
 80046d6:	edc3 7a00 	vstr	s15, [r3]
 80046da:	e00e      	b.n	80046fa <main+0x1062>
			} else if (V_rev_velo_PID > 0) {
 80046dc:	4b36      	ldr	r3, [pc, #216]	@ (80047b8 <main+0x1120>)
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	dd06      	ble.n	80046fa <main+0x1062>
				DIR_18V = 1;
 80046ec:	4b3a      	ldr	r3, [pc, #232]	@ (80047d8 <main+0x1140>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
				V_absolute_rev = V_rev_velo_PID;
 80046f2:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <main+0x1120>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a39      	ldr	r2, [pc, #228]	@ (80047dc <main+0x1144>)
 80046f8:	6013      	str	r3, [r2, #0]
			}
			V_plant = V_absolute_rev + voltage_dis_rev;
 80046fa:	4b38      	ldr	r3, [pc, #224]	@ (80047dc <main+0x1144>)
 80046fc:	ed93 7a00 	vldr	s14, [r3]
 8004700:	4b37      	ldr	r3, [pc, #220]	@ (80047e0 <main+0x1148>)
 8004702:	edd3 7a00 	vldr	s15, [r3]
 8004706:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470a:	4b36      	ldr	r3, [pc, #216]	@ (80047e4 <main+0x114c>)
 800470c:	edc3 7a00 	vstr	s15, [r3]
			if (V_plant > 18) {
 8004710:	4b34      	ldr	r3, [pc, #208]	@ (80047e4 <main+0x114c>)
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 800471a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800471e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004722:	dd02      	ble.n	800472a <main+0x1092>
				V_plant = 18;
 8004724:	4b2f      	ldr	r3, [pc, #188]	@ (80047e4 <main+0x114c>)
 8004726:	4a30      	ldr	r2, [pc, #192]	@ (80047e8 <main+0x1150>)
 8004728:	601a      	str	r2, [r3, #0]
			}
			pwm_rev_velo = (V_plant / 18) * 65535;
 800472a:	4b2e      	ldr	r3, [pc, #184]	@ (80047e4 <main+0x114c>)
 800472c:	ed93 7a00 	vldr	s14, [r3]
 8004730:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8004734:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004738:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80047ec <main+0x1154>
 800473c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004740:	4b2b      	ldr	r3, [pc, #172]	@ (80047f0 <main+0x1158>)
 8004742:	edc3 7a00 	vstr	s15, [r3]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 8004746:	4b24      	ldr	r3, [pc, #144]	@ (80047d8 <main+0x1140>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	2140      	movs	r1, #64	@ 0x40
 8004750:	4828      	ldr	r0, [pc, #160]	@ (80047f4 <main+0x115c>)
 8004752:	f003 fc73 	bl	800803c <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, pwm_rev_velo);
 8004756:	4b26      	ldr	r3, [pc, #152]	@ (80047f0 <main+0x1158>)
 8004758:	edd3 7a00 	vldr	s15, [r3]
 800475c:	4b26      	ldr	r3, [pc, #152]	@ (80047f8 <main+0x1160>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004764:	ee17 2a90 	vmov	r2, s15
 8004768:	63da      	str	r2, [r3, #60]	@ 0x3c
	while (1) {
 800476a:	f7ff ba07 	b.w	8003b7c <main+0x4e4>
 800476e:	bf00      	nop
 8004770:	9999999a 	.word	0x9999999a
 8004774:	3fb99999 	.word	0x3fb99999
 8004778:	9999999a 	.word	0x9999999a
 800477c:	bfb99999 	.word	0xbfb99999
 8004780:	aaaaaaab 	.word	0xaaaaaaab
 8004784:	400aaaaa 	.word	0x400aaaaa
 8004788:	20000dbc 	.word	0x20000dbc
 800478c:	20000dac 	.word	0x20000dac
 8004790:	20000dec 	.word	0x20000dec
 8004794:	200003a0 	.word	0x200003a0
 8004798:	20000e24 	.word	0x20000e24
 800479c:	200003e4 	.word	0x200003e4
 80047a0:	20000e28 	.word	0x20000e28
 80047a4:	200006dc 	.word	0x200006dc
 80047a8:	200006e0 	.word	0x200006e0
 80047ac:	20000d74 	.word	0x20000d74
 80047b0:	20000e38 	.word	0x20000e38
 80047b4:	20000e2c 	.word	0x20000e2c
 80047b8:	20000e68 	.word	0x20000e68
 80047bc:	20000d70 	.word	0x20000d70
 80047c0:	200015a4 	.word	0x200015a4
 80047c4:	200015a8 	.word	0x200015a8
 80047c8:	200015d9 	.word	0x200015d9
 80047cc:	20000d68 	.word	0x20000d68
 80047d0:	20000db0 	.word	0x20000db0
 80047d4:	20000df0 	.word	0x20000df0
 80047d8:	20000d64 	.word	0x20000d64
 80047dc:	20000e7c 	.word	0x20000e7c
 80047e0:	20000d6c 	.word	0x20000d6c
 80047e4:	20000e80 	.word	0x20000e80
 80047e8:	41900000 	.word	0x41900000
 80047ec:	477fff00 	.word	0x477fff00
 80047f0:	20000e6c 	.word	0x20000e6c
 80047f4:	48000800 	.word	0x48000800
 80047f8:	20001bd4 	.word	0x20001bd4

080047fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b094      	sub	sp, #80	@ 0x50
 8004800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004802:	f107 0318 	add.w	r3, r7, #24
 8004806:	2238      	movs	r2, #56	@ 0x38
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f00a fbca 	bl	800efa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004810:	1d3b      	adds	r3, r7, #4
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	605a      	str	r2, [r3, #4]
 8004818:	609a      	str	r2, [r3, #8]
 800481a:	60da      	str	r2, [r3, #12]
 800481c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800481e:	2000      	movs	r0, #0
 8004820:	f003 fc3c 	bl	800809c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004824:	2302      	movs	r3, #2
 8004826:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800482e:	2340      	movs	r3, #64	@ 0x40
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004832:	2302      	movs	r3, #2
 8004834:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004836:	2302      	movs	r3, #2
 8004838:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800483a:	2304      	movs	r3, #4
 800483c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800483e:	2355      	movs	r3, #85	@ 0x55
 8004840:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004842:	2302      	movs	r3, #2
 8004844:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004846:	2302      	movs	r3, #2
 8004848:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800484a:	2302      	movs	r3, #2
 800484c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800484e:	f107 0318 	add.w	r3, r7, #24
 8004852:	4618      	mov	r0, r3
 8004854:	f003 fcd6 	bl	8008204 <HAL_RCC_OscConfig>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800485e:	f000 fb61 	bl	8004f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004862:	230f      	movs	r3, #15
 8004864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004866:	2303      	movs	r3, #3
 8004868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800486a:	2300      	movs	r3, #0
 800486c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800486e:	2300      	movs	r3, #0
 8004870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004876:	1d3b      	adds	r3, r7, #4
 8004878:	2104      	movs	r1, #4
 800487a:	4618      	mov	r0, r3
 800487c:	f003 ffd4 	bl	8008828 <HAL_RCC_ClockConfig>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004886:	f000 fb4d 	bl	8004f24 <Error_Handler>
  }
}
 800488a:	bf00      	nop
 800488c:	3750      	adds	r7, #80	@ 0x50
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048a4:	d103      	bne.n	80048ae <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 80048a6:	4b2c      	ldr	r3, [pc, #176]	@ (8004958 <HAL_GPIO_EXTI_Callback+0xc4>)
 80048a8:	2209      	movs	r2, #9
 80048aa:	601a      	str	r2, [r3, #0]
		Home_Pris = 1;
		State = 15;
//		set_home_pris = 1;
//		count_pris += 1;
	}
}
 80048ac:	e04e      	b.n	800494c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b4:	d103      	bne.n	80048be <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 80048b6:	4b28      	ldr	r3, [pc, #160]	@ (8004958 <HAL_GPIO_EXTI_Callback+0xc4>)
 80048b8:	220a      	movs	r2, #10
 80048ba:	601a      	str	r2, [r3, #0]
}
 80048bc:	e046      	b.n	800494c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c4:	d11d      	bne.n	8004902 <HAL_GPIO_EXTI_Callback+0x6e>
		if (Emer_trick - Emer_last_trick >= 1000) {
 80048c6:	4b25      	ldr	r3, [pc, #148]	@ (800495c <HAL_GPIO_EXTI_Callback+0xc8>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	4b25      	ldr	r3, [pc, #148]	@ (8004960 <HAL_GPIO_EXTI_Callback+0xcc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048d4:	d311      	bcc.n	80048fa <HAL_GPIO_EXTI_Callback+0x66>
			Emer_count += 1;
 80048d6:	4b23      	ldr	r3, [pc, #140]	@ (8004964 <HAL_GPIO_EXTI_Callback+0xd0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3301      	adds	r3, #1
 80048dc:	4a21      	ldr	r2, [pc, #132]	@ (8004964 <HAL_GPIO_EXTI_Callback+0xd0>)
 80048de:	6013      	str	r3, [r2, #0]
			Emer_last_trick = Emer_trick;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	@ (800495c <HAL_GPIO_EXTI_Callback+0xc8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004960 <HAL_GPIO_EXTI_Callback+0xcc>)
 80048e6:	6013      	str	r3, [r2, #0]
			if (Emer_count % 2 == 1) {
 80048e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004964 <HAL_GPIO_EXTI_Callback+0xd0>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_GPIO_EXTI_Callback+0x66>
				Emer_state = 1;
 80048f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004968 <HAL_GPIO_EXTI_Callback+0xd4>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
		State = 11;
 80048fa:	4b17      	ldr	r3, [pc, #92]	@ (8004958 <HAL_GPIO_EXTI_Callback+0xc4>)
 80048fc:	220b      	movs	r2, #11
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	e024      	b.n	800494c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004908:	d106      	bne.n	8004918 <HAL_GPIO_EXTI_Callback+0x84>
		Home_Rev = 1;
 800490a:	4b18      	ldr	r3, [pc, #96]	@ (800496c <HAL_GPIO_EXTI_Callback+0xd8>)
 800490c:	2201      	movs	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]
		State = 12;
 8004910:	4b11      	ldr	r3, [pc, #68]	@ (8004958 <HAL_GPIO_EXTI_Callback+0xc4>)
 8004912:	220c      	movs	r2, #12
 8004914:	601a      	str	r2, [r3, #0]
}
 8004916:	e019      	b.n	800494c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 8004918:	88fb      	ldrh	r3, [r7, #6]
 800491a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800491e:	d103      	bne.n	8004928 <HAL_GPIO_EXTI_Callback+0x94>
		State = 13;
 8004920:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <HAL_GPIO_EXTI_Callback+0xc4>)
 8004922:	220d      	movs	r2, #13
 8004924:	601a      	str	r2, [r3, #0]
}
 8004926:	e011      	b.n	800494c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 8004928:	88fb      	ldrh	r3, [r7, #6]
 800492a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800492e:	d103      	bne.n	8004938 <HAL_GPIO_EXTI_Callback+0xa4>
		State = 14;
 8004930:	4b09      	ldr	r3, [pc, #36]	@ (8004958 <HAL_GPIO_EXTI_Callback+0xc4>)
 8004932:	220e      	movs	r2, #14
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	e009      	b.n	800494c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800493e:	d105      	bne.n	800494c <HAL_GPIO_EXTI_Callback+0xb8>
		Home_Pris = 1;
 8004940:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <HAL_GPIO_EXTI_Callback+0xdc>)
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
		State = 15;
 8004946:	4b04      	ldr	r3, [pc, #16]	@ (8004958 <HAL_GPIO_EXTI_Callback+0xc4>)
 8004948:	220f      	movs	r2, #15
 800494a:	601a      	str	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	200006e8 	.word	0x200006e8
 800495c:	200015b0 	.word	0x200015b0
 8004960:	200015b4 	.word	0x200015b4
 8004964:	200015bc 	.word	0x200015bc
 8004968:	200015b8 	.word	0x200015b8
 800496c:	200015ad 	.word	0x200015ad
 8004970:	200015ac 	.word	0x200015ac

08004974 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6) {
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a04      	ldr	r2, [pc, #16]	@ (8004994 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <HAL_TIM_PeriodElapsedCallback+0x16>
		emergency_process_sample();
 8004986:	f000 f807 	bl	8004998 <emergency_process_sample>
	}
}
 800498a:	bf00      	nop
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40001000 	.word	0x40001000

08004998 <emergency_process_sample>:

void emergency_process_sample() {
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
	/* Read raw switch state (0 or 1) */
	uint8_t raw_switch = HAL_GPIO_ReadPin(EMERGENCY_SWITCH_PORT, EMERGENCY_SWITCH_PIN);
 800499e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049a2:	4810      	ldr	r0, [pc, #64]	@ (80049e4 <emergency_process_sample+0x4c>)
 80049a4:	f003 fb32 	bl	800800c <HAL_GPIO_ReadPin>
 80049a8:	4603      	mov	r3, r0
 80049aa:	71fb      	strb	r3, [r7, #7]

	/* Process through digital filter */
	uint8_t state_changed = emergency_switch_update(&emergency_filter, raw_switch);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	4619      	mov	r1, r3
 80049b0:	480d      	ldr	r0, [pc, #52]	@ (80049e8 <emergency_process_sample+0x50>)
 80049b2:	f7fe fc85 	bl	80032c0 <emergency_switch_update>
 80049b6:	4603      	mov	r3, r0
 80049b8:	71bb      	strb	r3, [r7, #6]

	/* Check if state changed */
	if (state_changed) {
 80049ba:	79bb      	ldrb	r3, [r7, #6]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <emergency_process_sample+0x42>
		if (emergency_switch_is_pressed(&emergency_filter)) {
 80049c0:	4809      	ldr	r0, [pc, #36]	@ (80049e8 <emergency_process_sample+0x50>)
 80049c2:	f7fe fd07 	bl	80033d4 <emergency_switch_is_pressed>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <emergency_process_sample+0x3c>
			emergency_active = 1;
 80049cc:	4b07      	ldr	r3, [pc, #28]	@ (80049ec <emergency_process_sample+0x54>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
		} else {
			emergency_active = 0;
		}
	}

}
 80049d2:	e002      	b.n	80049da <emergency_process_sample+0x42>
			emergency_active = 0;
 80049d4:	4b05      	ldr	r3, [pc, #20]	@ (80049ec <emergency_process_sample+0x54>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
}
 80049da:	bf00      	nop
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	48000800 	.word	0x48000800
 80049e8:	200015c0 	.word	0x200015c0
 80049ec:	200015d8 	.word	0x200015d8

080049f0 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 80049fa:	4a36      	ldr	r2, [pc, #216]	@ (8004ad4 <Prismatic_position_control+0xe4>)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8004a00:	4b34      	ldr	r3, [pc, #208]	@ (8004ad4 <Prismatic_position_control+0xe4>)
 8004a02:	edd3 7a00 	vldr	s15, [r3]
 8004a06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0e:	d50a      	bpl.n	8004a26 <Prismatic_position_control+0x36>
 8004a10:	4b30      	ldr	r3, [pc, #192]	@ (8004ad4 <Prismatic_position_control+0xe4>)
 8004a12:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a1e:	dd02      	ble.n	8004a26 <Prismatic_position_control+0x36>
		anti_windup = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e014      	b.n	8004a50 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 8004a26:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad4 <Prismatic_position_control+0xe4>)
 8004a28:	edd3 7a00 	vldr	s15, [r3]
 8004a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a34:	dd0a      	ble.n	8004a4c <Prismatic_position_control+0x5c>
 8004a36:	4b27      	ldr	r3, [pc, #156]	@ (8004ad4 <Prismatic_position_control+0xe4>)
 8004a38:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a44:	d502      	bpl.n	8004a4c <Prismatic_position_control+0x5c>
		anti_windup = 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e001      	b.n	8004a50 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <Prismatic_position_control+0xe8>)
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	ed93 7a00 	vldr	s14, [r3]
 8004a5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a62:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a72:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004a76:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a98:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 8004ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8004adc <Prismatic_position_control+0xec>)
 8004ab4:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 8004ab6:	4b07      	ldr	r3, [pc, #28]	@ (8004ad4 <Prismatic_position_control+0xe4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a06      	ldr	r2, [pc, #24]	@ (8004ad4 <Prismatic_position_control+0xe4>)
 8004abc:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8004abe:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <Prismatic_position_control+0xec>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	ee07 3a90 	vmov	s15, r3
}
 8004ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	20000db4 	.word	0x20000db4
 8004ad8:	20000d80 	.word	0x20000d80
 8004adc:	20000dac 	.word	0x20000dac

08004ae0 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b087      	sub	sp, #28
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] = delta_velo;
 8004aea:	4a4e      	ldr	r2, [pc, #312]	@ (8004c24 <Prismatic_velocity_control+0x144>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8004af0:	4b4c      	ldr	r3, [pc, #304]	@ (8004c24 <Prismatic_velocity_control+0x144>)
 8004af2:	edd3 7a00 	vldr	s15, [r3]
 8004af6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afe:	d50a      	bpl.n	8004b16 <Prismatic_velocity_control+0x36>
 8004b00:	4b48      	ldr	r3, [pc, #288]	@ (8004c24 <Prismatic_velocity_control+0x144>)
 8004b02:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0e:	dd02      	ble.n	8004b16 <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e014      	b.n	8004b40 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 8004b16:	4b43      	ldr	r3, [pc, #268]	@ (8004c24 <Prismatic_velocity_control+0x144>)
 8004b18:	edd3 7a00 	vldr	s15, [r3]
 8004b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b24:	dd0a      	ble.n	8004b3c <Prismatic_velocity_control+0x5c>
 8004b26:	4b3f      	ldr	r3, [pc, #252]	@ (8004c24 <Prismatic_velocity_control+0x144>)
 8004b28:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b34:	d502      	bpl.n	8004b3c <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e001      	b.n	8004b40 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8004b40:	4b39      	ldr	r3, [pc, #228]	@ (8004c28 <Prismatic_velocity_control+0x148>)
 8004b42:	edd3 7a00 	vldr	s15, [r3]
 8004b46:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8004b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b52:	db07      	blt.n	8004b64 <Prismatic_velocity_control+0x84>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d104      	bne.n	8004b64 <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 8004b5a:	4b34      	ldr	r3, [pc, #208]	@ (8004c2c <Prismatic_velocity_control+0x14c>)
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	61da      	str	r2, [r3, #28]
 8004b62:	e002      	b.n	8004b6a <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 8004b64:	4b31      	ldr	r3, [pc, #196]	@ (8004c2c <Prismatic_velocity_control+0x14c>)
 8004b66:	4a32      	ldr	r2, [pc, #200]	@ (8004c30 <Prismatic_velocity_control+0x150>)
 8004b68:	61da      	str	r2, [r3, #28]
 8004b6a:	4b30      	ldr	r3, [pc, #192]	@ (8004c2c <Prismatic_velocity_control+0x14c>)
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	ed93 7a00 	vldr	s14, [r3]
 8004b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004b90:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb2:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	615a      	str	r2, [r3, #20]
    return (out);
 8004bca:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8004bcc:	4a16      	ldr	r2, [pc, #88]	@ (8004c28 <Prismatic_velocity_control+0x148>)
 8004bce:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8004bd0:	4b15      	ldr	r3, [pc, #84]	@ (8004c28 <Prismatic_velocity_control+0x148>)
 8004bd2:	edd3 7a00 	vldr	s15, [r3]
 8004bd6:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8004bda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be2:	dd03      	ble.n	8004bec <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 8004be4:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <Prismatic_velocity_control+0x148>)
 8004be6:	4a13      	ldr	r2, [pc, #76]	@ (8004c34 <Prismatic_velocity_control+0x154>)
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e00c      	b.n	8004c06 <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8004bec:	4b0e      	ldr	r3, [pc, #56]	@ (8004c28 <Prismatic_velocity_control+0x148>)
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8004bf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	d502      	bpl.n	8004c06 <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8004c00:	4b09      	ldr	r3, [pc, #36]	@ (8004c28 <Prismatic_velocity_control+0x148>)
 8004c02:	4a0d      	ldr	r2, [pc, #52]	@ (8004c38 <Prismatic_velocity_control+0x158>)
 8004c04:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 8004c06:	4b07      	ldr	r3, [pc, #28]	@ (8004c24 <Prismatic_velocity_control+0x144>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a06      	ldr	r2, [pc, #24]	@ (8004c24 <Prismatic_velocity_control+0x144>)
 8004c0c:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <Prismatic_velocity_control+0x148>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	ee07 3a90 	vmov	s15, r3
}
 8004c16:	eeb0 0a67 	vmov.f32	s0, s15
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	20000df4 	.word	0x20000df4
 8004c28:	20000dec 	.word	0x20000dec
 8004c2c:	20000dc0 	.word	0x20000dc0
 8004c30:	3a83126f 	.word	0x3a83126f
 8004c34:	41c00000 	.word	0x41c00000
 8004c38:	c1c00000 	.word	0xc1c00000

08004c3c <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 8004c46:	4a36      	ldr	r2, [pc, #216]	@ (8004d20 <Revolute_position_control+0xe4>)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 8004c4c:	4b34      	ldr	r3, [pc, #208]	@ (8004d20 <Revolute_position_control+0xe4>)
 8004c4e:	edd3 7a00 	vldr	s15, [r3]
 8004c52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5a:	d50a      	bpl.n	8004c72 <Revolute_position_control+0x36>
 8004c5c:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <Revolute_position_control+0xe4>)
 8004c5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6a:	dd02      	ble.n	8004c72 <Revolute_position_control+0x36>
		anti_windup = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
 8004c70:	e014      	b.n	8004c9c <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 8004c72:	4b2b      	ldr	r3, [pc, #172]	@ (8004d20 <Revolute_position_control+0xe4>)
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c80:	dd0a      	ble.n	8004c98 <Revolute_position_control+0x5c>
 8004c82:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <Revolute_position_control+0xe4>)
 8004c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8004c88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c90:	d502      	bpl.n	8004c98 <Revolute_position_control+0x5c>
		anti_windup = 0;
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e001      	b.n	8004c9c <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	4b21      	ldr	r3, [pc, #132]	@ (8004d24 <Revolute_position_control+0xe8>)
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	ed93 7a00 	vldr	s14, [r3]
 8004caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cae:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	edd3 6a01 	vldr	s13, [r3, #4]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	edd3 7a04 	vldr	s15, [r3, #16]
 8004cd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004cd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce4:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	68da      	ldr	r2, [r3, #12]
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	615a      	str	r2, [r3, #20]
    return (out);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 8004cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004d28 <Revolute_position_control+0xec>)
 8004d00:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <Revolute_position_control+0xe4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a06      	ldr	r2, [pc, #24]	@ (8004d20 <Revolute_position_control+0xe4>)
 8004d08:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 8004d0a:	4b07      	ldr	r3, [pc, #28]	@ (8004d28 <Revolute_position_control+0xec>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	ee07 3a90 	vmov	s15, r3
}
 8004d12:	eeb0 0a67 	vmov.f32	s0, s15
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr
 8004d20:	20000e30 	.word	0x20000e30
 8004d24:	20000e00 	.word	0x20000e00
 8004d28:	20000e2c 	.word	0x20000e2c

08004d2c <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] = delta_velo;
 8004d36:	4a47      	ldr	r2, [pc, #284]	@ (8004e54 <Revolute_velocity_control+0x128>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 8004d3c:	4b45      	ldr	r3, [pc, #276]	@ (8004e54 <Revolute_velocity_control+0x128>)
 8004d3e:	edd3 7a00 	vldr	s15, [r3]
 8004d42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d4a:	d50a      	bpl.n	8004d62 <Revolute_velocity_control+0x36>
 8004d4c:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <Revolute_velocity_control+0x128>)
 8004d4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	dd02      	ble.n	8004d62 <Revolute_velocity_control+0x36>
		anti_windup = 0;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e014      	b.n	8004d8c <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 8004d62:	4b3c      	ldr	r3, [pc, #240]	@ (8004e54 <Revolute_velocity_control+0x128>)
 8004d64:	edd3 7a00 	vldr	s15, [r3]
 8004d68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	dd0a      	ble.n	8004d88 <Revolute_velocity_control+0x5c>
 8004d72:	4b38      	ldr	r3, [pc, #224]	@ (8004e54 <Revolute_velocity_control+0x128>)
 8004d74:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d80:	d502      	bpl.n	8004d88 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e001      	b.n	8004d8c <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 8004d8c:	4b32      	ldr	r3, [pc, #200]	@ (8004e58 <Revolute_velocity_control+0x12c>)
 8004d8e:	edd3 7a00 	vldr	s15, [r3]
 8004d92:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004d96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9e:	db07      	blt.n	8004db0 <Revolute_velocity_control+0x84>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d104      	bne.n	8004db0 <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 8004da6:	4b2d      	ldr	r3, [pc, #180]	@ (8004e5c <Revolute_velocity_control+0x130>)
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	61da      	str	r2, [r3, #28]
 8004dae:	e002      	b.n	8004db6 <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 8004db0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e5c <Revolute_velocity_control+0x130>)
 8004db2:	4a2b      	ldr	r2, [pc, #172]	@ (8004e60 <Revolute_velocity_control+0x134>)
 8004db4:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 8004db6:	4b28      	ldr	r3, [pc, #160]	@ (8004e58 <Revolute_velocity_control+0x12c>)
 8004db8:	edd3 7a00 	vldr	s15, [r3]
 8004dbc:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc8:	dd02      	ble.n	8004dd0 <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 8004dca:	4b23      	ldr	r3, [pc, #140]	@ (8004e58 <Revolute_velocity_control+0x12c>)
 8004dcc:	4a25      	ldr	r2, [pc, #148]	@ (8004e64 <Revolute_velocity_control+0x138>)
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	4b22      	ldr	r3, [pc, #136]	@ (8004e5c <Revolute_velocity_control+0x130>)
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	ed93 7a00 	vldr	s14, [r3]
 8004dde:	edd7 7a03 	vldr	s15, [r7, #12]
 8004de2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	edd3 6a01 	vldr	s13, [r3, #4]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	edd3 7a03 	vldr	s15, [r3, #12]
 8004df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004df6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e18:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	615a      	str	r2, [r3, #20]
    return (out);
 8004e30:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 8004e32:	4a09      	ldr	r2, [pc, #36]	@ (8004e58 <Revolute_velocity_control+0x12c>)
 8004e34:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 8004e36:	4b07      	ldr	r3, [pc, #28]	@ (8004e54 <Revolute_velocity_control+0x128>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a06      	ldr	r2, [pc, #24]	@ (8004e54 <Revolute_velocity_control+0x128>)
 8004e3c:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <Revolute_velocity_control+0x12c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	ee07 3a90 	vmov	s15, r3
}
 8004e46:	eeb0 0a67 	vmov.f32	s0, s15
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	20000e70 	.word	0x20000e70
 8004e58:	20000e68 	.word	0x20000e68
 8004e5c:	20000e3c 	.word	0x20000e3c
 8004e60:	3a83126f 	.word	0x3a83126f
 8004e64:	41900000 	.word	0x41900000

08004e68 <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 8004e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e76:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004ea0 <voltage_to_pwm+0x38>
 8004e7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004e7e:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8004e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e86:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	ee07 3a90 	vmov	s15, r3
}
 8004e90:	eeb0 0a67 	vmov.f32	s0, s15
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	477fff00 	.word	0x477fff00
 8004ea4:	00000000 	.word	0x00000000

08004ea8 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 8004ea8:	b5b0      	push	{r4, r5, r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
//					* 0.4);
//	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0));
//	encoder = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 8004eac:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <Revolute_dis+0x70>)
 8004eae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8004eb2:	4b19      	ldr	r3, [pc, #100]	@ (8004f18 <Revolute_dis+0x70>)
 8004eb4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004eb8:	f7fb fc94 	bl	80007e4 <__aeabi_ddiv>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4b15      	ldr	r3, [pc, #84]	@ (8004f1c <Revolute_dis+0x74>)
 8004ec6:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb fb08 	bl	80004e0 <__aeabi_f2d>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
			* 1.0 / 3.3;
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	4629      	mov	r1, r5
 8004ed8:	f7fb fb5a 	bl	8000590 <__aeabi_dmul>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4610      	mov	r0, r2
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	a30a      	add	r3, pc, #40	@ (adr r3, 8004f10 <Revolute_dis+0x68>)
 8004ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eea:	f7fb fc7b 	bl	80007e4 <__aeabi_ddiv>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	f7fb fe1b 	bl	8000b30 <__aeabi_d2f>
 8004efa:	4603      	mov	r3, r0
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 8004efc:	4a08      	ldr	r2, [pc, #32]	@ (8004f20 <Revolute_dis+0x78>)
 8004efe:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 8004f00:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <Revolute_dis+0x78>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	ee07 3a90 	vmov	s15, r3
}
 8004f08:	eeb0 0a67 	vmov.f32	s0, s15
 8004f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	66666666 	.word	0x66666666
 8004f14:	400a6666 	.word	0x400a6666
 8004f18:	20001508 	.word	0x20001508
 8004f1c:	200011a8 	.word	0x200011a8
 8004f20:	20000d6c 	.word	0x20000d6c

08004f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004f28:	b672      	cpsid	i
}
 8004f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004f2c:	bf00      	nop
 8004f2e:	e7fd      	b.n	8004f2c <Error_Handler+0x8>

08004f30 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004f34:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <MX_SPI1_Init+0x78>)
 8004f38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f42:	4b18      	ldr	r3, [pc, #96]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f48:	4b16      	ldr	r3, [pc, #88]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f4a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004f4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004f50:	4b14      	ldr	r3, [pc, #80]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f52:	2202      	movs	r2, #2
 8004f54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f56:	4b13      	ldr	r3, [pc, #76]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f58:	2201      	movs	r2, #1
 8004f5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f5c:	4b11      	ldr	r3, [pc, #68]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004f64:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f66:	2238      	movs	r2, #56	@ 0x38
 8004f68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8004f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f6c:	2280      	movs	r2, #128	@ 0x80
 8004f6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f70:	4b0c      	ldr	r3, [pc, #48]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f76:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004f7c:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f7e:	2207      	movs	r2, #7
 8004f80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004f82:	4b08      	ldr	r3, [pc, #32]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004f88:	4b06      	ldr	r3, [pc, #24]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f8e:	4805      	ldr	r0, [pc, #20]	@ (8004fa4 <MX_SPI1_Init+0x74>)
 8004f90:	f004 f8b4 	bl	80090fc <HAL_SPI_Init>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004f9a:	f7ff ffc3 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f9e:	bf00      	nop
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	200015dc 	.word	0x200015dc
 8004fa8:	40013000 	.word	0x40013000

08004fac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	@ 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a25      	ldr	r2, [pc, #148]	@ (8005060 <HAL_SPI_MspInit+0xb4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d144      	bne.n	8005058 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004fce:	4b25      	ldr	r3, [pc, #148]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8004fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd2:	4a24      	ldr	r2, [pc, #144]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8004fd4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004fda:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fe2:	613b      	str	r3, [r7, #16]
 8004fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fea:	4a1e      	ldr	r2, [pc, #120]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffe:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8005000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005002:	4a18      	ldr	r2, [pc, #96]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800500a:	4b16      	ldr	r3, [pc, #88]	@ (8005064 <HAL_SPI_MspInit+0xb8>)
 800500c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	60bb      	str	r3, [r7, #8]
 8005014:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005016:	2320      	movs	r3, #32
 8005018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800501a:	2302      	movs	r3, #2
 800501c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005022:	2300      	movs	r3, #0
 8005024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005026:	2305      	movs	r3, #5
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800502a:	f107 0314 	add.w	r3, r7, #20
 800502e:	4619      	mov	r1, r3
 8005030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005034:	f002 fe68 	bl	8007d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005038:	2330      	movs	r3, #48	@ 0x30
 800503a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503c:	2302      	movs	r3, #2
 800503e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005040:	2300      	movs	r3, #0
 8005042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005044:	2300      	movs	r3, #0
 8005046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005048:	2305      	movs	r3, #5
 800504a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504c:	f107 0314 	add.w	r3, r7, #20
 8005050:	4619      	mov	r1, r3
 8005052:	4805      	ldr	r0, [pc, #20]	@ (8005068 <HAL_SPI_MspInit+0xbc>)
 8005054:	f002 fe58 	bl	8007d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005058:	bf00      	nop
 800505a:	3728      	adds	r7, #40	@ 0x28
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	40013000 	.word	0x40013000
 8005064:	40021000 	.word	0x40021000
 8005068:	48000400 	.word	0x48000400

0800506c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005072:	4b0f      	ldr	r3, [pc, #60]	@ (80050b0 <HAL_MspInit+0x44>)
 8005074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005076:	4a0e      	ldr	r2, [pc, #56]	@ (80050b0 <HAL_MspInit+0x44>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	6613      	str	r3, [r2, #96]	@ 0x60
 800507e:	4b0c      	ldr	r3, [pc, #48]	@ (80050b0 <HAL_MspInit+0x44>)
 8005080:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	607b      	str	r3, [r7, #4]
 8005088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800508a:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <HAL_MspInit+0x44>)
 800508c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800508e:	4a08      	ldr	r2, [pc, #32]	@ (80050b0 <HAL_MspInit+0x44>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005094:	6593      	str	r3, [r2, #88]	@ 0x58
 8005096:	4b06      	ldr	r3, [pc, #24]	@ (80050b0 <HAL_MspInit+0x44>)
 8005098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800509e:	603b      	str	r3, [r7, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80050a2:	f003 f89f 	bl	80081e4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000

080050b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <NMI_Handler+0x4>

080050bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <HardFault_Handler+0x4>

080050c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <MemManage_Handler+0x4>

080050cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <BusFault_Handler+0x4>

080050d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d8:	bf00      	nop
 80050da:	e7fd      	b.n	80050d8 <UsageFault_Handler+0x4>

080050dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050ee:	bf00      	nop
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050fc:	bf00      	nop
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800510a:	f000 fed3 	bl	8005eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800510e:	bf00      	nop
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005118:	4802      	ldr	r0, [pc, #8]	@ (8005124 <DMA1_Channel1_IRQHandler+0x10>)
 800511a:	f002 fc9a 	bl	8007a52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20001d6c 	.word	0x20001d6c

08005128 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 800512c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005130:	f002 ff9c 	bl	800806c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005134:	bf00      	nop
 8005136:	bd80      	pop	{r7, pc}

08005138 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800513c:	4802      	ldr	r0, [pc, #8]	@ (8005148 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800513e:	f005 f97d 	bl	800a43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20001640 	.word	0x20001640

0800514c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005150:	4803      	ldr	r0, [pc, #12]	@ (8005160 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005152:	f005 f973 	bl	800a43c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005156:	4803      	ldr	r0, [pc, #12]	@ (8005164 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005158:	f005 f970 	bl	800a43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800515c:	bf00      	nop
 800515e:	bd80      	pop	{r7, pc}
 8005160:	20001640 	.word	0x20001640
 8005164:	20001b08 	.word	0x20001b08

08005168 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800516c:	4802      	ldr	r0, [pc, #8]	@ (8005178 <TIM2_IRQHandler+0x10>)
 800516e:	f005 f965 	bl	800a43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005172:	bf00      	nop
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	2000170c 	.word	0x2000170c

0800517c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005180:	4802      	ldr	r0, [pc, #8]	@ (800518c <USART2_IRQHandler+0x10>)
 8005182:	f007 f85f 	bl	800c244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20001ca0 	.word	0x20001ca0

08005190 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8005194:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005198:	f002 ff68 	bl	800806c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 800519c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80051a0:	f002 ff64 	bl	800806c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 80051a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80051a8:	f002 ff60 	bl	800806c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 80051ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80051b0:	f002 ff5c 	bl	800806c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 80051b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80051b8:	f002 ff58 	bl	800806c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80051bc:	bf00      	nop
 80051be:	bd80      	pop	{r7, pc}

080051c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80051c4:	4802      	ldr	r0, [pc, #8]	@ (80051d0 <TIM6_DAC_IRQHandler+0x10>)
 80051c6:	f005 f939 	bl	800a43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20001970 	.word	0x20001970

080051d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80051d8:	4b06      	ldr	r3, [pc, #24]	@ (80051f4 <SystemInit+0x20>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051de:	4a05      	ldr	r2, [pc, #20]	@ (80051f4 <SystemInit+0x20>)
 80051e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051e8:	bf00      	nop
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	e000ed00 	.word	0xe000ed00

080051f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051fe:	f107 0310 	add.w	r3, r7, #16
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800520c:	1d3b      	adds	r3, r7, #4
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	605a      	str	r2, [r3, #4]
 8005214:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005216:	4b20      	ldr	r3, [pc, #128]	@ (8005298 <MX_TIM1_Init+0xa0>)
 8005218:	4a20      	ldr	r2, [pc, #128]	@ (800529c <MX_TIM1_Init+0xa4>)
 800521a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800521c:	4b1e      	ldr	r3, [pc, #120]	@ (8005298 <MX_TIM1_Init+0xa0>)
 800521e:	2200      	movs	r2, #0
 8005220:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005222:	4b1d      	ldr	r3, [pc, #116]	@ (8005298 <MX_TIM1_Init+0xa0>)
 8005224:	2200      	movs	r2, #0
 8005226:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8005228:	4b1b      	ldr	r3, [pc, #108]	@ (8005298 <MX_TIM1_Init+0xa0>)
 800522a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800522e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005230:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <MX_TIM1_Init+0xa0>)
 8005232:	2200      	movs	r2, #0
 8005234:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005236:	4b18      	ldr	r3, [pc, #96]	@ (8005298 <MX_TIM1_Init+0xa0>)
 8005238:	2200      	movs	r2, #0
 800523a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800523c:	4b16      	ldr	r3, [pc, #88]	@ (8005298 <MX_TIM1_Init+0xa0>)
 800523e:	2200      	movs	r2, #0
 8005240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005242:	4815      	ldr	r0, [pc, #84]	@ (8005298 <MX_TIM1_Init+0xa0>)
 8005244:	f004 fb88 	bl	8009958 <HAL_TIM_Base_Init>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800524e:	f7ff fe69 	bl	8004f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005252:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005256:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005258:	f107 0310 	add.w	r3, r7, #16
 800525c:	4619      	mov	r1, r3
 800525e:	480e      	ldr	r0, [pc, #56]	@ (8005298 <MX_TIM1_Init+0xa0>)
 8005260:	f005 fbf4 	bl	800aa4c <HAL_TIM_ConfigClockSource>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800526a:	f7ff fe5b 	bl	8004f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800526e:	2300      	movs	r3, #0
 8005270:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	4619      	mov	r1, r3
 800527e:	4806      	ldr	r0, [pc, #24]	@ (8005298 <MX_TIM1_Init+0xa0>)
 8005280:	f006 fbca 	bl	800ba18 <HAL_TIMEx_MasterConfigSynchronization>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800528a:	f7ff fe4b 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800528e:	bf00      	nop
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20001640 	.word	0x20001640
 800529c:	40012c00 	.word	0x40012c00

080052a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052a6:	f107 0310 	add.w	r3, r7, #16
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	609a      	str	r2, [r3, #8]
 80052b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052b4:	1d3b      	adds	r3, r7, #4
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052be:	4b1e      	ldr	r3, [pc, #120]	@ (8005338 <MX_TIM2_Init+0x98>)
 80052c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80052c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80052c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005338 <MX_TIM2_Init+0x98>)
 80052c8:	22a9      	movs	r2, #169	@ 0xa9
 80052ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <MX_TIM2_Init+0x98>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80052d2:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <MX_TIM2_Init+0x98>)
 80052d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052da:	4b17      	ldr	r3, [pc, #92]	@ (8005338 <MX_TIM2_Init+0x98>)
 80052dc:	2200      	movs	r2, #0
 80052de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052e0:	4b15      	ldr	r3, [pc, #84]	@ (8005338 <MX_TIM2_Init+0x98>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052e6:	4814      	ldr	r0, [pc, #80]	@ (8005338 <MX_TIM2_Init+0x98>)
 80052e8:	f004 fb36 	bl	8009958 <HAL_TIM_Base_Init>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80052f2:	f7ff fe17 	bl	8004f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	4619      	mov	r1, r3
 8005302:	480d      	ldr	r0, [pc, #52]	@ (8005338 <MX_TIM2_Init+0x98>)
 8005304:	f005 fba2 	bl	800aa4c <HAL_TIM_ConfigClockSource>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800530e:	f7ff fe09 	bl	8004f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800531a:	1d3b      	adds	r3, r7, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4806      	ldr	r0, [pc, #24]	@ (8005338 <MX_TIM2_Init+0x98>)
 8005320:	f006 fb7a 	bl	800ba18 <HAL_TIMEx_MasterConfigSynchronization>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800532a:	f7ff fdfb 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800532e:	bf00      	nop
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	2000170c 	.word	0x2000170c

0800533c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08c      	sub	sp, #48	@ 0x30
 8005340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005342:	f107 030c 	add.w	r3, r7, #12
 8005346:	2224      	movs	r2, #36	@ 0x24
 8005348:	2100      	movs	r1, #0
 800534a:	4618      	mov	r0, r3
 800534c:	f009 fe2a 	bl	800efa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005350:	463b      	mov	r3, r7
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	605a      	str	r2, [r3, #4]
 8005358:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800535a:	4b21      	ldr	r3, [pc, #132]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 800535c:	4a21      	ldr	r2, [pc, #132]	@ (80053e4 <MX_TIM3_Init+0xa8>)
 800535e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005360:	4b1f      	ldr	r3, [pc, #124]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 8005362:	2200      	movs	r2, #0
 8005364:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005366:	4b1e      	ldr	r3, [pc, #120]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 8005368:	2200      	movs	r2, #0
 800536a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800536c:	4b1c      	ldr	r3, [pc, #112]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 800536e:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005372:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005374:	4b1a      	ldr	r3, [pc, #104]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 8005376:	2200      	movs	r2, #0
 8005378:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800537a:	4b19      	ldr	r3, [pc, #100]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 800537c:	2200      	movs	r2, #0
 800537e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005380:	2303      	movs	r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005384:	2300      	movs	r3, #0
 8005386:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005388:	2301      	movs	r3, #1
 800538a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005394:	2300      	movs	r3, #0
 8005396:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005398:	2301      	movs	r3, #1
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800539c:	2300      	movs	r3, #0
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80053a4:	f107 030c 	add.w	r3, r7, #12
 80053a8:	4619      	mov	r1, r3
 80053aa:	480d      	ldr	r0, [pc, #52]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 80053ac:	f004 ff04 	bl	800a1b8 <HAL_TIM_Encoder_Init>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80053b6:	f7ff fdb5 	bl	8004f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053be:	2300      	movs	r3, #0
 80053c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053c2:	463b      	mov	r3, r7
 80053c4:	4619      	mov	r1, r3
 80053c6:	4806      	ldr	r0, [pc, #24]	@ (80053e0 <MX_TIM3_Init+0xa4>)
 80053c8:	f006 fb26 	bl	800ba18 <HAL_TIMEx_MasterConfigSynchronization>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80053d2:	f7ff fda7 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80053d6:	bf00      	nop
 80053d8:	3730      	adds	r7, #48	@ 0x30
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200017d8 	.word	0x200017d8
 80053e4:	40000400 	.word	0x40000400

080053e8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	@ 0x30
 80053ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80053ee:	f107 030c 	add.w	r3, r7, #12
 80053f2:	2224      	movs	r2, #36	@ 0x24
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f009 fdd4 	bl	800efa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053fc:	463b      	mov	r3, r7
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	605a      	str	r2, [r3, #4]
 8005404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005406:	4b21      	ldr	r3, [pc, #132]	@ (800548c <MX_TIM4_Init+0xa4>)
 8005408:	4a21      	ldr	r2, [pc, #132]	@ (8005490 <MX_TIM4_Init+0xa8>)
 800540a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800540c:	4b1f      	ldr	r3, [pc, #124]	@ (800548c <MX_TIM4_Init+0xa4>)
 800540e:	2200      	movs	r2, #0
 8005410:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005412:	4b1e      	ldr	r3, [pc, #120]	@ (800548c <MX_TIM4_Init+0xa4>)
 8005414:	2200      	movs	r2, #0
 8005416:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8005418:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <MX_TIM4_Init+0xa4>)
 800541a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800541e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005420:	4b1a      	ldr	r3, [pc, #104]	@ (800548c <MX_TIM4_Init+0xa4>)
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005426:	4b19      	ldr	r3, [pc, #100]	@ (800548c <MX_TIM4_Init+0xa4>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800542c:	2303      	movs	r3, #3
 800542e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005430:	2300      	movs	r3, #0
 8005432:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005434:	2301      	movs	r3, #1
 8005436:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005440:	2300      	movs	r3, #0
 8005442:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005444:	2301      	movs	r3, #1
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005448:	2300      	movs	r3, #0
 800544a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005450:	f107 030c 	add.w	r3, r7, #12
 8005454:	4619      	mov	r1, r3
 8005456:	480d      	ldr	r0, [pc, #52]	@ (800548c <MX_TIM4_Init+0xa4>)
 8005458:	f004 feae 	bl	800a1b8 <HAL_TIM_Encoder_Init>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005462:	f7ff fd5f 	bl	8004f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800546e:	463b      	mov	r3, r7
 8005470:	4619      	mov	r1, r3
 8005472:	4806      	ldr	r0, [pc, #24]	@ (800548c <MX_TIM4_Init+0xa4>)
 8005474:	f006 fad0 	bl	800ba18 <HAL_TIMEx_MasterConfigSynchronization>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800547e:	f7ff fd51 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005482:	bf00      	nop
 8005484:	3730      	adds	r7, #48	@ 0x30
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200018a4 	.word	0x200018a4
 8005490:	40000800 	.word	0x40000800

08005494 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80054a4:	4b14      	ldr	r3, [pc, #80]	@ (80054f8 <MX_TIM6_Init+0x64>)
 80054a6:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <MX_TIM6_Init+0x68>)
 80054a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 80054aa:	4b13      	ldr	r3, [pc, #76]	@ (80054f8 <MX_TIM6_Init+0x64>)
 80054ac:	22a9      	movs	r2, #169	@ 0xa9
 80054ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054b0:	4b11      	ldr	r3, [pc, #68]	@ (80054f8 <MX_TIM6_Init+0x64>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80054b6:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <MX_TIM6_Init+0x64>)
 80054b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054be:	4b0e      	ldr	r3, [pc, #56]	@ (80054f8 <MX_TIM6_Init+0x64>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80054c4:	480c      	ldr	r0, [pc, #48]	@ (80054f8 <MX_TIM6_Init+0x64>)
 80054c6:	f004 fa47 	bl	8009958 <HAL_TIM_Base_Init>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80054d0:	f7ff fd28 	bl	8004f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054d4:	2300      	movs	r3, #0
 80054d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80054dc:	1d3b      	adds	r3, r7, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4805      	ldr	r0, [pc, #20]	@ (80054f8 <MX_TIM6_Init+0x64>)
 80054e2:	f006 fa99 	bl	800ba18 <HAL_TIMEx_MasterConfigSynchronization>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80054ec:	f7ff fd1a 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80054f0:	bf00      	nop
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20001970 	.word	0x20001970
 80054fc:	40001000 	.word	0x40001000

08005500 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b09c      	sub	sp, #112	@ 0x70
 8005504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005506:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005514:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
 800551c:	605a      	str	r2, [r3, #4]
 800551e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005520:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	611a      	str	r2, [r3, #16]
 8005530:	615a      	str	r2, [r3, #20]
 8005532:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005534:	1d3b      	adds	r3, r7, #4
 8005536:	2234      	movs	r2, #52	@ 0x34
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f009 fd32 	bl	800efa4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005540:	4b45      	ldr	r3, [pc, #276]	@ (8005658 <MX_TIM8_Init+0x158>)
 8005542:	4a46      	ldr	r2, [pc, #280]	@ (800565c <MX_TIM8_Init+0x15c>)
 8005544:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8005546:	4b44      	ldr	r3, [pc, #272]	@ (8005658 <MX_TIM8_Init+0x158>)
 8005548:	22a9      	movs	r2, #169	@ 0xa9
 800554a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800554c:	4b42      	ldr	r3, [pc, #264]	@ (8005658 <MX_TIM8_Init+0x158>)
 800554e:	2200      	movs	r2, #0
 8005550:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8005552:	4b41      	ldr	r3, [pc, #260]	@ (8005658 <MX_TIM8_Init+0x158>)
 8005554:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005558:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800555a:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <MX_TIM8_Init+0x158>)
 800555c:	2200      	movs	r2, #0
 800555e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005560:	4b3d      	ldr	r3, [pc, #244]	@ (8005658 <MX_TIM8_Init+0x158>)
 8005562:	2200      	movs	r2, #0
 8005564:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005566:	4b3c      	ldr	r3, [pc, #240]	@ (8005658 <MX_TIM8_Init+0x158>)
 8005568:	2200      	movs	r2, #0
 800556a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800556c:	483a      	ldr	r0, [pc, #232]	@ (8005658 <MX_TIM8_Init+0x158>)
 800556e:	f004 f9f3 	bl	8009958 <HAL_TIM_Base_Init>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005578:	f7ff fcd4 	bl	8004f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800557c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005580:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005582:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005586:	4619      	mov	r1, r3
 8005588:	4833      	ldr	r0, [pc, #204]	@ (8005658 <MX_TIM8_Init+0x158>)
 800558a:	f005 fa5f 	bl	800aa4c <HAL_TIM_ConfigClockSource>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005594:	f7ff fcc6 	bl	8004f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005598:	482f      	ldr	r0, [pc, #188]	@ (8005658 <MX_TIM8_Init+0x158>)
 800559a:	f004 fb97 	bl	8009ccc <HAL_TIM_PWM_Init>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80055a4:	f7ff fcbe 	bl	8004f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055a8:	2300      	movs	r3, #0
 80055aa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80055ac:	2300      	movs	r3, #0
 80055ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055b0:	2300      	movs	r3, #0
 80055b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80055b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80055b8:	4619      	mov	r1, r3
 80055ba:	4827      	ldr	r0, [pc, #156]	@ (8005658 <MX_TIM8_Init+0x158>)
 80055bc:	f006 fa2c 	bl	800ba18 <HAL_TIMEx_MasterConfigSynchronization>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80055c6:	f7ff fcad 	bl	8004f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055ca:	2360      	movs	r3, #96	@ 0x60
 80055cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80055ce:	2300      	movs	r3, #0
 80055d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055d2:	2300      	movs	r3, #0
 80055d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80055d6:	2300      	movs	r3, #0
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055da:	2300      	movs	r3, #0
 80055dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80055de:	2300      	movs	r3, #0
 80055e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80055e2:	2300      	movs	r3, #0
 80055e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80055e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80055ea:	220c      	movs	r2, #12
 80055ec:	4619      	mov	r1, r3
 80055ee:	481a      	ldr	r0, [pc, #104]	@ (8005658 <MX_TIM8_Init+0x158>)
 80055f0:	f005 f918 	bl	800a824 <HAL_TIM_PWM_ConfigChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80055fa:	f7ff fc93 	bl	8004f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80055fe:	2300      	movs	r3, #0
 8005600:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005602:	2300      	movs	r3, #0
 8005604:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800560a:	2300      	movs	r3, #0
 800560c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005616:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005624:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005628:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800562e:	2300      	movs	r3, #0
 8005630:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005632:	2300      	movs	r3, #0
 8005634:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	4619      	mov	r1, r3
 800563a:	4807      	ldr	r0, [pc, #28]	@ (8005658 <MX_TIM8_Init+0x158>)
 800563c:	f006 fa82 	bl	800bb44 <HAL_TIMEx_ConfigBreakDeadTime>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8005646:	f7ff fc6d 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800564a:	4803      	ldr	r0, [pc, #12]	@ (8005658 <MX_TIM8_Init+0x158>)
 800564c:	f000 fa60 	bl	8005b10 <HAL_TIM_MspPostInit>

}
 8005650:	bf00      	nop
 8005652:	3770      	adds	r7, #112	@ 0x70
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20001a3c 	.word	0x20001a3c
 800565c:	40013400 	.word	0x40013400

08005660 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b094      	sub	sp, #80	@ 0x50
 8005664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005666:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	605a      	str	r2, [r3, #4]
 8005670:	609a      	str	r2, [r3, #8]
 8005672:	60da      	str	r2, [r3, #12]
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	615a      	str	r2, [r3, #20]
 8005678:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800567a:	463b      	mov	r3, r7
 800567c:	2234      	movs	r2, #52	@ 0x34
 800567e:	2100      	movs	r1, #0
 8005680:	4618      	mov	r0, r3
 8005682:	f009 fc8f 	bl	800efa4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005686:	4b34      	ldr	r3, [pc, #208]	@ (8005758 <MX_TIM16_Init+0xf8>)
 8005688:	4a34      	ldr	r2, [pc, #208]	@ (800575c <MX_TIM16_Init+0xfc>)
 800568a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800568c:	4b32      	ldr	r3, [pc, #200]	@ (8005758 <MX_TIM16_Init+0xf8>)
 800568e:	22a9      	movs	r2, #169	@ 0xa9
 8005690:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005692:	4b31      	ldr	r3, [pc, #196]	@ (8005758 <MX_TIM16_Init+0xf8>)
 8005694:	2200      	movs	r2, #0
 8005696:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8005698:	4b2f      	ldr	r3, [pc, #188]	@ (8005758 <MX_TIM16_Init+0xf8>)
 800569a:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 800569e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005758 <MX_TIM16_Init+0xf8>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80056a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005758 <MX_TIM16_Init+0xf8>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005758 <MX_TIM16_Init+0xf8>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80056b2:	4829      	ldr	r0, [pc, #164]	@ (8005758 <MX_TIM16_Init+0xf8>)
 80056b4:	f004 f950 	bl	8009958 <HAL_TIM_Base_Init>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80056be:	f7ff fc31 	bl	8004f24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80056c2:	4825      	ldr	r0, [pc, #148]	@ (8005758 <MX_TIM16_Init+0xf8>)
 80056c4:	f004 fa94 	bl	8009bf0 <HAL_TIM_OC_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80056ce:	f7ff fc29 	bl	8004f24 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80056d2:	2108      	movs	r1, #8
 80056d4:	4820      	ldr	r0, [pc, #128]	@ (8005758 <MX_TIM16_Init+0xf8>)
 80056d6:	f004 fc79 	bl	8009fcc <HAL_TIM_OnePulse_Init>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80056e0:	f7ff fc20 	bl	8004f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80056e4:	2310      	movs	r3, #16
 80056e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 80056e8:	f240 5399 	movw	r3, #1433	@ 0x599
 80056ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056ee:	2300      	movs	r3, #0
 80056f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056f2:	2300      	movs	r3, #0
 80056f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056fa:	2300      	movs	r3, #0
 80056fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056fe:	2300      	movs	r3, #0
 8005700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005702:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005706:	2200      	movs	r2, #0
 8005708:	4619      	mov	r1, r3
 800570a:	4813      	ldr	r0, [pc, #76]	@ (8005758 <MX_TIM16_Init+0xf8>)
 800570c:	f005 f810 	bl	800a730 <HAL_TIM_OC_ConfigChannel>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8005716:	f7ff fc05 	bl	8004f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005722:	2300      	movs	r3, #0
 8005724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800572a:	2300      	movs	r3, #0
 800572c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800572e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005732:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005738:	2300      	movs	r3, #0
 800573a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800573c:	463b      	mov	r3, r7
 800573e:	4619      	mov	r1, r3
 8005740:	4805      	ldr	r0, [pc, #20]	@ (8005758 <MX_TIM16_Init+0xf8>)
 8005742:	f006 f9ff 	bl	800bb44 <HAL_TIMEx_ConfigBreakDeadTime>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d001      	beq.n	8005750 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 800574c:	f7ff fbea 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005750:	bf00      	nop
 8005752:	3750      	adds	r7, #80	@ 0x50
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20001b08 	.word	0x20001b08
 800575c:	40014400 	.word	0x40014400

08005760 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b09c      	sub	sp, #112	@ 0x70
 8005764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005766:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	605a      	str	r2, [r3, #4]
 8005770:	609a      	str	r2, [r3, #8]
 8005772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005774:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	605a      	str	r2, [r3, #4]
 800577e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005780:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	609a      	str	r2, [r3, #8]
 800578c:	60da      	str	r2, [r3, #12]
 800578e:	611a      	str	r2, [r3, #16]
 8005790:	615a      	str	r2, [r3, #20]
 8005792:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005794:	1d3b      	adds	r3, r7, #4
 8005796:	2234      	movs	r2, #52	@ 0x34
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f009 fc02 	bl	800efa4 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80057a0:	4b4b      	ldr	r3, [pc, #300]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057a2:	4a4c      	ldr	r2, [pc, #304]	@ (80058d4 <MX_TIM20_Init+0x174>)
 80057a4:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80057a6:	4b4a      	ldr	r3, [pc, #296]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057ac:	4b48      	ldr	r3, [pc, #288]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80057b2:	4b47      	ldr	r3, [pc, #284]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057b8:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ba:	4b45      	ldr	r3, [pc, #276]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057bc:	2200      	movs	r2, #0
 80057be:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80057c0:	4b43      	ldr	r3, [pc, #268]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057c6:	4b42      	ldr	r3, [pc, #264]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80057cc:	4840      	ldr	r0, [pc, #256]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057ce:	f004 f8c3 	bl	8009958 <HAL_TIM_Base_Init>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80057d8:	f7ff fba4 	bl	8004f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057e0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80057e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80057e6:	4619      	mov	r1, r3
 80057e8:	4839      	ldr	r0, [pc, #228]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057ea:	f005 f92f 	bl	800aa4c <HAL_TIM_ConfigClockSource>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80057f4:	f7ff fb96 	bl	8004f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80057f8:	4835      	ldr	r0, [pc, #212]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80057fa:	f004 fa67 	bl	8009ccc <HAL_TIM_PWM_Init>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8005804:	f7ff fb8e 	bl	8004f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005808:	2300      	movs	r3, #0
 800580a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800580c:	2300      	movs	r3, #0
 800580e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005810:	2300      	movs	r3, #0
 8005812:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005814:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005818:	4619      	mov	r1, r3
 800581a:	482d      	ldr	r0, [pc, #180]	@ (80058d0 <MX_TIM20_Init+0x170>)
 800581c:	f006 f8fc 	bl	800ba18 <HAL_TIMEx_MasterConfigSynchronization>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8005826:	f7ff fb7d 	bl	8004f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800582a:	2360      	movs	r3, #96	@ 0x60
 800582c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800582e:	2300      	movs	r3, #0
 8005830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005832:	2300      	movs	r3, #0
 8005834:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005836:	2300      	movs	r3, #0
 8005838:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800583a:	2300      	movs	r3, #0
 800583c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800583e:	2300      	movs	r3, #0
 8005840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005842:	2300      	movs	r3, #0
 8005844:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005846:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800584a:	2200      	movs	r2, #0
 800584c:	4619      	mov	r1, r3
 800584e:	4820      	ldr	r0, [pc, #128]	@ (80058d0 <MX_TIM20_Init+0x170>)
 8005850:	f004 ffe8 	bl	800a824 <HAL_TIM_PWM_ConfigChannel>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 800585a:	f7ff fb63 	bl	8004f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800585e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005862:	2208      	movs	r2, #8
 8005864:	4619      	mov	r1, r3
 8005866:	481a      	ldr	r0, [pc, #104]	@ (80058d0 <MX_TIM20_Init+0x170>)
 8005868:	f004 ffdc 	bl	800a824 <HAL_TIM_PWM_ConfigChannel>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8005872:	f7ff fb57 	bl	8004f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005876:	2300      	movs	r3, #0
 8005878:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800588a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800588e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005894:	2300      	movs	r3, #0
 8005896:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005898:	2300      	movs	r3, #0
 800589a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800589c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80058a6:	2300      	movs	r3, #0
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80058ae:	1d3b      	adds	r3, r7, #4
 80058b0:	4619      	mov	r1, r3
 80058b2:	4807      	ldr	r0, [pc, #28]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80058b4:	f006 f946 	bl	800bb44 <HAL_TIMEx_ConfigBreakDeadTime>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 80058be:	f7ff fb31 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80058c2:	4803      	ldr	r0, [pc, #12]	@ (80058d0 <MX_TIM20_Init+0x170>)
 80058c4:	f000 f924 	bl	8005b10 <HAL_TIM_MspPostInit>

}
 80058c8:	bf00      	nop
 80058ca:	3770      	adds	r7, #112	@ 0x70
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20001bd4 	.word	0x20001bd4
 80058d4:	40015000 	.word	0x40015000

080058d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a4a      	ldr	r2, [pc, #296]	@ (8005a10 <HAL_TIM_Base_MspInit+0x138>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d11c      	bne.n	8005924 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80058ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80058ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ee:	4a49      	ldr	r2, [pc, #292]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80058f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80058f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80058f6:	4b47      	ldr	r3, [pc, #284]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80058f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058fe:	61fb      	str	r3, [r7, #28]
 8005900:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005902:	2200      	movs	r2, #0
 8005904:	2100      	movs	r1, #0
 8005906:	2018      	movs	r0, #24
 8005908:	f001 fe8b 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800590c:	2018      	movs	r0, #24
 800590e:	f001 fea2 	bl	8007656 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005912:	2200      	movs	r2, #0
 8005914:	2100      	movs	r1, #0
 8005916:	2019      	movs	r0, #25
 8005918:	f001 fe83 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800591c:	2019      	movs	r0, #25
 800591e:	f001 fe9a 	bl	8007656 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8005922:	e070      	b.n	8005a06 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM2)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592c:	d114      	bne.n	8005958 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800592e:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 8005930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005932:	4a38      	ldr	r2, [pc, #224]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	6593      	str	r3, [r2, #88]	@ 0x58
 800593a:	4b36      	ldr	r3, [pc, #216]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 800593c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	61bb      	str	r3, [r7, #24]
 8005944:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005946:	2200      	movs	r2, #0
 8005948:	2100      	movs	r1, #0
 800594a:	201c      	movs	r0, #28
 800594c:	f001 fe69 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005950:	201c      	movs	r0, #28
 8005952:	f001 fe80 	bl	8007656 <HAL_NVIC_EnableIRQ>
}
 8005956:	e056      	b.n	8005a06 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM6)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a18 <HAL_TIM_Base_MspInit+0x140>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d114      	bne.n	800598c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005962:	4b2c      	ldr	r3, [pc, #176]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	4a2b      	ldr	r2, [pc, #172]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 8005968:	f043 0310 	orr.w	r3, r3, #16
 800596c:	6593      	str	r3, [r2, #88]	@ 0x58
 800596e:	4b29      	ldr	r3, [pc, #164]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800597a:	2200      	movs	r2, #0
 800597c:	2100      	movs	r1, #0
 800597e:	2036      	movs	r0, #54	@ 0x36
 8005980:	f001 fe4f 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005984:	2036      	movs	r0, #54	@ 0x36
 8005986:	f001 fe66 	bl	8007656 <HAL_NVIC_EnableIRQ>
}
 800598a:	e03c      	b.n	8005a06 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM8)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a22      	ldr	r2, [pc, #136]	@ (8005a1c <HAL_TIM_Base_MspInit+0x144>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d10c      	bne.n	80059b0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005996:	4b1f      	ldr	r3, [pc, #124]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 8005998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800599a:	4a1e      	ldr	r2, [pc, #120]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 800599c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80059a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80059a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80059a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059aa:	613b      	str	r3, [r7, #16]
 80059ac:	693b      	ldr	r3, [r7, #16]
}
 80059ae:	e02a      	b.n	8005a06 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM16)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a20 <HAL_TIM_Base_MspInit+0x148>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d114      	bne.n	80059e4 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80059ba:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80059bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059be:	4a15      	ldr	r2, [pc, #84]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80059c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80059c6:	4b13      	ldr	r3, [pc, #76]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80059c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80059d2:	2200      	movs	r2, #0
 80059d4:	2100      	movs	r1, #0
 80059d6:	2019      	movs	r0, #25
 80059d8:	f001 fe23 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80059dc:	2019      	movs	r0, #25
 80059de:	f001 fe3a 	bl	8007656 <HAL_NVIC_EnableIRQ>
}
 80059e2:	e010      	b.n	8005a06 <HAL_TIM_Base_MspInit+0x12e>
  else if(tim_baseHandle->Instance==TIM20)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005a24 <HAL_TIM_Base_MspInit+0x14c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10b      	bne.n	8005a06 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80059ee:	4b09      	ldr	r3, [pc, #36]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80059f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f2:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80059f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_TIM_Base_MspInit+0x13c>)
 80059fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a02:	60bb      	str	r3, [r7, #8]
 8005a04:	68bb      	ldr	r3, [r7, #8]
}
 8005a06:	bf00      	nop
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40001000 	.word	0x40001000
 8005a1c:	40013400 	.word	0x40013400
 8005a20:	40014400 	.word	0x40014400
 8005a24:	40015000 	.word	0x40015000

08005a28 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08c      	sub	sp, #48	@ 0x30
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 031c 	add.w	r3, r7, #28
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	@ (8005b04 <HAL_TIM_Encoder_MspInit+0xdc>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d129      	bne.n	8005a9e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005a4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005a50:	f043 0302 	orr.w	r3, r3, #2
 8005a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a56:	4b2c      	ldr	r3, [pc, #176]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a62:	4b29      	ldr	r3, [pc, #164]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a66:	4a28      	ldr	r2, [pc, #160]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005a68:	f043 0301 	orr.w	r3, r3, #1
 8005a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a6e:	4b26      	ldr	r3, [pc, #152]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8005a7a:	23c0      	movs	r3, #192	@ 0xc0
 8005a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7e:	2302      	movs	r3, #2
 8005a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a86:	2300      	movs	r3, #0
 8005a88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a8e:	f107 031c 	add.w	r3, r7, #28
 8005a92:	4619      	mov	r1, r3
 8005a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a98:	f002 f936 	bl	8007d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005a9c:	e02e      	b.n	8005afc <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b0c <HAL_TIM_Encoder_MspInit+0xe4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d129      	bne.n	8005afc <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005aa8:	4b17      	ldr	r3, [pc, #92]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aac:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005aae:	f043 0304 	orr.w	r3, r3, #4
 8005ab2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ab4:	4b14      	ldr	r3, [pc, #80]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ac0:	4b11      	ldr	r3, [pc, #68]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ac4:	4a10      	ldr	r2, [pc, #64]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005acc:	4b0e      	ldr	r3, [pc, #56]	@ (8005b08 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8005ad8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005aea:	230a      	movs	r3, #10
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aee:	f107 031c 	add.w	r3, r7, #28
 8005af2:	4619      	mov	r1, r3
 8005af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005af8:	f002 f906 	bl	8007d08 <HAL_GPIO_Init>
}
 8005afc:	bf00      	nop
 8005afe:	3730      	adds	r7, #48	@ 0x30
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40021000 	.word	0x40021000
 8005b0c:	40000800 	.word	0x40000800

08005b10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	@ 0x28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b18:	f107 0314 	add.w	r3, r7, #20
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	605a      	str	r2, [r3, #4]
 8005b22:	609a      	str	r2, [r3, #8]
 8005b24:	60da      	str	r2, [r3, #12]
 8005b26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a31      	ldr	r2, [pc, #196]	@ (8005bf4 <HAL_TIM_MspPostInit+0xe4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d11d      	bne.n	8005b6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b32:	4b31      	ldr	r3, [pc, #196]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b36:	4a30      	ldr	r2, [pc, #192]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b38:	f043 0304 	orr.w	r3, r3, #4
 8005b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b3e:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b42:	f003 0304 	and.w	r3, r3, #4
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8005b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b50:	2302      	movs	r3, #2
 8005b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005b5c:	2304      	movs	r3, #4
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	4619      	mov	r1, r3
 8005b66:	4825      	ldr	r0, [pc, #148]	@ (8005bfc <HAL_TIM_MspPostInit+0xec>)
 8005b68:	f002 f8ce 	bl	8007d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8005b6c:	e03d      	b.n	8005bea <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a23      	ldr	r2, [pc, #140]	@ (8005c00 <HAL_TIM_MspPostInit+0xf0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d138      	bne.n	8005bea <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b78:	4b1f      	ldr	r3, [pc, #124]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b7e:	f043 0302 	orr.w	r3, r3, #2
 8005b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b84:	4b1c      	ldr	r3, [pc, #112]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b90:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b94:	4a18      	ldr	r2, [pc, #96]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b96:	f043 0304 	orr.w	r3, r3, #4
 8005b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b9c:	4b16      	ldr	r3, [pc, #88]	@ (8005bf8 <HAL_TIM_MspPostInit+0xe8>)
 8005b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	60bb      	str	r3, [r7, #8]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8005ba8:	2304      	movs	r3, #4
 8005baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bac:	2302      	movs	r3, #2
 8005bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8005bbc:	f107 0314 	add.w	r3, r7, #20
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	4810      	ldr	r0, [pc, #64]	@ (8005c04 <HAL_TIM_MspPostInit+0xf4>)
 8005bc4:	f002 f8a0 	bl	8007d08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8005bc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8005bda:	2306      	movs	r3, #6
 8005bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8005bde:	f107 0314 	add.w	r3, r7, #20
 8005be2:	4619      	mov	r1, r3
 8005be4:	4805      	ldr	r0, [pc, #20]	@ (8005bfc <HAL_TIM_MspPostInit+0xec>)
 8005be6:	f002 f88f 	bl	8007d08 <HAL_GPIO_Init>
}
 8005bea:	bf00      	nop
 8005bec:	3728      	adds	r7, #40	@ 0x28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40013400 	.word	0x40013400
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	48000800 	.word	0x48000800
 8005c00:	40015000 	.word	0x40015000
 8005c04:	48000400 	.word	0x48000400

08005c08 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005c0c:	4b23      	ldr	r3, [pc, #140]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c0e:	4a24      	ldr	r2, [pc, #144]	@ (8005ca0 <MX_USART2_UART_Init+0x98>)
 8005c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005c12:	4b22      	ldr	r3, [pc, #136]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005c1a:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c1c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005c20:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005c22:	4b1e      	ldr	r3, [pc, #120]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005c28:	4b1c      	ldr	r3, [pc, #112]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005c30:	4b1a      	ldr	r3, [pc, #104]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c32:	220c      	movs	r2, #12
 8005c34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c36:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005c3c:	4b17      	ldr	r3, [pc, #92]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c42:	4b16      	ldr	r3, [pc, #88]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c48:	4b14      	ldr	r3, [pc, #80]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c4e:	4b13      	ldr	r3, [pc, #76]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005c54:	4811      	ldr	r0, [pc, #68]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c56:	f006 f859 	bl	800bd0c <HAL_UART_Init>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8005c60:	f7ff f960 	bl	8004f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c64:	2100      	movs	r1, #0
 8005c66:	480d      	ldr	r0, [pc, #52]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c68:	f008 fbdb 	bl	800e422 <HAL_UARTEx_SetTxFifoThreshold>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8005c72:	f7ff f957 	bl	8004f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005c76:	2100      	movs	r1, #0
 8005c78:	4808      	ldr	r0, [pc, #32]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c7a:	f008 fc10 	bl	800e49e <HAL_UARTEx_SetRxFifoThreshold>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8005c84:	f7ff f94e 	bl	8004f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005c88:	4804      	ldr	r0, [pc, #16]	@ (8005c9c <MX_USART2_UART_Init+0x94>)
 8005c8a:	f008 fb91 	bl	800e3b0 <HAL_UARTEx_DisableFifoMode>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d001      	beq.n	8005c98 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8005c94:	f7ff f946 	bl	8004f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005c98:	bf00      	nop
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20001ca0 	.word	0x20001ca0
 8005ca0:	40004400 	.word	0x40004400

08005ca4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b09e      	sub	sp, #120	@ 0x78
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cac:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	60da      	str	r2, [r3, #12]
 8005cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005cbc:	f107 0310 	add.w	r3, r7, #16
 8005cc0:	2254      	movs	r2, #84	@ 0x54
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f009 f96d 	bl	800efa4 <memset>
  if(uartHandle->Instance==USART2)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a37      	ldr	r2, [pc, #220]	@ (8005dac <HAL_UART_MspInit+0x108>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d167      	bne.n	8005da4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cdc:	f107 0310 	add.w	r3, r7, #16
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f002 ffbd 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005cec:	f7ff f91a 	bl	8004f24 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cf0:	4b2f      	ldr	r3, [pc, #188]	@ (8005db0 <HAL_UART_MspInit+0x10c>)
 8005cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8005db0 <HAL_UART_MspInit+0x10c>)
 8005cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8005db0 <HAL_UART_MspInit+0x10c>)
 8005cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d08:	4b29      	ldr	r3, [pc, #164]	@ (8005db0 <HAL_UART_MspInit+0x10c>)
 8005d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d0c:	4a28      	ldr	r2, [pc, #160]	@ (8005db0 <HAL_UART_MspInit+0x10c>)
 8005d0e:	f043 0301 	orr.w	r3, r3, #1
 8005d12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d14:	4b26      	ldr	r3, [pc, #152]	@ (8005db0 <HAL_UART_MspInit+0x10c>)
 8005d16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d20:	230c      	movs	r3, #12
 8005d22:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d24:	2302      	movs	r3, #2
 8005d26:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d30:	2307      	movs	r3, #7
 8005d32:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005d38:	4619      	mov	r1, r3
 8005d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d3e:	f001 ffe3 	bl	8007d08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8005d42:	4b1c      	ldr	r3, [pc, #112]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d44:	4a1c      	ldr	r2, [pc, #112]	@ (8005db8 <HAL_UART_MspInit+0x114>)
 8005d46:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005d48:	4b1a      	ldr	r3, [pc, #104]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d4a:	221b      	movs	r2, #27
 8005d4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d4e:	4b19      	ldr	r3, [pc, #100]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d50:	2210      	movs	r2, #16
 8005d52:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d54:	4b17      	ldr	r3, [pc, #92]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d5a:	4b16      	ldr	r3, [pc, #88]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d5c:	2280      	movs	r2, #128	@ 0x80
 8005d5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d60:	4b14      	ldr	r3, [pc, #80]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d66:	4b13      	ldr	r3, [pc, #76]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d6c:	4b11      	ldr	r3, [pc, #68]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d72:	4b10      	ldr	r3, [pc, #64]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d78:	480e      	ldr	r0, [pc, #56]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d7a:	f001 fc87 	bl	800768c <HAL_DMA_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8005d84:	f7ff f8ce 	bl	8004f24 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d8c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005d8e:	4a09      	ldr	r2, [pc, #36]	@ (8005db4 <HAL_UART_MspInit+0x110>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d94:	2200      	movs	r2, #0
 8005d96:	2100      	movs	r1, #0
 8005d98:	2026      	movs	r0, #38	@ 0x26
 8005d9a:	f001 fc42 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005d9e:	2026      	movs	r0, #38	@ 0x26
 8005da0:	f001 fc59 	bl	8007656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005da4:	bf00      	nop
 8005da6:	3778      	adds	r7, #120	@ 0x78
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40004400 	.word	0x40004400
 8005db0:	40021000 	.word	0x40021000
 8005db4:	20001d6c 	.word	0x20001d6c
 8005db8:	40020008 	.word	0x40020008

08005dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005dbc:	480d      	ldr	r0, [pc, #52]	@ (8005df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005dbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005dc0:	f7ff fa08 	bl	80051d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005dc4:	480c      	ldr	r0, [pc, #48]	@ (8005df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005dc6:	490d      	ldr	r1, [pc, #52]	@ (8005dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e00 <LoopForever+0xe>)
  movs r3, #0
 8005dca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005dcc:	e002      	b.n	8005dd4 <LoopCopyDataInit>

08005dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dd2:	3304      	adds	r3, #4

08005dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dd8:	d3f9      	bcc.n	8005dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dda:	4a0a      	ldr	r2, [pc, #40]	@ (8005e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8005e08 <LoopForever+0x16>)
  movs r3, #0
 8005dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005de0:	e001      	b.n	8005de6 <LoopFillZerobss>

08005de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005de4:	3204      	adds	r2, #4

08005de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005de8:	d3fb      	bcc.n	8005de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005dea:	f009 f8e9 	bl	800efc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005dee:	f7fd fc53 	bl	8003698 <main>

08005df2 <LoopForever>:

LoopForever:
    b LoopForever
 8005df2:	e7fe      	b.n	8005df2 <LoopForever>
  ldr   r0, =_estack
 8005df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dfc:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 8005e00:	080110f0 	.word	0x080110f0
  ldr r2, =_sbss
 8005e04:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 8005e08:	20001f08 	.word	0x20001f08

08005e0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005e0c:	e7fe      	b.n	8005e0c <ADC1_2_IRQHandler>

08005e0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b082      	sub	sp, #8
 8005e12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e14:	2300      	movs	r3, #0
 8005e16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e18:	2003      	movs	r0, #3
 8005e1a:	f001 fbf7 	bl	800760c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f000 f80e 	bl	8005e40 <HAL_InitTick>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	71fb      	strb	r3, [r7, #7]
 8005e2e:	e001      	b.n	8005e34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e30:	f7ff f91c 	bl	800506c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e34:	79fb      	ldrb	r3, [r7, #7]

}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005e4c:	4b16      	ldr	r3, [pc, #88]	@ (8005ea8 <HAL_InitTick+0x68>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d022      	beq.n	8005e9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005e54:	4b15      	ldr	r3, [pc, #84]	@ (8005eac <HAL_InitTick+0x6c>)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	4b13      	ldr	r3, [pc, #76]	@ (8005ea8 <HAL_InitTick+0x68>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005e60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f001 fc02 	bl	8007672 <HAL_SYSTICK_Config>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10f      	bne.n	8005e94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b0f      	cmp	r3, #15
 8005e78:	d809      	bhi.n	8005e8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e82:	f001 fbce 	bl	8007622 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e86:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb0 <HAL_InitTick+0x70>)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	e007      	b.n	8005e9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
 8005e92:	e004      	b.n	8005e9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	73fb      	strb	r3, [r7, #15]
 8005e98:	e001      	b.n	8005e9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000210 	.word	0x20000210
 8005eac:	20000208 	.word	0x20000208
 8005eb0:	2000020c 	.word	0x2000020c

08005eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005eb8:	4b05      	ldr	r3, [pc, #20]	@ (8005ed0 <HAL_IncTick+0x1c>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	4b05      	ldr	r3, [pc, #20]	@ (8005ed4 <HAL_IncTick+0x20>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	4a03      	ldr	r2, [pc, #12]	@ (8005ed0 <HAL_IncTick+0x1c>)
 8005ec4:	6013      	str	r3, [r2, #0]
}
 8005ec6:	bf00      	nop
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	20001dcc 	.word	0x20001dcc
 8005ed4:	20000210 	.word	0x20000210

08005ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return uwTick;
 8005edc:	4b03      	ldr	r3, [pc, #12]	@ (8005eec <HAL_GetTick+0x14>)
 8005ede:	681b      	ldr	r3, [r3, #0]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	20001dcc 	.word	0x20001dcc

08005ef0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	609a      	str	r2, [r3, #8]
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	609a      	str	r2, [r3, #8]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3360      	adds	r3, #96	@ 0x60
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b08      	ldr	r3, [pc, #32]	@ (8005f9c <LL_ADC_SetOffset+0x44>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005f90:	bf00      	nop
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	03fff000 	.word	0x03fff000

08005fa0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3360      	adds	r3, #96	@ 0x60
 8005fae:	461a      	mov	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3360      	adds	r3, #96	@ 0x60
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005ff6:	bf00      	nop
 8005ff8:	371c      	adds	r7, #28
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006002:	b480      	push	{r7}
 8006004:	b087      	sub	sp, #28
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3360      	adds	r3, #96	@ 0x60
 8006012:	461a      	mov	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	431a      	orrs	r2, r3
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3360      	adds	r3, #96	@ 0x60
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	431a      	orrs	r2, r3
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	615a      	str	r2, [r3, #20]
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3330      	adds	r3, #48	@ 0x30
 80060a4:	461a      	mov	r2, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	0a1b      	lsrs	r3, r3, #8
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	f003 030c 	and.w	r3, r3, #12
 80060b0:	4413      	add	r3, r2
 80060b2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	211f      	movs	r1, #31
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	43db      	mvns	r3, r3
 80060c6:	401a      	ands	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	0e9b      	lsrs	r3, r3, #26
 80060cc:	f003 011f 	and.w	r1, r3, #31
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	fa01 f303 	lsl.w	r3, r1, r3
 80060da:	431a      	orrs	r2, r3
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80060e0:	bf00      	nop
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b087      	sub	sp, #28
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3314      	adds	r3, #20
 80060fc:	461a      	mov	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	0e5b      	lsrs	r3, r3, #25
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	4413      	add	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	0d1b      	lsrs	r3, r3, #20
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2107      	movs	r1, #7
 800611a:	fa01 f303 	lsl.w	r3, r1, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	401a      	ands	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	0d1b      	lsrs	r3, r3, #20
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	fa01 f303 	lsl.w	r3, r1, r3
 8006130:	431a      	orrs	r2, r3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006136:	bf00      	nop
 8006138:	371c      	adds	r7, #28
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800615c:	43db      	mvns	r3, r3
 800615e:	401a      	ands	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f003 0318 	and.w	r3, r3, #24
 8006166:	4908      	ldr	r1, [pc, #32]	@ (8006188 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006168:	40d9      	lsrs	r1, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	400b      	ands	r3, r1
 800616e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006172:	431a      	orrs	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800617a:	bf00      	nop
 800617c:	3714      	adds	r7, #20
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	0007ffff 	.word	0x0007ffff

0800618c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 031f 	and.w	r3, r3, #31
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80061b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6093      	str	r3, [r2, #8]
}
 80061c0:	bf00      	nop
 80061c2:	370c      	adds	r7, #12
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061e0:	d101      	bne.n	80061e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80061e2:	2301      	movs	r3, #1
 80061e4:	e000      	b.n	80061e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006204:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006208:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800622c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006230:	d101      	bne.n	8006236 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006232:	2301      	movs	r3, #1
 8006234:	e000      	b.n	8006238 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006254:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006258:	f043 0201 	orr.w	r2, r3, #1
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <LL_ADC_IsEnabled+0x18>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <LL_ADC_IsEnabled+0x1a>
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80062a6:	f043 0204 	orr.w	r2, r3, #4
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80062ba:	b480      	push	{r7}
 80062bc:	b083      	sub	sp, #12
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d101      	bne.n	80062d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d101      	bne.n	80062f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006308:	b590      	push	{r4, r7, lr}
 800630a:	b089      	sub	sp, #36	@ 0x24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006314:	2300      	movs	r3, #0
 8006316:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e1a9      	b.n	8006676 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632c:	2b00      	cmp	r3, #0
 800632e:	d109      	bne.n	8006344 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7fc fea3 	bl	800307c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ff3f 	bl	80061cc <LL_ADC_IsDeepPowerDownEnabled>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff ff25 	bl	80061a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f7ff ff5a 	bl	800621c <LL_ADC_IsInternalRegulatorEnabled>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d115      	bne.n	800639a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff ff3e 	bl	80061f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006378:	4b9c      	ldr	r3, [pc, #624]	@ (80065ec <HAL_ADC_Init+0x2e4>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	099b      	lsrs	r3, r3, #6
 800637e:	4a9c      	ldr	r2, [pc, #624]	@ (80065f0 <HAL_ADC_Init+0x2e8>)
 8006380:	fba2 2303 	umull	r2, r3, r2, r3
 8006384:	099b      	lsrs	r3, r3, #6
 8006386:	3301      	adds	r3, #1
 8006388:	005b      	lsls	r3, r3, #1
 800638a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800638c:	e002      	b.n	8006394 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3b01      	subs	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f9      	bne.n	800638e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff ff3c 	bl	800621c <LL_ADC_IsInternalRegulatorEnabled>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ae:	f043 0210 	orr.w	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ba:	f043 0201 	orr.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff ff75 	bl	80062ba <LL_ADC_REG_IsConversionOngoing>
 80063d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063d6:	f003 0310 	and.w	r3, r3, #16
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f040 8142 	bne.w	8006664 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f040 813e 	bne.w	8006664 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80063f0:	f043 0202 	orr.w	r2, r3, #2
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff ff35 	bl	800626c <LL_ADC_IsEnabled>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d141      	bne.n	800648c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006410:	d004      	beq.n	800641c <HAL_ADC_Init+0x114>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a77      	ldr	r2, [pc, #476]	@ (80065f4 <HAL_ADC_Init+0x2ec>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d10f      	bne.n	800643c <HAL_ADC_Init+0x134>
 800641c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006420:	f7ff ff24 	bl	800626c <LL_ADC_IsEnabled>
 8006424:	4604      	mov	r4, r0
 8006426:	4873      	ldr	r0, [pc, #460]	@ (80065f4 <HAL_ADC_Init+0x2ec>)
 8006428:	f7ff ff20 	bl	800626c <LL_ADC_IsEnabled>
 800642c:	4603      	mov	r3, r0
 800642e:	4323      	orrs	r3, r4
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf0c      	ite	eq
 8006434:	2301      	moveq	r3, #1
 8006436:	2300      	movne	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	e012      	b.n	8006462 <HAL_ADC_Init+0x15a>
 800643c:	486e      	ldr	r0, [pc, #440]	@ (80065f8 <HAL_ADC_Init+0x2f0>)
 800643e:	f7ff ff15 	bl	800626c <LL_ADC_IsEnabled>
 8006442:	4604      	mov	r4, r0
 8006444:	486d      	ldr	r0, [pc, #436]	@ (80065fc <HAL_ADC_Init+0x2f4>)
 8006446:	f7ff ff11 	bl	800626c <LL_ADC_IsEnabled>
 800644a:	4603      	mov	r3, r0
 800644c:	431c      	orrs	r4, r3
 800644e:	486c      	ldr	r0, [pc, #432]	@ (8006600 <HAL_ADC_Init+0x2f8>)
 8006450:	f7ff ff0c 	bl	800626c <LL_ADC_IsEnabled>
 8006454:	4603      	mov	r3, r0
 8006456:	4323      	orrs	r3, r4
 8006458:	2b00      	cmp	r3, #0
 800645a:	bf0c      	ite	eq
 800645c:	2301      	moveq	r3, #1
 800645e:	2300      	movne	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d012      	beq.n	800648c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800646e:	d004      	beq.n	800647a <HAL_ADC_Init+0x172>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a5f      	ldr	r2, [pc, #380]	@ (80065f4 <HAL_ADC_Init+0x2ec>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d101      	bne.n	800647e <HAL_ADC_Init+0x176>
 800647a:	4a62      	ldr	r2, [pc, #392]	@ (8006604 <HAL_ADC_Init+0x2fc>)
 800647c:	e000      	b.n	8006480 <HAL_ADC_Init+0x178>
 800647e:	4a62      	ldr	r2, [pc, #392]	@ (8006608 <HAL_ADC_Init+0x300>)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7ff fd32 	bl	8005ef0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	7f5b      	ldrb	r3, [r3, #29]
 8006490:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006496:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800649c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80064a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80064ac:	4313      	orrs	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d106      	bne.n	80064c8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064be:	3b01      	subs	r3, #1
 80064c0:	045b      	lsls	r3, r3, #17
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d009      	beq.n	80064e4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	4b48      	ldr	r3, [pc, #288]	@ (800660c <HAL_ADC_Init+0x304>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	69b9      	ldr	r1, [r7, #24]
 80064f4:	430b      	orrs	r3, r1
 80064f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f7ff fee4 	bl	80062e0 <LL_ADC_INJ_IsConversionOngoing>
 8006518:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d17f      	bne.n	8006620 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d17c      	bne.n	8006620 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800652a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006532:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006534:	4313      	orrs	r3, r2
 8006536:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006542:	f023 0302 	bic.w	r3, r3, #2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	69b9      	ldr	r1, [r7, #24]
 800654c:	430b      	orrs	r3, r1
 800654e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d017      	beq.n	8006588 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006566:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006570:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6911      	ldr	r1, [r2, #16]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	430b      	orrs	r3, r1
 8006582:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006586:	e013      	b.n	80065b0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	691a      	ldr	r2, [r3, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006596:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80065a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d12a      	bne.n	8006610 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065c4:	f023 0304 	bic.w	r3, r3, #4
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80065d0:	4311      	orrs	r1, r2
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80065d6:	4311      	orrs	r1, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065dc:	430a      	orrs	r2, r1
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f042 0201 	orr.w	r2, r2, #1
 80065e8:	611a      	str	r2, [r3, #16]
 80065ea:	e019      	b.n	8006620 <HAL_ADC_Init+0x318>
 80065ec:	20000208 	.word	0x20000208
 80065f0:	053e2d63 	.word	0x053e2d63
 80065f4:	50000100 	.word	0x50000100
 80065f8:	50000400 	.word	0x50000400
 80065fc:	50000500 	.word	0x50000500
 8006600:	50000600 	.word	0x50000600
 8006604:	50000300 	.word	0x50000300
 8006608:	50000700 	.word	0x50000700
 800660c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691a      	ldr	r2, [r3, #16]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 0201 	bic.w	r2, r2, #1
 800661e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d10c      	bne.n	8006642 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662e:	f023 010f 	bic.w	r1, r3, #15
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	1e5a      	subs	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006640:	e007      	b.n	8006652 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 020f 	bic.w	r2, r2, #15
 8006650:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006662:	e007      	b.n	8006674 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006668:	f043 0210 	orr.w	r2, r3, #16
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006674:	7ffb      	ldrb	r3, [r7, #31]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3724      	adds	r7, #36	@ 0x24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd90      	pop	{r4, r7, pc}
 800667e:	bf00      	nop

08006680 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006690:	d004      	beq.n	800669c <HAL_ADC_Start+0x1c>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a67      	ldr	r2, [pc, #412]	@ (8006834 <HAL_ADC_Start+0x1b4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d101      	bne.n	80066a0 <HAL_ADC_Start+0x20>
 800669c:	4b66      	ldr	r3, [pc, #408]	@ (8006838 <HAL_ADC_Start+0x1b8>)
 800669e:	e000      	b.n	80066a2 <HAL_ADC_Start+0x22>
 80066a0:	4b66      	ldr	r3, [pc, #408]	@ (800683c <HAL_ADC_Start+0x1bc>)
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff fd72 	bl	800618c <LL_ADC_GetMultimode>
 80066a8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff fe03 	bl	80062ba <LL_ADC_REG_IsConversionOngoing>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f040 80b4 	bne.w	8006824 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <HAL_ADC_Start+0x4a>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e0af      	b.n	800682a <HAL_ADC_Start+0x1aa>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fd06 	bl	80070e4 <ADC_Enable>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80066dc:	7dfb      	ldrb	r3, [r7, #23]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f040 809b 	bne.w	800681a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80066ec:	f023 0301 	bic.w	r3, r3, #1
 80066f0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a4d      	ldr	r2, [pc, #308]	@ (8006834 <HAL_ADC_Start+0x1b4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d009      	beq.n	8006716 <HAL_ADC_Start+0x96>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a4e      	ldr	r2, [pc, #312]	@ (8006840 <HAL_ADC_Start+0x1c0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d002      	beq.n	8006712 <HAL_ADC_Start+0x92>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	e003      	b.n	800671a <HAL_ADC_Start+0x9a>
 8006712:	4b4c      	ldr	r3, [pc, #304]	@ (8006844 <HAL_ADC_Start+0x1c4>)
 8006714:	e001      	b.n	800671a <HAL_ADC_Start+0x9a>
 8006716:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	4293      	cmp	r3, r2
 8006720:	d002      	beq.n	8006728 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d105      	bne.n	8006734 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800673c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006740:	d106      	bne.n	8006750 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006746:	f023 0206 	bic.w	r2, r3, #6
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	661a      	str	r2, [r3, #96]	@ 0x60
 800674e:	e002      	b.n	8006756 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	221c      	movs	r2, #28
 800675c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a32      	ldr	r2, [pc, #200]	@ (8006834 <HAL_ADC_Start+0x1b4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d009      	beq.n	8006784 <HAL_ADC_Start+0x104>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a32      	ldr	r2, [pc, #200]	@ (8006840 <HAL_ADC_Start+0x1c0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d002      	beq.n	8006780 <HAL_ADC_Start+0x100>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	e003      	b.n	8006788 <HAL_ADC_Start+0x108>
 8006780:	4b30      	ldr	r3, [pc, #192]	@ (8006844 <HAL_ADC_Start+0x1c4>)
 8006782:	e001      	b.n	8006788 <HAL_ADC_Start+0x108>
 8006784:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6812      	ldr	r2, [r2, #0]
 800678c:	4293      	cmp	r3, r2
 800678e:	d008      	beq.n	80067a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d005      	beq.n	80067a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b05      	cmp	r3, #5
 800679a:	d002      	beq.n	80067a2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2b09      	cmp	r3, #9
 80067a0:	d114      	bne.n	80067cc <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80067b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fd64 	bl	8006292 <LL_ADC_REG_StartConversion>
 80067ca:	e02d      	b.n	8006828 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <HAL_ADC_Start+0x1b4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_ADC_Start+0x176>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a16      	ldr	r2, [pc, #88]	@ (8006840 <HAL_ADC_Start+0x1c0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d002      	beq.n	80067f2 <HAL_ADC_Start+0x172>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	e003      	b.n	80067fa <HAL_ADC_Start+0x17a>
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <HAL_ADC_Start+0x1c4>)
 80067f4:	e001      	b.n	80067fa <HAL_ADC_Start+0x17a>
 80067f6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80067fa:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00f      	beq.n	8006828 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800680c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006810:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006818:	e006      	b.n	8006828 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006822:	e001      	b.n	8006828 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006824:	2302      	movs	r3, #2
 8006826:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	50000100 	.word	0x50000100
 8006838:	50000300 	.word	0x50000300
 800683c:	50000700 	.word	0x50000700
 8006840:	50000500 	.word	0x50000500
 8006844:	50000400 	.word	0x50000400

08006848 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b0b6      	sub	sp, #216	@ 0xd8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800687e:	2b01      	cmp	r3, #1
 8006880:	d102      	bne.n	8006888 <HAL_ADC_ConfigChannel+0x24>
 8006882:	2302      	movs	r3, #2
 8006884:	f000 bc13 	b.w	80070ae <HAL_ADC_ConfigChannel+0x84a>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff fd10 	bl	80062ba <LL_ADC_REG_IsConversionOngoing>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 83f3 	bne.w	8007088 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6818      	ldr	r0, [r3, #0]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	6859      	ldr	r1, [r3, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	461a      	mov	r2, r3
 80068b0:	f7ff fbf0 	bl	8006094 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fcfe 	bl	80062ba <LL_ADC_REG_IsConversionOngoing>
 80068be:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff fd0a 	bl	80062e0 <LL_ADC_INJ_IsConversionOngoing>
 80068cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f040 81d9 	bne.w	8006c8c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 81d4 	bne.w	8006c8c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ec:	d10f      	bne.n	800690e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	4619      	mov	r1, r3
 80068fa:	f7ff fbf7 	bl	80060ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fbb1 	bl	800606e <LL_ADC_SetSamplingTimeCommonConfig>
 800690c:	e00e      	b.n	800692c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6819      	ldr	r1, [r3, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	461a      	mov	r2, r3
 800691c:	f7ff fbe6 	bl	80060ec <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fba1 	bl	800606e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695a      	ldr	r2, [r3, #20]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	08db      	lsrs	r3, r3, #3
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	2b04      	cmp	r3, #4
 800694c:	d022      	beq.n	8006994 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	6919      	ldr	r1, [r3, #16]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800695e:	f7ff fafb 	bl	8005f58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6818      	ldr	r0, [r3, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	6919      	ldr	r1, [r3, #16]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	461a      	mov	r2, r3
 8006970:	f7ff fb47 	bl	8006002 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006980:	2b01      	cmp	r3, #1
 8006982:	d102      	bne.n	800698a <HAL_ADC_ConfigChannel+0x126>
 8006984:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006988:	e000      	b.n	800698c <HAL_ADC_ConfigChannel+0x128>
 800698a:	2300      	movs	r3, #0
 800698c:	461a      	mov	r2, r3
 800698e:	f7ff fb53 	bl	8006038 <LL_ADC_SetOffsetSaturation>
 8006992:	e17b      	b.n	8006c8c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fb00 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 80069a0:	4603      	mov	r3, r0
 80069a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <HAL_ADC_ConfigChannel+0x15c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff faf5 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 80069b6:	4603      	mov	r3, r0
 80069b8:	0e9b      	lsrs	r3, r3, #26
 80069ba:	f003 021f 	and.w	r2, r3, #31
 80069be:	e01e      	b.n	80069fe <HAL_ADC_ConfigChannel+0x19a>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2100      	movs	r1, #0
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7ff faea 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 80069cc:	4603      	mov	r3, r0
 80069ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80069d6:	fa93 f3a3 	rbit	r3, r3
 80069da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80069de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80069e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80069ee:	2320      	movs	r3, #32
 80069f0:	e004      	b.n	80069fc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80069f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069f6:	fab3 f383 	clz	r3, r3
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d105      	bne.n	8006a16 <HAL_ADC_ConfigChannel+0x1b2>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	0e9b      	lsrs	r3, r3, #26
 8006a10:	f003 031f 	and.w	r3, r3, #31
 8006a14:	e018      	b.n	8006a48 <HAL_ADC_ConfigChannel+0x1e4>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006a22:	fa93 f3a3 	rbit	r3, r3
 8006a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006a32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006a3a:	2320      	movs	r3, #32
 8006a3c:	e004      	b.n	8006a48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006a3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006a42:	fab3 f383 	clz	r3, r3
 8006a46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d106      	bne.n	8006a5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2200      	movs	r2, #0
 8006a52:	2100      	movs	r1, #0
 8006a54:	4618      	mov	r0, r3
 8006a56:	f7ff fab9 	bl	8005fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fa9d 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <HAL_ADC_ConfigChannel+0x222>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2101      	movs	r1, #1
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7ff fa92 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	0e9b      	lsrs	r3, r3, #26
 8006a80:	f003 021f 	and.w	r2, r3, #31
 8006a84:	e01e      	b.n	8006ac4 <HAL_ADC_ConfigChannel+0x260>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fa87 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006a92:	4603      	mov	r3, r0
 8006a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006a9c:	fa93 f3a3 	rbit	r3, r3
 8006aa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006aa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006aac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006ab4:	2320      	movs	r3, #32
 8006ab6:	e004      	b.n	8006ac2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006ab8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006abc:	fab3 f383 	clz	r3, r3
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d105      	bne.n	8006adc <HAL_ADC_ConfigChannel+0x278>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	0e9b      	lsrs	r3, r3, #26
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	e018      	b.n	8006b0e <HAL_ADC_ConfigChannel+0x2aa>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ae8:	fa93 f3a3 	rbit	r3, r3
 8006aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006af4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006af8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006b00:	2320      	movs	r3, #32
 8006b02:	e004      	b.n	8006b0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b08:	fab3 f383 	clz	r3, r3
 8006b0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d106      	bne.n	8006b20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2200      	movs	r2, #0
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fa56 	bl	8005fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2102      	movs	r1, #2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff fa3a 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <HAL_ADC_ConfigChannel+0x2e8>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2102      	movs	r1, #2
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff fa2f 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006b42:	4603      	mov	r3, r0
 8006b44:	0e9b      	lsrs	r3, r3, #26
 8006b46:	f003 021f 	and.w	r2, r3, #31
 8006b4a:	e01e      	b.n	8006b8a <HAL_ADC_ConfigChannel+0x326>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2102      	movs	r1, #2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fa24 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b62:	fa93 f3a3 	rbit	r3, r3
 8006b66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006b7a:	2320      	movs	r3, #32
 8006b7c:	e004      	b.n	8006b88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006b7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006b82:	fab3 f383 	clz	r3, r3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <HAL_ADC_ConfigChannel+0x33e>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	0e9b      	lsrs	r3, r3, #26
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	e016      	b.n	8006bd0 <HAL_ADC_ConfigChannel+0x36c>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006baa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006bae:	fa93 f3a3 	rbit	r3, r3
 8006bb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006bc2:	2320      	movs	r3, #32
 8006bc4:	e004      	b.n	8006bd0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006bca:	fab3 f383 	clz	r3, r3
 8006bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d106      	bne.n	8006be2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2102      	movs	r1, #2
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff f9f5 	bl	8005fcc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2103      	movs	r1, #3
 8006be8:	4618      	mov	r0, r3
 8006bea:	f7ff f9d9 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <HAL_ADC_ConfigChannel+0x3aa>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2103      	movs	r1, #3
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff f9ce 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006c04:	4603      	mov	r3, r0
 8006c06:	0e9b      	lsrs	r3, r3, #26
 8006c08:	f003 021f 	and.w	r2, r3, #31
 8006c0c:	e017      	b.n	8006c3e <HAL_ADC_ConfigChannel+0x3da>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2103      	movs	r1, #3
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff f9c3 	bl	8005fa0 <LL_ADC_GetOffsetChannel>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c20:	fa93 f3a3 	rbit	r3, r3
 8006c24:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006c26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c28:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006c2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d101      	bne.n	8006c34 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006c30:	2320      	movs	r3, #32
 8006c32:	e003      	b.n	8006c3c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006c34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c36:	fab3 f383 	clz	r3, r3
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d105      	bne.n	8006c56 <HAL_ADC_ConfigChannel+0x3f2>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	0e9b      	lsrs	r3, r3, #26
 8006c50:	f003 031f 	and.w	r3, r3, #31
 8006c54:	e011      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x416>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c5e:	fa93 f3a3 	rbit	r3, r3
 8006c62:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006c6e:	2320      	movs	r3, #32
 8006c70:	e003      	b.n	8006c7a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006c72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c74:	fab3 f383 	clz	r3, r3
 8006c78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d106      	bne.n	8006c8c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2200      	movs	r2, #0
 8006c84:	2103      	movs	r1, #3
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7ff f9a0 	bl	8005fcc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff faeb 	bl	800626c <LL_ADC_IsEnabled>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f040 813d 	bne.w	8006f18 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f7ff fa4a 	bl	8006144 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	4aa2      	ldr	r2, [pc, #648]	@ (8006f40 <HAL_ADC_ConfigChannel+0x6dc>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	f040 812e 	bne.w	8006f18 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10b      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x480>
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	0e9b      	lsrs	r3, r3, #26
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	f003 031f 	and.w	r3, r3, #31
 8006cd8:	2b09      	cmp	r3, #9
 8006cda:	bf94      	ite	ls
 8006cdc:	2301      	movls	r3, #1
 8006cde:	2300      	movhi	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	e019      	b.n	8006d18 <HAL_ADC_ConfigChannel+0x4b4>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cec:	fa93 f3a3 	rbit	r3, r3
 8006cf0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cf4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006cf6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	e003      	b.n	8006d08 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006d00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d02:	fab3 f383 	clz	r3, r3
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	3301      	adds	r3, #1
 8006d0a:	f003 031f 	and.w	r3, r3, #31
 8006d0e:	2b09      	cmp	r3, #9
 8006d10:	bf94      	ite	ls
 8006d12:	2301      	movls	r3, #1
 8006d14:	2300      	movhi	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d079      	beq.n	8006e10 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d107      	bne.n	8006d38 <HAL_ADC_ConfigChannel+0x4d4>
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	0e9b      	lsrs	r3, r3, #26
 8006d2e:	3301      	adds	r3, #1
 8006d30:	069b      	lsls	r3, r3, #26
 8006d32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006d36:	e015      	b.n	8006d64 <HAL_ADC_ConfigChannel+0x500>
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d40:	fa93 f3a3 	rbit	r3, r3
 8006d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006d50:	2320      	movs	r3, #32
 8006d52:	e003      	b.n	8006d5c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d56:	fab3 f383 	clz	r3, r3
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	069b      	lsls	r3, r3, #26
 8006d60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <HAL_ADC_ConfigChannel+0x520>
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	0e9b      	lsrs	r3, r3, #26
 8006d76:	3301      	adds	r3, #1
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d82:	e017      	b.n	8006db4 <HAL_ADC_ConfigChannel+0x550>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d8c:	fa93 f3a3 	rbit	r3, r3
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d101      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006d9c:	2320      	movs	r3, #32
 8006d9e:	e003      	b.n	8006da8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006da0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da2:	fab3 f383 	clz	r3, r3
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	3301      	adds	r3, #1
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2101      	movs	r1, #1
 8006db0:	fa01 f303 	lsl.w	r3, r1, r3
 8006db4:	ea42 0103 	orr.w	r1, r2, r3
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <HAL_ADC_ConfigChannel+0x576>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	0e9b      	lsrs	r3, r3, #26
 8006dca:	3301      	adds	r3, #1
 8006dcc:	f003 021f 	and.w	r2, r3, #31
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	005b      	lsls	r3, r3, #1
 8006dd4:	4413      	add	r3, r2
 8006dd6:	051b      	lsls	r3, r3, #20
 8006dd8:	e018      	b.n	8006e0c <HAL_ADC_ConfigChannel+0x5a8>
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de2:	fa93 f3a3 	rbit	r3, r3
 8006de6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006df2:	2320      	movs	r3, #32
 8006df4:	e003      	b.n	8006dfe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df8:	fab3 f383 	clz	r3, r3
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	3301      	adds	r3, #1
 8006e00:	f003 021f 	and.w	r2, r3, #31
 8006e04:	4613      	mov	r3, r2
 8006e06:	005b      	lsls	r3, r3, #1
 8006e08:	4413      	add	r3, r2
 8006e0a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	e07e      	b.n	8006f0e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <HAL_ADC_ConfigChannel+0x5c8>
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	0e9b      	lsrs	r3, r3, #26
 8006e22:	3301      	adds	r3, #1
 8006e24:	069b      	lsls	r3, r3, #26
 8006e26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006e2a:	e015      	b.n	8006e58 <HAL_ADC_ConfigChannel+0x5f4>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e34:	fa93 f3a3 	rbit	r3, r3
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006e44:	2320      	movs	r3, #32
 8006e46:	e003      	b.n	8006e50 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	fab3 f383 	clz	r3, r3
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	3301      	adds	r3, #1
 8006e52:	069b      	lsls	r3, r3, #26
 8006e54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d109      	bne.n	8006e78 <HAL_ADC_ConfigChannel+0x614>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	0e9b      	lsrs	r3, r3, #26
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	f003 031f 	and.w	r3, r3, #31
 8006e70:	2101      	movs	r1, #1
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	e017      	b.n	8006ea8 <HAL_ADC_ConfigChannel+0x644>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	fa93 f3a3 	rbit	r3, r3
 8006e84:	61fb      	str	r3, [r7, #28]
  return result;
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006e90:	2320      	movs	r3, #32
 8006e92:	e003      	b.n	8006e9c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	fab3 f383 	clz	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea8:	ea42 0103 	orr.w	r1, r2, r3
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10d      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x670>
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	0e9b      	lsrs	r3, r3, #26
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	f003 021f 	and.w	r2, r3, #31
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	005b      	lsls	r3, r3, #1
 8006ec8:	4413      	add	r3, r2
 8006eca:	3b1e      	subs	r3, #30
 8006ecc:	051b      	lsls	r3, r3, #20
 8006ece:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006ed2:	e01b      	b.n	8006f0c <HAL_ADC_ConfigChannel+0x6a8>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	fa93 f3a3 	rbit	r3, r3
 8006ee0:	613b      	str	r3, [r7, #16]
  return result;
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006eec:	2320      	movs	r3, #32
 8006eee:	e003      	b.n	8006ef8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	fab3 f383 	clz	r3, r3
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	3301      	adds	r3, #1
 8006efa:	f003 021f 	and.w	r2, r3, #31
 8006efe:	4613      	mov	r3, r2
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	4413      	add	r3, r2
 8006f04:	3b1e      	subs	r3, #30
 8006f06:	051b      	lsls	r3, r3, #20
 8006f08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006f0e:	683a      	ldr	r2, [r7, #0]
 8006f10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f12:	4619      	mov	r1, r3
 8006f14:	f7ff f8ea 	bl	80060ec <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	4b09      	ldr	r3, [pc, #36]	@ (8006f44 <HAL_ADC_ConfigChannel+0x6e0>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80be 	beq.w	80070a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f2e:	d004      	beq.n	8006f3a <HAL_ADC_ConfigChannel+0x6d6>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a04      	ldr	r2, [pc, #16]	@ (8006f48 <HAL_ADC_ConfigChannel+0x6e4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d10a      	bne.n	8006f50 <HAL_ADC_ConfigChannel+0x6ec>
 8006f3a:	4b04      	ldr	r3, [pc, #16]	@ (8006f4c <HAL_ADC_ConfigChannel+0x6e8>)
 8006f3c:	e009      	b.n	8006f52 <HAL_ADC_ConfigChannel+0x6ee>
 8006f3e:	bf00      	nop
 8006f40:	407f0000 	.word	0x407f0000
 8006f44:	80080000 	.word	0x80080000
 8006f48:	50000100 	.word	0x50000100
 8006f4c:	50000300 	.word	0x50000300
 8006f50:	4b59      	ldr	r3, [pc, #356]	@ (80070b8 <HAL_ADC_ConfigChannel+0x854>)
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fff2 	bl	8005f3c <LL_ADC_GetCommonPathInternalCh>
 8006f58:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a56      	ldr	r2, [pc, #344]	@ (80070bc <HAL_ADC_ConfigChannel+0x858>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d004      	beq.n	8006f70 <HAL_ADC_ConfigChannel+0x70c>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a55      	ldr	r2, [pc, #340]	@ (80070c0 <HAL_ADC_ConfigChannel+0x85c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d13a      	bne.n	8006fe6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006f70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d134      	bne.n	8006fe6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f84:	d005      	beq.n	8006f92 <HAL_ADC_ConfigChannel+0x72e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80070c4 <HAL_ADC_ConfigChannel+0x860>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	f040 8085 	bne.w	800709c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f9a:	d004      	beq.n	8006fa6 <HAL_ADC_ConfigChannel+0x742>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a49      	ldr	r2, [pc, #292]	@ (80070c8 <HAL_ADC_ConfigChannel+0x864>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d101      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x746>
 8006fa6:	4a49      	ldr	r2, [pc, #292]	@ (80070cc <HAL_ADC_ConfigChannel+0x868>)
 8006fa8:	e000      	b.n	8006fac <HAL_ADC_ConfigChannel+0x748>
 8006faa:	4a43      	ldr	r2, [pc, #268]	@ (80070b8 <HAL_ADC_ConfigChannel+0x854>)
 8006fac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006fb0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f7fe ffad 	bl	8005f16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fbc:	4b44      	ldr	r3, [pc, #272]	@ (80070d0 <HAL_ADC_ConfigChannel+0x86c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	099b      	lsrs	r3, r3, #6
 8006fc2:	4a44      	ldr	r2, [pc, #272]	@ (80070d4 <HAL_ADC_ConfigChannel+0x870>)
 8006fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc8:	099b      	lsrs	r3, r3, #6
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	4613      	mov	r3, r2
 8006fce:	005b      	lsls	r3, r3, #1
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006fd6:	e002      	b.n	8006fde <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1f9      	bne.n	8006fd8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006fe4:	e05a      	b.n	800709c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3b      	ldr	r2, [pc, #236]	@ (80070d8 <HAL_ADC_ConfigChannel+0x874>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d125      	bne.n	800703c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ff4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d11f      	bne.n	800703c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a31      	ldr	r2, [pc, #196]	@ (80070c8 <HAL_ADC_ConfigChannel+0x864>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d104      	bne.n	8007010 <HAL_ADC_ConfigChannel+0x7ac>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a34      	ldr	r2, [pc, #208]	@ (80070dc <HAL_ADC_ConfigChannel+0x878>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d047      	beq.n	80070a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007018:	d004      	beq.n	8007024 <HAL_ADC_ConfigChannel+0x7c0>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a2a      	ldr	r2, [pc, #168]	@ (80070c8 <HAL_ADC_ConfigChannel+0x864>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d101      	bne.n	8007028 <HAL_ADC_ConfigChannel+0x7c4>
 8007024:	4a29      	ldr	r2, [pc, #164]	@ (80070cc <HAL_ADC_ConfigChannel+0x868>)
 8007026:	e000      	b.n	800702a <HAL_ADC_ConfigChannel+0x7c6>
 8007028:	4a23      	ldr	r2, [pc, #140]	@ (80070b8 <HAL_ADC_ConfigChannel+0x854>)
 800702a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800702e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fe ff6e 	bl	8005f16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800703a:	e031      	b.n	80070a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a27      	ldr	r2, [pc, #156]	@ (80070e0 <HAL_ADC_ConfigChannel+0x87c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d12d      	bne.n	80070a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800704a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d127      	bne.n	80070a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a1c      	ldr	r2, [pc, #112]	@ (80070c8 <HAL_ADC_ConfigChannel+0x864>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d022      	beq.n	80070a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007064:	d004      	beq.n	8007070 <HAL_ADC_ConfigChannel+0x80c>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a17      	ldr	r2, [pc, #92]	@ (80070c8 <HAL_ADC_ConfigChannel+0x864>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d101      	bne.n	8007074 <HAL_ADC_ConfigChannel+0x810>
 8007070:	4a16      	ldr	r2, [pc, #88]	@ (80070cc <HAL_ADC_ConfigChannel+0x868>)
 8007072:	e000      	b.n	8007076 <HAL_ADC_ConfigChannel+0x812>
 8007074:	4a10      	ldr	r2, [pc, #64]	@ (80070b8 <HAL_ADC_ConfigChannel+0x854>)
 8007076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800707a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7fe ff48 	bl	8005f16 <LL_ADC_SetCommonPathInternalCh>
 8007086:	e00c      	b.n	80070a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800708c:	f043 0220 	orr.w	r2, r3, #32
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800709a:	e002      	b.n	80070a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80070a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80070aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	37d8      	adds	r7, #216	@ 0xd8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	50000700 	.word	0x50000700
 80070bc:	c3210000 	.word	0xc3210000
 80070c0:	90c00010 	.word	0x90c00010
 80070c4:	50000600 	.word	0x50000600
 80070c8:	50000100 	.word	0x50000100
 80070cc:	50000300 	.word	0x50000300
 80070d0:	20000208 	.word	0x20000208
 80070d4:	053e2d63 	.word	0x053e2d63
 80070d8:	c7520000 	.word	0xc7520000
 80070dc:	50000500 	.word	0x50000500
 80070e0:	cb840000 	.word	0xcb840000

080070e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff f8b9 	bl	800626c <LL_ADC_IsEnabled>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d176      	bne.n	80071ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	4b3c      	ldr	r3, [pc, #240]	@ (80071f8 <ADC_Enable+0x114>)
 8007108:	4013      	ands	r3, r2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00d      	beq.n	800712a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007112:	f043 0210 	orr.w	r2, r3, #16
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800711e:	f043 0201 	orr.w	r2, r3, #1
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e062      	b.n	80071f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff f888 	bl	8006244 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800713c:	d004      	beq.n	8007148 <ADC_Enable+0x64>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <ADC_Enable+0x118>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d101      	bne.n	800714c <ADC_Enable+0x68>
 8007148:	4b2d      	ldr	r3, [pc, #180]	@ (8007200 <ADC_Enable+0x11c>)
 800714a:	e000      	b.n	800714e <ADC_Enable+0x6a>
 800714c:	4b2d      	ldr	r3, [pc, #180]	@ (8007204 <ADC_Enable+0x120>)
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe fef4 	bl	8005f3c <LL_ADC_GetCommonPathInternalCh>
 8007154:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007156:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800715a:	2b00      	cmp	r3, #0
 800715c:	d013      	beq.n	8007186 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800715e:	4b2a      	ldr	r3, [pc, #168]	@ (8007208 <ADC_Enable+0x124>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	099b      	lsrs	r3, r3, #6
 8007164:	4a29      	ldr	r2, [pc, #164]	@ (800720c <ADC_Enable+0x128>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	4613      	mov	r3, r2
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007178:	e002      	b.n	8007180 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3b01      	subs	r3, #1
 800717e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1f9      	bne.n	800717a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007186:	f7fe fea7 	bl	8005ed8 <HAL_GetTick>
 800718a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800718c:	e028      	b.n	80071e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f7ff f86a 	bl	800626c <LL_ADC_IsEnabled>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d104      	bne.n	80071a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff f84e 	bl	8006244 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80071a8:	f7fe fe96 	bl	8005ed8 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d914      	bls.n	80071e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d00d      	beq.n	80071e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071c8:	f043 0210 	orr.w	r2, r3, #16
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e007      	b.n	80071f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d1cf      	bne.n	800718e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	8000003f 	.word	0x8000003f
 80071fc:	50000100 	.word	0x50000100
 8007200:	50000300 	.word	0x50000300
 8007204:	50000700 	.word	0x50000700
 8007208:	20000208 	.word	0x20000208
 800720c:	053e2d63 	.word	0x053e2d63

08007210 <LL_ADC_IsEnabled>:
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <LL_ADC_IsEnabled+0x18>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <LL_ADC_IsEnabled+0x1a>
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	370c      	adds	r7, #12
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <LL_ADC_REG_IsConversionOngoing>:
{
 8007236:	b480      	push	{r7}
 8007238:	b083      	sub	sp, #12
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b04      	cmp	r3, #4
 8007248:	d101      	bne.n	800724e <LL_ADC_REG_IsConversionOngoing+0x18>
 800724a:	2301      	movs	r3, #1
 800724c:	e000      	b.n	8007250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800725c:	b590      	push	{r4, r7, lr}
 800725e:	b0a1      	sub	sp, #132	@ 0x84
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007276:	2302      	movs	r3, #2
 8007278:	e0e7      	b.n	800744a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007282:	2300      	movs	r3, #0
 8007284:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007286:	2300      	movs	r3, #0
 8007288:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007292:	d102      	bne.n	800729a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007294:	4b6f      	ldr	r3, [pc, #444]	@ (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	e009      	b.n	80072ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a6e      	ldr	r2, [pc, #440]	@ (8007458 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d102      	bne.n	80072aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80072a4:	4b6d      	ldr	r3, [pc, #436]	@ (800745c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	e001      	b.n	80072ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10b      	bne.n	80072cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072b8:	f043 0220 	orr.w	r2, r3, #32
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0be      	b.n	800744a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7ff ffb1 	bl	8007236 <LL_ADC_REG_IsConversionOngoing>
 80072d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff ffab 	bl	8007236 <LL_ADC_REG_IsConversionOngoing>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	f040 80a0 	bne.w	8007428 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80072e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f040 809c 	bne.w	8007428 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072f8:	d004      	beq.n	8007304 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a55      	ldr	r2, [pc, #340]	@ (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d101      	bne.n	8007308 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007304:	4b56      	ldr	r3, [pc, #344]	@ (8007460 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007306:	e000      	b.n	800730a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007308:	4b56      	ldr	r3, [pc, #344]	@ (8007464 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800730a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d04b      	beq.n	80073ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007314:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	6859      	ldr	r1, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007326:	035b      	lsls	r3, r3, #13
 8007328:	430b      	orrs	r3, r1
 800732a:	431a      	orrs	r2, r3
 800732c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800732e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007338:	d004      	beq.n	8007344 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a45      	ldr	r2, [pc, #276]	@ (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d10f      	bne.n	8007364 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007344:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007348:	f7ff ff62 	bl	8007210 <LL_ADC_IsEnabled>
 800734c:	4604      	mov	r4, r0
 800734e:	4841      	ldr	r0, [pc, #260]	@ (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007350:	f7ff ff5e 	bl	8007210 <LL_ADC_IsEnabled>
 8007354:	4603      	mov	r3, r0
 8007356:	4323      	orrs	r3, r4
 8007358:	2b00      	cmp	r3, #0
 800735a:	bf0c      	ite	eq
 800735c:	2301      	moveq	r3, #1
 800735e:	2300      	movne	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	e012      	b.n	800738a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007364:	483c      	ldr	r0, [pc, #240]	@ (8007458 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007366:	f7ff ff53 	bl	8007210 <LL_ADC_IsEnabled>
 800736a:	4604      	mov	r4, r0
 800736c:	483b      	ldr	r0, [pc, #236]	@ (800745c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800736e:	f7ff ff4f 	bl	8007210 <LL_ADC_IsEnabled>
 8007372:	4603      	mov	r3, r0
 8007374:	431c      	orrs	r4, r3
 8007376:	483c      	ldr	r0, [pc, #240]	@ (8007468 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007378:	f7ff ff4a 	bl	8007210 <LL_ADC_IsEnabled>
 800737c:	4603      	mov	r3, r0
 800737e:	4323      	orrs	r3, r4
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf0c      	ite	eq
 8007384:	2301      	moveq	r3, #1
 8007386:	2300      	movne	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d056      	beq.n	800743c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800738e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007396:	f023 030f 	bic.w	r3, r3, #15
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	6811      	ldr	r1, [r2, #0]
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	6892      	ldr	r2, [r2, #8]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	431a      	orrs	r2, r3
 80073a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80073aa:	e047      	b.n	800743c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80073ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073c0:	d004      	beq.n	80073cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a23      	ldr	r2, [pc, #140]	@ (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d10f      	bne.n	80073ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80073cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80073d0:	f7ff ff1e 	bl	8007210 <LL_ADC_IsEnabled>
 80073d4:	4604      	mov	r4, r0
 80073d6:	481f      	ldr	r0, [pc, #124]	@ (8007454 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80073d8:	f7ff ff1a 	bl	8007210 <LL_ADC_IsEnabled>
 80073dc:	4603      	mov	r3, r0
 80073de:	4323      	orrs	r3, r4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	e012      	b.n	8007412 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80073ec:	481a      	ldr	r0, [pc, #104]	@ (8007458 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80073ee:	f7ff ff0f 	bl	8007210 <LL_ADC_IsEnabled>
 80073f2:	4604      	mov	r4, r0
 80073f4:	4819      	ldr	r0, [pc, #100]	@ (800745c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80073f6:	f7ff ff0b 	bl	8007210 <LL_ADC_IsEnabled>
 80073fa:	4603      	mov	r3, r0
 80073fc:	431c      	orrs	r4, r3
 80073fe:	481a      	ldr	r0, [pc, #104]	@ (8007468 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007400:	f7ff ff06 	bl	8007210 <LL_ADC_IsEnabled>
 8007404:	4603      	mov	r3, r0
 8007406:	4323      	orrs	r3, r4
 8007408:	2b00      	cmp	r3, #0
 800740a:	bf0c      	ite	eq
 800740c:	2301      	moveq	r3, #1
 800740e:	2300      	movne	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d012      	beq.n	800743c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007416:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800741e:	f023 030f 	bic.w	r3, r3, #15
 8007422:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007424:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007426:	e009      	b.n	800743c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742c:	f043 0220 	orr.w	r2, r3, #32
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800743a:	e000      	b.n	800743e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800743c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007446:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800744a:	4618      	mov	r0, r3
 800744c:	3784      	adds	r7, #132	@ 0x84
 800744e:	46bd      	mov	sp, r7
 8007450:	bd90      	pop	{r4, r7, pc}
 8007452:	bf00      	nop
 8007454:	50000100 	.word	0x50000100
 8007458:	50000400 	.word	0x50000400
 800745c:	50000500 	.word	0x50000500
 8007460:	50000300 	.word	0x50000300
 8007464:	50000700 	.word	0x50000700
 8007468:	50000600 	.word	0x50000600

0800746c <__NVIC_SetPriorityGrouping>:
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800747c:	4b0c      	ldr	r3, [pc, #48]	@ (80074b0 <__NVIC_SetPriorityGrouping+0x44>)
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007488:	4013      	ands	r3, r2
 800748a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007494:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800749c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800749e:	4a04      	ldr	r2, [pc, #16]	@ (80074b0 <__NVIC_SetPriorityGrouping+0x44>)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	60d3      	str	r3, [r2, #12]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	e000ed00 	.word	0xe000ed00

080074b4 <__NVIC_GetPriorityGrouping>:
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80074b8:	4b04      	ldr	r3, [pc, #16]	@ (80074cc <__NVIC_GetPriorityGrouping+0x18>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	f003 0307 	and.w	r3, r3, #7
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	e000ed00 	.word	0xe000ed00

080074d0 <__NVIC_EnableIRQ>:
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	4603      	mov	r3, r0
 80074d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	db0b      	blt.n	80074fa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	f003 021f 	and.w	r2, r3, #31
 80074e8:	4907      	ldr	r1, [pc, #28]	@ (8007508 <__NVIC_EnableIRQ+0x38>)
 80074ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	2001      	movs	r0, #1
 80074f2:	fa00 f202 	lsl.w	r2, r0, r2
 80074f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	e000e100 	.word	0xe000e100

0800750c <__NVIC_SetPriority>:
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800751c:	2b00      	cmp	r3, #0
 800751e:	db0a      	blt.n	8007536 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	b2da      	uxtb	r2, r3
 8007524:	490c      	ldr	r1, [pc, #48]	@ (8007558 <__NVIC_SetPriority+0x4c>)
 8007526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800752a:	0112      	lsls	r2, r2, #4
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	440b      	add	r3, r1
 8007530:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007534:	e00a      	b.n	800754c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	b2da      	uxtb	r2, r3
 800753a:	4908      	ldr	r1, [pc, #32]	@ (800755c <__NVIC_SetPriority+0x50>)
 800753c:	79fb      	ldrb	r3, [r7, #7]
 800753e:	f003 030f 	and.w	r3, r3, #15
 8007542:	3b04      	subs	r3, #4
 8007544:	0112      	lsls	r2, r2, #4
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	440b      	add	r3, r1
 800754a:	761a      	strb	r2, [r3, #24]
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	e000e100 	.word	0xe000e100
 800755c:	e000ed00 	.word	0xe000ed00

08007560 <NVIC_EncodePriority>:
{
 8007560:	b480      	push	{r7}
 8007562:	b089      	sub	sp, #36	@ 0x24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f003 0307 	and.w	r3, r3, #7
 8007572:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	f1c3 0307 	rsb	r3, r3, #7
 800757a:	2b04      	cmp	r3, #4
 800757c:	bf28      	it	cs
 800757e:	2304      	movcs	r3, #4
 8007580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	3304      	adds	r3, #4
 8007586:	2b06      	cmp	r3, #6
 8007588:	d902      	bls.n	8007590 <NVIC_EncodePriority+0x30>
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	3b03      	subs	r3, #3
 800758e:	e000      	b.n	8007592 <NVIC_EncodePriority+0x32>
 8007590:	2300      	movs	r3, #0
 8007592:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007594:	f04f 32ff 	mov.w	r2, #4294967295
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	fa02 f303 	lsl.w	r3, r2, r3
 800759e:	43da      	mvns	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	401a      	ands	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80075a8:	f04f 31ff 	mov.w	r1, #4294967295
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	fa01 f303 	lsl.w	r3, r1, r3
 80075b2:	43d9      	mvns	r1, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80075b8:	4313      	orrs	r3, r2
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3724      	adds	r7, #36	@ 0x24
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075d8:	d301      	bcc.n	80075de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075da:	2301      	movs	r3, #1
 80075dc:	e00f      	b.n	80075fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075de:	4a0a      	ldr	r2, [pc, #40]	@ (8007608 <SysTick_Config+0x40>)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075e6:	210f      	movs	r1, #15
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	f7ff ff8e 	bl	800750c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075f0:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <SysTick_Config+0x40>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075f6:	4b04      	ldr	r3, [pc, #16]	@ (8007608 <SysTick_Config+0x40>)
 80075f8:	2207      	movs	r2, #7
 80075fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	e000e010 	.word	0xe000e010

0800760c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff ff29 	bl	800746c <__NVIC_SetPriorityGrouping>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	4603      	mov	r3, r0
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007630:	f7ff ff40 	bl	80074b4 <__NVIC_GetPriorityGrouping>
 8007634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	68b9      	ldr	r1, [r7, #8]
 800763a:	6978      	ldr	r0, [r7, #20]
 800763c:	f7ff ff90 	bl	8007560 <NVIC_EncodePriority>
 8007640:	4602      	mov	r2, r0
 8007642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007646:	4611      	mov	r1, r2
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff ff5f 	bl	800750c <__NVIC_SetPriority>
}
 800764e:	bf00      	nop
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	4603      	mov	r3, r0
 800765e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007664:	4618      	mov	r0, r3
 8007666:	f7ff ff33 	bl	80074d0 <__NVIC_EnableIRQ>
}
 800766a:	bf00      	nop
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ffa4 	bl	80075c8 <SysTick_Config>
 8007680:	4603      	mov	r3, r0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
	...

0800768c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e08d      	b.n	80077ba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	4b47      	ldr	r3, [pc, #284]	@ (80077c4 <HAL_DMA_Init+0x138>)
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d80f      	bhi.n	80076ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	4b45      	ldr	r3, [pc, #276]	@ (80077c8 <HAL_DMA_Init+0x13c>)
 80076b2:	4413      	add	r3, r2
 80076b4:	4a45      	ldr	r2, [pc, #276]	@ (80077cc <HAL_DMA_Init+0x140>)
 80076b6:	fba2 2303 	umull	r2, r3, r2, r3
 80076ba:	091b      	lsrs	r3, r3, #4
 80076bc:	009a      	lsls	r2, r3, #2
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a42      	ldr	r2, [pc, #264]	@ (80077d0 <HAL_DMA_Init+0x144>)
 80076c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80076c8:	e00e      	b.n	80076e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	4b40      	ldr	r3, [pc, #256]	@ (80077d4 <HAL_DMA_Init+0x148>)
 80076d2:	4413      	add	r3, r2
 80076d4:	4a3d      	ldr	r2, [pc, #244]	@ (80077cc <HAL_DMA_Init+0x140>)
 80076d6:	fba2 2303 	umull	r2, r3, r2, r3
 80076da:	091b      	lsrs	r3, r3, #4
 80076dc:	009a      	lsls	r2, r3, #2
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a3c      	ldr	r2, [pc, #240]	@ (80077d8 <HAL_DMA_Init+0x14c>)
 80076e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80076fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007702:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800770c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4313      	orrs	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa82 	bl	8007c44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007748:	d102      	bne.n	8007750 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007758:	b2d2      	uxtb	r2, r2
 800775a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007764:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d010      	beq.n	8007790 <HAL_DMA_Init+0x104>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b04      	cmp	r3, #4
 8007774:	d80c      	bhi.n	8007790 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 faa2 	bl	8007cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	e008      	b.n	80077a2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40020407 	.word	0x40020407
 80077c8:	bffdfff8 	.word	0xbffdfff8
 80077cc:	cccccccd 	.word	0xcccccccd
 80077d0:	40020000 	.word	0x40020000
 80077d4:	bffdfbf8 	.word	0xbffdfbf8
 80077d8:	40020400 	.word	0x40020400

080077dc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d101      	bne.n	80077fc <HAL_DMA_Start_IT+0x20>
 80077f8:	2302      	movs	r3, #2
 80077fa:	e066      	b.n	80078ca <HAL_DMA_Start_IT+0xee>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b01      	cmp	r3, #1
 800780e:	d155      	bne.n	80078bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f022 0201 	bic.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f9c7 	bl	8007bc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800783e:	2b00      	cmp	r3, #0
 8007840:	d008      	beq.n	8007854 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 020e 	orr.w	r2, r2, #14
 8007850:	601a      	str	r2, [r3, #0]
 8007852:	e00f      	b.n	8007874 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0204 	bic.w	r2, r2, #4
 8007862:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f042 020a 	orr.w	r2, r2, #10
 8007872:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800788c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007890:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007896:	2b00      	cmp	r3, #0
 8007898:	d007      	beq.n	80078aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80078a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f042 0201 	orr.w	r2, r2, #1
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	e005      	b.n	80078c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80078c4:	2302      	movs	r3, #2
 80078c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d005      	beq.n	80078f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2204      	movs	r2, #4
 80078ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	e037      	b.n	8007966 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 020e 	bic.w	r2, r2, #14
 8007904:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007914:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0201 	bic.w	r2, r2, #1
 8007924:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800792a:	f003 021f 	and.w	r2, r3, #31
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	2101      	movs	r1, #1
 8007934:	fa01 f202 	lsl.w	r2, r1, r2
 8007938:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007942:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00c      	beq.n	8007966 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007956:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800795a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007964:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007976:	7bfb      	ldrb	r3, [r7, #15]
}
 8007978:	4618      	mov	r0, r3
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d00d      	beq.n	80079b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2204      	movs	r2, #4
 80079a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	73fb      	strb	r3, [r7, #15]
 80079b6:	e047      	b.n	8007a48 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 020e 	bic.w	r2, r2, #14
 80079c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	681a      	ldr	r2, [r3, #0]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0201 	bic.w	r2, r2, #1
 80079d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80079e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ec:	f003 021f 	and.w	r2, r3, #31
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f4:	2101      	movs	r1, #1
 80079f6:	fa01 f202 	lsl.w	r2, r1, r2
 80079fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00c      	beq.n	8007a28 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007a26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
    }
  }
  return status;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a6e:	f003 031f 	and.w	r3, r3, #31
 8007a72:	2204      	movs	r2, #4
 8007a74:	409a      	lsls	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4013      	ands	r3, r2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d026      	beq.n	8007acc <HAL_DMA_IRQHandler+0x7a>
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d021      	beq.n	8007acc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0320 	and.w	r3, r3, #32
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d107      	bne.n	8007aa6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0204 	bic.w	r2, r2, #4
 8007aa4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aaa:	f003 021f 	and.w	r2, r3, #31
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab2:	2104      	movs	r1, #4
 8007ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ab8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d071      	beq.n	8007ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007aca:	e06c      	b.n	8007ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad0:	f003 031f 	and.w	r3, r3, #31
 8007ad4:	2202      	movs	r2, #2
 8007ad6:	409a      	lsls	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d02e      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d029      	beq.n	8007b3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10b      	bne.n	8007b10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 020a 	bic.w	r2, r2, #10
 8007b06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b14:	f003 021f 	and.w	r2, r3, #31
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	2102      	movs	r1, #2
 8007b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007b22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d038      	beq.n	8007ba6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007b3c:	e033      	b.n	8007ba6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b42:	f003 031f 	and.w	r3, r3, #31
 8007b46:	2208      	movs	r2, #8
 8007b48:	409a      	lsls	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d02a      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f003 0308 	and.w	r3, r3, #8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d025      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 020e 	bic.w	r2, r2, #14
 8007b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b70:	f003 021f 	and.w	r2, r3, #31
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b78:	2101      	movs	r1, #1
 8007b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8007b7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ba6:	bf00      	nop
 8007ba8:	bf00      	nop
}
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007bde:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007bf0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf6:	f003 021f 	and.w	r2, r3, #31
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bfe:	2101      	movs	r1, #1
 8007c00:	fa01 f202 	lsl.w	r2, r1, r2
 8007c04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b10      	cmp	r3, #16
 8007c14:	d108      	bne.n	8007c28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c26:	e007      	b.n	8007c38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	60da      	str	r2, [r3, #12]
}
 8007c38:	bf00      	nop
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	4b16      	ldr	r3, [pc, #88]	@ (8007cac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d802      	bhi.n	8007c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007c58:	4b15      	ldr	r3, [pc, #84]	@ (8007cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	e001      	b.n	8007c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007c5e:	4b15      	ldr	r3, [pc, #84]	@ (8007cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007c60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	3b08      	subs	r3, #8
 8007c6e:	4a12      	ldr	r2, [pc, #72]	@ (8007cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007c70:	fba2 2303 	umull	r2, r3, r2, r3
 8007c74:	091b      	lsrs	r3, r3, #4
 8007c76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c7c:	089b      	lsrs	r3, r3, #2
 8007c7e:	009a      	lsls	r2, r3, #2
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	4413      	add	r3, r2
 8007c84:	461a      	mov	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8007cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007c8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 031f 	and.w	r3, r3, #31
 8007c96:	2201      	movs	r2, #1
 8007c98:	409a      	lsls	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40020407 	.word	0x40020407
 8007cb0:	40020800 	.word	0x40020800
 8007cb4:	40020820 	.word	0x40020820
 8007cb8:	cccccccd 	.word	0xcccccccd
 8007cbc:	40020880 	.word	0x40020880

08007cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	461a      	mov	r2, r3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a08      	ldr	r2, [pc, #32]	@ (8007d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ce2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	f003 031f 	and.w	r3, r3, #31
 8007cec:	2201      	movs	r2, #1
 8007cee:	409a      	lsls	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007cf4:	bf00      	nop
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	1000823f 	.word	0x1000823f
 8007d04:	40020940 	.word	0x40020940

08007d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d16:	e15a      	b.n	8007fce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	fa01 f303 	lsl.w	r3, r1, r3
 8007d24:	4013      	ands	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	f000 814c 	beq.w	8007fc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f003 0303 	and.w	r3, r3, #3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d005      	beq.n	8007d48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d130      	bne.n	8007daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	2203      	movs	r2, #3
 8007d54:	fa02 f303 	lsl.w	r3, r2, r3
 8007d58:	43db      	mvns	r3, r3
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	4013      	ands	r3, r2
 8007d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d7e:	2201      	movs	r2, #1
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	fa02 f303 	lsl.w	r3, r2, r3
 8007d86:	43db      	mvns	r3, r3
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	091b      	lsrs	r3, r3, #4
 8007d94:	f003 0201 	and.w	r2, r3, #1
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 0303 	and.w	r3, r3, #3
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d017      	beq.n	8007de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	693a      	ldr	r2, [r7, #16]
 8007de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d123      	bne.n	8007e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	08da      	lsrs	r2, r3, #3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3208      	adds	r2, #8
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f003 0307 	and.w	r3, r3, #7
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	220f      	movs	r2, #15
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	43db      	mvns	r3, r3
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4013      	ands	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f003 0307 	and.w	r3, r3, #7
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	08da      	lsrs	r2, r3, #3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	3208      	adds	r2, #8
 8007e34:	6939      	ldr	r1, [r7, #16]
 8007e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	2203      	movs	r2, #3
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f003 0203 	and.w	r2, r3, #3
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80a6 	beq.w	8007fc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8007fec <HAL_GPIO_Init+0x2e4>)
 8007e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e80:	4a5a      	ldr	r2, [pc, #360]	@ (8007fec <HAL_GPIO_Init+0x2e4>)
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	6613      	str	r3, [r2, #96]	@ 0x60
 8007e88:	4b58      	ldr	r3, [pc, #352]	@ (8007fec <HAL_GPIO_Init+0x2e4>)
 8007e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	60bb      	str	r3, [r7, #8]
 8007e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e94:	4a56      	ldr	r2, [pc, #344]	@ (8007ff0 <HAL_GPIO_Init+0x2e8>)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	089b      	lsrs	r3, r3, #2
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	220f      	movs	r2, #15
 8007eac:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007ebe:	d01f      	beq.n	8007f00 <HAL_GPIO_Init+0x1f8>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8007ff4 <HAL_GPIO_Init+0x2ec>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d019      	beq.n	8007efc <HAL_GPIO_Init+0x1f4>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a4b      	ldr	r2, [pc, #300]	@ (8007ff8 <HAL_GPIO_Init+0x2f0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d013      	beq.n	8007ef8 <HAL_GPIO_Init+0x1f0>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8007ffc <HAL_GPIO_Init+0x2f4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00d      	beq.n	8007ef4 <HAL_GPIO_Init+0x1ec>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a49      	ldr	r2, [pc, #292]	@ (8008000 <HAL_GPIO_Init+0x2f8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d007      	beq.n	8007ef0 <HAL_GPIO_Init+0x1e8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a48      	ldr	r2, [pc, #288]	@ (8008004 <HAL_GPIO_Init+0x2fc>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d101      	bne.n	8007eec <HAL_GPIO_Init+0x1e4>
 8007ee8:	2305      	movs	r3, #5
 8007eea:	e00a      	b.n	8007f02 <HAL_GPIO_Init+0x1fa>
 8007eec:	2306      	movs	r3, #6
 8007eee:	e008      	b.n	8007f02 <HAL_GPIO_Init+0x1fa>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	e006      	b.n	8007f02 <HAL_GPIO_Init+0x1fa>
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e004      	b.n	8007f02 <HAL_GPIO_Init+0x1fa>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e002      	b.n	8007f02 <HAL_GPIO_Init+0x1fa>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <HAL_GPIO_Init+0x1fa>
 8007f00:	2300      	movs	r3, #0
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	f002 0203 	and.w	r2, r2, #3
 8007f08:	0092      	lsls	r2, r2, #2
 8007f0a:	4093      	lsls	r3, r2
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f12:	4937      	ldr	r1, [pc, #220]	@ (8007ff0 <HAL_GPIO_Init+0x2e8>)
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	3302      	adds	r3, #2
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f20:	4b39      	ldr	r3, [pc, #228]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007f44:	4a30      	ldr	r2, [pc, #192]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	43db      	mvns	r3, r3
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4013      	ands	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007f6e:	4a26      	ldr	r2, [pc, #152]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007f74:	4b24      	ldr	r3, [pc, #144]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	43db      	mvns	r3, r3
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4013      	ands	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d003      	beq.n	8007f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007f98:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4013      	ands	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007fc2:	4a11      	ldr	r2, [pc, #68]	@ (8008008 <HAL_GPIO_Init+0x300>)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f47f ae9d 	bne.w	8007d18 <HAL_GPIO_Init+0x10>
  }
}
 8007fde:	bf00      	nop
 8007fe0:	bf00      	nop
 8007fe2:	371c      	adds	r7, #28
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	40021000 	.word	0x40021000
 8007ff0:	40010000 	.word	0x40010000
 8007ff4:	48000400 	.word	0x48000400
 8007ff8:	48000800 	.word	0x48000800
 8007ffc:	48000c00 	.word	0x48000c00
 8008000:	48001000 	.word	0x48001000
 8008004:	48001400 	.word	0x48001400
 8008008:	40010400 	.word	0x40010400

0800800c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	887b      	ldrh	r3, [r7, #2]
 800801e:	4013      	ands	r3, r2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008024:	2301      	movs	r3, #1
 8008026:	73fb      	strb	r3, [r7, #15]
 8008028:	e001      	b.n	800802e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3714      	adds	r7, #20
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	460b      	mov	r3, r1
 8008046:	807b      	strh	r3, [r7, #2]
 8008048:	4613      	mov	r3, r2
 800804a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800804c:	787b      	ldrb	r3, [r7, #1]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008052:	887a      	ldrh	r2, [r7, #2]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008058:	e002      	b.n	8008060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800805a:	887a      	ldrh	r2, [r7, #2]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008076:	4b08      	ldr	r3, [pc, #32]	@ (8008098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008078:	695a      	ldr	r2, [r3, #20]
 800807a:	88fb      	ldrh	r3, [r7, #6]
 800807c:	4013      	ands	r3, r2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d006      	beq.n	8008090 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008082:	4a05      	ldr	r2, [pc, #20]	@ (8008098 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008088:	88fb      	ldrh	r3, [r7, #6]
 800808a:	4618      	mov	r0, r3
 800808c:	f7fc fc02 	bl	8004894 <HAL_GPIO_EXTI_Callback>
  }
}
 8008090:	bf00      	nop
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40010400 	.word	0x40010400

0800809c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d141      	bne.n	800812e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80080aa:	4b4b      	ldr	r3, [pc, #300]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80080b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080b6:	d131      	bne.n	800811c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80080b8:	4b47      	ldr	r3, [pc, #284]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80080be:	4a46      	ldr	r2, [pc, #280]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80080c8:	4b43      	ldr	r3, [pc, #268]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80080d0:	4a41      	ldr	r2, [pc, #260]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80080d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80080d8:	4b40      	ldr	r3, [pc, #256]	@ (80081dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2232      	movs	r2, #50	@ 0x32
 80080de:	fb02 f303 	mul.w	r3, r2, r3
 80080e2:	4a3f      	ldr	r2, [pc, #252]	@ (80081e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80080e4:	fba2 2303 	umull	r2, r3, r2, r3
 80080e8:	0c9b      	lsrs	r3, r3, #18
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080ee:	e002      	b.n	80080f6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80080f6:	4b38      	ldr	r3, [pc, #224]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008102:	d102      	bne.n	800810a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f2      	bne.n	80080f0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800810a:	4b33      	ldr	r3, [pc, #204]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800810c:	695b      	ldr	r3, [r3, #20]
 800810e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008112:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008116:	d158      	bne.n	80081ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e057      	b.n	80081cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800811c:	4b2e      	ldr	r3, [pc, #184]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800811e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008122:	4a2d      	ldr	r2, [pc, #180]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008128:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800812c:	e04d      	b.n	80081ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008134:	d141      	bne.n	80081ba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008136:	4b28      	ldr	r3, [pc, #160]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800813e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008142:	d131      	bne.n	80081a8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008144:	4b24      	ldr	r3, [pc, #144]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800814a:	4a23      	ldr	r2, [pc, #140]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800814c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008154:	4b20      	ldr	r3, [pc, #128]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800815c:	4a1e      	ldr	r2, [pc, #120]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800815e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008164:	4b1d      	ldr	r3, [pc, #116]	@ (80081dc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2232      	movs	r2, #50	@ 0x32
 800816a:	fb02 f303 	mul.w	r3, r2, r3
 800816e:	4a1c      	ldr	r2, [pc, #112]	@ (80081e0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008170:	fba2 2303 	umull	r2, r3, r2, r3
 8008174:	0c9b      	lsrs	r3, r3, #18
 8008176:	3301      	adds	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800817a:	e002      	b.n	8008182 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3b01      	subs	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008182:	4b15      	ldr	r3, [pc, #84]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800818a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800818e:	d102      	bne.n	8008196 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f2      	bne.n	800817c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008196:	4b10      	ldr	r3, [pc, #64]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800819e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081a2:	d112      	bne.n	80081ca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e011      	b.n	80081cc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081a8:	4b0b      	ldr	r3, [pc, #44]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081ae:	4a0a      	ldr	r2, [pc, #40]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80081b8:	e007      	b.n	80081ca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80081ba:	4b07      	ldr	r3, [pc, #28]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80081c2:	4a05      	ldr	r2, [pc, #20]	@ (80081d8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80081c8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	40007000 	.word	0x40007000
 80081dc:	20000208 	.word	0x20000208
 80081e0:	431bde83 	.word	0x431bde83

080081e4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80081e8:	4b05      	ldr	r3, [pc, #20]	@ (8008200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	4a04      	ldr	r2, [pc, #16]	@ (8008200 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80081ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081f2:	6093      	str	r3, [r2, #8]
}
 80081f4:	bf00      	nop
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	40007000 	.word	0x40007000

08008204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b088      	sub	sp, #32
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e2fe      	b.n	8008814 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d075      	beq.n	800830e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008222:	4b97      	ldr	r3, [pc, #604]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 030c 	and.w	r3, r3, #12
 800822a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800822c:	4b94      	ldr	r3, [pc, #592]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0303 	and.w	r3, r3, #3
 8008234:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	2b0c      	cmp	r3, #12
 800823a:	d102      	bne.n	8008242 <HAL_RCC_OscConfig+0x3e>
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2b03      	cmp	r3, #3
 8008240:	d002      	beq.n	8008248 <HAL_RCC_OscConfig+0x44>
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d10b      	bne.n	8008260 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008248:	4b8d      	ldr	r3, [pc, #564]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d05b      	beq.n	800830c <HAL_RCC_OscConfig+0x108>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d157      	bne.n	800830c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e2d9      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008268:	d106      	bne.n	8008278 <HAL_RCC_OscConfig+0x74>
 800826a:	4b85      	ldr	r3, [pc, #532]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a84      	ldr	r2, [pc, #528]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	e01d      	b.n	80082b4 <HAL_RCC_OscConfig+0xb0>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008280:	d10c      	bne.n	800829c <HAL_RCC_OscConfig+0x98>
 8008282:	4b7f      	ldr	r3, [pc, #508]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a7e      	ldr	r2, [pc, #504]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	4b7c      	ldr	r3, [pc, #496]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a7b      	ldr	r2, [pc, #492]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008298:	6013      	str	r3, [r2, #0]
 800829a:	e00b      	b.n	80082b4 <HAL_RCC_OscConfig+0xb0>
 800829c:	4b78      	ldr	r3, [pc, #480]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a77      	ldr	r2, [pc, #476]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80082a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082a6:	6013      	str	r3, [r2, #0]
 80082a8:	4b75      	ldr	r3, [pc, #468]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a74      	ldr	r2, [pc, #464]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80082ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80082b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d013      	beq.n	80082e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082bc:	f7fd fe0c 	bl	8005ed8 <HAL_GetTick>
 80082c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082c2:	e008      	b.n	80082d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082c4:	f7fd fe08 	bl	8005ed8 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b64      	cmp	r3, #100	@ 0x64
 80082d0:	d901      	bls.n	80082d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e29e      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082d6:	4b6a      	ldr	r3, [pc, #424]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f0      	beq.n	80082c4 <HAL_RCC_OscConfig+0xc0>
 80082e2:	e014      	b.n	800830e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082e4:	f7fd fdf8 	bl	8005ed8 <HAL_GetTick>
 80082e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082ea:	e008      	b.n	80082fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082ec:	f7fd fdf4 	bl	8005ed8 <HAL_GetTick>
 80082f0:	4602      	mov	r2, r0
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	1ad3      	subs	r3, r2, r3
 80082f6:	2b64      	cmp	r3, #100	@ 0x64
 80082f8:	d901      	bls.n	80082fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e28a      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80082fe:	4b60      	ldr	r3, [pc, #384]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f0      	bne.n	80082ec <HAL_RCC_OscConfig+0xe8>
 800830a:	e000      	b.n	800830e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800830c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0302 	and.w	r3, r3, #2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d075      	beq.n	8008406 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800831a:	4b59      	ldr	r3, [pc, #356]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f003 030c 	and.w	r3, r3, #12
 8008322:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008324:	4b56      	ldr	r3, [pc, #344]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f003 0303 	and.w	r3, r3, #3
 800832c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	2b0c      	cmp	r3, #12
 8008332:	d102      	bne.n	800833a <HAL_RCC_OscConfig+0x136>
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2b02      	cmp	r3, #2
 8008338:	d002      	beq.n	8008340 <HAL_RCC_OscConfig+0x13c>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b04      	cmp	r3, #4
 800833e:	d11f      	bne.n	8008380 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008340:	4b4f      	ldr	r3, [pc, #316]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008348:	2b00      	cmp	r3, #0
 800834a:	d005      	beq.n	8008358 <HAL_RCC_OscConfig+0x154>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e25d      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008358:	4b49      	ldr	r3, [pc, #292]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	061b      	lsls	r3, r3, #24
 8008366:	4946      	ldr	r1, [pc, #280]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008368:	4313      	orrs	r3, r2
 800836a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800836c:	4b45      	ldr	r3, [pc, #276]	@ (8008484 <HAL_RCC_OscConfig+0x280>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7fd fd65 	bl	8005e40 <HAL_InitTick>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d043      	beq.n	8008404 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e249      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d023      	beq.n	80083d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008388:	4b3d      	ldr	r3, [pc, #244]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a3c      	ldr	r2, [pc, #240]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800838e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008394:	f7fd fda0 	bl	8005ed8 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800839a:	e008      	b.n	80083ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800839c:	f7fd fd9c 	bl	8005ed8 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d901      	bls.n	80083ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e232      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083ae:	4b34      	ldr	r3, [pc, #208]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f0      	beq.n	800839c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083ba:	4b31      	ldr	r3, [pc, #196]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	061b      	lsls	r3, r3, #24
 80083c8:	492d      	ldr	r1, [pc, #180]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	604b      	str	r3, [r1, #4]
 80083ce:	e01a      	b.n	8008406 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80083d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80083d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083dc:	f7fd fd7c 	bl	8005ed8 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80083e4:	f7fd fd78 	bl	8005ed8 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e20e      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80083f6:	4b22      	ldr	r3, [pc, #136]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f0      	bne.n	80083e4 <HAL_RCC_OscConfig+0x1e0>
 8008402:	e000      	b.n	8008406 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d041      	beq.n	8008496 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01c      	beq.n	8008454 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800841a:	4b19      	ldr	r3, [pc, #100]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800841c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008420:	4a17      	ldr	r2, [pc, #92]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008422:	f043 0301 	orr.w	r3, r3, #1
 8008426:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842a:	f7fd fd55 	bl	8005ed8 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008432:	f7fd fd51 	bl	8005ed8 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e1e7      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008444:	4b0e      	ldr	r3, [pc, #56]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008446:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0ef      	beq.n	8008432 <HAL_RCC_OscConfig+0x22e>
 8008452:	e020      	b.n	8008496 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008454:	4b0a      	ldr	r3, [pc, #40]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 8008456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800845a:	4a09      	ldr	r2, [pc, #36]	@ (8008480 <HAL_RCC_OscConfig+0x27c>)
 800845c:	f023 0301 	bic.w	r3, r3, #1
 8008460:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008464:	f7fd fd38 	bl	8005ed8 <HAL_GetTick>
 8008468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800846a:	e00d      	b.n	8008488 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800846c:	f7fd fd34 	bl	8005ed8 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d906      	bls.n	8008488 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e1ca      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
 800847e:	bf00      	nop
 8008480:	40021000 	.word	0x40021000
 8008484:	2000020c 	.word	0x2000020c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008488:	4b8c      	ldr	r3, [pc, #560]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800848a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1ea      	bne.n	800846c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 80a6 	beq.w	80085f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084a4:	2300      	movs	r3, #0
 80084a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80084a8:	4b84      	ldr	r3, [pc, #528]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80084aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_RCC_OscConfig+0x2b4>
 80084b4:	2301      	movs	r3, #1
 80084b6:	e000      	b.n	80084ba <HAL_RCC_OscConfig+0x2b6>
 80084b8:	2300      	movs	r3, #0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00d      	beq.n	80084da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084be:	4b7f      	ldr	r3, [pc, #508]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80084c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084c2:	4a7e      	ldr	r2, [pc, #504]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80084c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80084ca:	4b7c      	ldr	r3, [pc, #496]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80084cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80084d2:	60fb      	str	r3, [r7, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80084d6:	2301      	movs	r3, #1
 80084d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084da:	4b79      	ldr	r3, [pc, #484]	@ (80086c0 <HAL_RCC_OscConfig+0x4bc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d118      	bne.n	8008518 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084e6:	4b76      	ldr	r3, [pc, #472]	@ (80086c0 <HAL_RCC_OscConfig+0x4bc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a75      	ldr	r2, [pc, #468]	@ (80086c0 <HAL_RCC_OscConfig+0x4bc>)
 80084ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084f2:	f7fd fcf1 	bl	8005ed8 <HAL_GetTick>
 80084f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80084f8:	e008      	b.n	800850c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084fa:	f7fd fced 	bl	8005ed8 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	2b02      	cmp	r3, #2
 8008506:	d901      	bls.n	800850c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e183      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800850c:	4b6c      	ldr	r3, [pc, #432]	@ (80086c0 <HAL_RCC_OscConfig+0x4bc>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0f0      	beq.n	80084fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d108      	bne.n	8008532 <HAL_RCC_OscConfig+0x32e>
 8008520:	4b66      	ldr	r3, [pc, #408]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008526:	4a65      	ldr	r2, [pc, #404]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008530:	e024      	b.n	800857c <HAL_RCC_OscConfig+0x378>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	2b05      	cmp	r3, #5
 8008538:	d110      	bne.n	800855c <HAL_RCC_OscConfig+0x358>
 800853a:	4b60      	ldr	r3, [pc, #384]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800853c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008540:	4a5e      	ldr	r2, [pc, #376]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008542:	f043 0304 	orr.w	r3, r3, #4
 8008546:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800854a:	4b5c      	ldr	r3, [pc, #368]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800854c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008550:	4a5a      	ldr	r2, [pc, #360]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800855a:	e00f      	b.n	800857c <HAL_RCC_OscConfig+0x378>
 800855c:	4b57      	ldr	r3, [pc, #348]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800855e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008562:	4a56      	ldr	r2, [pc, #344]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008564:	f023 0301 	bic.w	r3, r3, #1
 8008568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800856c:	4b53      	ldr	r3, [pc, #332]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800856e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008572:	4a52      	ldr	r2, [pc, #328]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008574:	f023 0304 	bic.w	r3, r3, #4
 8008578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d016      	beq.n	80085b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008584:	f7fd fca8 	bl	8005ed8 <HAL_GetTick>
 8008588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800858a:	e00a      	b.n	80085a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800858c:	f7fd fca4 	bl	8005ed8 <HAL_GetTick>
 8008590:	4602      	mov	r2, r0
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800859a:	4293      	cmp	r3, r2
 800859c:	d901      	bls.n	80085a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e138      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085a2:	4b46      	ldr	r3, [pc, #280]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80085a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0ed      	beq.n	800858c <HAL_RCC_OscConfig+0x388>
 80085b0:	e015      	b.n	80085de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085b2:	f7fd fc91 	bl	8005ed8 <HAL_GetTick>
 80085b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80085b8:	e00a      	b.n	80085d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ba:	f7fd fc8d 	bl	8005ed8 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	1ad3      	subs	r3, r2, r3
 80085c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d901      	bls.n	80085d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e121      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80085d0:	4b3a      	ldr	r3, [pc, #232]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1ed      	bne.n	80085ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80085de:	7ffb      	ldrb	r3, [r7, #31]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d105      	bne.n	80085f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085e4:	4b35      	ldr	r3, [pc, #212]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80085e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085e8:	4a34      	ldr	r2, [pc, #208]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 80085ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80085ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0320 	and.w	r3, r3, #32
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d03c      	beq.n	8008676 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01c      	beq.n	800863e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008604:	4b2d      	ldr	r3, [pc, #180]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008606:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800860a:	4a2c      	ldr	r2, [pc, #176]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800860c:	f043 0301 	orr.w	r3, r3, #1
 8008610:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008614:	f7fd fc60 	bl	8005ed8 <HAL_GetTick>
 8008618:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800861a:	e008      	b.n	800862e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800861c:	f7fd fc5c 	bl	8005ed8 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b02      	cmp	r3, #2
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e0f2      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800862e:	4b23      	ldr	r3, [pc, #140]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008630:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008634:	f003 0302 	and.w	r3, r3, #2
 8008638:	2b00      	cmp	r3, #0
 800863a:	d0ef      	beq.n	800861c <HAL_RCC_OscConfig+0x418>
 800863c:	e01b      	b.n	8008676 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800863e:	4b1f      	ldr	r3, [pc, #124]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008640:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008644:	4a1d      	ldr	r2, [pc, #116]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864e:	f7fd fc43 	bl	8005ed8 <HAL_GetTick>
 8008652:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008654:	e008      	b.n	8008668 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008656:	f7fd fc3f 	bl	8005ed8 <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e0d5      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008668:	4b14      	ldr	r3, [pc, #80]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800866a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1ef      	bne.n	8008656 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80c9 	beq.w	8008812 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008680:	4b0e      	ldr	r3, [pc, #56]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 030c 	and.w	r3, r3, #12
 8008688:	2b0c      	cmp	r3, #12
 800868a:	f000 8083 	beq.w	8008794 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d15e      	bne.n	8008754 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008696:	4b09      	ldr	r3, [pc, #36]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a08      	ldr	r2, [pc, #32]	@ (80086bc <HAL_RCC_OscConfig+0x4b8>)
 800869c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a2:	f7fd fc19 	bl	8005ed8 <HAL_GetTick>
 80086a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086a8:	e00c      	b.n	80086c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086aa:	f7fd fc15 	bl	8005ed8 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d905      	bls.n	80086c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e0ab      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
 80086bc:	40021000 	.word	0x40021000
 80086c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80086c4:	4b55      	ldr	r3, [pc, #340]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1ec      	bne.n	80086aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086d0:	4b52      	ldr	r3, [pc, #328]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	4b52      	ldr	r3, [pc, #328]	@ (8008820 <HAL_RCC_OscConfig+0x61c>)
 80086d6:	4013      	ands	r3, r2
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	6a11      	ldr	r1, [r2, #32]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80086e0:	3a01      	subs	r2, #1
 80086e2:	0112      	lsls	r2, r2, #4
 80086e4:	4311      	orrs	r1, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80086ea:	0212      	lsls	r2, r2, #8
 80086ec:	4311      	orrs	r1, r2
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80086f2:	0852      	lsrs	r2, r2, #1
 80086f4:	3a01      	subs	r2, #1
 80086f6:	0552      	lsls	r2, r2, #21
 80086f8:	4311      	orrs	r1, r2
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80086fe:	0852      	lsrs	r2, r2, #1
 8008700:	3a01      	subs	r2, #1
 8008702:	0652      	lsls	r2, r2, #25
 8008704:	4311      	orrs	r1, r2
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800870a:	06d2      	lsls	r2, r2, #27
 800870c:	430a      	orrs	r2, r1
 800870e:	4943      	ldr	r1, [pc, #268]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 8008710:	4313      	orrs	r3, r2
 8008712:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008714:	4b41      	ldr	r3, [pc, #260]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a40      	ldr	r2, [pc, #256]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 800871a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800871e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008720:	4b3e      	ldr	r3, [pc, #248]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	4a3d      	ldr	r2, [pc, #244]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 8008726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800872a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872c:	f7fd fbd4 	bl	8005ed8 <HAL_GetTick>
 8008730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008732:	e008      	b.n	8008746 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008734:	f7fd fbd0 	bl	8005ed8 <HAL_GetTick>
 8008738:	4602      	mov	r2, r0
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	1ad3      	subs	r3, r2, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d901      	bls.n	8008746 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008742:	2303      	movs	r3, #3
 8008744:	e066      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008746:	4b35      	ldr	r3, [pc, #212]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0f0      	beq.n	8008734 <HAL_RCC_OscConfig+0x530>
 8008752:	e05e      	b.n	8008812 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008754:	4b31      	ldr	r3, [pc, #196]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a30      	ldr	r2, [pc, #192]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 800875a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800875e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008760:	f7fd fbba 	bl	8005ed8 <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008768:	f7fd fbb6 	bl	8005ed8 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e04c      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800877a:	4b28      	ldr	r3, [pc, #160]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008786:	4b25      	ldr	r3, [pc, #148]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 8008788:	68da      	ldr	r2, [r3, #12]
 800878a:	4924      	ldr	r1, [pc, #144]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 800878c:	4b25      	ldr	r3, [pc, #148]	@ (8008824 <HAL_RCC_OscConfig+0x620>)
 800878e:	4013      	ands	r3, r2
 8008790:	60cb      	str	r3, [r1, #12]
 8008792:	e03e      	b.n	8008812 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69db      	ldr	r3, [r3, #28]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d101      	bne.n	80087a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e039      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80087a0:	4b1e      	ldr	r3, [pc, #120]	@ (800881c <HAL_RCC_OscConfig+0x618>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f003 0203 	and.w	r2, r3, #3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d12c      	bne.n	800880e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087be:	3b01      	subs	r3, #1
 80087c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d123      	bne.n	800880e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d11b      	bne.n	800880e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d113      	bne.n	800880e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f0:	085b      	lsrs	r3, r3, #1
 80087f2:	3b01      	subs	r3, #1
 80087f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d109      	bne.n	800880e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008804:	085b      	lsrs	r3, r3, #1
 8008806:	3b01      	subs	r3, #1
 8008808:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800880a:	429a      	cmp	r2, r3
 800880c:	d001      	beq.n	8008812 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e000      	b.n	8008814 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3720      	adds	r7, #32
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	40021000 	.word	0x40021000
 8008820:	019f800c 	.word	0x019f800c
 8008824:	feeefffc 	.word	0xfeeefffc

08008828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008832:	2300      	movs	r3, #0
 8008834:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e11e      	b.n	8008a7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008840:	4b91      	ldr	r3, [pc, #580]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d910      	bls.n	8008870 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800884e:	4b8e      	ldr	r3, [pc, #568]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f023 020f 	bic.w	r2, r3, #15
 8008856:	498c      	ldr	r1, [pc, #560]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	4313      	orrs	r3, r2
 800885c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800885e:	4b8a      	ldr	r3, [pc, #552]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	429a      	cmp	r2, r3
 800886a:	d001      	beq.n	8008870 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e106      	b.n	8008a7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d073      	beq.n	8008964 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	2b03      	cmp	r3, #3
 8008882:	d129      	bne.n	80088d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008884:	4b81      	ldr	r3, [pc, #516]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0f4      	b.n	8008a7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008894:	f000 f99e 	bl	8008bd4 <RCC_GetSysClockFreqFromPLLSource>
 8008898:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4a7c      	ldr	r2, [pc, #496]	@ (8008a90 <HAL_RCC_ClockConfig+0x268>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d93f      	bls.n	8008922 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80088a2:	4b7a      	ldr	r3, [pc, #488]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d009      	beq.n	80088c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d033      	beq.n	8008922 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d12f      	bne.n	8008922 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80088c2:	4b72      	ldr	r3, [pc, #456]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088ca:	4a70      	ldr	r2, [pc, #448]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80088cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80088d2:	2380      	movs	r3, #128	@ 0x80
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	e024      	b.n	8008922 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d107      	bne.n	80088f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80088e0:	4b6a      	ldr	r3, [pc, #424]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d109      	bne.n	8008900 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e0c6      	b.n	8008a7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80088f0:	4b66      	ldr	r3, [pc, #408]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e0be      	b.n	8008a7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008900:	f000 f8ce 	bl	8008aa0 <HAL_RCC_GetSysClockFreq>
 8008904:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	4a61      	ldr	r2, [pc, #388]	@ (8008a90 <HAL_RCC_ClockConfig+0x268>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d909      	bls.n	8008922 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800890e:	4b5f      	ldr	r3, [pc, #380]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008916:	4a5d      	ldr	r2, [pc, #372]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800891c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800891e:	2380      	movs	r3, #128	@ 0x80
 8008920:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008922:	4b5a      	ldr	r3, [pc, #360]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f023 0203 	bic.w	r2, r3, #3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	4957      	ldr	r1, [pc, #348]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008930:	4313      	orrs	r3, r2
 8008932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008934:	f7fd fad0 	bl	8005ed8 <HAL_GetTick>
 8008938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800893a:	e00a      	b.n	8008952 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800893c:	f7fd facc 	bl	8005ed8 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800894a:	4293      	cmp	r3, r2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e095      	b.n	8008a7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008952:	4b4e      	ldr	r3, [pc, #312]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	f003 020c 	and.w	r2, r3, #12
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	429a      	cmp	r2, r3
 8008962:	d1eb      	bne.n	800893c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d023      	beq.n	80089b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d005      	beq.n	8008988 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800897c:	4b43      	ldr	r3, [pc, #268]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	4a42      	ldr	r2, [pc, #264]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008982:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008986:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d007      	beq.n	80089a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008994:	4b3d      	ldr	r3, [pc, #244]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800899c:	4a3b      	ldr	r2, [pc, #236]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 800899e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80089a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a4:	4b39      	ldr	r3, [pc, #228]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	4936      	ldr	r1, [pc, #216]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	608b      	str	r3, [r1, #8]
 80089b6:	e008      	b.n	80089ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b80      	cmp	r3, #128	@ 0x80
 80089bc:	d105      	bne.n	80089ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80089be:	4b33      	ldr	r3, [pc, #204]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	4a32      	ldr	r2, [pc, #200]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 80089c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d21d      	bcs.n	8008a14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089d8:	4b2b      	ldr	r3, [pc, #172]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f023 020f 	bic.w	r2, r3, #15
 80089e0:	4929      	ldr	r1, [pc, #164]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80089e8:	f7fd fa76 	bl	8005ed8 <HAL_GetTick>
 80089ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ee:	e00a      	b.n	8008a06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089f0:	f7fd fa72 	bl	8005ed8 <HAL_GetTick>
 80089f4:	4602      	mov	r2, r0
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d901      	bls.n	8008a06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008a02:	2303      	movs	r3, #3
 8008a04:	e03b      	b.n	8008a7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a06:	4b20      	ldr	r3, [pc, #128]	@ (8008a88 <HAL_RCC_ClockConfig+0x260>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d1ed      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d008      	beq.n	8008a32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a20:	4b1a      	ldr	r3, [pc, #104]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	4917      	ldr	r1, [pc, #92]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a3e:	4b13      	ldr	r3, [pc, #76]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	00db      	lsls	r3, r3, #3
 8008a4c:	490f      	ldr	r1, [pc, #60]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008a52:	f000 f825 	bl	8008aa0 <HAL_RCC_GetSysClockFreq>
 8008a56:	4602      	mov	r2, r0
 8008a58:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <HAL_RCC_ClockConfig+0x264>)
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	091b      	lsrs	r3, r3, #4
 8008a5e:	f003 030f 	and.w	r3, r3, #15
 8008a62:	490c      	ldr	r1, [pc, #48]	@ (8008a94 <HAL_RCC_ClockConfig+0x26c>)
 8008a64:	5ccb      	ldrb	r3, [r1, r3]
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8008a98 <HAL_RCC_ClockConfig+0x270>)
 8008a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008a72:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <HAL_RCC_ClockConfig+0x274>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fd f9e2 	bl	8005e40 <HAL_InitTick>
 8008a7c:	4603      	mov	r3, r0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	40022000 	.word	0x40022000
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	04c4b400 	.word	0x04c4b400
 8008a94:	08010c88 	.word	0x08010c88
 8008a98:	20000208 	.word	0x20000208
 8008a9c:	2000020c 	.word	0x2000020c

08008aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b087      	sub	sp, #28
 8008aa4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f003 030c 	and.w	r3, r3, #12
 8008aae:	2b04      	cmp	r3, #4
 8008ab0:	d102      	bne.n	8008ab8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8008b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ab4:	613b      	str	r3, [r7, #16]
 8008ab6:	e047      	b.n	8008b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008ab8:	4b27      	ldr	r3, [pc, #156]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f003 030c 	and.w	r3, r3, #12
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d102      	bne.n	8008aca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008ac4:	4b26      	ldr	r3, [pc, #152]	@ (8008b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	e03e      	b.n	8008b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008aca:	4b23      	ldr	r3, [pc, #140]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	f003 030c 	and.w	r3, r3, #12
 8008ad2:	2b0c      	cmp	r3, #12
 8008ad4:	d136      	bne.n	8008b44 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008ad6:	4b20      	ldr	r3, [pc, #128]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f003 0303 	and.w	r3, r3, #3
 8008ade:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	091b      	lsrs	r3, r3, #4
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	3301      	adds	r3, #1
 8008aec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2b03      	cmp	r3, #3
 8008af2:	d10c      	bne.n	8008b0e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008af4:	4a1a      	ldr	r2, [pc, #104]	@ (8008b60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008afc:	4a16      	ldr	r2, [pc, #88]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008afe:	68d2      	ldr	r2, [r2, #12]
 8008b00:	0a12      	lsrs	r2, r2, #8
 8008b02:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
 8008b0a:	617b      	str	r3, [r7, #20]
      break;
 8008b0c:	e00c      	b.n	8008b28 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b0e:	4a13      	ldr	r2, [pc, #76]	@ (8008b5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b16:	4a10      	ldr	r2, [pc, #64]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b18:	68d2      	ldr	r2, [r2, #12]
 8008b1a:	0a12      	lsrs	r2, r2, #8
 8008b1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008b20:	fb02 f303 	mul.w	r3, r2, r3
 8008b24:	617b      	str	r3, [r7, #20]
      break;
 8008b26:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008b28:	4b0b      	ldr	r3, [pc, #44]	@ (8008b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	0e5b      	lsrs	r3, r3, #25
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	3301      	adds	r3, #1
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008b38:	697a      	ldr	r2, [r7, #20]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b40:	613b      	str	r3, [r7, #16]
 8008b42:	e001      	b.n	8008b48 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008b44:	2300      	movs	r3, #0
 8008b46:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008b48:	693b      	ldr	r3, [r7, #16]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40021000 	.word	0x40021000
 8008b5c:	00f42400 	.word	0x00f42400
 8008b60:	016e3600 	.word	0x016e3600

08008b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b68:	4b03      	ldr	r3, [pc, #12]	@ (8008b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	20000208 	.word	0x20000208

08008b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008b80:	f7ff fff0 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 8008b84:	4602      	mov	r2, r0
 8008b86:	4b06      	ldr	r3, [pc, #24]	@ (8008ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	0a1b      	lsrs	r3, r3, #8
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	4904      	ldr	r1, [pc, #16]	@ (8008ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008b92:	5ccb      	ldrb	r3, [r1, r3]
 8008b94:	f003 031f 	and.w	r3, r3, #31
 8008b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40021000 	.word	0x40021000
 8008ba4:	08010c98 	.word	0x08010c98

08008ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008bac:	f7ff ffda 	bl	8008b64 <HAL_RCC_GetHCLKFreq>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	4b06      	ldr	r3, [pc, #24]	@ (8008bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	0adb      	lsrs	r3, r3, #11
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	4904      	ldr	r1, [pc, #16]	@ (8008bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008bbe:	5ccb      	ldrb	r3, [r1, r3]
 8008bc0:	f003 031f 	and.w	r3, r3, #31
 8008bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	40021000 	.word	0x40021000
 8008bd0:	08010c98 	.word	0x08010c98

08008bd4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008bda:	4b1e      	ldr	r3, [pc, #120]	@ (8008c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008be4:	4b1b      	ldr	r3, [pc, #108]	@ (8008c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	091b      	lsrs	r3, r3, #4
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	3301      	adds	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	2b03      	cmp	r3, #3
 8008bf6:	d10c      	bne.n	8008c12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bf8:	4a17      	ldr	r2, [pc, #92]	@ (8008c58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c00:	4a14      	ldr	r2, [pc, #80]	@ (8008c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c02:	68d2      	ldr	r2, [r2, #12]
 8008c04:	0a12      	lsrs	r2, r2, #8
 8008c06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c0a:	fb02 f303 	mul.w	r3, r2, r3
 8008c0e:	617b      	str	r3, [r7, #20]
    break;
 8008c10:	e00c      	b.n	8008c2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c12:	4a12      	ldr	r2, [pc, #72]	@ (8008c5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8008c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c1c:	68d2      	ldr	r2, [r2, #12]
 8008c1e:	0a12      	lsrs	r2, r2, #8
 8008c20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008c24:	fb02 f303 	mul.w	r3, r2, r3
 8008c28:	617b      	str	r3, [r7, #20]
    break;
 8008c2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008c2c:	4b09      	ldr	r3, [pc, #36]	@ (8008c54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	0e5b      	lsrs	r3, r3, #25
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	3301      	adds	r3, #1
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008c46:	687b      	ldr	r3, [r7, #4]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	371c      	adds	r7, #28
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	40021000 	.word	0x40021000
 8008c58:	016e3600 	.word	0x016e3600
 8008c5c:	00f42400 	.word	0x00f42400

08008c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008c68:	2300      	movs	r3, #0
 8008c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 8098 	beq.w	8008dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c82:	4b43      	ldr	r3, [pc, #268]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10d      	bne.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c8e:	4b40      	ldr	r3, [pc, #256]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c92:	4a3f      	ldr	r2, [pc, #252]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c9a:	4b3d      	ldr	r3, [pc, #244]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ca2:	60bb      	str	r3, [r7, #8]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008caa:	4b3a      	ldr	r3, [pc, #232]	@ (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a39      	ldr	r2, [pc, #228]	@ (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008cb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008cb6:	f7fd f90f 	bl	8005ed8 <HAL_GetTick>
 8008cba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cbc:	e009      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cbe:	f7fd f90b 	bl	8005ed8 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d902      	bls.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	74fb      	strb	r3, [r7, #19]
        break;
 8008cd0:	e005      	b.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cd2:	4b30      	ldr	r3, [pc, #192]	@ (8008d94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d0ef      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008cde:	7cfb      	ldrb	r3, [r7, #19]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d159      	bne.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d01e      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cfa:	697a      	ldr	r2, [r7, #20]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d019      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d00:	4b23      	ldr	r3, [pc, #140]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d0c:	4b20      	ldr	r3, [pc, #128]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d12:	4a1f      	ldr	r2, [pc, #124]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d22:	4a1b      	ldr	r2, [pc, #108]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d2c:	4a18      	ldr	r2, [pc, #96]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d016      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d3e:	f7fd f8cb 	bl	8005ed8 <HAL_GetTick>
 8008d42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d44:	e00b      	b.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d46:	f7fd f8c7 	bl	8005ed8 <HAL_GetTick>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d902      	bls.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	74fb      	strb	r3, [r7, #19]
            break;
 8008d5c:	e006      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0ec      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008d6c:	7cfb      	ldrb	r3, [r7, #19]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10b      	bne.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d72:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d80:	4903      	ldr	r1, [pc, #12]	@ (8008d90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008d88:	e008      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d8a:	7cfb      	ldrb	r3, [r7, #19]
 8008d8c:	74bb      	strb	r3, [r7, #18]
 8008d8e:	e005      	b.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008d90:	40021000 	.word	0x40021000
 8008d94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d98:	7cfb      	ldrb	r3, [r7, #19]
 8008d9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d9c:	7c7b      	ldrb	r3, [r7, #17]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d105      	bne.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008da2:	4ba7      	ldr	r3, [pc, #668]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da6:	4aa6      	ldr	r2, [pc, #664]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008da8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008dba:	4ba1      	ldr	r3, [pc, #644]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dc0:	f023 0203 	bic.w	r2, r3, #3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	499d      	ldr	r1, [pc, #628]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0302 	and.w	r3, r3, #2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ddc:	4b98      	ldr	r3, [pc, #608]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de2:	f023 020c 	bic.w	r2, r3, #12
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	689b      	ldr	r3, [r3, #8]
 8008dea:	4995      	ldr	r1, [pc, #596]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008dec:	4313      	orrs	r3, r2
 8008dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0304 	and.w	r3, r3, #4
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00a      	beq.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008dfe:	4b90      	ldr	r3, [pc, #576]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	498c      	ldr	r1, [pc, #560]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d00a      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e20:	4b87      	ldr	r3, [pc, #540]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	691b      	ldr	r3, [r3, #16]
 8008e2e:	4984      	ldr	r1, [pc, #528]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00a      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e42:	4b7f      	ldr	r3, [pc, #508]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	695b      	ldr	r3, [r3, #20]
 8008e50:	497b      	ldr	r1, [pc, #492]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00a      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008e64:	4b76      	ldr	r3, [pc, #472]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	4973      	ldr	r1, [pc, #460]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d00a      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e86:	4b6e      	ldr	r3, [pc, #440]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	69db      	ldr	r3, [r3, #28]
 8008e94:	496a      	ldr	r1, [pc, #424]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008e96:	4313      	orrs	r3, r2
 8008e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00a      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ea8:	4b65      	ldr	r3, [pc, #404]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	4962      	ldr	r1, [pc, #392]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008eca:	4b5d      	ldr	r3, [pc, #372]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed8:	4959      	ldr	r1, [pc, #356]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eda:	4313      	orrs	r3, r2
 8008edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008eec:	4b54      	ldr	r3, [pc, #336]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ef2:	f023 0203 	bic.w	r2, r3, #3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008efa:	4951      	ldr	r1, [pc, #324]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008efc:	4313      	orrs	r3, r2
 8008efe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f0e:	4b4c      	ldr	r3, [pc, #304]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f1c:	4948      	ldr	r1, [pc, #288]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f30:	4b43      	ldr	r3, [pc, #268]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3e:	4940      	ldr	r1, [pc, #256]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f40:	4313      	orrs	r3, r2
 8008f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f4e:	d105      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f50:	4b3b      	ldr	r3, [pc, #236]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	4a3a      	ldr	r2, [pc, #232]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f5a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d015      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f68:	4b35      	ldr	r3, [pc, #212]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f76:	4932      	ldr	r1, [pc, #200]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f86:	d105      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f88:	4b2d      	ldr	r3, [pc, #180]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f92:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d015      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fa0:	4b27      	ldr	r3, [pc, #156]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fa6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fae:	4924      	ldr	r1, [pc, #144]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008fbe:	d105      	bne.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d015      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008fd8:	4b19      	ldr	r3, [pc, #100]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fe6:	4916      	ldr	r1, [pc, #88]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ff6:	d105      	bne.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ff8:	4b11      	ldr	r3, [pc, #68]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	4a10      	ldr	r2, [pc, #64]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ffe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009002:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d019      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009010:	4b0b      	ldr	r3, [pc, #44]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009016:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901e:	4908      	ldr	r1, [pc, #32]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009020:	4313      	orrs	r3, r2
 8009022:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800902e:	d109      	bne.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009030:	4b03      	ldr	r3, [pc, #12]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	4a02      	ldr	r2, [pc, #8]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800903a:	60d3      	str	r3, [r2, #12]
 800903c:	e002      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800903e:	bf00      	nop
 8009040:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d015      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009050:	4b29      	ldr	r3, [pc, #164]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009056:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800905e:	4926      	ldr	r1, [pc, #152]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009060:	4313      	orrs	r3, r2
 8009062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800906a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800906e:	d105      	bne.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009070:	4b21      	ldr	r3, [pc, #132]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	4a20      	ldr	r2, [pc, #128]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800907a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009084:	2b00      	cmp	r3, #0
 8009086:	d015      	beq.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009088:	4b1b      	ldr	r3, [pc, #108]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800908a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800908e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009096:	4918      	ldr	r1, [pc, #96]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009098:	4313      	orrs	r3, r2
 800909a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a6:	d105      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80090a8:	4b13      	ldr	r3, [pc, #76]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090aa:	68db      	ldr	r3, [r3, #12]
 80090ac:	4a12      	ldr	r2, [pc, #72]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d015      	beq.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80090c0:	4b0d      	ldr	r3, [pc, #52]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80090c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ce:	490a      	ldr	r1, [pc, #40]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80090de:	d105      	bne.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090e0:	4b05      	ldr	r3, [pc, #20]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	4a04      	ldr	r2, [pc, #16]	@ (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80090e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80090ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	40021000 	.word	0x40021000

080090fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d101      	bne.n	800910e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e09d      	b.n	800924a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	d108      	bne.n	8009128 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800911e:	d009      	beq.n	8009134 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	61da      	str	r2, [r3, #28]
 8009126:	e005      	b.n	8009134 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	d106      	bne.n	8009154 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7fb ff2c 	bl	8004fac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800916a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009174:	d902      	bls.n	800917c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009176:	2300      	movs	r3, #0
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	e002      	b.n	8009182 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800917c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009180:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800918a:	d007      	beq.n	800919c <HAL_SPI_Init+0xa0>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009194:	d002      	beq.n	800919c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80091ac:	431a      	orrs	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	431a      	orrs	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	f003 0301 	and.w	r3, r3, #1
 80091c0:	431a      	orrs	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091ca:	431a      	orrs	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091de:	ea42 0103 	orr.w	r1, r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	699b      	ldr	r3, [r3, #24]
 80091f6:	0c1b      	lsrs	r3, r3, #16
 80091f8:	f003 0204 	and.w	r2, r3, #4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800920a:	f003 0308 	and.w	r3, r3, #8
 800920e:	431a      	orrs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009218:	ea42 0103 	orr.w	r1, r2, r3
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	430a      	orrs	r2, r1
 8009228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69da      	ldr	r2, [r3, #28]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b08a      	sub	sp, #40	@ 0x28
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009260:	2301      	movs	r3, #1
 8009262:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009264:	f7fc fe38 	bl	8005ed8 <HAL_GetTick>
 8009268:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009270:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009278:	887b      	ldrh	r3, [r7, #2]
 800927a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800927c:	887b      	ldrh	r3, [r7, #2]
 800927e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009280:	7ffb      	ldrb	r3, [r7, #31]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d00c      	beq.n	80092a0 <HAL_SPI_TransmitReceive+0x4e>
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800928c:	d106      	bne.n	800929c <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d102      	bne.n	800929c <HAL_SPI_TransmitReceive+0x4a>
 8009296:	7ffb      	ldrb	r3, [r7, #31]
 8009298:	2b04      	cmp	r3, #4
 800929a:	d001      	beq.n	80092a0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800929c:	2302      	movs	r3, #2
 800929e:	e1f3      	b.n	8009688 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d005      	beq.n	80092b2 <HAL_SPI_TransmitReceive+0x60>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d002      	beq.n	80092b2 <HAL_SPI_TransmitReceive+0x60>
 80092ac:	887b      	ldrh	r3, [r7, #2]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e1e8      	b.n	8009688 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x72>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e1e1      	b.n	8009688 <HAL_SPI_TransmitReceive+0x436>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	2b04      	cmp	r3, #4
 80092d6:	d003      	beq.n	80092e0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2205      	movs	r2, #5
 80092dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2200      	movs	r2, #0
 80092e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	887a      	ldrh	r2, [r7, #2]
 80092f0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	887a      	ldrh	r2, [r7, #2]
 80092f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	68ba      	ldr	r2, [r7, #8]
 8009300:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	887a      	ldrh	r2, [r7, #2]
 8009306:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	887a      	ldrh	r2, [r7, #2]
 800930c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009322:	d802      	bhi.n	800932a <HAL_SPI_TransmitReceive+0xd8>
 8009324:	8abb      	ldrh	r3, [r7, #20]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d908      	bls.n	800933c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	e007      	b.n	800934c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800934a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009356:	2b40      	cmp	r3, #64	@ 0x40
 8009358:	d007      	beq.n	800936a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009372:	f240 8083 	bls.w	800947c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_SPI_TransmitReceive+0x132>
 800937e:	8afb      	ldrh	r3, [r7, #22]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d16f      	bne.n	8009464 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009388:	881a      	ldrh	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009394:	1c9a      	adds	r2, r3, #2
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800939e:	b29b      	uxth	r3, r3
 80093a0:	3b01      	subs	r3, #1
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093a8:	e05c      	b.n	8009464 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d11b      	bne.n	80093f0 <HAL_SPI_TransmitReceive+0x19e>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093bc:	b29b      	uxth	r3, r3
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d016      	beq.n	80093f0 <HAL_SPI_TransmitReceive+0x19e>
 80093c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d113      	bne.n	80093f0 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093cc:	881a      	ldrh	r2, [r3, #0]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093d8:	1c9a      	adds	r2, r3, #2
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	3b01      	subs	r3, #1
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d11c      	bne.n	8009438 <HAL_SPI_TransmitReceive+0x1e6>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009404:	b29b      	uxth	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	d016      	beq.n	8009438 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009414:	b292      	uxth	r2, r2
 8009416:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800941c:	1c9a      	adds	r2, r3, #2
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009428:	b29b      	uxth	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009434:	2301      	movs	r3, #1
 8009436:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009438:	f7fc fd4e 	bl	8005ed8 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009444:	429a      	cmp	r2, r3
 8009446:	d80d      	bhi.n	8009464 <HAL_SPI_TransmitReceive+0x212>
 8009448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944e:	d009      	beq.n	8009464 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e111      	b.n	8009688 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009468:	b29b      	uxth	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d19d      	bne.n	80093aa <HAL_SPI_TransmitReceive+0x158>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009474:	b29b      	uxth	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	d197      	bne.n	80093aa <HAL_SPI_TransmitReceive+0x158>
 800947a:	e0e5      	b.n	8009648 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d003      	beq.n	800948c <HAL_SPI_TransmitReceive+0x23a>
 8009484:	8afb      	ldrh	r3, [r7, #22]
 8009486:	2b01      	cmp	r3, #1
 8009488:	f040 80d1 	bne.w	800962e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b01      	cmp	r3, #1
 8009494:	d912      	bls.n	80094bc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949a:	881a      	ldrh	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a6:	1c9a      	adds	r2, r3, #2
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	3b02      	subs	r3, #2
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80094ba:	e0b8      	b.n	800962e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	330c      	adds	r3, #12
 80094c6:	7812      	ldrb	r2, [r2, #0]
 80094c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094d8:	b29b      	uxth	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	b29a      	uxth	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094e2:	e0a4      	b.n	800962e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 0302 	and.w	r3, r3, #2
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d134      	bne.n	800955c <HAL_SPI_TransmitReceive+0x30a>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d02f      	beq.n	800955c <HAL_SPI_TransmitReceive+0x30a>
 80094fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d12c      	bne.n	800955c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009506:	b29b      	uxth	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	d912      	bls.n	8009532 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009510:	881a      	ldrh	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800951c:	1c9a      	adds	r2, r3, #2
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009526:	b29b      	uxth	r3, r3
 8009528:	3b02      	subs	r3, #2
 800952a:	b29a      	uxth	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009530:	e012      	b.n	8009558 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	330c      	adds	r3, #12
 800953c:	7812      	ldrb	r2, [r2, #0]
 800953e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800954e:	b29b      	uxth	r3, r3
 8009550:	3b01      	subs	r3, #1
 8009552:	b29a      	uxth	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b01      	cmp	r3, #1
 8009568:	d148      	bne.n	80095fc <HAL_SPI_TransmitReceive+0x3aa>
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009570:	b29b      	uxth	r3, r3
 8009572:	2b00      	cmp	r3, #0
 8009574:	d042      	beq.n	80095fc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800957c:	b29b      	uxth	r3, r3
 800957e:	2b01      	cmp	r3, #1
 8009580:	d923      	bls.n	80095ca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800958c:	b292      	uxth	r2, r2
 800958e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009594:	1c9a      	adds	r2, r3, #2
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	3b02      	subs	r3, #2
 80095a4:	b29a      	uxth	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d81f      	bhi.n	80095f8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80095c6:	605a      	str	r2, [r3, #4]
 80095c8:	e016      	b.n	80095f8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f103 020c 	add.w	r2, r3, #12
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d6:	7812      	ldrb	r2, [r2, #0]
 80095d8:	b2d2      	uxtb	r2, r2
 80095da:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	3b01      	subs	r3, #1
 80095f0:	b29a      	uxth	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095f8:	2301      	movs	r3, #1
 80095fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80095fc:	f7fc fc6c 	bl	8005ed8 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	6a3b      	ldr	r3, [r7, #32]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009608:	429a      	cmp	r2, r3
 800960a:	d803      	bhi.n	8009614 <HAL_SPI_TransmitReceive+0x3c2>
 800960c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009612:	d102      	bne.n	800961a <HAL_SPI_TransmitReceive+0x3c8>
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	2b00      	cmp	r3, #0
 8009618:	d109      	bne.n	800962e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e02c      	b.n	8009688 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009632:	b29b      	uxth	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	f47f af55 	bne.w	80094e4 <HAL_SPI_TransmitReceive+0x292>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009640:	b29b      	uxth	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	f47f af4e 	bne.w	80094e4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009648:	6a3a      	ldr	r2, [r7, #32]
 800964a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 f93d 	bl	80098cc <SPI_EndRxTxTransaction>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2220      	movs	r2, #32
 800965c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e00e      	b.n	8009688 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800967e:	2b00      	cmp	r3, #0
 8009680:	d001      	beq.n	8009686 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009682:	2301      	movs	r3, #1
 8009684:	e000      	b.n	8009688 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009686:	2300      	movs	r3, #0
  }
}
 8009688:	4618      	mov	r0, r3
 800968a:	3728      	adds	r7, #40	@ 0x28
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	4613      	mov	r3, r2
 800969e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096a0:	f7fc fc1a 	bl	8005ed8 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a8:	1a9b      	subs	r3, r3, r2
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	4413      	add	r3, r2
 80096ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096b0:	f7fc fc12 	bl	8005ed8 <HAL_GetTick>
 80096b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096b6:	4b39      	ldr	r3, [pc, #228]	@ (800979c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	015b      	lsls	r3, r3, #5
 80096bc:	0d1b      	lsrs	r3, r3, #20
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	fb02 f303 	mul.w	r3, r2, r3
 80096c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096c6:	e054      	b.n	8009772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ce:	d050      	beq.n	8009772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80096d0:	f7fc fc02 	bl	8005ed8 <HAL_GetTick>
 80096d4:	4602      	mov	r2, r0
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d902      	bls.n	80096e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d13d      	bne.n	8009762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80096f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096fe:	d111      	bne.n	8009724 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009708:	d004      	beq.n	8009714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009712:	d107      	bne.n	8009724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	681a      	ldr	r2, [r3, #0]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800972c:	d10f      	bne.n	800974e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800974c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e017      	b.n	8009792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009768:	2300      	movs	r3, #0
 800976a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	3b01      	subs	r3, #1
 8009770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689a      	ldr	r2, [r3, #8]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4013      	ands	r3, r2
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	429a      	cmp	r2, r3
 8009780:	bf0c      	ite	eq
 8009782:	2301      	moveq	r3, #1
 8009784:	2300      	movne	r3, #0
 8009786:	b2db      	uxtb	r3, r3
 8009788:	461a      	mov	r2, r3
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	429a      	cmp	r2, r3
 800978e:	d19b      	bne.n	80096c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3720      	adds	r7, #32
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000208 	.word	0x20000208

080097a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08a      	sub	sp, #40	@ 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80097b2:	f7fc fb91 	bl	8005ed8 <HAL_GetTick>
 80097b6:	4602      	mov	r2, r0
 80097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ba:	1a9b      	subs	r3, r3, r2
 80097bc:	683a      	ldr	r2, [r7, #0]
 80097be:	4413      	add	r3, r2
 80097c0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80097c2:	f7fc fb89 	bl	8005ed8 <HAL_GetTick>
 80097c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	330c      	adds	r3, #12
 80097ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80097d0:	4b3d      	ldr	r3, [pc, #244]	@ (80098c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	4613      	mov	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	4413      	add	r3, r2
 80097da:	00da      	lsls	r2, r3, #3
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	0d1b      	lsrs	r3, r3, #20
 80097e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097e2:	fb02 f303 	mul.w	r3, r2, r3
 80097e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80097e8:	e060      	b.n	80098ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80097f0:	d107      	bne.n	8009802 <SPI_WaitFifoStateUntilTimeout+0x62>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d104      	bne.n	8009802 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009800:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009808:	d050      	beq.n	80098ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800980a:	f7fc fb65 	bl	8005ed8 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009816:	429a      	cmp	r2, r3
 8009818:	d902      	bls.n	8009820 <SPI_WaitFifoStateUntilTimeout+0x80>
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	2b00      	cmp	r3, #0
 800981e:	d13d      	bne.n	800989c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800982e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009838:	d111      	bne.n	800985e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009842:	d004      	beq.n	800984e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800984c:	d107      	bne.n	800985e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800985c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009866:	d10f      	bne.n	8009888 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009886:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2201      	movs	r2, #1
 800988c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009898:	2303      	movs	r3, #3
 800989a:	e010      	b.n	80098be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	689a      	ldr	r2, [r3, #8]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	4013      	ands	r3, r2
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d196      	bne.n	80097ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3728      	adds	r7, #40	@ 0x28
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20000208 	.word	0x20000208

080098cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b086      	sub	sp, #24
 80098d0:	af02      	add	r7, sp, #8
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2200      	movs	r2, #0
 80098e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f7ff ff5b 	bl	80097a0 <SPI_WaitFifoStateUntilTimeout>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d007      	beq.n	8009900 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098f4:	f043 0220 	orr.w	r2, r3, #32
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e027      	b.n	8009950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	2200      	movs	r2, #0
 8009908:	2180      	movs	r1, #128	@ 0x80
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f7ff fec0 	bl	8009690 <SPI_WaitFlagStateUntilTimeout>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d007      	beq.n	8009926 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800991a:	f043 0220 	orr.w	r2, r3, #32
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009922:	2303      	movs	r3, #3
 8009924:	e014      	b.n	8009950 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2200      	movs	r2, #0
 800992e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f7ff ff34 	bl	80097a0 <SPI_WaitFifoStateUntilTimeout>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d007      	beq.n	800994e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009942:	f043 0220 	orr.w	r2, r3, #32
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800994a:	2303      	movs	r3, #3
 800994c:	e000      	b.n	8009950 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e054      	b.n	8009a14 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009970:	b2db      	uxtb	r3, r3
 8009972:	2b00      	cmp	r3, #0
 8009974:	d111      	bne.n	800999a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 ffd4 	bl	800b92c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d102      	bne.n	8009992 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a23      	ldr	r2, [pc, #140]	@ (8009a1c <HAL_TIM_Base_Init+0xc4>)
 8009990:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2202      	movs	r2, #2
 800999e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4619      	mov	r1, r3
 80099ac:	4610      	mov	r0, r2
 80099ae:	f001 fb1d 	bl	800afec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	080058d9 	.word	0x080058d9

08009a20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b085      	sub	sp, #20
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d001      	beq.n	8009a38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e04c      	b.n	8009ad2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a26      	ldr	r2, [pc, #152]	@ (8009ae0 <HAL_TIM_Base_Start+0xc0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d022      	beq.n	8009a90 <HAL_TIM_Base_Start+0x70>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a52:	d01d      	beq.n	8009a90 <HAL_TIM_Base_Start+0x70>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a22      	ldr	r2, [pc, #136]	@ (8009ae4 <HAL_TIM_Base_Start+0xc4>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d018      	beq.n	8009a90 <HAL_TIM_Base_Start+0x70>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a21      	ldr	r2, [pc, #132]	@ (8009ae8 <HAL_TIM_Base_Start+0xc8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d013      	beq.n	8009a90 <HAL_TIM_Base_Start+0x70>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8009aec <HAL_TIM_Base_Start+0xcc>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d00e      	beq.n	8009a90 <HAL_TIM_Base_Start+0x70>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a1e      	ldr	r2, [pc, #120]	@ (8009af0 <HAL_TIM_Base_Start+0xd0>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d009      	beq.n	8009a90 <HAL_TIM_Base_Start+0x70>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a1c      	ldr	r2, [pc, #112]	@ (8009af4 <HAL_TIM_Base_Start+0xd4>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d004      	beq.n	8009a90 <HAL_TIM_Base_Start+0x70>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009af8 <HAL_TIM_Base_Start+0xd8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d115      	bne.n	8009abc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689a      	ldr	r2, [r3, #8]
 8009a96:	4b19      	ldr	r3, [pc, #100]	@ (8009afc <HAL_TIM_Base_Start+0xdc>)
 8009a98:	4013      	ands	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b06      	cmp	r3, #6
 8009aa0:	d015      	beq.n	8009ace <HAL_TIM_Base_Start+0xae>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009aa8:	d011      	beq.n	8009ace <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f042 0201 	orr.w	r2, r2, #1
 8009ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aba:	e008      	b.n	8009ace <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f042 0201 	orr.w	r2, r2, #1
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	e000      	b.n	8009ad0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3714      	adds	r7, #20
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr
 8009ade:	bf00      	nop
 8009ae0:	40012c00 	.word	0x40012c00
 8009ae4:	40000400 	.word	0x40000400
 8009ae8:	40000800 	.word	0x40000800
 8009aec:	40000c00 	.word	0x40000c00
 8009af0:	40013400 	.word	0x40013400
 8009af4:	40014000 	.word	0x40014000
 8009af8:	40015000 	.word	0x40015000
 8009afc:	00010007 	.word	0x00010007

08009b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d001      	beq.n	8009b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e054      	b.n	8009bc2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	68da      	ldr	r2, [r3, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f042 0201 	orr.w	r2, r2, #1
 8009b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a26      	ldr	r2, [pc, #152]	@ (8009bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d022      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x80>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b42:	d01d      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x80>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a22      	ldr	r2, [pc, #136]	@ (8009bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d018      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x80>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a21      	ldr	r2, [pc, #132]	@ (8009bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d013      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x80>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00e      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x80>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a1e      	ldr	r2, [pc, #120]	@ (8009be0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d009      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x80>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1c      	ldr	r2, [pc, #112]	@ (8009be4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <HAL_TIM_Base_Start_IT+0x80>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8009be8 <HAL_TIM_Base_Start_IT+0xe8>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d115      	bne.n	8009bac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689a      	ldr	r2, [r3, #8]
 8009b86:	4b19      	ldr	r3, [pc, #100]	@ (8009bec <HAL_TIM_Base_Start_IT+0xec>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2b06      	cmp	r3, #6
 8009b90:	d015      	beq.n	8009bbe <HAL_TIM_Base_Start_IT+0xbe>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b98:	d011      	beq.n	8009bbe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f042 0201 	orr.w	r2, r2, #1
 8009ba8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009baa:	e008      	b.n	8009bbe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0201 	orr.w	r2, r2, #1
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	e000      	b.n	8009bc0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bbe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40012c00 	.word	0x40012c00
 8009bd4:	40000400 	.word	0x40000400
 8009bd8:	40000800 	.word	0x40000800
 8009bdc:	40000c00 	.word	0x40000c00
 8009be0:	40013400 	.word	0x40013400
 8009be4:	40014000 	.word	0x40014000
 8009be8:	40015000 	.word	0x40015000
 8009bec:	00010007 	.word	0x00010007

08009bf0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d101      	bne.n	8009c02 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e054      	b.n	8009cac <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d111      	bne.n	8009c32 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 fe88 	bl	800b92c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d102      	bne.n	8009c2a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a23      	ldr	r2, [pc, #140]	@ (8009cb4 <HAL_TIM_OC_Init+0xc4>)
 8009c28:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2202      	movs	r2, #2
 8009c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f001 f9d1 	bl	800afec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	08009cb9 	.word	0x08009cb9

08009cb8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e054      	b.n	8009d88 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d111      	bne.n	8009d0e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f001 fe1a 	bl	800b92c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d102      	bne.n	8009d06 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4a23      	ldr	r2, [pc, #140]	@ (8009d90 <HAL_TIM_PWM_Init+0xc4>)
 8009d04:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2202      	movs	r2, #2
 8009d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f001 f963 	bl	800afec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d86:	2300      	movs	r3, #0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	08009d95 	.word	0x08009d95

08009d94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d109      	bne.n	8009dcc <HAL_TIM_PWM_Start+0x24>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009dbe:	b2db      	uxtb	r3, r3
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	bf14      	ite	ne
 8009dc4:	2301      	movne	r3, #1
 8009dc6:	2300      	moveq	r3, #0
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	e03c      	b.n	8009e46 <HAL_TIM_PWM_Start+0x9e>
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d109      	bne.n	8009de6 <HAL_TIM_PWM_Start+0x3e>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009dd8:	b2db      	uxtb	r3, r3
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	bf14      	ite	ne
 8009dde:	2301      	movne	r3, #1
 8009de0:	2300      	moveq	r3, #0
 8009de2:	b2db      	uxtb	r3, r3
 8009de4:	e02f      	b.n	8009e46 <HAL_TIM_PWM_Start+0x9e>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d109      	bne.n	8009e00 <HAL_TIM_PWM_Start+0x58>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	bf14      	ite	ne
 8009df8:	2301      	movne	r3, #1
 8009dfa:	2300      	moveq	r3, #0
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	e022      	b.n	8009e46 <HAL_TIM_PWM_Start+0x9e>
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b0c      	cmp	r3, #12
 8009e04:	d109      	bne.n	8009e1a <HAL_TIM_PWM_Start+0x72>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	bf14      	ite	ne
 8009e12:	2301      	movne	r3, #1
 8009e14:	2300      	moveq	r3, #0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	e015      	b.n	8009e46 <HAL_TIM_PWM_Start+0x9e>
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	2b10      	cmp	r3, #16
 8009e1e:	d109      	bne.n	8009e34 <HAL_TIM_PWM_Start+0x8c>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	bf14      	ite	ne
 8009e2c:	2301      	movne	r3, #1
 8009e2e:	2300      	moveq	r3, #0
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	e008      	b.n	8009e46 <HAL_TIM_PWM_Start+0x9e>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	bf14      	ite	ne
 8009e40:	2301      	movne	r3, #1
 8009e42:	2300      	moveq	r3, #0
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e0a6      	b.n	8009f9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d104      	bne.n	8009e5e <HAL_TIM_PWM_Start+0xb6>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2202      	movs	r2, #2
 8009e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e5c:	e023      	b.n	8009ea6 <HAL_TIM_PWM_Start+0xfe>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b04      	cmp	r3, #4
 8009e62:	d104      	bne.n	8009e6e <HAL_TIM_PWM_Start+0xc6>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e6c:	e01b      	b.n	8009ea6 <HAL_TIM_PWM_Start+0xfe>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d104      	bne.n	8009e7e <HAL_TIM_PWM_Start+0xd6>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e7c:	e013      	b.n	8009ea6 <HAL_TIM_PWM_Start+0xfe>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b0c      	cmp	r3, #12
 8009e82:	d104      	bne.n	8009e8e <HAL_TIM_PWM_Start+0xe6>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e8c:	e00b      	b.n	8009ea6 <HAL_TIM_PWM_Start+0xfe>
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b10      	cmp	r3, #16
 8009e92:	d104      	bne.n	8009e9e <HAL_TIM_PWM_Start+0xf6>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e9c:	e003      	b.n	8009ea6 <HAL_TIM_PWM_Start+0xfe>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f001 fd16 	bl	800b8e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8009fa4 <HAL_TIM_PWM_Start+0x1fc>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d018      	beq.n	8009ef0 <HAL_TIM_PWM_Start+0x148>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a39      	ldr	r2, [pc, #228]	@ (8009fa8 <HAL_TIM_PWM_Start+0x200>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d013      	beq.n	8009ef0 <HAL_TIM_PWM_Start+0x148>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a37      	ldr	r2, [pc, #220]	@ (8009fac <HAL_TIM_PWM_Start+0x204>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d00e      	beq.n	8009ef0 <HAL_TIM_PWM_Start+0x148>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a36      	ldr	r2, [pc, #216]	@ (8009fb0 <HAL_TIM_PWM_Start+0x208>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d009      	beq.n	8009ef0 <HAL_TIM_PWM_Start+0x148>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a34      	ldr	r2, [pc, #208]	@ (8009fb4 <HAL_TIM_PWM_Start+0x20c>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d004      	beq.n	8009ef0 <HAL_TIM_PWM_Start+0x148>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a33      	ldr	r2, [pc, #204]	@ (8009fb8 <HAL_TIM_PWM_Start+0x210>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIM_PWM_Start+0x14c>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <HAL_TIM_PWM_Start+0x14e>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d007      	beq.n	8009f0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a25      	ldr	r2, [pc, #148]	@ (8009fa4 <HAL_TIM_PWM_Start+0x1fc>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d022      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x1b2>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f1c:	d01d      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x1b2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a26      	ldr	r2, [pc, #152]	@ (8009fbc <HAL_TIM_PWM_Start+0x214>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d018      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x1b2>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a24      	ldr	r2, [pc, #144]	@ (8009fc0 <HAL_TIM_PWM_Start+0x218>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d013      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x1b2>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a23      	ldr	r2, [pc, #140]	@ (8009fc4 <HAL_TIM_PWM_Start+0x21c>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d00e      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x1b2>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a19      	ldr	r2, [pc, #100]	@ (8009fa8 <HAL_TIM_PWM_Start+0x200>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d009      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x1b2>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a18      	ldr	r2, [pc, #96]	@ (8009fac <HAL_TIM_PWM_Start+0x204>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d004      	beq.n	8009f5a <HAL_TIM_PWM_Start+0x1b2>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a18      	ldr	r2, [pc, #96]	@ (8009fb8 <HAL_TIM_PWM_Start+0x210>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d115      	bne.n	8009f86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689a      	ldr	r2, [r3, #8]
 8009f60:	4b19      	ldr	r3, [pc, #100]	@ (8009fc8 <HAL_TIM_PWM_Start+0x220>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b06      	cmp	r3, #6
 8009f6a:	d015      	beq.n	8009f98 <HAL_TIM_PWM_Start+0x1f0>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f72:	d011      	beq.n	8009f98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f84:	e008      	b.n	8009f98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f042 0201 	orr.w	r2, r2, #1
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	e000      	b.n	8009f9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	40012c00 	.word	0x40012c00
 8009fa8:	40013400 	.word	0x40013400
 8009fac:	40014000 	.word	0x40014000
 8009fb0:	40014400 	.word	0x40014400
 8009fb4:	40014800 	.word	0x40014800
 8009fb8:	40015000 	.word	0x40015000
 8009fbc:	40000400 	.word	0x40000400
 8009fc0:	40000800 	.word	0x40000800
 8009fc4:	40000c00 	.word	0x40000c00
 8009fc8:	00010007 	.word	0x00010007

08009fcc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e04c      	b.n	800a07a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d111      	bne.n	800a010 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f001 fc99 	bl	800b92c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a1f      	ldr	r2, [pc, #124]	@ (800a084 <HAL_TIM_OnePulse_Init+0xb8>)
 800a006:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f000 ffe2 	bl	800afec <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0208 	bic.w	r2, r2, #8
 800a036:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6819      	ldr	r1, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	683a      	ldr	r2, [r7, #0]
 800a044:	430a      	orrs	r2, r1
 800a046:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2201      	movs	r2, #1
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3708      	adds	r7, #8
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	0800a089 	.word	0x0800a089

0800a088 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a090:	bf00      	nop
 800a092:	370c      	adds	r7, #12
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a0ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a0b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a0bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a0c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d108      	bne.n	800a0de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d105      	bne.n	800a0de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a0d2:	7b7b      	ldrb	r3, [r7, #13]
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d102      	bne.n	800a0de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a0d8:	7b3b      	ldrb	r3, [r7, #12]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d001      	beq.n	800a0e2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e059      	b.n	800a196 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2202      	movs	r2, #2
 800a0fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0202 	orr.w	r2, r2, #2
 800a110:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f042 0204 	orr.w	r2, r2, #4
 800a120:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2201      	movs	r2, #1
 800a128:	2100      	movs	r1, #0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 fbd8 	bl	800b8e0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2201      	movs	r2, #1
 800a136:	2104      	movs	r1, #4
 800a138:	4618      	mov	r0, r3
 800a13a:	f001 fbd1 	bl	800b8e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a17      	ldr	r2, [pc, #92]	@ (800a1a0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d018      	beq.n	800a17a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a15      	ldr	r2, [pc, #84]	@ (800a1a4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d013      	beq.n	800a17a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a14      	ldr	r2, [pc, #80]	@ (800a1a8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d00e      	beq.n	800a17a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4a12      	ldr	r2, [pc, #72]	@ (800a1ac <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d009      	beq.n	800a17a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a11      	ldr	r2, [pc, #68]	@ (800a1b0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d004      	beq.n	800a17a <HAL_TIM_OnePulse_Start_IT+0xde>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a0f      	ldr	r2, [pc, #60]	@ (800a1b4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d101      	bne.n	800a17e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e000      	b.n	800a180 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a17e:	2300      	movs	r3, #0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a192:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	40012c00 	.word	0x40012c00
 800a1a4:	40013400 	.word	0x40013400
 800a1a8:	40014000 	.word	0x40014000
 800a1ac:	40014400 	.word	0x40014400
 800a1b0:	40014800 	.word	0x40014800
 800a1b4:	40015000 	.word	0x40015000

0800a1b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b086      	sub	sp, #24
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e0a2      	b.n	800a312 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d111      	bne.n	800a1fc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f001 fba3 	bl	800b92c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d102      	bne.n	800a1f4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4a4a      	ldr	r2, [pc, #296]	@ (800a31c <HAL_TIM_Encoder_Init+0x164>)
 800a1f2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	6812      	ldr	r2, [r2, #0]
 800a20e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a212:	f023 0307 	bic.w	r3, r3, #7
 800a216:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	3304      	adds	r3, #4
 800a220:	4619      	mov	r1, r3
 800a222:	4610      	mov	r0, r2
 800a224:	f000 fee2 	bl	800afec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	689b      	ldr	r3, [r3, #8]
 800a22e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	4313      	orrs	r3, r2
 800a248:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a250:	f023 0303 	bic.w	r3, r3, #3
 800a254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	021b      	lsls	r3, r3, #8
 800a260:	4313      	orrs	r3, r2
 800a262:	693a      	ldr	r2, [r7, #16]
 800a264:	4313      	orrs	r3, r2
 800a266:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a26e:	f023 030c 	bic.w	r3, r3, #12
 800a272:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a27a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a27e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	68da      	ldr	r2, [r3, #12]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	021b      	lsls	r3, r3, #8
 800a28a:	4313      	orrs	r3, r2
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	4313      	orrs	r3, r2
 800a290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	011a      	lsls	r2, r3, #4
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	031b      	lsls	r3, r3, #12
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a2ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a2b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	08005a29 	.word	0x08005a29

0800a320 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a330:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a338:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a340:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a348:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d110      	bne.n	800a372 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d102      	bne.n	800a35c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a356:	7b7b      	ldrb	r3, [r7, #13]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d001      	beq.n	800a360 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	e069      	b.n	800a434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2202      	movs	r2, #2
 800a364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a370:	e031      	b.n	800a3d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	2b04      	cmp	r3, #4
 800a376:	d110      	bne.n	800a39a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d102      	bne.n	800a384 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a37e:	7b3b      	ldrb	r3, [r7, #12]
 800a380:	2b01      	cmp	r3, #1
 800a382:	d001      	beq.n	800a388 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e055      	b.n	800a434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2202      	movs	r2, #2
 800a394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a398:	e01d      	b.n	800a3d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d108      	bne.n	800a3b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d105      	bne.n	800a3b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a3a6:	7b7b      	ldrb	r3, [r7, #13]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d102      	bne.n	800a3b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a3ac:	7b3b      	ldrb	r3, [r7, #12]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d001      	beq.n	800a3b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e03e      	b.n	800a434 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2202      	movs	r2, #2
 800a3ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2202      	movs	r2, #2
 800a3c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2202      	movs	r2, #2
 800a3ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2202      	movs	r2, #2
 800a3d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d003      	beq.n	800a3e4 <HAL_TIM_Encoder_Start+0xc4>
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	d008      	beq.n	800a3f4 <HAL_TIM_Encoder_Start+0xd4>
 800a3e2:	e00f      	b.n	800a404 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f001 fa77 	bl	800b8e0 <TIM_CCxChannelCmd>
      break;
 800a3f2:	e016      	b.n	800a422 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	2104      	movs	r1, #4
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f001 fa6f 	bl	800b8e0 <TIM_CCxChannelCmd>
      break;
 800a402:	e00e      	b.n	800a422 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2201      	movs	r2, #1
 800a40a:	2100      	movs	r1, #0
 800a40c:	4618      	mov	r0, r3
 800a40e:	f001 fa67 	bl	800b8e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2201      	movs	r2, #1
 800a418:	2104      	movs	r1, #4
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 fa60 	bl	800b8e0 <TIM_CCxChannelCmd>
      break;
 800a420:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f042 0201 	orr.w	r2, r2, #1
 800a430:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	691b      	ldr	r3, [r3, #16]
 800a452:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f003 0302 	and.w	r3, r3, #2
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d026      	beq.n	800a4ac <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f003 0302 	and.w	r3, r3, #2
 800a464:	2b00      	cmp	r3, #0
 800a466:	d021      	beq.n	800a4ac <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0202 	mvn.w	r2, #2
 800a470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
 800a490:	e009      	b.n	800a4a6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f003 0304 	and.w	r3, r3, #4
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d026      	beq.n	800a504 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f003 0304 	and.w	r3, r3, #4
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d021      	beq.n	800a504 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f06f 0204 	mvn.w	r2, #4
 800a4c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d005      	beq.n	800a4ea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	4798      	blx	r3
 800a4e8:	e009      	b.n	800a4fe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	f003 0308 	and.w	r3, r3, #8
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d026      	beq.n	800a55c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f003 0308 	and.w	r3, r3, #8
 800a514:	2b00      	cmp	r3, #0
 800a516:	d021      	beq.n	800a55c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f06f 0208 	mvn.w	r2, #8
 800a520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2204      	movs	r2, #4
 800a526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	69db      	ldr	r3, [r3, #28]
 800a52e:	f003 0303 	and.w	r3, r3, #3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d005      	beq.n	800a542 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
 800a540:	e009      	b.n	800a556 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f003 0310 	and.w	r3, r3, #16
 800a562:	2b00      	cmp	r3, #0
 800a564:	d026      	beq.n	800a5b4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f003 0310 	and.w	r3, r3, #16
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d021      	beq.n	800a5b4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f06f 0210 	mvn.w	r2, #16
 800a578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2208      	movs	r2, #8
 800a57e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	4798      	blx	r3
 800a598:	e009      	b.n	800a5ae <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d009      	beq.n	800a5dc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f06f 0201 	mvn.w	r2, #1
 800a5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d104      	bne.n	800a5f0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00e      	beq.n	800a60e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d009      	beq.n	800a60e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00e      	beq.n	800a636 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d009      	beq.n	800a636 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a62a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00e      	beq.n	800a65e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a646:	2b00      	cmp	r3, #0
 800a648:	d009      	beq.n	800a65e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f003 0320 	and.w	r3, r3, #32
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00e      	beq.n	800a686 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f003 0320 	and.w	r3, r3, #32
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d009      	beq.n	800a686 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f06f 0220 	mvn.w	r2, #32
 800a67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00e      	beq.n	800a6ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a696:	2b00      	cmp	r3, #0
 800a698:	d009      	beq.n	800a6ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a6a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00e      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d009      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a6ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00e      	beq.n	800a6fe <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d009      	beq.n	800a6fe <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00e      	beq.n	800a726 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d009      	beq.n	800a726 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a71a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a726:	bf00      	nop
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a73c:	2300      	movs	r3, #0
 800a73e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_TIM_OC_ConfigChannel+0x1e>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e066      	b.n	800a81c <HAL_TIM_OC_ConfigChannel+0xec>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b14      	cmp	r3, #20
 800a75a:	d857      	bhi.n	800a80c <HAL_TIM_OC_ConfigChannel+0xdc>
 800a75c:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a762:	bf00      	nop
 800a764:	0800a7b9 	.word	0x0800a7b9
 800a768:	0800a80d 	.word	0x0800a80d
 800a76c:	0800a80d 	.word	0x0800a80d
 800a770:	0800a80d 	.word	0x0800a80d
 800a774:	0800a7c7 	.word	0x0800a7c7
 800a778:	0800a80d 	.word	0x0800a80d
 800a77c:	0800a80d 	.word	0x0800a80d
 800a780:	0800a80d 	.word	0x0800a80d
 800a784:	0800a7d5 	.word	0x0800a7d5
 800a788:	0800a80d 	.word	0x0800a80d
 800a78c:	0800a80d 	.word	0x0800a80d
 800a790:	0800a80d 	.word	0x0800a80d
 800a794:	0800a7e3 	.word	0x0800a7e3
 800a798:	0800a80d 	.word	0x0800a80d
 800a79c:	0800a80d 	.word	0x0800a80d
 800a7a0:	0800a80d 	.word	0x0800a80d
 800a7a4:	0800a7f1 	.word	0x0800a7f1
 800a7a8:	0800a80d 	.word	0x0800a80d
 800a7ac:	0800a80d 	.word	0x0800a80d
 800a7b0:	0800a80d 	.word	0x0800a80d
 800a7b4:	0800a7ff 	.word	0x0800a7ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 fcc8 	bl	800b154 <TIM_OC1_SetConfig>
      break;
 800a7c4:	e025      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68b9      	ldr	r1, [r7, #8]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fd5b 	bl	800b288 <TIM_OC2_SetConfig>
      break;
 800a7d2:	e01e      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	68b9      	ldr	r1, [r7, #8]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 fde8 	bl	800b3b0 <TIM_OC3_SetConfig>
      break;
 800a7e0:	e017      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 fe73 	bl	800b4d4 <TIM_OC4_SetConfig>
      break;
 800a7ee:	e010      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 ff00 	bl	800b5fc <TIM_OC5_SetConfig>
      break;
 800a7fc:	e009      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	4618      	mov	r0, r3
 800a806:	f000 ff63 	bl	800b6d0 <TIM_OC6_SetConfig>
      break;
 800a80a:	e002      	b.n	800a812 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	75fb      	strb	r3, [r7, #23]
      break;
 800a810:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2200      	movs	r2, #0
 800a816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a83e:	2302      	movs	r3, #2
 800a840:	e0ff      	b.n	800aa42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2b14      	cmp	r3, #20
 800a84e:	f200 80f0 	bhi.w	800aa32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a852:	a201      	add	r2, pc, #4	@ (adr r2, 800a858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a858:	0800a8ad 	.word	0x0800a8ad
 800a85c:	0800aa33 	.word	0x0800aa33
 800a860:	0800aa33 	.word	0x0800aa33
 800a864:	0800aa33 	.word	0x0800aa33
 800a868:	0800a8ed 	.word	0x0800a8ed
 800a86c:	0800aa33 	.word	0x0800aa33
 800a870:	0800aa33 	.word	0x0800aa33
 800a874:	0800aa33 	.word	0x0800aa33
 800a878:	0800a92f 	.word	0x0800a92f
 800a87c:	0800aa33 	.word	0x0800aa33
 800a880:	0800aa33 	.word	0x0800aa33
 800a884:	0800aa33 	.word	0x0800aa33
 800a888:	0800a96f 	.word	0x0800a96f
 800a88c:	0800aa33 	.word	0x0800aa33
 800a890:	0800aa33 	.word	0x0800aa33
 800a894:	0800aa33 	.word	0x0800aa33
 800a898:	0800a9b1 	.word	0x0800a9b1
 800a89c:	0800aa33 	.word	0x0800aa33
 800a8a0:	0800aa33 	.word	0x0800aa33
 800a8a4:	0800aa33 	.word	0x0800aa33
 800a8a8:	0800a9f1 	.word	0x0800a9f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68b9      	ldr	r1, [r7, #8]
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f000 fc4e 	bl	800b154 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	699a      	ldr	r2, [r3, #24]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f042 0208 	orr.w	r2, r2, #8
 800a8c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	699a      	ldr	r2, [r3, #24]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f022 0204 	bic.w	r2, r2, #4
 800a8d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	6999      	ldr	r1, [r3, #24]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	691a      	ldr	r2, [r3, #16]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	430a      	orrs	r2, r1
 800a8e8:	619a      	str	r2, [r3, #24]
      break;
 800a8ea:	e0a5      	b.n	800aa38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fcc8 	bl	800b288 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	699a      	ldr	r2, [r3, #24]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699a      	ldr	r2, [r3, #24]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6999      	ldr	r1, [r3, #24]
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	021a      	lsls	r2, r3, #8
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	430a      	orrs	r2, r1
 800a92a:	619a      	str	r2, [r3, #24]
      break;
 800a92c:	e084      	b.n	800aa38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fd3b 	bl	800b3b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	69da      	ldr	r2, [r3, #28]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f042 0208 	orr.w	r2, r2, #8
 800a948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	69da      	ldr	r2, [r3, #28]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f022 0204 	bic.w	r2, r2, #4
 800a958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	69d9      	ldr	r1, [r3, #28]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	691a      	ldr	r2, [r3, #16]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	430a      	orrs	r2, r1
 800a96a:	61da      	str	r2, [r3, #28]
      break;
 800a96c:	e064      	b.n	800aa38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68b9      	ldr	r1, [r7, #8]
 800a974:	4618      	mov	r0, r3
 800a976:	f000 fdad 	bl	800b4d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	69da      	ldr	r2, [r3, #28]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	69da      	ldr	r2, [r3, #28]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	69d9      	ldr	r1, [r3, #28]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	691b      	ldr	r3, [r3, #16]
 800a9a4:	021a      	lsls	r2, r3, #8
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	430a      	orrs	r2, r1
 800a9ac:	61da      	str	r2, [r3, #28]
      break;
 800a9ae:	e043      	b.n	800aa38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68b9      	ldr	r1, [r7, #8]
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 fe20 	bl	800b5fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0208 	orr.w	r2, r2, #8
 800a9ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f022 0204 	bic.w	r2, r2, #4
 800a9da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	691a      	ldr	r2, [r3, #16]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	430a      	orrs	r2, r1
 800a9ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a9ee:	e023      	b.n	800aa38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68b9      	ldr	r1, [r7, #8]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f000 fe6a 	bl	800b6d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa0a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa1a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	021a      	lsls	r2, r3, #8
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aa30:	e002      	b.n	800aa38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	75fb      	strb	r3, [r7, #23]
      break;
 800aa36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop

0800aa4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d101      	bne.n	800aa68 <HAL_TIM_ConfigClockSource+0x1c>
 800aa64:	2302      	movs	r3, #2
 800aa66:	e0f6      	b.n	800ac56 <HAL_TIM_ConfigClockSource+0x20a>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2202      	movs	r2, #2
 800aa74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800aa86:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aa8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a6f      	ldr	r2, [pc, #444]	@ (800ac60 <HAL_TIM_ConfigClockSource+0x214>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	f000 80c1 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800aaa8:	4a6d      	ldr	r2, [pc, #436]	@ (800ac60 <HAL_TIM_ConfigClockSource+0x214>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	f200 80c6 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800aab0:	4a6c      	ldr	r2, [pc, #432]	@ (800ac64 <HAL_TIM_ConfigClockSource+0x218>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	f000 80b9 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800aab8:	4a6a      	ldr	r2, [pc, #424]	@ (800ac64 <HAL_TIM_ConfigClockSource+0x218>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	f200 80be 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800aac0:	4a69      	ldr	r2, [pc, #420]	@ (800ac68 <HAL_TIM_ConfigClockSource+0x21c>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	f000 80b1 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800aac8:	4a67      	ldr	r2, [pc, #412]	@ (800ac68 <HAL_TIM_ConfigClockSource+0x21c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	f200 80b6 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800aad0:	4a66      	ldr	r2, [pc, #408]	@ (800ac6c <HAL_TIM_ConfigClockSource+0x220>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	f000 80a9 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800aad8:	4a64      	ldr	r2, [pc, #400]	@ (800ac6c <HAL_TIM_ConfigClockSource+0x220>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	f200 80ae 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800aae0:	4a63      	ldr	r2, [pc, #396]	@ (800ac70 <HAL_TIM_ConfigClockSource+0x224>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	f000 80a1 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800aae8:	4a61      	ldr	r2, [pc, #388]	@ (800ac70 <HAL_TIM_ConfigClockSource+0x224>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	f200 80a6 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800aaf0:	4a60      	ldr	r2, [pc, #384]	@ (800ac74 <HAL_TIM_ConfigClockSource+0x228>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	f000 8099 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800aaf8:	4a5e      	ldr	r2, [pc, #376]	@ (800ac74 <HAL_TIM_ConfigClockSource+0x228>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	f200 809e 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab00:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab04:	f000 8091 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800ab08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab0c:	f200 8096 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab14:	f000 8089 	beq.w	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800ab18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab1c:	f200 808e 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab24:	d03e      	beq.n	800aba4 <HAL_TIM_ConfigClockSource+0x158>
 800ab26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab2a:	f200 8087 	bhi.w	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab32:	f000 8086 	beq.w	800ac42 <HAL_TIM_ConfigClockSource+0x1f6>
 800ab36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab3a:	d87f      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab3c:	2b70      	cmp	r3, #112	@ 0x70
 800ab3e:	d01a      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x12a>
 800ab40:	2b70      	cmp	r3, #112	@ 0x70
 800ab42:	d87b      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab44:	2b60      	cmp	r3, #96	@ 0x60
 800ab46:	d050      	beq.n	800abea <HAL_TIM_ConfigClockSource+0x19e>
 800ab48:	2b60      	cmp	r3, #96	@ 0x60
 800ab4a:	d877      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab4c:	2b50      	cmp	r3, #80	@ 0x50
 800ab4e:	d03c      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x17e>
 800ab50:	2b50      	cmp	r3, #80	@ 0x50
 800ab52:	d873      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab54:	2b40      	cmp	r3, #64	@ 0x40
 800ab56:	d058      	beq.n	800ac0a <HAL_TIM_ConfigClockSource+0x1be>
 800ab58:	2b40      	cmp	r3, #64	@ 0x40
 800ab5a:	d86f      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab5c:	2b30      	cmp	r3, #48	@ 0x30
 800ab5e:	d064      	beq.n	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800ab60:	2b30      	cmp	r3, #48	@ 0x30
 800ab62:	d86b      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab64:	2b20      	cmp	r3, #32
 800ab66:	d060      	beq.n	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800ab68:	2b20      	cmp	r3, #32
 800ab6a:	d867      	bhi.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d05c      	beq.n	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800ab70:	2b10      	cmp	r3, #16
 800ab72:	d05a      	beq.n	800ac2a <HAL_TIM_ConfigClockSource+0x1de>
 800ab74:	e062      	b.n	800ac3c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab86:	f000 fe8b 	bl	800b8a0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ab98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	609a      	str	r2, [r3, #8]
      break;
 800aba2:	e04f      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abb4:	f000 fe74 	bl	800b8a0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800abc6:	609a      	str	r2, [r3, #8]
      break;
 800abc8:	e03c      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abd6:	461a      	mov	r2, r3
 800abd8:	f000 fde6 	bl	800b7a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2150      	movs	r1, #80	@ 0x50
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 fe3f 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800abe8:	e02c      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800abf6:	461a      	mov	r2, r3
 800abf8:	f000 fe05 	bl	800b806 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2160      	movs	r1, #96	@ 0x60
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 fe2f 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800ac08:	e01c      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac16:	461a      	mov	r2, r3
 800ac18:	f000 fdc6 	bl	800b7a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2140      	movs	r1, #64	@ 0x40
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 fe1f 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800ac28:	e00c      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4619      	mov	r1, r3
 800ac34:	4610      	mov	r0, r2
 800ac36:	f000 fe16 	bl	800b866 <TIM_ITRx_SetConfig>
      break;
 800ac3a:	e003      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac40:	e000      	b.n	800ac44 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ac42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	00100070 	.word	0x00100070
 800ac64:	00100060 	.word	0x00100060
 800ac68:	00100050 	.word	0x00100050
 800ac6c:	00100040 	.word	0x00100040
 800ac70:	00100030 	.word	0x00100030
 800ac74:	00100020 	.word	0x00100020

0800ac78 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b083      	sub	sp, #12
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr

0800acc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	370c      	adds	r7, #12
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acf8:	bf00      	nop
 800acfa:	370c      	adds	r7, #12
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b083      	sub	sp, #12
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ad0c:	bf00      	nop
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	460b      	mov	r3, r1
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e14a      	b.n	800afde <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad4e:	b2db      	uxtb	r3, r3
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	f040 80dd 	bne.w	800af10 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800ad56:	7afb      	ldrb	r3, [r7, #11]
 800ad58:	2b1f      	cmp	r3, #31
 800ad5a:	f200 80d6 	bhi.w	800af0a <HAL_TIM_RegisterCallback+0x1de>
 800ad5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad64 <HAL_TIM_RegisterCallback+0x38>)
 800ad60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad64:	0800ade5 	.word	0x0800ade5
 800ad68:	0800aded 	.word	0x0800aded
 800ad6c:	0800adf5 	.word	0x0800adf5
 800ad70:	0800adfd 	.word	0x0800adfd
 800ad74:	0800ae05 	.word	0x0800ae05
 800ad78:	0800ae0d 	.word	0x0800ae0d
 800ad7c:	0800ae15 	.word	0x0800ae15
 800ad80:	0800ae1d 	.word	0x0800ae1d
 800ad84:	0800ae25 	.word	0x0800ae25
 800ad88:	0800ae2d 	.word	0x0800ae2d
 800ad8c:	0800ae35 	.word	0x0800ae35
 800ad90:	0800ae3d 	.word	0x0800ae3d
 800ad94:	0800ae45 	.word	0x0800ae45
 800ad98:	0800ae4d 	.word	0x0800ae4d
 800ad9c:	0800ae57 	.word	0x0800ae57
 800ada0:	0800ae61 	.word	0x0800ae61
 800ada4:	0800ae6b 	.word	0x0800ae6b
 800ada8:	0800ae75 	.word	0x0800ae75
 800adac:	0800ae7f 	.word	0x0800ae7f
 800adb0:	0800ae89 	.word	0x0800ae89
 800adb4:	0800ae93 	.word	0x0800ae93
 800adb8:	0800ae9d 	.word	0x0800ae9d
 800adbc:	0800aea7 	.word	0x0800aea7
 800adc0:	0800aeb1 	.word	0x0800aeb1
 800adc4:	0800aebb 	.word	0x0800aebb
 800adc8:	0800aec5 	.word	0x0800aec5
 800adcc:	0800aecf 	.word	0x0800aecf
 800add0:	0800aed9 	.word	0x0800aed9
 800add4:	0800aee3 	.word	0x0800aee3
 800add8:	0800aeed 	.word	0x0800aeed
 800addc:	0800aef7 	.word	0x0800aef7
 800ade0:	0800af01 	.word	0x0800af01
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800adea:	e0f7      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800adf2:	e0f3      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800adfa:	e0ef      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ae02:	e0eb      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ae0a:	e0e7      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ae12:	e0e3      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ae1a:	e0df      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ae22:	e0db      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ae2a:	e0d7      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ae32:	e0d3      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ae3a:	e0cf      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ae42:	e0cb      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ae4a:	e0c7      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ae54:	e0c2      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ae5e:	e0bd      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	687a      	ldr	r2, [r7, #4]
 800ae64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800ae68:	e0b8      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800ae72:	e0b3      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800ae7c:	e0ae      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800ae86:	e0a9      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ae90:	e0a4      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800ae9a:	e09f      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800aea4:	e09a      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800aeae:	e095      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	687a      	ldr	r2, [r7, #4]
 800aeb4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800aeb8:	e090      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800aec2:	e08b      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800aecc:	e086      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	687a      	ldr	r2, [r7, #4]
 800aed2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800aed6:	e081      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800aee0:	e07c      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800aeea:	e077      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800aef4:	e072      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800aefe:	e06d      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800af08:	e068      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	75fb      	strb	r3, [r7, #23]
        break;
 800af0e:	e065      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d15d      	bne.n	800afd8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800af1c:	7afb      	ldrb	r3, [r7, #11]
 800af1e:	2b0d      	cmp	r3, #13
 800af20:	d857      	bhi.n	800afd2 <HAL_TIM_RegisterCallback+0x2a6>
 800af22:	a201      	add	r2, pc, #4	@ (adr r2, 800af28 <HAL_TIM_RegisterCallback+0x1fc>)
 800af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af28:	0800af61 	.word	0x0800af61
 800af2c:	0800af69 	.word	0x0800af69
 800af30:	0800af71 	.word	0x0800af71
 800af34:	0800af79 	.word	0x0800af79
 800af38:	0800af81 	.word	0x0800af81
 800af3c:	0800af89 	.word	0x0800af89
 800af40:	0800af91 	.word	0x0800af91
 800af44:	0800af99 	.word	0x0800af99
 800af48:	0800afa1 	.word	0x0800afa1
 800af4c:	0800afa9 	.word	0x0800afa9
 800af50:	0800afb1 	.word	0x0800afb1
 800af54:	0800afb9 	.word	0x0800afb9
 800af58:	0800afc1 	.word	0x0800afc1
 800af5c:	0800afc9 	.word	0x0800afc9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800af66:	e039      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800af6e:	e035      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800af76:	e031      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800af7e:	e02d      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800af86:	e029      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800af8e:	e025      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800af96:	e021      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800af9e:	e01d      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800afa6:	e019      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800afae:	e015      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800afb6:	e011      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800afbe:	e00d      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800afc6:	e009      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	687a      	ldr	r2, [r7, #4]
 800afcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800afd0:	e004      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	75fb      	strb	r3, [r7, #23]
        break;
 800afd6:	e001      	b.n	800afdc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800afdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	371c      	adds	r7, #28
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop

0800afec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afec:	b480      	push	{r7}
 800afee:	b085      	sub	sp, #20
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a4c      	ldr	r2, [pc, #304]	@ (800b130 <TIM_Base_SetConfig+0x144>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d017      	beq.n	800b034 <TIM_Base_SetConfig+0x48>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b00a:	d013      	beq.n	800b034 <TIM_Base_SetConfig+0x48>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a49      	ldr	r2, [pc, #292]	@ (800b134 <TIM_Base_SetConfig+0x148>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d00f      	beq.n	800b034 <TIM_Base_SetConfig+0x48>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4a48      	ldr	r2, [pc, #288]	@ (800b138 <TIM_Base_SetConfig+0x14c>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00b      	beq.n	800b034 <TIM_Base_SetConfig+0x48>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4a47      	ldr	r2, [pc, #284]	@ (800b13c <TIM_Base_SetConfig+0x150>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d007      	beq.n	800b034 <TIM_Base_SetConfig+0x48>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	4a46      	ldr	r2, [pc, #280]	@ (800b140 <TIM_Base_SetConfig+0x154>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d003      	beq.n	800b034 <TIM_Base_SetConfig+0x48>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a45      	ldr	r2, [pc, #276]	@ (800b144 <TIM_Base_SetConfig+0x158>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d108      	bne.n	800b046 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b03a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	4313      	orrs	r3, r2
 800b044:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a39      	ldr	r2, [pc, #228]	@ (800b130 <TIM_Base_SetConfig+0x144>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d023      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b054:	d01f      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a36      	ldr	r2, [pc, #216]	@ (800b134 <TIM_Base_SetConfig+0x148>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d01b      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a35      	ldr	r2, [pc, #212]	@ (800b138 <TIM_Base_SetConfig+0x14c>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d017      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a34      	ldr	r2, [pc, #208]	@ (800b13c <TIM_Base_SetConfig+0x150>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d013      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a33      	ldr	r2, [pc, #204]	@ (800b140 <TIM_Base_SetConfig+0x154>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d00f      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a33      	ldr	r2, [pc, #204]	@ (800b148 <TIM_Base_SetConfig+0x15c>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00b      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a32      	ldr	r2, [pc, #200]	@ (800b14c <TIM_Base_SetConfig+0x160>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d007      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a31      	ldr	r2, [pc, #196]	@ (800b150 <TIM_Base_SetConfig+0x164>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d003      	beq.n	800b096 <TIM_Base_SetConfig+0xaa>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a2c      	ldr	r2, [pc, #176]	@ (800b144 <TIM_Base_SetConfig+0x158>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d108      	bne.n	800b0a8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b09c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	695b      	ldr	r3, [r3, #20]
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68fa      	ldr	r2, [r7, #12]
 800b0ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	689a      	ldr	r2, [r3, #8]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	4a18      	ldr	r2, [pc, #96]	@ (800b130 <TIM_Base_SetConfig+0x144>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d013      	beq.n	800b0fc <TIM_Base_SetConfig+0x110>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a1a      	ldr	r2, [pc, #104]	@ (800b140 <TIM_Base_SetConfig+0x154>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d00f      	beq.n	800b0fc <TIM_Base_SetConfig+0x110>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a1a      	ldr	r2, [pc, #104]	@ (800b148 <TIM_Base_SetConfig+0x15c>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d00b      	beq.n	800b0fc <TIM_Base_SetConfig+0x110>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a19      	ldr	r2, [pc, #100]	@ (800b14c <TIM_Base_SetConfig+0x160>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d007      	beq.n	800b0fc <TIM_Base_SetConfig+0x110>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a18      	ldr	r2, [pc, #96]	@ (800b150 <TIM_Base_SetConfig+0x164>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d003      	beq.n	800b0fc <TIM_Base_SetConfig+0x110>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a13      	ldr	r2, [pc, #76]	@ (800b144 <TIM_Base_SetConfig+0x158>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d103      	bne.n	800b104 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	691a      	ldr	r2, [r3, #16]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	691b      	ldr	r3, [r3, #16]
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	2b01      	cmp	r3, #1
 800b114:	d105      	bne.n	800b122 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	f023 0201 	bic.w	r2, r3, #1
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	611a      	str	r2, [r3, #16]
  }
}
 800b122:	bf00      	nop
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	40012c00 	.word	0x40012c00
 800b134:	40000400 	.word	0x40000400
 800b138:	40000800 	.word	0x40000800
 800b13c:	40000c00 	.word	0x40000c00
 800b140:	40013400 	.word	0x40013400
 800b144:	40015000 	.word	0x40015000
 800b148:	40014000 	.word	0x40014000
 800b14c:	40014400 	.word	0x40014400
 800b150:	40014800 	.word	0x40014800

0800b154 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b154:	b480      	push	{r7}
 800b156:	b087      	sub	sp, #28
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a1b      	ldr	r3, [r3, #32]
 800b168:	f023 0201 	bic.w	r2, r3, #1
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	685b      	ldr	r3, [r3, #4]
 800b174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f023 0303 	bic.w	r3, r3, #3
 800b18e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	4313      	orrs	r3, r2
 800b198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f023 0302 	bic.w	r3, r3, #2
 800b1a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a30      	ldr	r2, [pc, #192]	@ (800b270 <TIM_OC1_SetConfig+0x11c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d013      	beq.n	800b1dc <TIM_OC1_SetConfig+0x88>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a2f      	ldr	r2, [pc, #188]	@ (800b274 <TIM_OC1_SetConfig+0x120>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d00f      	beq.n	800b1dc <TIM_OC1_SetConfig+0x88>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a2e      	ldr	r2, [pc, #184]	@ (800b278 <TIM_OC1_SetConfig+0x124>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00b      	beq.n	800b1dc <TIM_OC1_SetConfig+0x88>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a2d      	ldr	r2, [pc, #180]	@ (800b27c <TIM_OC1_SetConfig+0x128>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d007      	beq.n	800b1dc <TIM_OC1_SetConfig+0x88>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a2c      	ldr	r2, [pc, #176]	@ (800b280 <TIM_OC1_SetConfig+0x12c>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d003      	beq.n	800b1dc <TIM_OC1_SetConfig+0x88>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a2b      	ldr	r2, [pc, #172]	@ (800b284 <TIM_OC1_SetConfig+0x130>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d10c      	bne.n	800b1f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	f023 0308 	bic.w	r3, r3, #8
 800b1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	f023 0304 	bic.w	r3, r3, #4
 800b1f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800b270 <TIM_OC1_SetConfig+0x11c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d013      	beq.n	800b226 <TIM_OC1_SetConfig+0xd2>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a1c      	ldr	r2, [pc, #112]	@ (800b274 <TIM_OC1_SetConfig+0x120>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d00f      	beq.n	800b226 <TIM_OC1_SetConfig+0xd2>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a1b      	ldr	r2, [pc, #108]	@ (800b278 <TIM_OC1_SetConfig+0x124>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d00b      	beq.n	800b226 <TIM_OC1_SetConfig+0xd2>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a1a      	ldr	r2, [pc, #104]	@ (800b27c <TIM_OC1_SetConfig+0x128>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d007      	beq.n	800b226 <TIM_OC1_SetConfig+0xd2>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a19      	ldr	r2, [pc, #100]	@ (800b280 <TIM_OC1_SetConfig+0x12c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d003      	beq.n	800b226 <TIM_OC1_SetConfig+0xd2>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a18      	ldr	r2, [pc, #96]	@ (800b284 <TIM_OC1_SetConfig+0x130>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d111      	bne.n	800b24a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b22c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	4313      	orrs	r3, r2
 800b248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	693a      	ldr	r2, [r7, #16]
 800b24e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	685a      	ldr	r2, [r3, #4]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	621a      	str	r2, [r3, #32]
}
 800b264:	bf00      	nop
 800b266:	371c      	adds	r7, #28
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	40012c00 	.word	0x40012c00
 800b274:	40013400 	.word	0x40013400
 800b278:	40014000 	.word	0x40014000
 800b27c:	40014400 	.word	0x40014400
 800b280:	40014800 	.word	0x40014800
 800b284:	40015000 	.word	0x40015000

0800b288 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b288:	b480      	push	{r7}
 800b28a:	b087      	sub	sp, #28
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	f023 0210 	bic.w	r2, r3, #16
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	699b      	ldr	r3, [r3, #24]
 800b2ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b2b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	021b      	lsls	r3, r3, #8
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f023 0320 	bic.w	r3, r3, #32
 800b2d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	011b      	lsls	r3, r3, #4
 800b2de:	697a      	ldr	r2, [r7, #20]
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	4a2c      	ldr	r2, [pc, #176]	@ (800b398 <TIM_OC2_SetConfig+0x110>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d007      	beq.n	800b2fc <TIM_OC2_SetConfig+0x74>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	4a2b      	ldr	r2, [pc, #172]	@ (800b39c <TIM_OC2_SetConfig+0x114>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d003      	beq.n	800b2fc <TIM_OC2_SetConfig+0x74>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	4a2a      	ldr	r2, [pc, #168]	@ (800b3a0 <TIM_OC2_SetConfig+0x118>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d10d      	bne.n	800b318 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	68db      	ldr	r3, [r3, #12]
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b316:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a1f      	ldr	r2, [pc, #124]	@ (800b398 <TIM_OC2_SetConfig+0x110>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d013      	beq.n	800b348 <TIM_OC2_SetConfig+0xc0>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4a1e      	ldr	r2, [pc, #120]	@ (800b39c <TIM_OC2_SetConfig+0x114>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d00f      	beq.n	800b348 <TIM_OC2_SetConfig+0xc0>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	4a1e      	ldr	r2, [pc, #120]	@ (800b3a4 <TIM_OC2_SetConfig+0x11c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d00b      	beq.n	800b348 <TIM_OC2_SetConfig+0xc0>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	4a1d      	ldr	r2, [pc, #116]	@ (800b3a8 <TIM_OC2_SetConfig+0x120>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d007      	beq.n	800b348 <TIM_OC2_SetConfig+0xc0>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a1c      	ldr	r2, [pc, #112]	@ (800b3ac <TIM_OC2_SetConfig+0x124>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d003      	beq.n	800b348 <TIM_OC2_SetConfig+0xc0>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a17      	ldr	r2, [pc, #92]	@ (800b3a0 <TIM_OC2_SetConfig+0x118>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d113      	bne.n	800b370 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b34e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	695b      	ldr	r3, [r3, #20]
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	693a      	ldr	r2, [r7, #16]
 800b360:	4313      	orrs	r3, r2
 800b362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	699b      	ldr	r3, [r3, #24]
 800b368:	009b      	lsls	r3, r3, #2
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	621a      	str	r2, [r3, #32]
}
 800b38a:	bf00      	nop
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	40012c00 	.word	0x40012c00
 800b39c:	40013400 	.word	0x40013400
 800b3a0:	40015000 	.word	0x40015000
 800b3a4:	40014000 	.word	0x40014000
 800b3a8:	40014400 	.word	0x40014400
 800b3ac:	40014800 	.word	0x40014800

0800b3b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6a1b      	ldr	r3, [r3, #32]
 800b3c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f023 0303 	bic.w	r3, r3, #3
 800b3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b3fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	021b      	lsls	r3, r3, #8
 800b404:	697a      	ldr	r2, [r7, #20]
 800b406:	4313      	orrs	r3, r2
 800b408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	4a2b      	ldr	r2, [pc, #172]	@ (800b4bc <TIM_OC3_SetConfig+0x10c>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d007      	beq.n	800b422 <TIM_OC3_SetConfig+0x72>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	4a2a      	ldr	r2, [pc, #168]	@ (800b4c0 <TIM_OC3_SetConfig+0x110>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d003      	beq.n	800b422 <TIM_OC3_SetConfig+0x72>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4a29      	ldr	r2, [pc, #164]	@ (800b4c4 <TIM_OC3_SetConfig+0x114>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d10d      	bne.n	800b43e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b428:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	021b      	lsls	r3, r3, #8
 800b430:	697a      	ldr	r2, [r7, #20]
 800b432:	4313      	orrs	r3, r2
 800b434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b43c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a1e      	ldr	r2, [pc, #120]	@ (800b4bc <TIM_OC3_SetConfig+0x10c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d013      	beq.n	800b46e <TIM_OC3_SetConfig+0xbe>
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c0 <TIM_OC3_SetConfig+0x110>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d00f      	beq.n	800b46e <TIM_OC3_SetConfig+0xbe>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c8 <TIM_OC3_SetConfig+0x118>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d00b      	beq.n	800b46e <TIM_OC3_SetConfig+0xbe>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a1c      	ldr	r2, [pc, #112]	@ (800b4cc <TIM_OC3_SetConfig+0x11c>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d007      	beq.n	800b46e <TIM_OC3_SetConfig+0xbe>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a1b      	ldr	r2, [pc, #108]	@ (800b4d0 <TIM_OC3_SetConfig+0x120>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d003      	beq.n	800b46e <TIM_OC3_SetConfig+0xbe>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a16      	ldr	r2, [pc, #88]	@ (800b4c4 <TIM_OC3_SetConfig+0x114>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d113      	bne.n	800b496 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b47c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	693a      	ldr	r2, [r7, #16]
 800b486:	4313      	orrs	r3, r2
 800b488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	697a      	ldr	r2, [r7, #20]
 800b4ae:	621a      	str	r2, [r3, #32]
}
 800b4b0:	bf00      	nop
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	40012c00 	.word	0x40012c00
 800b4c0:	40013400 	.word	0x40013400
 800b4c4:	40015000 	.word	0x40015000
 800b4c8:	40014000 	.word	0x40014000
 800b4cc:	40014400 	.word	0x40014400
 800b4d0:	40014800 	.word	0x40014800

0800b4d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b50e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	021b      	lsls	r3, r3, #8
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	4313      	orrs	r3, r2
 800b51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b522:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	031b      	lsls	r3, r3, #12
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a2c      	ldr	r2, [pc, #176]	@ (800b5e4 <TIM_OC4_SetConfig+0x110>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d007      	beq.n	800b548 <TIM_OC4_SetConfig+0x74>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a2b      	ldr	r2, [pc, #172]	@ (800b5e8 <TIM_OC4_SetConfig+0x114>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d003      	beq.n	800b548 <TIM_OC4_SetConfig+0x74>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	4a2a      	ldr	r2, [pc, #168]	@ (800b5ec <TIM_OC4_SetConfig+0x118>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d10d      	bne.n	800b564 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b54e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	031b      	lsls	r3, r3, #12
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	4313      	orrs	r3, r2
 800b55a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b562:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a1f      	ldr	r2, [pc, #124]	@ (800b5e4 <TIM_OC4_SetConfig+0x110>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d013      	beq.n	800b594 <TIM_OC4_SetConfig+0xc0>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a1e      	ldr	r2, [pc, #120]	@ (800b5e8 <TIM_OC4_SetConfig+0x114>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d00f      	beq.n	800b594 <TIM_OC4_SetConfig+0xc0>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a1e      	ldr	r2, [pc, #120]	@ (800b5f0 <TIM_OC4_SetConfig+0x11c>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d00b      	beq.n	800b594 <TIM_OC4_SetConfig+0xc0>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f4 <TIM_OC4_SetConfig+0x120>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d007      	beq.n	800b594 <TIM_OC4_SetConfig+0xc0>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a1c      	ldr	r2, [pc, #112]	@ (800b5f8 <TIM_OC4_SetConfig+0x124>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d003      	beq.n	800b594 <TIM_OC4_SetConfig+0xc0>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a17      	ldr	r2, [pc, #92]	@ (800b5ec <TIM_OC4_SetConfig+0x118>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d113      	bne.n	800b5bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b59a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b5a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	019b      	lsls	r3, r3, #6
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	019b      	lsls	r3, r3, #6
 800b5b6:	693a      	ldr	r2, [r7, #16]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	685a      	ldr	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	697a      	ldr	r2, [r7, #20]
 800b5d4:	621a      	str	r2, [r3, #32]
}
 800b5d6:	bf00      	nop
 800b5d8:	371c      	adds	r7, #28
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	40012c00 	.word	0x40012c00
 800b5e8:	40013400 	.word	0x40013400
 800b5ec:	40015000 	.word	0x40015000
 800b5f0:	40014000 	.word	0x40014000
 800b5f4:	40014400 	.word	0x40014400
 800b5f8:	40014800 	.word	0x40014800

0800b5fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b087      	sub	sp, #28
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a1b      	ldr	r3, [r3, #32]
 800b60a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b62a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b62e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	4313      	orrs	r3, r2
 800b638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b640:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	041b      	lsls	r3, r3, #16
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a19      	ldr	r2, [pc, #100]	@ (800b6b8 <TIM_OC5_SetConfig+0xbc>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d013      	beq.n	800b67e <TIM_OC5_SetConfig+0x82>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a18      	ldr	r2, [pc, #96]	@ (800b6bc <TIM_OC5_SetConfig+0xc0>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d00f      	beq.n	800b67e <TIM_OC5_SetConfig+0x82>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a17      	ldr	r2, [pc, #92]	@ (800b6c0 <TIM_OC5_SetConfig+0xc4>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d00b      	beq.n	800b67e <TIM_OC5_SetConfig+0x82>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a16      	ldr	r2, [pc, #88]	@ (800b6c4 <TIM_OC5_SetConfig+0xc8>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d007      	beq.n	800b67e <TIM_OC5_SetConfig+0x82>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a15      	ldr	r2, [pc, #84]	@ (800b6c8 <TIM_OC5_SetConfig+0xcc>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d003      	beq.n	800b67e <TIM_OC5_SetConfig+0x82>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	4a14      	ldr	r2, [pc, #80]	@ (800b6cc <TIM_OC5_SetConfig+0xd0>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d109      	bne.n	800b692 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	021b      	lsls	r3, r3, #8
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	4313      	orrs	r3, r2
 800b690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	621a      	str	r2, [r3, #32]
}
 800b6ac:	bf00      	nop
 800b6ae:	371c      	adds	r7, #28
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	40012c00 	.word	0x40012c00
 800b6bc:	40013400 	.word	0x40013400
 800b6c0:	40014000 	.word	0x40014000
 800b6c4:	40014400 	.word	0x40014400
 800b6c8:	40014800 	.word	0x40014800
 800b6cc:	40015000 	.word	0x40015000

0800b6d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b087      	sub	sp, #28
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b6fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	021b      	lsls	r3, r3, #8
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	051b      	lsls	r3, r3, #20
 800b71e:	693a      	ldr	r2, [r7, #16]
 800b720:	4313      	orrs	r3, r2
 800b722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a1a      	ldr	r2, [pc, #104]	@ (800b790 <TIM_OC6_SetConfig+0xc0>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d013      	beq.n	800b754 <TIM_OC6_SetConfig+0x84>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	4a19      	ldr	r2, [pc, #100]	@ (800b794 <TIM_OC6_SetConfig+0xc4>)
 800b730:	4293      	cmp	r3, r2
 800b732:	d00f      	beq.n	800b754 <TIM_OC6_SetConfig+0x84>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a18      	ldr	r2, [pc, #96]	@ (800b798 <TIM_OC6_SetConfig+0xc8>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d00b      	beq.n	800b754 <TIM_OC6_SetConfig+0x84>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a17      	ldr	r2, [pc, #92]	@ (800b79c <TIM_OC6_SetConfig+0xcc>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d007      	beq.n	800b754 <TIM_OC6_SetConfig+0x84>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a16      	ldr	r2, [pc, #88]	@ (800b7a0 <TIM_OC6_SetConfig+0xd0>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d003      	beq.n	800b754 <TIM_OC6_SetConfig+0x84>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a15      	ldr	r2, [pc, #84]	@ (800b7a4 <TIM_OC6_SetConfig+0xd4>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d109      	bne.n	800b768 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b75a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	695b      	ldr	r3, [r3, #20]
 800b760:	029b      	lsls	r3, r3, #10
 800b762:	697a      	ldr	r2, [r7, #20]
 800b764:	4313      	orrs	r3, r2
 800b766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	697a      	ldr	r2, [r7, #20]
 800b76c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	621a      	str	r2, [r3, #32]
}
 800b782:	bf00      	nop
 800b784:	371c      	adds	r7, #28
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	40012c00 	.word	0x40012c00
 800b794:	40013400 	.word	0x40013400
 800b798:	40014000 	.word	0x40014000
 800b79c:	40014400 	.word	0x40014400
 800b7a0:	40014800 	.word	0x40014800
 800b7a4:	40015000 	.word	0x40015000

0800b7a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6a1b      	ldr	r3, [r3, #32]
 800b7be:	f023 0201 	bic.w	r2, r3, #1
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b7d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	011b      	lsls	r3, r3, #4
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f023 030a 	bic.w	r3, r3, #10
 800b7e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	621a      	str	r2, [r3, #32]
}
 800b7fa:	bf00      	nop
 800b7fc:	371c      	adds	r7, #28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b806:	b480      	push	{r7}
 800b808:	b087      	sub	sp, #28
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	60f8      	str	r0, [r7, #12]
 800b80e:	60b9      	str	r1, [r7, #8]
 800b810:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	f023 0210 	bic.w	r2, r3, #16
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b830:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	031b      	lsls	r3, r3, #12
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	4313      	orrs	r3, r2
 800b83a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b842:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	697a      	ldr	r2, [r7, #20]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	bf00      	nop
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b866:	b480      	push	{r7}
 800b868:	b085      	sub	sp, #20
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b87c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b880:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4313      	orrs	r3, r2
 800b888:	f043 0307 	orr.w	r3, r3, #7
 800b88c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	609a      	str	r2, [r3, #8]
}
 800b894:	bf00      	nop
 800b896:	3714      	adds	r7, #20
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	60f8      	str	r0, [r7, #12]
 800b8a8:	60b9      	str	r1, [r7, #8]
 800b8aa:	607a      	str	r2, [r7, #4]
 800b8ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	689b      	ldr	r3, [r3, #8]
 800b8b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b8ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	021a      	lsls	r2, r3, #8
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	697a      	ldr	r2, [r7, #20]
 800b8d2:	609a      	str	r2, [r3, #8]
}
 800b8d4:	bf00      	nop
 800b8d6:	371c      	adds	r7, #28
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b087      	sub	sp, #28
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	f003 031f 	and.w	r3, r3, #31
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b8f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a1a      	ldr	r2, [r3, #32]
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	43db      	mvns	r3, r3
 800b902:	401a      	ands	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6a1a      	ldr	r2, [r3, #32]
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f003 031f 	and.w	r3, r3, #31
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	fa01 f303 	lsl.w	r3, r1, r3
 800b918:	431a      	orrs	r2, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	621a      	str	r2, [r3, #32]
}
 800b91e:	bf00      	nop
 800b920:	371c      	adds	r7, #28
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
	...

0800b92c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a26      	ldr	r2, [pc, #152]	@ (800b9d0 <TIM_ResetCallback+0xa4>)
 800b938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a25      	ldr	r2, [pc, #148]	@ (800b9d4 <TIM_ResetCallback+0xa8>)
 800b940:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a24      	ldr	r2, [pc, #144]	@ (800b9d8 <TIM_ResetCallback+0xac>)
 800b948:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a23      	ldr	r2, [pc, #140]	@ (800b9dc <TIM_ResetCallback+0xb0>)
 800b950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a22      	ldr	r2, [pc, #136]	@ (800b9e0 <TIM_ResetCallback+0xb4>)
 800b958:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a21      	ldr	r2, [pc, #132]	@ (800b9e4 <TIM_ResetCallback+0xb8>)
 800b960:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a20      	ldr	r2, [pc, #128]	@ (800b9e8 <TIM_ResetCallback+0xbc>)
 800b968:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a1f      	ldr	r2, [pc, #124]	@ (800b9ec <TIM_ResetCallback+0xc0>)
 800b970:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a1e      	ldr	r2, [pc, #120]	@ (800b9f0 <TIM_ResetCallback+0xc4>)
 800b978:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a1d      	ldr	r2, [pc, #116]	@ (800b9f4 <TIM_ResetCallback+0xc8>)
 800b980:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a1c      	ldr	r2, [pc, #112]	@ (800b9f8 <TIM_ResetCallback+0xcc>)
 800b988:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a1b      	ldr	r2, [pc, #108]	@ (800b9fc <TIM_ResetCallback+0xd0>)
 800b990:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a1a      	ldr	r2, [pc, #104]	@ (800ba00 <TIM_ResetCallback+0xd4>)
 800b998:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a19      	ldr	r2, [pc, #100]	@ (800ba04 <TIM_ResetCallback+0xd8>)
 800b9a0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	4a18      	ldr	r2, [pc, #96]	@ (800ba08 <TIM_ResetCallback+0xdc>)
 800b9a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a17      	ldr	r2, [pc, #92]	@ (800ba0c <TIM_ResetCallback+0xe0>)
 800b9b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	4a16      	ldr	r2, [pc, #88]	@ (800ba10 <TIM_ResetCallback+0xe4>)
 800b9b8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4a15      	ldr	r2, [pc, #84]	@ (800ba14 <TIM_ResetCallback+0xe8>)
 800b9c0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800b9c4:	bf00      	nop
 800b9c6:	370c      	adds	r7, #12
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ce:	4770      	bx	lr
 800b9d0:	08004975 	.word	0x08004975
 800b9d4:	0800ac79 	.word	0x0800ac79
 800b9d8:	0800acf1 	.word	0x0800acf1
 800b9dc:	0800ad05 	.word	0x0800ad05
 800b9e0:	0800aca1 	.word	0x0800aca1
 800b9e4:	0800acb5 	.word	0x0800acb5
 800b9e8:	0800ac8d 	.word	0x0800ac8d
 800b9ec:	0800acc9 	.word	0x0800acc9
 800b9f0:	0800acdd 	.word	0x0800acdd
 800b9f4:	0800ad19 	.word	0x0800ad19
 800b9f8:	0800bc6d 	.word	0x0800bc6d
 800b9fc:	0800bc81 	.word	0x0800bc81
 800ba00:	0800bc95 	.word	0x0800bc95
 800ba04:	0800bca9 	.word	0x0800bca9
 800ba08:	0800bcbd 	.word	0x0800bcbd
 800ba0c:	0800bcd1 	.word	0x0800bcd1
 800ba10:	0800bce5 	.word	0x0800bce5
 800ba14:	0800bcf9 	.word	0x0800bcf9

0800ba18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d101      	bne.n	800ba30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba2c:	2302      	movs	r3, #2
 800ba2e:	e074      	b.n	800bb1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a34      	ldr	r2, [pc, #208]	@ (800bb28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d009      	beq.n	800ba6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a33      	ldr	r2, [pc, #204]	@ (800bb2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d004      	beq.n	800ba6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a31      	ldr	r2, [pc, #196]	@ (800bb30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d108      	bne.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ba74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ba86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a21      	ldr	r2, [pc, #132]	@ (800bb28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d022      	beq.n	800baee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bab0:	d01d      	beq.n	800baee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a1f      	ldr	r2, [pc, #124]	@ (800bb34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d018      	beq.n	800baee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a1d      	ldr	r2, [pc, #116]	@ (800bb38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d013      	beq.n	800baee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a1c      	ldr	r2, [pc, #112]	@ (800bb3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d00e      	beq.n	800baee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a15      	ldr	r2, [pc, #84]	@ (800bb2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d009      	beq.n	800baee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a18      	ldr	r2, [pc, #96]	@ (800bb40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d004      	beq.n	800baee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a11      	ldr	r2, [pc, #68]	@ (800bb30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d10c      	bne.n	800bb08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	4313      	orrs	r3, r2
 800bafe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3714      	adds	r7, #20
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	40012c00 	.word	0x40012c00
 800bb2c:	40013400 	.word	0x40013400
 800bb30:	40015000 	.word	0x40015000
 800bb34:	40000400 	.word	0x40000400
 800bb38:	40000800 	.word	0x40000800
 800bb3c:	40000c00 	.word	0x40000c00
 800bb40:	40014000 	.word	0x40014000

0800bb44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b085      	sub	sp, #20
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d101      	bne.n	800bb60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	e078      	b.n	800bc52 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	041b      	lsls	r3, r3, #16
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	69db      	ldr	r3, [r3, #28]
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a1c      	ldr	r2, [pc, #112]	@ (800bc60 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d009      	beq.n	800bc06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a1b      	ldr	r2, [pc, #108]	@ (800bc64 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d004      	beq.n	800bc06 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a19      	ldr	r2, [pc, #100]	@ (800bc68 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d11c      	bne.n	800bc40 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc10:	051b      	lsls	r3, r3, #20
 800bc12:	4313      	orrs	r3, r2
 800bc14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	6a1b      	ldr	r3, [r3, #32]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	40012c00 	.word	0x40012c00
 800bc64:	40013400 	.word	0x40013400
 800bc68:	40015000 	.word	0x40015000

0800bc6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bcb0:	bf00      	nop
 800bcb2:	370c      	adds	r7, #12
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bcd8:	bf00      	nop
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bcec:	bf00      	nop
 800bcee:	370c      	adds	r7, #12
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d101      	bne.n	800bd1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e050      	b.n	800bdc0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d114      	bne.n	800bd52 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fe37 	bl	800c9a4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d103      	bne.n	800bd48 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	4a21      	ldr	r2, [pc, #132]	@ (800bdc8 <HAL_UART_Init+0xbc>)
 800bd44:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2224      	movs	r2, #36	@ 0x24
 800bd56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	681a      	ldr	r2, [r3, #0]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f022 0201 	bic.w	r2, r2, #1
 800bd68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d002      	beq.n	800bd78 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f001 f964 	bl	800d040 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fe65 	bl	800ca48 <UART_SetConfig>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800bd84:	2301      	movs	r3, #1
 800bd86:	e01b      	b.n	800bdc0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	685a      	ldr	r2, [r3, #4]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bd96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	689a      	ldr	r2, [r3, #8]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bda6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f042 0201 	orr.w	r2, r2, #1
 800bdb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f001 f9e3 	bl	800d184 <UART_CheckIdleState>
 800bdbe:	4603      	mov	r3, r0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	08005ca5 	.word	0x08005ca5

0800bdcc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b087      	sub	sp, #28
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	607a      	str	r2, [r7, #4]
 800bdd8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d109      	bne.n	800bdf8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e09c      	b.n	800bf32 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d16c      	bne.n	800bedc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800be02:	7afb      	ldrb	r3, [r7, #11]
 800be04:	2b0c      	cmp	r3, #12
 800be06:	d85e      	bhi.n	800bec6 <HAL_UART_RegisterCallback+0xfa>
 800be08:	a201      	add	r2, pc, #4	@ (adr r2, 800be10 <HAL_UART_RegisterCallback+0x44>)
 800be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0e:	bf00      	nop
 800be10:	0800be45 	.word	0x0800be45
 800be14:	0800be4f 	.word	0x0800be4f
 800be18:	0800be59 	.word	0x0800be59
 800be1c:	0800be63 	.word	0x0800be63
 800be20:	0800be6d 	.word	0x0800be6d
 800be24:	0800be77 	.word	0x0800be77
 800be28:	0800be81 	.word	0x0800be81
 800be2c:	0800be8b 	.word	0x0800be8b
 800be30:	0800be95 	.word	0x0800be95
 800be34:	0800be9f 	.word	0x0800be9f
 800be38:	0800bea9 	.word	0x0800bea9
 800be3c:	0800beb3 	.word	0x0800beb3
 800be40:	0800bebd 	.word	0x0800bebd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800be4c:	e070      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800be56:	e06b      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800be60:	e066      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800be6a:	e061      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800be74:	e05c      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800be7e:	e057      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800be88:	e052      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800be92:	e04d      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800be9c:	e048      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800bea6:	e043      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800beb0:	e03e      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800beba:	e039      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bec4:	e034      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800becc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	75fb      	strb	r3, [r7, #23]
        break;
 800beda:	e029      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d11a      	bne.n	800bf1c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800bee6:	7afb      	ldrb	r3, [r7, #11]
 800bee8:	2b0b      	cmp	r3, #11
 800beea:	d002      	beq.n	800bef2 <HAL_UART_RegisterCallback+0x126>
 800beec:	2b0c      	cmp	r3, #12
 800beee:	d005      	beq.n	800befc <HAL_UART_RegisterCallback+0x130>
 800bef0:	e009      	b.n	800bf06 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800befa:	e019      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bf04:	e014      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	75fb      	strb	r3, [r7, #23]
        break;
 800bf1a:	e009      	b.n	800bf30 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	371c      	adds	r7, #28
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop

0800bf40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b08a      	sub	sp, #40	@ 0x28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf54:	2b20      	cmp	r3, #32
 800bf56:	d137      	bne.n	800bfc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <HAL_UART_Receive_IT+0x24>
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e030      	b.n	800bfca <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a18      	ldr	r2, [pc, #96]	@ (800bfd4 <HAL_UART_Receive_IT+0x94>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d01f      	beq.n	800bfb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d018      	beq.n	800bfb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	613b      	str	r3, [r7, #16]
   return(result);
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa4:	623b      	str	r3, [r7, #32]
 800bfa6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa8:	69f9      	ldr	r1, [r7, #28]
 800bfaa:	6a3a      	ldr	r2, [r7, #32]
 800bfac:	e841 2300 	strex	r3, r2, [r1]
 800bfb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d1e6      	bne.n	800bf86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bfb8:	88fb      	ldrh	r3, [r7, #6]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	68b9      	ldr	r1, [r7, #8]
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f001 f9f8 	bl	800d3b4 <UART_Start_Receive_IT>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	e000      	b.n	800bfca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bfc8:	2302      	movs	r3, #2
  }
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3728      	adds	r7, #40	@ 0x28
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	40008000 	.word	0x40008000

0800bfd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08a      	sub	sp, #40	@ 0x28
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	4613      	mov	r3, r2
 800bfe4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d167      	bne.n	800c0c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <HAL_UART_Transmit_DMA+0x24>
 800bff6:	88fb      	ldrh	r3, [r7, #6]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d101      	bne.n	800c000 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	e060      	b.n	800c0c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	88fa      	ldrh	r2, [r7, #6]
 800c00a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	88fa      	ldrh	r2, [r7, #6]
 800c012:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2221      	movs	r2, #33	@ 0x21
 800c022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d028      	beq.n	800c080 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c032:	4a26      	ldr	r2, [pc, #152]	@ (800c0cc <HAL_UART_Transmit_DMA+0xf4>)
 800c034:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c03a:	4a25      	ldr	r2, [pc, #148]	@ (800c0d0 <HAL_UART_Transmit_DMA+0xf8>)
 800c03c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c042:	4a24      	ldr	r2, [pc, #144]	@ (800c0d4 <HAL_UART_Transmit_DMA+0xfc>)
 800c044:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c04a:	2200      	movs	r2, #0
 800c04c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c056:	4619      	mov	r1, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3328      	adds	r3, #40	@ 0x28
 800c05e:	461a      	mov	r2, r3
 800c060:	88fb      	ldrh	r3, [r7, #6]
 800c062:	f7fb fbbb 	bl	80077dc <HAL_DMA_Start_IT>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d009      	beq.n	800c080 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2210      	movs	r2, #16
 800c070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2220      	movs	r2, #32
 800c078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c07c:	2301      	movs	r3, #1
 800c07e:	e020      	b.n	800c0c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2240      	movs	r2, #64	@ 0x40
 800c086:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3308      	adds	r3, #8
 800c08e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	e853 3f00 	ldrex	r3, [r3]
 800c096:	613b      	str	r3, [r7, #16]
   return(result);
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c09e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3308      	adds	r3, #8
 800c0a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0a8:	623a      	str	r2, [r7, #32]
 800c0aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ac:	69f9      	ldr	r1, [r7, #28]
 800c0ae:	6a3a      	ldr	r2, [r7, #32]
 800c0b0:	e841 2300 	strex	r3, r2, [r1]
 800c0b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1e5      	bne.n	800c088 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	e000      	b.n	800c0c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c0c0:	2302      	movs	r3, #2
  }
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3728      	adds	r7, #40	@ 0x28
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	0800d747 	.word	0x0800d747
 800c0d0:	0800d7e5 	.word	0x0800d7e5
 800c0d4:	0800d805 	.word	0x0800d805

0800c0d8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b09a      	sub	sp, #104	@ 0x68
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0e8:	e853 3f00 	ldrex	r3, [r3]
 800c0ec:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c0ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0f4:	667b      	str	r3, [r7, #100]	@ 0x64
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c0fe:	657b      	str	r3, [r7, #84]	@ 0x54
 800c100:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c102:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c104:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c106:	e841 2300 	strex	r3, r2, [r1]
 800c10a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c10c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1e6      	bne.n	800c0e0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	3308      	adds	r3, #8
 800c118:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c11c:	e853 3f00 	ldrex	r3, [r3]
 800c120:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c128:	f023 0301 	bic.w	r3, r3, #1
 800c12c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	3308      	adds	r3, #8
 800c134:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c136:	643a      	str	r2, [r7, #64]	@ 0x40
 800c138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c13c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e3      	bne.n	800c112 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d118      	bne.n	800c184 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c158:	6a3b      	ldr	r3, [r7, #32]
 800c15a:	e853 3f00 	ldrex	r3, [r3]
 800c15e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	f023 0310 	bic.w	r3, r3, #16
 800c166:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	461a      	mov	r2, r3
 800c16e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c170:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c172:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e6      	bne.n	800c152 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c18e:	2b40      	cmp	r3, #64	@ 0x40
 800c190:	d13b      	bne.n	800c20a <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3308      	adds	r3, #8
 800c198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	e853 3f00 	ldrex	r3, [r3]
 800c1a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	3308      	adds	r3, #8
 800c1b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1b2:	61ba      	str	r2, [r7, #24]
 800c1b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b6:	6979      	ldr	r1, [r7, #20]
 800c1b8:	69ba      	ldr	r2, [r7, #24]
 800c1ba:	e841 2300 	strex	r3, r2, [r1]
 800c1be:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d1e5      	bne.n	800c192 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d01c      	beq.n	800c20a <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fb fb76 	bl	80078d2 <HAL_DMA_Abort>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00e      	beq.n	800c20a <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fb fcdc 	bl	8007bb0 <HAL_DMA_GetError>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b20      	cmp	r3, #32
 800c1fc:	d105      	bne.n	800c20a <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2210      	movs	r2, #16
 800c202:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c206:	2303      	movs	r3, #3
 800c208:	e017      	b.n	800c23a <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	220f      	movs	r2, #15
 800c218:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	699a      	ldr	r2, [r3, #24]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f042 0208 	orr.w	r2, r2, #8
 800c228:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3768      	adds	r7, #104	@ 0x68
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
	...

0800c244 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b0ba      	sub	sp, #232	@ 0xe8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	69db      	ldr	r3, [r3, #28]
 800c252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c26a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c26e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c272:	4013      	ands	r3, r2
 800c274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c278:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d11b      	bne.n	800c2b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c284:	f003 0320 	and.w	r3, r3, #32
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d015      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c28c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c290:	f003 0320 	and.w	r3, r3, #32
 800c294:	2b00      	cmp	r3, #0
 800c296:	d105      	bne.n	800c2a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c298:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c29c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d009      	beq.n	800c2b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 8312 	beq.w	800c8d2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	4798      	blx	r3
      }
      return;
 800c2b6:	e30c      	b.n	800c8d2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c2b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 8129 	beq.w	800c514 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c2c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c2c6:	4b90      	ldr	r3, [pc, #576]	@ (800c508 <HAL_UART_IRQHandler+0x2c4>)
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d106      	bne.n	800c2dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c2ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c2d2:	4b8e      	ldr	r3, [pc, #568]	@ (800c50c <HAL_UART_IRQHandler+0x2c8>)
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 811c 	beq.w	800c514 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c2dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2e0:	f003 0301 	and.w	r3, r3, #1
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d011      	beq.n	800c30c <HAL_UART_IRQHandler+0xc8>
 800c2e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c2ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00b      	beq.n	800c30c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c302:	f043 0201 	orr.w	r2, r3, #1
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c30c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c310:	f003 0302 	and.w	r3, r3, #2
 800c314:	2b00      	cmp	r3, #0
 800c316:	d011      	beq.n	800c33c <HAL_UART_IRQHandler+0xf8>
 800c318:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00b      	beq.n	800c33c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2202      	movs	r2, #2
 800c32a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c332:	f043 0204 	orr.w	r2, r3, #4
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c33c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c340:	f003 0304 	and.w	r3, r3, #4
 800c344:	2b00      	cmp	r3, #0
 800c346:	d011      	beq.n	800c36c <HAL_UART_IRQHandler+0x128>
 800c348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c34c:	f003 0301 	and.w	r3, r3, #1
 800c350:	2b00      	cmp	r3, #0
 800c352:	d00b      	beq.n	800c36c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2204      	movs	r2, #4
 800c35a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c362:	f043 0202 	orr.w	r2, r3, #2
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c370:	f003 0308 	and.w	r3, r3, #8
 800c374:	2b00      	cmp	r3, #0
 800c376:	d017      	beq.n	800c3a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c37c:	f003 0320 	and.w	r3, r3, #32
 800c380:	2b00      	cmp	r3, #0
 800c382:	d105      	bne.n	800c390 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c384:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c388:	4b5f      	ldr	r3, [pc, #380]	@ (800c508 <HAL_UART_IRQHandler+0x2c4>)
 800c38a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00b      	beq.n	800c3a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2208      	movs	r2, #8
 800c396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c39e:	f043 0208 	orr.w	r2, r3, #8
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d012      	beq.n	800c3da <HAL_UART_IRQHandler+0x196>
 800c3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00c      	beq.n	800c3da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3d0:	f043 0220 	orr.w	r2, r3, #32
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 8278 	beq.w	800c8d6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c3e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3ea:	f003 0320 	and.w	r3, r3, #32
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d013      	beq.n	800c41a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c3f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3f6:	f003 0320 	and.w	r3, r3, #32
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d105      	bne.n	800c40a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c3fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c406:	2b00      	cmp	r3, #0
 800c408:	d007      	beq.n	800c41a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c420:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c42e:	2b40      	cmp	r3, #64	@ 0x40
 800c430:	d005      	beq.n	800c43e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c436:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d058      	beq.n	800c4f0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f001 f91b 	bl	800d67a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c44e:	2b40      	cmp	r3, #64	@ 0x40
 800c450:	d148      	bne.n	800c4e4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3308      	adds	r3, #8
 800c458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c46c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c470:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3308      	adds	r3, #8
 800c47a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c47e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c482:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c486:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c48a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c48e:	e841 2300 	strex	r3, r2, [r1]
 800c492:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1d9      	bne.n	800c452 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d017      	beq.n	800c4d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ae:	4a18      	ldr	r2, [pc, #96]	@ (800c510 <HAL_UART_IRQHandler+0x2cc>)
 800c4b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f7fb fa63 	bl	8007984 <HAL_DMA_Abort_IT>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d01f      	beq.n	800c504 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c4d2:	4610      	mov	r0, r2
 800c4d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d6:	e015      	b.n	800c504 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e2:	e00f      	b.n	800c504 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4ee:	e009      	b.n	800c504 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c502:	e1e8      	b.n	800c8d6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c504:	bf00      	nop
    return;
 800c506:	e1e6      	b.n	800c8d6 <HAL_UART_IRQHandler+0x692>
 800c508:	10000001 	.word	0x10000001
 800c50c:	04000120 	.word	0x04000120
 800c510:	0800d889 	.word	0x0800d889

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c518:	2b01      	cmp	r3, #1
 800c51a:	f040 8176 	bne.w	800c80a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c522:	f003 0310 	and.w	r3, r3, #16
 800c526:	2b00      	cmp	r3, #0
 800c528:	f000 816f 	beq.w	800c80a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c530:	f003 0310 	and.w	r3, r3, #16
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 8168 	beq.w	800c80a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	2210      	movs	r2, #16
 800c540:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c54c:	2b40      	cmp	r3, #64	@ 0x40
 800c54e:	f040 80dc 	bne.w	800c70a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c560:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c564:	2b00      	cmp	r3, #0
 800c566:	f000 80b1 	beq.w	800c6cc <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c570:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c574:	429a      	cmp	r2, r3
 800c576:	f080 80a9 	bcs.w	800c6cc <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 0320 	and.w	r3, r3, #32
 800c592:	2b00      	cmp	r3, #0
 800c594:	f040 8087 	bne.w	800c6a6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c5a4:	e853 3f00 	ldrex	r3, [r3]
 800c5a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c5ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c5b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c5c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5c6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c5ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c5d2:	e841 2300 	strex	r3, r2, [r1]
 800c5d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c5da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1da      	bne.n	800c598 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3308      	adds	r3, #8
 800c5e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c5ec:	e853 3f00 	ldrex	r3, [r3]
 800c5f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c5f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5f4:	f023 0301 	bic.w	r3, r3, #1
 800c5f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	3308      	adds	r3, #8
 800c602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c606:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c60a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c60e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c612:	e841 2300 	strex	r3, r2, [r1]
 800c616:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c618:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1e1      	bne.n	800c5e2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3308      	adds	r3, #8
 800c624:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c626:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c628:	e853 3f00 	ldrex	r3, [r3]
 800c62c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c62e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c634:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	3308      	adds	r3, #8
 800c63e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c642:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c644:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c648:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e3      	bne.n	800c61e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2220      	movs	r2, #32
 800c65a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2200      	movs	r2, #0
 800c662:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c66a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c66c:	e853 3f00 	ldrex	r3, [r3]
 800c670:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c674:	f023 0310 	bic.w	r3, r3, #16
 800c678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	461a      	mov	r2, r3
 800c682:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c686:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c688:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c68c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c68e:	e841 2300 	strex	r3, r2, [r1]
 800c692:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c696:	2b00      	cmp	r3, #0
 800c698:	d1e4      	bne.n	800c664 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fb f916 	bl	80078d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2202      	movs	r2, #2
 800c6aa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800c6be:	b292      	uxth	r2, r2
 800c6c0:	1a8a      	subs	r2, r1, r2
 800c6c2:	b292      	uxth	r2, r2
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c6ca:	e106      	b.n	800c8da <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c6d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	f040 80ff 	bne.w	800c8da <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f003 0320 	and.w	r3, r3, #32
 800c6ea:	2b20      	cmp	r3, #32
 800c6ec:	f040 80f5 	bne.w	800c8da <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2202      	movs	r2, #2
 800c6f4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c702:	4611      	mov	r1, r2
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	4798      	blx	r3
      return;
 800c708:	e0e7      	b.n	800c8da <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c716:	b29b      	uxth	r3, r3
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c724:	b29b      	uxth	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 80d9 	beq.w	800c8de <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800c72c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 80d4 	beq.w	800c8de <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c73e:	e853 3f00 	ldrex	r3, [r3]
 800c742:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c746:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c74a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	461a      	mov	r2, r3
 800c754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c758:	647b      	str	r3, [r7, #68]	@ 0x44
 800c75a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c75e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c760:	e841 2300 	strex	r3, r2, [r1]
 800c764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1e4      	bne.n	800c736 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3308      	adds	r3, #8
 800c772:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	e853 3f00 	ldrex	r3, [r3]
 800c77a:	623b      	str	r3, [r7, #32]
   return(result);
 800c77c:	6a3b      	ldr	r3, [r7, #32]
 800c77e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c782:	f023 0301 	bic.w	r3, r3, #1
 800c786:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3308      	adds	r3, #8
 800c790:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c794:	633a      	str	r2, [r7, #48]	@ 0x30
 800c796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c79a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c79c:	e841 2300 	strex	r3, r2, [r1]
 800c7a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1e1      	bne.n	800c76c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	e853 3f00 	ldrex	r3, [r3]
 800c7c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f023 0310 	bic.w	r3, r3, #16
 800c7d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	461a      	mov	r2, r3
 800c7da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c7de:	61fb      	str	r3, [r7, #28]
 800c7e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e2:	69b9      	ldr	r1, [r7, #24]
 800c7e4:	69fa      	ldr	r2, [r7, #28]
 800c7e6:	e841 2300 	strex	r3, r2, [r1]
 800c7ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1e4      	bne.n	800c7bc <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2202      	movs	r2, #2
 800c7f6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c7fe:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800c802:	4611      	mov	r1, r2
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c808:	e069      	b.n	800c8de <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c80a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c80e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c812:	2b00      	cmp	r3, #0
 800c814:	d010      	beq.n	800c838 <HAL_UART_IRQHandler+0x5f4>
 800c816:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c81a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d00a      	beq.n	800c838 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c82a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c836:	e055      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c83c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c840:	2b00      	cmp	r3, #0
 800c842:	d014      	beq.n	800c86e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d105      	bne.n	800c85c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d008      	beq.n	800c86e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c860:	2b00      	cmp	r3, #0
 800c862:	d03e      	beq.n	800c8e2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	4798      	blx	r3
    }
    return;
 800c86c:	e039      	b.n	800c8e2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c876:	2b00      	cmp	r3, #0
 800c878:	d009      	beq.n	800c88e <HAL_UART_IRQHandler+0x64a>
 800c87a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c87e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c882:	2b00      	cmp	r3, #0
 800c884:	d003      	beq.n	800c88e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f001 f812 	bl	800d8b0 <UART_EndTransmit_IT>
    return;
 800c88c:	e02a      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00b      	beq.n	800c8b2 <HAL_UART_IRQHandler+0x66e>
 800c89a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c89e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d005      	beq.n	800c8b2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8b0:	e018      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c8b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d012      	beq.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
 800c8be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	da0e      	bge.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c8d0:	e008      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c8d2:	bf00      	nop
 800c8d4:	e006      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c8d6:	bf00      	nop
 800c8d8:	e004      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c8da:	bf00      	nop
 800c8dc:	e002      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c8de:	bf00      	nop
 800c8e0:	e000      	b.n	800c8e4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c8e2:	bf00      	nop
  }
}
 800c8e4:	37e8      	adds	r7, #232	@ 0xe8
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop

0800c8ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c908:	bf00      	nop
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c930:	bf00      	nop
 800c932:	370c      	adds	r7, #12
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c958:	bf00      	nop
 800c95a:	370c      	adds	r7, #12
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c964:	b480      	push	{r7}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c96c:	bf00      	nop
 800c96e:	370c      	adds	r7, #12
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b083      	sub	sp, #12
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	460b      	mov	r3, r1
 800c996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c998:	bf00      	nop
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4a1a      	ldr	r2, [pc, #104]	@ (800ca18 <UART_InitCallbacksToDefault+0x74>)
 800c9b0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a19      	ldr	r2, [pc, #100]	@ (800ca1c <UART_InitCallbacksToDefault+0x78>)
 800c9b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a18      	ldr	r2, [pc, #96]	@ (800ca20 <UART_InitCallbacksToDefault+0x7c>)
 800c9c0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a17      	ldr	r2, [pc, #92]	@ (800ca24 <UART_InitCallbacksToDefault+0x80>)
 800c9c8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a16      	ldr	r2, [pc, #88]	@ (800ca28 <UART_InitCallbacksToDefault+0x84>)
 800c9d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a15      	ldr	r2, [pc, #84]	@ (800ca2c <UART_InitCallbacksToDefault+0x88>)
 800c9d8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	4a14      	ldr	r2, [pc, #80]	@ (800ca30 <UART_InitCallbacksToDefault+0x8c>)
 800c9e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	4a13      	ldr	r2, [pc, #76]	@ (800ca34 <UART_InitCallbacksToDefault+0x90>)
 800c9e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a12      	ldr	r2, [pc, #72]	@ (800ca38 <UART_InitCallbacksToDefault+0x94>)
 800c9f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	4a11      	ldr	r2, [pc, #68]	@ (800ca3c <UART_InitCallbacksToDefault+0x98>)
 800c9f8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4a10      	ldr	r2, [pc, #64]	@ (800ca40 <UART_InitCallbacksToDefault+0x9c>)
 800ca00:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	4a0f      	ldr	r2, [pc, #60]	@ (800ca44 <UART_InitCallbacksToDefault+0xa0>)
 800ca08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800ca0c:	bf00      	nop
 800ca0e:	370c      	adds	r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	0800c901 	.word	0x0800c901
 800ca1c:	0800c8ed 	.word	0x0800c8ed
 800ca20:	0800c929 	.word	0x0800c929
 800ca24:	0800c915 	.word	0x0800c915
 800ca28:	0800c93d 	.word	0x0800c93d
 800ca2c:	0800c951 	.word	0x0800c951
 800ca30:	0800c965 	.word	0x0800c965
 800ca34:	0800c979 	.word	0x0800c979
 800ca38:	0800e375 	.word	0x0800e375
 800ca3c:	0800e389 	.word	0x0800e389
 800ca40:	0800e39d 	.word	0x0800e39d
 800ca44:	0800c98d 	.word	0x0800c98d

0800ca48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ca4c:	b08c      	sub	sp, #48	@ 0x30
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	689a      	ldr	r2, [r3, #8]
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	431a      	orrs	r2, r3
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	431a      	orrs	r2, r3
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	69db      	ldr	r3, [r3, #28]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	4baa      	ldr	r3, [pc, #680]	@ (800cd20 <UART_SetConfig+0x2d8>)
 800ca78:	4013      	ands	r3, r2
 800ca7a:	697a      	ldr	r2, [r7, #20]
 800ca7c:	6812      	ldr	r2, [r2, #0]
 800ca7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca80:	430b      	orrs	r3, r1
 800ca82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	68da      	ldr	r2, [r3, #12]
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	430a      	orrs	r2, r1
 800ca98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a9f      	ldr	r2, [pc, #636]	@ (800cd24 <UART_SetConfig+0x2dc>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d004      	beq.n	800cab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	6a1b      	ldr	r3, [r3, #32]
 800caae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cab0:	4313      	orrs	r3, r2
 800cab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cabe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cac2:	697a      	ldr	r2, [r7, #20]
 800cac4:	6812      	ldr	r2, [r2, #0]
 800cac6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cac8:	430b      	orrs	r3, r1
 800caca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cad2:	f023 010f 	bic.w	r1, r3, #15
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	430a      	orrs	r2, r1
 800cae0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a90      	ldr	r2, [pc, #576]	@ (800cd28 <UART_SetConfig+0x2e0>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d125      	bne.n	800cb38 <UART_SetConfig+0xf0>
 800caec:	4b8f      	ldr	r3, [pc, #572]	@ (800cd2c <UART_SetConfig+0x2e4>)
 800caee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caf2:	f003 0303 	and.w	r3, r3, #3
 800caf6:	2b03      	cmp	r3, #3
 800caf8:	d81a      	bhi.n	800cb30 <UART_SetConfig+0xe8>
 800cafa:	a201      	add	r2, pc, #4	@ (adr r2, 800cb00 <UART_SetConfig+0xb8>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb11 	.word	0x0800cb11
 800cb04:	0800cb21 	.word	0x0800cb21
 800cb08:	0800cb19 	.word	0x0800cb19
 800cb0c:	0800cb29 	.word	0x0800cb29
 800cb10:	2301      	movs	r3, #1
 800cb12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cb16:	e116      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cb18:	2302      	movs	r3, #2
 800cb1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cb1e:	e112      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cb20:	2304      	movs	r3, #4
 800cb22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cb26:	e10e      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cb28:	2308      	movs	r3, #8
 800cb2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cb2e:	e10a      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cb30:	2310      	movs	r3, #16
 800cb32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cb36:	e106      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a7c      	ldr	r2, [pc, #496]	@ (800cd30 <UART_SetConfig+0x2e8>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d138      	bne.n	800cbb4 <UART_SetConfig+0x16c>
 800cb42:	4b7a      	ldr	r3, [pc, #488]	@ (800cd2c <UART_SetConfig+0x2e4>)
 800cb44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb48:	f003 030c 	and.w	r3, r3, #12
 800cb4c:	2b0c      	cmp	r3, #12
 800cb4e:	d82d      	bhi.n	800cbac <UART_SetConfig+0x164>
 800cb50:	a201      	add	r2, pc, #4	@ (adr r2, 800cb58 <UART_SetConfig+0x110>)
 800cb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb56:	bf00      	nop
 800cb58:	0800cb8d 	.word	0x0800cb8d
 800cb5c:	0800cbad 	.word	0x0800cbad
 800cb60:	0800cbad 	.word	0x0800cbad
 800cb64:	0800cbad 	.word	0x0800cbad
 800cb68:	0800cb9d 	.word	0x0800cb9d
 800cb6c:	0800cbad 	.word	0x0800cbad
 800cb70:	0800cbad 	.word	0x0800cbad
 800cb74:	0800cbad 	.word	0x0800cbad
 800cb78:	0800cb95 	.word	0x0800cb95
 800cb7c:	0800cbad 	.word	0x0800cbad
 800cb80:	0800cbad 	.word	0x0800cbad
 800cb84:	0800cbad 	.word	0x0800cbad
 800cb88:	0800cba5 	.word	0x0800cba5
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cb92:	e0d8      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cb94:	2302      	movs	r3, #2
 800cb96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cb9a:	e0d4      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cb9c:	2304      	movs	r3, #4
 800cb9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cba2:	e0d0      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cba4:	2308      	movs	r3, #8
 800cba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cbaa:	e0cc      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cbac:	2310      	movs	r3, #16
 800cbae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cbb2:	e0c8      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a5e      	ldr	r2, [pc, #376]	@ (800cd34 <UART_SetConfig+0x2ec>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d125      	bne.n	800cc0a <UART_SetConfig+0x1c2>
 800cbbe:	4b5b      	ldr	r3, [pc, #364]	@ (800cd2c <UART_SetConfig+0x2e4>)
 800cbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbc4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cbc8:	2b30      	cmp	r3, #48	@ 0x30
 800cbca:	d016      	beq.n	800cbfa <UART_SetConfig+0x1b2>
 800cbcc:	2b30      	cmp	r3, #48	@ 0x30
 800cbce:	d818      	bhi.n	800cc02 <UART_SetConfig+0x1ba>
 800cbd0:	2b20      	cmp	r3, #32
 800cbd2:	d00a      	beq.n	800cbea <UART_SetConfig+0x1a2>
 800cbd4:	2b20      	cmp	r3, #32
 800cbd6:	d814      	bhi.n	800cc02 <UART_SetConfig+0x1ba>
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <UART_SetConfig+0x19a>
 800cbdc:	2b10      	cmp	r3, #16
 800cbde:	d008      	beq.n	800cbf2 <UART_SetConfig+0x1aa>
 800cbe0:	e00f      	b.n	800cc02 <UART_SetConfig+0x1ba>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cbe8:	e0ad      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cbea:	2302      	movs	r3, #2
 800cbec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cbf0:	e0a9      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cbf2:	2304      	movs	r3, #4
 800cbf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cbf8:	e0a5      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cbfa:	2308      	movs	r3, #8
 800cbfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc00:	e0a1      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cc02:	2310      	movs	r3, #16
 800cc04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc08:	e09d      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	4a4a      	ldr	r2, [pc, #296]	@ (800cd38 <UART_SetConfig+0x2f0>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d125      	bne.n	800cc60 <UART_SetConfig+0x218>
 800cc14:	4b45      	ldr	r3, [pc, #276]	@ (800cd2c <UART_SetConfig+0x2e4>)
 800cc16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cc1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc20:	d016      	beq.n	800cc50 <UART_SetConfig+0x208>
 800cc22:	2bc0      	cmp	r3, #192	@ 0xc0
 800cc24:	d818      	bhi.n	800cc58 <UART_SetConfig+0x210>
 800cc26:	2b80      	cmp	r3, #128	@ 0x80
 800cc28:	d00a      	beq.n	800cc40 <UART_SetConfig+0x1f8>
 800cc2a:	2b80      	cmp	r3, #128	@ 0x80
 800cc2c:	d814      	bhi.n	800cc58 <UART_SetConfig+0x210>
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <UART_SetConfig+0x1f0>
 800cc32:	2b40      	cmp	r3, #64	@ 0x40
 800cc34:	d008      	beq.n	800cc48 <UART_SetConfig+0x200>
 800cc36:	e00f      	b.n	800cc58 <UART_SetConfig+0x210>
 800cc38:	2300      	movs	r3, #0
 800cc3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc3e:	e082      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cc40:	2302      	movs	r3, #2
 800cc42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc46:	e07e      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cc48:	2304      	movs	r3, #4
 800cc4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc4e:	e07a      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cc50:	2308      	movs	r3, #8
 800cc52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc56:	e076      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cc58:	2310      	movs	r3, #16
 800cc5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc5e:	e072      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a35      	ldr	r2, [pc, #212]	@ (800cd3c <UART_SetConfig+0x2f4>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d12a      	bne.n	800ccc0 <UART_SetConfig+0x278>
 800cc6a:	4b30      	ldr	r3, [pc, #192]	@ (800cd2c <UART_SetConfig+0x2e4>)
 800cc6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cc74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc78:	d01a      	beq.n	800ccb0 <UART_SetConfig+0x268>
 800cc7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cc7e:	d81b      	bhi.n	800ccb8 <UART_SetConfig+0x270>
 800cc80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc84:	d00c      	beq.n	800cca0 <UART_SetConfig+0x258>
 800cc86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cc8a:	d815      	bhi.n	800ccb8 <UART_SetConfig+0x270>
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d003      	beq.n	800cc98 <UART_SetConfig+0x250>
 800cc90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc94:	d008      	beq.n	800cca8 <UART_SetConfig+0x260>
 800cc96:	e00f      	b.n	800ccb8 <UART_SetConfig+0x270>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cc9e:	e052      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cca0:	2302      	movs	r3, #2
 800cca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cca6:	e04e      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cca8:	2304      	movs	r3, #4
 800ccaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccae:	e04a      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800ccb0:	2308      	movs	r3, #8
 800ccb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccb6:	e046      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800ccb8:	2310      	movs	r3, #16
 800ccba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccbe:	e042      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a17      	ldr	r2, [pc, #92]	@ (800cd24 <UART_SetConfig+0x2dc>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d13a      	bne.n	800cd40 <UART_SetConfig+0x2f8>
 800ccca:	4b18      	ldr	r3, [pc, #96]	@ (800cd2c <UART_SetConfig+0x2e4>)
 800cccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ccd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ccd8:	d01a      	beq.n	800cd10 <UART_SetConfig+0x2c8>
 800ccda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ccde:	d81b      	bhi.n	800cd18 <UART_SetConfig+0x2d0>
 800cce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cce4:	d00c      	beq.n	800cd00 <UART_SetConfig+0x2b8>
 800cce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ccea:	d815      	bhi.n	800cd18 <UART_SetConfig+0x2d0>
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <UART_SetConfig+0x2b0>
 800ccf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ccf4:	d008      	beq.n	800cd08 <UART_SetConfig+0x2c0>
 800ccf6:	e00f      	b.n	800cd18 <UART_SetConfig+0x2d0>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccfe:	e022      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cd00:	2302      	movs	r3, #2
 800cd02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd06:	e01e      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cd08:	2304      	movs	r3, #4
 800cd0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd0e:	e01a      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cd10:	2308      	movs	r3, #8
 800cd12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd16:	e016      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cd18:	2310      	movs	r3, #16
 800cd1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd1e:	e012      	b.n	800cd46 <UART_SetConfig+0x2fe>
 800cd20:	cfff69f3 	.word	0xcfff69f3
 800cd24:	40008000 	.word	0x40008000
 800cd28:	40013800 	.word	0x40013800
 800cd2c:	40021000 	.word	0x40021000
 800cd30:	40004400 	.word	0x40004400
 800cd34:	40004800 	.word	0x40004800
 800cd38:	40004c00 	.word	0x40004c00
 800cd3c:	40005000 	.word	0x40005000
 800cd40:	2310      	movs	r3, #16
 800cd42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4aae      	ldr	r2, [pc, #696]	@ (800d004 <UART_SetConfig+0x5bc>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	f040 8097 	bne.w	800ce80 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cd56:	2b08      	cmp	r3, #8
 800cd58:	d823      	bhi.n	800cda2 <UART_SetConfig+0x35a>
 800cd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd60 <UART_SetConfig+0x318>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd85 	.word	0x0800cd85
 800cd64:	0800cda3 	.word	0x0800cda3
 800cd68:	0800cd8d 	.word	0x0800cd8d
 800cd6c:	0800cda3 	.word	0x0800cda3
 800cd70:	0800cd93 	.word	0x0800cd93
 800cd74:	0800cda3 	.word	0x0800cda3
 800cd78:	0800cda3 	.word	0x0800cda3
 800cd7c:	0800cda3 	.word	0x0800cda3
 800cd80:	0800cd9b 	.word	0x0800cd9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd84:	f7fb fefa 	bl	8008b7c <HAL_RCC_GetPCLK1Freq>
 800cd88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cd8a:	e010      	b.n	800cdae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd8c:	4b9e      	ldr	r3, [pc, #632]	@ (800d008 <UART_SetConfig+0x5c0>)
 800cd8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cd90:	e00d      	b.n	800cdae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd92:	f7fb fe85 	bl	8008aa0 <HAL_RCC_GetSysClockFreq>
 800cd96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cd98:	e009      	b.n	800cdae <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cd9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cda0:	e005      	b.n	800cdae <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cda2:	2300      	movs	r3, #0
 800cda4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cdac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 8130 	beq.w	800d016 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdba:	4a94      	ldr	r2, [pc, #592]	@ (800d00c <UART_SetConfig+0x5c4>)
 800cdbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdc0:	461a      	mov	r2, r3
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdc8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	685a      	ldr	r2, [r3, #4]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	005b      	lsls	r3, r3, #1
 800cdd2:	4413      	add	r3, r2
 800cdd4:	69ba      	ldr	r2, [r7, #24]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d305      	bcc.n	800cde6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cde0:	69ba      	ldr	r2, [r7, #24]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d903      	bls.n	800cdee <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cdec:	e113      	b.n	800d016 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	60bb      	str	r3, [r7, #8]
 800cdf4:	60fa      	str	r2, [r7, #12]
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdfa:	4a84      	ldr	r2, [pc, #528]	@ (800d00c <UART_SetConfig+0x5c4>)
 800cdfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	2200      	movs	r2, #0
 800ce04:	603b      	str	r3, [r7, #0]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ce10:	f7f3 ffec 	bl	8000dec <__aeabi_uldivmod>
 800ce14:	4602      	mov	r2, r0
 800ce16:	460b      	mov	r3, r1
 800ce18:	4610      	mov	r0, r2
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	f04f 0200 	mov.w	r2, #0
 800ce20:	f04f 0300 	mov.w	r3, #0
 800ce24:	020b      	lsls	r3, r1, #8
 800ce26:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce2a:	0202      	lsls	r2, r0, #8
 800ce2c:	6979      	ldr	r1, [r7, #20]
 800ce2e:	6849      	ldr	r1, [r1, #4]
 800ce30:	0849      	lsrs	r1, r1, #1
 800ce32:	2000      	movs	r0, #0
 800ce34:	460c      	mov	r4, r1
 800ce36:	4605      	mov	r5, r0
 800ce38:	eb12 0804 	adds.w	r8, r2, r4
 800ce3c:	eb43 0905 	adc.w	r9, r3, r5
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	469a      	mov	sl, r3
 800ce48:	4693      	mov	fp, r2
 800ce4a:	4652      	mov	r2, sl
 800ce4c:	465b      	mov	r3, fp
 800ce4e:	4640      	mov	r0, r8
 800ce50:	4649      	mov	r1, r9
 800ce52:	f7f3 ffcb 	bl	8000dec <__aeabi_uldivmod>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce64:	d308      	bcc.n	800ce78 <UART_SetConfig+0x430>
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ce6c:	d204      	bcs.n	800ce78 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6a3a      	ldr	r2, [r7, #32]
 800ce74:	60da      	str	r2, [r3, #12]
 800ce76:	e0ce      	b.n	800d016 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ce7e:	e0ca      	b.n	800d016 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	69db      	ldr	r3, [r3, #28]
 800ce84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce88:	d166      	bne.n	800cf58 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ce8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ce8e:	2b08      	cmp	r3, #8
 800ce90:	d827      	bhi.n	800cee2 <UART_SetConfig+0x49a>
 800ce92:	a201      	add	r2, pc, #4	@ (adr r2, 800ce98 <UART_SetConfig+0x450>)
 800ce94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce98:	0800cebd 	.word	0x0800cebd
 800ce9c:	0800cec5 	.word	0x0800cec5
 800cea0:	0800cecd 	.word	0x0800cecd
 800cea4:	0800cee3 	.word	0x0800cee3
 800cea8:	0800ced3 	.word	0x0800ced3
 800ceac:	0800cee3 	.word	0x0800cee3
 800ceb0:	0800cee3 	.word	0x0800cee3
 800ceb4:	0800cee3 	.word	0x0800cee3
 800ceb8:	0800cedb 	.word	0x0800cedb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cebc:	f7fb fe5e 	bl	8008b7c <HAL_RCC_GetPCLK1Freq>
 800cec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cec2:	e014      	b.n	800ceee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cec4:	f7fb fe70 	bl	8008ba8 <HAL_RCC_GetPCLK2Freq>
 800cec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ceca:	e010      	b.n	800ceee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cecc:	4b4e      	ldr	r3, [pc, #312]	@ (800d008 <UART_SetConfig+0x5c0>)
 800cece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ced0:	e00d      	b.n	800ceee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ced2:	f7fb fde5 	bl	8008aa0 <HAL_RCC_GetSysClockFreq>
 800ced6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ced8:	e009      	b.n	800ceee <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ceda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cee0:	e005      	b.n	800ceee <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ceec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ceee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 8090 	beq.w	800d016 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefa:	4a44      	ldr	r2, [pc, #272]	@ (800d00c <UART_SetConfig+0x5c4>)
 800cefc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf00:	461a      	mov	r2, r3
 800cf02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf04:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf08:	005a      	lsls	r2, r3, #1
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	085b      	lsrs	r3, r3, #1
 800cf10:	441a      	add	r2, r3
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	2b0f      	cmp	r3, #15
 800cf20:	d916      	bls.n	800cf50 <UART_SetConfig+0x508>
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf28:	d212      	bcs.n	800cf50 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	f023 030f 	bic.w	r3, r3, #15
 800cf32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	085b      	lsrs	r3, r3, #1
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	f003 0307 	and.w	r3, r3, #7
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	8bfb      	ldrh	r3, [r7, #30]
 800cf42:	4313      	orrs	r3, r2
 800cf44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	8bfa      	ldrh	r2, [r7, #30]
 800cf4c:	60da      	str	r2, [r3, #12]
 800cf4e:	e062      	b.n	800d016 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cf56:	e05e      	b.n	800d016 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf5c:	2b08      	cmp	r3, #8
 800cf5e:	d828      	bhi.n	800cfb2 <UART_SetConfig+0x56a>
 800cf60:	a201      	add	r2, pc, #4	@ (adr r2, 800cf68 <UART_SetConfig+0x520>)
 800cf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf66:	bf00      	nop
 800cf68:	0800cf8d 	.word	0x0800cf8d
 800cf6c:	0800cf95 	.word	0x0800cf95
 800cf70:	0800cf9d 	.word	0x0800cf9d
 800cf74:	0800cfb3 	.word	0x0800cfb3
 800cf78:	0800cfa3 	.word	0x0800cfa3
 800cf7c:	0800cfb3 	.word	0x0800cfb3
 800cf80:	0800cfb3 	.word	0x0800cfb3
 800cf84:	0800cfb3 	.word	0x0800cfb3
 800cf88:	0800cfab 	.word	0x0800cfab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf8c:	f7fb fdf6 	bl	8008b7c <HAL_RCC_GetPCLK1Freq>
 800cf90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf92:	e014      	b.n	800cfbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf94:	f7fb fe08 	bl	8008ba8 <HAL_RCC_GetPCLK2Freq>
 800cf98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf9a:	e010      	b.n	800cfbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf9c:	4b1a      	ldr	r3, [pc, #104]	@ (800d008 <UART_SetConfig+0x5c0>)
 800cf9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cfa0:	e00d      	b.n	800cfbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfa2:	f7fb fd7d 	bl	8008aa0 <HAL_RCC_GetSysClockFreq>
 800cfa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cfa8:	e009      	b.n	800cfbe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cfae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cfb0:	e005      	b.n	800cfbe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cfbc:	bf00      	nop
    }

    if (pclk != 0U)
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d028      	beq.n	800d016 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfc8:	4a10      	ldr	r2, [pc, #64]	@ (800d00c <UART_SetConfig+0x5c4>)
 800cfca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfd2:	fbb3 f2f2 	udiv	r2, r3, r2
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	085b      	lsrs	r3, r3, #1
 800cfdc:	441a      	add	r2, r3
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfe6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	2b0f      	cmp	r3, #15
 800cfec:	d910      	bls.n	800d010 <UART_SetConfig+0x5c8>
 800cfee:	6a3b      	ldr	r3, [r7, #32]
 800cff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cff4:	d20c      	bcs.n	800d010 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	60da      	str	r2, [r3, #12]
 800d000:	e009      	b.n	800d016 <UART_SetConfig+0x5ce>
 800d002:	bf00      	nop
 800d004:	40008000 	.word	0x40008000
 800d008:	00f42400 	.word	0x00f42400
 800d00c:	08010ca0 	.word	0x08010ca0
      }
      else
      {
        ret = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2201      	movs	r2, #1
 800d01a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	2201      	movs	r2, #1
 800d022:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2200      	movs	r2, #0
 800d02a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	2200      	movs	r2, #0
 800d030:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d032:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d036:	4618      	mov	r0, r3
 800d038:	3730      	adds	r7, #48	@ 0x30
 800d03a:	46bd      	mov	sp, r7
 800d03c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d04c:	f003 0308 	and.w	r3, r3, #8
 800d050:	2b00      	cmp	r3, #0
 800d052:	d00a      	beq.n	800d06a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	430a      	orrs	r2, r1
 800d068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d06e:	f003 0301 	and.w	r3, r3, #1
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00a      	beq.n	800d08c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	430a      	orrs	r2, r1
 800d08a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d090:	f003 0302 	and.w	r3, r3, #2
 800d094:	2b00      	cmp	r3, #0
 800d096:	d00a      	beq.n	800d0ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	430a      	orrs	r2, r1
 800d0ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b2:	f003 0304 	and.w	r3, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d00a      	beq.n	800d0d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	430a      	orrs	r2, r1
 800d0ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d4:	f003 0310 	and.w	r3, r3, #16
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00a      	beq.n	800d0f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	430a      	orrs	r2, r1
 800d0f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0f6:	f003 0320 	and.w	r3, r3, #32
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00a      	beq.n	800d114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	430a      	orrs	r2, r1
 800d112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d01a      	beq.n	800d156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	430a      	orrs	r2, r1
 800d134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d13a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d13e:	d10a      	bne.n	800d156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	430a      	orrs	r2, r1
 800d154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d15a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00a      	beq.n	800d178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	685b      	ldr	r3, [r3, #4]
 800d168:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	430a      	orrs	r2, r1
 800d176:	605a      	str	r2, [r3, #4]
  }
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b098      	sub	sp, #96	@ 0x60
 800d188:	af02      	add	r7, sp, #8
 800d18a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2200      	movs	r2, #0
 800d190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d194:	f7f8 fea0 	bl	8005ed8 <HAL_GetTick>
 800d198:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 0308 	and.w	r3, r3, #8
 800d1a4:	2b08      	cmp	r3, #8
 800d1a6:	d12f      	bne.n	800d208 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d1ac:	9300      	str	r3, [sp, #0]
 800d1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f000 f88e 	bl	800d2d8 <UART_WaitOnFlagUntilTimeout>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d022      	beq.n	800d208 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ca:	e853 3f00 	ldrex	r3, [r3]
 800d1ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d1d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d1d6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	461a      	mov	r2, r3
 800d1de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d1e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1e8:	e841 2300 	strex	r3, r2, [r1]
 800d1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d1ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d1e6      	bne.n	800d1c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d204:	2303      	movs	r3, #3
 800d206:	e063      	b.n	800d2d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 0304 	and.w	r3, r3, #4
 800d212:	2b04      	cmp	r3, #4
 800d214:	d149      	bne.n	800d2aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d216:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d21a:	9300      	str	r3, [sp, #0]
 800d21c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d21e:	2200      	movs	r2, #0
 800d220:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 f857 	bl	800d2d8 <UART_WaitOnFlagUntilTimeout>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d03c      	beq.n	800d2aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d238:	e853 3f00 	ldrex	r3, [r3]
 800d23c:	623b      	str	r3, [r7, #32]
   return(result);
 800d23e:	6a3b      	ldr	r3, [r7, #32]
 800d240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	461a      	mov	r2, r3
 800d24c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d24e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d250:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d254:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d256:	e841 2300 	strex	r3, r2, [r1]
 800d25a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d25c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e6      	bne.n	800d230 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	3308      	adds	r3, #8
 800d268:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	e853 3f00 	ldrex	r3, [r3]
 800d270:	60fb      	str	r3, [r7, #12]
   return(result);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f023 0301 	bic.w	r3, r3, #1
 800d278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3308      	adds	r3, #8
 800d280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d282:	61fa      	str	r2, [r7, #28]
 800d284:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d286:	69b9      	ldr	r1, [r7, #24]
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	e841 2300 	strex	r3, r2, [r1]
 800d28e:	617b      	str	r3, [r7, #20]
   return(result);
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d1e5      	bne.n	800d262 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2220      	movs	r2, #32
 800d29a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	e012      	b.n	800d2d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3758      	adds	r7, #88	@ 0x58
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	603b      	str	r3, [r7, #0]
 800d2e4:	4613      	mov	r3, r2
 800d2e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d2e8:	e04f      	b.n	800d38a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f0:	d04b      	beq.n	800d38a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d2f2:	f7f8 fdf1 	bl	8005ed8 <HAL_GetTick>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	1ad3      	subs	r3, r2, r3
 800d2fc:	69ba      	ldr	r2, [r7, #24]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d302      	bcc.n	800d308 <UART_WaitOnFlagUntilTimeout+0x30>
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d308:	2303      	movs	r3, #3
 800d30a:	e04e      	b.n	800d3aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f003 0304 	and.w	r3, r3, #4
 800d316:	2b00      	cmp	r3, #0
 800d318:	d037      	beq.n	800d38a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2b80      	cmp	r3, #128	@ 0x80
 800d31e:	d034      	beq.n	800d38a <UART_WaitOnFlagUntilTimeout+0xb2>
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	2b40      	cmp	r3, #64	@ 0x40
 800d324:	d031      	beq.n	800d38a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	69db      	ldr	r3, [r3, #28]
 800d32c:	f003 0308 	and.w	r3, r3, #8
 800d330:	2b08      	cmp	r3, #8
 800d332:	d110      	bne.n	800d356 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	2208      	movs	r2, #8
 800d33a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 f99c 	bl	800d67a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2208      	movs	r2, #8
 800d346:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2200      	movs	r2, #0
 800d34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	e029      	b.n	800d3aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	69db      	ldr	r3, [r3, #28]
 800d35c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d360:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d364:	d111      	bne.n	800d38a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d36e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f000 f982 	bl	800d67a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2220      	movs	r2, #32
 800d37a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2200      	movs	r2, #0
 800d382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d386:	2303      	movs	r3, #3
 800d388:	e00f      	b.n	800d3aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	69da      	ldr	r2, [r3, #28]
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	4013      	ands	r3, r2
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	429a      	cmp	r2, r3
 800d398:	bf0c      	ite	eq
 800d39a:	2301      	moveq	r3, #1
 800d39c:	2300      	movne	r3, #0
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	79fb      	ldrb	r3, [r7, #7]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d0a0      	beq.n	800d2ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
	...

0800d3b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b0a3      	sub	sp, #140	@ 0x8c
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	88fa      	ldrh	r2, [r7, #6]
 800d3cc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	88fa      	ldrh	r2, [r7, #6]
 800d3d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	689b      	ldr	r3, [r3, #8]
 800d3e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3e6:	d10e      	bne.n	800d406 <UART_Start_Receive_IT+0x52>
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d105      	bne.n	800d3fc <UART_Start_Receive_IT+0x48>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d3f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d3fa:	e02d      	b.n	800d458 <UART_Start_Receive_IT+0xa4>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	22ff      	movs	r2, #255	@ 0xff
 800d400:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d404:	e028      	b.n	800d458 <UART_Start_Receive_IT+0xa4>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d10d      	bne.n	800d42a <UART_Start_Receive_IT+0x76>
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	691b      	ldr	r3, [r3, #16]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d104      	bne.n	800d420 <UART_Start_Receive_IT+0x6c>
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	22ff      	movs	r2, #255	@ 0xff
 800d41a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d41e:	e01b      	b.n	800d458 <UART_Start_Receive_IT+0xa4>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	227f      	movs	r2, #127	@ 0x7f
 800d424:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d428:	e016      	b.n	800d458 <UART_Start_Receive_IT+0xa4>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d432:	d10d      	bne.n	800d450 <UART_Start_Receive_IT+0x9c>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d104      	bne.n	800d446 <UART_Start_Receive_IT+0x92>
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	227f      	movs	r2, #127	@ 0x7f
 800d440:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d444:	e008      	b.n	800d458 <UART_Start_Receive_IT+0xa4>
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	223f      	movs	r2, #63	@ 0x3f
 800d44a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d44e:	e003      	b.n	800d458 <UART_Start_Receive_IT+0xa4>
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2200      	movs	r2, #0
 800d454:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2222      	movs	r2, #34	@ 0x22
 800d464:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	3308      	adds	r3, #8
 800d46e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d472:	e853 3f00 	ldrex	r3, [r3]
 800d476:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d47a:	f043 0301 	orr.w	r3, r3, #1
 800d47e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3308      	adds	r3, #8
 800d488:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d48c:	673a      	str	r2, [r7, #112]	@ 0x70
 800d48e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d490:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d492:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d494:	e841 2300 	strex	r3, r2, [r1]
 800d498:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d49a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1e3      	bne.n	800d468 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d4a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4a8:	d14f      	bne.n	800d54a <UART_Start_Receive_IT+0x196>
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d4b0:	88fa      	ldrh	r2, [r7, #6]
 800d4b2:	429a      	cmp	r2, r3
 800d4b4:	d349      	bcc.n	800d54a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	689b      	ldr	r3, [r3, #8]
 800d4ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4be:	d107      	bne.n	800d4d0 <UART_Start_Receive_IT+0x11c>
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	691b      	ldr	r3, [r3, #16]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d103      	bne.n	800d4d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	4a47      	ldr	r2, [pc, #284]	@ (800d5e8 <UART_Start_Receive_IT+0x234>)
 800d4cc:	675a      	str	r2, [r3, #116]	@ 0x74
 800d4ce:	e002      	b.n	800d4d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	4a46      	ldr	r2, [pc, #280]	@ (800d5ec <UART_Start_Receive_IT+0x238>)
 800d4d4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	691b      	ldr	r3, [r3, #16]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d01a      	beq.n	800d514 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e6:	e853 3f00 	ldrex	r3, [r3]
 800d4ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d4ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d4ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d4f2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d500:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d502:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d504:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d506:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d508:	e841 2300 	strex	r3, r2, [r1]
 800d50c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d50e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1e4      	bne.n	800d4de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3308      	adds	r3, #8
 800d51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d51e:	e853 3f00 	ldrex	r3, [r3]
 800d522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d526:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d52a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3308      	adds	r3, #8
 800d532:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d534:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d536:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d538:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d53a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d53c:	e841 2300 	strex	r3, r2, [r1]
 800d540:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d544:	2b00      	cmp	r3, #0
 800d546:	d1e5      	bne.n	800d514 <UART_Start_Receive_IT+0x160>
 800d548:	e046      	b.n	800d5d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	689b      	ldr	r3, [r3, #8]
 800d54e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d552:	d107      	bne.n	800d564 <UART_Start_Receive_IT+0x1b0>
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	691b      	ldr	r3, [r3, #16]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d103      	bne.n	800d564 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	4a24      	ldr	r2, [pc, #144]	@ (800d5f0 <UART_Start_Receive_IT+0x23c>)
 800d560:	675a      	str	r2, [r3, #116]	@ 0x74
 800d562:	e002      	b.n	800d56a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	4a23      	ldr	r2, [pc, #140]	@ (800d5f4 <UART_Start_Receive_IT+0x240>)
 800d568:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d019      	beq.n	800d5a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d57a:	e853 3f00 	ldrex	r3, [r3]
 800d57e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d582:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d586:	677b      	str	r3, [r7, #116]	@ 0x74
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	461a      	mov	r2, r3
 800d58e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d590:	637b      	str	r3, [r7, #52]	@ 0x34
 800d592:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d594:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d596:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d598:	e841 2300 	strex	r3, r2, [r1]
 800d59c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d1e6      	bne.n	800d572 <UART_Start_Receive_IT+0x1be>
 800d5a4:	e018      	b.n	800d5d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	e853 3f00 	ldrex	r3, [r3]
 800d5b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	f043 0320 	orr.w	r3, r3, #32
 800d5ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5c4:	623b      	str	r3, [r7, #32]
 800d5c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5c8:	69f9      	ldr	r1, [r7, #28]
 800d5ca:	6a3a      	ldr	r2, [r7, #32]
 800d5cc:	e841 2300 	strex	r3, r2, [r1]
 800d5d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1e6      	bne.n	800d5a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d5d8:	2300      	movs	r3, #0
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	378c      	adds	r7, #140	@ 0x8c
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e4:	4770      	bx	lr
 800d5e6:	bf00      	nop
 800d5e8:	0800dffd 	.word	0x0800dffd
 800d5ec:	0800dc8d 	.word	0x0800dc8d
 800d5f0:	0800dacd 	.word	0x0800dacd
 800d5f4:	0800d90d 	.word	0x0800d90d

0800d5f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b08f      	sub	sp, #60	@ 0x3c
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	e853 3f00 	ldrex	r3, [r3]
 800d60c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d60e:	69fb      	ldr	r3, [r7, #28]
 800d610:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d614:	637b      	str	r3, [r7, #52]	@ 0x34
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	461a      	mov	r2, r3
 800d61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d61e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d620:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d626:	e841 2300 	strex	r3, r2, [r1]
 800d62a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1e6      	bne.n	800d600 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3308      	adds	r3, #8
 800d638:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	e853 3f00 	ldrex	r3, [r3]
 800d640:	60bb      	str	r3, [r7, #8]
   return(result);
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d648:	633b      	str	r3, [r7, #48]	@ 0x30
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	3308      	adds	r3, #8
 800d650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d652:	61ba      	str	r2, [r7, #24]
 800d654:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d656:	6979      	ldr	r1, [r7, #20]
 800d658:	69ba      	ldr	r2, [r7, #24]
 800d65a:	e841 2300 	strex	r3, r2, [r1]
 800d65e:	613b      	str	r3, [r7, #16]
   return(result);
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1e5      	bne.n	800d632 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2220      	movs	r2, #32
 800d66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d66e:	bf00      	nop
 800d670:	373c      	adds	r7, #60	@ 0x3c
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d67a:	b480      	push	{r7}
 800d67c:	b095      	sub	sp, #84	@ 0x54
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68a:	e853 3f00 	ldrex	r3, [r3]
 800d68e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	461a      	mov	r2, r3
 800d69e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d6a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d6a8:	e841 2300 	strex	r3, r2, [r1]
 800d6ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1e6      	bne.n	800d682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	3308      	adds	r3, #8
 800d6ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	6a3b      	ldr	r3, [r7, #32]
 800d6be:	e853 3f00 	ldrex	r3, [r3]
 800d6c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6ca:	f023 0301 	bic.w	r3, r3, #1
 800d6ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d6da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6e0:	e841 2300 	strex	r3, r2, [r1]
 800d6e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1e3      	bne.n	800d6b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d118      	bne.n	800d726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	e853 3f00 	ldrex	r3, [r3]
 800d700:	60bb      	str	r3, [r7, #8]
   return(result);
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	f023 0310 	bic.w	r3, r3, #16
 800d708:	647b      	str	r3, [r7, #68]	@ 0x44
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	461a      	mov	r2, r3
 800d710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d712:	61bb      	str	r3, [r7, #24]
 800d714:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d716:	6979      	ldr	r1, [r7, #20]
 800d718:	69ba      	ldr	r2, [r7, #24]
 800d71a:	e841 2300 	strex	r3, r2, [r1]
 800d71e:	613b      	str	r3, [r7, #16]
   return(result);
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1e6      	bne.n	800d6f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2220      	movs	r2, #32
 800d72a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2200      	movs	r2, #0
 800d738:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d73a:	bf00      	nop
 800d73c:	3754      	adds	r7, #84	@ 0x54
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr

0800d746 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d746:	b580      	push	{r7, lr}
 800d748:	b090      	sub	sp, #64	@ 0x40
 800d74a:	af00      	add	r7, sp, #0
 800d74c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d752:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 0320 	and.w	r3, r3, #32
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d137      	bne.n	800d7d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d764:	2200      	movs	r2, #0
 800d766:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d76a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	3308      	adds	r3, #8
 800d770:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d774:	e853 3f00 	ldrex	r3, [r3]
 800d778:	623b      	str	r3, [r7, #32]
   return(result);
 800d77a:	6a3b      	ldr	r3, [r7, #32]
 800d77c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d780:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	3308      	adds	r3, #8
 800d788:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d78a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d78c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d78e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d790:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d792:	e841 2300 	strex	r3, r2, [r1]
 800d796:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d1e5      	bne.n	800d76a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d79e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	e853 3f00 	ldrex	r3, [r3]
 800d7aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7bc:	61fb      	str	r3, [r7, #28]
 800d7be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7c0:	69b9      	ldr	r1, [r7, #24]
 800d7c2:	69fa      	ldr	r2, [r7, #28]
 800d7c4:	e841 2300 	strex	r3, r2, [r1]
 800d7c8:	617b      	str	r3, [r7, #20]
   return(result);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1e6      	bne.n	800d79e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d7d0:	e004      	b.n	800d7dc <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800d7d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d7d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d7da:	4798      	blx	r3
}
 800d7dc:	bf00      	nop
 800d7de:	3740      	adds	r7, #64	@ 0x40
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7fc:	bf00      	nop
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d810:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d818:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d820:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	689b      	ldr	r3, [r3, #8]
 800d828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d82c:	2b80      	cmp	r3, #128	@ 0x80
 800d82e:	d109      	bne.n	800d844 <UART_DMAError+0x40>
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	2b21      	cmp	r3, #33	@ 0x21
 800d834:	d106      	bne.n	800d844 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	2200      	movs	r2, #0
 800d83a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d83e:	6978      	ldr	r0, [r7, #20]
 800d840:	f7ff feda 	bl	800d5f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d84e:	2b40      	cmp	r3, #64	@ 0x40
 800d850:	d109      	bne.n	800d866 <UART_DMAError+0x62>
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2b22      	cmp	r3, #34	@ 0x22
 800d856:	d106      	bne.n	800d866 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	2200      	movs	r2, #0
 800d85c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d860:	6978      	ldr	r0, [r7, #20]
 800d862:	f7ff ff0a 	bl	800d67a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d86c:	f043 0210 	orr.w	r2, r3, #16
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d87c:	6978      	ldr	r0, [r7, #20]
 800d87e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d880:	bf00      	nop
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d894:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d8a8:	bf00      	nop
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b088      	sub	sp, #32
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	e853 3f00 	ldrex	r3, [r3]
 800d8c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d8cc:	61fb      	str	r3, [r7, #28]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	69fb      	ldr	r3, [r7, #28]
 800d8d6:	61bb      	str	r3, [r7, #24]
 800d8d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8da:	6979      	ldr	r1, [r7, #20]
 800d8dc:	69ba      	ldr	r2, [r7, #24]
 800d8de:	e841 2300 	strex	r3, r2, [r1]
 800d8e2:	613b      	str	r3, [r7, #16]
   return(result);
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1e6      	bne.n	800d8b8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2220      	movs	r2, #32
 800d8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d902:	bf00      	nop
 800d904:	3720      	adds	r7, #32
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
	...

0800d90c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b09c      	sub	sp, #112	@ 0x70
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d91a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d924:	2b22      	cmp	r3, #34	@ 0x22
 800d926:	f040 80c2 	bne.w	800daae <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d930:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d934:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d938:	b2d9      	uxtb	r1, r3
 800d93a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d944:	400a      	ands	r2, r1
 800d946:	b2d2      	uxtb	r2, r2
 800d948:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	3b01      	subs	r3, #1
 800d95e:	b29a      	uxth	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d96c:	b29b      	uxth	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f040 80a5 	bne.w	800dabe <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d97a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d97c:	e853 3f00 	ldrex	r3, [r3]
 800d980:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d984:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	461a      	mov	r2, r3
 800d990:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d992:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d994:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d996:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d998:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d99a:	e841 2300 	strex	r3, r2, [r1]
 800d99e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d1e6      	bne.n	800d974 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	3308      	adds	r3, #8
 800d9ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b0:	e853 3f00 	ldrex	r3, [r3]
 800d9b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b8:	f023 0301 	bic.w	r3, r3, #1
 800d9bc:	667b      	str	r3, [r7, #100]	@ 0x64
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d9c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d9c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9ce:	e841 2300 	strex	r3, r2, [r1]
 800d9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1e5      	bne.n	800d9a6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2220      	movs	r2, #32
 800d9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4a35      	ldr	r2, [pc, #212]	@ (800dac8 <UART_RxISR_8BIT+0x1bc>)
 800d9f4:	4293      	cmp	r3, r2
 800d9f6:	d01f      	beq.n	800da38 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800da02:	2b00      	cmp	r3, #0
 800da04:	d018      	beq.n	800da38 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da0e:	e853 3f00 	ldrex	r3, [r3]
 800da12:	623b      	str	r3, [r7, #32]
   return(result);
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800da1a:	663b      	str	r3, [r7, #96]	@ 0x60
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	461a      	mov	r2, r3
 800da22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da24:	633b      	str	r3, [r7, #48]	@ 0x30
 800da26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da2c:	e841 2300 	strex	r3, r2, [r1]
 800da30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1e6      	bne.n	800da06 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d130      	bne.n	800daa2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	e853 3f00 	ldrex	r3, [r3]
 800da52:	60fb      	str	r3, [r7, #12]
   return(result);
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	f023 0310 	bic.w	r3, r3, #16
 800da5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	461a      	mov	r2, r3
 800da62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da64:	61fb      	str	r3, [r7, #28]
 800da66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da68:	69b9      	ldr	r1, [r7, #24]
 800da6a:	69fa      	ldr	r2, [r7, #28]
 800da6c:	e841 2300 	strex	r3, r2, [r1]
 800da70:	617b      	str	r3, [r7, #20]
   return(result);
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1e6      	bne.n	800da46 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	69db      	ldr	r3, [r3, #28]
 800da7e:	f003 0310 	and.w	r3, r3, #16
 800da82:	2b10      	cmp	r3, #16
 800da84:	d103      	bne.n	800da8e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	2210      	movs	r2, #16
 800da8c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800da9a:	4611      	mov	r1, r2
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800daa0:	e00d      	b.n	800dabe <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	4798      	blx	r3
}
 800daac:	e007      	b.n	800dabe <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	699a      	ldr	r2, [r3, #24]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f042 0208 	orr.w	r2, r2, #8
 800dabc:	619a      	str	r2, [r3, #24]
}
 800dabe:	bf00      	nop
 800dac0:	3770      	adds	r7, #112	@ 0x70
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	40008000 	.word	0x40008000

0800dacc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b09c      	sub	sp, #112	@ 0x70
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dada:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dae4:	2b22      	cmp	r3, #34	@ 0x22
 800dae6:	f040 80c2 	bne.w	800dc6e <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daf0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800daf8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800dafa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800dafe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800db02:	4013      	ands	r3, r2
 800db04:	b29a      	uxth	r2, r3
 800db06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db0e:	1c9a      	adds	r2, r3, #2
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	3b01      	subs	r3, #1
 800db1e:	b29a      	uxth	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f040 80a5 	bne.w	800dc7e <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db3c:	e853 3f00 	ldrex	r3, [r3]
 800db40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800db42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db48:	667b      	str	r3, [r7, #100]	@ 0x64
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	461a      	mov	r2, r3
 800db50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db52:	657b      	str	r3, [r7, #84]	@ 0x54
 800db54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db5a:	e841 2300 	strex	r3, r2, [r1]
 800db5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1e6      	bne.n	800db34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	3308      	adds	r3, #8
 800db6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db70:	e853 3f00 	ldrex	r3, [r3]
 800db74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800db76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db78:	f023 0301 	bic.w	r3, r3, #1
 800db7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3308      	adds	r3, #8
 800db84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800db86:	643a      	str	r2, [r7, #64]	@ 0x40
 800db88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db8e:	e841 2300 	strex	r3, r2, [r1]
 800db92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db96:	2b00      	cmp	r3, #0
 800db98:	d1e5      	bne.n	800db66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2220      	movs	r2, #32
 800db9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a35      	ldr	r2, [pc, #212]	@ (800dc88 <UART_RxISR_16BIT+0x1bc>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d01f      	beq.n	800dbf8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d018      	beq.n	800dbf8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	e853 3f00 	ldrex	r3, [r3]
 800dbd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbd4:	69fb      	ldr	r3, [r7, #28]
 800dbd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dbda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	461a      	mov	r2, r3
 800dbe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dbe6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dbea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbec:	e841 2300 	strex	r3, r2, [r1]
 800dbf0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1e6      	bne.n	800dbc6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d130      	bne.n	800dc62 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2200      	movs	r2, #0
 800dc04:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	e853 3f00 	ldrex	r3, [r3]
 800dc12:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f023 0310 	bic.w	r3, r3, #16
 800dc1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	461a      	mov	r2, r3
 800dc22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800dc24:	61bb      	str	r3, [r7, #24]
 800dc26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc28:	6979      	ldr	r1, [r7, #20]
 800dc2a:	69ba      	ldr	r2, [r7, #24]
 800dc2c:	e841 2300 	strex	r3, r2, [r1]
 800dc30:	613b      	str	r3, [r7, #16]
   return(result);
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d1e6      	bne.n	800dc06 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	69db      	ldr	r3, [r3, #28]
 800dc3e:	f003 0310 	and.w	r3, r3, #16
 800dc42:	2b10      	cmp	r3, #16
 800dc44:	d103      	bne.n	800dc4e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2210      	movs	r2, #16
 800dc4c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800dc5a:	4611      	mov	r1, r2
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc60:	e00d      	b.n	800dc7e <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	4798      	blx	r3
}
 800dc6c:	e007      	b.n	800dc7e <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	699a      	ldr	r2, [r3, #24]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f042 0208 	orr.w	r2, r2, #8
 800dc7c:	619a      	str	r2, [r3, #24]
}
 800dc7e:	bf00      	nop
 800dc80:	3770      	adds	r7, #112	@ 0x70
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	40008000 	.word	0x40008000

0800dc8c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b0ac      	sub	sp, #176	@ 0xb0
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc9a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	69db      	ldr	r3, [r3, #28]
 800dca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dcc2:	2b22      	cmp	r3, #34	@ 0x22
 800dcc4:	f040 8189 	bne.w	800dfda <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dcce:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dcd2:	e12c      	b.n	800df2e <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcda:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dcde:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800dce2:	b2d9      	uxtb	r1, r3
 800dce4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800dce8:	b2da      	uxtb	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcee:	400a      	ands	r2, r1
 800dcf0:	b2d2      	uxtb	r2, r2
 800dcf2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcf8:	1c5a      	adds	r2, r3, #1
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	3b01      	subs	r3, #1
 800dd08:	b29a      	uxth	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	69db      	ldr	r3, [r3, #28]
 800dd16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dd1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd1e:	f003 0307 	and.w	r3, r3, #7
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d055      	beq.n	800ddd2 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd2a:	f003 0301 	and.w	r3, r3, #1
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d011      	beq.n	800dd56 <UART_RxISR_8BIT_FIFOEN+0xca>
 800dd32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dd36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00b      	beq.n	800dd56 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	2201      	movs	r2, #1
 800dd44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd4c:	f043 0201 	orr.w	r2, r3, #1
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd5a:	f003 0302 	and.w	r3, r3, #2
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d011      	beq.n	800dd86 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800dd62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd66:	f003 0301 	and.w	r3, r3, #1
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00b      	beq.n	800dd86 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2202      	movs	r2, #2
 800dd74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd7c:	f043 0204 	orr.w	r2, r3, #4
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dd8a:	f003 0304 	and.w	r3, r3, #4
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d011      	beq.n	800ddb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800dd92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d00b      	beq.n	800ddb6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	2204      	movs	r2, #4
 800dda4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddac:	f043 0202 	orr.w	r2, r3, #2
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d008      	beq.n	800ddd2 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ddc6:	6878      	ldr	r0, [r7, #4]
 800ddc8:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ddd8:	b29b      	uxth	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f040 80a7 	bne.w	800df2e <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dde8:	e853 3f00 	ldrex	r3, [r3]
 800ddec:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800ddee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ddf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddf4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800de04:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de06:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800de08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800de0a:	e841 2300 	strex	r3, r2, [r1]
 800de0e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800de10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e4      	bne.n	800dde0 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3308      	adds	r3, #8
 800de1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de20:	e853 3f00 	ldrex	r3, [r3]
 800de24:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800de26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de2c:	f023 0301 	bic.w	r3, r3, #1
 800de30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	3308      	adds	r3, #8
 800de3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800de3e:	66ba      	str	r2, [r7, #104]	@ 0x68
 800de40:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de42:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800de44:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800de46:	e841 2300 	strex	r3, r2, [r1]
 800de4a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800de4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d1e1      	bne.n	800de16 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2220      	movs	r2, #32
 800de56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a62      	ldr	r2, [pc, #392]	@ (800dff4 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d021      	beq.n	800deb4 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685b      	ldr	r3, [r3, #4]
 800de76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d01a      	beq.n	800deb4 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de86:	e853 3f00 	ldrex	r3, [r3]
 800de8a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800de8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	461a      	mov	r2, r3
 800de9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dea0:	657b      	str	r3, [r7, #84]	@ 0x54
 800dea2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dea6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dea8:	e841 2300 	strex	r3, r2, [r1]
 800deac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800deae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1e4      	bne.n	800de7e <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d132      	bne.n	800df22 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deca:	e853 3f00 	ldrex	r3, [r3]
 800dece:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ded0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded2:	f023 0310 	bic.w	r3, r3, #16
 800ded6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	461a      	mov	r2, r3
 800dee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dee4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dee6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800deea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800deec:	e841 2300 	strex	r3, r2, [r1]
 800def0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800def2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def4:	2b00      	cmp	r3, #0
 800def6:	d1e4      	bne.n	800dec2 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	f003 0310 	and.w	r3, r3, #16
 800df02:	2b10      	cmp	r3, #16
 800df04:	d103      	bne.n	800df0e <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2210      	movs	r2, #16
 800df0c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800df1a:	4611      	mov	r1, r2
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800df20:	e010      	b.n	800df44 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	4798      	blx	r3
        break;
 800df2c:	e00a      	b.n	800df44 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800df2e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800df32:	2b00      	cmp	r3, #0
 800df34:	d006      	beq.n	800df44 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800df36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df3a:	f003 0320 	and.w	r3, r3, #32
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f47f aec8 	bne.w	800dcd4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800df4a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800df4e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800df52:	2b00      	cmp	r3, #0
 800df54:	d049      	beq.n	800dfea <UART_RxISR_8BIT_FIFOEN+0x35e>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800df5c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800df60:	429a      	cmp	r2, r3
 800df62:	d242      	bcs.n	800dfea <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	3308      	adds	r3, #8
 800df6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df6c:	6a3b      	ldr	r3, [r7, #32]
 800df6e:	e853 3f00 	ldrex	r3, [r3]
 800df72:	61fb      	str	r3, [r7, #28]
   return(result);
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800df7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	3308      	adds	r3, #8
 800df84:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800df88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800df8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df90:	e841 2300 	strex	r3, r2, [r1]
 800df94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e3      	bne.n	800df64 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	4a16      	ldr	r2, [pc, #88]	@ (800dff8 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800dfa0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	e853 3f00 	ldrex	r3, [r3]
 800dfae:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	f043 0320 	orr.w	r3, r3, #32
 800dfb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dfc4:	61bb      	str	r3, [r7, #24]
 800dfc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc8:	6979      	ldr	r1, [r7, #20]
 800dfca:	69ba      	ldr	r2, [r7, #24]
 800dfcc:	e841 2300 	strex	r3, r2, [r1]
 800dfd0:	613b      	str	r3, [r7, #16]
   return(result);
 800dfd2:	693b      	ldr	r3, [r7, #16]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d1e4      	bne.n	800dfa2 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfd8:	e007      	b.n	800dfea <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	699a      	ldr	r2, [r3, #24]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f042 0208 	orr.w	r2, r2, #8
 800dfe8:	619a      	str	r2, [r3, #24]
}
 800dfea:	bf00      	nop
 800dfec:	37b0      	adds	r7, #176	@ 0xb0
 800dfee:	46bd      	mov	sp, r7
 800dff0:	bd80      	pop	{r7, pc}
 800dff2:	bf00      	nop
 800dff4:	40008000 	.word	0x40008000
 800dff8:	0800d90d 	.word	0x0800d90d

0800dffc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b0ae      	sub	sp, #184	@ 0xb8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e00a:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	69db      	ldr	r3, [r3, #28]
 800e014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	689b      	ldr	r3, [r3, #8]
 800e028:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e032:	2b22      	cmp	r3, #34	@ 0x22
 800e034:	f040 818d 	bne.w	800e352 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e03e:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e042:	e130      	b.n	800e2a6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e04a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e052:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e056:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e05a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e05e:	4013      	ands	r3, r2
 800e060:	b29a      	uxth	r2, r3
 800e062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e06c:	1c9a      	adds	r2, r3, #2
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e078:	b29b      	uxth	r3, r3
 800e07a:	3b01      	subs	r3, #1
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	69db      	ldr	r3, [r3, #28]
 800e08a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e08e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e092:	f003 0307 	and.w	r3, r3, #7
 800e096:	2b00      	cmp	r3, #0
 800e098:	d055      	beq.n	800e146 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e09a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e09e:	f003 0301 	and.w	r3, r3, #1
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d011      	beq.n	800e0ca <UART_RxISR_16BIT_FIFOEN+0xce>
 800e0a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00b      	beq.n	800e0ca <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0c0:	f043 0201 	orr.w	r2, r3, #1
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e0ce:	f003 0302 	and.w	r3, r3, #2
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d011      	beq.n	800e0fa <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e0d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0da:	f003 0301 	and.w	r3, r3, #1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d00b      	beq.n	800e0fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2202      	movs	r2, #2
 800e0e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0f0:	f043 0204 	orr.w	r2, r3, #4
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e0fe:	f003 0304 	and.w	r3, r3, #4
 800e102:	2b00      	cmp	r3, #0
 800e104:	d011      	beq.n	800e12a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e106:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d00b      	beq.n	800e12a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2204      	movs	r2, #4
 800e118:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e120:	f043 0202 	orr.w	r2, r3, #2
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e130:	2b00      	cmp	r3, #0
 800e132:	d008      	beq.n	800e146 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2200      	movs	r2, #0
 800e142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	f040 80a9 	bne.w	800e2a6 <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e15a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e15c:	e853 3f00 	ldrex	r3, [r3]
 800e160:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e162:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	461a      	mov	r2, r3
 800e172:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e176:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e17a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e17e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e182:	e841 2300 	strex	r3, r2, [r1]
 800e186:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e188:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1e2      	bne.n	800e154 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	3308      	adds	r3, #8
 800e194:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e198:	e853 3f00 	ldrex	r3, [r3]
 800e19c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e19e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e1a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e1a4:	f023 0301 	bic.w	r3, r3, #1
 800e1a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	3308      	adds	r3, #8
 800e1b2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e1b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e1b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e1bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e1be:	e841 2300 	strex	r3, r2, [r1]
 800e1c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e1c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d1e1      	bne.n	800e18e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2220      	movs	r2, #32
 800e1ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	4a62      	ldr	r2, [pc, #392]	@ (800e36c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e1e4:	4293      	cmp	r3, r2
 800e1e6:	d021      	beq.n	800e22c <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d01a      	beq.n	800e22c <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1fe:	e853 3f00 	ldrex	r3, [r3]
 800e202:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e204:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e206:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e20a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	461a      	mov	r2, r3
 800e214:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e218:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e21a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e21e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e220:	e841 2300 	strex	r3, r2, [r1]
 800e224:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d1e4      	bne.n	800e1f6 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e230:	2b01      	cmp	r3, #1
 800e232:	d132      	bne.n	800e29a <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2200      	movs	r2, #0
 800e238:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e242:	e853 3f00 	ldrex	r3, [r3]
 800e246:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e24a:	f023 0310 	bic.w	r3, r3, #16
 800e24e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	461a      	mov	r2, r3
 800e258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e25c:	647b      	str	r3, [r7, #68]	@ 0x44
 800e25e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e264:	e841 2300 	strex	r3, r2, [r1]
 800e268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e26a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e4      	bne.n	800e23a <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	69db      	ldr	r3, [r3, #28]
 800e276:	f003 0310 	and.w	r3, r3, #16
 800e27a:	2b10      	cmp	r3, #16
 800e27c:	d103      	bne.n	800e286 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	2210      	movs	r2, #16
 800e284:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e292:	4611      	mov	r1, r2
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e298:	e010      	b.n	800e2bc <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	4798      	blx	r3
        break;
 800e2a4:	e00a      	b.n	800e2bc <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e2a6:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d006      	beq.n	800e2bc <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800e2ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e2b2:	f003 0320 	and.w	r3, r3, #32
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	f47f aec4 	bne.w	800e044 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2c2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e2c6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d049      	beq.n	800e362 <UART_RxISR_16BIT_FIFOEN+0x366>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e2d4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d242      	bcs.n	800e362 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	3308      	adds	r3, #8
 800e2e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2e6:	e853 3f00 	ldrex	r3, [r3]
 800e2ea:	623b      	str	r3, [r7, #32]
   return(result);
 800e2ec:	6a3b      	ldr	r3, [r7, #32]
 800e2ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3308      	adds	r3, #8
 800e2fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e300:	633a      	str	r2, [r7, #48]	@ 0x30
 800e302:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e304:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e308:	e841 2300 	strex	r3, r2, [r1]
 800e30c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1e3      	bne.n	800e2dc <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4a16      	ldr	r2, [pc, #88]	@ (800e370 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e318:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	e853 3f00 	ldrex	r3, [r3]
 800e326:	60fb      	str	r3, [r7, #12]
   return(result);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f043 0320 	orr.w	r3, r3, #32
 800e32e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	461a      	mov	r2, r3
 800e338:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e33c:	61fb      	str	r3, [r7, #28]
 800e33e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e340:	69b9      	ldr	r1, [r7, #24]
 800e342:	69fa      	ldr	r2, [r7, #28]
 800e344:	e841 2300 	strex	r3, r2, [r1]
 800e348:	617b      	str	r3, [r7, #20]
   return(result);
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d1e4      	bne.n	800e31a <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e350:	e007      	b.n	800e362 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	699a      	ldr	r2, [r3, #24]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f042 0208 	orr.w	r2, r2, #8
 800e360:	619a      	str	r2, [r3, #24]
}
 800e362:	bf00      	nop
 800e364:	37b8      	adds	r7, #184	@ 0xb8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	40008000 	.word	0x40008000
 800e370:	0800dacd 	.word	0x0800dacd

0800e374 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e37c:	bf00      	nop
 800e37e:	370c      	adds	r7, #12
 800e380:	46bd      	mov	sp, r7
 800e382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e386:	4770      	bx	lr

0800e388 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e388:	b480      	push	{r7}
 800e38a:	b083      	sub	sp, #12
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e390:	bf00      	nop
 800e392:	370c      	adds	r7, #12
 800e394:	46bd      	mov	sp, r7
 800e396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39a:	4770      	bx	lr

0800e39c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e3a4:	bf00      	nop
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e3be:	2b01      	cmp	r3, #1
 800e3c0:	d101      	bne.n	800e3c6 <HAL_UARTEx_DisableFifoMode+0x16>
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	e027      	b.n	800e416 <HAL_UARTEx_DisableFifoMode+0x66>
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2201      	movs	r2, #1
 800e3ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2224      	movs	r2, #36	@ 0x24
 800e3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f022 0201 	bic.w	r2, r2, #1
 800e3ec:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e3f4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2220      	movs	r2, #32
 800e408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3714      	adds	r7, #20
 800e41a:	46bd      	mov	sp, r7
 800e41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e420:	4770      	bx	lr

0800e422 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e422:	b580      	push	{r7, lr}
 800e424:	b084      	sub	sp, #16
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e432:	2b01      	cmp	r3, #1
 800e434:	d101      	bne.n	800e43a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e436:	2302      	movs	r3, #2
 800e438:	e02d      	b.n	800e496 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2224      	movs	r2, #36	@ 0x24
 800e446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f022 0201 	bic.w	r2, r2, #1
 800e460:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	683a      	ldr	r2, [r7, #0]
 800e472:	430a      	orrs	r2, r1
 800e474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f850 	bl	800e51c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2220      	movs	r2, #32
 800e488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e494:	2300      	movs	r3, #0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b084      	sub	sp, #16
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
 800e4a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d101      	bne.n	800e4b6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e4b2:	2302      	movs	r3, #2
 800e4b4:	e02d      	b.n	800e512 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2224      	movs	r2, #36	@ 0x24
 800e4c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f022 0201 	bic.w	r2, r2, #1
 800e4dc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	430a      	orrs	r2, r1
 800e4f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f812 	bl	800e51c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	68fa      	ldr	r2, [r7, #12]
 800e4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2220      	movs	r2, #32
 800e504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
	...

0800e51c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d108      	bne.n	800e53e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2201      	movs	r2, #1
 800e530:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e53c:	e031      	b.n	800e5a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e53e:	2308      	movs	r3, #8
 800e540:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e542:	2308      	movs	r3, #8
 800e544:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	0e5b      	lsrs	r3, r3, #25
 800e54e:	b2db      	uxtb	r3, r3
 800e550:	f003 0307 	and.w	r3, r3, #7
 800e554:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	689b      	ldr	r3, [r3, #8]
 800e55c:	0f5b      	lsrs	r3, r3, #29
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	f003 0307 	and.w	r3, r3, #7
 800e564:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e566:	7bbb      	ldrb	r3, [r7, #14]
 800e568:	7b3a      	ldrb	r2, [r7, #12]
 800e56a:	4911      	ldr	r1, [pc, #68]	@ (800e5b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e56c:	5c8a      	ldrb	r2, [r1, r2]
 800e56e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e572:	7b3a      	ldrb	r2, [r7, #12]
 800e574:	490f      	ldr	r1, [pc, #60]	@ (800e5b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e576:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e578:	fb93 f3f2 	sdiv	r3, r3, r2
 800e57c:	b29a      	uxth	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e584:	7bfb      	ldrb	r3, [r7, #15]
 800e586:	7b7a      	ldrb	r2, [r7, #13]
 800e588:	4909      	ldr	r1, [pc, #36]	@ (800e5b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e58a:	5c8a      	ldrb	r2, [r1, r2]
 800e58c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e590:	7b7a      	ldrb	r2, [r7, #13]
 800e592:	4908      	ldr	r1, [pc, #32]	@ (800e5b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e594:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e596:	fb93 f3f2 	sdiv	r3, r3, r2
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e5a2:	bf00      	nop
 800e5a4:	3714      	adds	r7, #20
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	08010cb8 	.word	0x08010cb8
 800e5b4:	08010cc0 	.word	0x08010cc0

0800e5b8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
 800e5c0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	ed93 7a06 	vldr	s14, [r3, #24]
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	edd3 7a07 	vldr	s15, [r3, #28]
 800e5ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	edd3 7a08 	vldr	s15, [r3, #32]
 800e5d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	edd3 7a06 	vldr	s15, [r3, #24]
 800e5e8:	eeb1 7a67 	vneg.f32	s14, s15
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	edd3 7a08 	vldr	s15, [r3, #32]
 800e5f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e5f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6a1a      	ldr	r2, [r3, #32]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d006      	beq.n	800e61c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	330c      	adds	r3, #12
 800e612:	220c      	movs	r2, #12
 800e614:	2100      	movs	r1, #0
 800e616:	4618      	mov	r0, r3
 800e618:	f000 fcc4 	bl	800efa4 <memset>
  }

}
 800e61c:	bf00      	nop
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e624:	b480      	push	{r7}
 800e626:	b08b      	sub	sp, #44	@ 0x2c
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	885b      	ldrh	r3, [r3, #2]
 800e64c:	fb02 f303 	mul.w	r3, r2, r3
 800e650:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e656:	e013      	b.n	800e680 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800e658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e65a:	1d1a      	adds	r2, r3, #4
 800e65c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e65e:	ed93 7a00 	vldr	s14, [r3]
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	1d1a      	adds	r2, r3, #4
 800e666:	623a      	str	r2, [r7, #32]
 800e668:	edd3 7a00 	vldr	s15, [r3]
 800e66c:	69fb      	ldr	r3, [r7, #28]
 800e66e:	1d1a      	adds	r2, r3, #4
 800e670:	61fa      	str	r2, [r7, #28]
 800e672:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e676:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	3b01      	subs	r3, #1
 800e67e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d1e8      	bne.n	800e658 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e686:	2300      	movs	r3, #0
 800e688:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800e68a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	372c      	adds	r7, #44	@ 0x2c
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr

0800e69a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800e69a:	b480      	push	{r7}
 800e69c:	b085      	sub	sp, #20
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	607b      	str	r3, [r7, #4]
 800e6a4:	460b      	mov	r3, r1
 800e6a6:	817b      	strh	r3, [r7, #10]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	897a      	ldrh	r2, [r7, #10]
 800e6b0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	893a      	ldrh	r2, [r7, #8]
 800e6b6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	605a      	str	r2, [r3, #4]
}
 800e6be:	bf00      	nop
 800e6c0:	3714      	adds	r7, #20
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c8:	4770      	bx	lr

0800e6ca <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800e6ca:	b480      	push	{r7}
 800e6cc:	b0bb      	sub	sp, #236	@ 0xec
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e6da:	683b      	ldr	r3, [r7, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	881b      	ldrh	r3, [r3, #0]
 800e6e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	885b      	ldrh	r3, [r3, #2]
 800e6ea:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800e6ec:	f04f 0300 	mov.w	r3, #0
 800e6f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e6f4:	f04f 0300 	mov.w	r3, #0
 800e6f8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800e700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800e706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800e70c:	e03b      	b.n	800e786 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800e70e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e710:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e714:	1ad3      	subs	r3, r2, r3
 800e716:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800e71a:	e00c      	b.n	800e736 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800e71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e720:	1d1a      	adds	r2, r3, #4
 800e722:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800e726:	f04f 0200 	mov.w	r2, #0
 800e72a:	601a      	str	r2, [r3, #0]
        j--;
 800e72c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e730:	3b01      	subs	r3, #1
 800e732:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800e736:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1ee      	bne.n	800e71c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800e73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e742:	1d1a      	adds	r2, r3, #4
 800e744:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800e748:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e74c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800e74e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e752:	3b01      	subs	r3, #1
 800e754:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800e758:	e00c      	b.n	800e774 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800e75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e75e:	1d1a      	adds	r2, r3, #4
 800e760:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800e764:	f04f 0200 	mov.w	r2, #0
 800e768:	601a      	str	r2, [r3, #0]
        j--;
 800e76a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e76e:	3b01      	subs	r3, #1
 800e770:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800e774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1ee      	bne.n	800e75a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800e77c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e780:	3b01      	subs	r3, #1
 800e782:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800e786:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1bf      	bne.n	800e70e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800e78e:	2300      	movs	r3, #0
 800e790:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e794:	e2c7      	b.n	800ed26 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800e796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e79a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	885b      	ldrh	r3, [r3, #2]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800e7aa:	fb01 f303 	mul.w	r3, r1, r3
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800e7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800e7c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e7c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800e7c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e7d2:	e02c      	b.n	800e82e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	685a      	ldr	r2, [r3, #4]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	885b      	ldrh	r3, [r3, #2]
 800e7dc:	4619      	mov	r1, r3
 800e7de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7e2:	fb03 f101 	mul.w	r1, r3, r1
 800e7e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e7ea:	440b      	add	r3, r1
 800e7ec:	009b      	lsls	r3, r3, #2
 800e7ee:	4413      	add	r3, r2
 800e7f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800e7f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800e7fc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800e800:	eeb0 7ae7 	vabs.f32	s14, s15
 800e804:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e808:	eef0 7ae7 	vabs.f32	s15, s15
 800e80c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e814:	dd06      	ble.n	800e824 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800e816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e81a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800e81e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800e824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e828:	3301      	adds	r3, #1
 800e82a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e82e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e834:	429a      	cmp	r2, r3
 800e836:	d3cd      	bcc.n	800e7d4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800e838:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e83c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e844:	f000 809b 	beq.w	800e97e <arm_mat_inverse_f32+0x2b4>
 800e848:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e84c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e850:	429a      	cmp	r2, r3
 800e852:	f000 8094 	beq.w	800e97e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	885b      	ldrh	r3, [r3, #2]
 800e86a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e86c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e86e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e872:	1ad3      	subs	r3, r2, r3
 800e874:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e876:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e878:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e87a:	fb03 f202 	mul.w	r2, r3, r2
 800e87e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e882:	4413      	add	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e88a:	4413      	add	r3, r2
 800e88c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e892:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e896:	fb03 f202 	mul.w	r2, r3, r2
 800e89a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e89e:	4413      	add	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e8a6:	4413      	add	r3, r2
 800e8a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e8b2:	e018      	b.n	800e8e6 <arm_mat_inverse_f32+0x21c>
 800e8b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e8c0:	1d1a      	adds	r2, r3, #4
 800e8c2:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800e8c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e8ca:	6812      	ldr	r2, [r2, #0]
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e8d2:	1d1a      	adds	r2, r3, #4
 800e8d4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800e8d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8da:	601a      	str	r2, [r3, #0]
 800e8dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e8e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800e8ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	dbe1      	blt.n	800e8b4 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	885b      	ldrh	r3, [r3, #2]
 800e904:	647b      	str	r3, [r7, #68]	@ 0x44
 800e906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e908:	643b      	str	r3, [r7, #64]	@ 0x40
 800e90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e90c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e90e:	fb02 f303 	mul.w	r3, r2, r3
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e918:	4413      	add	r3, r2
 800e91a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e91e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e920:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e924:	fb02 f303 	mul.w	r3, r2, r3
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e92e:	4413      	add	r3, r2
 800e930:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e934:	2300      	movs	r3, #0
 800e936:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e93a:	e018      	b.n	800e96e <arm_mat_inverse_f32+0x2a4>
 800e93c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e948:	1d1a      	adds	r2, r3, #4
 800e94a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e94e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e952:	6812      	ldr	r2, [r2, #0]
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e95a:	1d1a      	adds	r2, r3, #4
 800e95c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e960:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e962:	601a      	str	r2, [r3, #0]
 800e964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e968:	3301      	adds	r3, #1
 800e96a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e96e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e974:	429a      	cmp	r2, r3
 800e976:	dbe1      	blt.n	800e93c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800e978:	2301      	movs	r3, #1
 800e97a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800e97e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e982:	2b01      	cmp	r3, #1
 800e984:	d009      	beq.n	800e99a <arm_mat_inverse_f32+0x2d0>
 800e986:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e98a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e992:	d102      	bne.n	800e99a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800e994:	f06f 0304 	mvn.w	r3, #4
 800e998:	e208      	b.n	800edac <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800e99a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e99e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800e9a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e9a6:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	685b      	ldr	r3, [r3, #4]
 800e9ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	885b      	ldrh	r3, [r3, #2]
 800e9b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e9ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e9c6:	fb03 f202 	mul.w	r2, r3, r2
 800e9ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e9ce:	4413      	add	r3, r2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800e9d6:	4413      	add	r3, r2
 800e9d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e9e2:	e011      	b.n	800ea08 <arm_mat_inverse_f32+0x33e>
 800e9e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e9e8:	1d1a      	adds	r2, r3, #4
 800e9ea:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800e9ee:	ed93 7a00 	vldr	s14, [r3]
 800e9f2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9fa:	edc3 7a00 	vstr	s15, [r3]
 800e9fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ea02:	3301      	adds	r3, #1
 800ea04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ea08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ea0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	dbe8      	blt.n	800e9e4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	885b      	ldrh	r3, [r3, #2]
 800ea1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ea28:	fb02 f303 	mul.w	r3, r2, r3
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ea32:	4413      	add	r3, r2
 800ea34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ea38:	2300      	movs	r3, #0
 800ea3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ea3e:	e011      	b.n	800ea64 <arm_mat_inverse_f32+0x39a>
 800ea40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ea44:	1d1a      	adds	r2, r3, #4
 800ea46:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800ea4a:	ed93 7a00 	vldr	s14, [r3]
 800ea4e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ea52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea56:	edc3 7a00 	vstr	s15, [r3]
 800ea5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ea5e:	3301      	adds	r3, #1
 800ea60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ea64:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800ea68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	dbe8      	blt.n	800ea40 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800ea74:	e0ae      	b.n	800ebd4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	685a      	ldr	r2, [r3, #4]
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	885b      	ldrh	r3, [r3, #2]
 800ea7e:	4619      	mov	r1, r3
 800ea80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ea84:	fb03 f101 	mul.w	r1, r3, r1
 800ea88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ea8c:	440b      	add	r3, r1
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	4413      	add	r3, r2
 800ea92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ea96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	885b      	ldrh	r3, [r3, #2]
 800eab4:	617b      	str	r3, [r7, #20]
 800eab6:	697a      	ldr	r2, [r7, #20]
 800eab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	613b      	str	r3, [r7, #16]
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eac6:	fb03 f202 	mul.w	r2, r3, r2
 800eaca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eace:	4413      	add	r3, r2
 800ead0:	009b      	lsls	r3, r3, #2
 800ead2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ead6:	4413      	add	r3, r2
 800ead8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eae0:	fb03 f202 	mul.w	r2, r3, r2
 800eae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eae8:	4413      	add	r3, r2
 800eaea:	009b      	lsls	r3, r3, #2
 800eaec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800eaf0:	4413      	add	r3, r2
 800eaf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eafc:	e01a      	b.n	800eb34 <arm_mat_inverse_f32+0x46a>
 800eafe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eb02:	1d1a      	adds	r2, r3, #4
 800eb04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800eb08:	ed93 7a00 	vldr	s14, [r3]
 800eb0c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eb10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eb14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800eb18:	1d1a      	adds	r2, r3, #4
 800eb1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800eb1e:	ed93 7a00 	vldr	s14, [r3]
 800eb22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb26:	edc3 7a00 	vstr	s15, [r3]
 800eb2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800eb2e:	3301      	adds	r3, #1
 800eb30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800eb34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	dbdf      	blt.n	800eafe <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	885b      	ldrh	r3, [r3, #2]
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	60bb      	str	r3, [r7, #8]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eb5e:	fb02 f303 	mul.w	r3, r2, r3
 800eb62:	009b      	lsls	r3, r3, #2
 800eb64:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eb68:	4413      	add	r3, r2
 800eb6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eb72:	fb02 f303 	mul.w	r3, r2, r3
 800eb76:	009b      	lsls	r3, r3, #2
 800eb78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eb7c:	4413      	add	r3, r2
 800eb7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eb82:	2300      	movs	r3, #0
 800eb84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eb88:	e01a      	b.n	800ebc0 <arm_mat_inverse_f32+0x4f6>
 800eb8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eb8e:	1d1a      	adds	r2, r3, #4
 800eb90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800eb94:	ed93 7a00 	vldr	s14, [r3]
 800eb98:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eb9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eba4:	1d1a      	adds	r2, r3, #4
 800eba6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ebaa:	ed93 7a00 	vldr	s14, [r3]
 800ebae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebb2:	edc3 7a00 	vstr	s15, [r3]
 800ebb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ebba:	3301      	adds	r3, #1
 800ebbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ebc0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	dbdf      	blt.n	800eb8a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ebca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebce:	3301      	adds	r3, #1
 800ebd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ebd4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ebd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	f4ff af4b 	bcc.w	800ea76 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ebe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ebe8:	e092      	b.n	800ed10 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	685a      	ldr	r2, [r3, #4]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	885b      	ldrh	r3, [r3, #2]
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ebf8:	fb03 f101 	mul.w	r1, r3, r1
 800ebfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec00:	440b      	add	r3, r1
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4413      	add	r3, r2
 800ec06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ec0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	885b      	ldrh	r3, [r3, #2]
 800ec24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec2c:	1ad3      	subs	r3, r2, r3
 800ec2e:	623b      	str	r3, [r7, #32]
 800ec30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec32:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ec36:	fb03 f202 	mul.w	r2, r3, r2
 800ec3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec3e:	4413      	add	r3, r2
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ec44:	4413      	add	r3, r2
 800ec46:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ec48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec4c:	fb03 f202 	mul.w	r2, r3, r2
 800ec50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ec54:	4413      	add	r3, r2
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ec5a:	4413      	add	r3, r2
 800ec5c:	677b      	str	r3, [r7, #116]	@ 0x74
 800ec5e:	2300      	movs	r3, #0
 800ec60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec62:	e014      	b.n	800ec8e <arm_mat_inverse_f32+0x5c4>
 800ec64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec66:	1d1a      	adds	r2, r3, #4
 800ec68:	677a      	str	r2, [r7, #116]	@ 0x74
 800ec6a:	ed93 7a00 	vldr	s14, [r3]
 800ec6e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ec72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec78:	1d1a      	adds	r2, r3, #4
 800ec7a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ec7c:	ed93 7a00 	vldr	s14, [r3]
 800ec80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec84:	edc3 7a00 	vstr	s15, [r3]
 800ec88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ec8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ec90:	6a3b      	ldr	r3, [r7, #32]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	dbe6      	blt.n	800ec64 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	885b      	ldrh	r3, [r3, #2]
 800eca6:	61fb      	str	r3, [r7, #28]
 800eca8:	69fb      	ldr	r3, [r7, #28]
 800ecaa:	61bb      	str	r3, [r7, #24]
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ecb2:	fb02 f303 	mul.w	r3, r2, r3
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ecba:	4413      	add	r3, r2
 800ecbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ecbe:	69fb      	ldr	r3, [r7, #28]
 800ecc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecc2:	fb02 f303 	mul.w	r3, r2, r3
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ecca:	4413      	add	r3, r2
 800eccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ecce:	2300      	movs	r3, #0
 800ecd0:	673b      	str	r3, [r7, #112]	@ 0x70
 800ecd2:	e014      	b.n	800ecfe <arm_mat_inverse_f32+0x634>
 800ecd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ecd6:	1d1a      	adds	r2, r3, #4
 800ecd8:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ecda:	ed93 7a00 	vldr	s14, [r3]
 800ecde:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ece2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ece6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ece8:	1d1a      	adds	r2, r3, #4
 800ecea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ecec:	ed93 7a00 	vldr	s14, [r3]
 800ecf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecf4:	edc3 7a00 	vstr	s15, [r3]
 800ecf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	673b      	str	r3, [r7, #112]	@ 0x70
 800ecfe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ed00:	69bb      	ldr	r3, [r7, #24]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	dbe6      	blt.n	800ecd4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ed06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ed10:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ed14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed16:	429a      	cmp	r2, r3
 800ed18:	f4ff af67 	bcc.w	800ebea <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800ed1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed20:	3301      	adds	r3, #1
 800ed22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ed26:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ed2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	f4ff ad32 	bcc.w	800e796 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ed32:	2300      	movs	r3, #0
 800ed34:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800ed38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ed3c:	2b01      	cmp	r3, #1
 800ed3e:	d033      	beq.n	800eda8 <arm_mat_inverse_f32+0x6de>
 800ed40:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ed44:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed4c:	d12c      	bne.n	800eda8 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800ed54:	2300      	movs	r3, #0
 800ed56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ed5a:	e010      	b.n	800ed7e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800ed5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed64:	4413      	add	r3, r2
 800ed66:	edd3 7a00 	vldr	s15, [r3]
 800ed6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ed6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed72:	d10d      	bne.n	800ed90 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800ed74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ed78:	3301      	adds	r3, #1
 800ed7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ed7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed82:	fb02 f303 	mul.w	r3, r2, r3
 800ed86:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d3e6      	bcc.n	800ed5c <arm_mat_inverse_f32+0x692>
 800ed8e:	e000      	b.n	800ed92 <arm_mat_inverse_f32+0x6c8>
            break;
 800ed90:	bf00      	nop
      }

      if (i == numRows * numCols)
 800ed92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ed96:	fb02 f303 	mul.w	r3, r2, r3
 800ed9a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d102      	bne.n	800eda8 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800eda2:	23fb      	movs	r3, #251	@ 0xfb
 800eda4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800eda8:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800edac:	4618      	mov	r0, r3
 800edae:	37ec      	adds	r7, #236	@ 0xec
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800edb8:	b480      	push	{r7}
 800edba:	b093      	sub	sp, #76	@ 0x4c
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	685b      	ldr	r3, [r3, #4]
 800edce:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	685b      	ldr	r3, [r3, #4]
 800ede0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	885b      	ldrh	r3, [r3, #2]
 800edec:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	885b      	ldrh	r3, [r3, #2]
 800edf2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800edf4:	2300      	movs	r3, #0
 800edf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800edf8:	8b7b      	ldrh	r3, [r7, #26]
 800edfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800edfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edfe:	009b      	lsls	r3, r3, #2
 800ee00:	69fa      	ldr	r2, [r7, #28]
 800ee02:	4413      	add	r3, r2
 800ee04:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800ee06:	8b3b      	ldrh	r3, [r7, #24]
 800ee08:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800ee10:	f04f 0300 	mov.w	r3, #0
 800ee14:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800ee16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ee18:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800ee1a:	8afb      	ldrh	r3, [r7, #22]
 800ee1c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800ee1e:	e017      	b.n	800ee50 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800ee20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ee22:	1d1a      	adds	r2, r3, #4
 800ee24:	647a      	str	r2, [r7, #68]	@ 0x44
 800ee26:	ed93 7a00 	vldr	s14, [r3]
 800ee2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ee2c:	edd3 7a00 	vldr	s15, [r3]
 800ee30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee34:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800ee38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee3c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800ee40:	8b3b      	ldrh	r3, [r7, #24]
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ee46:	4413      	add	r3, r2
 800ee48:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800ee50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d1e4      	bne.n	800ee20 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800ee56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee58:	1d1a      	adds	r2, r3, #4
 800ee5a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ee5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee5e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800ee60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee62:	3b01      	subs	r3, #1
 800ee64:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800ee66:	8b3a      	ldrh	r2, [r7, #24]
 800ee68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	6a3a      	ldr	r2, [r7, #32]
 800ee70:	4413      	add	r3, r2
 800ee72:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800ee74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1ca      	bne.n	800ee10 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800ee7a:	8b3b      	ldrh	r3, [r7, #24]
 800ee7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee7e:	4413      	add	r3, r2
 800ee80:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800ee82:	8afb      	ldrh	r3, [r7, #22]
 800ee84:	009b      	lsls	r3, r3, #2
 800ee86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ee88:	4413      	add	r3, r2
 800ee8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800ee8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800ee92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1b1      	bne.n	800edfc <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800ee9c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	374c      	adds	r7, #76	@ 0x4c
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b08b      	sub	sp, #44	@ 0x2c
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	881b      	ldrh	r3, [r3, #0]
 800eece:	461a      	mov	r2, r3
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	885b      	ldrh	r3, [r3, #2]
 800eed4:	fb02 f303 	mul.w	r3, r2, r3
 800eed8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800eede:	e013      	b.n	800ef08 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800eee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee2:	1d1a      	adds	r2, r3, #4
 800eee4:	627a      	str	r2, [r7, #36]	@ 0x24
 800eee6:	ed93 7a00 	vldr	s14, [r3]
 800eeea:	6a3b      	ldr	r3, [r7, #32]
 800eeec:	1d1a      	adds	r2, r3, #4
 800eeee:	623a      	str	r2, [r7, #32]
 800eef0:	edd3 7a00 	vldr	s15, [r3]
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	1d1a      	adds	r2, r3, #4
 800eef8:	61fa      	str	r2, [r7, #28]
 800eefa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eefe:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	3b01      	subs	r3, #1
 800ef06:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d1e8      	bne.n	800eee0 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ef12:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	372c      	adds	r7, #44	@ 0x2c
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ef22:	b480      	push	{r7}
 800ef24:	b08b      	sub	sp, #44	@ 0x2c
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	6078      	str	r0, [r7, #4]
 800ef2a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	685b      	ldr	r3, [r3, #4]
 800ef30:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	885b      	ldrh	r3, [r3, #2]
 800ef42:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800ef44:	89fb      	ldrh	r3, [r7, #14]
 800ef46:	61bb      	str	r3, [r7, #24]
 800ef48:	2300      	movs	r3, #0
 800ef4a:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	693a      	ldr	r2, [r7, #16]
 800ef52:	4413      	add	r3, r2
 800ef54:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800ef56:	89bb      	ldrh	r3, [r7, #12]
 800ef58:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800ef5a:	e00d      	b.n	800ef78 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800ef5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef5e:	1d1a      	adds	r2, r3, #4
 800ef60:	627a      	str	r2, [r7, #36]	@ 0x24
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	6a3b      	ldr	r3, [r7, #32]
 800ef66:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800ef68:	89fb      	ldrh	r3, [r7, #14]
 800ef6a:	009b      	lsls	r3, r3, #2
 800ef6c:	6a3a      	ldr	r2, [r7, #32]
 800ef6e:	4413      	add	r3, r2
 800ef70:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	3b01      	subs	r3, #1
 800ef76:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d1ee      	bne.n	800ef5c <arm_mat_trans_f32+0x3a>
      }

      i++;
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	3301      	adds	r3, #1
 800ef82:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d1dd      	bne.n	800ef4c <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ef90:	2300      	movs	r3, #0
 800ef92:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800ef94:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	372c      	adds	r7, #44	@ 0x2c
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <memset>:
 800efa4:	4402      	add	r2, r0
 800efa6:	4603      	mov	r3, r0
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d100      	bne.n	800efae <memset+0xa>
 800efac:	4770      	bx	lr
 800efae:	f803 1b01 	strb.w	r1, [r3], #1
 800efb2:	e7f9      	b.n	800efa8 <memset+0x4>

0800efb4 <__errno>:
 800efb4:	4b01      	ldr	r3, [pc, #4]	@ (800efbc <__errno+0x8>)
 800efb6:	6818      	ldr	r0, [r3, #0]
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop
 800efbc:	20000214 	.word	0x20000214

0800efc0 <__libc_init_array>:
 800efc0:	b570      	push	{r4, r5, r6, lr}
 800efc2:	4d0d      	ldr	r5, [pc, #52]	@ (800eff8 <__libc_init_array+0x38>)
 800efc4:	4c0d      	ldr	r4, [pc, #52]	@ (800effc <__libc_init_array+0x3c>)
 800efc6:	1b64      	subs	r4, r4, r5
 800efc8:	10a4      	asrs	r4, r4, #2
 800efca:	2600      	movs	r6, #0
 800efcc:	42a6      	cmp	r6, r4
 800efce:	d109      	bne.n	800efe4 <__libc_init_array+0x24>
 800efd0:	4d0b      	ldr	r5, [pc, #44]	@ (800f000 <__libc_init_array+0x40>)
 800efd2:	4c0c      	ldr	r4, [pc, #48]	@ (800f004 <__libc_init_array+0x44>)
 800efd4:	f001 fe4a 	bl	8010c6c <_init>
 800efd8:	1b64      	subs	r4, r4, r5
 800efda:	10a4      	asrs	r4, r4, #2
 800efdc:	2600      	movs	r6, #0
 800efde:	42a6      	cmp	r6, r4
 800efe0:	d105      	bne.n	800efee <__libc_init_array+0x2e>
 800efe2:	bd70      	pop	{r4, r5, r6, pc}
 800efe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800efe8:	4798      	blx	r3
 800efea:	3601      	adds	r6, #1
 800efec:	e7ee      	b.n	800efcc <__libc_init_array+0xc>
 800efee:	f855 3b04 	ldr.w	r3, [r5], #4
 800eff2:	4798      	blx	r3
 800eff4:	3601      	adds	r6, #1
 800eff6:	e7f2      	b.n	800efde <__libc_init_array+0x1e>
 800eff8:	080110e8 	.word	0x080110e8
 800effc:	080110e8 	.word	0x080110e8
 800f000:	080110e8 	.word	0x080110e8
 800f004:	080110ec 	.word	0x080110ec

0800f008 <memcpy>:
 800f008:	440a      	add	r2, r1
 800f00a:	4291      	cmp	r1, r2
 800f00c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f010:	d100      	bne.n	800f014 <memcpy+0xc>
 800f012:	4770      	bx	lr
 800f014:	b510      	push	{r4, lr}
 800f016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f01a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f01e:	4291      	cmp	r1, r2
 800f020:	d1f9      	bne.n	800f016 <memcpy+0xe>
 800f022:	bd10      	pop	{r4, pc}

0800f024 <pow>:
 800f024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f026:	ed2d 8b02 	vpush	{d8}
 800f02a:	eeb0 8a40 	vmov.f32	s16, s0
 800f02e:	eef0 8a60 	vmov.f32	s17, s1
 800f032:	ec55 4b11 	vmov	r4, r5, d1
 800f036:	f000 fa37 	bl	800f4a8 <__ieee754_pow>
 800f03a:	4622      	mov	r2, r4
 800f03c:	462b      	mov	r3, r5
 800f03e:	4620      	mov	r0, r4
 800f040:	4629      	mov	r1, r5
 800f042:	ec57 6b10 	vmov	r6, r7, d0
 800f046:	f7f1 fd3d 	bl	8000ac4 <__aeabi_dcmpun>
 800f04a:	2800      	cmp	r0, #0
 800f04c:	d13b      	bne.n	800f0c6 <pow+0xa2>
 800f04e:	ec51 0b18 	vmov	r0, r1, d8
 800f052:	2200      	movs	r2, #0
 800f054:	2300      	movs	r3, #0
 800f056:	f7f1 fd03 	bl	8000a60 <__aeabi_dcmpeq>
 800f05a:	b1b8      	cbz	r0, 800f08c <pow+0x68>
 800f05c:	2200      	movs	r2, #0
 800f05e:	2300      	movs	r3, #0
 800f060:	4620      	mov	r0, r4
 800f062:	4629      	mov	r1, r5
 800f064:	f7f1 fcfc 	bl	8000a60 <__aeabi_dcmpeq>
 800f068:	2800      	cmp	r0, #0
 800f06a:	d146      	bne.n	800f0fa <pow+0xd6>
 800f06c:	ec45 4b10 	vmov	d0, r4, r5
 800f070:	f000 f909 	bl	800f286 <finite>
 800f074:	b338      	cbz	r0, 800f0c6 <pow+0xa2>
 800f076:	2200      	movs	r2, #0
 800f078:	2300      	movs	r3, #0
 800f07a:	4620      	mov	r0, r4
 800f07c:	4629      	mov	r1, r5
 800f07e:	f7f1 fcf9 	bl	8000a74 <__aeabi_dcmplt>
 800f082:	b300      	cbz	r0, 800f0c6 <pow+0xa2>
 800f084:	f7ff ff96 	bl	800efb4 <__errno>
 800f088:	2322      	movs	r3, #34	@ 0x22
 800f08a:	e01b      	b.n	800f0c4 <pow+0xa0>
 800f08c:	ec47 6b10 	vmov	d0, r6, r7
 800f090:	f000 f8f9 	bl	800f286 <finite>
 800f094:	b9e0      	cbnz	r0, 800f0d0 <pow+0xac>
 800f096:	eeb0 0a48 	vmov.f32	s0, s16
 800f09a:	eef0 0a68 	vmov.f32	s1, s17
 800f09e:	f000 f8f2 	bl	800f286 <finite>
 800f0a2:	b1a8      	cbz	r0, 800f0d0 <pow+0xac>
 800f0a4:	ec45 4b10 	vmov	d0, r4, r5
 800f0a8:	f000 f8ed 	bl	800f286 <finite>
 800f0ac:	b180      	cbz	r0, 800f0d0 <pow+0xac>
 800f0ae:	4632      	mov	r2, r6
 800f0b0:	463b      	mov	r3, r7
 800f0b2:	4630      	mov	r0, r6
 800f0b4:	4639      	mov	r1, r7
 800f0b6:	f7f1 fd05 	bl	8000ac4 <__aeabi_dcmpun>
 800f0ba:	2800      	cmp	r0, #0
 800f0bc:	d0e2      	beq.n	800f084 <pow+0x60>
 800f0be:	f7ff ff79 	bl	800efb4 <__errno>
 800f0c2:	2321      	movs	r3, #33	@ 0x21
 800f0c4:	6003      	str	r3, [r0, #0]
 800f0c6:	ecbd 8b02 	vpop	{d8}
 800f0ca:	ec47 6b10 	vmov	d0, r6, r7
 800f0ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	4630      	mov	r0, r6
 800f0d6:	4639      	mov	r1, r7
 800f0d8:	f7f1 fcc2 	bl	8000a60 <__aeabi_dcmpeq>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d0f2      	beq.n	800f0c6 <pow+0xa2>
 800f0e0:	eeb0 0a48 	vmov.f32	s0, s16
 800f0e4:	eef0 0a68 	vmov.f32	s1, s17
 800f0e8:	f000 f8cd 	bl	800f286 <finite>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d0ea      	beq.n	800f0c6 <pow+0xa2>
 800f0f0:	ec45 4b10 	vmov	d0, r4, r5
 800f0f4:	f000 f8c7 	bl	800f286 <finite>
 800f0f8:	e7c3      	b.n	800f082 <pow+0x5e>
 800f0fa:	4f01      	ldr	r7, [pc, #4]	@ (800f100 <pow+0xdc>)
 800f0fc:	2600      	movs	r6, #0
 800f0fe:	e7e2      	b.n	800f0c6 <pow+0xa2>
 800f100:	3ff00000 	.word	0x3ff00000

0800f104 <sqrt>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	ed2d 8b02 	vpush	{d8}
 800f10a:	ec55 4b10 	vmov	r4, r5, d0
 800f10e:	f000 f8cb 	bl	800f2a8 <__ieee754_sqrt>
 800f112:	4622      	mov	r2, r4
 800f114:	462b      	mov	r3, r5
 800f116:	4620      	mov	r0, r4
 800f118:	4629      	mov	r1, r5
 800f11a:	eeb0 8a40 	vmov.f32	s16, s0
 800f11e:	eef0 8a60 	vmov.f32	s17, s1
 800f122:	f7f1 fccf 	bl	8000ac4 <__aeabi_dcmpun>
 800f126:	b990      	cbnz	r0, 800f14e <sqrt+0x4a>
 800f128:	2200      	movs	r2, #0
 800f12a:	2300      	movs	r3, #0
 800f12c:	4620      	mov	r0, r4
 800f12e:	4629      	mov	r1, r5
 800f130:	f7f1 fca0 	bl	8000a74 <__aeabi_dcmplt>
 800f134:	b158      	cbz	r0, 800f14e <sqrt+0x4a>
 800f136:	f7ff ff3d 	bl	800efb4 <__errno>
 800f13a:	2321      	movs	r3, #33	@ 0x21
 800f13c:	6003      	str	r3, [r0, #0]
 800f13e:	2200      	movs	r2, #0
 800f140:	2300      	movs	r3, #0
 800f142:	4610      	mov	r0, r2
 800f144:	4619      	mov	r1, r3
 800f146:	f7f1 fb4d 	bl	80007e4 <__aeabi_ddiv>
 800f14a:	ec41 0b18 	vmov	d8, r0, r1
 800f14e:	eeb0 0a48 	vmov.f32	s0, s16
 800f152:	eef0 0a68 	vmov.f32	s1, s17
 800f156:	ecbd 8b02 	vpop	{d8}
 800f15a:	bd38      	pop	{r3, r4, r5, pc}

0800f15c <acosf>:
 800f15c:	b508      	push	{r3, lr}
 800f15e:	ed2d 8b02 	vpush	{d8}
 800f162:	eeb0 8a40 	vmov.f32	s16, s0
 800f166:	f000 ff91 	bl	801008c <__ieee754_acosf>
 800f16a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f172:	eef0 8a40 	vmov.f32	s17, s0
 800f176:	d615      	bvs.n	800f1a4 <acosf+0x48>
 800f178:	eeb0 0a48 	vmov.f32	s0, s16
 800f17c:	f000 f87c 	bl	800f278 <fabsf>
 800f180:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f184:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18c:	dd0a      	ble.n	800f1a4 <acosf+0x48>
 800f18e:	f7ff ff11 	bl	800efb4 <__errno>
 800f192:	ecbd 8b02 	vpop	{d8}
 800f196:	2321      	movs	r3, #33	@ 0x21
 800f198:	6003      	str	r3, [r0, #0]
 800f19a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f19e:	4804      	ldr	r0, [pc, #16]	@ (800f1b0 <acosf+0x54>)
 800f1a0:	f000 b87c 	b.w	800f29c <nanf>
 800f1a4:	eeb0 0a68 	vmov.f32	s0, s17
 800f1a8:	ecbd 8b02 	vpop	{d8}
 800f1ac:	bd08      	pop	{r3, pc}
 800f1ae:	bf00      	nop
 800f1b0:	08010cc8 	.word	0x08010cc8

0800f1b4 <sqrtf>:
 800f1b4:	b508      	push	{r3, lr}
 800f1b6:	ed2d 8b02 	vpush	{d8}
 800f1ba:	eeb0 8a40 	vmov.f32	s16, s0
 800f1be:	f000 f949 	bl	800f454 <__ieee754_sqrtf>
 800f1c2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f1c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ca:	d60c      	bvs.n	800f1e6 <sqrtf+0x32>
 800f1cc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f1ec <sqrtf+0x38>
 800f1d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1d8:	d505      	bpl.n	800f1e6 <sqrtf+0x32>
 800f1da:	f7ff feeb 	bl	800efb4 <__errno>
 800f1de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f1e2:	2321      	movs	r3, #33	@ 0x21
 800f1e4:	6003      	str	r3, [r0, #0]
 800f1e6:	ecbd 8b02 	vpop	{d8}
 800f1ea:	bd08      	pop	{r3, pc}
 800f1ec:	00000000 	.word	0x00000000

0800f1f0 <cosf>:
 800f1f0:	ee10 3a10 	vmov	r3, s0
 800f1f4:	b507      	push	{r0, r1, r2, lr}
 800f1f6:	4a1e      	ldr	r2, [pc, #120]	@ (800f270 <cosf+0x80>)
 800f1f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d806      	bhi.n	800f20e <cosf+0x1e>
 800f200:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f274 <cosf+0x84>
 800f204:	b003      	add	sp, #12
 800f206:	f85d eb04 	ldr.w	lr, [sp], #4
 800f20a:	f000 be9f 	b.w	800ff4c <__kernel_cosf>
 800f20e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f212:	d304      	bcc.n	800f21e <cosf+0x2e>
 800f214:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f218:	b003      	add	sp, #12
 800f21a:	f85d fb04 	ldr.w	pc, [sp], #4
 800f21e:	4668      	mov	r0, sp
 800f220:	f001 f82a 	bl	8010278 <__ieee754_rem_pio2f>
 800f224:	f000 0003 	and.w	r0, r0, #3
 800f228:	2801      	cmp	r0, #1
 800f22a:	d009      	beq.n	800f240 <cosf+0x50>
 800f22c:	2802      	cmp	r0, #2
 800f22e:	d010      	beq.n	800f252 <cosf+0x62>
 800f230:	b9b0      	cbnz	r0, 800f260 <cosf+0x70>
 800f232:	eddd 0a01 	vldr	s1, [sp, #4]
 800f236:	ed9d 0a00 	vldr	s0, [sp]
 800f23a:	f000 fe87 	bl	800ff4c <__kernel_cosf>
 800f23e:	e7eb      	b.n	800f218 <cosf+0x28>
 800f240:	eddd 0a01 	vldr	s1, [sp, #4]
 800f244:	ed9d 0a00 	vldr	s0, [sp]
 800f248:	f000 fed8 	bl	800fffc <__kernel_sinf>
 800f24c:	eeb1 0a40 	vneg.f32	s0, s0
 800f250:	e7e2      	b.n	800f218 <cosf+0x28>
 800f252:	eddd 0a01 	vldr	s1, [sp, #4]
 800f256:	ed9d 0a00 	vldr	s0, [sp]
 800f25a:	f000 fe77 	bl	800ff4c <__kernel_cosf>
 800f25e:	e7f5      	b.n	800f24c <cosf+0x5c>
 800f260:	eddd 0a01 	vldr	s1, [sp, #4]
 800f264:	ed9d 0a00 	vldr	s0, [sp]
 800f268:	2001      	movs	r0, #1
 800f26a:	f000 fec7 	bl	800fffc <__kernel_sinf>
 800f26e:	e7d3      	b.n	800f218 <cosf+0x28>
 800f270:	3f490fd8 	.word	0x3f490fd8
 800f274:	00000000 	.word	0x00000000

0800f278 <fabsf>:
 800f278:	ee10 3a10 	vmov	r3, s0
 800f27c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f280:	ee00 3a10 	vmov	s0, r3
 800f284:	4770      	bx	lr

0800f286 <finite>:
 800f286:	b082      	sub	sp, #8
 800f288:	ed8d 0b00 	vstr	d0, [sp]
 800f28c:	9801      	ldr	r0, [sp, #4]
 800f28e:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f292:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f296:	0fc0      	lsrs	r0, r0, #31
 800f298:	b002      	add	sp, #8
 800f29a:	4770      	bx	lr

0800f29c <nanf>:
 800f29c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f2a4 <nanf+0x8>
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	7fc00000 	.word	0x7fc00000

0800f2a8 <__ieee754_sqrt>:
 800f2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ac:	4a66      	ldr	r2, [pc, #408]	@ (800f448 <__ieee754_sqrt+0x1a0>)
 800f2ae:	ec55 4b10 	vmov	r4, r5, d0
 800f2b2:	43aa      	bics	r2, r5
 800f2b4:	462b      	mov	r3, r5
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	d110      	bne.n	800f2dc <__ieee754_sqrt+0x34>
 800f2ba:	4622      	mov	r2, r4
 800f2bc:	4620      	mov	r0, r4
 800f2be:	4629      	mov	r1, r5
 800f2c0:	f7f1 f966 	bl	8000590 <__aeabi_dmul>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	f7f0 ffaa 	bl	8000224 <__adddf3>
 800f2d0:	4604      	mov	r4, r0
 800f2d2:	460d      	mov	r5, r1
 800f2d4:	ec45 4b10 	vmov	d0, r4, r5
 800f2d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	2d00      	cmp	r5, #0
 800f2de:	dc0e      	bgt.n	800f2fe <__ieee754_sqrt+0x56>
 800f2e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f2e4:	4322      	orrs	r2, r4
 800f2e6:	d0f5      	beq.n	800f2d4 <__ieee754_sqrt+0x2c>
 800f2e8:	b19d      	cbz	r5, 800f312 <__ieee754_sqrt+0x6a>
 800f2ea:	4622      	mov	r2, r4
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	f7f0 ff96 	bl	8000220 <__aeabi_dsub>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	f7f1 fa74 	bl	80007e4 <__aeabi_ddiv>
 800f2fc:	e7e8      	b.n	800f2d0 <__ieee754_sqrt+0x28>
 800f2fe:	152a      	asrs	r2, r5, #20
 800f300:	d115      	bne.n	800f32e <__ieee754_sqrt+0x86>
 800f302:	2000      	movs	r0, #0
 800f304:	e009      	b.n	800f31a <__ieee754_sqrt+0x72>
 800f306:	0acb      	lsrs	r3, r1, #11
 800f308:	3a15      	subs	r2, #21
 800f30a:	0549      	lsls	r1, r1, #21
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d0fa      	beq.n	800f306 <__ieee754_sqrt+0x5e>
 800f310:	e7f7      	b.n	800f302 <__ieee754_sqrt+0x5a>
 800f312:	462a      	mov	r2, r5
 800f314:	e7fa      	b.n	800f30c <__ieee754_sqrt+0x64>
 800f316:	005b      	lsls	r3, r3, #1
 800f318:	3001      	adds	r0, #1
 800f31a:	02dc      	lsls	r4, r3, #11
 800f31c:	d5fb      	bpl.n	800f316 <__ieee754_sqrt+0x6e>
 800f31e:	1e44      	subs	r4, r0, #1
 800f320:	1b12      	subs	r2, r2, r4
 800f322:	f1c0 0420 	rsb	r4, r0, #32
 800f326:	fa21 f404 	lsr.w	r4, r1, r4
 800f32a:	4323      	orrs	r3, r4
 800f32c:	4081      	lsls	r1, r0
 800f32e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f332:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800f336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f33a:	07d2      	lsls	r2, r2, #31
 800f33c:	bf5c      	itt	pl
 800f33e:	005b      	lslpl	r3, r3, #1
 800f340:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f344:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f348:	bf58      	it	pl
 800f34a:	0049      	lslpl	r1, r1, #1
 800f34c:	2600      	movs	r6, #0
 800f34e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f352:	107f      	asrs	r7, r7, #1
 800f354:	0049      	lsls	r1, r1, #1
 800f356:	2016      	movs	r0, #22
 800f358:	4632      	mov	r2, r6
 800f35a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f35e:	1915      	adds	r5, r2, r4
 800f360:	429d      	cmp	r5, r3
 800f362:	bfde      	ittt	le
 800f364:	192a      	addle	r2, r5, r4
 800f366:	1b5b      	suble	r3, r3, r5
 800f368:	1936      	addle	r6, r6, r4
 800f36a:	0fcd      	lsrs	r5, r1, #31
 800f36c:	3801      	subs	r0, #1
 800f36e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f372:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f376:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f37a:	d1f0      	bne.n	800f35e <__ieee754_sqrt+0xb6>
 800f37c:	4605      	mov	r5, r0
 800f37e:	2420      	movs	r4, #32
 800f380:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f384:	4293      	cmp	r3, r2
 800f386:	eb0c 0e00 	add.w	lr, ip, r0
 800f38a:	dc02      	bgt.n	800f392 <__ieee754_sqrt+0xea>
 800f38c:	d113      	bne.n	800f3b6 <__ieee754_sqrt+0x10e>
 800f38e:	458e      	cmp	lr, r1
 800f390:	d811      	bhi.n	800f3b6 <__ieee754_sqrt+0x10e>
 800f392:	f1be 0f00 	cmp.w	lr, #0
 800f396:	eb0e 000c 	add.w	r0, lr, ip
 800f39a:	da3f      	bge.n	800f41c <__ieee754_sqrt+0x174>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	db3d      	blt.n	800f41c <__ieee754_sqrt+0x174>
 800f3a0:	f102 0801 	add.w	r8, r2, #1
 800f3a4:	1a9b      	subs	r3, r3, r2
 800f3a6:	458e      	cmp	lr, r1
 800f3a8:	bf88      	it	hi
 800f3aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f3ae:	eba1 010e 	sub.w	r1, r1, lr
 800f3b2:	4465      	add	r5, ip
 800f3b4:	4642      	mov	r2, r8
 800f3b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f3ba:	3c01      	subs	r4, #1
 800f3bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f3c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f3c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f3c8:	d1dc      	bne.n	800f384 <__ieee754_sqrt+0xdc>
 800f3ca:	4319      	orrs	r1, r3
 800f3cc:	d01b      	beq.n	800f406 <__ieee754_sqrt+0x15e>
 800f3ce:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800f44c <__ieee754_sqrt+0x1a4>
 800f3d2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800f450 <__ieee754_sqrt+0x1a8>
 800f3d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800f3da:	e9db 2300 	ldrd	r2, r3, [fp]
 800f3de:	f7f0 ff1f 	bl	8000220 <__aeabi_dsub>
 800f3e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	4640      	mov	r0, r8
 800f3ec:	4649      	mov	r1, r9
 800f3ee:	f7f1 fb4b 	bl	8000a88 <__aeabi_dcmple>
 800f3f2:	b140      	cbz	r0, 800f406 <__ieee754_sqrt+0x15e>
 800f3f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800f3f8:	e9da 0100 	ldrd	r0, r1, [sl]
 800f3fc:	e9db 2300 	ldrd	r2, r3, [fp]
 800f400:	d10e      	bne.n	800f420 <__ieee754_sqrt+0x178>
 800f402:	3601      	adds	r6, #1
 800f404:	4625      	mov	r5, r4
 800f406:	1073      	asrs	r3, r6, #1
 800f408:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800f40c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800f410:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800f414:	086b      	lsrs	r3, r5, #1
 800f416:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800f41a:	e759      	b.n	800f2d0 <__ieee754_sqrt+0x28>
 800f41c:	4690      	mov	r8, r2
 800f41e:	e7c1      	b.n	800f3a4 <__ieee754_sqrt+0xfc>
 800f420:	f7f0 ff00 	bl	8000224 <__adddf3>
 800f424:	e9da 8900 	ldrd	r8, r9, [sl]
 800f428:	4602      	mov	r2, r0
 800f42a:	460b      	mov	r3, r1
 800f42c:	4640      	mov	r0, r8
 800f42e:	4649      	mov	r1, r9
 800f430:	f7f1 fb20 	bl	8000a74 <__aeabi_dcmplt>
 800f434:	b120      	cbz	r0, 800f440 <__ieee754_sqrt+0x198>
 800f436:	1cab      	adds	r3, r5, #2
 800f438:	bf08      	it	eq
 800f43a:	3601      	addeq	r6, #1
 800f43c:	3502      	adds	r5, #2
 800f43e:	e7e2      	b.n	800f406 <__ieee754_sqrt+0x15e>
 800f440:	1c6b      	adds	r3, r5, #1
 800f442:	f023 0501 	bic.w	r5, r3, #1
 800f446:	e7de      	b.n	800f406 <__ieee754_sqrt+0x15e>
 800f448:	7ff00000 	.word	0x7ff00000
 800f44c:	08010cd8 	.word	0x08010cd8
 800f450:	08010cd0 	.word	0x08010cd0

0800f454 <__ieee754_sqrtf>:
 800f454:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f458:	4770      	bx	lr
	...

0800f45c <roundf>:
 800f45c:	ee10 0a10 	vmov	r0, s0
 800f460:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f464:	3a7f      	subs	r2, #127	@ 0x7f
 800f466:	2a16      	cmp	r2, #22
 800f468:	dc15      	bgt.n	800f496 <roundf+0x3a>
 800f46a:	2a00      	cmp	r2, #0
 800f46c:	da08      	bge.n	800f480 <roundf+0x24>
 800f46e:	3201      	adds	r2, #1
 800f470:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800f474:	d101      	bne.n	800f47a <roundf+0x1e>
 800f476:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800f47a:	ee00 3a10 	vmov	s0, r3
 800f47e:	4770      	bx	lr
 800f480:	4907      	ldr	r1, [pc, #28]	@ (800f4a0 <roundf+0x44>)
 800f482:	4111      	asrs	r1, r2
 800f484:	4201      	tst	r1, r0
 800f486:	d0fa      	beq.n	800f47e <roundf+0x22>
 800f488:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f48c:	4113      	asrs	r3, r2
 800f48e:	4403      	add	r3, r0
 800f490:	ea23 0301 	bic.w	r3, r3, r1
 800f494:	e7f1      	b.n	800f47a <roundf+0x1e>
 800f496:	2a80      	cmp	r2, #128	@ 0x80
 800f498:	d1f1      	bne.n	800f47e <roundf+0x22>
 800f49a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f49e:	4770      	bx	lr
 800f4a0:	007fffff 	.word	0x007fffff
 800f4a4:	00000000 	.word	0x00000000

0800f4a8 <__ieee754_pow>:
 800f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	b091      	sub	sp, #68	@ 0x44
 800f4ae:	ed8d 1b00 	vstr	d1, [sp]
 800f4b2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800f4b6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800f4ba:	ea5a 0001 	orrs.w	r0, sl, r1
 800f4be:	ec57 6b10 	vmov	r6, r7, d0
 800f4c2:	d113      	bne.n	800f4ec <__ieee754_pow+0x44>
 800f4c4:	19b3      	adds	r3, r6, r6
 800f4c6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800f4ca:	4152      	adcs	r2, r2
 800f4cc:	4298      	cmp	r0, r3
 800f4ce:	4b9a      	ldr	r3, [pc, #616]	@ (800f738 <__ieee754_pow+0x290>)
 800f4d0:	4193      	sbcs	r3, r2
 800f4d2:	f080 84ee 	bcs.w	800feb2 <__ieee754_pow+0xa0a>
 800f4d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4da:	4630      	mov	r0, r6
 800f4dc:	4639      	mov	r1, r7
 800f4de:	f7f0 fea1 	bl	8000224 <__adddf3>
 800f4e2:	ec41 0b10 	vmov	d0, r0, r1
 800f4e6:	b011      	add	sp, #68	@ 0x44
 800f4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ec:	4a93      	ldr	r2, [pc, #588]	@ (800f73c <__ieee754_pow+0x294>)
 800f4ee:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800f4f2:	4295      	cmp	r5, r2
 800f4f4:	46b8      	mov	r8, r7
 800f4f6:	4633      	mov	r3, r6
 800f4f8:	d80a      	bhi.n	800f510 <__ieee754_pow+0x68>
 800f4fa:	d104      	bne.n	800f506 <__ieee754_pow+0x5e>
 800f4fc:	2e00      	cmp	r6, #0
 800f4fe:	d1ea      	bne.n	800f4d6 <__ieee754_pow+0x2e>
 800f500:	45aa      	cmp	sl, r5
 800f502:	d8e8      	bhi.n	800f4d6 <__ieee754_pow+0x2e>
 800f504:	e001      	b.n	800f50a <__ieee754_pow+0x62>
 800f506:	4592      	cmp	sl, r2
 800f508:	d802      	bhi.n	800f510 <__ieee754_pow+0x68>
 800f50a:	4592      	cmp	sl, r2
 800f50c:	d10f      	bne.n	800f52e <__ieee754_pow+0x86>
 800f50e:	b171      	cbz	r1, 800f52e <__ieee754_pow+0x86>
 800f510:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f514:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f518:	ea58 0803 	orrs.w	r8, r8, r3
 800f51c:	d1db      	bne.n	800f4d6 <__ieee754_pow+0x2e>
 800f51e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f522:	18db      	adds	r3, r3, r3
 800f524:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800f528:	4152      	adcs	r2, r2
 800f52a:	4598      	cmp	r8, r3
 800f52c:	e7cf      	b.n	800f4ce <__ieee754_pow+0x26>
 800f52e:	f1b8 0f00 	cmp.w	r8, #0
 800f532:	46ab      	mov	fp, r5
 800f534:	da43      	bge.n	800f5be <__ieee754_pow+0x116>
 800f536:	4a82      	ldr	r2, [pc, #520]	@ (800f740 <__ieee754_pow+0x298>)
 800f538:	4592      	cmp	sl, r2
 800f53a:	d856      	bhi.n	800f5ea <__ieee754_pow+0x142>
 800f53c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800f540:	4592      	cmp	sl, r2
 800f542:	f240 84c5 	bls.w	800fed0 <__ieee754_pow+0xa28>
 800f546:	ea4f 522a 	mov.w	r2, sl, asr #20
 800f54a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800f54e:	2a14      	cmp	r2, #20
 800f550:	dd18      	ble.n	800f584 <__ieee754_pow+0xdc>
 800f552:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800f556:	fa21 f402 	lsr.w	r4, r1, r2
 800f55a:	fa04 f202 	lsl.w	r2, r4, r2
 800f55e:	428a      	cmp	r2, r1
 800f560:	f040 84b6 	bne.w	800fed0 <__ieee754_pow+0xa28>
 800f564:	f004 0401 	and.w	r4, r4, #1
 800f568:	f1c4 0402 	rsb	r4, r4, #2
 800f56c:	2900      	cmp	r1, #0
 800f56e:	d159      	bne.n	800f624 <__ieee754_pow+0x17c>
 800f570:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f574:	d148      	bne.n	800f608 <__ieee754_pow+0x160>
 800f576:	4632      	mov	r2, r6
 800f578:	463b      	mov	r3, r7
 800f57a:	4630      	mov	r0, r6
 800f57c:	4639      	mov	r1, r7
 800f57e:	f7f1 f807 	bl	8000590 <__aeabi_dmul>
 800f582:	e7ae      	b.n	800f4e2 <__ieee754_pow+0x3a>
 800f584:	2900      	cmp	r1, #0
 800f586:	d14c      	bne.n	800f622 <__ieee754_pow+0x17a>
 800f588:	f1c2 0214 	rsb	r2, r2, #20
 800f58c:	fa4a f402 	asr.w	r4, sl, r2
 800f590:	fa04 f202 	lsl.w	r2, r4, r2
 800f594:	4552      	cmp	r2, sl
 800f596:	f040 8498 	bne.w	800feca <__ieee754_pow+0xa22>
 800f59a:	f004 0401 	and.w	r4, r4, #1
 800f59e:	f1c4 0402 	rsb	r4, r4, #2
 800f5a2:	4a68      	ldr	r2, [pc, #416]	@ (800f744 <__ieee754_pow+0x29c>)
 800f5a4:	4592      	cmp	sl, r2
 800f5a6:	d1e3      	bne.n	800f570 <__ieee754_pow+0xc8>
 800f5a8:	f1b9 0f00 	cmp.w	r9, #0
 800f5ac:	f280 8489 	bge.w	800fec2 <__ieee754_pow+0xa1a>
 800f5b0:	4964      	ldr	r1, [pc, #400]	@ (800f744 <__ieee754_pow+0x29c>)
 800f5b2:	4632      	mov	r2, r6
 800f5b4:	463b      	mov	r3, r7
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	f7f1 f914 	bl	80007e4 <__aeabi_ddiv>
 800f5bc:	e791      	b.n	800f4e2 <__ieee754_pow+0x3a>
 800f5be:	2400      	movs	r4, #0
 800f5c0:	bb81      	cbnz	r1, 800f624 <__ieee754_pow+0x17c>
 800f5c2:	4a5e      	ldr	r2, [pc, #376]	@ (800f73c <__ieee754_pow+0x294>)
 800f5c4:	4592      	cmp	sl, r2
 800f5c6:	d1ec      	bne.n	800f5a2 <__ieee754_pow+0xfa>
 800f5c8:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800f5cc:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f5d0:	431a      	orrs	r2, r3
 800f5d2:	f000 846e 	beq.w	800feb2 <__ieee754_pow+0xa0a>
 800f5d6:	4b5c      	ldr	r3, [pc, #368]	@ (800f748 <__ieee754_pow+0x2a0>)
 800f5d8:	429d      	cmp	r5, r3
 800f5da:	d908      	bls.n	800f5ee <__ieee754_pow+0x146>
 800f5dc:	f1b9 0f00 	cmp.w	r9, #0
 800f5e0:	f280 846b 	bge.w	800feba <__ieee754_pow+0xa12>
 800f5e4:	2000      	movs	r0, #0
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	e77b      	b.n	800f4e2 <__ieee754_pow+0x3a>
 800f5ea:	2402      	movs	r4, #2
 800f5ec:	e7e8      	b.n	800f5c0 <__ieee754_pow+0x118>
 800f5ee:	f1b9 0f00 	cmp.w	r9, #0
 800f5f2:	f04f 0000 	mov.w	r0, #0
 800f5f6:	f04f 0100 	mov.w	r1, #0
 800f5fa:	f6bf af72 	bge.w	800f4e2 <__ieee754_pow+0x3a>
 800f5fe:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f602:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f606:	e76c      	b.n	800f4e2 <__ieee754_pow+0x3a>
 800f608:	4a50      	ldr	r2, [pc, #320]	@ (800f74c <__ieee754_pow+0x2a4>)
 800f60a:	4591      	cmp	r9, r2
 800f60c:	d10a      	bne.n	800f624 <__ieee754_pow+0x17c>
 800f60e:	f1b8 0f00 	cmp.w	r8, #0
 800f612:	db07      	blt.n	800f624 <__ieee754_pow+0x17c>
 800f614:	ec47 6b10 	vmov	d0, r6, r7
 800f618:	b011      	add	sp, #68	@ 0x44
 800f61a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61e:	f7ff be43 	b.w	800f2a8 <__ieee754_sqrt>
 800f622:	2400      	movs	r4, #0
 800f624:	ec47 6b10 	vmov	d0, r6, r7
 800f628:	9302      	str	r3, [sp, #8]
 800f62a:	f000 fc87 	bl	800ff3c <fabs>
 800f62e:	9b02      	ldr	r3, [sp, #8]
 800f630:	ec51 0b10 	vmov	r0, r1, d0
 800f634:	bb43      	cbnz	r3, 800f688 <__ieee754_pow+0x1e0>
 800f636:	4b43      	ldr	r3, [pc, #268]	@ (800f744 <__ieee754_pow+0x29c>)
 800f638:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d000      	beq.n	800f642 <__ieee754_pow+0x19a>
 800f640:	bb15      	cbnz	r5, 800f688 <__ieee754_pow+0x1e0>
 800f642:	f1b9 0f00 	cmp.w	r9, #0
 800f646:	da05      	bge.n	800f654 <__ieee754_pow+0x1ac>
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	2000      	movs	r0, #0
 800f64e:	493d      	ldr	r1, [pc, #244]	@ (800f744 <__ieee754_pow+0x29c>)
 800f650:	f7f1 f8c8 	bl	80007e4 <__aeabi_ddiv>
 800f654:	f1b8 0f00 	cmp.w	r8, #0
 800f658:	f6bf af43 	bge.w	800f4e2 <__ieee754_pow+0x3a>
 800f65c:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800f660:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800f664:	4325      	orrs	r5, r4
 800f666:	d108      	bne.n	800f67a <__ieee754_pow+0x1d2>
 800f668:	4602      	mov	r2, r0
 800f66a:	460b      	mov	r3, r1
 800f66c:	4610      	mov	r0, r2
 800f66e:	4619      	mov	r1, r3
 800f670:	f7f0 fdd6 	bl	8000220 <__aeabi_dsub>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	e79e      	b.n	800f5b8 <__ieee754_pow+0x110>
 800f67a:	2c01      	cmp	r4, #1
 800f67c:	f47f af31 	bne.w	800f4e2 <__ieee754_pow+0x3a>
 800f680:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f684:	4619      	mov	r1, r3
 800f686:	e72c      	b.n	800f4e2 <__ieee754_pow+0x3a>
 800f688:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800f68c:	3b01      	subs	r3, #1
 800f68e:	ea53 0204 	orrs.w	r2, r3, r4
 800f692:	d102      	bne.n	800f69a <__ieee754_pow+0x1f2>
 800f694:	4632      	mov	r2, r6
 800f696:	463b      	mov	r3, r7
 800f698:	e7e8      	b.n	800f66c <__ieee754_pow+0x1c4>
 800f69a:	3c01      	subs	r4, #1
 800f69c:	431c      	orrs	r4, r3
 800f69e:	d016      	beq.n	800f6ce <__ieee754_pow+0x226>
 800f6a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f728 <__ieee754_pow+0x280>
 800f6a4:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f6a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6ac:	f240 8110 	bls.w	800f8d0 <__ieee754_pow+0x428>
 800f6b0:	4b27      	ldr	r3, [pc, #156]	@ (800f750 <__ieee754_pow+0x2a8>)
 800f6b2:	459a      	cmp	sl, r3
 800f6b4:	4b24      	ldr	r3, [pc, #144]	@ (800f748 <__ieee754_pow+0x2a0>)
 800f6b6:	d916      	bls.n	800f6e6 <__ieee754_pow+0x23e>
 800f6b8:	429d      	cmp	r5, r3
 800f6ba:	d80b      	bhi.n	800f6d4 <__ieee754_pow+0x22c>
 800f6bc:	f1b9 0f00 	cmp.w	r9, #0
 800f6c0:	da0b      	bge.n	800f6da <__ieee754_pow+0x232>
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	b011      	add	sp, #68	@ 0x44
 800f6c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ca:	f000 bfb5 	b.w	8010638 <__math_oflow>
 800f6ce:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800f730 <__ieee754_pow+0x288>
 800f6d2:	e7e7      	b.n	800f6a4 <__ieee754_pow+0x1fc>
 800f6d4:	f1b9 0f00 	cmp.w	r9, #0
 800f6d8:	dcf3      	bgt.n	800f6c2 <__ieee754_pow+0x21a>
 800f6da:	2000      	movs	r0, #0
 800f6dc:	b011      	add	sp, #68	@ 0x44
 800f6de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e2:	f000 bfa1 	b.w	8010628 <__math_uflow>
 800f6e6:	429d      	cmp	r5, r3
 800f6e8:	d20c      	bcs.n	800f704 <__ieee754_pow+0x25c>
 800f6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	f7f1 f9bf 	bl	8000a74 <__aeabi_dcmplt>
 800f6f6:	3800      	subs	r0, #0
 800f6f8:	bf18      	it	ne
 800f6fa:	2001      	movne	r0, #1
 800f6fc:	f1b9 0f00 	cmp.w	r9, #0
 800f700:	daec      	bge.n	800f6dc <__ieee754_pow+0x234>
 800f702:	e7df      	b.n	800f6c4 <__ieee754_pow+0x21c>
 800f704:	4b0f      	ldr	r3, [pc, #60]	@ (800f744 <__ieee754_pow+0x29c>)
 800f706:	429d      	cmp	r5, r3
 800f708:	f04f 0200 	mov.w	r2, #0
 800f70c:	d922      	bls.n	800f754 <__ieee754_pow+0x2ac>
 800f70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f712:	2300      	movs	r3, #0
 800f714:	f7f1 f9ae 	bl	8000a74 <__aeabi_dcmplt>
 800f718:	3800      	subs	r0, #0
 800f71a:	bf18      	it	ne
 800f71c:	2001      	movne	r0, #1
 800f71e:	f1b9 0f00 	cmp.w	r9, #0
 800f722:	dccf      	bgt.n	800f6c4 <__ieee754_pow+0x21c>
 800f724:	e7da      	b.n	800f6dc <__ieee754_pow+0x234>
 800f726:	bf00      	nop
 800f728:	00000000 	.word	0x00000000
 800f72c:	3ff00000 	.word	0x3ff00000
 800f730:	00000000 	.word	0x00000000
 800f734:	bff00000 	.word	0xbff00000
 800f738:	fff00000 	.word	0xfff00000
 800f73c:	7ff00000 	.word	0x7ff00000
 800f740:	433fffff 	.word	0x433fffff
 800f744:	3ff00000 	.word	0x3ff00000
 800f748:	3fefffff 	.word	0x3fefffff
 800f74c:	3fe00000 	.word	0x3fe00000
 800f750:	43f00000 	.word	0x43f00000
 800f754:	4b5a      	ldr	r3, [pc, #360]	@ (800f8c0 <__ieee754_pow+0x418>)
 800f756:	f7f0 fd63 	bl	8000220 <__aeabi_dsub>
 800f75a:	a351      	add	r3, pc, #324	@ (adr r3, 800f8a0 <__ieee754_pow+0x3f8>)
 800f75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f760:	4604      	mov	r4, r0
 800f762:	460d      	mov	r5, r1
 800f764:	f7f0 ff14 	bl	8000590 <__aeabi_dmul>
 800f768:	a34f      	add	r3, pc, #316	@ (adr r3, 800f8a8 <__ieee754_pow+0x400>)
 800f76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76e:	4606      	mov	r6, r0
 800f770:	460f      	mov	r7, r1
 800f772:	4620      	mov	r0, r4
 800f774:	4629      	mov	r1, r5
 800f776:	f7f0 ff0b 	bl	8000590 <__aeabi_dmul>
 800f77a:	4b52      	ldr	r3, [pc, #328]	@ (800f8c4 <__ieee754_pow+0x41c>)
 800f77c:	4682      	mov	sl, r0
 800f77e:	468b      	mov	fp, r1
 800f780:	2200      	movs	r2, #0
 800f782:	4620      	mov	r0, r4
 800f784:	4629      	mov	r1, r5
 800f786:	f7f0 ff03 	bl	8000590 <__aeabi_dmul>
 800f78a:	4602      	mov	r2, r0
 800f78c:	460b      	mov	r3, r1
 800f78e:	a148      	add	r1, pc, #288	@ (adr r1, 800f8b0 <__ieee754_pow+0x408>)
 800f790:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f794:	f7f0 fd44 	bl	8000220 <__aeabi_dsub>
 800f798:	4622      	mov	r2, r4
 800f79a:	462b      	mov	r3, r5
 800f79c:	f7f0 fef8 	bl	8000590 <__aeabi_dmul>
 800f7a0:	4602      	mov	r2, r0
 800f7a2:	460b      	mov	r3, r1
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	4948      	ldr	r1, [pc, #288]	@ (800f8c8 <__ieee754_pow+0x420>)
 800f7a8:	f7f0 fd3a 	bl	8000220 <__aeabi_dsub>
 800f7ac:	4622      	mov	r2, r4
 800f7ae:	4680      	mov	r8, r0
 800f7b0:	4689      	mov	r9, r1
 800f7b2:	462b      	mov	r3, r5
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	f7f0 feea 	bl	8000590 <__aeabi_dmul>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	4640      	mov	r0, r8
 800f7c2:	4649      	mov	r1, r9
 800f7c4:	f7f0 fee4 	bl	8000590 <__aeabi_dmul>
 800f7c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800f8b8 <__ieee754_pow+0x410>)
 800f7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ce:	f7f0 fedf 	bl	8000590 <__aeabi_dmul>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	4650      	mov	r0, sl
 800f7d8:	4659      	mov	r1, fp
 800f7da:	f7f0 fd21 	bl	8000220 <__aeabi_dsub>
 800f7de:	4602      	mov	r2, r0
 800f7e0:	460b      	mov	r3, r1
 800f7e2:	4680      	mov	r8, r0
 800f7e4:	4689      	mov	r9, r1
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	4639      	mov	r1, r7
 800f7ea:	f7f0 fd1b 	bl	8000224 <__adddf3>
 800f7ee:	2400      	movs	r4, #0
 800f7f0:	4632      	mov	r2, r6
 800f7f2:	463b      	mov	r3, r7
 800f7f4:	4620      	mov	r0, r4
 800f7f6:	460d      	mov	r5, r1
 800f7f8:	f7f0 fd12 	bl	8000220 <__aeabi_dsub>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	4640      	mov	r0, r8
 800f802:	4649      	mov	r1, r9
 800f804:	f7f0 fd0c 	bl	8000220 <__aeabi_dsub>
 800f808:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f80c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f810:	2300      	movs	r3, #0
 800f812:	9304      	str	r3, [sp, #16]
 800f814:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f818:	4606      	mov	r6, r0
 800f81a:	460f      	mov	r7, r1
 800f81c:	465b      	mov	r3, fp
 800f81e:	4652      	mov	r2, sl
 800f820:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f824:	f7f0 fcfc 	bl	8000220 <__aeabi_dsub>
 800f828:	4622      	mov	r2, r4
 800f82a:	462b      	mov	r3, r5
 800f82c:	f7f0 feb0 	bl	8000590 <__aeabi_dmul>
 800f830:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f834:	4680      	mov	r8, r0
 800f836:	4689      	mov	r9, r1
 800f838:	4630      	mov	r0, r6
 800f83a:	4639      	mov	r1, r7
 800f83c:	f7f0 fea8 	bl	8000590 <__aeabi_dmul>
 800f840:	4602      	mov	r2, r0
 800f842:	460b      	mov	r3, r1
 800f844:	4640      	mov	r0, r8
 800f846:	4649      	mov	r1, r9
 800f848:	f7f0 fcec 	bl	8000224 <__adddf3>
 800f84c:	465b      	mov	r3, fp
 800f84e:	4606      	mov	r6, r0
 800f850:	460f      	mov	r7, r1
 800f852:	4652      	mov	r2, sl
 800f854:	4620      	mov	r0, r4
 800f856:	4629      	mov	r1, r5
 800f858:	f7f0 fe9a 	bl	8000590 <__aeabi_dmul>
 800f85c:	460b      	mov	r3, r1
 800f85e:	4602      	mov	r2, r0
 800f860:	4680      	mov	r8, r0
 800f862:	4689      	mov	r9, r1
 800f864:	4630      	mov	r0, r6
 800f866:	4639      	mov	r1, r7
 800f868:	f7f0 fcdc 	bl	8000224 <__adddf3>
 800f86c:	4b17      	ldr	r3, [pc, #92]	@ (800f8cc <__ieee754_pow+0x424>)
 800f86e:	4299      	cmp	r1, r3
 800f870:	4604      	mov	r4, r0
 800f872:	460d      	mov	r5, r1
 800f874:	468b      	mov	fp, r1
 800f876:	f340 820b 	ble.w	800fc90 <__ieee754_pow+0x7e8>
 800f87a:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f87e:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f882:	4303      	orrs	r3, r0
 800f884:	f000 81ea 	beq.w	800fc5c <__ieee754_pow+0x7b4>
 800f888:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f88c:	2200      	movs	r2, #0
 800f88e:	2300      	movs	r3, #0
 800f890:	f7f1 f8f0 	bl	8000a74 <__aeabi_dcmplt>
 800f894:	3800      	subs	r0, #0
 800f896:	bf18      	it	ne
 800f898:	2001      	movne	r0, #1
 800f89a:	e713      	b.n	800f6c4 <__ieee754_pow+0x21c>
 800f89c:	f3af 8000 	nop.w
 800f8a0:	60000000 	.word	0x60000000
 800f8a4:	3ff71547 	.word	0x3ff71547
 800f8a8:	f85ddf44 	.word	0xf85ddf44
 800f8ac:	3e54ae0b 	.word	0x3e54ae0b
 800f8b0:	55555555 	.word	0x55555555
 800f8b4:	3fd55555 	.word	0x3fd55555
 800f8b8:	652b82fe 	.word	0x652b82fe
 800f8bc:	3ff71547 	.word	0x3ff71547
 800f8c0:	3ff00000 	.word	0x3ff00000
 800f8c4:	3fd00000 	.word	0x3fd00000
 800f8c8:	3fe00000 	.word	0x3fe00000
 800f8cc:	408fffff 	.word	0x408fffff
 800f8d0:	4bd5      	ldr	r3, [pc, #852]	@ (800fc28 <__ieee754_pow+0x780>)
 800f8d2:	ea08 0303 	and.w	r3, r8, r3
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	b92b      	cbnz	r3, 800f8e6 <__ieee754_pow+0x43e>
 800f8da:	4bd4      	ldr	r3, [pc, #848]	@ (800fc2c <__ieee754_pow+0x784>)
 800f8dc:	f7f0 fe58 	bl	8000590 <__aeabi_dmul>
 800f8e0:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f8e4:	468b      	mov	fp, r1
 800f8e6:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f8ea:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f8ee:	4413      	add	r3, r2
 800f8f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8f2:	4bcf      	ldr	r3, [pc, #828]	@ (800fc30 <__ieee754_pow+0x788>)
 800f8f4:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f8f8:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f8fc:	459b      	cmp	fp, r3
 800f8fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f902:	dd08      	ble.n	800f916 <__ieee754_pow+0x46e>
 800f904:	4bcb      	ldr	r3, [pc, #812]	@ (800fc34 <__ieee754_pow+0x78c>)
 800f906:	459b      	cmp	fp, r3
 800f908:	f340 81a5 	ble.w	800fc56 <__ieee754_pow+0x7ae>
 800f90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f90e:	3301      	adds	r3, #1
 800f910:	930a      	str	r3, [sp, #40]	@ 0x28
 800f912:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f916:	f04f 0a00 	mov.w	sl, #0
 800f91a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f91e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f920:	4bc5      	ldr	r3, [pc, #788]	@ (800fc38 <__ieee754_pow+0x790>)
 800f922:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f926:	ed93 7b00 	vldr	d7, [r3]
 800f92a:	4629      	mov	r1, r5
 800f92c:	ec53 2b17 	vmov	r2, r3, d7
 800f930:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f934:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f938:	f7f0 fc72 	bl	8000220 <__aeabi_dsub>
 800f93c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f940:	4606      	mov	r6, r0
 800f942:	460f      	mov	r7, r1
 800f944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f948:	f7f0 fc6c 	bl	8000224 <__adddf3>
 800f94c:	4602      	mov	r2, r0
 800f94e:	460b      	mov	r3, r1
 800f950:	2000      	movs	r0, #0
 800f952:	49ba      	ldr	r1, [pc, #744]	@ (800fc3c <__ieee754_pow+0x794>)
 800f954:	f7f0 ff46 	bl	80007e4 <__aeabi_ddiv>
 800f958:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f95c:	4602      	mov	r2, r0
 800f95e:	460b      	mov	r3, r1
 800f960:	4630      	mov	r0, r6
 800f962:	4639      	mov	r1, r7
 800f964:	f7f0 fe14 	bl	8000590 <__aeabi_dmul>
 800f968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f96c:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f970:	106d      	asrs	r5, r5, #1
 800f972:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f976:	f04f 0b00 	mov.w	fp, #0
 800f97a:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f97e:	4661      	mov	r1, ip
 800f980:	2200      	movs	r2, #0
 800f982:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f986:	4658      	mov	r0, fp
 800f988:	46e1      	mov	r9, ip
 800f98a:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f98e:	4614      	mov	r4, r2
 800f990:	461d      	mov	r5, r3
 800f992:	f7f0 fdfd 	bl	8000590 <__aeabi_dmul>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	4630      	mov	r0, r6
 800f99c:	4639      	mov	r1, r7
 800f99e:	f7f0 fc3f 	bl	8000220 <__aeabi_dsub>
 800f9a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f9a6:	4606      	mov	r6, r0
 800f9a8:	460f      	mov	r7, r1
 800f9aa:	4620      	mov	r0, r4
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	f7f0 fc37 	bl	8000220 <__aeabi_dsub>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f9ba:	f7f0 fc31 	bl	8000220 <__aeabi_dsub>
 800f9be:	465a      	mov	r2, fp
 800f9c0:	464b      	mov	r3, r9
 800f9c2:	f7f0 fde5 	bl	8000590 <__aeabi_dmul>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	460b      	mov	r3, r1
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	4639      	mov	r1, r7
 800f9ce:	f7f0 fc27 	bl	8000220 <__aeabi_dsub>
 800f9d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f9d6:	f7f0 fddb 	bl	8000590 <__aeabi_dmul>
 800f9da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	f7f0 fdd3 	bl	8000590 <__aeabi_dmul>
 800f9ea:	a37d      	add	r3, pc, #500	@ (adr r3, 800fbe0 <__ieee754_pow+0x738>)
 800f9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f0:	4604      	mov	r4, r0
 800f9f2:	460d      	mov	r5, r1
 800f9f4:	f7f0 fdcc 	bl	8000590 <__aeabi_dmul>
 800f9f8:	a37b      	add	r3, pc, #492	@ (adr r3, 800fbe8 <__ieee754_pow+0x740>)
 800f9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fe:	f7f0 fc11 	bl	8000224 <__adddf3>
 800fa02:	4622      	mov	r2, r4
 800fa04:	462b      	mov	r3, r5
 800fa06:	f7f0 fdc3 	bl	8000590 <__aeabi_dmul>
 800fa0a:	a379      	add	r3, pc, #484	@ (adr r3, 800fbf0 <__ieee754_pow+0x748>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	f7f0 fc08 	bl	8000224 <__adddf3>
 800fa14:	4622      	mov	r2, r4
 800fa16:	462b      	mov	r3, r5
 800fa18:	f7f0 fdba 	bl	8000590 <__aeabi_dmul>
 800fa1c:	a376      	add	r3, pc, #472	@ (adr r3, 800fbf8 <__ieee754_pow+0x750>)
 800fa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa22:	f7f0 fbff 	bl	8000224 <__adddf3>
 800fa26:	4622      	mov	r2, r4
 800fa28:	462b      	mov	r3, r5
 800fa2a:	f7f0 fdb1 	bl	8000590 <__aeabi_dmul>
 800fa2e:	a374      	add	r3, pc, #464	@ (adr r3, 800fc00 <__ieee754_pow+0x758>)
 800fa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa34:	f7f0 fbf6 	bl	8000224 <__adddf3>
 800fa38:	4622      	mov	r2, r4
 800fa3a:	462b      	mov	r3, r5
 800fa3c:	f7f0 fda8 	bl	8000590 <__aeabi_dmul>
 800fa40:	a371      	add	r3, pc, #452	@ (adr r3, 800fc08 <__ieee754_pow+0x760>)
 800fa42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa46:	f7f0 fbed 	bl	8000224 <__adddf3>
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	4606      	mov	r6, r0
 800fa4e:	460f      	mov	r7, r1
 800fa50:	462b      	mov	r3, r5
 800fa52:	4620      	mov	r0, r4
 800fa54:	4629      	mov	r1, r5
 800fa56:	f7f0 fd9b 	bl	8000590 <__aeabi_dmul>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	4630      	mov	r0, r6
 800fa60:	4639      	mov	r1, r7
 800fa62:	f7f0 fd95 	bl	8000590 <__aeabi_dmul>
 800fa66:	465a      	mov	r2, fp
 800fa68:	4604      	mov	r4, r0
 800fa6a:	460d      	mov	r5, r1
 800fa6c:	464b      	mov	r3, r9
 800fa6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa72:	f7f0 fbd7 	bl	8000224 <__adddf3>
 800fa76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa7a:	f7f0 fd89 	bl	8000590 <__aeabi_dmul>
 800fa7e:	4622      	mov	r2, r4
 800fa80:	462b      	mov	r3, r5
 800fa82:	f7f0 fbcf 	bl	8000224 <__adddf3>
 800fa86:	465a      	mov	r2, fp
 800fa88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa8c:	464b      	mov	r3, r9
 800fa8e:	4658      	mov	r0, fp
 800fa90:	4649      	mov	r1, r9
 800fa92:	f7f0 fd7d 	bl	8000590 <__aeabi_dmul>
 800fa96:	4b6a      	ldr	r3, [pc, #424]	@ (800fc40 <__ieee754_pow+0x798>)
 800fa98:	2200      	movs	r2, #0
 800fa9a:	4606      	mov	r6, r0
 800fa9c:	460f      	mov	r7, r1
 800fa9e:	f7f0 fbc1 	bl	8000224 <__adddf3>
 800faa2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800faa6:	f7f0 fbbd 	bl	8000224 <__adddf3>
 800faaa:	46d8      	mov	r8, fp
 800faac:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800fab0:	460d      	mov	r5, r1
 800fab2:	465a      	mov	r2, fp
 800fab4:	460b      	mov	r3, r1
 800fab6:	4640      	mov	r0, r8
 800fab8:	4649      	mov	r1, r9
 800faba:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800fabe:	f7f0 fd67 	bl	8000590 <__aeabi_dmul>
 800fac2:	465c      	mov	r4, fp
 800fac4:	4680      	mov	r8, r0
 800fac6:	4689      	mov	r9, r1
 800fac8:	4b5d      	ldr	r3, [pc, #372]	@ (800fc40 <__ieee754_pow+0x798>)
 800faca:	2200      	movs	r2, #0
 800facc:	4620      	mov	r0, r4
 800face:	4629      	mov	r1, r5
 800fad0:	f7f0 fba6 	bl	8000220 <__aeabi_dsub>
 800fad4:	4632      	mov	r2, r6
 800fad6:	463b      	mov	r3, r7
 800fad8:	f7f0 fba2 	bl	8000220 <__aeabi_dsub>
 800fadc:	4602      	mov	r2, r0
 800fade:	460b      	mov	r3, r1
 800fae0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fae4:	f7f0 fb9c 	bl	8000220 <__aeabi_dsub>
 800fae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faec:	f7f0 fd50 	bl	8000590 <__aeabi_dmul>
 800faf0:	4622      	mov	r2, r4
 800faf2:	4606      	mov	r6, r0
 800faf4:	460f      	mov	r7, r1
 800faf6:	462b      	mov	r3, r5
 800faf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fafc:	f7f0 fd48 	bl	8000590 <__aeabi_dmul>
 800fb00:	4602      	mov	r2, r0
 800fb02:	460b      	mov	r3, r1
 800fb04:	4630      	mov	r0, r6
 800fb06:	4639      	mov	r1, r7
 800fb08:	f7f0 fb8c 	bl	8000224 <__adddf3>
 800fb0c:	4606      	mov	r6, r0
 800fb0e:	460f      	mov	r7, r1
 800fb10:	4602      	mov	r2, r0
 800fb12:	460b      	mov	r3, r1
 800fb14:	4640      	mov	r0, r8
 800fb16:	4649      	mov	r1, r9
 800fb18:	f7f0 fb84 	bl	8000224 <__adddf3>
 800fb1c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800fb20:	a33b      	add	r3, pc, #236	@ (adr r3, 800fc10 <__ieee754_pow+0x768>)
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	4658      	mov	r0, fp
 800fb28:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800fb2c:	460d      	mov	r5, r1
 800fb2e:	f7f0 fd2f 	bl	8000590 <__aeabi_dmul>
 800fb32:	465c      	mov	r4, fp
 800fb34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb38:	4642      	mov	r2, r8
 800fb3a:	464b      	mov	r3, r9
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	4629      	mov	r1, r5
 800fb40:	f7f0 fb6e 	bl	8000220 <__aeabi_dsub>
 800fb44:	4602      	mov	r2, r0
 800fb46:	460b      	mov	r3, r1
 800fb48:	4630      	mov	r0, r6
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	f7f0 fb68 	bl	8000220 <__aeabi_dsub>
 800fb50:	a331      	add	r3, pc, #196	@ (adr r3, 800fc18 <__ieee754_pow+0x770>)
 800fb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb56:	f7f0 fd1b 	bl	8000590 <__aeabi_dmul>
 800fb5a:	a331      	add	r3, pc, #196	@ (adr r3, 800fc20 <__ieee754_pow+0x778>)
 800fb5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb60:	4606      	mov	r6, r0
 800fb62:	460f      	mov	r7, r1
 800fb64:	4620      	mov	r0, r4
 800fb66:	4629      	mov	r1, r5
 800fb68:	f7f0 fd12 	bl	8000590 <__aeabi_dmul>
 800fb6c:	4602      	mov	r2, r0
 800fb6e:	460b      	mov	r3, r1
 800fb70:	4630      	mov	r0, r6
 800fb72:	4639      	mov	r1, r7
 800fb74:	f7f0 fb56 	bl	8000224 <__adddf3>
 800fb78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb7a:	4b32      	ldr	r3, [pc, #200]	@ (800fc44 <__ieee754_pow+0x79c>)
 800fb7c:	4413      	add	r3, r2
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	f7f0 fb4f 	bl	8000224 <__adddf3>
 800fb86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb8a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fb8c:	f7f0 fc96 	bl	80004bc <__aeabi_i2d>
 800fb90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb92:	4b2d      	ldr	r3, [pc, #180]	@ (800fc48 <__ieee754_pow+0x7a0>)
 800fb94:	4413      	add	r3, r2
 800fb96:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb9a:	4606      	mov	r6, r0
 800fb9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fba0:	460f      	mov	r7, r1
 800fba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fba6:	f7f0 fb3d 	bl	8000224 <__adddf3>
 800fbaa:	4642      	mov	r2, r8
 800fbac:	464b      	mov	r3, r9
 800fbae:	f7f0 fb39 	bl	8000224 <__adddf3>
 800fbb2:	4632      	mov	r2, r6
 800fbb4:	463b      	mov	r3, r7
 800fbb6:	f7f0 fb35 	bl	8000224 <__adddf3>
 800fbba:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800fbbe:	4632      	mov	r2, r6
 800fbc0:	463b      	mov	r3, r7
 800fbc2:	4658      	mov	r0, fp
 800fbc4:	460d      	mov	r5, r1
 800fbc6:	f7f0 fb2b 	bl	8000220 <__aeabi_dsub>
 800fbca:	4642      	mov	r2, r8
 800fbcc:	464b      	mov	r3, r9
 800fbce:	f7f0 fb27 	bl	8000220 <__aeabi_dsub>
 800fbd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fbd6:	f7f0 fb23 	bl	8000220 <__aeabi_dsub>
 800fbda:	465c      	mov	r4, fp
 800fbdc:	e036      	b.n	800fc4c <__ieee754_pow+0x7a4>
 800fbde:	bf00      	nop
 800fbe0:	4a454eef 	.word	0x4a454eef
 800fbe4:	3fca7e28 	.word	0x3fca7e28
 800fbe8:	93c9db65 	.word	0x93c9db65
 800fbec:	3fcd864a 	.word	0x3fcd864a
 800fbf0:	a91d4101 	.word	0xa91d4101
 800fbf4:	3fd17460 	.word	0x3fd17460
 800fbf8:	518f264d 	.word	0x518f264d
 800fbfc:	3fd55555 	.word	0x3fd55555
 800fc00:	db6fabff 	.word	0xdb6fabff
 800fc04:	3fdb6db6 	.word	0x3fdb6db6
 800fc08:	33333303 	.word	0x33333303
 800fc0c:	3fe33333 	.word	0x3fe33333
 800fc10:	e0000000 	.word	0xe0000000
 800fc14:	3feec709 	.word	0x3feec709
 800fc18:	dc3a03fd 	.word	0xdc3a03fd
 800fc1c:	3feec709 	.word	0x3feec709
 800fc20:	145b01f5 	.word	0x145b01f5
 800fc24:	be3e2fe0 	.word	0xbe3e2fe0
 800fc28:	7ff00000 	.word	0x7ff00000
 800fc2c:	43400000 	.word	0x43400000
 800fc30:	0003988e 	.word	0x0003988e
 800fc34:	000bb679 	.word	0x000bb679
 800fc38:	08010d00 	.word	0x08010d00
 800fc3c:	3ff00000 	.word	0x3ff00000
 800fc40:	40080000 	.word	0x40080000
 800fc44:	08010ce0 	.word	0x08010ce0
 800fc48:	08010cf0 	.word	0x08010cf0
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fc54:	e5d6      	b.n	800f804 <__ieee754_pow+0x35c>
 800fc56:	f04f 0a01 	mov.w	sl, #1
 800fc5a:	e65e      	b.n	800f91a <__ieee754_pow+0x472>
 800fc5c:	a3b5      	add	r3, pc, #724	@ (adr r3, 800ff34 <__ieee754_pow+0xa8c>)
 800fc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc62:	4630      	mov	r0, r6
 800fc64:	4639      	mov	r1, r7
 800fc66:	f7f0 fadd 	bl	8000224 <__adddf3>
 800fc6a:	4642      	mov	r2, r8
 800fc6c:	e9cd 0100 	strd	r0, r1, [sp]
 800fc70:	464b      	mov	r3, r9
 800fc72:	4620      	mov	r0, r4
 800fc74:	4629      	mov	r1, r5
 800fc76:	f7f0 fad3 	bl	8000220 <__aeabi_dsub>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc82:	f7f0 ff15 	bl	8000ab0 <__aeabi_dcmpgt>
 800fc86:	2800      	cmp	r0, #0
 800fc88:	f47f adfe 	bne.w	800f888 <__ieee754_pow+0x3e0>
 800fc8c:	4ba2      	ldr	r3, [pc, #648]	@ (800ff18 <__ieee754_pow+0xa70>)
 800fc8e:	e022      	b.n	800fcd6 <__ieee754_pow+0x82e>
 800fc90:	4ca2      	ldr	r4, [pc, #648]	@ (800ff1c <__ieee754_pow+0xa74>)
 800fc92:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fc96:	42a3      	cmp	r3, r4
 800fc98:	d919      	bls.n	800fcce <__ieee754_pow+0x826>
 800fc9a:	4ba1      	ldr	r3, [pc, #644]	@ (800ff20 <__ieee754_pow+0xa78>)
 800fc9c:	440b      	add	r3, r1
 800fc9e:	4303      	orrs	r3, r0
 800fca0:	d009      	beq.n	800fcb6 <__ieee754_pow+0x80e>
 800fca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fca6:	2200      	movs	r2, #0
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f7f0 fee3 	bl	8000a74 <__aeabi_dcmplt>
 800fcae:	3800      	subs	r0, #0
 800fcb0:	bf18      	it	ne
 800fcb2:	2001      	movne	r0, #1
 800fcb4:	e512      	b.n	800f6dc <__ieee754_pow+0x234>
 800fcb6:	4642      	mov	r2, r8
 800fcb8:	464b      	mov	r3, r9
 800fcba:	f7f0 fab1 	bl	8000220 <__aeabi_dsub>
 800fcbe:	4632      	mov	r2, r6
 800fcc0:	463b      	mov	r3, r7
 800fcc2:	f7f0 feeb 	bl	8000a9c <__aeabi_dcmpge>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d1eb      	bne.n	800fca2 <__ieee754_pow+0x7fa>
 800fcca:	4b96      	ldr	r3, [pc, #600]	@ (800ff24 <__ieee754_pow+0xa7c>)
 800fccc:	e003      	b.n	800fcd6 <__ieee754_pow+0x82e>
 800fcce:	4a96      	ldr	r2, [pc, #600]	@ (800ff28 <__ieee754_pow+0xa80>)
 800fcd0:	4293      	cmp	r3, r2
 800fcd2:	f240 80e7 	bls.w	800fea4 <__ieee754_pow+0x9fc>
 800fcd6:	151b      	asrs	r3, r3, #20
 800fcd8:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800fcdc:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800fce0:	fa4a fa03 	asr.w	sl, sl, r3
 800fce4:	44da      	add	sl, fp
 800fce6:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800fcea:	4890      	ldr	r0, [pc, #576]	@ (800ff2c <__ieee754_pow+0xa84>)
 800fcec:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800fcf0:	4108      	asrs	r0, r1
 800fcf2:	ea00 030a 	and.w	r3, r0, sl
 800fcf6:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800fcfa:	f1c1 0114 	rsb	r1, r1, #20
 800fcfe:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800fd02:	fa4a fa01 	asr.w	sl, sl, r1
 800fd06:	f1bb 0f00 	cmp.w	fp, #0
 800fd0a:	4640      	mov	r0, r8
 800fd0c:	4649      	mov	r1, r9
 800fd0e:	f04f 0200 	mov.w	r2, #0
 800fd12:	bfb8      	it	lt
 800fd14:	f1ca 0a00 	rsblt	sl, sl, #0
 800fd18:	f7f0 fa82 	bl	8000220 <__aeabi_dsub>
 800fd1c:	4680      	mov	r8, r0
 800fd1e:	4689      	mov	r9, r1
 800fd20:	4632      	mov	r2, r6
 800fd22:	463b      	mov	r3, r7
 800fd24:	4640      	mov	r0, r8
 800fd26:	4649      	mov	r1, r9
 800fd28:	f7f0 fa7c 	bl	8000224 <__adddf3>
 800fd2c:	2400      	movs	r4, #0
 800fd2e:	a36a      	add	r3, pc, #424	@ (adr r3, 800fed8 <__ieee754_pow+0xa30>)
 800fd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd34:	4620      	mov	r0, r4
 800fd36:	460d      	mov	r5, r1
 800fd38:	f7f0 fc2a 	bl	8000590 <__aeabi_dmul>
 800fd3c:	4642      	mov	r2, r8
 800fd3e:	e9cd 0100 	strd	r0, r1, [sp]
 800fd42:	464b      	mov	r3, r9
 800fd44:	4620      	mov	r0, r4
 800fd46:	4629      	mov	r1, r5
 800fd48:	f7f0 fa6a 	bl	8000220 <__aeabi_dsub>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	460b      	mov	r3, r1
 800fd50:	4630      	mov	r0, r6
 800fd52:	4639      	mov	r1, r7
 800fd54:	f7f0 fa64 	bl	8000220 <__aeabi_dsub>
 800fd58:	a361      	add	r3, pc, #388	@ (adr r3, 800fee0 <__ieee754_pow+0xa38>)
 800fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd5e:	f7f0 fc17 	bl	8000590 <__aeabi_dmul>
 800fd62:	a361      	add	r3, pc, #388	@ (adr r3, 800fee8 <__ieee754_pow+0xa40>)
 800fd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd68:	4680      	mov	r8, r0
 800fd6a:	4689      	mov	r9, r1
 800fd6c:	4620      	mov	r0, r4
 800fd6e:	4629      	mov	r1, r5
 800fd70:	f7f0 fc0e 	bl	8000590 <__aeabi_dmul>
 800fd74:	4602      	mov	r2, r0
 800fd76:	460b      	mov	r3, r1
 800fd78:	4640      	mov	r0, r8
 800fd7a:	4649      	mov	r1, r9
 800fd7c:	f7f0 fa52 	bl	8000224 <__adddf3>
 800fd80:	4604      	mov	r4, r0
 800fd82:	460d      	mov	r5, r1
 800fd84:	4602      	mov	r2, r0
 800fd86:	460b      	mov	r3, r1
 800fd88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd8c:	f7f0 fa4a 	bl	8000224 <__adddf3>
 800fd90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd94:	4680      	mov	r8, r0
 800fd96:	4689      	mov	r9, r1
 800fd98:	f7f0 fa42 	bl	8000220 <__aeabi_dsub>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	460b      	mov	r3, r1
 800fda0:	4620      	mov	r0, r4
 800fda2:	4629      	mov	r1, r5
 800fda4:	f7f0 fa3c 	bl	8000220 <__aeabi_dsub>
 800fda8:	4642      	mov	r2, r8
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460f      	mov	r7, r1
 800fdae:	464b      	mov	r3, r9
 800fdb0:	4640      	mov	r0, r8
 800fdb2:	4649      	mov	r1, r9
 800fdb4:	f7f0 fbec 	bl	8000590 <__aeabi_dmul>
 800fdb8:	a34d      	add	r3, pc, #308	@ (adr r3, 800fef0 <__ieee754_pow+0xa48>)
 800fdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	460d      	mov	r5, r1
 800fdc2:	f7f0 fbe5 	bl	8000590 <__aeabi_dmul>
 800fdc6:	a34c      	add	r3, pc, #304	@ (adr r3, 800fef8 <__ieee754_pow+0xa50>)
 800fdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdcc:	f7f0 fa28 	bl	8000220 <__aeabi_dsub>
 800fdd0:	4622      	mov	r2, r4
 800fdd2:	462b      	mov	r3, r5
 800fdd4:	f7f0 fbdc 	bl	8000590 <__aeabi_dmul>
 800fdd8:	a349      	add	r3, pc, #292	@ (adr r3, 800ff00 <__ieee754_pow+0xa58>)
 800fdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdde:	f7f0 fa21 	bl	8000224 <__adddf3>
 800fde2:	4622      	mov	r2, r4
 800fde4:	462b      	mov	r3, r5
 800fde6:	f7f0 fbd3 	bl	8000590 <__aeabi_dmul>
 800fdea:	a347      	add	r3, pc, #284	@ (adr r3, 800ff08 <__ieee754_pow+0xa60>)
 800fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf0:	f7f0 fa16 	bl	8000220 <__aeabi_dsub>
 800fdf4:	4622      	mov	r2, r4
 800fdf6:	462b      	mov	r3, r5
 800fdf8:	f7f0 fbca 	bl	8000590 <__aeabi_dmul>
 800fdfc:	a344      	add	r3, pc, #272	@ (adr r3, 800ff10 <__ieee754_pow+0xa68>)
 800fdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe02:	f7f0 fa0f 	bl	8000224 <__adddf3>
 800fe06:	4622      	mov	r2, r4
 800fe08:	462b      	mov	r3, r5
 800fe0a:	f7f0 fbc1 	bl	8000590 <__aeabi_dmul>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	460b      	mov	r3, r1
 800fe12:	4640      	mov	r0, r8
 800fe14:	4649      	mov	r1, r9
 800fe16:	f7f0 fa03 	bl	8000220 <__aeabi_dsub>
 800fe1a:	4604      	mov	r4, r0
 800fe1c:	460d      	mov	r5, r1
 800fe1e:	4602      	mov	r2, r0
 800fe20:	460b      	mov	r3, r1
 800fe22:	4640      	mov	r0, r8
 800fe24:	4649      	mov	r1, r9
 800fe26:	f7f0 fbb3 	bl	8000590 <__aeabi_dmul>
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	e9cd 0100 	strd	r0, r1, [sp]
 800fe30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fe34:	4620      	mov	r0, r4
 800fe36:	4629      	mov	r1, r5
 800fe38:	f7f0 f9f2 	bl	8000220 <__aeabi_dsub>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	460b      	mov	r3, r1
 800fe40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe44:	f7f0 fcce 	bl	80007e4 <__aeabi_ddiv>
 800fe48:	4632      	mov	r2, r6
 800fe4a:	4604      	mov	r4, r0
 800fe4c:	460d      	mov	r5, r1
 800fe4e:	463b      	mov	r3, r7
 800fe50:	4640      	mov	r0, r8
 800fe52:	4649      	mov	r1, r9
 800fe54:	f7f0 fb9c 	bl	8000590 <__aeabi_dmul>
 800fe58:	4632      	mov	r2, r6
 800fe5a:	463b      	mov	r3, r7
 800fe5c:	f7f0 f9e2 	bl	8000224 <__adddf3>
 800fe60:	4602      	mov	r2, r0
 800fe62:	460b      	mov	r3, r1
 800fe64:	4620      	mov	r0, r4
 800fe66:	4629      	mov	r1, r5
 800fe68:	f7f0 f9da 	bl	8000220 <__aeabi_dsub>
 800fe6c:	4642      	mov	r2, r8
 800fe6e:	464b      	mov	r3, r9
 800fe70:	f7f0 f9d6 	bl	8000220 <__aeabi_dsub>
 800fe74:	460b      	mov	r3, r1
 800fe76:	4602      	mov	r2, r0
 800fe78:	492d      	ldr	r1, [pc, #180]	@ (800ff30 <__ieee754_pow+0xa88>)
 800fe7a:	2000      	movs	r0, #0
 800fe7c:	f7f0 f9d0 	bl	8000220 <__aeabi_dsub>
 800fe80:	ec41 0b10 	vmov	d0, r0, r1
 800fe84:	ee10 3a90 	vmov	r3, s1
 800fe88:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800fe8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fe90:	da0b      	bge.n	800feaa <__ieee754_pow+0xa02>
 800fe92:	4650      	mov	r0, sl
 800fe94:	f000 fb20 	bl	80104d8 <scalbn>
 800fe98:	ec51 0b10 	vmov	r0, r1, d0
 800fe9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fea0:	f7ff bb6d 	b.w	800f57e <__ieee754_pow+0xd6>
 800fea4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800fea8:	e73a      	b.n	800fd20 <__ieee754_pow+0x878>
 800feaa:	ec51 0b10 	vmov	r0, r1, d0
 800feae:	4619      	mov	r1, r3
 800feb0:	e7f4      	b.n	800fe9c <__ieee754_pow+0x9f4>
 800feb2:	491f      	ldr	r1, [pc, #124]	@ (800ff30 <__ieee754_pow+0xa88>)
 800feb4:	2000      	movs	r0, #0
 800feb6:	f7ff bb14 	b.w	800f4e2 <__ieee754_pow+0x3a>
 800feba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800febe:	f7ff bb10 	b.w	800f4e2 <__ieee754_pow+0x3a>
 800fec2:	4630      	mov	r0, r6
 800fec4:	4639      	mov	r1, r7
 800fec6:	f7ff bb0c 	b.w	800f4e2 <__ieee754_pow+0x3a>
 800feca:	460c      	mov	r4, r1
 800fecc:	f7ff bb69 	b.w	800f5a2 <__ieee754_pow+0xfa>
 800fed0:	2400      	movs	r4, #0
 800fed2:	f7ff bb4b 	b.w	800f56c <__ieee754_pow+0xc4>
 800fed6:	bf00      	nop
 800fed8:	00000000 	.word	0x00000000
 800fedc:	3fe62e43 	.word	0x3fe62e43
 800fee0:	fefa39ef 	.word	0xfefa39ef
 800fee4:	3fe62e42 	.word	0x3fe62e42
 800fee8:	0ca86c39 	.word	0x0ca86c39
 800feec:	be205c61 	.word	0xbe205c61
 800fef0:	72bea4d0 	.word	0x72bea4d0
 800fef4:	3e663769 	.word	0x3e663769
 800fef8:	c5d26bf1 	.word	0xc5d26bf1
 800fefc:	3ebbbd41 	.word	0x3ebbbd41
 800ff00:	af25de2c 	.word	0xaf25de2c
 800ff04:	3f11566a 	.word	0x3f11566a
 800ff08:	16bebd93 	.word	0x16bebd93
 800ff0c:	3f66c16c 	.word	0x3f66c16c
 800ff10:	5555553e 	.word	0x5555553e
 800ff14:	3fc55555 	.word	0x3fc55555
 800ff18:	40900000 	.word	0x40900000
 800ff1c:	4090cbff 	.word	0x4090cbff
 800ff20:	3f6f3400 	.word	0x3f6f3400
 800ff24:	4090cc00 	.word	0x4090cc00
 800ff28:	3fe00000 	.word	0x3fe00000
 800ff2c:	fff00000 	.word	0xfff00000
 800ff30:	3ff00000 	.word	0x3ff00000
 800ff34:	652b82fe 	.word	0x652b82fe
 800ff38:	3c971547 	.word	0x3c971547

0800ff3c <fabs>:
 800ff3c:	ec51 0b10 	vmov	r0, r1, d0
 800ff40:	4602      	mov	r2, r0
 800ff42:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ff46:	ec43 2b10 	vmov	d0, r2, r3
 800ff4a:	4770      	bx	lr

0800ff4c <__kernel_cosf>:
 800ff4c:	ee10 3a10 	vmov	r3, s0
 800ff50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff54:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ff58:	eef0 6a40 	vmov.f32	s13, s0
 800ff5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ff60:	d204      	bcs.n	800ff6c <__kernel_cosf+0x20>
 800ff62:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ff66:	ee17 2a90 	vmov	r2, s15
 800ff6a:	b342      	cbz	r2, 800ffbe <__kernel_cosf+0x72>
 800ff6c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ff70:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ffdc <__kernel_cosf+0x90>
 800ff74:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ffe0 <__kernel_cosf+0x94>
 800ff78:	4a1a      	ldr	r2, [pc, #104]	@ (800ffe4 <__kernel_cosf+0x98>)
 800ff7a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ffe8 <__kernel_cosf+0x9c>
 800ff84:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ff88:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ffec <__kernel_cosf+0xa0>
 800ff8c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ff90:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800fff0 <__kernel_cosf+0xa4>
 800ff94:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ff98:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800fff4 <__kernel_cosf+0xa8>
 800ff9c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ffa0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ffa4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ffa8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ffac:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ffb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ffb4:	d804      	bhi.n	800ffc0 <__kernel_cosf+0x74>
 800ffb6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ffba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ffbe:	4770      	bx	lr
 800ffc0:	4a0d      	ldr	r2, [pc, #52]	@ (800fff8 <__kernel_cosf+0xac>)
 800ffc2:	4293      	cmp	r3, r2
 800ffc4:	bf9a      	itte	ls
 800ffc6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ffca:	ee07 3a10 	vmovls	s14, r3
 800ffce:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ffd2:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ffd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffda:	e7ec      	b.n	800ffb6 <__kernel_cosf+0x6a>
 800ffdc:	ad47d74e 	.word	0xad47d74e
 800ffe0:	310f74f6 	.word	0x310f74f6
 800ffe4:	3e999999 	.word	0x3e999999
 800ffe8:	b493f27c 	.word	0xb493f27c
 800ffec:	37d00d01 	.word	0x37d00d01
 800fff0:	bab60b61 	.word	0xbab60b61
 800fff4:	3d2aaaab 	.word	0x3d2aaaab
 800fff8:	3f480000 	.word	0x3f480000

0800fffc <__kernel_sinf>:
 800fffc:	ee10 3a10 	vmov	r3, s0
 8010000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010004:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010008:	d204      	bcs.n	8010014 <__kernel_sinf+0x18>
 801000a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801000e:	ee17 3a90 	vmov	r3, s15
 8010012:	b35b      	cbz	r3, 801006c <__kernel_sinf+0x70>
 8010014:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010018:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010070 <__kernel_sinf+0x74>
 801001c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8010074 <__kernel_sinf+0x78>
 8010020:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010024:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010078 <__kernel_sinf+0x7c>
 8010028:	eee6 7a07 	vfma.f32	s15, s12, s14
 801002c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801007c <__kernel_sinf+0x80>
 8010030:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010034:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010080 <__kernel_sinf+0x84>
 8010038:	ee60 6a07 	vmul.f32	s13, s0, s14
 801003c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010040:	b930      	cbnz	r0, 8010050 <__kernel_sinf+0x54>
 8010042:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8010084 <__kernel_sinf+0x88>
 8010046:	eea7 6a27 	vfma.f32	s12, s14, s15
 801004a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801004e:	4770      	bx	lr
 8010050:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010054:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010058:	eee0 7a86 	vfma.f32	s15, s1, s12
 801005c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010060:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010088 <__kernel_sinf+0x8c>
 8010064:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010068:	ee30 0a60 	vsub.f32	s0, s0, s1
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	2f2ec9d3 	.word	0x2f2ec9d3
 8010074:	b2d72f34 	.word	0xb2d72f34
 8010078:	3638ef1b 	.word	0x3638ef1b
 801007c:	b9500d01 	.word	0xb9500d01
 8010080:	3c088889 	.word	0x3c088889
 8010084:	be2aaaab 	.word	0xbe2aaaab
 8010088:	3e2aaaab 	.word	0x3e2aaaab

0801008c <__ieee754_acosf>:
 801008c:	b508      	push	{r3, lr}
 801008e:	ee10 3a10 	vmov	r3, s0
 8010092:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010096:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801009a:	ed2d 8b0c 	vpush	{d8-d13}
 801009e:	d10a      	bne.n	80100b6 <__ieee754_acosf+0x2a>
 80100a0:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8010234 <__ieee754_acosf+0x1a8>
 80100a4:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8010238 <__ieee754_acosf+0x1ac>
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	bfc8      	it	gt
 80100ac:	eeb0 0a67 	vmovgt.f32	s0, s15
 80100b0:	ecbd 8b0c 	vpop	{d8-d13}
 80100b4:	bd08      	pop	{r3, pc}
 80100b6:	d904      	bls.n	80100c2 <__ieee754_acosf+0x36>
 80100b8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80100bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80100c0:	e7f6      	b.n	80100b0 <__ieee754_acosf+0x24>
 80100c2:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80100c6:	d23c      	bcs.n	8010142 <__ieee754_acosf+0xb6>
 80100c8:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80100cc:	f240 80af 	bls.w	801022e <__ieee754_acosf+0x1a2>
 80100d0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80100d4:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801023c <__ieee754_acosf+0x1b0>
 80100d8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010240 <__ieee754_acosf+0x1b4>
 80100dc:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8010244 <__ieee754_acosf+0x1b8>
 80100e0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80100e4:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8010248 <__ieee754_acosf+0x1bc>
 80100e8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100ec:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 801024c <__ieee754_acosf+0x1c0>
 80100f0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80100f4:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8010250 <__ieee754_acosf+0x1c4>
 80100f8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80100fc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8010254 <__ieee754_acosf+0x1c8>
 8010100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010104:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010258 <__ieee754_acosf+0x1cc>
 8010108:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801010c:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801025c <__ieee754_acosf+0x1d0>
 8010110:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010114:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8010260 <__ieee754_acosf+0x1d4>
 8010118:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801011c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010120:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010128:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8010264 <__ieee754_acosf+0x1d8>
 801012c:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010130:	eee0 7a46 	vfms.f32	s15, s0, s12
 8010134:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010138:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8010268 <__ieee754_acosf+0x1dc>
 801013c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010140:	e7b6      	b.n	80100b0 <__ieee754_acosf+0x24>
 8010142:	2b00      	cmp	r3, #0
 8010144:	eddf da3d 	vldr	s27, [pc, #244]	@ 801023c <__ieee754_acosf+0x1b0>
 8010148:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8010240 <__ieee754_acosf+0x1b4>
 801014c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8010248 <__ieee754_acosf+0x1bc>
 8010150:	eddf ba3e 	vldr	s23, [pc, #248]	@ 801024c <__ieee754_acosf+0x1c0>
 8010154:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8010250 <__ieee754_acosf+0x1c4>
 8010158:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8010254 <__ieee754_acosf+0x1c8>
 801015c:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8010258 <__ieee754_acosf+0x1cc>
 8010160:	eddf aa38 	vldr	s21, [pc, #224]	@ 8010244 <__ieee754_acosf+0x1b8>
 8010164:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 801025c <__ieee754_acosf+0x1d0>
 8010168:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8010260 <__ieee754_acosf+0x1d4>
 801016c:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010170:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010174:	da28      	bge.n	80101c8 <__ieee754_acosf+0x13c>
 8010176:	ee30 8a09 	vadd.f32	s16, s0, s18
 801017a:	ee28 0a27 	vmul.f32	s0, s16, s15
 801017e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8010182:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8010186:	eeac ca80 	vfma.f32	s24, s25, s0
 801018a:	eeaa aa80 	vfma.f32	s20, s21, s0
 801018e:	eeec ba00 	vfma.f32	s23, s24, s0
 8010192:	eeea 9a00 	vfma.f32	s19, s20, s0
 8010196:	eeab ba80 	vfma.f32	s22, s23, s0
 801019a:	eea9 9a80 	vfma.f32	s18, s19, s0
 801019e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80101a2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80101a6:	f7ff f955 	bl	800f454 <__ieee754_sqrtf>
 80101aa:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80101ae:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 801026c <__ieee754_acosf+0x1e0>
 80101b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80101b6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80101ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80101be:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010270 <__ieee754_acosf+0x1e4>
 80101c2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80101c6:	e773      	b.n	80100b0 <__ieee754_acosf+0x24>
 80101c8:	ee39 8a40 	vsub.f32	s16, s18, s0
 80101cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80101d0:	eeb0 0a48 	vmov.f32	s0, s16
 80101d4:	f7ff f93e 	bl	800f454 <__ieee754_sqrtf>
 80101d8:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80101dc:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80101e0:	eeac ca88 	vfma.f32	s24, s25, s16
 80101e4:	eeaa aa88 	vfma.f32	s20, s21, s16
 80101e8:	eeec ba08 	vfma.f32	s23, s24, s16
 80101ec:	ee10 3a10 	vmov	r3, s0
 80101f0:	eeab ba88 	vfma.f32	s22, s23, s16
 80101f4:	f36f 030b 	bfc	r3, #0, #12
 80101f8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80101fc:	ee07 3a90 	vmov	s15, r3
 8010200:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8010204:	eeb0 6a48 	vmov.f32	s12, s16
 8010208:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801020c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010210:	ee70 6a27 	vadd.f32	s13, s0, s15
 8010214:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010218:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801021c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010220:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010224:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010228:	ee30 0a00 	vadd.f32	s0, s0, s0
 801022c:	e740      	b.n	80100b0 <__ieee754_acosf+0x24>
 801022e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8010274 <__ieee754_acosf+0x1e8>
 8010232:	e73d      	b.n	80100b0 <__ieee754_acosf+0x24>
 8010234:	40490fdb 	.word	0x40490fdb
 8010238:	00000000 	.word	0x00000000
 801023c:	3811ef08 	.word	0x3811ef08
 8010240:	3a4f7f04 	.word	0x3a4f7f04
 8010244:	bf303361 	.word	0xbf303361
 8010248:	bd241146 	.word	0xbd241146
 801024c:	3e4e0aa8 	.word	0x3e4e0aa8
 8010250:	bea6b090 	.word	0xbea6b090
 8010254:	3e2aaaab 	.word	0x3e2aaaab
 8010258:	3d9dc62e 	.word	0x3d9dc62e
 801025c:	4001572d 	.word	0x4001572d
 8010260:	c019d139 	.word	0xc019d139
 8010264:	33a22168 	.word	0x33a22168
 8010268:	3fc90fda 	.word	0x3fc90fda
 801026c:	b3a22168 	.word	0xb3a22168
 8010270:	40490fda 	.word	0x40490fda
 8010274:	3fc90fdb 	.word	0x3fc90fdb

08010278 <__ieee754_rem_pio2f>:
 8010278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801027a:	ee10 6a10 	vmov	r6, s0
 801027e:	4b88      	ldr	r3, [pc, #544]	@ (80104a0 <__ieee754_rem_pio2f+0x228>)
 8010280:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8010284:	429d      	cmp	r5, r3
 8010286:	b087      	sub	sp, #28
 8010288:	4604      	mov	r4, r0
 801028a:	d805      	bhi.n	8010298 <__ieee754_rem_pio2f+0x20>
 801028c:	2300      	movs	r3, #0
 801028e:	ed80 0a00 	vstr	s0, [r0]
 8010292:	6043      	str	r3, [r0, #4]
 8010294:	2000      	movs	r0, #0
 8010296:	e022      	b.n	80102de <__ieee754_rem_pio2f+0x66>
 8010298:	4b82      	ldr	r3, [pc, #520]	@ (80104a4 <__ieee754_rem_pio2f+0x22c>)
 801029a:	429d      	cmp	r5, r3
 801029c:	d83a      	bhi.n	8010314 <__ieee754_rem_pio2f+0x9c>
 801029e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80102a2:	2e00      	cmp	r6, #0
 80102a4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80104a8 <__ieee754_rem_pio2f+0x230>
 80102a8:	4a80      	ldr	r2, [pc, #512]	@ (80104ac <__ieee754_rem_pio2f+0x234>)
 80102aa:	f023 030f 	bic.w	r3, r3, #15
 80102ae:	dd18      	ble.n	80102e2 <__ieee754_rem_pio2f+0x6a>
 80102b0:	4293      	cmp	r3, r2
 80102b2:	ee70 7a47 	vsub.f32	s15, s0, s14
 80102b6:	bf09      	itett	eq
 80102b8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80104b0 <__ieee754_rem_pio2f+0x238>
 80102bc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80104b4 <__ieee754_rem_pio2f+0x23c>
 80102c0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80104b8 <__ieee754_rem_pio2f+0x240>
 80102c4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80102c8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80102cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102d0:	ed80 7a00 	vstr	s14, [r0]
 80102d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80102d8:	edc0 7a01 	vstr	s15, [r0, #4]
 80102dc:	2001      	movs	r0, #1
 80102de:	b007      	add	sp, #28
 80102e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102e2:	4293      	cmp	r3, r2
 80102e4:	ee70 7a07 	vadd.f32	s15, s0, s14
 80102e8:	bf09      	itett	eq
 80102ea:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80104b0 <__ieee754_rem_pio2f+0x238>
 80102ee:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80104b4 <__ieee754_rem_pio2f+0x23c>
 80102f2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80104b8 <__ieee754_rem_pio2f+0x240>
 80102f6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80102fa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80102fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010302:	ed80 7a00 	vstr	s14, [r0]
 8010306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801030a:	edc0 7a01 	vstr	s15, [r0, #4]
 801030e:	f04f 30ff 	mov.w	r0, #4294967295
 8010312:	e7e4      	b.n	80102de <__ieee754_rem_pio2f+0x66>
 8010314:	4b69      	ldr	r3, [pc, #420]	@ (80104bc <__ieee754_rem_pio2f+0x244>)
 8010316:	429d      	cmp	r5, r3
 8010318:	d873      	bhi.n	8010402 <__ieee754_rem_pio2f+0x18a>
 801031a:	f7fe ffad 	bl	800f278 <fabsf>
 801031e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80104c0 <__ieee754_rem_pio2f+0x248>
 8010322:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010326:	eee0 7a07 	vfma.f32	s15, s0, s14
 801032a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801032e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010332:	ee17 0a90 	vmov	r0, s15
 8010336:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104a8 <__ieee754_rem_pio2f+0x230>
 801033a:	eea7 0a67 	vfms.f32	s0, s14, s15
 801033e:	281f      	cmp	r0, #31
 8010340:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80104b4 <__ieee754_rem_pio2f+0x23c>
 8010344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010348:	eeb1 6a47 	vneg.f32	s12, s14
 801034c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010350:	ee16 1a90 	vmov	r1, s13
 8010354:	dc09      	bgt.n	801036a <__ieee754_rem_pio2f+0xf2>
 8010356:	4a5b      	ldr	r2, [pc, #364]	@ (80104c4 <__ieee754_rem_pio2f+0x24c>)
 8010358:	1e47      	subs	r7, r0, #1
 801035a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801035e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010362:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010366:	4293      	cmp	r3, r2
 8010368:	d107      	bne.n	801037a <__ieee754_rem_pio2f+0x102>
 801036a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801036e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010372:	2a08      	cmp	r2, #8
 8010374:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010378:	dc14      	bgt.n	80103a4 <__ieee754_rem_pio2f+0x12c>
 801037a:	6021      	str	r1, [r4, #0]
 801037c:	ed94 7a00 	vldr	s14, [r4]
 8010380:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010384:	2e00      	cmp	r6, #0
 8010386:	ee30 0a67 	vsub.f32	s0, s0, s15
 801038a:	ed84 0a01 	vstr	s0, [r4, #4]
 801038e:	daa6      	bge.n	80102de <__ieee754_rem_pio2f+0x66>
 8010390:	eeb1 7a47 	vneg.f32	s14, s14
 8010394:	eeb1 0a40 	vneg.f32	s0, s0
 8010398:	ed84 7a00 	vstr	s14, [r4]
 801039c:	ed84 0a01 	vstr	s0, [r4, #4]
 80103a0:	4240      	negs	r0, r0
 80103a2:	e79c      	b.n	80102de <__ieee754_rem_pio2f+0x66>
 80103a4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80104b0 <__ieee754_rem_pio2f+0x238>
 80103a8:	eef0 6a40 	vmov.f32	s13, s0
 80103ac:	eee6 6a25 	vfma.f32	s13, s12, s11
 80103b0:	ee70 7a66 	vsub.f32	s15, s0, s13
 80103b4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80103b8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80104b8 <__ieee754_rem_pio2f+0x240>
 80103bc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80103c0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80103c4:	ee15 2a90 	vmov	r2, s11
 80103c8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80103cc:	1a5b      	subs	r3, r3, r1
 80103ce:	2b19      	cmp	r3, #25
 80103d0:	dc04      	bgt.n	80103dc <__ieee754_rem_pio2f+0x164>
 80103d2:	edc4 5a00 	vstr	s11, [r4]
 80103d6:	eeb0 0a66 	vmov.f32	s0, s13
 80103da:	e7cf      	b.n	801037c <__ieee754_rem_pio2f+0x104>
 80103dc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80104c8 <__ieee754_rem_pio2f+0x250>
 80103e0:	eeb0 0a66 	vmov.f32	s0, s13
 80103e4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80103e8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80103ec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80104cc <__ieee754_rem_pio2f+0x254>
 80103f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80103f4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80103f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80103fc:	ed84 7a00 	vstr	s14, [r4]
 8010400:	e7bc      	b.n	801037c <__ieee754_rem_pio2f+0x104>
 8010402:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010406:	d306      	bcc.n	8010416 <__ieee754_rem_pio2f+0x19e>
 8010408:	ee70 7a40 	vsub.f32	s15, s0, s0
 801040c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010410:	edc0 7a00 	vstr	s15, [r0]
 8010414:	e73e      	b.n	8010294 <__ieee754_rem_pio2f+0x1c>
 8010416:	15ea      	asrs	r2, r5, #23
 8010418:	3a86      	subs	r2, #134	@ 0x86
 801041a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801041e:	ee07 3a90 	vmov	s15, r3
 8010422:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010426:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80104d0 <__ieee754_rem_pio2f+0x258>
 801042a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801042e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010432:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010436:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801043a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801043e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010442:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010446:	ed8d 7a04 	vstr	s14, [sp, #16]
 801044a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801044e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010456:	edcd 7a05 	vstr	s15, [sp, #20]
 801045a:	d11e      	bne.n	801049a <__ieee754_rem_pio2f+0x222>
 801045c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010464:	bf0c      	ite	eq
 8010466:	2301      	moveq	r3, #1
 8010468:	2302      	movne	r3, #2
 801046a:	491a      	ldr	r1, [pc, #104]	@ (80104d4 <__ieee754_rem_pio2f+0x25c>)
 801046c:	9101      	str	r1, [sp, #4]
 801046e:	2102      	movs	r1, #2
 8010470:	9100      	str	r1, [sp, #0]
 8010472:	a803      	add	r0, sp, #12
 8010474:	4621      	mov	r1, r4
 8010476:	f000 f94d 	bl	8010714 <__kernel_rem_pio2f>
 801047a:	2e00      	cmp	r6, #0
 801047c:	f6bf af2f 	bge.w	80102de <__ieee754_rem_pio2f+0x66>
 8010480:	edd4 7a00 	vldr	s15, [r4]
 8010484:	eef1 7a67 	vneg.f32	s15, s15
 8010488:	edc4 7a00 	vstr	s15, [r4]
 801048c:	edd4 7a01 	vldr	s15, [r4, #4]
 8010490:	eef1 7a67 	vneg.f32	s15, s15
 8010494:	edc4 7a01 	vstr	s15, [r4, #4]
 8010498:	e782      	b.n	80103a0 <__ieee754_rem_pio2f+0x128>
 801049a:	2303      	movs	r3, #3
 801049c:	e7e5      	b.n	801046a <__ieee754_rem_pio2f+0x1f2>
 801049e:	bf00      	nop
 80104a0:	3f490fd8 	.word	0x3f490fd8
 80104a4:	4016cbe3 	.word	0x4016cbe3
 80104a8:	3fc90f80 	.word	0x3fc90f80
 80104ac:	3fc90fd0 	.word	0x3fc90fd0
 80104b0:	37354400 	.word	0x37354400
 80104b4:	37354443 	.word	0x37354443
 80104b8:	2e85a308 	.word	0x2e85a308
 80104bc:	43490f80 	.word	0x43490f80
 80104c0:	3f22f984 	.word	0x3f22f984
 80104c4:	08010d10 	.word	0x08010d10
 80104c8:	2e85a300 	.word	0x2e85a300
 80104cc:	248d3132 	.word	0x248d3132
 80104d0:	43800000 	.word	0x43800000
 80104d4:	08010d90 	.word	0x08010d90

080104d8 <scalbn>:
 80104d8:	b570      	push	{r4, r5, r6, lr}
 80104da:	ec55 4b10 	vmov	r4, r5, d0
 80104de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80104e2:	4606      	mov	r6, r0
 80104e4:	462b      	mov	r3, r5
 80104e6:	b991      	cbnz	r1, 801050e <scalbn+0x36>
 80104e8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80104ec:	4323      	orrs	r3, r4
 80104ee:	d03b      	beq.n	8010568 <scalbn+0x90>
 80104f0:	4b33      	ldr	r3, [pc, #204]	@ (80105c0 <scalbn+0xe8>)
 80104f2:	4620      	mov	r0, r4
 80104f4:	4629      	mov	r1, r5
 80104f6:	2200      	movs	r2, #0
 80104f8:	f7f0 f84a 	bl	8000590 <__aeabi_dmul>
 80104fc:	4b31      	ldr	r3, [pc, #196]	@ (80105c4 <scalbn+0xec>)
 80104fe:	429e      	cmp	r6, r3
 8010500:	4604      	mov	r4, r0
 8010502:	460d      	mov	r5, r1
 8010504:	da0f      	bge.n	8010526 <scalbn+0x4e>
 8010506:	a326      	add	r3, pc, #152	@ (adr r3, 80105a0 <scalbn+0xc8>)
 8010508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050c:	e01e      	b.n	801054c <scalbn+0x74>
 801050e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010512:	4291      	cmp	r1, r2
 8010514:	d10b      	bne.n	801052e <scalbn+0x56>
 8010516:	4622      	mov	r2, r4
 8010518:	4620      	mov	r0, r4
 801051a:	4629      	mov	r1, r5
 801051c:	f7ef fe82 	bl	8000224 <__adddf3>
 8010520:	4604      	mov	r4, r0
 8010522:	460d      	mov	r5, r1
 8010524:	e020      	b.n	8010568 <scalbn+0x90>
 8010526:	460b      	mov	r3, r1
 8010528:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801052c:	3936      	subs	r1, #54	@ 0x36
 801052e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010532:	4296      	cmp	r6, r2
 8010534:	dd0d      	ble.n	8010552 <scalbn+0x7a>
 8010536:	2d00      	cmp	r5, #0
 8010538:	a11b      	add	r1, pc, #108	@ (adr r1, 80105a8 <scalbn+0xd0>)
 801053a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801053e:	da02      	bge.n	8010546 <scalbn+0x6e>
 8010540:	a11b      	add	r1, pc, #108	@ (adr r1, 80105b0 <scalbn+0xd8>)
 8010542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010546:	a318      	add	r3, pc, #96	@ (adr r3, 80105a8 <scalbn+0xd0>)
 8010548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054c:	f7f0 f820 	bl	8000590 <__aeabi_dmul>
 8010550:	e7e6      	b.n	8010520 <scalbn+0x48>
 8010552:	1872      	adds	r2, r6, r1
 8010554:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010558:	428a      	cmp	r2, r1
 801055a:	dcec      	bgt.n	8010536 <scalbn+0x5e>
 801055c:	2a00      	cmp	r2, #0
 801055e:	dd06      	ble.n	801056e <scalbn+0x96>
 8010560:	f36f 531e 	bfc	r3, #20, #11
 8010564:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010568:	ec45 4b10 	vmov	d0, r4, r5
 801056c:	bd70      	pop	{r4, r5, r6, pc}
 801056e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010572:	da08      	bge.n	8010586 <scalbn+0xae>
 8010574:	2d00      	cmp	r5, #0
 8010576:	a10a      	add	r1, pc, #40	@ (adr r1, 80105a0 <scalbn+0xc8>)
 8010578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801057c:	dac3      	bge.n	8010506 <scalbn+0x2e>
 801057e:	a10e      	add	r1, pc, #56	@ (adr r1, 80105b8 <scalbn+0xe0>)
 8010580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010584:	e7bf      	b.n	8010506 <scalbn+0x2e>
 8010586:	3236      	adds	r2, #54	@ 0x36
 8010588:	f36f 531e 	bfc	r3, #20, #11
 801058c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010590:	4620      	mov	r0, r4
 8010592:	4b0d      	ldr	r3, [pc, #52]	@ (80105c8 <scalbn+0xf0>)
 8010594:	4629      	mov	r1, r5
 8010596:	2200      	movs	r2, #0
 8010598:	e7d8      	b.n	801054c <scalbn+0x74>
 801059a:	bf00      	nop
 801059c:	f3af 8000 	nop.w
 80105a0:	c2f8f359 	.word	0xc2f8f359
 80105a4:	01a56e1f 	.word	0x01a56e1f
 80105a8:	8800759c 	.word	0x8800759c
 80105ac:	7e37e43c 	.word	0x7e37e43c
 80105b0:	8800759c 	.word	0x8800759c
 80105b4:	fe37e43c 	.word	0xfe37e43c
 80105b8:	c2f8f359 	.word	0xc2f8f359
 80105bc:	81a56e1f 	.word	0x81a56e1f
 80105c0:	43500000 	.word	0x43500000
 80105c4:	ffff3cb0 	.word	0xffff3cb0
 80105c8:	3c900000 	.word	0x3c900000

080105cc <with_errno>:
 80105cc:	b510      	push	{r4, lr}
 80105ce:	ed2d 8b02 	vpush	{d8}
 80105d2:	eeb0 8a40 	vmov.f32	s16, s0
 80105d6:	eef0 8a60 	vmov.f32	s17, s1
 80105da:	4604      	mov	r4, r0
 80105dc:	f7fe fcea 	bl	800efb4 <__errno>
 80105e0:	eeb0 0a48 	vmov.f32	s0, s16
 80105e4:	eef0 0a68 	vmov.f32	s1, s17
 80105e8:	ecbd 8b02 	vpop	{d8}
 80105ec:	6004      	str	r4, [r0, #0]
 80105ee:	bd10      	pop	{r4, pc}

080105f0 <xflow>:
 80105f0:	4603      	mov	r3, r0
 80105f2:	b507      	push	{r0, r1, r2, lr}
 80105f4:	ec51 0b10 	vmov	r0, r1, d0
 80105f8:	b183      	cbz	r3, 801061c <xflow+0x2c>
 80105fa:	4602      	mov	r2, r0
 80105fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010600:	e9cd 2300 	strd	r2, r3, [sp]
 8010604:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010608:	f7ef ffc2 	bl	8000590 <__aeabi_dmul>
 801060c:	ec41 0b10 	vmov	d0, r0, r1
 8010610:	2022      	movs	r0, #34	@ 0x22
 8010612:	b003      	add	sp, #12
 8010614:	f85d eb04 	ldr.w	lr, [sp], #4
 8010618:	f7ff bfd8 	b.w	80105cc <with_errno>
 801061c:	4602      	mov	r2, r0
 801061e:	460b      	mov	r3, r1
 8010620:	e7ee      	b.n	8010600 <xflow+0x10>
 8010622:	0000      	movs	r0, r0
 8010624:	0000      	movs	r0, r0
	...

08010628 <__math_uflow>:
 8010628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010630 <__math_uflow+0x8>
 801062c:	f7ff bfe0 	b.w	80105f0 <xflow>
 8010630:	00000000 	.word	0x00000000
 8010634:	10000000 	.word	0x10000000

08010638 <__math_oflow>:
 8010638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010640 <__math_oflow+0x8>
 801063c:	f7ff bfd8 	b.w	80105f0 <xflow>
 8010640:	00000000 	.word	0x00000000
 8010644:	70000000 	.word	0x70000000

08010648 <scalbnf>:
 8010648:	ee10 3a10 	vmov	r3, s0
 801064c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010650:	d02b      	beq.n	80106aa <scalbnf+0x62>
 8010652:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010656:	d302      	bcc.n	801065e <scalbnf+0x16>
 8010658:	ee30 0a00 	vadd.f32	s0, s0, s0
 801065c:	4770      	bx	lr
 801065e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010662:	d123      	bne.n	80106ac <scalbnf+0x64>
 8010664:	4b24      	ldr	r3, [pc, #144]	@ (80106f8 <scalbnf+0xb0>)
 8010666:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80106fc <scalbnf+0xb4>
 801066a:	4298      	cmp	r0, r3
 801066c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010670:	db17      	blt.n	80106a2 <scalbnf+0x5a>
 8010672:	ee10 3a10 	vmov	r3, s0
 8010676:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801067a:	3a19      	subs	r2, #25
 801067c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010680:	4288      	cmp	r0, r1
 8010682:	dd15      	ble.n	80106b0 <scalbnf+0x68>
 8010684:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010700 <scalbnf+0xb8>
 8010688:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010704 <scalbnf+0xbc>
 801068c:	ee10 3a10 	vmov	r3, s0
 8010690:	eeb0 7a67 	vmov.f32	s14, s15
 8010694:	2b00      	cmp	r3, #0
 8010696:	bfb8      	it	lt
 8010698:	eef0 7a66 	vmovlt.f32	s15, s13
 801069c:	ee27 0a87 	vmul.f32	s0, s15, s14
 80106a0:	4770      	bx	lr
 80106a2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010708 <scalbnf+0xc0>
 80106a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 80106aa:	4770      	bx	lr
 80106ac:	0dd2      	lsrs	r2, r2, #23
 80106ae:	e7e5      	b.n	801067c <scalbnf+0x34>
 80106b0:	4410      	add	r0, r2
 80106b2:	28fe      	cmp	r0, #254	@ 0xfe
 80106b4:	dce6      	bgt.n	8010684 <scalbnf+0x3c>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	dd06      	ble.n	80106c8 <scalbnf+0x80>
 80106ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80106be:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80106c2:	ee00 3a10 	vmov	s0, r3
 80106c6:	4770      	bx	lr
 80106c8:	f110 0f16 	cmn.w	r0, #22
 80106cc:	da09      	bge.n	80106e2 <scalbnf+0x9a>
 80106ce:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010708 <scalbnf+0xc0>
 80106d2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801070c <scalbnf+0xc4>
 80106d6:	ee10 3a10 	vmov	r3, s0
 80106da:	eeb0 7a67 	vmov.f32	s14, s15
 80106de:	2b00      	cmp	r3, #0
 80106e0:	e7d9      	b.n	8010696 <scalbnf+0x4e>
 80106e2:	3019      	adds	r0, #25
 80106e4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80106e8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80106ec:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010710 <scalbnf+0xc8>
 80106f0:	ee07 3a90 	vmov	s15, r3
 80106f4:	e7d7      	b.n	80106a6 <scalbnf+0x5e>
 80106f6:	bf00      	nop
 80106f8:	ffff3cb0 	.word	0xffff3cb0
 80106fc:	4c000000 	.word	0x4c000000
 8010700:	7149f2ca 	.word	0x7149f2ca
 8010704:	f149f2ca 	.word	0xf149f2ca
 8010708:	0da24260 	.word	0x0da24260
 801070c:	8da24260 	.word	0x8da24260
 8010710:	33000000 	.word	0x33000000

08010714 <__kernel_rem_pio2f>:
 8010714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010718:	ed2d 8b04 	vpush	{d8-d9}
 801071c:	b0d9      	sub	sp, #356	@ 0x164
 801071e:	4690      	mov	r8, r2
 8010720:	9001      	str	r0, [sp, #4]
 8010722:	4ab6      	ldr	r2, [pc, #728]	@ (80109fc <__kernel_rem_pio2f+0x2e8>)
 8010724:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010726:	f118 0f04 	cmn.w	r8, #4
 801072a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801072e:	460f      	mov	r7, r1
 8010730:	f103 3bff 	add.w	fp, r3, #4294967295
 8010734:	db26      	blt.n	8010784 <__kernel_rem_pio2f+0x70>
 8010736:	f1b8 0203 	subs.w	r2, r8, #3
 801073a:	bf48      	it	mi
 801073c:	f108 0204 	addmi.w	r2, r8, #4
 8010740:	10d2      	asrs	r2, r2, #3
 8010742:	1c55      	adds	r5, r2, #1
 8010744:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010746:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8010a0c <__kernel_rem_pio2f+0x2f8>
 801074a:	00e8      	lsls	r0, r5, #3
 801074c:	eba2 060b 	sub.w	r6, r2, fp
 8010750:	9002      	str	r0, [sp, #8]
 8010752:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010756:	eb0a 0c0b 	add.w	ip, sl, fp
 801075a:	ac1c      	add	r4, sp, #112	@ 0x70
 801075c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010760:	2000      	movs	r0, #0
 8010762:	4560      	cmp	r0, ip
 8010764:	dd10      	ble.n	8010788 <__kernel_rem_pio2f+0x74>
 8010766:	a91c      	add	r1, sp, #112	@ 0x70
 8010768:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801076c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010770:	2600      	movs	r6, #0
 8010772:	4556      	cmp	r6, sl
 8010774:	dc24      	bgt.n	80107c0 <__kernel_rem_pio2f+0xac>
 8010776:	f8dd e004 	ldr.w	lr, [sp, #4]
 801077a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8010a0c <__kernel_rem_pio2f+0x2f8>
 801077e:	4684      	mov	ip, r0
 8010780:	2400      	movs	r4, #0
 8010782:	e016      	b.n	80107b2 <__kernel_rem_pio2f+0x9e>
 8010784:	2200      	movs	r2, #0
 8010786:	e7dc      	b.n	8010742 <__kernel_rem_pio2f+0x2e>
 8010788:	42c6      	cmn	r6, r0
 801078a:	bf5d      	ittte	pl
 801078c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010790:	ee07 1a90 	vmovpl	s15, r1
 8010794:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010798:	eef0 7a47 	vmovmi.f32	s15, s14
 801079c:	ece4 7a01 	vstmia	r4!, {s15}
 80107a0:	3001      	adds	r0, #1
 80107a2:	e7de      	b.n	8010762 <__kernel_rem_pio2f+0x4e>
 80107a4:	ecfe 6a01 	vldmia	lr!, {s13}
 80107a8:	ed3c 7a01 	vldmdb	ip!, {s14}
 80107ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80107b0:	3401      	adds	r4, #1
 80107b2:	455c      	cmp	r4, fp
 80107b4:	ddf6      	ble.n	80107a4 <__kernel_rem_pio2f+0x90>
 80107b6:	ece9 7a01 	vstmia	r9!, {s15}
 80107ba:	3601      	adds	r6, #1
 80107bc:	3004      	adds	r0, #4
 80107be:	e7d8      	b.n	8010772 <__kernel_rem_pio2f+0x5e>
 80107c0:	a908      	add	r1, sp, #32
 80107c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80107c6:	9104      	str	r1, [sp, #16]
 80107c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80107ca:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8010a08 <__kernel_rem_pio2f+0x2f4>
 80107ce:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8010a04 <__kernel_rem_pio2f+0x2f0>
 80107d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80107d6:	9203      	str	r2, [sp, #12]
 80107d8:	4654      	mov	r4, sl
 80107da:	00a2      	lsls	r2, r4, #2
 80107dc:	9205      	str	r2, [sp, #20]
 80107de:	aa58      	add	r2, sp, #352	@ 0x160
 80107e0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80107e4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80107e8:	a944      	add	r1, sp, #272	@ 0x110
 80107ea:	aa08      	add	r2, sp, #32
 80107ec:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80107f0:	4694      	mov	ip, r2
 80107f2:	4626      	mov	r6, r4
 80107f4:	2e00      	cmp	r6, #0
 80107f6:	dc4c      	bgt.n	8010892 <__kernel_rem_pio2f+0x17e>
 80107f8:	4628      	mov	r0, r5
 80107fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80107fe:	f7ff ff23 	bl	8010648 <scalbnf>
 8010802:	eeb0 8a40 	vmov.f32	s16, s0
 8010806:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801080a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801080e:	f000 f9e9 	bl	8010be4 <floorf>
 8010812:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010816:	eea0 8a67 	vfms.f32	s16, s0, s15
 801081a:	2d00      	cmp	r5, #0
 801081c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010820:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010824:	ee17 9a90 	vmov	r9, s15
 8010828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801082c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010830:	dd41      	ble.n	80108b6 <__kernel_rem_pio2f+0x1a2>
 8010832:	f104 3cff 	add.w	ip, r4, #4294967295
 8010836:	a908      	add	r1, sp, #32
 8010838:	f1c5 0e08 	rsb	lr, r5, #8
 801083c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010840:	fa46 f00e 	asr.w	r0, r6, lr
 8010844:	4481      	add	r9, r0
 8010846:	fa00 f00e 	lsl.w	r0, r0, lr
 801084a:	1a36      	subs	r6, r6, r0
 801084c:	f1c5 0007 	rsb	r0, r5, #7
 8010850:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010854:	4106      	asrs	r6, r0
 8010856:	2e00      	cmp	r6, #0
 8010858:	dd3c      	ble.n	80108d4 <__kernel_rem_pio2f+0x1c0>
 801085a:	f04f 0e00 	mov.w	lr, #0
 801085e:	f109 0901 	add.w	r9, r9, #1
 8010862:	4670      	mov	r0, lr
 8010864:	4574      	cmp	r4, lr
 8010866:	dc68      	bgt.n	801093a <__kernel_rem_pio2f+0x226>
 8010868:	2d00      	cmp	r5, #0
 801086a:	dd03      	ble.n	8010874 <__kernel_rem_pio2f+0x160>
 801086c:	2d01      	cmp	r5, #1
 801086e:	d074      	beq.n	801095a <__kernel_rem_pio2f+0x246>
 8010870:	2d02      	cmp	r5, #2
 8010872:	d07d      	beq.n	8010970 <__kernel_rem_pio2f+0x25c>
 8010874:	2e02      	cmp	r6, #2
 8010876:	d12d      	bne.n	80108d4 <__kernel_rem_pio2f+0x1c0>
 8010878:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801087c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010880:	b340      	cbz	r0, 80108d4 <__kernel_rem_pio2f+0x1c0>
 8010882:	4628      	mov	r0, r5
 8010884:	9306      	str	r3, [sp, #24]
 8010886:	f7ff fedf 	bl	8010648 <scalbnf>
 801088a:	9b06      	ldr	r3, [sp, #24]
 801088c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010890:	e020      	b.n	80108d4 <__kernel_rem_pio2f+0x1c0>
 8010892:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010896:	3e01      	subs	r6, #1
 8010898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801089c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108a0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80108a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80108a8:	ecac 0a01 	vstmia	ip!, {s0}
 80108ac:	ed30 0a01 	vldmdb	r0!, {s0}
 80108b0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80108b4:	e79e      	b.n	80107f4 <__kernel_rem_pio2f+0xe0>
 80108b6:	d105      	bne.n	80108c4 <__kernel_rem_pio2f+0x1b0>
 80108b8:	1e60      	subs	r0, r4, #1
 80108ba:	a908      	add	r1, sp, #32
 80108bc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80108c0:	11f6      	asrs	r6, r6, #7
 80108c2:	e7c8      	b.n	8010856 <__kernel_rem_pio2f+0x142>
 80108c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80108c8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80108cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d0:	da31      	bge.n	8010936 <__kernel_rem_pio2f+0x222>
 80108d2:	2600      	movs	r6, #0
 80108d4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80108d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108dc:	f040 8098 	bne.w	8010a10 <__kernel_rem_pio2f+0x2fc>
 80108e0:	1e60      	subs	r0, r4, #1
 80108e2:	2200      	movs	r2, #0
 80108e4:	4550      	cmp	r0, sl
 80108e6:	da4b      	bge.n	8010980 <__kernel_rem_pio2f+0x26c>
 80108e8:	2a00      	cmp	r2, #0
 80108ea:	d065      	beq.n	80109b8 <__kernel_rem_pio2f+0x2a4>
 80108ec:	3c01      	subs	r4, #1
 80108ee:	ab08      	add	r3, sp, #32
 80108f0:	3d08      	subs	r5, #8
 80108f2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d0f8      	beq.n	80108ec <__kernel_rem_pio2f+0x1d8>
 80108fa:	4628      	mov	r0, r5
 80108fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010900:	f7ff fea2 	bl	8010648 <scalbnf>
 8010904:	1c63      	adds	r3, r4, #1
 8010906:	aa44      	add	r2, sp, #272	@ 0x110
 8010908:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8010a08 <__kernel_rem_pio2f+0x2f4>
 801090c:	0099      	lsls	r1, r3, #2
 801090e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010912:	4623      	mov	r3, r4
 8010914:	2b00      	cmp	r3, #0
 8010916:	f280 80a9 	bge.w	8010a6c <__kernel_rem_pio2f+0x358>
 801091a:	4623      	mov	r3, r4
 801091c:	2b00      	cmp	r3, #0
 801091e:	f2c0 80c7 	blt.w	8010ab0 <__kernel_rem_pio2f+0x39c>
 8010922:	aa44      	add	r2, sp, #272	@ 0x110
 8010924:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010928:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010a00 <__kernel_rem_pio2f+0x2ec>
 801092c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010a0c <__kernel_rem_pio2f+0x2f8>
 8010930:	2000      	movs	r0, #0
 8010932:	1ae2      	subs	r2, r4, r3
 8010934:	e0b1      	b.n	8010a9a <__kernel_rem_pio2f+0x386>
 8010936:	2602      	movs	r6, #2
 8010938:	e78f      	b.n	801085a <__kernel_rem_pio2f+0x146>
 801093a:	f852 1b04 	ldr.w	r1, [r2], #4
 801093e:	b948      	cbnz	r0, 8010954 <__kernel_rem_pio2f+0x240>
 8010940:	b121      	cbz	r1, 801094c <__kernel_rem_pio2f+0x238>
 8010942:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010946:	f842 1c04 	str.w	r1, [r2, #-4]
 801094a:	2101      	movs	r1, #1
 801094c:	f10e 0e01 	add.w	lr, lr, #1
 8010950:	4608      	mov	r0, r1
 8010952:	e787      	b.n	8010864 <__kernel_rem_pio2f+0x150>
 8010954:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010958:	e7f5      	b.n	8010946 <__kernel_rem_pio2f+0x232>
 801095a:	f104 3cff 	add.w	ip, r4, #4294967295
 801095e:	aa08      	add	r2, sp, #32
 8010960:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010964:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010968:	a908      	add	r1, sp, #32
 801096a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801096e:	e781      	b.n	8010874 <__kernel_rem_pio2f+0x160>
 8010970:	f104 3cff 	add.w	ip, r4, #4294967295
 8010974:	aa08      	add	r2, sp, #32
 8010976:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801097a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801097e:	e7f3      	b.n	8010968 <__kernel_rem_pio2f+0x254>
 8010980:	a908      	add	r1, sp, #32
 8010982:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8010986:	3801      	subs	r0, #1
 8010988:	430a      	orrs	r2, r1
 801098a:	e7ab      	b.n	80108e4 <__kernel_rem_pio2f+0x1d0>
 801098c:	3201      	adds	r2, #1
 801098e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010992:	2e00      	cmp	r6, #0
 8010994:	d0fa      	beq.n	801098c <__kernel_rem_pio2f+0x278>
 8010996:	9905      	ldr	r1, [sp, #20]
 8010998:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801099c:	eb0d 0001 	add.w	r0, sp, r1
 80109a0:	18e6      	adds	r6, r4, r3
 80109a2:	a91c      	add	r1, sp, #112	@ 0x70
 80109a4:	f104 0c01 	add.w	ip, r4, #1
 80109a8:	384c      	subs	r0, #76	@ 0x4c
 80109aa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80109ae:	4422      	add	r2, r4
 80109b0:	4562      	cmp	r2, ip
 80109b2:	da04      	bge.n	80109be <__kernel_rem_pio2f+0x2aa>
 80109b4:	4614      	mov	r4, r2
 80109b6:	e710      	b.n	80107da <__kernel_rem_pio2f+0xc6>
 80109b8:	9804      	ldr	r0, [sp, #16]
 80109ba:	2201      	movs	r2, #1
 80109bc:	e7e7      	b.n	801098e <__kernel_rem_pio2f+0x27a>
 80109be:	9903      	ldr	r1, [sp, #12]
 80109c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80109c4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80109c8:	9105      	str	r1, [sp, #20]
 80109ca:	ee07 1a90 	vmov	s15, r1
 80109ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109d2:	2400      	movs	r4, #0
 80109d4:	ece6 7a01 	vstmia	r6!, {s15}
 80109d8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010a0c <__kernel_rem_pio2f+0x2f8>
 80109dc:	46b1      	mov	r9, r6
 80109de:	455c      	cmp	r4, fp
 80109e0:	dd04      	ble.n	80109ec <__kernel_rem_pio2f+0x2d8>
 80109e2:	ece0 7a01 	vstmia	r0!, {s15}
 80109e6:	f10c 0c01 	add.w	ip, ip, #1
 80109ea:	e7e1      	b.n	80109b0 <__kernel_rem_pio2f+0x29c>
 80109ec:	ecfe 6a01 	vldmia	lr!, {s13}
 80109f0:	ed39 7a01 	vldmdb	r9!, {s14}
 80109f4:	3401      	adds	r4, #1
 80109f6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80109fa:	e7f0      	b.n	80109de <__kernel_rem_pio2f+0x2ca>
 80109fc:	080110d4 	.word	0x080110d4
 8010a00:	080110a8 	.word	0x080110a8
 8010a04:	43800000 	.word	0x43800000
 8010a08:	3b800000 	.word	0x3b800000
 8010a0c:	00000000 	.word	0x00000000
 8010a10:	9b02      	ldr	r3, [sp, #8]
 8010a12:	eeb0 0a48 	vmov.f32	s0, s16
 8010a16:	eba3 0008 	sub.w	r0, r3, r8
 8010a1a:	f7ff fe15 	bl	8010648 <scalbnf>
 8010a1e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010a04 <__kernel_rem_pio2f+0x2f0>
 8010a22:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a2a:	db19      	blt.n	8010a60 <__kernel_rem_pio2f+0x34c>
 8010a2c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8010a08 <__kernel_rem_pio2f+0x2f4>
 8010a30:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010a34:	aa08      	add	r2, sp, #32
 8010a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a3a:	3508      	adds	r5, #8
 8010a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010a4c:	ee10 3a10 	vmov	r3, s0
 8010a50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010a54:	ee17 3a90 	vmov	r3, s15
 8010a58:	3401      	adds	r4, #1
 8010a5a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010a5e:	e74c      	b.n	80108fa <__kernel_rem_pio2f+0x1e6>
 8010a60:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010a64:	aa08      	add	r2, sp, #32
 8010a66:	ee10 3a10 	vmov	r3, s0
 8010a6a:	e7f6      	b.n	8010a5a <__kernel_rem_pio2f+0x346>
 8010a6c:	a808      	add	r0, sp, #32
 8010a6e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010a72:	9001      	str	r0, [sp, #4]
 8010a74:	ee07 0a90 	vmov	s15, r0
 8010a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a7c:	3b01      	subs	r3, #1
 8010a7e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010a82:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010a86:	ed62 7a01 	vstmdb	r2!, {s15}
 8010a8a:	e743      	b.n	8010914 <__kernel_rem_pio2f+0x200>
 8010a8c:	ecfc 6a01 	vldmia	ip!, {s13}
 8010a90:	ecb5 7a01 	vldmia	r5!, {s14}
 8010a94:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010a98:	3001      	adds	r0, #1
 8010a9a:	4550      	cmp	r0, sl
 8010a9c:	dc01      	bgt.n	8010aa2 <__kernel_rem_pio2f+0x38e>
 8010a9e:	4290      	cmp	r0, r2
 8010aa0:	ddf4      	ble.n	8010a8c <__kernel_rem_pio2f+0x378>
 8010aa2:	a858      	add	r0, sp, #352	@ 0x160
 8010aa4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8010aa8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010aac:	3b01      	subs	r3, #1
 8010aae:	e735      	b.n	801091c <__kernel_rem_pio2f+0x208>
 8010ab0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010ab2:	2b02      	cmp	r3, #2
 8010ab4:	dc09      	bgt.n	8010aca <__kernel_rem_pio2f+0x3b6>
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	dc27      	bgt.n	8010b0a <__kernel_rem_pio2f+0x3f6>
 8010aba:	d040      	beq.n	8010b3e <__kernel_rem_pio2f+0x42a>
 8010abc:	f009 0007 	and.w	r0, r9, #7
 8010ac0:	b059      	add	sp, #356	@ 0x164
 8010ac2:	ecbd 8b04 	vpop	{d8-d9}
 8010ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aca:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010acc:	2b03      	cmp	r3, #3
 8010ace:	d1f5      	bne.n	8010abc <__kernel_rem_pio2f+0x3a8>
 8010ad0:	aa30      	add	r2, sp, #192	@ 0xc0
 8010ad2:	1f0b      	subs	r3, r1, #4
 8010ad4:	4413      	add	r3, r2
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	4620      	mov	r0, r4
 8010ada:	2800      	cmp	r0, #0
 8010adc:	dc50      	bgt.n	8010b80 <__kernel_rem_pio2f+0x46c>
 8010ade:	4622      	mov	r2, r4
 8010ae0:	2a01      	cmp	r2, #1
 8010ae2:	dc5d      	bgt.n	8010ba0 <__kernel_rem_pio2f+0x48c>
 8010ae4:	ab30      	add	r3, sp, #192	@ 0xc0
 8010ae6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8010a0c <__kernel_rem_pio2f+0x2f8>
 8010aea:	440b      	add	r3, r1
 8010aec:	2c01      	cmp	r4, #1
 8010aee:	dc67      	bgt.n	8010bc0 <__kernel_rem_pio2f+0x4ac>
 8010af0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010af4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8010af8:	2e00      	cmp	r6, #0
 8010afa:	d167      	bne.n	8010bcc <__kernel_rem_pio2f+0x4b8>
 8010afc:	edc7 6a00 	vstr	s13, [r7]
 8010b00:	ed87 7a01 	vstr	s14, [r7, #4]
 8010b04:	edc7 7a02 	vstr	s15, [r7, #8]
 8010b08:	e7d8      	b.n	8010abc <__kernel_rem_pio2f+0x3a8>
 8010b0a:	ab30      	add	r3, sp, #192	@ 0xc0
 8010b0c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8010a0c <__kernel_rem_pio2f+0x2f8>
 8010b10:	440b      	add	r3, r1
 8010b12:	4622      	mov	r2, r4
 8010b14:	2a00      	cmp	r2, #0
 8010b16:	da24      	bge.n	8010b62 <__kernel_rem_pio2f+0x44e>
 8010b18:	b34e      	cbz	r6, 8010b6e <__kernel_rem_pio2f+0x45a>
 8010b1a:	eef1 7a47 	vneg.f32	s15, s14
 8010b1e:	edc7 7a00 	vstr	s15, [r7]
 8010b22:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8010b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b2a:	aa31      	add	r2, sp, #196	@ 0xc4
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	429c      	cmp	r4, r3
 8010b30:	da20      	bge.n	8010b74 <__kernel_rem_pio2f+0x460>
 8010b32:	b10e      	cbz	r6, 8010b38 <__kernel_rem_pio2f+0x424>
 8010b34:	eef1 7a67 	vneg.f32	s15, s15
 8010b38:	edc7 7a01 	vstr	s15, [r7, #4]
 8010b3c:	e7be      	b.n	8010abc <__kernel_rem_pio2f+0x3a8>
 8010b3e:	ab30      	add	r3, sp, #192	@ 0xc0
 8010b40:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8010a0c <__kernel_rem_pio2f+0x2f8>
 8010b44:	440b      	add	r3, r1
 8010b46:	2c00      	cmp	r4, #0
 8010b48:	da05      	bge.n	8010b56 <__kernel_rem_pio2f+0x442>
 8010b4a:	b10e      	cbz	r6, 8010b50 <__kernel_rem_pio2f+0x43c>
 8010b4c:	eef1 7a67 	vneg.f32	s15, s15
 8010b50:	edc7 7a00 	vstr	s15, [r7]
 8010b54:	e7b2      	b.n	8010abc <__kernel_rem_pio2f+0x3a8>
 8010b56:	ed33 7a01 	vldmdb	r3!, {s14}
 8010b5a:	3c01      	subs	r4, #1
 8010b5c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b60:	e7f1      	b.n	8010b46 <__kernel_rem_pio2f+0x432>
 8010b62:	ed73 7a01 	vldmdb	r3!, {s15}
 8010b66:	3a01      	subs	r2, #1
 8010b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b6c:	e7d2      	b.n	8010b14 <__kernel_rem_pio2f+0x400>
 8010b6e:	eef0 7a47 	vmov.f32	s15, s14
 8010b72:	e7d4      	b.n	8010b1e <__kernel_rem_pio2f+0x40a>
 8010b74:	ecb2 7a01 	vldmia	r2!, {s14}
 8010b78:	3301      	adds	r3, #1
 8010b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b7e:	e7d6      	b.n	8010b2e <__kernel_rem_pio2f+0x41a>
 8010b80:	ed72 7a01 	vldmdb	r2!, {s15}
 8010b84:	edd2 6a01 	vldr	s13, [r2, #4]
 8010b88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010b8c:	3801      	subs	r0, #1
 8010b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b92:	ed82 7a00 	vstr	s14, [r2]
 8010b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b9a:	edc2 7a01 	vstr	s15, [r2, #4]
 8010b9e:	e79c      	b.n	8010ada <__kernel_rem_pio2f+0x3c6>
 8010ba0:	ed73 7a01 	vldmdb	r3!, {s15}
 8010ba4:	edd3 6a01 	vldr	s13, [r3, #4]
 8010ba8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010bac:	3a01      	subs	r2, #1
 8010bae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010bb2:	ed83 7a00 	vstr	s14, [r3]
 8010bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010bba:	edc3 7a01 	vstr	s15, [r3, #4]
 8010bbe:	e78f      	b.n	8010ae0 <__kernel_rem_pio2f+0x3cc>
 8010bc0:	ed33 7a01 	vldmdb	r3!, {s14}
 8010bc4:	3c01      	subs	r4, #1
 8010bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010bca:	e78f      	b.n	8010aec <__kernel_rem_pio2f+0x3d8>
 8010bcc:	eef1 6a66 	vneg.f32	s13, s13
 8010bd0:	eeb1 7a47 	vneg.f32	s14, s14
 8010bd4:	edc7 6a00 	vstr	s13, [r7]
 8010bd8:	ed87 7a01 	vstr	s14, [r7, #4]
 8010bdc:	eef1 7a67 	vneg.f32	s15, s15
 8010be0:	e790      	b.n	8010b04 <__kernel_rem_pio2f+0x3f0>
 8010be2:	bf00      	nop

08010be4 <floorf>:
 8010be4:	ee10 3a10 	vmov	r3, s0
 8010be8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010bec:	3a7f      	subs	r2, #127	@ 0x7f
 8010bee:	2a16      	cmp	r2, #22
 8010bf0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010bf4:	dc2b      	bgt.n	8010c4e <floorf+0x6a>
 8010bf6:	2a00      	cmp	r2, #0
 8010bf8:	da12      	bge.n	8010c20 <floorf+0x3c>
 8010bfa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010c60 <floorf+0x7c>
 8010bfe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010c02:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0a:	dd06      	ble.n	8010c1a <floorf+0x36>
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	da24      	bge.n	8010c5a <floorf+0x76>
 8010c10:	2900      	cmp	r1, #0
 8010c12:	4b14      	ldr	r3, [pc, #80]	@ (8010c64 <floorf+0x80>)
 8010c14:	bf08      	it	eq
 8010c16:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010c1a:	ee00 3a10 	vmov	s0, r3
 8010c1e:	4770      	bx	lr
 8010c20:	4911      	ldr	r1, [pc, #68]	@ (8010c68 <floorf+0x84>)
 8010c22:	4111      	asrs	r1, r2
 8010c24:	420b      	tst	r3, r1
 8010c26:	d0fa      	beq.n	8010c1e <floorf+0x3a>
 8010c28:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010c60 <floorf+0x7c>
 8010c2c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010c30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c38:	ddef      	ble.n	8010c1a <floorf+0x36>
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	bfbe      	ittt	lt
 8010c3e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010c42:	fa40 f202 	asrlt.w	r2, r0, r2
 8010c46:	189b      	addlt	r3, r3, r2
 8010c48:	ea23 0301 	bic.w	r3, r3, r1
 8010c4c:	e7e5      	b.n	8010c1a <floorf+0x36>
 8010c4e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010c52:	d3e4      	bcc.n	8010c1e <floorf+0x3a>
 8010c54:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010c58:	4770      	bx	lr
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e7dd      	b.n	8010c1a <floorf+0x36>
 8010c5e:	bf00      	nop
 8010c60:	7149f2ca 	.word	0x7149f2ca
 8010c64:	bf800000 	.word	0xbf800000
 8010c68:	007fffff 	.word	0x007fffff

08010c6c <_init>:
 8010c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c6e:	bf00      	nop
 8010c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c72:	bc08      	pop	{r3}
 8010c74:	469e      	mov	lr, r3
 8010c76:	4770      	bx	lr

08010c78 <_fini>:
 8010c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c7a:	bf00      	nop
 8010c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c7e:	bc08      	pop	{r3}
 8010c80:	469e      	mov	lr, r3
 8010c82:	4770      	bx	lr
