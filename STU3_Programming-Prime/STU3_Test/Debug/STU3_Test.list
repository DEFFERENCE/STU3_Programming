
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca4c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800cc24  0800cc24  0000dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc64  0800cc64  0000e25c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc64  0800cc64  0000dc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc6c  0800cc6c  0000e25c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc6c  0800cc6c  0000dc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc70  0800cc70  0000dc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000025c  20000000  0800cc74  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000194c  20000260  0800ced0  0000e260  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001bac  0800ced0  0000ebac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e25c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028b97  00000000  00000000  0000e28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b51  00000000  00000000  00036e23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  0003b978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001628  00000000  00000000  0003d5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b2ea  00000000  00000000  0003ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027757  00000000  00000000  00069f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a9d6  00000000  00000000  00091661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ac037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d60  00000000  00000000  001ac07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  001b3ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000260 	.word	0x20000260
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cc0c 	.word	0x0800cc0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000264 	.word	0x20000264
 8000214:	0800cc0c 	.word	0x0800cc0c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_frsub>:
 8000a94:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a98:	e002      	b.n	8000aa0 <__addsf3>
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fsub>:
 8000a9c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa0 <__addsf3>:
 8000aa0:	0042      	lsls	r2, r0, #1
 8000aa2:	bf1f      	itttt	ne
 8000aa4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aa8:	ea92 0f03 	teqne	r2, r3
 8000aac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab4:	d06a      	beq.n	8000b8c <__addsf3+0xec>
 8000ab6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000abe:	bfc1      	itttt	gt
 8000ac0:	18d2      	addgt	r2, r2, r3
 8000ac2:	4041      	eorgt	r1, r0
 8000ac4:	4048      	eorgt	r0, r1
 8000ac6:	4041      	eorgt	r1, r0
 8000ac8:	bfb8      	it	lt
 8000aca:	425b      	neglt	r3, r3
 8000acc:	2b19      	cmp	r3, #25
 8000ace:	bf88      	it	hi
 8000ad0:	4770      	bxhi	lr
 8000ad2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ad6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ada:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ae6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000aea:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000aee:	bf18      	it	ne
 8000af0:	4249      	negne	r1, r1
 8000af2:	ea92 0f03 	teq	r2, r3
 8000af6:	d03f      	beq.n	8000b78 <__addsf3+0xd8>
 8000af8:	f1a2 0201 	sub.w	r2, r2, #1
 8000afc:	fa41 fc03 	asr.w	ip, r1, r3
 8000b00:	eb10 000c 	adds.w	r0, r0, ip
 8000b04:	f1c3 0320 	rsb	r3, r3, #32
 8000b08:	fa01 f103 	lsl.w	r1, r1, r3
 8000b0c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b10:	d502      	bpl.n	8000b18 <__addsf3+0x78>
 8000b12:	4249      	negs	r1, r1
 8000b14:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b18:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b1c:	d313      	bcc.n	8000b46 <__addsf3+0xa6>
 8000b1e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b22:	d306      	bcc.n	8000b32 <__addsf3+0x92>
 8000b24:	0840      	lsrs	r0, r0, #1
 8000b26:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b2a:	f102 0201 	add.w	r2, r2, #1
 8000b2e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b30:	d251      	bcs.n	8000bd6 <__addsf3+0x136>
 8000b32:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b3a:	bf08      	it	eq
 8000b3c:	f020 0001 	biceq.w	r0, r0, #1
 8000b40:	ea40 0003 	orr.w	r0, r0, r3
 8000b44:	4770      	bx	lr
 8000b46:	0049      	lsls	r1, r1, #1
 8000b48:	eb40 0000 	adc.w	r0, r0, r0
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	bf28      	it	cs
 8000b50:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b54:	d2ed      	bcs.n	8000b32 <__addsf3+0x92>
 8000b56:	fab0 fc80 	clz	ip, r0
 8000b5a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b5e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b62:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b66:	bfaa      	itet	ge
 8000b68:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b6c:	4252      	neglt	r2, r2
 8000b6e:	4318      	orrge	r0, r3
 8000b70:	bfbc      	itt	lt
 8000b72:	40d0      	lsrlt	r0, r2
 8000b74:	4318      	orrlt	r0, r3
 8000b76:	4770      	bx	lr
 8000b78:	f092 0f00 	teq	r2, #0
 8000b7c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b80:	bf06      	itte	eq
 8000b82:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b86:	3201      	addeq	r2, #1
 8000b88:	3b01      	subne	r3, #1
 8000b8a:	e7b5      	b.n	8000af8 <__addsf3+0x58>
 8000b8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b94:	bf18      	it	ne
 8000b96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9a:	d021      	beq.n	8000be0 <__addsf3+0x140>
 8000b9c:	ea92 0f03 	teq	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__addsf3+0x10c>
 8000ba2:	f092 0f00 	teq	r2, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	4608      	moveq	r0, r1
 8000baa:	4770      	bx	lr
 8000bac:	ea90 0f01 	teq	r0, r1
 8000bb0:	bf1c      	itt	ne
 8000bb2:	2000      	movne	r0, #0
 8000bb4:	4770      	bxne	lr
 8000bb6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bba:	d104      	bne.n	8000bc6 <__addsf3+0x126>
 8000bbc:	0040      	lsls	r0, r0, #1
 8000bbe:	bf28      	it	cs
 8000bc0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bc4:	4770      	bx	lr
 8000bc6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bca:	bf3c      	itt	cc
 8000bcc:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd0:	4770      	bxcc	lr
 8000bd2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	4770      	bx	lr
 8000be0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000be4:	bf16      	itet	ne
 8000be6:	4608      	movne	r0, r1
 8000be8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bec:	4601      	movne	r1, r0
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	bf06      	itte	eq
 8000bf2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bf6:	ea90 0f01 	teqeq	r0, r1
 8000bfa:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_ui2f>:
 8000c00:	f04f 0300 	mov.w	r3, #0
 8000c04:	e004      	b.n	8000c10 <__aeabi_i2f+0x8>
 8000c06:	bf00      	nop

08000c08 <__aeabi_i2f>:
 8000c08:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c0c:	bf48      	it	mi
 8000c0e:	4240      	negmi	r0, r0
 8000c10:	ea5f 0c00 	movs.w	ip, r0
 8000c14:	bf08      	it	eq
 8000c16:	4770      	bxeq	lr
 8000c18:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	f04f 0000 	mov.w	r0, #0
 8000c22:	e01c      	b.n	8000c5e <__aeabi_l2f+0x2a>

08000c24 <__aeabi_ul2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f04f 0300 	mov.w	r3, #0
 8000c30:	e00a      	b.n	8000c48 <__aeabi_l2f+0x14>
 8000c32:	bf00      	nop

08000c34 <__aeabi_l2f>:
 8000c34:	ea50 0201 	orrs.w	r2, r0, r1
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__aeabi_l2f+0x14>
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	ea5f 0c01 	movs.w	ip, r1
 8000c4c:	bf02      	ittt	eq
 8000c4e:	4684      	moveq	ip, r0
 8000c50:	4601      	moveq	r1, r0
 8000c52:	2000      	moveq	r0, #0
 8000c54:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c58:	bf08      	it	eq
 8000c5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c5e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c62:	fabc f28c 	clz	r2, ip
 8000c66:	3a08      	subs	r2, #8
 8000c68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c6c:	db10      	blt.n	8000c90 <__aeabi_l2f+0x5c>
 8000c6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c72:	4463      	add	r3, ip
 8000c74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c78:	f1c2 0220 	rsb	r2, r2, #32
 8000c7c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c80:	fa20 f202 	lsr.w	r2, r0, r2
 8000c84:	eb43 0002 	adc.w	r0, r3, r2
 8000c88:	bf08      	it	eq
 8000c8a:	f020 0001 	biceq.w	r0, r0, #1
 8000c8e:	4770      	bx	lr
 8000c90:	f102 0220 	add.w	r2, r2, #32
 8000c94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca0:	fa21 f202 	lsr.w	r2, r1, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b988 	b.w	8000fd8 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	9d08      	ldr	r5, [sp, #32]
 8000ce6:	468e      	mov	lr, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	4688      	mov	r8, r1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d14a      	bne.n	8000d86 <__udivmoddi4+0xa6>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d962      	bls.n	8000dbc <__udivmoddi4+0xdc>
 8000cf6:	fab2 f682 	clz	r6, r2
 8000cfa:	b14e      	cbz	r6, 8000d10 <__udivmoddi4+0x30>
 8000cfc:	f1c6 0320 	rsb	r3, r6, #32
 8000d00:	fa01 f806 	lsl.w	r8, r1, r6
 8000d04:	fa20 f303 	lsr.w	r3, r0, r3
 8000d08:	40b7      	lsls	r7, r6
 8000d0a:	ea43 0808 	orr.w	r8, r3, r8
 8000d0e:	40b4      	lsls	r4, r6
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d1c:	0c23      	lsrs	r3, r4, #16
 8000d1e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d26:	fb01 f20c 	mul.w	r2, r1, ip
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0x62>
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d34:	f080 80ea 	bcs.w	8000f0c <__udivmoddi4+0x22c>
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f240 80e7 	bls.w	8000f0c <__udivmoddi4+0x22c>
 8000d3e:	3902      	subs	r1, #2
 8000d40:	443b      	add	r3, r7
 8000d42:	1a9a      	subs	r2, r3, r2
 8000d44:	b2a3      	uxth	r3, r4
 8000d46:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d4a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d52:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d56:	459c      	cmp	ip, r3
 8000d58:	d909      	bls.n	8000d6e <__udivmoddi4+0x8e>
 8000d5a:	18fb      	adds	r3, r7, r3
 8000d5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d60:	f080 80d6 	bcs.w	8000f10 <__udivmoddi4+0x230>
 8000d64:	459c      	cmp	ip, r3
 8000d66:	f240 80d3 	bls.w	8000f10 <__udivmoddi4+0x230>
 8000d6a:	443b      	add	r3, r7
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d72:	eba3 030c 	sub.w	r3, r3, ip
 8000d76:	2100      	movs	r1, #0
 8000d78:	b11d      	cbz	r5, 8000d82 <__udivmoddi4+0xa2>
 8000d7a:	40f3      	lsrs	r3, r6
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	428b      	cmp	r3, r1
 8000d88:	d905      	bls.n	8000d96 <__udivmoddi4+0xb6>
 8000d8a:	b10d      	cbz	r5, 8000d90 <__udivmoddi4+0xb0>
 8000d8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d90:	2100      	movs	r1, #0
 8000d92:	4608      	mov	r0, r1
 8000d94:	e7f5      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000d96:	fab3 f183 	clz	r1, r3
 8000d9a:	2900      	cmp	r1, #0
 8000d9c:	d146      	bne.n	8000e2c <__udivmoddi4+0x14c>
 8000d9e:	4573      	cmp	r3, lr
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xc8>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 8105 	bhi.w	8000fb2 <__udivmoddi4+0x2d2>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb6e 0203 	sbc.w	r2, lr, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4690      	mov	r8, r2
 8000db2:	2d00      	cmp	r5, #0
 8000db4:	d0e5      	beq.n	8000d82 <__udivmoddi4+0xa2>
 8000db6:	e9c5 4800 	strd	r4, r8, [r5]
 8000dba:	e7e2      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	f000 8090 	beq.w	8000ee2 <__udivmoddi4+0x202>
 8000dc2:	fab2 f682 	clz	r6, r2
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	f040 80a4 	bne.w	8000f14 <__udivmoddi4+0x234>
 8000dcc:	1a8a      	subs	r2, r1, r2
 8000dce:	0c03      	lsrs	r3, r0, #16
 8000dd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd4:	b280      	uxth	r0, r0
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dde:	fb0e 221c 	mls	r2, lr, ip, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb04 f20c 	mul.w	r2, r4, ip
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x11e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000df4:	d202      	bcs.n	8000dfc <__udivmoddi4+0x11c>
 8000df6:	429a      	cmp	r2, r3
 8000df8:	f200 80e0 	bhi.w	8000fbc <__udivmoddi4+0x2dc>
 8000dfc:	46c4      	mov	ip, r8
 8000dfe:	1a9b      	subs	r3, r3, r2
 8000e00:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e04:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e08:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e0c:	fb02 f404 	mul.w	r4, r2, r4
 8000e10:	429c      	cmp	r4, r3
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x144>
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x142>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f200 80ca 	bhi.w	8000fb6 <__udivmoddi4+0x2d6>
 8000e22:	4602      	mov	r2, r0
 8000e24:	1b1b      	subs	r3, r3, r4
 8000e26:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0x98>
 8000e2c:	f1c1 0620 	rsb	r6, r1, #32
 8000e30:	408b      	lsls	r3, r1
 8000e32:	fa22 f706 	lsr.w	r7, r2, r6
 8000e36:	431f      	orrs	r7, r3
 8000e38:	fa0e f401 	lsl.w	r4, lr, r1
 8000e3c:	fa20 f306 	lsr.w	r3, r0, r6
 8000e40:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e44:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fa00 f801 	lsl.w	r8, r0, r1
 8000e4e:	fa1f fc87 	uxth.w	ip, r7
 8000e52:	fbbe f0f9 	udiv	r0, lr, r9
 8000e56:	0c1c      	lsrs	r4, r3, #16
 8000e58:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e5c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e60:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	d909      	bls.n	8000e80 <__udivmoddi4+0x1a0>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e72:	f080 809c 	bcs.w	8000fae <__udivmoddi4+0x2ce>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f240 8099 	bls.w	8000fae <__udivmoddi4+0x2ce>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	eba4 040e 	sub.w	r4, r4, lr
 8000e84:	fa1f fe83 	uxth.w	lr, r3
 8000e88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000e90:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e94:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e98:	45a4      	cmp	ip, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x1ce>
 8000e9c:	193c      	adds	r4, r7, r4
 8000e9e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ea2:	f080 8082 	bcs.w	8000faa <__udivmoddi4+0x2ca>
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d97f      	bls.n	8000faa <__udivmoddi4+0x2ca>
 8000eaa:	3b02      	subs	r3, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eb2:	eba4 040c 	sub.w	r4, r4, ip
 8000eb6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eba:	4564      	cmp	r4, ip
 8000ebc:	4673      	mov	r3, lr
 8000ebe:	46e1      	mov	r9, ip
 8000ec0:	d362      	bcc.n	8000f88 <__udivmoddi4+0x2a8>
 8000ec2:	d05f      	beq.n	8000f84 <__udivmoddi4+0x2a4>
 8000ec4:	b15d      	cbz	r5, 8000ede <__udivmoddi4+0x1fe>
 8000ec6:	ebb8 0203 	subs.w	r2, r8, r3
 8000eca:	eb64 0409 	sbc.w	r4, r4, r9
 8000ece:	fa04 f606 	lsl.w	r6, r4, r6
 8000ed2:	fa22 f301 	lsr.w	r3, r2, r1
 8000ed6:	431e      	orrs	r6, r3
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	e9c5 6400 	strd	r6, r4, [r5]
 8000ede:	2100      	movs	r1, #0
 8000ee0:	e74f      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000ee2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ee6:	0c01      	lsrs	r1, r0, #16
 8000ee8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eec:	b280      	uxth	r0, r0
 8000eee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	463c      	mov	r4, r7
 8000ef8:	46b8      	mov	r8, r7
 8000efa:	46be      	mov	lr, r7
 8000efc:	2620      	movs	r6, #32
 8000efe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f02:	eba2 0208 	sub.w	r2, r2, r8
 8000f06:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f0a:	e766      	b.n	8000dda <__udivmoddi4+0xfa>
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	e718      	b.n	8000d42 <__udivmoddi4+0x62>
 8000f10:	4610      	mov	r0, r2
 8000f12:	e72c      	b.n	8000d6e <__udivmoddi4+0x8e>
 8000f14:	f1c6 0220 	rsb	r2, r6, #32
 8000f18:	fa2e f302 	lsr.w	r3, lr, r2
 8000f1c:	40b7      	lsls	r7, r6
 8000f1e:	40b1      	lsls	r1, r6
 8000f20:	fa20 f202 	lsr.w	r2, r0, r2
 8000f24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f2e:	b2bc      	uxth	r4, r7
 8000f30:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f34:	0c11      	lsrs	r1, r2, #16
 8000f36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3a:	fb08 f904 	mul.w	r9, r8, r4
 8000f3e:	40b0      	lsls	r0, r6
 8000f40:	4589      	cmp	r9, r1
 8000f42:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f46:	b280      	uxth	r0, r0
 8000f48:	d93e      	bls.n	8000fc8 <__udivmoddi4+0x2e8>
 8000f4a:	1879      	adds	r1, r7, r1
 8000f4c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f50:	d201      	bcs.n	8000f56 <__udivmoddi4+0x276>
 8000f52:	4589      	cmp	r9, r1
 8000f54:	d81f      	bhi.n	8000f96 <__udivmoddi4+0x2b6>
 8000f56:	eba1 0109 	sub.w	r1, r1, r9
 8000f5a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5e:	fb09 f804 	mul.w	r8, r9, r4
 8000f62:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f66:	b292      	uxth	r2, r2
 8000f68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f6c:	4542      	cmp	r2, r8
 8000f6e:	d229      	bcs.n	8000fc4 <__udivmoddi4+0x2e4>
 8000f70:	18ba      	adds	r2, r7, r2
 8000f72:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f76:	d2c4      	bcs.n	8000f02 <__udivmoddi4+0x222>
 8000f78:	4542      	cmp	r2, r8
 8000f7a:	d2c2      	bcs.n	8000f02 <__udivmoddi4+0x222>
 8000f7c:	f1a9 0102 	sub.w	r1, r9, #2
 8000f80:	443a      	add	r2, r7
 8000f82:	e7be      	b.n	8000f02 <__udivmoddi4+0x222>
 8000f84:	45f0      	cmp	r8, lr
 8000f86:	d29d      	bcs.n	8000ec4 <__udivmoddi4+0x1e4>
 8000f88:	ebbe 0302 	subs.w	r3, lr, r2
 8000f8c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f90:	3801      	subs	r0, #1
 8000f92:	46e1      	mov	r9, ip
 8000f94:	e796      	b.n	8000ec4 <__udivmoddi4+0x1e4>
 8000f96:	eba7 0909 	sub.w	r9, r7, r9
 8000f9a:	4449      	add	r1, r9
 8000f9c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fa0:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa4:	fb09 f804 	mul.w	r8, r9, r4
 8000fa8:	e7db      	b.n	8000f62 <__udivmoddi4+0x282>
 8000faa:	4673      	mov	r3, lr
 8000fac:	e77f      	b.n	8000eae <__udivmoddi4+0x1ce>
 8000fae:	4650      	mov	r0, sl
 8000fb0:	e766      	b.n	8000e80 <__udivmoddi4+0x1a0>
 8000fb2:	4608      	mov	r0, r1
 8000fb4:	e6fd      	b.n	8000db2 <__udivmoddi4+0xd2>
 8000fb6:	443b      	add	r3, r7
 8000fb8:	3a02      	subs	r2, #2
 8000fba:	e733      	b.n	8000e24 <__udivmoddi4+0x144>
 8000fbc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fc0:	443b      	add	r3, r7
 8000fc2:	e71c      	b.n	8000dfe <__udivmoddi4+0x11e>
 8000fc4:	4649      	mov	r1, r9
 8000fc6:	e79c      	b.n	8000f02 <__udivmoddi4+0x222>
 8000fc8:	eba1 0109 	sub.w	r1, r1, r9
 8000fcc:	46c4      	mov	ip, r8
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	e7c4      	b.n	8000f62 <__udivmoddi4+0x282>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <Backlash_Init>:
/**
 * @brief Initialize the backlash controller.
 * @param ctrl Pointer to controller structure.
 * @param backlash_width Estimated or measured backlash gap.
 */
void Backlash_Init(BacklashController *ctrl, float32_t backlash_width) {
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	ed87 0a00 	vstr	s0, [r7]
    ctrl->backlash_width = backlash_width;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	601a      	str	r2, [r3, #0]
    ctrl->backlash_offset = 0.0f;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	605a      	str	r2, [r3, #4]
    ctrl->direction_prev = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	721a      	strb	r2, [r3, #8]
    ctrl->state = TRANSITION;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	725a      	strb	r2, [r3, #9]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <modbus_heartbeat>:

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
}

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	//if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f645 1261 	movw	r2, #22881	@ 0x5961
 800101e:	801a      	strh	r2, [r3, #0]
	//}
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	3302      	adds	r3, #2
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	73fb      	strb	r3, [r7, #15]
	return status;
 800103e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <modbus_servo_Status>:

void modbus_servo_Status(ModbusHandleTypedef *hmodbus, uint8_t Pen_status) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x03].U16 = Pen_status;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	3306      	adds	r3, #6
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	b292      	uxth	r2, r2
 8001062:	801a      	strh	r2, [r3, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <modbus_write_servo_up>:

uint8_t modbus_write_servo_up(ModbusHandleTypedef *hmodbus) {
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	hmodbus->RegisterAddress[0x05].U16 = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	330a      	adds	r3, #10
 800107e:	2200      	movs	r2, #0
 8001080:	801a      	strh	r2, [r3, #0]
	uint8_t status = hmodbus->RegisterAddress[0x04].U16;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	3308      	adds	r3, #8
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	73fb      	strb	r3, [r7, #15]
//	if (status == 1) {
//		if (hmodbus->RegisterAddress[0x05].U16 == 1) {
//			hmodbus->RegisterAddress[0x05].U16 = 0;
//		}
//	}
	return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]

}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <modbus_write_servo_down>:
uint8_t modbus_write_servo_down(ModbusHandleTypedef *hmodbus) {
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
	hmodbus->RegisterAddress[0x04].U16 = 0;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	3308      	adds	r3, #8
 80010a8:	2200      	movs	r2, #0
 80010aa:	801a      	strh	r2, [r3, #0]
	uint8_t status = hmodbus->RegisterAddress[0x05].U16;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	330a      	adds	r3, #10
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	73fb      	strb	r3, [r7, #15]
//		if (hmodbus->RegisterAddress[0x04].U16 == 1) {
//			hmodbus->RegisterAddress[0x04].U16 = 0;
//		}
//
//	}
	return status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <R_Theta_moving_Status>:

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	3320      	adds	r3, #32
 80010d6:	78fa      	ldrb	r2, [r7, #3]
 80010d8:	b292      	uxth	r2, r2
 80010da:	801a      	strh	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = theta_accel * 10.0;
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 80010e8:	b480      	push	{r7}
 80010ea:	b089      	sub	sp, #36	@ 0x24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	61f8      	str	r0, [r7, #28]
 80010f0:	ed87 0a06 	vstr	s0, [r7, #24]
 80010f4:	edc7 0a05 	vstr	s1, [r7, #20]
 80010f8:	ed87 1a04 	vstr	s2, [r7, #16]
 80010fc:	edc7 1a03 	vstr	s3, [r7, #12]
 8001100:	ed87 2a02 	vstr	s4, [r7, #8]
 8001104:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	3322      	adds	r3, #34	@ 0x22
 800110e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001116:	ee17 2a90 	vmov	r2, s15
 800111a:	b292      	uxth	r2, r2
 800111c:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x12].U16 = theta_pos;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	3324      	adds	r3, #36	@ 0x24
 8001124:	edd7 7a05 	vldr	s15, [r7, #20]
 8001128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112c:	ee17 2a90 	vmov	r2, s15
 8001130:	b292      	uxth	r2, r2
 8001132:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x13].U16 = r_Velo;
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	3326      	adds	r3, #38	@ 0x26
 800113a:	edd7 7a04 	vldr	s15, [r7, #16]
 800113e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001142:	ee17 2a90 	vmov	r2, s15
 8001146:	b292      	uxth	r2, r2
 8001148:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x14].U16 = theta_Velo;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	3328      	adds	r3, #40	@ 0x28
 8001150:	edd7 7a03 	vldr	s15, [r7, #12]
 8001154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001158:	ee17 2a90 	vmov	r2, s15
 800115c:	b292      	uxth	r2, r2
 800115e:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x15].U16 = r_accel;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	332a      	adds	r3, #42	@ 0x2a
 8001166:	edd7 7a02 	vldr	s15, [r7, #8]
 800116a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116e:	ee17 2a90 	vmov	r2, s15
 8001172:	b292      	uxth	r2, r2
 8001174:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	332c      	adds	r3, #44	@ 0x2c
 800117c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001184:	ee17 2a90 	vmov	r2, s15
 8001188:	b292      	uxth	r2, r2
 800118a:	801a      	strh	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	3724      	adds	r7, #36	@ 0x24
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) //
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80011a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
	if (index >= 0 && index <= 9) {
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d81c      	bhi.n	80011ec <set_Target_Position_ten_points+0x54>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = r_pos;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	78fb      	ldrb	r3, [r7, #3]
 80011b8:	3310      	adds	r3, #16
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	edd7 7a02 	vldr	s15, [r7, #8]
 80011c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011c6:	ee17 2a90 	vmov	r2, s15
 80011ca:	b292      	uxth	r2, r2
 80011cc:	801a      	strh	r2, [r3, #0]
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 = theta_pos;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685a      	ldr	r2, [r3, #4]
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	3321      	adds	r3, #33	@ 0x21
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80011e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e4:	ee17 2a90 	vmov	r2, s15
 80011e8:	b292      	uxth	r2, r2
 80011ea:	801a      	strh	r2, [r3, #0]
	}
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	3380      	adds	r3, #128	@ 0x80
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	81fb      	strh	r3, [r7, #14]
	return goal_r_position / 10.0;
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f955 	bl	80004bc <__aeabi_i2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <modbus_set_goal_r_position+0x3c>)
 8001218:	f7ff fae4 	bl	80007e4 <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fbc6 	bl	80009b4 <__aeabi_d2uiz>
 8001228:	4603      	mov	r3, r0
 800122a:	b29b      	uxth	r3, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40240000 	.word	0x40240000

08001238 <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	3382      	adds	r3, #130	@ 0x82
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position / 10.0;
 800124a:	89fb      	ldrh	r3, [r7, #14]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f935 	bl	80004bc <__aeabi_i2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <modbus_set_goal_theta_position+0x3c>)
 8001258:	f7ff fac4 	bl	80007e4 <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fba6 	bl	80009b4 <__aeabi_d2uiz>
 8001268:	4603      	mov	r3, r0
 800126a:	b29b      	uxth	r3, r3
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40240000 	.word	0x40240000

08001278 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001288:	213c      	movs	r1, #60	@ 0x3c
 800128a:	6838      	ldr	r0, [r7, #0]
 800128c:	f006 fe1a 	bl	8007ec4 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001296:	461a      	mov	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e0:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f247 5230 	movw	r2, #30000	@ 0x7530
 80012f2:	4293      	cmp	r3, r2
 80012f4:	dd05      	ble.n	8001302 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 80012fc:	3b60      	subs	r3, #96	@ 0x60
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e008      	b.n	8001314 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4a48      	ldr	r2, [pc, #288]	@ (8001428 <Encoder_Update+0x15c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	da04      	bge.n	8001314 <Encoder_Update+0x48>
        deltaRaw += 60000;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001310:	3360      	adds	r3, #96	@ 0x60
 8001312:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	ed93 7a02 	vldr	s14, [r3, #8]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800142c <Encoder_Update+0x160>
 8001328:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800132c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001430 <Encoder_Update+0x164>
 8001330:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	ed93 7a02 	vldr	s14, [r3, #8]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a06 	vldr	s15, [r3, #24]
 800134a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800134e:	ed97 7a00 	vldr	s14, [r7]
 8001352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edd3 7a07 	vldr	s15, [r3, #28]
 8001368:	ee77 6a67 	vsub.f32	s13, s14, s15
 800136c:	ed97 7a00 	vldr	s14, [r7]
 8001370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001380:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001434 <Encoder_Update+0x168>
 8001384:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013b4:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001430 <Encoder_Update+0x164>
 80013b8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013bc:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 80013c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80013c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80013da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013de:	ed97 7a00 	vldr	s14, [r7]
 80013e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80013f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013fc:	ed97 7a00 	vldr	s14, [r7]
 8001400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1a      	ldr	r2, [r3, #32]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	ffff8ad0 	.word	0xffff8ad0
 800142c:	40c90fda 	.word	0x40c90fda
 8001430:	463b8000 	.word	0x463b8000
 8001434:	42651738 	.word	0x42651738

08001438 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	ee07 3a90 	vmov	s15, r3
}
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	ee07 3a90 	vmov	s15, r3
}
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	ee07 3a90 	vmov	s15, r3
}
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	ee07 3a90 	vmov	s15, r3
}
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	ee07 3a90 	vmov	s15, r3
}
 80014c0:	eeb0 0a67 	vmov.f32	s0, s15
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	ee07 3a90 	vmov	s15, r3
}
 80014de:	eeb0 0a67 	vmov.f32	s0, s15
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	ee07 3a90 	vmov	s15, r3
}
 80014fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3370      	adds	r3, #112	@ 0x70
 8001518:	2204      	movs	r2, #4
 800151a:	2104      	movs	r1, #4
 800151c:	f00a fe8f 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f103 0008 	add.w	r0, r3, #8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	33b0      	adds	r3, #176	@ 0xb0
 800152a:	2204      	movs	r2, #4
 800152c:	2104      	movs	r1, #4
 800152e:	f00a fe86 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f103 0010 	add.w	r0, r3, #16
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	33f0      	adds	r3, #240	@ 0xf0
 800153c:	2204      	movs	r2, #4
 800153e:	2104      	movs	r1, #4
 8001540:	f00a fe7d 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f103 0018 	add.w	r0, r3, #24
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8001550:	2204      	movs	r2, #4
 8001552:	2104      	movs	r1, #4
 8001554:	f00a fe73 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f103 0020 	add.w	r0, r3, #32
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8001564:	2204      	movs	r2, #4
 8001566:	2104      	movs	r1, #4
 8001568:	f00a fe69 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 8001578:	2204      	movs	r2, #4
 800157a:	2104      	movs	r1, #4
 800157c:	f00a fe5f 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800158c:	2204      	movs	r2, #4
 800158e:	2104      	movs	r1, #4
 8001590:	f00a fe55 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80015a0:	2201      	movs	r2, #1
 80015a2:	2104      	movs	r1, #4
 80015a4:	f00a fe4b 	bl	800c23e <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 80015b4:	2201      	movs	r2, #1
 80015b6:	2104      	movs	r1, #4
 80015b8:	f00a fe41 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80015c8:	2201      	movs	r2, #1
 80015ca:	2104      	movs	r1, #4
 80015cc:	f00a fe37 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015dc:	2201      	movs	r2, #1
 80015de:	2104      	movs	r1, #4
 80015e0:	f00a fe2d 	bl	800c23e <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80015f0:	2204      	movs	r2, #4
 80015f2:	2104      	movs	r1, #4
 80015f4:	f00a fe23 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8001604:	2204      	movs	r2, #4
 8001606:	2104      	movs	r1, #4
 8001608:	f00a fe19 	bl	800c23e <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001618:	2204      	movs	r2, #4
 800161a:	2104      	movs	r1, #4
 800161c:	f00a fe0f 	bl	800c23e <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e00b      	b.n	800163e <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	338c      	adds	r3, #140	@ 0x8c
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	3304      	adds	r3, #4
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	3301      	adds	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2b03      	cmp	r3, #3
 8001642:	ddf0      	ble.n	8001626 <Kalman_Init+0x11c>
    }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 800164e:	b480      	push	{r7}
 8001650:	b085      	sub	sp, #20
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e01c      	b.n	800169a <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	e013      	b.n	800168e <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	429a      	cmp	r2, r3
 800166c:	d101      	bne.n	8001672 <Kalman_SetProcessNoise+0x24>
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	e001      	b.n	8001676 <Kalman_SetProcessNoise+0x28>
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	0091      	lsls	r1, r2, #2
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	440a      	add	r2, r1
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	324c      	adds	r2, #76	@ 0x4c
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	440a      	add	r2, r1
 8001686:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	3301      	adds	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b03      	cmp	r3, #3
 8001692:	dde8      	ble.n	8001666 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3301      	adds	r3, #1
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b03      	cmp	r3, #3
 800169e:	dddf      	ble.n	8001660 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e01c      	b.n	80016fa <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80016c0:	2300      	movs	r3, #0
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	e013      	b.n	80016ee <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d101      	bne.n	80016d2 <Kalman_SetMeasurementNoise+0x24>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	e001      	b.n	80016d6 <Kalman_SetMeasurementNoise+0x28>
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	0091      	lsls	r1, r2, #2
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	440a      	add	r2, r1
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	325c      	adds	r2, #92	@ 0x5c
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	440a      	add	r2, r1
 80016e6:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	3301      	adds	r3, #1
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	dde8      	ble.n	80016c6 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3301      	adds	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	dddf      	ble.n	80016c0 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3358      	adds	r3, #88	@ 0x58
 8001742:	461a      	mov	r2, r3
 8001744:	f00b f90a 	bl	800c95c <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f103 0008 	add.w	r0, r3, #8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3360      	adds	r3, #96	@ 0x60
 8001758:	461a      	mov	r2, r3
 800175a:	f00b f8ff 	bl	800c95c <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3340      	adds	r3, #64	@ 0x40
 800176e:	461a      	mov	r2, r3
 8001770:	f00a fd2a 	bl	800c1c8 <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3358      	adds	r3, #88	@ 0x58
 8001780:	461a      	mov	r2, r3
 8001782:	f00b f8eb 	bl	800c95c <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3360      	adds	r3, #96	@ 0x60
 800178c:	4619      	mov	r1, r3
 800178e:	4610      	mov	r0, r2
 8001790:	f00b f999 	bl	800cac6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3328      	adds	r3, #40	@ 0x28
 80017a4:	461a      	mov	r2, r3
 80017a6:	f00b f8d9 	bl	800c95c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f103 0118 	add.w	r1, r3, #24
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3328      	adds	r3, #40	@ 0x28
 80017ba:	461a      	mov	r2, r3
 80017bc:	f00a fd04 	bl	800c1c8 <arm_mat_add_f32>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
 80017d6:	e00e      	b.n	80017f6 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	6879      	ldr	r1, [r7, #4]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3394      	adds	r3, #148	@ 0x94
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	3304      	adds	r3, #4
 80017ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	3301      	adds	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	dded      	ble.n	80017d8 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f103 0210 	add.w	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3360      	adds	r3, #96	@ 0x60
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f00b f95c 	bl	800cac6 <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3358      	adds	r3, #88	@ 0x58
 800181e:	461a      	mov	r2, r3
 8001820:	f00b f89c 	bl	800c95c <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f103 0010 	add.w	r0, r3, #16
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3368      	adds	r3, #104	@ 0x68
 8001834:	461a      	mov	r2, r3
 8001836:	f00b f891 	bl	800c95c <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f103 0120 	add.w	r1, r3, #32
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3368      	adds	r3, #104	@ 0x68
 800184a:	461a      	mov	r2, r3
 800184c:	f00a fcbc 	bl	800c1c8 <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3368      	adds	r3, #104	@ 0x68
 800185a:	4619      	mov	r1, r3
 800185c:	4610      	mov	r0, r2
 800185e:	f00a fd06 	bl	800c26e <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3330      	adds	r3, #48	@ 0x30
 8001872:	461a      	mov	r2, r3
 8001874:	f00b f872 	bl	800c95c <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f103 0010 	add.w	r0, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3348      	adds	r3, #72	@ 0x48
 8001888:	461a      	mov	r2, r3
 800188a:	f00b f867 	bl	800c95c <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
 8001892:	e01c      	b.n	80018ce <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	3394      	adds	r3, #148	@ 0x94
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	3304      	adds	r3, #4
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	3390      	adds	r3, #144	@ 0x90
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
 80018b0:	edd3 7a00 	vldr	s15, [r3]
 80018b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	3390      	adds	r3, #144	@ 0x90
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3304      	adds	r3, #4
 80018c4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	3301      	adds	r3, #1
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	dddf      	ble.n	8001894 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3348      	adds	r3, #72	@ 0x48
 80018e4:	461a      	mov	r2, r3
 80018e6:	f00b f839 	bl	800c95c <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e01c      	b.n	800192a <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	338c      	adds	r3, #140	@ 0x8c
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	3304      	adds	r3, #4
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3390      	adds	r3, #144	@ 0x90
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3304      	adds	r3, #4
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	338c      	adds	r3, #140	@ 0x8c
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	3304      	adds	r3, #4
 8001920:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2b03      	cmp	r3, #3
 800192e:	dddf      	ble.n	80018f0 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8001930:	2300      	movs	r3, #0
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	e00b      	b.n	800194e <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3398      	adds	r3, #152	@ 0x98
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	3304      	adds	r3, #4
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	3301      	adds	r3, #1
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b0f      	cmp	r3, #15
 8001952:	ddf0      	ble.n	8001936 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	e00e      	b.n	8001978 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	3398      	adds	r3, #152	@ 0x98
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	3304      	adds	r3, #4
 800196c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001970:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3301      	adds	r3, #1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b03      	cmp	r3, #3
 800197c:	dded      	ble.n	800195a <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f103 0110 	add.w	r1, r3, #16
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3360      	adds	r3, #96	@ 0x60
 800198e:	461a      	mov	r2, r3
 8001990:	f00a ffe4 	bl	800c95c <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	3358      	adds	r3, #88	@ 0x58
 80019a4:	461a      	mov	r2, r3
 80019a6:	f00b f853 	bl	800ca50 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3328      	adds	r3, #40	@ 0x28
 80019ba:	461a      	mov	r2, r3
 80019bc:	f00a ffce 	bl	800c95c <arm_mat_mult_f32>
}
 80019c0:	bf00      	nop
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <modbus_1t5_Timeout+0x1c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2201      	movs	r2, #1
 80019d6:	751a      	strb	r2, [r3, #20]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	2000027c 	.word	0x2000027c

080019e8 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <modbus_3t5_Timeout+0x1c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	755a      	strb	r2, [r3, #21]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	2000027c 	.word	0x2000027c

08001a08 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <modbus_UART_Recived+0x60>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2201      	movs	r2, #1
 8001a18:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001a1a:	4b13      	ldr	r3, [pc, #76]	@ (8001a68 <modbus_UART_Recived+0x60>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8001a22:	1c59      	adds	r1, r3, #1
 8001a24:	b289      	uxth	r1, r1
 8001a26:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8001a2a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001a2e:	d210      	bcs.n	8001a52 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <modbus_UART_Recived+0x60>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68d8      	ldr	r0, [r3, #12]
 8001a36:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <modbus_UART_Recived+0x60>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <modbus_UART_Recived+0x60>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001a42:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001a46:	4413      	add	r3, r2
 8001a48:	3302      	adds	r3, #2
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f008 f849 	bl	8009ae4 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001a52:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <modbus_UART_Recived+0x60>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000027c 	.word	0x2000027c

08001a6c <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8001a76:	4a24      	ldr	r2, [pc, #144]	@ (8001b08 <Modbus_init+0x9c>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	@ (8001b08 <Modbus_init+0x9c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8001a84:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <Modbus_init+0x9c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	4a20      	ldr	r2, [pc, #128]	@ (8001b0c <Modbus_init+0xa0>)
 8001a8c:	2114      	movs	r1, #20
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 ff1e 	bl	80088d0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001a94:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <Modbus_init+0x9c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <Modbus_init+0xa4>)
 8001a9c:	210e      	movs	r1, #14
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f006 ff16 	bl	80088d0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8001aa4:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <Modbus_init+0x9c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	@ (8001b14 <Modbus_init+0xa8>)
 8001aac:	2103      	movs	r1, #3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f007 ff5e 	bl	8009970 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <Modbus_init+0x9c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68d8      	ldr	r0, [r3, #12]
 8001aba:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <Modbus_init+0x9c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <Modbus_init+0x9c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001ac6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001aca:	4413      	add	r3, r2
 8001acc:	3302      	adds	r3, #2
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f008 f807 	bl	8009ae4 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <Modbus_init+0x9c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10c      	bne.n	8001b00 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ae6:	4b08      	ldr	r3, [pc, #32]	@ (8001b08 <Modbus_init+0x9c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691b      	ldr	r3, [r3, #16]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f005 fdd9 	bl	80076a4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <Modbus_init+0x9c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f006 f8a0 	bl	8007c40 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	2000027c 	.word	0x2000027c
 8001b0c:	080019c9 	.word	0x080019c9
 8001b10:	080019e9 	.word	0x080019e9
 8001b14:	08001a09 	.word	0x08001a09

08001b18 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001b24:	23ff      	movs	r3, #255	@ 0xff
 8001b26:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001b28:	23ff      	movs	r3, #255	@ 0xff
 8001b2a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001b2c:	e013      	b.n	8001b56 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	781a      	ldrb	r2, [r3, #0]
 8001b36:	7bbb      	ldrb	r3, [r7, #14]
 8001b38:	4053      	eors	r3, r2
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001b3e:	4a10      	ldr	r2, [pc, #64]	@ (8001b80 <CRC16+0x68>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	4413      	add	r3, r2
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	4053      	eors	r3, r2
 8001b4a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b84 <CRC16+0x6c>)
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	4413      	add	r3, r2
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001b56:	883b      	ldrh	r3, [r7, #0]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	803a      	strh	r2, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1e6      	bne.n	8001b2e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001b60:	7bfb      	ldrb	r3, [r7, #15]
 8001b62:	b21b      	sxth	r3, r3
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	b29b      	uxth	r3, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	20000100 	.word	0x20000100
 8001b84:	20000000 	.word	0x20000000

08001b88 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001b8e:	4b80      	ldr	r3, [pc, #512]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	7e1b      	ldrb	r3, [r3, #24]
 8001b94:	3b01      	subs	r3, #1
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d80a      	bhi.n	8001bb0 <Modbus_Protocal_Worker+0x28>
 8001b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <Modbus_Protocal_Worker+0x18>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001bbb 	.word	0x08001bbb
 8001ba4:	08001d59 	.word	0x08001d59
 8001ba8:	08001c45 	.word	0x08001c45
 8001bac:	08001c6b 	.word	0x08001c6b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001bb0:	4b77      	ldr	r3, [pc, #476]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	761a      	strb	r2, [r3, #24]
		break;
 8001bb8:	e0e6      	b.n	8001d88 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001bba:	4b75      	ldr	r3, [pc, #468]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001bc6:	f000 f9d5 	bl	8001f74 <Modbus_Emission>
 8001bca:	e01c      	b.n	8001c06 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001bcc:	4b70      	ldr	r3, [pc, #448]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	7d9b      	ldrb	r3, [r3, #22]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d017      	beq.n	8001c06 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001bde:	4b6c      	ldr	r3, [pc, #432]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2200      	movs	r2, #0
 8001be4:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001be6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b67      	ldr	r3, [pc, #412]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001bfe:	4b64      	ldr	r3, [pc, #400]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2203      	movs	r2, #3
 8001c04:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001c06:	4b62      	ldr	r3, [pc, #392]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c10:	2b20      	cmp	r3, #32
 8001c12:	f040 80b2 	bne.w	8001d7a <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001c16:	4b5e      	ldr	r3, [pc, #376]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001c20:	4b5b      	ldr	r3, [pc, #364]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68d8      	ldr	r0, [r3, #12]
 8001c26:	4b5a      	ldr	r3, [pc, #360]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	4b59      	ldr	r3, [pc, #356]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001c32:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001c36:	4413      	add	r3, r2
 8001c38:	3302      	adds	r3, #2
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f007 ff51 	bl	8009ae4 <HAL_UART_Receive_IT>
		}
		break;
 8001c42:	e09a      	b.n	8001d7a <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001c44:	4b52      	ldr	r3, [pc, #328]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	7d1b      	ldrb	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8097 	beq.w	8001d7e <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001c50:	4b4f      	ldr	r3, [pc, #316]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001c58:	4b4d      	ldr	r3, [pc, #308]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	22fe      	movs	r2, #254	@ 0xfe
 8001c5e:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001c60:	4b4b      	ldr	r3, [pc, #300]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2204      	movs	r2, #4
 8001c66:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001c68:	e089      	b.n	8001d7e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001c6a:	4b49      	ldr	r3, [pc, #292]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	7d9b      	ldrb	r3, [r3, #22]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d009      	beq.n	8001c88 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8001c74:	4b46      	ldr	r3, [pc, #280]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001c80:	4b43      	ldr	r3, [pc, #268]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	22ff      	movs	r2, #255	@ 0xff
 8001c86:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001c88:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001c90:	f113 0f02 	cmn.w	r3, #2
 8001c94:	d150      	bne.n	8001d38 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001c96:	4b3e      	ldr	r3, [pc, #248]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001cae:	3b02      	subs	r3, #2
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7ff ff30 	bl	8001b18 <CRC16>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001cbc:	793a      	ldrb	r2, [r7, #4]
 8001cbe:	4b34      	ldr	r3, [pc, #208]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001cc0:	6819      	ldr	r1, [r3, #0]
 8001cc2:	4b33      	ldr	r3, [pc, #204]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001cca:	3b02      	subs	r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d10c      	bne.n	8001cf0 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001cd6:	797a      	ldrb	r2, [r7, #5]
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001cda:	6819      	ldr	r1, [r3, #0]
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d004      	beq.n	8001cfa <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001cf0:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	22ff      	movs	r2, #255	@ 0xff
 8001cf6:	75da      	strb	r2, [r3, #23]
				break;
 8001cf8:	e046      	b.n	8001d88 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001cfa:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001d02:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d113      	bne.n	8001d34 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001d0c:	4b20      	ldr	r3, [pc, #128]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001d14:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001d1c:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001d26:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001d28:	461a      	mov	r2, r3
 8001d2a:	f00a ff3f 	bl	800cbac <memcpy>

			//execute command
			Modbus_frame_response();
 8001d2e:	f000 f909 	bl	8001f44 <Modbus_frame_response>
 8001d32:	e001      	b.n	8001d38 <Modbus_Protocal_Worker+0x1b0>
				break;
 8001d34:	bf00      	nop
					}
		break;


	}
}
 8001d36:	e027      	b.n	8001d88 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8001d38:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	7d5b      	ldrb	r3, [r3, #21]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d01f      	beq.n	8001d82 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8001d42:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001d4a:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f007 ff93 	bl	8009c7c <HAL_UART_AbortReceive>
		break;
 8001d56:	e014      	b.n	8001d82 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001d58:	4b0d      	ldr	r3, [pc, #52]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d62:	2b20      	cmp	r3, #32
 8001d64:	d10f      	bne.n	8001d86 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8001d66:	4b0a      	ldr	r3, [pc, #40]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001d70:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <Modbus_Protocal_Worker+0x208>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	761a      	strb	r2, [r3, #24]
		break;
 8001d78:	e005      	b.n	8001d86 <Modbus_Protocal_Worker+0x1fe>
		break;
 8001d7a:	bf00      	nop
 8001d7c:	e004      	b.n	8001d88 <Modbus_Protocal_Worker+0x200>
		break;
 8001d7e:	bf00      	nop
 8001d80:	e002      	b.n	8001d88 <Modbus_Protocal_Worker+0x200>
		break;
 8001d82:	bf00      	nop
 8001d84:	e000      	b.n	8001d88 <Modbus_Protocal_Worker+0x200>
		break;
 8001d86:	bf00      	nop
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000027c 	.word	0x2000027c

08001d94 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	7e9b      	ldrb	r3, [r3, #26]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	7ed2      	ldrb	r2, [r2, #27]
 8001daa:	4413      	add	r3, r2
 8001dac:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001dae:	88fa      	ldrh	r2, [r7, #6]
 8001db0:	4b17      	ldr	r3, [pc, #92]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d903      	bls.n	8001dc2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001dba:	2002      	movs	r0, #2
 8001dbc:	f000 f8a0 	bl	8001f00 <ModbusErrorReply>
			 return;
 8001dc0:	e023      	b.n	8001e0a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	440b      	add	r3, r1
 8001dd2:	7f12      	ldrb	r2, [r2, #28]
 8001dd4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	440b      	add	r3, r1
 8001de6:	7f52      	ldrb	r2, [r2, #29]
 8001de8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8001df2:	4b07      	ldr	r3, [pc, #28]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001df8:	2208      	movs	r2, #8
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f00a fed6 	bl	800cbac <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001e00:	4b03      	ldr	r3, [pc, #12]	@ (8001e10 <modbusWrite1Register+0x7c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2205      	movs	r2, #5
 8001e06:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	2000027c 	.word	0x2000027c

08001e14 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001e1a:	4b38      	ldr	r3, [pc, #224]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	7f1b      	ldrb	r3, [r3, #28]
 8001e20:	021b      	lsls	r3, r3, #8
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	4a35      	ldr	r2, [pc, #212]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	7f52      	ldrb	r2, [r2, #29]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001e2e:	4b33      	ldr	r3, [pc, #204]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	7e9b      	ldrb	r3, [r3, #26]
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	4a30      	ldr	r2, [pc, #192]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	7ed2      	ldrb	r2, [r2, #27]
 8001e3e:	4413      	add	r3, r2
 8001e40:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <modbusRead1Register+0x3a>
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	2b7d      	cmp	r3, #125	@ 0x7d
 8001e4c:	d903      	bls.n	8001e56 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001e4e:	2003      	movs	r0, #3
 8001e50:	f000 f856 	bl	8001f00 <ModbusErrorReply>
		 return;
 8001e54:	e04e      	b.n	8001ef4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001e56:	88ba      	ldrh	r2, [r7, #4]
 8001e58:	4b28      	ldr	r3, [pc, #160]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d808      	bhi.n	8001e74 <modbusRead1Register+0x60>
 8001e62:	88ba      	ldrh	r2, [r7, #4]
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	4413      	add	r3, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4b24      	ldr	r3, [pc, #144]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d903      	bls.n	8001e7c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001e74:	2002      	movs	r0, #2
 8001e76:	f000 f843 	bl	8001f00 <ModbusErrorReply>
		 return;
 8001e7a:	e03b      	b.n	8001ef4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2203      	movs	r2, #3
 8001e82:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	0052      	lsls	r2, r2, #1
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001e96:	2400      	movs	r4, #0
 8001e98:	e020      	b.n	8001edc <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <modbusRead1Register+0xe8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	4423      	add	r3, r4
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	18d1      	adds	r1, r2, r3
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <modbusRead1Register+0xe8>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	1c63      	adds	r3, r4, #1
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	7849      	ldrb	r1, [r1, #1]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <modbusRead1Register+0xe8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	88bb      	ldrh	r3, [r7, #4]
 8001ec2:	4423      	add	r3, r4
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	18d1      	adds	r1, r2, r3
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <modbusRead1Register+0xe8>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	0063      	lsls	r3, r4, #1
 8001ece:	3303      	adds	r3, #3
 8001ed0:	7809      	ldrb	r1, [r1, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001eda:	3401      	adds	r4, #1
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	429c      	cmp	r4, r3
 8001ee0:	dbdb      	blt.n	8001e9a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <modbusRead1Register+0xe8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0052      	lsls	r2, r2, #1
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000027c 	.word	0x2000027c

08001f00 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <ModbusErrorReply+0x40>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	7e5a      	ldrb	r2, [r3, #25]
 8001f10:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <ModbusErrorReply+0x40>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <ModbusErrorReply+0x40>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	79fa      	ldrb	r2, [r7, #7]
 8001f24:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8001f28:	4b05      	ldr	r3, [pc, #20]	@ (8001f40 <ModbusErrorReply+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	2000027c 	.word	0x2000027c

08001f44 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <Modbus_frame_response+0x2c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	7e5b      	ldrb	r3, [r3, #25]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d004      	beq.n	8001f5c <Modbus_frame_response+0x18>
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d105      	bne.n	8001f62 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001f56:	f7ff ff1d 	bl	8001d94 <modbusWrite1Register>
		break;
 8001f5a:	e006      	b.n	8001f6a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001f5c:	f7ff ff5a 	bl	8001e14 <modbusRead1Register>
		break;
 8001f60:	e003      	b.n	8001f6a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001f62:	2001      	movs	r0, #1
 8001f64:	f7ff ffcc 	bl	8001f00 <ModbusErrorReply>
		break;
 8001f68:	bf00      	nop

	}
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000027c 	.word	0x2000027c

08001f74 <Modbus_Emission>:

void Modbus_Emission()
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800206c <Modbus_Emission+0xf8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	d15d      	bne.n	8002044 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001f88:	4b38      	ldr	r3, [pc, #224]	@ (800206c <Modbus_Emission+0xf8>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b37      	ldr	r3, [pc, #220]	@ (800206c <Modbus_Emission+0xf8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001f96:	4b35      	ldr	r3, [pc, #212]	@ (800206c <Modbus_Emission+0xf8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001f9e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001fa0:	4b32      	ldr	r3, [pc, #200]	@ (800206c <Modbus_Emission+0xf8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8001fa8:	4b30      	ldr	r3, [pc, #192]	@ (800206c <Modbus_Emission+0xf8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f00a fdfb 	bl	800cbac <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	@ (800206c <Modbus_Emission+0xf8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <Modbus_Emission+0xf8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	3203      	adds	r2, #3
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001fcc:	4b27      	ldr	r3, [pc, #156]	@ (800206c <Modbus_Emission+0xf8>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001fd4:	4b25      	ldr	r3, [pc, #148]	@ (800206c <Modbus_Emission+0xf8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001fdc:	3b02      	subs	r3, #2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f7ff fd99 	bl	8001b18 <CRC16>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001fea:	4b20      	ldr	r3, [pc, #128]	@ (800206c <Modbus_Emission+0xf8>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <Modbus_Emission+0xf8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001ff6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001ff8:	7939      	ldrb	r1, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <Modbus_Emission+0xf8>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b19      	ldr	r3, [pc, #100]	@ (800206c <Modbus_Emission+0xf8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800200e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002010:	7979      	ldrb	r1, [r7, #5]
 8002012:	4413      	add	r3, r2
 8002014:	460a      	mov	r2, r1
 8002016:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <Modbus_Emission+0xf8>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002024:	2b20      	cmp	r3, #32
 8002026:	d10d      	bne.n	8002044 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <Modbus_Emission+0xf8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800202e:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <Modbus_Emission+0xf8>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002036:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <Modbus_Emission+0xf8>)
 8002038:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800203a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800203e:	461a      	mov	r2, r3
 8002040:	f007 fd9c 	bl	8009b7c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002044:	4b09      	ldr	r3, [pc, #36]	@ (800206c <Modbus_Emission+0xf8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800204c:	4b07      	ldr	r3, [pc, #28]	@ (800206c <Modbus_Emission+0xf8>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2200      	movs	r2, #0
 8002052:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002054:	4b05      	ldr	r3, [pc, #20]	@ (800206c <Modbus_Emission+0xf8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 800205c:	4b03      	ldr	r3, [pc, #12]	@ (800206c <Modbus_Emission+0xf8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2202      	movs	r2, #2
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	2000027c 	.word	0x2000027c

08002070 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8002070:	b4b0      	push	{r4, r5, r7}
 8002072:	b09f      	sub	sp, #124	@ 0x7c
 8002074:	af00      	add	r7, sp, #0
 8002076:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002078:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 800207c:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002080:	ed87 2b08 	vstr	d2, [r7, #32]
 8002084:	ed87 3b06 	vstr	d3, [r7, #24]
 8002088:	ed87 4b04 	vstr	d4, [r7, #16]
 800208c:	ed87 5b02 	vstr	d5, [r7, #8]
 8002090:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002094:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002098:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800209c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020a0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 80020a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80020a8:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 80020ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80020b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020b8:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 80020bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020c0:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 80020c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020c8:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 80020cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ce:	461d      	mov	r5, r3
 80020d0:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e4:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80020e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80020ea:	377c      	adds	r7, #124	@ 0x7c
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bcb0      	pop	{r4, r5, r7}
 80020f0:	4770      	bx	lr

080020f2 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 80020f2:	b4b0      	push	{r4, r5, r7}
 80020f4:	b09f      	sub	sp, #124	@ 0x7c
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80020fa:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 80020fe:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002102:	ed87 2b08 	vstr	d2, [r7, #32]
 8002106:	ed87 3b06 	vstr	d3, [r7, #24]
 800210a:	ed87 4b04 	vstr	d4, [r7, #16]
 800210e:	ed87 5b02 	vstr	d5, [r7, #8]
 8002112:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002116:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800211a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 800211e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002122:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002126:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800212a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800212e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002132:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002136:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800213a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800214a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 800214e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002150:	461d      	mov	r5, r3
 8002152:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002162:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002166:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800216a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800216c:	377c      	adds	r7, #124	@ 0x7c
 800216e:	46bd      	mov	sp, r7
 8002170:	bcb0      	pop	{r4, r5, r7}
 8002172:	4770      	bx	lr

08002174 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	@ 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	6178      	str	r0, [r7, #20]
 800217c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002180:	edc7 0a03 	vstr	s1, [r7, #12]
 8002184:	ed87 1a02 	vstr	s2, [r7, #8]
 8002188:	edc7 1a01 	vstr	s3, [r7, #4]
 800218c:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002190:	ed97 7a03 	vldr	s14, [r7, #12]
 8002194:	edd7 7a04 	vldr	s15, [r7, #16]
 8002198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800219c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 80021a0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	db02      	blt.n	80021b4 <InitTrajectorySegment+0x40>
 80021ae:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021b2:	e000      	b.n	80021b6 <InitTrajectorySegment+0x42>
 80021b4:	4b49      	ldr	r3, [pc, #292]	@ (80022dc <InitTrajectorySegment+0x168>)
 80021b6:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 80021b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021bc:	eef0 7ae7 	vabs.f32	s15, s15
 80021c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 80021c4:	edd7 6a02 	vldr	s13, [r7, #8]
 80021c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80021cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d0:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 80021d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80021dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021e0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80021e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80021ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f0:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 80021f4:	edd7 7a08 	vldr	s15, [r7, #32]
 80021f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021fc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002208:	d524      	bpl.n	8002254 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 800220a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800220e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002212:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002216:	eeb0 0a66 	vmov.f32	s0, s13
 800221a:	f00a fcd5 	bl	800cbc8 <sqrtf>
 800221e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 800222a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800222e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002238:	ed97 7a01 	vldr	s14, [r7, #4]
 800223c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002244:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	edc3 7a02 	vstr	s15, [r3, #8]
 8002252:	e027      	b.n	80022a4 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002254:	edd7 7a08 	vldr	s15, [r7, #32]
 8002258:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800225c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002264:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002268:	edd7 6a07 	vldr	s13, [r7, #28]
 800226c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 800227a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800227e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	edd3 7a05 	vldr	s15, [r3, #20]
 8002288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8002292:	ed97 7a02 	vldr	s14, [r7, #8]
 8002296:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800229a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 80022b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80022b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80022b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022c6:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022cc:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	621a      	str	r2, [r3, #32]
}
 80022d4:	bf00      	nop
 80022d6:	3730      	adds	r7, #48	@ 0x30
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	bf800000 	.word	0xbf800000

080022e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08c      	sub	sp, #48	@ 0x30
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80022e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2220      	movs	r2, #32
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f00a fc25 	bl	800cb48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80022fe:	4b32      	ldr	r3, [pc, #200]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002300:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002304:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002306:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002308:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800230c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800230e:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002314:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800231a:	4b2b      	ldr	r3, [pc, #172]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 800231c:	2200      	movs	r2, #0
 800231e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002320:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002326:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002328:	2204      	movs	r2, #4
 800232a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800232c:	4b26      	ldr	r3, [pc, #152]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 800232e:	2200      	movs	r2, #0
 8002330:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002332:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002334:	2200      	movs	r2, #0
 8002336:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002338:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 800233a:	2201      	movs	r2, #1
 800233c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800233e:	4b22      	ldr	r3, [pc, #136]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002348:	2200      	movs	r2, #0
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800234c:	4b1e      	ldr	r3, [pc, #120]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 800234e:	2200      	movs	r2, #0
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002352:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800235a:	4b1b      	ldr	r3, [pc, #108]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 800235c:	2200      	movs	r2, #0
 800235e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002368:	4817      	ldr	r0, [pc, #92]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 800236a:	f002 f939 	bl	80045e0 <HAL_ADC_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002374:	f000 ff9a 	bl	80032ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800237c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002380:	4619      	mov	r1, r3
 8002382:	4811      	ldr	r0, [pc, #68]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 8002384:	f003 f8d6 	bl	8005534 <HAL_ADCEx_MultiModeConfigChannel>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800238e:	f000 ff8d 	bl	80032ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <MX_ADC1_Init+0xec>)
 8002394:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002396:	2306      	movs	r3, #6
 8002398:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800239e:	237f      	movs	r3, #127	@ 0x7f
 80023a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80023a2:	2304      	movs	r3, #4
 80023a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4806      	ldr	r0, [pc, #24]	@ (80023c8 <MX_ADC1_Init+0xe8>)
 80023b0:	f002 fbc4 	bl	8004b3c <HAL_ADC_ConfigChannel>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80023ba:	f000 ff77 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	3730      	adds	r7, #48	@ 0x30
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000280 	.word	0x20000280
 80023cc:	04300002 	.word	0x04300002

080023d0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023d6:	463b      	mov	r3, r7
 80023d8:	2220      	movs	r2, #32
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00a fbb3 	bl	800cb48 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80023e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002490 <MX_ADC2_Init+0xc0>)
 80023e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002494 <MX_ADC2_Init+0xc4>)
 80023e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023e8:	4b29      	ldr	r3, [pc, #164]	@ (8002490 <MX_ADC2_Init+0xc0>)
 80023ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023ee:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <MX_ADC2_Init+0xc0>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023f6:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <MX_ADC2_Init+0xc0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <MX_ADC2_Init+0xc0>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002402:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002408:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <MX_ADC2_Init+0xc0>)
 800240a:	2204      	movs	r2, #4
 800240c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002416:	2200      	movs	r2, #0
 8002418:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800241a:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <MX_ADC2_Init+0xc0>)
 800241c:	2201      	movs	r2, #1
 800241e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <MX_ADC2_Init+0xc0>)
 800242a:	2200      	movs	r2, #0
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002434:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002436:	2200      	movs	r2, #0
 8002438:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800243c:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <MX_ADC2_Init+0xc0>)
 800243e:	2200      	movs	r2, #0
 8002440:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002442:	4b13      	ldr	r3, [pc, #76]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800244a:	4811      	ldr	r0, [pc, #68]	@ (8002490 <MX_ADC2_Init+0xc0>)
 800244c:	f002 f8c8 	bl	80045e0 <HAL_ADC_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8002456:	f000 ff29 	bl	80032ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800245a:	4b0f      	ldr	r3, [pc, #60]	@ (8002498 <MX_ADC2_Init+0xc8>)
 800245c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800245e:	2306      	movs	r3, #6
 8002460:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002462:	2300      	movs	r3, #0
 8002464:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002466:	237f      	movs	r3, #127	@ 0x7f
 8002468:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800246a:	2304      	movs	r3, #4
 800246c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002472:	463b      	mov	r3, r7
 8002474:	4619      	mov	r1, r3
 8002476:	4806      	ldr	r0, [pc, #24]	@ (8002490 <MX_ADC2_Init+0xc0>)
 8002478:	f002 fb60 	bl	8004b3c <HAL_ADC_ConfigChannel>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8002482:	f000 ff13 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200002ec 	.word	0x200002ec
 8002494:	50000100 	.word	0x50000100
 8002498:	08600004 	.word	0x08600004

0800249c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0a0      	sub	sp, #128	@ 0x80
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b4:	f107 0318 	add.w	r3, r7, #24
 80024b8:	2254      	movs	r2, #84	@ 0x54
 80024ba:	2100      	movs	r1, #0
 80024bc:	4618      	mov	r0, r3
 80024be:	f00a fb43 	bl	800cb48 <memset>
  if(adcHandle->Instance==ADC1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024ca:	d13e      	bne.n	800254a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80024d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80024d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024d8:	f107 0318 	add.w	r3, r7, #24
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fd13 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80024e8:	f000 fee0 	bl	80032ac <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024ec:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <HAL_ADC_MspInit+0x13c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	4a39      	ldr	r2, [pc, #228]	@ (80025d8 <HAL_ADC_MspInit+0x13c>)
 80024f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024f6:	4b38      	ldr	r3, [pc, #224]	@ (80025d8 <HAL_ADC_MspInit+0x13c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d10b      	bne.n	8002516 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024fe:	4b37      	ldr	r3, [pc, #220]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 8002500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002502:	4a36      	ldr	r2, [pc, #216]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 8002504:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800250a:	4b34      	ldr	r3, [pc, #208]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 800250c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b31      	ldr	r3, [pc, #196]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002522:	4b2e      	ldr	r3, [pc, #184]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 800252e:	2303      	movs	r3, #3
 8002530:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002532:	2303      	movs	r3, #3
 8002534:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800253e:	4619      	mov	r1, r3
 8002540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002544:	f003 fd4c 	bl	8005fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8002548:	e042      	b.n	80025d0 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a24      	ldr	r2, [pc, #144]	@ (80025e0 <HAL_ADC_MspInit+0x144>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d13d      	bne.n	80025d0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002554:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002558:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800255a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800255e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002560:	f107 0318 	add.w	r3, r7, #24
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fccf 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8002570:	f000 fe9c 	bl	80032ac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002574:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_ADC_MspInit+0x13c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a17      	ldr	r2, [pc, #92]	@ (80025d8 <HAL_ADC_MspInit+0x13c>)
 800257c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_ADC_MspInit+0x13c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10b      	bne.n	800259e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002586:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	4a14      	ldr	r2, [pc, #80]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 800258c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259e:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a2:	4a0e      	ldr	r2, [pc, #56]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025aa:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <HAL_ADC_MspInit+0x140>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 80025b6:	2302      	movs	r3, #2
 80025b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ba:	2303      	movs	r3, #3
 80025bc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 80025c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025c6:	4619      	mov	r1, r3
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025cc:	f003 fd08 	bl	8005fe0 <HAL_GPIO_Init>
}
 80025d0:	bf00      	nop
 80025d2:	3780      	adds	r7, #128	@ 0x80
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000358 	.word	0x20000358
 80025dc:	40021000 	.word	0x40021000
 80025e0:	50000100 	.word	0x50000100

080025e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025ea:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <MX_DMA_Init+0x50>)
 80025ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ee:	4a11      	ldr	r2, [pc, #68]	@ (8002634 <MX_DMA_Init+0x50>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80025f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <MX_DMA_Init+0x50>)
 80025f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002602:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <MX_DMA_Init+0x50>)
 8002604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002606:	4a0b      	ldr	r2, [pc, #44]	@ (8002634 <MX_DMA_Init+0x50>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6493      	str	r3, [r2, #72]	@ 0x48
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <MX_DMA_Init+0x50>)
 8002610:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	603b      	str	r3, [r7, #0]
 8002618:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	200b      	movs	r0, #11
 8002620:	f003 f96b 	bl	80058fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002624:	200b      	movs	r0, #11
 8002626:	f003 f982 	bl	800592e <HAL_NVIC_EnableIRQ>

}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	4b54      	ldr	r3, [pc, #336]	@ (80027a0 <MX_GPIO_Init+0x168>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	4a53      	ldr	r2, [pc, #332]	@ (80027a0 <MX_GPIO_Init+0x168>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800265a:	4b51      	ldr	r3, [pc, #324]	@ (80027a0 <MX_GPIO_Init+0x168>)
 800265c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002666:	4b4e      	ldr	r3, [pc, #312]	@ (80027a0 <MX_GPIO_Init+0x168>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	4a4d      	ldr	r2, [pc, #308]	@ (80027a0 <MX_GPIO_Init+0x168>)
 800266c:	f043 0320 	orr.w	r3, r3, #32
 8002670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002672:	4b4b      	ldr	r3, [pc, #300]	@ (80027a0 <MX_GPIO_Init+0x168>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267e:	4b48      	ldr	r3, [pc, #288]	@ (80027a0 <MX_GPIO_Init+0x168>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002682:	4a47      	ldr	r2, [pc, #284]	@ (80027a0 <MX_GPIO_Init+0x168>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268a:	4b45      	ldr	r3, [pc, #276]	@ (80027a0 <MX_GPIO_Init+0x168>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002696:	4b42      	ldr	r3, [pc, #264]	@ (80027a0 <MX_GPIO_Init+0x168>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	4a41      	ldr	r2, [pc, #260]	@ (80027a0 <MX_GPIO_Init+0x168>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a2:	4b3f      	ldr	r3, [pc, #252]	@ (80027a0 <MX_GPIO_Init+0x168>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2102      	movs	r1, #2
 80026b2:	483c      	ldr	r0, [pc, #240]	@ (80027a4 <MX_GPIO_Init+0x16c>)
 80026b4:	f003 fe16 	bl	80062e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2140      	movs	r1, #64	@ 0x40
 80026bc:	483a      	ldr	r0, [pc, #232]	@ (80027a8 <MX_GPIO_Init+0x170>)
 80026be:	f003 fe11 	bl	80062e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026c8:	4837      	ldr	r0, [pc, #220]	@ (80027a8 <MX_GPIO_Init+0x170>)
 80026ca:	f003 fe0b 	bl	80062e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 80026ce:	2302      	movs	r3, #2
 80026d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80026de:	f107 0314 	add.w	r3, r7, #20
 80026e2:	4619      	mov	r1, r3
 80026e4:	482f      	ldr	r0, [pc, #188]	@ (80027a4 <MX_GPIO_Init+0x16c>)
 80026e6:	f003 fc7b 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 80026ea:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80026ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026f0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 0314 	add.w	r3, r7, #20
 80026fe:	4619      	mov	r1, r3
 8002700:	4828      	ldr	r0, [pc, #160]	@ (80027a4 <MX_GPIO_Init+0x16c>)
 8002702:	f003 fc6d 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Left_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin;
 8002706:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800270a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800270c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_Left_GPIO_Port, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	4821      	ldr	r0, [pc, #132]	@ (80027a4 <MX_GPIO_Init+0x16c>)
 800271e:	f003 fc5f 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 8002722:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	481b      	ldr	r0, [pc, #108]	@ (80027a8 <MX_GPIO_Init+0x170>)
 800273c:	f003 fc50 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8002740:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002746:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800274a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4619      	mov	r1, r3
 8002756:	4814      	ldr	r0, [pc, #80]	@ (80027a8 <MX_GPIO_Init+0x170>)
 8002758:	f003 fc42 	bl	8005fe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 800275c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002762:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002768:	2300      	movs	r3, #0
 800276a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	4619      	mov	r1, r3
 8002772:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <MX_GPIO_Init+0x170>)
 8002774:	f003 fc34 	bl	8005fe0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002778:	2200      	movs	r2, #0
 800277a:	2100      	movs	r1, #0
 800277c:	2017      	movs	r0, #23
 800277e:	f003 f8bc 	bl	80058fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002782:	2017      	movs	r0, #23
 8002784:	f003 f8d3 	bl	800592e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	2028      	movs	r0, #40	@ 0x28
 800278e:	f003 f8b4 	bl	80058fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002792:	2028      	movs	r0, #40	@ 0x28
 8002794:	f003 f8cb 	bl	800592e <HAL_NVIC_EnableIRQ>

}
 8002798:	bf00      	nop
 800279a:	3728      	adds	r7, #40	@ 0x28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40021000 	.word	0x40021000
 80027a4:	48000400 	.word	0x48000400
 80027a8:	48000800 	.word	0x48000800
 80027ac:	00000000 	.word	0x00000000

080027b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b4:	ed2d 8b04 	vpush	{d8-d9}
 80027b8:	b098      	sub	sp, #96	@ 0x60
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027bc:	f001 fc93 	bl	80040e6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c0:	f000 fcda 	bl	8003178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027c4:	f7ff ff38 	bl	8002638 <MX_GPIO_Init>
  MX_DMA_Init();
 80027c8:	f7ff ff0c 	bl	80025e4 <MX_DMA_Init>
  MX_TIM3_Init();
 80027cc:	f000 ff74 	bl	80036b8 <MX_TIM3_Init>
  MX_ADC1_Init();
 80027d0:	f7ff fd86 	bl	80022e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80027d4:	f000 fece 	bl	8003574 <MX_TIM1_Init>
  MX_TIM2_Init();
 80027d8:	f000 ff20 	bl	800361c <MX_TIM2_Init>
  MX_TIM4_Init();
 80027dc:	f000 ffc2 	bl	8003764 <MX_TIM4_Init>
  MX_TIM20_Init();
 80027e0:	f001 f946 	bl	8003a70 <MX_TIM20_Init>
  MX_TIM8_Init();
 80027e4:	f001 f814 	bl	8003810 <MX_TIM8_Init>
  MX_TIM16_Init();
 80027e8:	f001 f8c2 	bl	8003970 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80027ec:	f001 fb78 	bl	8003ee0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80027f0:	f7ff fdee 	bl	80023d0 <MX_ADC2_Init>
  MX_SPI1_Init();
 80027f4:	f000 fd60 	bl	80032b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80027f8:	48a1      	ldr	r0, [pc, #644]	@ (8002a80 <main+0x2d0>)
 80027fa:	f004 fee3 	bl	80075c4 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80027fe:	48a1      	ldr	r0, [pc, #644]	@ (8002a84 <main+0x2d4>)
 8002800:	f004 fee0 	bl	80075c4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002804:	210c      	movs	r1, #12
 8002806:	489f      	ldr	r0, [pc, #636]	@ (8002a84 <main+0x2d4>)
 8002808:	f005 f8a0 	bl	800794c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 800280c:	2100      	movs	r1, #0
 800280e:	489c      	ldr	r0, [pc, #624]	@ (8002a80 <main+0x2d0>)
 8002810:	f005 f89c 	bl	800794c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 8002814:	2108      	movs	r1, #8
 8002816:	489a      	ldr	r0, [pc, #616]	@ (8002a80 <main+0x2d0>)
 8002818:	f005 f898 	bl	800794c <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 800281c:	499a      	ldr	r1, [pc, #616]	@ (8002a88 <main+0x2d8>)
 800281e:	489b      	ldr	r0, [pc, #620]	@ (8002a8c <main+0x2dc>)
 8002820:	f7fe fd2a 	bl	8001278 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 8002824:	499a      	ldr	r1, [pc, #616]	@ (8002a90 <main+0x2e0>)
 8002826:	489b      	ldr	r0, [pc, #620]	@ (8002a94 <main+0x2e4>)
 8002828:	f7fe fd26 	bl	8001278 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 800282c:	489a      	ldr	r0, [pc, #616]	@ (8002a98 <main+0x2e8>)
 800282e:	f002 f893 	bl	8004958 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8002832:	489a      	ldr	r0, [pc, #616]	@ (8002a9c <main+0x2ec>)
 8002834:	f004 ff36 	bl	80076a4 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002844:	213c      	movs	r1, #60	@ 0x3c
 8002846:	4892      	ldr	r0, [pc, #584]	@ (8002a90 <main+0x2e0>)
 8002848:	f005 fb3c 	bl	8007ec4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800284c:	213c      	movs	r1, #60	@ 0x3c
 800284e:	488e      	ldr	r0, [pc, #568]	@ (8002a88 <main+0x2d8>)
 8002850:	f005 fb38 	bl	8007ec4 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8002854:	4b92      	ldr	r3, [pc, #584]	@ (8002aa0 <main+0x2f0>)
 8002856:	4a93      	ldr	r2, [pc, #588]	@ (8002aa4 <main+0x2f4>)
 8002858:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800285a:	4b91      	ldr	r3, [pc, #580]	@ (8002aa0 <main+0x2f0>)
 800285c:	4a92      	ldr	r2, [pc, #584]	@ (8002aa8 <main+0x2f8>)
 800285e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8002860:	4b8f      	ldr	r3, [pc, #572]	@ (8002aa0 <main+0x2f0>)
 8002862:	2215      	movs	r2, #21
 8002864:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8002866:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa0 <main+0x2f0>)
 8002868:	22c8      	movs	r2, #200	@ 0xc8
 800286a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800286c:	498f      	ldr	r1, [pc, #572]	@ (8002aac <main+0x2fc>)
 800286e:	488c      	ldr	r0, [pc, #560]	@ (8002aa0 <main+0x2f0>)
 8002870:	f7ff f8fc 	bl	8001a6c <Modbus_init>

	Kalman_Init(&kf_pris);
 8002874:	488e      	ldr	r0, [pc, #568]	@ (8002ab0 <main+0x300>)
 8002876:	f7fe fe48 	bl	800150a <Kalman_Init>

	kf_pris.A_data[0] = 1;
 800287a:	4b8d      	ldr	r3, [pc, #564]	@ (8002ab0 <main+0x300>)
 800287c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002880:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8002882:	4b8b      	ldr	r3, [pc, #556]	@ (8002ab0 <main+0x300>)
 8002884:	4a8b      	ldr	r2, [pc, #556]	@ (8002ab4 <main+0x304>)
 8002886:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 8002888:	4b89      	ldr	r3, [pc, #548]	@ (8002ab0 <main+0x300>)
 800288a:	4a8b      	ldr	r2, [pc, #556]	@ (8002ab8 <main+0x308>)
 800288c:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 800288e:	4b88      	ldr	r3, [pc, #544]	@ (8002ab0 <main+0x300>)
 8002890:	4a8a      	ldr	r2, [pc, #552]	@ (8002abc <main+0x30c>)
 8002892:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8002894:	4b86      	ldr	r3, [pc, #536]	@ (8002ab0 <main+0x300>)
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 800289e:	4b84      	ldr	r3, [pc, #528]	@ (8002ab0 <main+0x300>)
 80028a0:	4a87      	ldr	r2, [pc, #540]	@ (8002ac0 <main+0x310>)
 80028a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 80028a6:	4b82      	ldr	r3, [pc, #520]	@ (8002ab0 <main+0x300>)
 80028a8:	4a86      	ldr	r2, [pc, #536]	@ (8002ac4 <main+0x314>)
 80028aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 80028ae:	4b80      	ldr	r3, [pc, #512]	@ (8002ab0 <main+0x300>)
 80028b0:	4a85      	ldr	r2, [pc, #532]	@ (8002ac8 <main+0x318>)
 80028b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 80028b6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ab0 <main+0x300>)
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 80028c0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ab0 <main+0x300>)
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 80028ca:	4b79      	ldr	r3, [pc, #484]	@ (8002ab0 <main+0x300>)
 80028cc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80028d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80028d4:	4b76      	ldr	r3, [pc, #472]	@ (8002ab0 <main+0x300>)
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80028de:	4b74      	ldr	r3, [pc, #464]	@ (8002ab0 <main+0x300>)
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 80028e8:	4b71      	ldr	r3, [pc, #452]	@ (8002ab0 <main+0x300>)
 80028ea:	4a78      	ldr	r2, [pc, #480]	@ (8002acc <main+0x31c>)
 80028ec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 80028f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab0 <main+0x300>)
 80028f2:	4a77      	ldr	r2, [pc, #476]	@ (8002ad0 <main+0x320>)
 80028f4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 80028f8:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab0 <main+0x300>)
 80028fa:	4a76      	ldr	r2, [pc, #472]	@ (8002ad4 <main+0x324>)
 80028fc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 8002900:	4b6b      	ldr	r3, [pc, #428]	@ (8002ab0 <main+0x300>)
 8002902:	4a75      	ldr	r2, [pc, #468]	@ (8002ad8 <main+0x328>)
 8002904:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 8002908:	4b69      	ldr	r3, [pc, #420]	@ (8002ab0 <main+0x300>)
 800290a:	4a74      	ldr	r2, [pc, #464]	@ (8002adc <main+0x32c>)
 800290c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 8002910:	4b67      	ldr	r3, [pc, #412]	@ (8002ab0 <main+0x300>)
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 800291a:	4b65      	ldr	r3, [pc, #404]	@ (8002ab0 <main+0x300>)
 800291c:	4a70      	ldr	r2, [pc, #448]	@ (8002ae0 <main+0x330>)
 800291e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002922:	2300      	movs	r3, #0
 8002924:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002926:	e01d      	b.n	8002964 <main+0x1b4>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002928:	2300      	movs	r3, #0
 800292a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800292c:	e014      	b.n	8002958 <main+0x1a8>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 800292e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002930:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002932:	429a      	cmp	r2, r3
 8002934:	d102      	bne.n	800293c <main+0x18c>
 8002936:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800293a:	e001      	b.n	8002940 <main+0x190>
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002942:	0099      	lsls	r1, r3, #2
 8002944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002946:	440b      	add	r3, r1
 8002948:	4959      	ldr	r1, [pc, #356]	@ (8002ab0 <main+0x300>)
 800294a:	333c      	adds	r3, #60	@ 0x3c
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002952:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002954:	3301      	adds	r3, #1
 8002956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002958:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800295a:	2b03      	cmp	r3, #3
 800295c:	dde7      	ble.n	800292e <main+0x17e>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800295e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002960:	3301      	adds	r3, #1
 8002962:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002966:	2b03      	cmp	r3, #3
 8002968:	ddde      	ble.n	8002928 <main+0x178>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 800296a:	4b51      	ldr	r3, [pc, #324]	@ (8002ab0 <main+0x300>)
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 8002974:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab0 <main+0x300>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 800297e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab0 <main+0x300>)
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8002988:	4b49      	ldr	r3, [pc, #292]	@ (8002ab0 <main+0x300>)
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 8002992:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8002ae4 <main+0x334>
 8002996:	4846      	ldr	r0, [pc, #280]	@ (8002ab0 <main+0x300>)
 8002998:	f7fe fe89 	bl	80016ae <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 800299c:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8002ae8 <main+0x338>
 80029a0:	4843      	ldr	r0, [pc, #268]	@ (8002ab0 <main+0x300>)
 80029a2:	f7fe fe54 	bl	800164e <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 80029a6:	4851      	ldr	r0, [pc, #324]	@ (8002aec <main+0x33c>)
 80029a8:	f7fe fdaf 	bl	800150a <Kalman_Init>

	kf_rev.A_data[0] = 1;
 80029ac:	4b4f      	ldr	r3, [pc, #316]	@ (8002aec <main+0x33c>)
 80029ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80029b2:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 80029b4:	4b4d      	ldr	r3, [pc, #308]	@ (8002aec <main+0x33c>)
 80029b6:	4a4e      	ldr	r2, [pc, #312]	@ (8002af0 <main+0x340>)
 80029b8:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80029ba:	4b4c      	ldr	r3, [pc, #304]	@ (8002aec <main+0x33c>)
 80029bc:	4a4d      	ldr	r2, [pc, #308]	@ (8002af4 <main+0x344>)
 80029be:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80029c0:	4b4a      	ldr	r3, [pc, #296]	@ (8002aec <main+0x33c>)
 80029c2:	4a4d      	ldr	r2, [pc, #308]	@ (8002af8 <main+0x348>)
 80029c4:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80029c6:	4b49      	ldr	r3, [pc, #292]	@ (8002aec <main+0x33c>)
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80029d0:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <main+0x33c>)
 80029d2:	4a4a      	ldr	r2, [pc, #296]	@ (8002afc <main+0x34c>)
 80029d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80029d8:	4b44      	ldr	r3, [pc, #272]	@ (8002aec <main+0x33c>)
 80029da:	4a49      	ldr	r2, [pc, #292]	@ (8002b00 <main+0x350>)
 80029dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80029e0:	4b42      	ldr	r3, [pc, #264]	@ (8002aec <main+0x33c>)
 80029e2:	4a48      	ldr	r2, [pc, #288]	@ (8002b04 <main+0x354>)
 80029e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 80029e8:	4b40      	ldr	r3, [pc, #256]	@ (8002aec <main+0x33c>)
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 80029f2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <main+0x33c>)
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 80029fc:	4b3b      	ldr	r3, [pc, #236]	@ (8002aec <main+0x33c>)
 80029fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 8002a06:	4b39      	ldr	r3, [pc, #228]	@ (8002aec <main+0x33c>)
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 8002a10:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <main+0x33c>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8002a1a:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <main+0x33c>)
 8002a1c:	4a3a      	ldr	r2, [pc, #232]	@ (8002b08 <main+0x358>)
 8002a1e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8002a22:	4b32      	ldr	r3, [pc, #200]	@ (8002aec <main+0x33c>)
 8002a24:	4a39      	ldr	r2, [pc, #228]	@ (8002b0c <main+0x35c>)
 8002a26:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8002a2a:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <main+0x33c>)
 8002a2c:	4a38      	ldr	r2, [pc, #224]	@ (8002b10 <main+0x360>)
 8002a2e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8002a32:	4b2e      	ldr	r3, [pc, #184]	@ (8002aec <main+0x33c>)
 8002a34:	4a37      	ldr	r2, [pc, #220]	@ (8002b14 <main+0x364>)
 8002a36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8002a3a:	4b2c      	ldr	r3, [pc, #176]	@ (8002aec <main+0x33c>)
 8002a3c:	4a36      	ldr	r2, [pc, #216]	@ (8002b18 <main+0x368>)
 8002a3e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8002a42:	4b2a      	ldr	r3, [pc, #168]	@ (8002aec <main+0x33c>)
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <main+0x33c>)
 8002a4e:	4a33      	ldr	r2, [pc, #204]	@ (8002b1c <main+0x36c>)
 8002a50:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8002a54:	2300      	movs	r3, #0
 8002a56:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a58:	e076      	b.n	8002b48 <main+0x398>
		for (int j = 0; j < 4; j++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a5e:	e06d      	b.n	8002b3c <main+0x38c>
			if (i == j) {
 8002a60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d15b      	bne.n	8002b20 <main+0x370>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 8002a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6a:	009a      	lsls	r2, r3, #2
 8002a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a1e      	ldr	r2, [pc, #120]	@ (8002aec <main+0x33c>)
 8002a72:	333c      	adds	r3, #60	@ 0x3c
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e05a      	b.n	8002b36 <main+0x386>
 8002a80:	20001878 	.word	0x20001878
 8002a84:	200016e0 	.word	0x200016e0
 8002a88:	20001614 	.word	0x20001614
 8002a8c:	2000035c 	.word	0x2000035c
 8002a90:	20001548 	.word	0x20001548
 8002a94:	20000390 	.word	0x20000390
 8002a98:	20000280 	.word	0x20000280
 8002a9c:	2000147c 	.word	0x2000147c
 8002aa0:	20000554 	.word	0x20000554
 8002aa4:	20001944 	.word	0x20001944
 8002aa8:	200017ac 	.word	0x200017ac
 8002aac:	20000a2c 	.word	0x20000a2c
 8002ab0:	20000c6c 	.word	0x20000c6c
 8002ab4:	3a5c11e4 	.word	0x3a5c11e4
 8002ab8:	b4e160df 	.word	0xb4e160df
 8002abc:	3757157b 	.word	0x3757157b
 8002ac0:	3f2dd97f 	.word	0x3f2dd97f
 8002ac4:	ba5c11e4 	.word	0xba5c11e4
 8002ac8:	3cd20afa 	.word	0x3cd20afa
 8002acc:	bd2c27a6 	.word	0xbd2c27a6
 8002ad0:	37b03ea2 	.word	0x37b03ea2
 8002ad4:	bdc3e426 	.word	0xbdc3e426
 8002ad8:	36866b47 	.word	0x36866b47
 8002adc:	3c034092 	.word	0x3c034092
 8002ae0:	3e90b0f2 	.word	0x3e90b0f2
 8002ae4:	3c23d70a 	.word	0x3c23d70a
 8002ae8:	3f666666 	.word	0x3f666666
 8002aec:	20000f90 	.word	0x20000f90
 8002af0:	3a830bb9 	.word	0x3a830bb9
 8002af4:	b6327146 	.word	0xb6327146
 8002af8:	33ae1e34 	.word	0x33ae1e34
 8002afc:	3f7fe5c9 	.word	0x3f7fe5c9
 8002b00:	bbae429e 	.word	0xbbae429e
 8002b04:	392a143b 	.word	0x392a143b
 8002b08:	c02fbe77 	.word	0xc02fbe77
 8002b0c:	3bef4e01 	.word	0x3bef4e01
 8002b10:	3e0aa64c 	.word	0x3e0aa64c
 8002b14:	34012bd0 	.word	0x34012bd0
 8002b18:	397c4992 	.word	0x397c4992
 8002b1c:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8002b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b26:	4413      	add	r3, r2
 8002b28:	4abf      	ldr	r2, [pc, #764]	@ (8002e28 <main+0x678>)
 8002b2a:	333c      	adds	r3, #60	@ 0x3c
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8002b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b38:	3301      	adds	r3, #1
 8002b3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	dd8e      	ble.n	8002a60 <main+0x2b0>
	for (int i = 0; i < 2; i++) {
 8002b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b44:	3301      	adds	r3, #1
 8002b46:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	dd85      	ble.n	8002a5a <main+0x2aa>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8002b4e:	4bb6      	ldr	r3, [pc, #728]	@ (8002e28 <main+0x678>)
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8002b58:	4bb3      	ldr	r3, [pc, #716]	@ (8002e28 <main+0x678>)
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8002b62:	4bb1      	ldr	r3, [pc, #708]	@ (8002e28 <main+0x678>)
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8002b6c:	4bae      	ldr	r3, [pc, #696]	@ (8002e28 <main+0x678>)
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8002b76:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8002e2c <main+0x67c>
 8002b7a:	48ab      	ldr	r0, [pc, #684]	@ (8002e28 <main+0x678>)
 8002b7c:	f7fe fd97 	bl	80016ae <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8002b80:	ed9f 0aab 	vldr	s0, [pc, #684]	@ 8002e30 <main+0x680>
 8002b84:	48a8      	ldr	r0, [pc, #672]	@ (8002e28 <main+0x678>)
 8002b86:	f7fe fd62 	bl	800164e <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8002b8a:	4caa      	ldr	r4, [pc, #680]	@ (8002e34 <main+0x684>)
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 8002dc0 <main+0x610>
 8002b92:	ed9f 5b8d 	vldr	d5, [pc, #564]	@ 8002dc8 <main+0x618>
 8002b96:	ed9f 4b8e 	vldr	d4, [pc, #568]	@ 8002dd0 <main+0x620>
 8002b9a:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 8002dd0 <main+0x620>
 8002b9e:	ed9f 2b8e 	vldr	d2, [pc, #568]	@ 8002dd8 <main+0x628>
 8002ba2:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 8002de0 <main+0x630>
 8002ba6:	ed9f 0b90 	vldr	d0, [pc, #576]	@ 8002de8 <main+0x638>
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fa60 	bl	8002070 <create_prismatic_motor>
 8002bb0:	4625      	mov	r5, r4
 8002bb2:	463c      	mov	r4, r7
 8002bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc4:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8002bc8:	4c9b      	ldr	r4, [pc, #620]	@ (8002e38 <main+0x688>)
 8002bca:	463b      	mov	r3, r7
 8002bcc:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8002df0 <main+0x640>
 8002bd0:	ed9f 5b89 	vldr	d5, [pc, #548]	@ 8002df8 <main+0x648>
 8002bd4:	ed9f 4b8a 	vldr	d4, [pc, #552]	@ 8002e00 <main+0x650>
 8002bd8:	ed9f 3b8b 	vldr	d3, [pc, #556]	@ 8002e08 <main+0x658>
 8002bdc:	ed9f 2b8c 	vldr	d2, [pc, #560]	@ 8002e10 <main+0x660>
 8002be0:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8002e18 <main+0x668>
 8002be4:	ed9f 0b8e 	vldr	d0, [pc, #568]	@ 8002e20 <main+0x670>
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fa82 	bl	80020f2 <create_motor>
 8002bee:	4625      	mov	r5, r4
 8002bf0:	463c      	mov	r4, r7
 8002bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c02:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8002c06:	4b8d      	ldr	r3, [pc, #564]	@ (8002e3c <main+0x68c>)
 8002c08:	4a8d      	ldr	r2, [pc, #564]	@ (8002e40 <main+0x690>)
 8002c0a:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8002c0c:	4b8b      	ldr	r3, [pc, #556]	@ (8002e3c <main+0x68c>)
 8002c0e:	4a8d      	ldr	r2, [pc, #564]	@ (8002e44 <main+0x694>)
 8002c10:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8002c12:	4b8a      	ldr	r3, [pc, #552]	@ (8002e3c <main+0x68c>)
 8002c14:	4a8a      	ldr	r2, [pc, #552]	@ (8002e40 <main+0x690>)
 8002c16:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4888      	ldr	r0, [pc, #544]	@ (8002e3c <main+0x68c>)
 8002c1c:	f009 fa9e 	bl	800c15c <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8002c20:	4b89      	ldr	r3, [pc, #548]	@ (8002e48 <main+0x698>)
 8002c22:	4a8a      	ldr	r2, [pc, #552]	@ (8002e4c <main+0x69c>)
 8002c24:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8002c26:	4b88      	ldr	r3, [pc, #544]	@ (8002e48 <main+0x698>)
 8002c28:	4a86      	ldr	r2, [pc, #536]	@ (8002e44 <main+0x694>)
 8002c2a:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8002c2c:	4b86      	ldr	r3, [pc, #536]	@ (8002e48 <main+0x698>)
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8002c34:	2100      	movs	r1, #0
 8002c36:	4884      	ldr	r0, [pc, #528]	@ (8002e48 <main+0x698>)
 8002c38:	f009 fa90 	bl	800c15c <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8002c3c:	4b84      	ldr	r3, [pc, #528]	@ (8002e50 <main+0x6a0>)
 8002c3e:	4a85      	ldr	r2, [pc, #532]	@ (8002e54 <main+0x6a4>)
 8002c40:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 8002c42:	4b83      	ldr	r3, [pc, #524]	@ (8002e50 <main+0x6a0>)
 8002c44:	4a84      	ldr	r2, [pc, #528]	@ (8002e58 <main+0x6a8>)
 8002c46:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 8002c48:	4b81      	ldr	r3, [pc, #516]	@ (8002e50 <main+0x6a0>)
 8002c4a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002c4e:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8002c50:	2100      	movs	r1, #0
 8002c52:	487f      	ldr	r0, [pc, #508]	@ (8002e50 <main+0x6a0>)
 8002c54:	f009 fa82 	bl	800c15c <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8002c58:	4b80      	ldr	r3, [pc, #512]	@ (8002e5c <main+0x6ac>)
 8002c5a:	4a81      	ldr	r2, [pc, #516]	@ (8002e60 <main+0x6b0>)
 8002c5c:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8002c5e:	4b7f      	ldr	r3, [pc, #508]	@ (8002e5c <main+0x6ac>)
 8002c60:	4a80      	ldr	r2, [pc, #512]	@ (8002e64 <main+0x6b4>)
 8002c62:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8002c64:	4b7d      	ldr	r3, [pc, #500]	@ (8002e5c <main+0x6ac>)
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	487b      	ldr	r0, [pc, #492]	@ (8002e5c <main+0x6ac>)
 8002c70:	f009 fa74 	bl	800c15c <arm_pid_init_f32>

	Backlash_Init(&Rev_backlash, 0.0349066);
 8002c74:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8002e68 <main+0x6b8>
 8002c78:	487c      	ldr	r0, [pc, #496]	@ (8002e6c <main+0x6bc>)
 8002c7a:	f7fe f9af 	bl	8000fdc <Backlash_Init>

//	InitTrajectorySegment(&segments[0], 0.0f, 200.0f, 500.0f, 250.0f, 0.0f);
	InitTrajectorySegment(&segments[0], 0.0f, 0.785f, 1.0f, 0.4f, 0.0f);
 8002c7e:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8002e70 <main+0x6c0>
 8002c82:	eddf 1a7c 	vldr	s3, [pc, #496]	@ 8002e74 <main+0x6c4>
 8002c86:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002c8a:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8002e78 <main+0x6c8>
 8002c8e:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8002e70 <main+0x6c0>
 8002c92:	487a      	ldr	r0, [pc, #488]	@ (8002e7c <main+0x6cc>)
 8002c94:	f7ff fa6e 	bl	8002174 <InitTrajectorySegment>





		uint64_t currentTick = HAL_GetTick();
 8002c98:	f001 fa8a 	bl	80041b0 <HAL_GetTick>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	469a      	mov	sl, r3
 8002ca2:	4693      	mov	fp, r2
 8002ca4:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
		float dt = (currentTick - lastTick) / 1000.0f;
 8002ca8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002cac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002cb0:	ebb0 0802 	subs.w	r8, r0, r2
 8002cb4:	eb61 0903 	sbc.w	r9, r1, r3
 8002cb8:	4640      	mov	r0, r8
 8002cba:	4649      	mov	r1, r9
 8002cbc:	f7fd ffb2 	bl	8000c24 <__aeabi_ul2f>
 8002cc0:	ee06 0a90 	vmov	s13, r0
 8002cc4:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8002e80 <main+0x6d0>
 8002cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ccc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		Modbus_Protocal_Worker();
 8002cd0:	f7fe ff5a 	bl	8001b88 <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8002cd4:	486b      	ldr	r0, [pc, #428]	@ (8002e84 <main+0x6d4>)
 8002cd6:	f7fe f99a 	bl	800100e <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8002cda:	486a      	ldr	r0, [pc, #424]	@ (8002e84 <main+0x6d4>)
 8002cdc:	f7fe f9a6 	bl	800102c <modbus_Base_System_Status>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	4b68      	ldr	r3, [pc, #416]	@ (8002e88 <main+0x6d8>)
 8002ce6:	701a      	strb	r2, [r3, #0]

		if (dt >= 0.001f) {
 8002ce8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002cec:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8002e8c <main+0x6dc>
 8002cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf8:	f2c0 8218 	blt.w	800312c <main+0x97c>

			HAL_ADC_Start(&hadc1);
 8002cfc:	4864      	ldr	r0, [pc, #400]	@ (8002e90 <main+0x6e0>)
 8002cfe:	f001 fe2b 	bl	8004958 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8002d02:	4864      	ldr	r0, [pc, #400]	@ (8002e94 <main+0x6e4>)
 8002d04:	f001 fe28 	bl	8004958 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8002d08:	4861      	ldr	r0, [pc, #388]	@ (8002e90 <main+0x6e0>)
 8002d0a:	f001 ff09 	bl	8004b20 <HAL_ADC_GetValue>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4b61      	ldr	r3, [pc, #388]	@ (8002e98 <main+0x6e8>)
 8002d14:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8002d16:	485f      	ldr	r0, [pc, #380]	@ (8002e94 <main+0x6e4>)
 8002d18:	f001 ff02 	bl	8004b20 <HAL_ADC_GetValue>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	4b5e      	ldr	r3, [pc, #376]	@ (8002e9c <main+0x6ec>)
 8002d22:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8002d24:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002d28:	485d      	ldr	r0, [pc, #372]	@ (8002ea0 <main+0x6f0>)
 8002d2a:	f7fe facf 	bl	80012cc <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8002d2e:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8002d32:	485c      	ldr	r0, [pc, #368]	@ (8002ea4 <main+0x6f4>)
 8002d34:	f7fe faca 	bl	80012cc <Encoder_Update>
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8002d38:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea8 <main+0x6f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	4a5b      	ldr	r2, [pc, #364]	@ (8002eac <main+0x6fc>)
 8002d40:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8002d42:	4b5b      	ldr	r3, [pc, #364]	@ (8002eb0 <main+0x700>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d48:	4a5a      	ldr	r2, [pc, #360]	@ (8002eb4 <main+0x704>)
 8002d4a:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition(&encoder1);
 8002d4c:	4854      	ldr	r0, [pc, #336]	@ (8002ea0 <main+0x6f0>)
 8002d4e:	f7fe fb73 	bl	8001438 <Encoder_GetPosition>
 8002d52:	eef0 7a40 	vmov.f32	s15, s0
 8002d56:	4b58      	ldr	r3, [pc, #352]	@ (8002eb8 <main+0x708>)
 8002d58:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8002d5c:	4850      	ldr	r0, [pc, #320]	@ (8002ea0 <main+0x6f0>)
 8002d5e:	f7fe fb7a 	bl	8001456 <Encoder_GetVelocity>
 8002d62:	eef0 7a40 	vmov.f32	s15, s0
 8002d66:	4b55      	ldr	r3, [pc, #340]	@ (8002ebc <main+0x70c>)
 8002d68:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8002d6c:	484c      	ldr	r0, [pc, #304]	@ (8002ea0 <main+0x6f0>)
 8002d6e:	f7fe fb81 	bl	8001474 <Encoder_GetAcceleration>
 8002d72:	eef0 7a40 	vmov.f32	s15, s0
 8002d76:	4b52      	ldr	r3, [pc, #328]	@ (8002ec0 <main+0x710>)
 8002d78:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8002d7c:	4849      	ldr	r0, [pc, #292]	@ (8002ea4 <main+0x6f4>)
 8002d7e:	f7fe fb5b 	bl	8001438 <Encoder_GetPosition>
 8002d82:	eef0 7a40 	vmov.f32	s15, s0
 8002d86:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec4 <main+0x714>)
 8002d88:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8002d8c:	4845      	ldr	r0, [pc, #276]	@ (8002ea4 <main+0x6f4>)
 8002d8e:	f7fe fb62 	bl	8001456 <Encoder_GetVelocity>
 8002d92:	eef0 7a40 	vmov.f32	s15, s0
 8002d96:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec8 <main+0x718>)
 8002d98:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8002d9c:	4841      	ldr	r0, [pc, #260]	@ (8002ea4 <main+0x6f4>)
 8002d9e:	f7fe fb69 	bl	8001474 <Encoder_GetAcceleration>
 8002da2:	eef0 7a40 	vmov.f32	s15, s0
 8002da6:	4b49      	ldr	r3, [pc, #292]	@ (8002ecc <main+0x71c>)
 8002da8:	edc3 7a00 	vstr	s15, [r3]

			if (Base_Sysytem_status == Base_Home) {
 8002dac:	4b36      	ldr	r3, [pc, #216]	@ (8002e88 <main+0x6d8>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	f040 808d 	bne.w	8002ed0 <main+0x720>

				R_Theta_moving_Status(&hmodbus, Home);
 8002db6:	2101      	movs	r1, #1
 8002db8:	4832      	ldr	r0, [pc, #200]	@ (8002e84 <main+0x6d4>)
 8002dba:	f7fe f983 	bl	80010c4 <R_Theta_moving_Status>
 8002dbe:	e0ee      	b.n	8002f9e <main+0x7ee>
 8002dc0:	eb1c432d 	.word	0xeb1c432d
 8002dc4:	3f5a36e2 	.word	0x3f5a36e2
 8002dc8:	b50b0f28 	.word	0xb50b0f28
 8002dcc:	400ef9a6 	.word	0x400ef9a6
 8002dd0:	9db22d0e 	.word	0x9db22d0e
 8002dd4:	3fc6a7ef 	.word	0x3fc6a7ef
 8002dd8:	00000000 	.word	0x00000000
 8002ddc:	3fec0000 	.word	0x3fec0000
 8002de0:	3c968944 	.word	0x3c968944
 8002de4:	3f3f969e 	.word	0x3f3f969e
 8002de8:	05857aff 	.word	0x05857aff
 8002dec:	3f2e03f7 	.word	0x3f2e03f7
 8002df0:	fa8f7db7 	.word	0xfa8f7db7
 8002df4:	3f3615eb 	.word	0x3f3615eb
 8002df8:	f9db22d1 	.word	0xf9db22d1
 8002dfc:	3fe06a7e 	.word	0x3fe06a7e
 8002e00:	a7daa4fc 	.word	0xa7daa4fc
 8002e04:	3ff331e3 	.word	0x3ff331e3
 8002e08:	e147ae14 	.word	0xe147ae14
 8002e0c:	3ffa147a 	.word	0x3ffa147a
 8002e10:	df3b645a 	.word	0xdf3b645a
 8002e14:	3fe78d4f 	.word	0x3fe78d4f
 8002e18:	003eea21 	.word	0x003eea21
 8002e1c:	3f7c4da9 	.word	0x3f7c4da9
 8002e20:	4dd2f1aa 	.word	0x4dd2f1aa
 8002e24:	3fc81062 	.word	0x3fc81062
 8002e28:	20000f90 	.word	0x20000f90
 8002e2c:	3da3d70a 	.word	0x3da3d70a
 8002e30:	3df5c28f 	.word	0x3df5c28f
 8002e34:	200012b8 	.word	0x200012b8
 8002e38:	200012f0 	.word	0x200012f0
 8002e3c:	20000bd4 	.word	0x20000bd4
 8002e40:	3e99999a 	.word	0x3e99999a
 8002e44:	3c23d70a 	.word	0x3c23d70a
 8002e48:	20000bf8 	.word	0x20000bf8
 8002e4c:	3da3d70a 	.word	0x3da3d70a
 8002e50:	20000c20 	.word	0x20000c20
 8002e54:	42c80000 	.word	0x42c80000
 8002e58:	42200000 	.word	0x42200000
 8002e5c:	20000c44 	.word	0x20000c44
 8002e60:	40400000 	.word	0x40400000
 8002e64:	3dcccccd 	.word	0x3dcccccd
 8002e68:	3d0efa39 	.word	0x3d0efa39
 8002e6c:	20000bc8 	.word	0x20000bc8
 8002e70:	00000000 	.word	0x00000000
 8002e74:	3ecccccd 	.word	0x3ecccccd
 8002e78:	3f48f5c3 	.word	0x3f48f5c3
 8002e7c:	200003cc 	.word	0x200003cc
 8002e80:	447a0000 	.word	0x447a0000
 8002e84:	20000554 	.word	0x20000554
 8002e88:	20000bbc 	.word	0x20000bbc
 8002e8c:	3a83126f 	.word	0x3a83126f
 8002e90:	20000280 	.word	0x20000280
 8002e94:	200002ec 	.word	0x200002ec
 8002e98:	20000550 	.word	0x20000550
 8002e9c:	20000552 	.word	0x20000552
 8002ea0:	2000035c 	.word	0x2000035c
 8002ea4:	20000390 	.word	0x20000390
 8002ea8:	20001548 	.word	0x20001548
 8002eac:	200003c4 	.word	0x200003c4
 8002eb0:	20001614 	.word	0x20001614
 8002eb4:	200003c8 	.word	0x200003c8
 8002eb8:	20000534 	.word	0x20000534
 8002ebc:	20000538 	.word	0x20000538
 8002ec0:	2000053c 	.word	0x2000053c
 8002ec4:	20000540 	.word	0x20000540
 8002ec8:	20000544 	.word	0x20000544
 8002ecc:	20000548 	.word	0x20000548

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8002ed0:	4b9b      	ldr	r3, [pc, #620]	@ (8003140 <main+0x990>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d137      	bne.n	8002f48 <main+0x798>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8002ed8:	2102      	movs	r1, #2
 8002eda:	489a      	ldr	r0, [pc, #616]	@ (8003144 <main+0x994>)
 8002edc:	f7fe f8f2 	bl	80010c4 <R_Theta_moving_Status>

				if (modbus_write_servo_up(&hmodbus) == 1) // Pen_Up
 8002ee0:	4898      	ldr	r0, [pc, #608]	@ (8003144 <main+0x994>)
 8002ee2:	f7fe f8c5 	bl	8001070 <modbus_write_servo_up>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d104      	bne.n	8002ef6 <main+0x746>
						{

					modbus_servo_Status(&hmodbus, Limit_Up);
 8002eec:	2102      	movs	r1, #2
 8002eee:	4895      	ldr	r0, [pc, #596]	@ (8003144 <main+0x994>)
 8002ef0:	f7fe f8ac 	bl	800104c <modbus_servo_Status>
 8002ef4:	e009      	b.n	8002f0a <main+0x75a>

				} else if (modbus_write_servo_down(&hmodbus) == 1) // Pen_Down
 8002ef6:	4893      	ldr	r0, [pc, #588]	@ (8003144 <main+0x994>)
 8002ef8:	f7fe f8cf 	bl	800109a <modbus_write_servo_down>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d103      	bne.n	8002f0a <main+0x75a>
						{
					modbus_servo_Status(&hmodbus, Limit_Down);
 8002f02:	2101      	movs	r1, #1
 8002f04:	488f      	ldr	r0, [pc, #572]	@ (8003144 <main+0x994>)
 8002f06:	f7fe f8a1 	bl	800104c <modbus_servo_Status>
				}
				if (1 == 1) {  /// Set_Target 10 points
					set_Target_Position_ten_points(&hmodbus,
 8002f0a:	488f      	ldr	r0, [pc, #572]	@ (8003148 <main+0x998>)
 8002f0c:	f7fe fad0 	bl	80014b0 <Encoder_GetPosition_mm>
 8002f10:	eeb0 8a40 	vmov.f32	s16, s0
 8002f14:	488d      	ldr	r0, [pc, #564]	@ (800314c <main+0x99c>)
 8002f16:	f7fe fabc 	bl	8001492 <Encoder_GetDegree>
 8002f1a:	eef0 7a40 	vmov.f32	s15, s0
 8002f1e:	4b8c      	ldr	r3, [pc, #560]	@ (8003150 <main+0x9a0>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	eef0 0a67 	vmov.f32	s1, s15
 8002f28:	eeb0 0a48 	vmov.f32	s0, s16
 8002f2c:	4885      	ldr	r0, [pc, #532]	@ (8003144 <main+0x994>)
 8002f2e:	f7fe f933 	bl	8001198 <set_Target_Position_ten_points>
							Encoder_GetPosition_mm(&encoder1),
							Encoder_GetDegree(&encoder2), Num_point);
					Num_point += 1;
 8002f32:	4b87      	ldr	r3, [pc, #540]	@ (8003150 <main+0x9a0>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4b85      	ldr	r3, [pc, #532]	@ (8003150 <main+0x9a0>)
 8002f3c:	701a      	strb	r2, [r3, #0]
				}
				if (1 == 1) {   /// Go_Target 10 points

					if (1 == 1) // At target
							{
						modbus_servo_Status(&hmodbus, Limit_Down);
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4880      	ldr	r0, [pc, #512]	@ (8003144 <main+0x994>)
 8002f42:	f7fe f883 	bl	800104c <modbus_servo_Status>
 8002f46:	e02a      	b.n	8002f9e <main+0x7ee>
					{
						modbus_servo_Status(&hmodbus, Limit_Up);
					}
				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 8002f48:	4b7d      	ldr	r3, [pc, #500]	@ (8003140 <main+0x990>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d11a      	bne.n	8002f86 <main+0x7d6>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8002f50:	487c      	ldr	r0, [pc, #496]	@ (8003144 <main+0x994>)
 8002f52:	f7fe f951 	bl	80011f8 <modbus_set_goal_r_position>
 8002f56:	4603      	mov	r3, r0
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f60:	4b7c      	ldr	r3, [pc, #496]	@ (8003154 <main+0x9a4>)
 8002f62:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 8002f66:	4877      	ldr	r0, [pc, #476]	@ (8003144 <main+0x994>)
 8002f68:	f7fe f966 	bl	8001238 <modbus_set_goal_theta_position>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f76:	4b78      	ldr	r3, [pc, #480]	@ (8003158 <main+0x9a8>)
 8002f78:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	4871      	ldr	r0, [pc, #452]	@ (8003144 <main+0x994>)
 8002f80:	f7fe f8a0 	bl	80010c4 <R_Theta_moving_Status>
 8002f84:	e00b      	b.n	8002f9e <main+0x7ee>

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 8002f86:	4b6e      	ldr	r3, [pc, #440]	@ (8003140 <main+0x990>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d107      	bne.n	8002f9e <main+0x7ee>

				R_Theta_moving_Status(&hmodbus, Go_to_Target);
 8002f8e:	2108      	movs	r1, #8
 8002f90:	486c      	ldr	r0, [pc, #432]	@ (8003144 <main+0x994>)
 8002f92:	f7fe f897 	bl	80010c4 <R_Theta_moving_Status>
				if (1 == 1) // At set pint
						{
					modbus_servo_Status(&hmodbus, Limit_Down);
 8002f96:	2101      	movs	r1, #1
 8002f98:	486a      	ldr	r0, [pc, #424]	@ (8003144 <main+0x994>)
 8002f9a:	f7fe f857 	bl	800104c <modbus_servo_Status>
				{
					modbus_servo_Status(&hmodbus, Limit_Up);
				}
			}

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8002f9e:	486a      	ldr	r0, [pc, #424]	@ (8003148 <main+0x998>)
 8002fa0:	f7fe fa86 	bl	80014b0 <Encoder_GetPosition_mm>
 8002fa4:	eef0 7a40 	vmov.f32	s15, s0
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800315c <main+0x9ac>)
 8002faa:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8002fae:	4866      	ldr	r0, [pc, #408]	@ (8003148 <main+0x998>)
 8002fb0:	f7fe fa8d 	bl	80014ce <Encoder_GetVelocity_mm>
 8002fb4:	eef0 7a40 	vmov.f32	s15, s0
 8002fb8:	4b68      	ldr	r3, [pc, #416]	@ (800315c <main+0x9ac>)
 8002fba:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8002fbe:	4b67      	ldr	r3, [pc, #412]	@ (800315c <main+0x9ac>)
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 8002fc6:	4b65      	ldr	r3, [pc, #404]	@ (800315c <main+0x9ac>)
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 8002fce:	4b64      	ldr	r3, [pc, #400]	@ (8003160 <main+0x9b0>)
 8002fd0:	edd3 7a00 	vldr	s15, [r3]
 8002fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd8:	4862      	ldr	r0, [pc, #392]	@ (8003164 <main+0x9b4>)
 8002fda:	f7fe fb98 	bl	800170e <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 8002fde:	4861      	ldr	r0, [pc, #388]	@ (8003164 <main+0x9b4>)
 8002fe0:	f7fe fba5 	bl	800172e <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 8002fe4:	495d      	ldr	r1, [pc, #372]	@ (800315c <main+0x9ac>)
 8002fe6:	485f      	ldr	r0, [pc, #380]	@ (8003164 <main+0x9b4>)
 8002fe8:	f7fe fbee 	bl	80017c8 <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2)
 8002fec:	4857      	ldr	r0, [pc, #348]	@ (800314c <main+0x99c>)
 8002fee:	f7fe fa23 	bl	8001438 <Encoder_GetPosition>
 8002ff2:	ee10 3a10 	vmov	r3, s0
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd fa72 	bl	80004e0 <__aeabi_f2d>
					/ (100.0 / 30.0);
 8002ffc:	a34c      	add	r3, pc, #304	@ (adr r3, 8003130 <main+0x980>)
 8002ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003002:	f7fd fbef 	bl	80007e4 <__aeabi_ddiv>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fcf1 	bl	80009f4 <__aeabi_d2f>
 8003012:	4603      	mov	r3, r0
			Measurement_Rev[0] = Encoder_GetPosition(&encoder2)
 8003014:	4a54      	ldr	r2, [pc, #336]	@ (8003168 <main+0x9b8>)
 8003016:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2)
 8003018:	484c      	ldr	r0, [pc, #304]	@ (800314c <main+0x99c>)
 800301a:	f7fe fa1c 	bl	8001456 <Encoder_GetVelocity>
 800301e:	ee10 3a10 	vmov	r3, s0
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd fa5c 	bl	80004e0 <__aeabi_f2d>
					/ (100.0 / 30.0);
 8003028:	a341      	add	r3, pc, #260	@ (adr r3, 8003130 <main+0x980>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd fbd9 	bl	80007e4 <__aeabi_ddiv>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4610      	mov	r0, r2
 8003038:	4619      	mov	r1, r3
 800303a:	f7fd fcdb 	bl	80009f4 <__aeabi_d2f>
 800303e:	4603      	mov	r3, r0
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2)
 8003040:	4a49      	ldr	r2, [pc, #292]	@ (8003168 <main+0x9b8>)
 8003042:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 8003044:	4b48      	ldr	r3, [pc, #288]	@ (8003168 <main+0x9b8>)
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 800304c:	4b46      	ldr	r3, [pc, #280]	@ (8003168 <main+0x9b8>)
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8003054:	4b45      	ldr	r3, [pc, #276]	@ (800316c <main+0x9bc>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	eeb0 0a67 	vmov.f32	s0, s15
 800305e:	4844      	ldr	r0, [pc, #272]	@ (8003170 <main+0x9c0>)
 8003060:	f7fe fb55 	bl	800170e <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8003064:	4842      	ldr	r0, [pc, #264]	@ (8003170 <main+0x9c0>)
 8003066:	f7fe fb62 	bl	800172e <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 800306a:	493f      	ldr	r1, [pc, #252]	@ (8003168 <main+0x9b8>)
 800306c:	4840      	ldr	r0, [pc, #256]	@ (8003170 <main+0x9c0>)
 800306e:	f7fe fbab 	bl	80017c8 <Kalman_Update>

			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8003072:	4835      	ldr	r0, [pc, #212]	@ (8003148 <main+0x998>)
 8003074:	f7fe fa1c 	bl	80014b0 <Encoder_GetPosition_mm>
 8003078:	eeb0 8a40 	vmov.f32	s16, s0
 800307c:	4833      	ldr	r0, [pc, #204]	@ (800314c <main+0x99c>)
 800307e:	f7fe fa08 	bl	8001492 <Encoder_GetDegree>
 8003082:	eef0 8a40 	vmov.f32	s17, s0
 8003086:	4830      	ldr	r0, [pc, #192]	@ (8003148 <main+0x998>)
 8003088:	f7fe fa21 	bl	80014ce <Encoder_GetVelocity_mm>
 800308c:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 8003090:	482e      	ldr	r0, [pc, #184]	@ (800314c <main+0x99c>)
 8003092:	f7fe f9e0 	bl	8001456 <Encoder_GetVelocity>
 8003096:	ee10 3a10 	vmov	r3, s0
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fa20 	bl	80004e0 <__aeabi_f2d>
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	4b33      	ldr	r3, [pc, #204]	@ (8003174 <main+0x9c4>)
 80030a6:	f7fd fa73 	bl	8000590 <__aeabi_dmul>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	a321      	add	r3, pc, #132	@ (adr r3, 8003138 <main+0x988>)
 80030b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b8:	f7fd fb94 	bl	80007e4 <__aeabi_ddiv>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7fd fc96 	bl	80009f4 <__aeabi_d2f>
 80030c8:	4604      	mov	r4, r0
 80030ca:	481f      	ldr	r0, [pc, #124]	@ (8003148 <main+0x998>)
 80030cc:	f7fe fa0e 	bl	80014ec <Encoder_GetAcceleration_mm>
 80030d0:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 80030d4:	481d      	ldr	r0, [pc, #116]	@ (800314c <main+0x99c>)
 80030d6:	f7fe f9cd 	bl	8001474 <Encoder_GetAcceleration>
 80030da:	ee10 3a10 	vmov	r3, s0
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f9fe 	bl	80004e0 <__aeabi_f2d>
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	4b22      	ldr	r3, [pc, #136]	@ (8003174 <main+0x9c4>)
 80030ea:	f7fd fa51 	bl	8000590 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	a310      	add	r3, pc, #64	@ (adr r3, 8003138 <main+0x988>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fb72 	bl	80007e4 <__aeabi_ddiv>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f7fd fc74 	bl	80009f4 <__aeabi_d2f>
 800310c:	4603      	mov	r3, r0
 800310e:	ee02 3a90 	vmov	s5, r3
 8003112:	eeb0 2a69 	vmov.f32	s4, s19
 8003116:	ee01 4a90 	vmov	s3, r4
 800311a:	eeb0 1a49 	vmov.f32	s2, s18
 800311e:	eef0 0a68 	vmov.f32	s1, s17
 8003122:	eeb0 0a48 	vmov.f32	s0, s16
 8003126:	4807      	ldr	r0, [pc, #28]	@ (8003144 <main+0x994>)
 8003128:	f7fd ffde 	bl	80010e8 <modbus_Update_All>
	while (1) {
 800312c:	e5b4      	b.n	8002c98 <main+0x4e8>
 800312e:	bf00      	nop
 8003130:	aaaaaaab 	.word	0xaaaaaaab
 8003134:	400aaaaa 	.word	0x400aaaaa
 8003138:	e5604189 	.word	0xe5604189
 800313c:	400922d0 	.word	0x400922d0
 8003140:	20000bbc 	.word	0x20000bbc
 8003144:	20000554 	.word	0x20000554
 8003148:	2000035c 	.word	0x2000035c
 800314c:	20000390 	.word	0x20000390
 8003150:	20001348 	.word	0x20001348
 8003154:	20000bc0 	.word	0x20000bc0
 8003158:	20000bc4 	.word	0x20000bc4
 800315c:	20001328 	.word	0x20001328
 8003160:	20000c1c 	.word	0x20000c1c
 8003164:	20000c6c 	.word	0x20000c6c
 8003168:	20001338 	.word	0x20001338
 800316c:	20000c68 	.word	0x20000c68
 8003170:	20000f90 	.word	0x20000f90
 8003174:	40668000 	.word	0x40668000

08003178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b094      	sub	sp, #80	@ 0x50
 800317c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800317e:	f107 0318 	add.w	r3, r7, #24
 8003182:	2238      	movs	r2, #56	@ 0x38
 8003184:	2100      	movs	r1, #0
 8003186:	4618      	mov	r0, r3
 8003188:	f009 fcde 	bl	800cb48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800318c:	1d3b      	adds	r3, r7, #4
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800319a:	2000      	movs	r0, #0
 800319c:	f003 f8d2 	bl	8006344 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031a0:	2302      	movs	r3, #2
 80031a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031aa:	2340      	movs	r3, #64	@ 0x40
 80031ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031ae:	2302      	movs	r3, #2
 80031b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031b2:	2302      	movs	r3, #2
 80031b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80031b6:	2304      	movs	r3, #4
 80031b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80031ba:	2355      	movs	r3, #85	@ 0x55
 80031bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031be:	2302      	movs	r3, #2
 80031c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031c2:	2302      	movs	r3, #2
 80031c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031c6:	2302      	movs	r3, #2
 80031c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ca:	f107 0318 	add.w	r3, r7, #24
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 f96c 	bl	80064ac <HAL_RCC_OscConfig>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80031da:	f000 f867 	bl	80032ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031de:	230f      	movs	r3, #15
 80031e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031e2:	2303      	movs	r3, #3
 80031e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031ea:	2300      	movs	r3, #0
 80031ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2104      	movs	r1, #4
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 fc6a 	bl	8006ad0 <HAL_RCC_ClockConfig>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8003202:	f000 f853 	bl	80032ac <Error_Handler>
  }
}
 8003206:	bf00      	nop
 8003208:	3750      	adds	r7, #80	@ 0x50
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003220:	d103      	bne.n	800322a <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8003222:	4b1c      	ldr	r3, [pc, #112]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x84>)
 8003224:	2209      	movs	r2, #9
 8003226:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
		State = 15;
	}
}
 8003228:	e02e      	b.n	8003288 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003230:	d103      	bne.n	800323a <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8003232:	4b18      	ldr	r3, [pc, #96]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x84>)
 8003234:	220a      	movs	r2, #10
 8003236:	601a      	str	r2, [r3, #0]
}
 8003238:	e026      	b.n	8003288 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003240:	d103      	bne.n	800324a <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8003242:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x84>)
 8003244:	220b      	movs	r2, #11
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	e01e      	b.n	8003288 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003250:	d103      	bne.n	800325a <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8003252:	4b10      	ldr	r3, [pc, #64]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x84>)
 8003254:	220c      	movs	r2, #12
 8003256:	601a      	str	r2, [r3, #0]
}
 8003258:	e016      	b.n	8003288 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003260:	d103      	bne.n	800326a <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8003262:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x84>)
 8003264:	220d      	movs	r2, #13
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	e00e      	b.n	8003288 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003270:	d103      	bne.n	800327a <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8003272:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x84>)
 8003274:	220e      	movs	r2, #14
 8003276:	601a      	str	r2, [r3, #0]
}
 8003278:	e006      	b.n	8003288 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 800327a:	88fb      	ldrh	r3, [r7, #6]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003280:	d102      	bne.n	8003288 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8003282:	4b04      	ldr	r3, [pc, #16]	@ (8003294 <HAL_GPIO_EXTI_Callback+0x84>)
 8003284:	220f      	movs	r2, #15
 8003286:	601a      	str	r2, [r3, #0]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	2000054c 	.word	0x2000054c

08003298 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
//			}
////			V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
//			count_Tim2 = 0;
//		}
//	}
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032b0:	b672      	cpsid	i
}
 80032b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <Error_Handler+0x8>

080032b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80032bc:	4b1b      	ldr	r3, [pc, #108]	@ (800332c <MX_SPI1_Init+0x74>)
 80032be:	4a1c      	ldr	r2, [pc, #112]	@ (8003330 <MX_SPI1_Init+0x78>)
 80032c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032c2:	4b1a      	ldr	r3, [pc, #104]	@ (800332c <MX_SPI1_Init+0x74>)
 80032c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032ca:	4b18      	ldr	r3, [pc, #96]	@ (800332c <MX_SPI1_Init+0x74>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032d0:	4b16      	ldr	r3, [pc, #88]	@ (800332c <MX_SPI1_Init+0x74>)
 80032d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80032d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80032d8:	4b14      	ldr	r3, [pc, #80]	@ (800332c <MX_SPI1_Init+0x74>)
 80032da:	2202      	movs	r2, #2
 80032dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80032de:	4b13      	ldr	r3, [pc, #76]	@ (800332c <MX_SPI1_Init+0x74>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032e4:	4b11      	ldr	r3, [pc, #68]	@ (800332c <MX_SPI1_Init+0x74>)
 80032e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80032ec:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <MX_SPI1_Init+0x74>)
 80032ee:	2238      	movs	r2, #56	@ 0x38
 80032f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80032f2:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <MX_SPI1_Init+0x74>)
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80032f8:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <MX_SPI1_Init+0x74>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	@ (800332c <MX_SPI1_Init+0x74>)
 8003300:	2200      	movs	r2, #0
 8003302:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003304:	4b09      	ldr	r3, [pc, #36]	@ (800332c <MX_SPI1_Init+0x74>)
 8003306:	2207      	movs	r2, #7
 8003308:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800330a:	4b08      	ldr	r3, [pc, #32]	@ (800332c <MX_SPI1_Init+0x74>)
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <MX_SPI1_Init+0x74>)
 8003312:	2200      	movs	r2, #0
 8003314:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003316:	4805      	ldr	r0, [pc, #20]	@ (800332c <MX_SPI1_Init+0x74>)
 8003318:	f004 f844 	bl	80073a4 <HAL_SPI_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003322:	f7ff ffc3 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	2000134c 	.word	0x2000134c
 8003330:	40013000 	.word	0x40013000

08003334 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	@ 0x28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0314 	add.w	r3, r7, #20
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a25      	ldr	r2, [pc, #148]	@ (80033e8 <HAL_SPI_MspInit+0xb4>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d144      	bne.n	80033e0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003356:	4b25      	ldr	r3, [pc, #148]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 8003358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335a:	4a24      	ldr	r2, [pc, #144]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 800335c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003360:	6613      	str	r3, [r2, #96]	@ 0x60
 8003362:	4b22      	ldr	r3, [pc, #136]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800336e:	4b1f      	ldr	r3, [pc, #124]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 8003370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003372:	4a1e      	ldr	r2, [pc, #120]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800337a:	4b1c      	ldr	r3, [pc, #112]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003386:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	4a18      	ldr	r2, [pc, #96]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003392:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <HAL_SPI_MspInit+0xb8>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800339e:	2320      	movs	r3, #32
 80033a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033ae:	2305      	movs	r3, #5
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b2:	f107 0314 	add.w	r3, r7, #20
 80033b6:	4619      	mov	r1, r3
 80033b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033bc:	f002 fe10 	bl	8005fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033c0:	2330      	movs	r3, #48	@ 0x30
 80033c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80033d0:	2305      	movs	r3, #5
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d4:	f107 0314 	add.w	r3, r7, #20
 80033d8:	4619      	mov	r1, r3
 80033da:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <HAL_SPI_MspInit+0xbc>)
 80033dc:	f002 fe00 	bl	8005fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80033e0:	bf00      	nop
 80033e2:	3728      	adds	r7, #40	@ 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40013000 	.word	0x40013000
 80033ec:	40021000 	.word	0x40021000
 80033f0:	48000400 	.word	0x48000400

080033f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <HAL_MspInit+0x44>)
 80033fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003438 <HAL_MspInit+0x44>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6613      	str	r3, [r2, #96]	@ 0x60
 8003406:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <HAL_MspInit+0x44>)
 8003408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_MspInit+0x44>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <HAL_MspInit+0x44>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800341c:	6593      	str	r3, [r2, #88]	@ 0x58
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_MspInit+0x44>)
 8003420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800342a:	f003 f82f 	bl	800648c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40021000 	.word	0x40021000

0800343c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <NMI_Handler+0x4>

08003444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <HardFault_Handler+0x4>

0800344c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <MemManage_Handler+0x4>

08003454 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <BusFault_Handler+0x4>

0800345c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <UsageFault_Handler+0x4>

08003464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003476:	bf00      	nop
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003492:	f000 fe7b 	bl	800418c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80034a0:	4802      	ldr	r0, [pc, #8]	@ (80034ac <DMA1_Channel1_IRQHandler+0x10>)
 80034a2:	f002 fc42 	bl	8005d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20001a10 	.word	0x20001a10

080034b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 80034b4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80034b8:	f002 ff2c 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}

080034c0 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034c4:	4802      	ldr	r0, [pc, #8]	@ (80034d0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80034c6:	f004 fd8b 	bl	8007fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	200013b0 	.word	0x200013b0

080034d4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034d8:	4803      	ldr	r0, [pc, #12]	@ (80034e8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80034da:	f004 fd81 	bl	8007fe0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80034de:	4803      	ldr	r0, [pc, #12]	@ (80034ec <TIM1_UP_TIM16_IRQHandler+0x18>)
 80034e0:	f004 fd7e 	bl	8007fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200013b0 	.word	0x200013b0
 80034ec:	200017ac 	.word	0x200017ac

080034f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034f4:	4802      	ldr	r0, [pc, #8]	@ (8003500 <TIM2_IRQHandler+0x10>)
 80034f6:	f004 fd73 	bl	8007fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000147c 	.word	0x2000147c

08003504 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <USART2_IRQHandler+0x10>)
 800350a:	f006 fc6d 	bl	8009de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20001944 	.word	0x20001944

08003518 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 800351c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003520:	f002 fef8 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8003524:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003528:	f002 fef4 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 800352c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003530:	f002 fef0 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 8003534:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003538:	f002 feec 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 800353c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003540:	f002 fee8 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8003544:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003548:	f002 fee4 	bl	8006314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800354c:	bf00      	nop
 800354e:	bd80      	pop	{r7, pc}

08003550 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <SystemInit+0x20>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	4a05      	ldr	r2, [pc, #20]	@ (8003570 <SystemInit+0x20>)
 800355c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800357a:	f107 0310 	add.w	r3, r7, #16
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003588:	1d3b      	adds	r3, r7, #4
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003592:	4b20      	ldr	r3, [pc, #128]	@ (8003614 <MX_TIM1_Init+0xa0>)
 8003594:	4a20      	ldr	r2, [pc, #128]	@ (8003618 <MX_TIM1_Init+0xa4>)
 8003596:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003598:	4b1e      	ldr	r3, [pc, #120]	@ (8003614 <MX_TIM1_Init+0xa0>)
 800359a:	2200      	movs	r2, #0
 800359c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800359e:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80035a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035a6:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80035aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035b2:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035b8:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035be:	4815      	ldr	r0, [pc, #84]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035c0:	f003 ff9c 	bl	80074fc <HAL_TIM_Base_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80035ca:	f7ff fe6f 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80035d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035d4:	f107 0310 	add.w	r3, r7, #16
 80035d8:	4619      	mov	r1, r3
 80035da:	480e      	ldr	r0, [pc, #56]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035dc:	f005 f808 	bl	80085f0 <HAL_TIM_ConfigClockSource>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80035e6:	f7ff fe61 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035f6:	1d3b      	adds	r3, r7, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4806      	ldr	r0, [pc, #24]	@ (8003614 <MX_TIM1_Init+0xa0>)
 80035fc:	f005 ffde 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003606:	f7ff fe51 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800360a:	bf00      	nop
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200013b0 	.word	0x200013b0
 8003618:	40012c00 	.word	0x40012c00

0800361c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003622:	f107 0310 	add.w	r3, r7, #16
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	609a      	str	r2, [r3, #8]
 800362e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800363a:	4b1e      	ldr	r3, [pc, #120]	@ (80036b4 <MX_TIM2_Init+0x98>)
 800363c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003640:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003642:	4b1c      	ldr	r3, [pc, #112]	@ (80036b4 <MX_TIM2_Init+0x98>)
 8003644:	22a9      	movs	r2, #169	@ 0xa9
 8003646:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003648:	4b1a      	ldr	r3, [pc, #104]	@ (80036b4 <MX_TIM2_Init+0x98>)
 800364a:	2200      	movs	r2, #0
 800364c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800364e:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <MX_TIM2_Init+0x98>)
 8003650:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003654:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003656:	4b17      	ldr	r3, [pc, #92]	@ (80036b4 <MX_TIM2_Init+0x98>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800365c:	4b15      	ldr	r3, [pc, #84]	@ (80036b4 <MX_TIM2_Init+0x98>)
 800365e:	2200      	movs	r2, #0
 8003660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003662:	4814      	ldr	r0, [pc, #80]	@ (80036b4 <MX_TIM2_Init+0x98>)
 8003664:	f003 ff4a 	bl	80074fc <HAL_TIM_Base_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800366e:	f7ff fe1d 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	4619      	mov	r1, r3
 800367e:	480d      	ldr	r0, [pc, #52]	@ (80036b4 <MX_TIM2_Init+0x98>)
 8003680:	f004 ffb6 	bl	80085f0 <HAL_TIM_ConfigClockSource>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800368a:	f7ff fe0f 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4806      	ldr	r0, [pc, #24]	@ (80036b4 <MX_TIM2_Init+0x98>)
 800369c:	f005 ff8e 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80036a6:	f7ff fe01 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036aa:	bf00      	nop
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	2000147c 	.word	0x2000147c

080036b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	@ 0x30
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	2224      	movs	r2, #36	@ 0x24
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f009 fa3e 	bl	800cb48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036cc:	463b      	mov	r3, r7
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80036d6:	4b21      	ldr	r3, [pc, #132]	@ (800375c <MX_TIM3_Init+0xa4>)
 80036d8:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <MX_TIM3_Init+0xa8>)
 80036da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80036dc:	4b1f      	ldr	r3, [pc, #124]	@ (800375c <MX_TIM3_Init+0xa4>)
 80036de:	2200      	movs	r2, #0
 80036e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e2:	4b1e      	ldr	r3, [pc, #120]	@ (800375c <MX_TIM3_Init+0xa4>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 80036e8:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <MX_TIM3_Init+0xa4>)
 80036ea:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80036ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <MX_TIM3_Init+0xa4>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f6:	4b19      	ldr	r3, [pc, #100]	@ (800375c <MX_TIM3_Init+0xa4>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80036fc:	2303      	movs	r3, #3
 80036fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003704:	2301      	movs	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003710:	2300      	movs	r3, #0
 8003712:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003718:	2300      	movs	r3, #0
 800371a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003720:	f107 030c 	add.w	r3, r7, #12
 8003724:	4619      	mov	r1, r3
 8003726:	480d      	ldr	r0, [pc, #52]	@ (800375c <MX_TIM3_Init+0xa4>)
 8003728:	f004 fb18 	bl	8007d5c <HAL_TIM_Encoder_Init>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003732:	f7ff fdbb 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800373e:	463b      	mov	r3, r7
 8003740:	4619      	mov	r1, r3
 8003742:	4806      	ldr	r0, [pc, #24]	@ (800375c <MX_TIM3_Init+0xa4>)
 8003744:	f005 ff3a 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800374e:	f7ff fdad 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003752:	bf00      	nop
 8003754:	3730      	adds	r7, #48	@ 0x30
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20001548 	.word	0x20001548
 8003760:	40000400 	.word	0x40000400

08003764 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08c      	sub	sp, #48	@ 0x30
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800376a:	f107 030c 	add.w	r3, r7, #12
 800376e:	2224      	movs	r2, #36	@ 0x24
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f009 f9e8 	bl	800cb48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003778:	463b      	mov	r3, r7
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	605a      	str	r2, [r3, #4]
 8003780:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003782:	4b21      	ldr	r3, [pc, #132]	@ (8003808 <MX_TIM4_Init+0xa4>)
 8003784:	4a21      	ldr	r2, [pc, #132]	@ (800380c <MX_TIM4_Init+0xa8>)
 8003786:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003788:	4b1f      	ldr	r3, [pc, #124]	@ (8003808 <MX_TIM4_Init+0xa4>)
 800378a:	2200      	movs	r2, #0
 800378c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378e:	4b1e      	ldr	r3, [pc, #120]	@ (8003808 <MX_TIM4_Init+0xa4>)
 8003790:	2200      	movs	r2, #0
 8003792:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8003794:	4b1c      	ldr	r3, [pc, #112]	@ (8003808 <MX_TIM4_Init+0xa4>)
 8003796:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800379a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800379c:	4b1a      	ldr	r3, [pc, #104]	@ (8003808 <MX_TIM4_Init+0xa4>)
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a2:	4b19      	ldr	r3, [pc, #100]	@ (8003808 <MX_TIM4_Init+0xa4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037a8:	2303      	movs	r3, #3
 80037aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037b0:	2301      	movs	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037bc:	2300      	movs	r3, #0
 80037be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037c4:	2300      	movs	r3, #0
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	4619      	mov	r1, r3
 80037d2:	480d      	ldr	r0, [pc, #52]	@ (8003808 <MX_TIM4_Init+0xa4>)
 80037d4:	f004 fac2 	bl	8007d5c <HAL_TIM_Encoder_Init>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80037de:	f7ff fd65 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80037ea:	463b      	mov	r3, r7
 80037ec:	4619      	mov	r1, r3
 80037ee:	4806      	ldr	r0, [pc, #24]	@ (8003808 <MX_TIM4_Init+0xa4>)
 80037f0:	f005 fee4 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80037fa:	f7ff fd57 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80037fe:	bf00      	nop
 8003800:	3730      	adds	r7, #48	@ 0x30
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20001614 	.word	0x20001614
 800380c:	40000800 	.word	0x40000800

08003810 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b09c      	sub	sp, #112	@ 0x70
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003816:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003824:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003830:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
 8003840:	615a      	str	r2, [r3, #20]
 8003842:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003844:	1d3b      	adds	r3, r7, #4
 8003846:	2234      	movs	r2, #52	@ 0x34
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f009 f97c 	bl	800cb48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003850:	4b45      	ldr	r3, [pc, #276]	@ (8003968 <MX_TIM8_Init+0x158>)
 8003852:	4a46      	ldr	r2, [pc, #280]	@ (800396c <MX_TIM8_Init+0x15c>)
 8003854:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003856:	4b44      	ldr	r3, [pc, #272]	@ (8003968 <MX_TIM8_Init+0x158>)
 8003858:	2200      	movs	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385c:	4b42      	ldr	r3, [pc, #264]	@ (8003968 <MX_TIM8_Init+0x158>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003862:	4b41      	ldr	r3, [pc, #260]	@ (8003968 <MX_TIM8_Init+0x158>)
 8003864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003868:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800386a:	4b3f      	ldr	r3, [pc, #252]	@ (8003968 <MX_TIM8_Init+0x158>)
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003870:	4b3d      	ldr	r3, [pc, #244]	@ (8003968 <MX_TIM8_Init+0x158>)
 8003872:	2200      	movs	r2, #0
 8003874:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003876:	4b3c      	ldr	r3, [pc, #240]	@ (8003968 <MX_TIM8_Init+0x158>)
 8003878:	2200      	movs	r2, #0
 800387a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800387c:	483a      	ldr	r0, [pc, #232]	@ (8003968 <MX_TIM8_Init+0x158>)
 800387e:	f003 fe3d 	bl	80074fc <HAL_TIM_Base_Init>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003888:	f7ff fd10 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003890:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003892:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003896:	4619      	mov	r1, r3
 8003898:	4833      	ldr	r0, [pc, #204]	@ (8003968 <MX_TIM8_Init+0x158>)
 800389a:	f004 fea9 	bl	80085f0 <HAL_TIM_ConfigClockSource>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80038a4:	f7ff fd02 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80038a8:	482f      	ldr	r0, [pc, #188]	@ (8003968 <MX_TIM8_Init+0x158>)
 80038aa:	f003 ffe1 	bl	8007870 <HAL_TIM_PWM_Init>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80038b4:	f7ff fcfa 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038b8:	2300      	movs	r3, #0
 80038ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80038bc:	2300      	movs	r3, #0
 80038be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80038c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80038c8:	4619      	mov	r1, r3
 80038ca:	4827      	ldr	r0, [pc, #156]	@ (8003968 <MX_TIM8_Init+0x158>)
 80038cc:	f005 fe76 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80038d6:	f7ff fce9 	bl	80032ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038da:	2360      	movs	r3, #96	@ 0x60
 80038dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e2:	2300      	movs	r3, #0
 80038e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038e6:	2300      	movs	r3, #0
 80038e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038fa:	220c      	movs	r2, #12
 80038fc:	4619      	mov	r1, r3
 80038fe:	481a      	ldr	r0, [pc, #104]	@ (8003968 <MX_TIM8_Init+0x158>)
 8003900:	f004 fd62 	bl	80083c8 <HAL_TIM_PWM_ConfigChannel>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800390a:	f7ff fccf 	bl	80032ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800391a:	2300      	movs	r3, #0
 800391c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003926:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800392c:	2300      	movs	r3, #0
 800392e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003930:	2300      	movs	r3, #0
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003934:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003938:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800393e:	2300      	movs	r3, #0
 8003940:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003946:	1d3b      	adds	r3, r7, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4807      	ldr	r0, [pc, #28]	@ (8003968 <MX_TIM8_Init+0x158>)
 800394c:	f005 fecc 	bl	80096e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8003956:	f7ff fca9 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800395a:	4803      	ldr	r0, [pc, #12]	@ (8003968 <MX_TIM8_Init+0x158>)
 800395c:	f000 fa44 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003960:	bf00      	nop
 8003962:	3770      	adds	r7, #112	@ 0x70
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200016e0 	.word	0x200016e0
 800396c:	40013400 	.word	0x40013400

08003970 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b094      	sub	sp, #80	@ 0x50
 8003974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003976:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
 8003984:	611a      	str	r2, [r3, #16]
 8003986:	615a      	str	r2, [r3, #20]
 8003988:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800398a:	463b      	mov	r3, r7
 800398c:	2234      	movs	r2, #52	@ 0x34
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f009 f8d9 	bl	800cb48 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003996:	4b34      	ldr	r3, [pc, #208]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 8003998:	4a34      	ldr	r2, [pc, #208]	@ (8003a6c <MX_TIM16_Init+0xfc>)
 800399a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800399c:	4b32      	ldr	r3, [pc, #200]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 800399e:	22a9      	movs	r2, #169	@ 0xa9
 80039a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a2:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 80039a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039aa:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 80039ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80039b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039be:	2200      	movs	r2, #0
 80039c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80039c2:	4829      	ldr	r0, [pc, #164]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039c4:	f003 fd9a 	bl	80074fc <HAL_TIM_Base_Init>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80039ce:	f7ff fc6d 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80039d2:	4825      	ldr	r0, [pc, #148]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039d4:	f003 fede 	bl	8007794 <HAL_TIM_OC_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80039de:	f7ff fc65 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80039e2:	2108      	movs	r1, #8
 80039e4:	4820      	ldr	r0, [pc, #128]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 80039e6:	f004 f8c3 	bl	8007b70 <HAL_TIM_OnePulse_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80039f0:	f7ff fc5c 	bl	80032ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80039f4:	2310      	movs	r3, #16
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 80039f8:	f240 5399 	movw	r3, #1433	@ 0x599
 80039fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039fe:	2300      	movs	r3, #0
 8003a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a02:	2300      	movs	r3, #0
 8003a04:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a06:	2300      	movs	r3, #0
 8003a08:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003a16:	2200      	movs	r2, #0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4813      	ldr	r0, [pc, #76]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 8003a1c:	f004 fc5a 	bl	80082d4 <HAL_TIM_OC_ConfigChannel>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8003a26:	f7ff fc41 	bl	80032ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003a4c:	463b      	mov	r3, r7
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4805      	ldr	r0, [pc, #20]	@ (8003a68 <MX_TIM16_Init+0xf8>)
 8003a52:	f005 fe49 	bl	80096e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d001      	beq.n	8003a60 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8003a5c:	f7ff fc26 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003a60:	bf00      	nop
 8003a62:	3750      	adds	r7, #80	@ 0x50
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	200017ac 	.word	0x200017ac
 8003a6c:	40014400 	.word	0x40014400

08003a70 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b09c      	sub	sp, #112	@ 0x70
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a76:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
 8003aa0:	615a      	str	r2, [r3, #20]
 8003aa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003aa4:	1d3b      	adds	r3, r7, #4
 8003aa6:	2234      	movs	r2, #52	@ 0x34
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f009 f84c 	bl	800cb48 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8003ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003ab2:	4a4c      	ldr	r2, [pc, #304]	@ (8003be4 <MX_TIM20_Init+0x174>)
 8003ab4:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abc:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8003ac2:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003ac4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ac8:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aca:	4b45      	ldr	r3, [pc, #276]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8003ad0:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad6:	4b42      	ldr	r3, [pc, #264]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8003adc:	4840      	ldr	r0, [pc, #256]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003ade:	f003 fd0d 	bl	80074fc <HAL_TIM_Base_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8003ae8:	f7ff fbe0 	bl	80032ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003af0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8003af2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003af6:	4619      	mov	r1, r3
 8003af8:	4839      	ldr	r0, [pc, #228]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003afa:	f004 fd79 	bl	80085f0 <HAL_TIM_ConfigClockSource>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8003b04:	f7ff fbd2 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8003b08:	4835      	ldr	r0, [pc, #212]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003b0a:	f003 feb1 	bl	8007870 <HAL_TIM_PWM_Init>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8003b14:	f7ff fbca 	bl	80032ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8003b24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b28:	4619      	mov	r1, r3
 8003b2a:	482d      	ldr	r0, [pc, #180]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003b2c:	f005 fd46 	bl	80095bc <HAL_TIMEx_MasterConfigSynchronization>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8003b36:	f7ff fbb9 	bl	80032ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b3a:	2360      	movs	r3, #96	@ 0x60
 8003b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b42:	2300      	movs	r3, #0
 8003b44:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b46:	2300      	movs	r3, #0
 8003b48:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4820      	ldr	r0, [pc, #128]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003b60:	f004 fc32 	bl	80083c8 <HAL_TIM_PWM_ConfigChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8003b6a:	f7ff fb9f 	bl	80032ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b72:	2208      	movs	r2, #8
 8003b74:	4619      	mov	r1, r3
 8003b76:	481a      	ldr	r0, [pc, #104]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003b78:	f004 fc26 	bl	80083c8 <HAL_TIM_PWM_ConfigChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8003b82:	f7ff fb93 	bl	80032ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4807      	ldr	r0, [pc, #28]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003bc4:	f005 fd90 	bl	80096e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8003bce:	f7ff fb6d 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8003bd2:	4803      	ldr	r0, [pc, #12]	@ (8003be0 <MX_TIM20_Init+0x170>)
 8003bd4:	f000 f908 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 8003bd8:	bf00      	nop
 8003bda:	3770      	adds	r7, #112	@ 0x70
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	20001878 	.word	0x20001878
 8003be4:	40015000 	.word	0x40015000

08003be8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a3d      	ldr	r2, [pc, #244]	@ (8003cec <HAL_TIM_Base_MspInit+0x104>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d11c      	bne.n	8003c34 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bfe:	4a3c      	ldr	r2, [pc, #240]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c06:	4b3a      	ldr	r3, [pc, #232]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c0e:	61fb      	str	r3, [r7, #28]
 8003c10:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	2018      	movs	r0, #24
 8003c18:	f001 fe6f 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003c1c:	2018      	movs	r0, #24
 8003c1e:	f001 fe86 	bl	800592e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003c22:	2200      	movs	r2, #0
 8003c24:	2100      	movs	r1, #0
 8003c26:	2019      	movs	r0, #25
 8003c28:	f001 fe67 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003c2c:	2019      	movs	r0, #25
 8003c2e:	f001 fe7e 	bl	800592e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8003c32:	e056      	b.n	8003ce2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c3c:	d114      	bne.n	8003c68 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4a:	4b29      	ldr	r3, [pc, #164]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	201c      	movs	r0, #28
 8003c5c:	f001 fe4d 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003c60:	201c      	movs	r0, #28
 8003c62:	f001 fe64 	bl	800592e <HAL_NVIC_EnableIRQ>
}
 8003c66:	e03c      	b.n	8003ce2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a21      	ldr	r2, [pc, #132]	@ (8003cf4 <HAL_TIM_Base_MspInit+0x10c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d10c      	bne.n	8003c8c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003c72:	4b1f      	ldr	r3, [pc, #124]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c76:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	697b      	ldr	r3, [r7, #20]
}
 8003c8a:	e02a      	b.n	8003ce2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a19      	ldr	r2, [pc, #100]	@ (8003cf8 <HAL_TIM_Base_MspInit+0x110>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d114      	bne.n	8003cc0 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003c96:	4b16      	ldr	r3, [pc, #88]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9a:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ca2:	4b13      	ldr	r3, [pc, #76]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003cae:	2200      	movs	r2, #0
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2019      	movs	r0, #25
 8003cb4:	f001 fe21 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003cb8:	2019      	movs	r0, #25
 8003cba:	f001 fe38 	bl	800592e <HAL_NVIC_EnableIRQ>
}
 8003cbe:	e010      	b.n	8003ce2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8003cfc <HAL_TIM_Base_MspInit+0x114>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8003cca:	4b09      	ldr	r3, [pc, #36]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003ccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cce:	4a08      	ldr	r2, [pc, #32]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003cd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cd6:	4b06      	ldr	r3, [pc, #24]	@ (8003cf0 <HAL_TIM_Base_MspInit+0x108>)
 8003cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
}
 8003ce2:	bf00      	nop
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40012c00 	.word	0x40012c00
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40014400 	.word	0x40014400
 8003cfc:	40015000 	.word	0x40015000

08003d00 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08c      	sub	sp, #48	@ 0x30
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	f107 031c 	add.w	r3, r7, #28
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]
 8003d16:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8003ddc <HAL_TIM_Encoder_MspInit+0xdc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d129      	bne.n	8003d76 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d22:	4b2f      	ldr	r3, [pc, #188]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d26:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d28:	f043 0302 	orr.w	r3, r3, #2
 8003d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d3a:	4b29      	ldr	r3, [pc, #164]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	4a28      	ldr	r2, [pc, #160]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d46:	4b26      	ldr	r3, [pc, #152]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8003d52:	23c0      	movs	r3, #192	@ 0xc0
 8003d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d56:	2302      	movs	r3, #2
 8003d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d62:	2302      	movs	r3, #2
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d66:	f107 031c 	add.w	r3, r7, #28
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d70:	f002 f936 	bl	8005fe0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003d74:	e02e      	b.n	8003dd4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1a      	ldr	r2, [pc, #104]	@ (8003de4 <HAL_TIM_Encoder_MspInit+0xe4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d129      	bne.n	8003dd4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d80:	4b17      	ldr	r3, [pc, #92]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d84:	4a16      	ldr	r2, [pc, #88]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d86:	f043 0304 	orr.w	r3, r3, #4
 8003d8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d8c:	4b14      	ldr	r3, [pc, #80]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d98:	4b11      	ldr	r3, [pc, #68]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9c:	4a10      	ldr	r2, [pc, #64]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003d9e:	f043 0301 	orr.w	r3, r3, #1
 8003da2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003da4:	4b0e      	ldr	r3, [pc, #56]	@ (8003de0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8003db0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db6:	2302      	movs	r3, #2
 8003db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003dc2:	230a      	movs	r3, #10
 8003dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc6:	f107 031c 	add.w	r3, r7, #28
 8003dca:	4619      	mov	r1, r3
 8003dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd0:	f002 f906 	bl	8005fe0 <HAL_GPIO_Init>
}
 8003dd4:	bf00      	nop
 8003dd6:	3730      	adds	r7, #48	@ 0x30
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	40000400 	.word	0x40000400
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40000800 	.word	0x40000800

08003de8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	@ 0x28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	605a      	str	r2, [r3, #4]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a31      	ldr	r2, [pc, #196]	@ (8003ecc <HAL_TIM_MspPostInit+0xe4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11d      	bne.n	8003e46 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e0a:	4b31      	ldr	r3, [pc, #196]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0e:	4a30      	ldr	r2, [pc, #192]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e16:	4b2e      	ldr	r3, [pc, #184]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8003e22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e30:	2300      	movs	r3, #0
 8003e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003e34:	2304      	movs	r3, #4
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8003e38:	f107 0314 	add.w	r3, r7, #20
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4825      	ldr	r0, [pc, #148]	@ (8003ed4 <HAL_TIM_MspPostInit+0xec>)
 8003e40:	f002 f8ce 	bl	8005fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8003e44:	e03d      	b.n	8003ec2 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a23      	ldr	r2, [pc, #140]	@ (8003ed8 <HAL_TIM_MspPostInit+0xf0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d138      	bne.n	8003ec2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e56:	f043 0302 	orr.w	r3, r3, #2
 8003e5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e68:	4b19      	ldr	r3, [pc, #100]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6c:	4a18      	ldr	r2, [pc, #96]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e74:	4b16      	ldr	r3, [pc, #88]	@ (8003ed0 <HAL_TIM_MspPostInit+0xe8>)
 8003e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8003e80:	2304      	movs	r3, #4
 8003e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e84:	2302      	movs	r3, #2
 8003e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8003e90:	2303      	movs	r3, #3
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4810      	ldr	r0, [pc, #64]	@ (8003edc <HAL_TIM_MspPostInit+0xf4>)
 8003e9c:	f002 f8a0 	bl	8005fe0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8003ea0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8003eb2:	2306      	movs	r3, #6
 8003eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8003eb6:	f107 0314 	add.w	r3, r7, #20
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4805      	ldr	r0, [pc, #20]	@ (8003ed4 <HAL_TIM_MspPostInit+0xec>)
 8003ebe:	f002 f88f 	bl	8005fe0 <HAL_GPIO_Init>
}
 8003ec2:	bf00      	nop
 8003ec4:	3728      	adds	r7, #40	@ 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40013400 	.word	0x40013400
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	48000800 	.word	0x48000800
 8003ed8:	40015000 	.word	0x40015000
 8003edc:	48000400 	.word	0x48000400

08003ee0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ee4:	4b23      	ldr	r3, [pc, #140]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003ee6:	4a24      	ldr	r2, [pc, #144]	@ (8003f78 <MX_USART2_UART_Init+0x98>)
 8003ee8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003eea:	4b22      	ldr	r3, [pc, #136]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003eec:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003ef0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003ef2:	4b20      	ldr	r3, [pc, #128]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003ef4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ef8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003efa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003f00:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f08:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0e:	4b19      	ldr	r3, [pc, #100]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f14:	4b17      	ldr	r3, [pc, #92]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f1a:	4b16      	ldr	r3, [pc, #88]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f20:	4b14      	ldr	r3, [pc, #80]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f26:	4b13      	ldr	r3, [pc, #76]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f2c:	4811      	ldr	r0, [pc, #68]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f2e:	f005 fcbf 	bl	80098b0 <HAL_UART_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003f38:	f7ff f9b8 	bl	80032ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	480d      	ldr	r0, [pc, #52]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f40:	f008 f841 	bl	800bfc6 <HAL_UARTEx_SetTxFifoThreshold>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003f4a:	f7ff f9af 	bl	80032ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4808      	ldr	r0, [pc, #32]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f52:	f008 f876 	bl	800c042 <HAL_UARTEx_SetRxFifoThreshold>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003f5c:	f7ff f9a6 	bl	80032ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f60:	4804      	ldr	r0, [pc, #16]	@ (8003f74 <MX_USART2_UART_Init+0x94>)
 8003f62:	f007 fff7 	bl	800bf54 <HAL_UARTEx_DisableFifoMode>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003f6c:	f7ff f99e 	bl	80032ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f70:	bf00      	nop
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20001944 	.word	0x20001944
 8003f78:	40004400 	.word	0x40004400

08003f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b09e      	sub	sp, #120	@ 0x78
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f94:	f107 0310 	add.w	r3, r7, #16
 8003f98:	2254      	movs	r2, #84	@ 0x54
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f008 fdd3 	bl	800cb48 <memset>
  if(uartHandle->Instance==USART2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a37      	ldr	r2, [pc, #220]	@ (8004084 <HAL_UART_MspInit+0x108>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d167      	bne.n	800407c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fac:	2302      	movs	r3, #2
 8003fae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fb4:	f107 0310 	add.w	r3, r7, #16
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 ffa5 	bl	8006f08 <HAL_RCCEx_PeriphCLKConfig>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003fc4:	f7ff f972 	bl	80032ac <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004088 <HAL_UART_MspInit+0x10c>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8004088 <HAL_UART_MspInit+0x10c>)
 8003fce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8004088 <HAL_UART_MspInit+0x10c>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe0:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <HAL_UART_MspInit+0x10c>)
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe4:	4a28      	ldr	r2, [pc, #160]	@ (8004088 <HAL_UART_MspInit+0x10c>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fec:	4b26      	ldr	r3, [pc, #152]	@ (8004088 <HAL_UART_MspInit+0x10c>)
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004004:	2300      	movs	r3, #0
 8004006:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004008:	2307      	movs	r3, #7
 800400a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800400c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004010:	4619      	mov	r1, r3
 8004012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004016:	f001 ffe3 	bl	8005fe0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800401a:	4b1c      	ldr	r3, [pc, #112]	@ (800408c <HAL_UART_MspInit+0x110>)
 800401c:	4a1c      	ldr	r2, [pc, #112]	@ (8004090 <HAL_UART_MspInit+0x114>)
 800401e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004020:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004022:	221b      	movs	r2, #27
 8004024:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004026:	4b19      	ldr	r3, [pc, #100]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004028:	2210      	movs	r2, #16
 800402a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800402c:	4b17      	ldr	r3, [pc, #92]	@ (800408c <HAL_UART_MspInit+0x110>)
 800402e:	2200      	movs	r2, #0
 8004030:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004032:	4b16      	ldr	r3, [pc, #88]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004034:	2280      	movs	r2, #128	@ 0x80
 8004036:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004038:	4b14      	ldr	r3, [pc, #80]	@ (800408c <HAL_UART_MspInit+0x110>)
 800403a:	2200      	movs	r2, #0
 800403c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800403e:	4b13      	ldr	r3, [pc, #76]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004046:	2200      	movs	r2, #0
 8004048:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800404a:	4b10      	ldr	r3, [pc, #64]	@ (800408c <HAL_UART_MspInit+0x110>)
 800404c:	2200      	movs	r2, #0
 800404e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004050:	480e      	ldr	r0, [pc, #56]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004052:	f001 fc87 	bl	8005964 <HAL_DMA_Init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d001      	beq.n	8004060 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800405c:	f7ff f926 	bl	80032ac <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a0a      	ldr	r2, [pc, #40]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004064:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004066:	4a09      	ldr	r2, [pc, #36]	@ (800408c <HAL_UART_MspInit+0x110>)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800406c:	2200      	movs	r2, #0
 800406e:	2100      	movs	r1, #0
 8004070:	2026      	movs	r0, #38	@ 0x26
 8004072:	f001 fc42 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004076:	2026      	movs	r0, #38	@ 0x26
 8004078:	f001 fc59 	bl	800592e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800407c:	bf00      	nop
 800407e:	3778      	adds	r7, #120	@ 0x78
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40004400 	.word	0x40004400
 8004088:	40021000 	.word	0x40021000
 800408c:	20001a10 	.word	0x20001a10
 8004090:	40020008 	.word	0x40020008

08004094 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004094:	480d      	ldr	r0, [pc, #52]	@ (80040cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004096:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004098:	f7ff fa5a 	bl	8003550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800409c:	480c      	ldr	r0, [pc, #48]	@ (80040d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800409e:	490d      	ldr	r1, [pc, #52]	@ (80040d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040a0:	4a0d      	ldr	r2, [pc, #52]	@ (80040d8 <LoopForever+0xe>)
  movs r3, #0
 80040a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80040a4:	e002      	b.n	80040ac <LoopCopyDataInit>

080040a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040aa:	3304      	adds	r3, #4

080040ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040b0:	d3f9      	bcc.n	80040a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040b2:	4a0a      	ldr	r2, [pc, #40]	@ (80040dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80040b4:	4c0a      	ldr	r4, [pc, #40]	@ (80040e0 <LoopForever+0x16>)
  movs r3, #0
 80040b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040b8:	e001      	b.n	80040be <LoopFillZerobss>

080040ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040bc:	3204      	adds	r2, #4

080040be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040c0:	d3fb      	bcc.n	80040ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80040c2:	f008 fd4f 	bl	800cb64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80040c6:	f7fe fb73 	bl	80027b0 <main>

080040ca <LoopForever>:

LoopForever:
    b LoopForever
 80040ca:	e7fe      	b.n	80040ca <LoopForever>
  ldr   r0, =_estack
 80040cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80040d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040d4:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 80040d8:	0800cc74 	.word	0x0800cc74
  ldr r2, =_sbss
 80040dc:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 80040e0:	20001bac 	.word	0x20001bac

080040e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80040e4:	e7fe      	b.n	80040e4 <ADC1_2_IRQHandler>

080040e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040ec:	2300      	movs	r3, #0
 80040ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f0:	2003      	movs	r0, #3
 80040f2:	f001 fbf7 	bl	80058e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040f6:	2000      	movs	r0, #0
 80040f8:	f000 f80e 	bl	8004118 <HAL_InitTick>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	71fb      	strb	r3, [r7, #7]
 8004106:	e001      	b.n	800410c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004108:	f7ff f974 	bl	80033f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800410c:	79fb      	ldrb	r3, [r7, #7]

}
 800410e:	4618      	mov	r0, r3
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004120:	2300      	movs	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004124:	4b16      	ldr	r3, [pc, #88]	@ (8004180 <HAL_InitTick+0x68>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d022      	beq.n	8004172 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800412c:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <HAL_InitTick+0x6c>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <HAL_InitTick+0x68>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004138:	fbb1 f3f3 	udiv	r3, r1, r3
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	4618      	mov	r0, r3
 8004142:	f001 fc02 	bl	800594a <HAL_SYSTICK_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10f      	bne.n	800416c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b0f      	cmp	r3, #15
 8004150:	d809      	bhi.n	8004166 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004152:	2200      	movs	r2, #0
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	f04f 30ff 	mov.w	r0, #4294967295
 800415a:	f001 fbce 	bl	80058fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800415e:	4a0a      	ldr	r2, [pc, #40]	@ (8004188 <HAL_InitTick+0x70>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e007      	b.n	8004176 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
 800416a:	e004      	b.n	8004176 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e001      	b.n	8004176 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000208 	.word	0x20000208
 8004184:	20000200 	.word	0x20000200
 8004188:	20000204 	.word	0x20000204

0800418c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004190:	4b05      	ldr	r3, [pc, #20]	@ (80041a8 <HAL_IncTick+0x1c>)
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <HAL_IncTick+0x20>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4413      	add	r3, r2
 800419a:	4a03      	ldr	r2, [pc, #12]	@ (80041a8 <HAL_IncTick+0x1c>)
 800419c:	6013      	str	r3, [r2, #0]
}
 800419e:	bf00      	nop
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	20001a70 	.word	0x20001a70
 80041ac:	20000208 	.word	0x20000208

080041b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return uwTick;
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <HAL_GetTick+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	20001a70 	.word	0x20001a70

080041c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	609a      	str	r2, [r3, #8]
}
 80041e2:	bf00      	nop
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3360      	adds	r3, #96	@ 0x60
 8004242:	461a      	mov	r2, r3
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b08      	ldr	r3, [pc, #32]	@ (8004274 <LL_ADC_SetOffset+0x44>)
 8004252:	4013      	ands	r3, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	03fff000 	.word	0x03fff000

08004278 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3360      	adds	r3, #96	@ 0x60
 8004286:	461a      	mov	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004298:	4618      	mov	r0, r3
 800429a:	3714      	adds	r7, #20
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3360      	adds	r3, #96	@ 0x60
 80042b4:	461a      	mov	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80042da:	b480      	push	{r7}
 80042dc:	b087      	sub	sp, #28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3360      	adds	r3, #96	@ 0x60
 80042ea:	461a      	mov	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	431a      	orrs	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004304:	bf00      	nop
 8004306:	371c      	adds	r7, #28
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	3360      	adds	r3, #96	@ 0x60
 8004320:	461a      	mov	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	431a      	orrs	r2, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	615a      	str	r2, [r3, #20]
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3330      	adds	r3, #48	@ 0x30
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f003 030c 	and.w	r3, r3, #12
 8004388:	4413      	add	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	211f      	movs	r1, #31
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	0e9b      	lsrs	r3, r3, #26
 80043a4:	f003 011f 	and.w	r1, r3, #31
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 031f 	and.w	r3, r3, #31
 80043ae:	fa01 f303 	lsl.w	r3, r1, r3
 80043b2:	431a      	orrs	r2, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043b8:	bf00      	nop
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3314      	adds	r3, #20
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	0e5b      	lsrs	r3, r3, #25
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	4413      	add	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	0d1b      	lsrs	r3, r3, #20
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	2107      	movs	r1, #7
 80043f2:	fa01 f303 	lsl.w	r3, r1, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	401a      	ands	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	0d1b      	lsrs	r3, r3, #20
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	fa01 f303 	lsl.w	r3, r1, r3
 8004408:	431a      	orrs	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004434:	43db      	mvns	r3, r3
 8004436:	401a      	ands	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f003 0318 	and.w	r3, r3, #24
 800443e:	4908      	ldr	r1, [pc, #32]	@ (8004460 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004440:	40d9      	lsrs	r1, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	400b      	ands	r3, r1
 8004446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444a:	431a      	orrs	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	0007ffff 	.word	0x0007ffff

08004464 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f003 031f 	and.w	r3, r3, #31
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004490:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6093      	str	r3, [r2, #8]
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044b8:	d101      	bne.n	80044be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e000      	b.n	80044c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80044dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044e0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004504:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004508:	d101      	bne.n	800450e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800452c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <LL_ADC_IsEnabled+0x18>
 8004558:	2301      	movs	r3, #1
 800455a:	e000      	b.n	800455e <LL_ADC_IsEnabled+0x1a>
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800457a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800457e:	f043 0204 	orr.w	r2, r3, #4
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d101      	bne.n	80045aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d101      	bne.n	80045d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045e0:	b590      	push	{r4, r7, lr}
 80045e2:	b089      	sub	sp, #36	@ 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e1a9      	b.n	800494e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fd ff47 	bl	800249c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff3f 	bl	80044a4 <LL_ADC_IsDeepPowerDownEnabled>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff ff25 	bl	8004480 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff5a 	bl	80044f4 <LL_ADC_IsInternalRegulatorEnabled>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d115      	bne.n	8004672 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ff3e 	bl	80044cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004650:	4b9c      	ldr	r3, [pc, #624]	@ (80048c4 <HAL_ADC_Init+0x2e4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	099b      	lsrs	r3, r3, #6
 8004656:	4a9c      	ldr	r2, [pc, #624]	@ (80048c8 <HAL_ADC_Init+0x2e8>)
 8004658:	fba2 2303 	umull	r2, r3, r2, r3
 800465c:	099b      	lsrs	r3, r3, #6
 800465e:	3301      	adds	r3, #1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004664:	e002      	b.n	800466c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b01      	subs	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f9      	bne.n	8004666 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff ff3c 	bl	80044f4 <LL_ADC_IsInternalRegulatorEnabled>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10d      	bne.n	800469e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004686:	f043 0210 	orr.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004692:	f043 0201 	orr.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff ff75 	bl	8004592 <LL_ADC_REG_IsConversionOngoing>
 80046a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f040 8142 	bne.w	800493c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f040 813e 	bne.w	800493c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80046c8:	f043 0202 	orr.w	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff ff35 	bl	8004544 <LL_ADC_IsEnabled>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d141      	bne.n	8004764 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046e8:	d004      	beq.n	80046f4 <HAL_ADC_Init+0x114>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a77      	ldr	r2, [pc, #476]	@ (80048cc <HAL_ADC_Init+0x2ec>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d10f      	bne.n	8004714 <HAL_ADC_Init+0x134>
 80046f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046f8:	f7ff ff24 	bl	8004544 <LL_ADC_IsEnabled>
 80046fc:	4604      	mov	r4, r0
 80046fe:	4873      	ldr	r0, [pc, #460]	@ (80048cc <HAL_ADC_Init+0x2ec>)
 8004700:	f7ff ff20 	bl	8004544 <LL_ADC_IsEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	4323      	orrs	r3, r4
 8004708:	2b00      	cmp	r3, #0
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e012      	b.n	800473a <HAL_ADC_Init+0x15a>
 8004714:	486e      	ldr	r0, [pc, #440]	@ (80048d0 <HAL_ADC_Init+0x2f0>)
 8004716:	f7ff ff15 	bl	8004544 <LL_ADC_IsEnabled>
 800471a:	4604      	mov	r4, r0
 800471c:	486d      	ldr	r0, [pc, #436]	@ (80048d4 <HAL_ADC_Init+0x2f4>)
 800471e:	f7ff ff11 	bl	8004544 <LL_ADC_IsEnabled>
 8004722:	4603      	mov	r3, r0
 8004724:	431c      	orrs	r4, r3
 8004726:	486c      	ldr	r0, [pc, #432]	@ (80048d8 <HAL_ADC_Init+0x2f8>)
 8004728:	f7ff ff0c 	bl	8004544 <LL_ADC_IsEnabled>
 800472c:	4603      	mov	r3, r0
 800472e:	4323      	orrs	r3, r4
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf0c      	ite	eq
 8004734:	2301      	moveq	r3, #1
 8004736:	2300      	movne	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d012      	beq.n	8004764 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004746:	d004      	beq.n	8004752 <HAL_ADC_Init+0x172>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a5f      	ldr	r2, [pc, #380]	@ (80048cc <HAL_ADC_Init+0x2ec>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d101      	bne.n	8004756 <HAL_ADC_Init+0x176>
 8004752:	4a62      	ldr	r2, [pc, #392]	@ (80048dc <HAL_ADC_Init+0x2fc>)
 8004754:	e000      	b.n	8004758 <HAL_ADC_Init+0x178>
 8004756:	4a62      	ldr	r2, [pc, #392]	@ (80048e0 <HAL_ADC_Init+0x300>)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f7ff fd32 	bl	80041c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	7f5b      	ldrb	r3, [r3, #29]
 8004768:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800476e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004774:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800477a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004782:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800478e:	2b01      	cmp	r3, #1
 8004790:	d106      	bne.n	80047a0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	3b01      	subs	r3, #1
 8004798:	045b      	lsls	r3, r3, #17
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d009      	beq.n	80047bc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	4b48      	ldr	r3, [pc, #288]	@ (80048e4 <HAL_ADC_Init+0x304>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	69b9      	ldr	r1, [r7, #24]
 80047cc:	430b      	orrs	r3, r1
 80047ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff fee4 	bl	80045b8 <LL_ADC_INJ_IsConversionOngoing>
 80047f0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d17f      	bne.n	80048f8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d17c      	bne.n	80048f8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004802:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800480a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800480c:	4313      	orrs	r3, r2
 800480e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800481a:	f023 0302 	bic.w	r3, r3, #2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	430b      	orrs	r3, r1
 8004826:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d017      	beq.n	8004860 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800483e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004848:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800484c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6911      	ldr	r1, [r2, #16]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	430b      	orrs	r3, r1
 800485a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800485e:	e013      	b.n	8004888 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800486e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004880:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004884:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488e:	2b01      	cmp	r3, #1
 8004890:	d12a      	bne.n	80048e8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800489c:	f023 0304 	bic.w	r3, r3, #4
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048ae:	4311      	orrs	r1, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048b4:	430a      	orrs	r2, r1
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0201 	orr.w	r2, r2, #1
 80048c0:	611a      	str	r2, [r3, #16]
 80048c2:	e019      	b.n	80048f8 <HAL_ADC_Init+0x318>
 80048c4:	20000200 	.word	0x20000200
 80048c8:	053e2d63 	.word	0x053e2d63
 80048cc:	50000100 	.word	0x50000100
 80048d0:	50000400 	.word	0x50000400
 80048d4:	50000500 	.word	0x50000500
 80048d8:	50000600 	.word	0x50000600
 80048dc:	50000300 	.word	0x50000300
 80048e0:	50000700 	.word	0x50000700
 80048e4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691a      	ldr	r2, [r3, #16]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10c      	bne.n	800491a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004906:	f023 010f 	bic.w	r1, r3, #15
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	1e5a      	subs	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
 8004918:	e007      	b.n	800492a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 020f 	bic.w	r2, r2, #15
 8004928:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	65da      	str	r2, [r3, #92]	@ 0x5c
 800493a:	e007      	b.n	800494c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004940:	f043 0210 	orr.w	r2, r3, #16
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800494c:	7ffb      	ldrb	r3, [r7, #31]
}
 800494e:	4618      	mov	r0, r3
 8004950:	3724      	adds	r7, #36	@ 0x24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd90      	pop	{r4, r7, pc}
 8004956:	bf00      	nop

08004958 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b086      	sub	sp, #24
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004968:	d004      	beq.n	8004974 <HAL_ADC_Start+0x1c>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a67      	ldr	r2, [pc, #412]	@ (8004b0c <HAL_ADC_Start+0x1b4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <HAL_ADC_Start+0x20>
 8004974:	4b66      	ldr	r3, [pc, #408]	@ (8004b10 <HAL_ADC_Start+0x1b8>)
 8004976:	e000      	b.n	800497a <HAL_ADC_Start+0x22>
 8004978:	4b66      	ldr	r3, [pc, #408]	@ (8004b14 <HAL_ADC_Start+0x1bc>)
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fd72 	bl	8004464 <LL_ADC_GetMultimode>
 8004980:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fe03 	bl	8004592 <LL_ADC_REG_IsConversionOngoing>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 80b4 	bne.w	8004afc <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800499a:	2b01      	cmp	r3, #1
 800499c:	d101      	bne.n	80049a2 <HAL_ADC_Start+0x4a>
 800499e:	2302      	movs	r3, #2
 80049a0:	e0af      	b.n	8004b02 <HAL_ADC_Start+0x1aa>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fd06 	bl	80053bc <ADC_Enable>
 80049b0:	4603      	mov	r3, r0
 80049b2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f040 809b 	bne.w	8004af2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a4d      	ldr	r2, [pc, #308]	@ (8004b0c <HAL_ADC_Start+0x1b4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_ADC_Start+0x96>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a4e      	ldr	r2, [pc, #312]	@ (8004b18 <HAL_ADC_Start+0x1c0>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d002      	beq.n	80049ea <HAL_ADC_Start+0x92>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	e003      	b.n	80049f2 <HAL_ADC_Start+0x9a>
 80049ea:	4b4c      	ldr	r3, [pc, #304]	@ (8004b1c <HAL_ADC_Start+0x1c4>)
 80049ec:	e001      	b.n	80049f2 <HAL_ADC_Start+0x9a>
 80049ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6812      	ldr	r2, [r2, #0]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d002      	beq.n	8004a00 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d105      	bne.n	8004a0c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a04:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a18:	d106      	bne.n	8004a28 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1e:	f023 0206 	bic.w	r2, r3, #6
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a26:	e002      	b.n	8004a2e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	221c      	movs	r2, #28
 8004a34:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a32      	ldr	r2, [pc, #200]	@ (8004b0c <HAL_ADC_Start+0x1b4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d009      	beq.n	8004a5c <HAL_ADC_Start+0x104>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a32      	ldr	r2, [pc, #200]	@ (8004b18 <HAL_ADC_Start+0x1c0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d002      	beq.n	8004a58 <HAL_ADC_Start+0x100>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	e003      	b.n	8004a60 <HAL_ADC_Start+0x108>
 8004a58:	4b30      	ldr	r3, [pc, #192]	@ (8004b1c <HAL_ADC_Start+0x1c4>)
 8004a5a:	e001      	b.n	8004a60 <HAL_ADC_Start+0x108>
 8004a5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d008      	beq.n	8004a7a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	2b05      	cmp	r3, #5
 8004a72:	d002      	beq.n	8004a7a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	2b09      	cmp	r3, #9
 8004a78:	d114      	bne.n	8004aa4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d007      	beq.n	8004a98 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fd64 	bl	800456a <LL_ADC_REG_StartConversion>
 8004aa2:	e02d      	b.n	8004b00 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	@ (8004b0c <HAL_ADC_Start+0x1b4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d009      	beq.n	8004ace <HAL_ADC_Start+0x176>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a16      	ldr	r2, [pc, #88]	@ (8004b18 <HAL_ADC_Start+0x1c0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d002      	beq.n	8004aca <HAL_ADC_Start+0x172>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	e003      	b.n	8004ad2 <HAL_ADC_Start+0x17a>
 8004aca:	4b14      	ldr	r3, [pc, #80]	@ (8004b1c <HAL_ADC_Start+0x1c4>)
 8004acc:	e001      	b.n	8004ad2 <HAL_ADC_Start+0x17a>
 8004ace:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ad2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00f      	beq.n	8004b00 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004ae8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004af0:	e006      	b.n	8004b00 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004afa:	e001      	b.n	8004b00 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004afc:	2302      	movs	r3, #2
 8004afe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	50000100 	.word	0x50000100
 8004b10:	50000300 	.word	0x50000300
 8004b14:	50000700 	.word	0x50000700
 8004b18:	50000500 	.word	0x50000500
 8004b1c:	50000400 	.word	0x50000400

08004b20 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b0b6      	sub	sp, #216	@ 0xd8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d102      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x24>
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	f000 bc13 	b.w	8005386 <HAL_ADC_ConfigChannel+0x84a>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fd10 	bl	8004592 <LL_ADC_REG_IsConversionOngoing>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f040 83f3 	bne.w	8005360 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	f7ff fbf0 	bl	800436c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff fcfe 	bl	8004592 <LL_ADC_REG_IsConversionOngoing>
 8004b96:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fd0a 	bl	80045b8 <LL_ADC_INJ_IsConversionOngoing>
 8004ba4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ba8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f040 81d9 	bne.w	8004f64 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f040 81d4 	bne.w	8004f64 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bc4:	d10f      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f7ff fbf7 	bl	80043c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fbb1 	bl	8004346 <LL_ADC_SetSamplingTimeCommonConfig>
 8004be4:	e00e      	b.n	8004c04 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6818      	ldr	r0, [r3, #0]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6819      	ldr	r1, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7ff fbe6 	bl	80043c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7ff fba1 	bl	8004346 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	08db      	lsrs	r3, r3, #3
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d022      	beq.n	8004c6c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6919      	ldr	r1, [r3, #16]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c36:	f7ff fafb 	bl	8004230 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6919      	ldr	r1, [r3, #16]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f7ff fb47 	bl	80042da <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d102      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x126>
 8004c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c60:	e000      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x128>
 8004c62:	2300      	movs	r3, #0
 8004c64:	461a      	mov	r2, r3
 8004c66:	f7ff fb53 	bl	8004310 <LL_ADC_SetOffsetSaturation>
 8004c6a:	e17b      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fb00 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x15c>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff faf5 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	0e9b      	lsrs	r3, r3, #26
 8004c92:	f003 021f 	and.w	r2, r3, #31
 8004c96:	e01e      	b.n	8004cd6 <HAL_ADC_ConfigChannel+0x19a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff faea 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004caa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004cae:	fa93 f3a3 	rbit	r3, r3
 8004cb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	e004      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d105      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x1b2>
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	0e9b      	lsrs	r3, r3, #26
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	e018      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x1e4>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cfa:	fa93 f3a3 	rbit	r3, r3
 8004cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004d02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004d0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004d12:	2320      	movs	r3, #32
 8004d14:	e004      	b.n	8004d20 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004d16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d1a:	fab3 f383 	clz	r3, r3
 8004d1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d106      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fab9 	bl	80042a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2101      	movs	r1, #1
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fa9d 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x222>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fa92 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	0e9b      	lsrs	r3, r3, #26
 8004d58:	f003 021f 	and.w	r2, r3, #31
 8004d5c:	e01e      	b.n	8004d9c <HAL_ADC_ConfigChannel+0x260>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2101      	movs	r1, #1
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fa87 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d74:	fa93 f3a3 	rbit	r3, r3
 8004d78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004d7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004d84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	e004      	b.n	8004d9a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d94:	fab3 f383 	clz	r3, r3
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x278>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	0e9b      	lsrs	r3, r3, #26
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	e018      	b.n	8004de6 <HAL_ADC_ConfigChannel+0x2aa>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004dc0:	fa93 f3a3 	rbit	r3, r3
 8004dc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004dc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004dd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004dd8:	2320      	movs	r3, #32
 8004dda:	e004      	b.n	8004de6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004de0:	fab3 f383 	clz	r3, r3
 8004de4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d106      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	2101      	movs	r1, #1
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff fa56 	bl	80042a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fa3a 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10a      	bne.n	8004e24 <HAL_ADC_ConfigChannel+0x2e8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2102      	movs	r1, #2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fa2f 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	0e9b      	lsrs	r3, r3, #26
 8004e1e:	f003 021f 	and.w	r2, r3, #31
 8004e22:	e01e      	b.n	8004e62 <HAL_ADC_ConfigChannel+0x326>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fa24 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e3a:	fa93 f3a3 	rbit	r3, r3
 8004e3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004e52:	2320      	movs	r3, #32
 8004e54:	e004      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e5a:	fab3 f383 	clz	r3, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x33e>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	0e9b      	lsrs	r3, r3, #26
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	e016      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x36c>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e86:	fa93 f3a3 	rbit	r3, r3
 8004e8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e9a:	2320      	movs	r3, #32
 8004e9c:	e004      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ea2:	fab3 f383 	clz	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d106      	bne.n	8004eba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f9f5 	bl	80042a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2103      	movs	r1, #3
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff f9d9 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x3aa>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2103      	movs	r1, #3
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff f9ce 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004edc:	4603      	mov	r3, r0
 8004ede:	0e9b      	lsrs	r3, r3, #26
 8004ee0:	f003 021f 	and.w	r2, r3, #31
 8004ee4:	e017      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x3da>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2103      	movs	r1, #3
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff f9c3 	bl	8004278 <LL_ADC_GetOffsetChannel>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef8:	fa93 f3a3 	rbit	r3, r3
 8004efc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004efe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f00:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004f08:	2320      	movs	r3, #32
 8004f0a:	e003      	b.n	8004f14 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x3f2>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	0e9b      	lsrs	r3, r3, #26
 8004f28:	f003 031f 	and.w	r3, r3, #31
 8004f2c:	e011      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x416>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f36:	fa93 f3a3 	rbit	r3, r3
 8004f3a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004f3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004f46:	2320      	movs	r3, #32
 8004f48:	e003      	b.n	8004f52 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4c:	fab3 f383 	clz	r3, r3
 8004f50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d106      	bne.n	8004f64 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	2103      	movs	r1, #3
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff f9a0 	bl	80042a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff faeb 	bl	8004544 <LL_ADC_IsEnabled>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 813d 	bne.w	80051f0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	6819      	ldr	r1, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7ff fa4a 	bl	800441c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4aa2      	ldr	r2, [pc, #648]	@ (8005218 <HAL_ADC_ConfigChannel+0x6dc>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f040 812e 	bne.w	80051f0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d10b      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x480>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	0e9b      	lsrs	r3, r3, #26
 8004faa:	3301      	adds	r3, #1
 8004fac:	f003 031f 	and.w	r3, r3, #31
 8004fb0:	2b09      	cmp	r3, #9
 8004fb2:	bf94      	ite	ls
 8004fb4:	2301      	movls	r3, #1
 8004fb6:	2300      	movhi	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e019      	b.n	8004ff0 <HAL_ADC_ConfigChannel+0x4b4>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc4:	fa93 f3a3 	rbit	r3, r3
 8004fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004fca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004fcc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004fce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	e003      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004fd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fda:	fab3 f383 	clz	r3, r3
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	f003 031f 	and.w	r3, r3, #31
 8004fe6:	2b09      	cmp	r3, #9
 8004fe8:	bf94      	ite	ls
 8004fea:	2301      	movls	r3, #1
 8004fec:	2300      	movhi	r3, #0
 8004fee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d079      	beq.n	80050e8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_ADC_ConfigChannel+0x4d4>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	0e9b      	lsrs	r3, r3, #26
 8005006:	3301      	adds	r3, #1
 8005008:	069b      	lsls	r3, r3, #26
 800500a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800500e:	e015      	b.n	800503c <HAL_ADC_ConfigChannel+0x500>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005018:	fa93 f3a3 	rbit	r3, r3
 800501c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800501e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005020:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005028:	2320      	movs	r3, #32
 800502a:	e003      	b.n	8005034 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800502c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502e:	fab3 f383 	clz	r3, r3
 8005032:	b2db      	uxtb	r3, r3
 8005034:	3301      	adds	r3, #1
 8005036:	069b      	lsls	r3, r3, #26
 8005038:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005044:	2b00      	cmp	r3, #0
 8005046:	d109      	bne.n	800505c <HAL_ADC_ConfigChannel+0x520>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	0e9b      	lsrs	r3, r3, #26
 800504e:	3301      	adds	r3, #1
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	2101      	movs	r1, #1
 8005056:	fa01 f303 	lsl.w	r3, r1, r3
 800505a:	e017      	b.n	800508c <HAL_ADC_ConfigChannel+0x550>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005064:	fa93 f3a3 	rbit	r3, r3
 8005068:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800506a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800506c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800506e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005074:	2320      	movs	r3, #32
 8005076:	e003      	b.n	8005080 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005078:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800507a:	fab3 f383 	clz	r3, r3
 800507e:	b2db      	uxtb	r3, r3
 8005080:	3301      	adds	r3, #1
 8005082:	f003 031f 	and.w	r3, r3, #31
 8005086:	2101      	movs	r1, #1
 8005088:	fa01 f303 	lsl.w	r3, r1, r3
 800508c:	ea42 0103 	orr.w	r1, r2, r3
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x576>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	0e9b      	lsrs	r3, r3, #26
 80050a2:	3301      	adds	r3, #1
 80050a4:	f003 021f 	and.w	r2, r3, #31
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	051b      	lsls	r3, r3, #20
 80050b0:	e018      	b.n	80050e4 <HAL_ADC_ConfigChannel+0x5a8>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80050c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80050c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80050ca:	2320      	movs	r3, #32
 80050cc:	e003      	b.n	80050d6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80050ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d0:	fab3 f383 	clz	r3, r3
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	3301      	adds	r3, #1
 80050d8:	f003 021f 	and.w	r2, r3, #31
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050e4:	430b      	orrs	r3, r1
 80050e6:	e07e      	b.n	80051e6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d107      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x5c8>
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	0e9b      	lsrs	r3, r3, #26
 80050fa:	3301      	adds	r3, #1
 80050fc:	069b      	lsls	r3, r3, #26
 80050fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005102:	e015      	b.n	8005130 <HAL_ADC_ConfigChannel+0x5f4>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510c:	fa93 f3a3 	rbit	r3, r3
 8005110:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005114:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800511c:	2320      	movs	r3, #32
 800511e:	e003      	b.n	8005128 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005122:	fab3 f383 	clz	r3, r3
 8005126:	b2db      	uxtb	r3, r3
 8005128:	3301      	adds	r3, #1
 800512a:	069b      	lsls	r3, r3, #26
 800512c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <HAL_ADC_ConfigChannel+0x614>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	0e9b      	lsrs	r3, r3, #26
 8005142:	3301      	adds	r3, #1
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	2101      	movs	r1, #1
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	e017      	b.n	8005180 <HAL_ADC_ConfigChannel+0x644>
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	fa93 f3a3 	rbit	r3, r3
 800515c:	61fb      	str	r3, [r7, #28]
  return result;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005168:	2320      	movs	r3, #32
 800516a:	e003      	b.n	8005174 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800516c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516e:	fab3 f383 	clz	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3301      	adds	r3, #1
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	ea42 0103 	orr.w	r1, r2, r3
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <HAL_ADC_ConfigChannel+0x670>
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	0e9b      	lsrs	r3, r3, #26
 8005196:	3301      	adds	r3, #1
 8005198:	f003 021f 	and.w	r2, r3, #31
 800519c:	4613      	mov	r3, r2
 800519e:	005b      	lsls	r3, r3, #1
 80051a0:	4413      	add	r3, r2
 80051a2:	3b1e      	subs	r3, #30
 80051a4:	051b      	lsls	r3, r3, #20
 80051a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80051aa:	e01b      	b.n	80051e4 <HAL_ADC_ConfigChannel+0x6a8>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	fa93 f3a3 	rbit	r3, r3
 80051b8:	613b      	str	r3, [r7, #16]
  return result;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80051c4:	2320      	movs	r3, #32
 80051c6:	e003      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	fab3 f383 	clz	r3, r3
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	3301      	adds	r3, #1
 80051d2:	f003 021f 	and.w	r2, r3, #31
 80051d6:	4613      	mov	r3, r2
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4413      	add	r3, r2
 80051dc:	3b1e      	subs	r3, #30
 80051de:	051b      	lsls	r3, r3, #20
 80051e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051ea:	4619      	mov	r1, r3
 80051ec:	f7ff f8ea 	bl	80043c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b09      	ldr	r3, [pc, #36]	@ (800521c <HAL_ADC_ConfigChannel+0x6e0>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80be 	beq.w	800537a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005206:	d004      	beq.n	8005212 <HAL_ADC_ConfigChannel+0x6d6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a04      	ldr	r2, [pc, #16]	@ (8005220 <HAL_ADC_ConfigChannel+0x6e4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10a      	bne.n	8005228 <HAL_ADC_ConfigChannel+0x6ec>
 8005212:	4b04      	ldr	r3, [pc, #16]	@ (8005224 <HAL_ADC_ConfigChannel+0x6e8>)
 8005214:	e009      	b.n	800522a <HAL_ADC_ConfigChannel+0x6ee>
 8005216:	bf00      	nop
 8005218:	407f0000 	.word	0x407f0000
 800521c:	80080000 	.word	0x80080000
 8005220:	50000100 	.word	0x50000100
 8005224:	50000300 	.word	0x50000300
 8005228:	4b59      	ldr	r3, [pc, #356]	@ (8005390 <HAL_ADC_ConfigChannel+0x854>)
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe fff2 	bl	8004214 <LL_ADC_GetCommonPathInternalCh>
 8005230:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a56      	ldr	r2, [pc, #344]	@ (8005394 <HAL_ADC_ConfigChannel+0x858>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_ADC_ConfigChannel+0x70c>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a55      	ldr	r2, [pc, #340]	@ (8005398 <HAL_ADC_ConfigChannel+0x85c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d13a      	bne.n	80052be <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800524c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d134      	bne.n	80052be <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800525c:	d005      	beq.n	800526a <HAL_ADC_ConfigChannel+0x72e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a4e      	ldr	r2, [pc, #312]	@ (800539c <HAL_ADC_ConfigChannel+0x860>)
 8005264:	4293      	cmp	r3, r2
 8005266:	f040 8085 	bne.w	8005374 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005272:	d004      	beq.n	800527e <HAL_ADC_ConfigChannel+0x742>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a49      	ldr	r2, [pc, #292]	@ (80053a0 <HAL_ADC_ConfigChannel+0x864>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d101      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x746>
 800527e:	4a49      	ldr	r2, [pc, #292]	@ (80053a4 <HAL_ADC_ConfigChannel+0x868>)
 8005280:	e000      	b.n	8005284 <HAL_ADC_ConfigChannel+0x748>
 8005282:	4a43      	ldr	r2, [pc, #268]	@ (8005390 <HAL_ADC_ConfigChannel+0x854>)
 8005284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005288:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f7fe ffad 	bl	80041ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005294:	4b44      	ldr	r3, [pc, #272]	@ (80053a8 <HAL_ADC_ConfigChannel+0x86c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	4a44      	ldr	r2, [pc, #272]	@ (80053ac <HAL_ADC_ConfigChannel+0x870>)
 800529c:	fba2 2303 	umull	r2, r3, r2, r3
 80052a0:	099b      	lsrs	r3, r3, #6
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	4613      	mov	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052ae:	e002      	b.n	80052b6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1f9      	bne.n	80052b0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052bc:	e05a      	b.n	8005374 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3b      	ldr	r2, [pc, #236]	@ (80053b0 <HAL_ADC_ConfigChannel+0x874>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d125      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11f      	bne.n	8005314 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a31      	ldr	r2, [pc, #196]	@ (80053a0 <HAL_ADC_ConfigChannel+0x864>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d104      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x7ac>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a34      	ldr	r2, [pc, #208]	@ (80053b4 <HAL_ADC_ConfigChannel+0x878>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d047      	beq.n	8005378 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052f0:	d004      	beq.n	80052fc <HAL_ADC_ConfigChannel+0x7c0>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a2a      	ldr	r2, [pc, #168]	@ (80053a0 <HAL_ADC_ConfigChannel+0x864>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d101      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x7c4>
 80052fc:	4a29      	ldr	r2, [pc, #164]	@ (80053a4 <HAL_ADC_ConfigChannel+0x868>)
 80052fe:	e000      	b.n	8005302 <HAL_ADC_ConfigChannel+0x7c6>
 8005300:	4a23      	ldr	r2, [pc, #140]	@ (8005390 <HAL_ADC_ConfigChannel+0x854>)
 8005302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005306:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800530a:	4619      	mov	r1, r3
 800530c:	4610      	mov	r0, r2
 800530e:	f7fe ff6e 	bl	80041ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005312:	e031      	b.n	8005378 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a27      	ldr	r2, [pc, #156]	@ (80053b8 <HAL_ADC_ConfigChannel+0x87c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d12d      	bne.n	800537a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800531e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d127      	bne.n	800537a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <HAL_ADC_ConfigChannel+0x864>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d022      	beq.n	800537a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800533c:	d004      	beq.n	8005348 <HAL_ADC_ConfigChannel+0x80c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a17      	ldr	r2, [pc, #92]	@ (80053a0 <HAL_ADC_ConfigChannel+0x864>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d101      	bne.n	800534c <HAL_ADC_ConfigChannel+0x810>
 8005348:	4a16      	ldr	r2, [pc, #88]	@ (80053a4 <HAL_ADC_ConfigChannel+0x868>)
 800534a:	e000      	b.n	800534e <HAL_ADC_ConfigChannel+0x812>
 800534c:	4a10      	ldr	r2, [pc, #64]	@ (8005390 <HAL_ADC_ConfigChannel+0x854>)
 800534e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005352:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005356:	4619      	mov	r1, r3
 8005358:	4610      	mov	r0, r2
 800535a:	f7fe ff48 	bl	80041ee <LL_ADC_SetCommonPathInternalCh>
 800535e:	e00c      	b.n	800537a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005364:	f043 0220 	orr.w	r2, r3, #32
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005372:	e002      	b.n	800537a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005378:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005382:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005386:	4618      	mov	r0, r3
 8005388:	37d8      	adds	r7, #216	@ 0xd8
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	50000700 	.word	0x50000700
 8005394:	c3210000 	.word	0xc3210000
 8005398:	90c00010 	.word	0x90c00010
 800539c:	50000600 	.word	0x50000600
 80053a0:	50000100 	.word	0x50000100
 80053a4:	50000300 	.word	0x50000300
 80053a8:	20000200 	.word	0x20000200
 80053ac:	053e2d63 	.word	0x053e2d63
 80053b0:	c7520000 	.word	0xc7520000
 80053b4:	50000500 	.word	0x50000500
 80053b8:	cb840000 	.word	0xcb840000

080053bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff f8b9 	bl	8004544 <LL_ADC_IsEnabled>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d176      	bne.n	80054c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	4b3c      	ldr	r3, [pc, #240]	@ (80054d0 <ADC_Enable+0x114>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ea:	f043 0210 	orr.w	r2, r3, #16
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f6:	f043 0201 	orr.w	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e062      	b.n	80054c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff f888 	bl	800451c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005414:	d004      	beq.n	8005420 <ADC_Enable+0x64>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a2e      	ldr	r2, [pc, #184]	@ (80054d4 <ADC_Enable+0x118>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d101      	bne.n	8005424 <ADC_Enable+0x68>
 8005420:	4b2d      	ldr	r3, [pc, #180]	@ (80054d8 <ADC_Enable+0x11c>)
 8005422:	e000      	b.n	8005426 <ADC_Enable+0x6a>
 8005424:	4b2d      	ldr	r3, [pc, #180]	@ (80054dc <ADC_Enable+0x120>)
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fef4 	bl	8004214 <LL_ADC_GetCommonPathInternalCh>
 800542c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800542e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005436:	4b2a      	ldr	r3, [pc, #168]	@ (80054e0 <ADC_Enable+0x124>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	099b      	lsrs	r3, r3, #6
 800543c:	4a29      	ldr	r2, [pc, #164]	@ (80054e4 <ADC_Enable+0x128>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	099b      	lsrs	r3, r3, #6
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	4613      	mov	r3, r2
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005450:	e002      	b.n	8005458 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	3b01      	subs	r3, #1
 8005456:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f9      	bne.n	8005452 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800545e:	f7fe fea7 	bl	80041b0 <HAL_GetTick>
 8005462:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005464:	e028      	b.n	80054b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff f86a 	bl	8004544 <LL_ADC_IsEnabled>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff f84e 	bl	800451c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005480:	f7fe fe96 	bl	80041b0 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d914      	bls.n	80054b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d00d      	beq.n	80054b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a0:	f043 0210 	orr.w	r2, r3, #16
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ac:	f043 0201 	orr.w	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e007      	b.n	80054c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d1cf      	bne.n	8005466 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	8000003f 	.word	0x8000003f
 80054d4:	50000100 	.word	0x50000100
 80054d8:	50000300 	.word	0x50000300
 80054dc:	50000700 	.word	0x50000700
 80054e0:	20000200 	.word	0x20000200
 80054e4:	053e2d63 	.word	0x053e2d63

080054e8 <LL_ADC_IsEnabled>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0301 	and.w	r3, r3, #1
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <LL_ADC_IsEnabled+0x18>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <LL_ADC_IsEnabled+0x1a>
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_ADC_REG_IsConversionOngoing>:
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0304 	and.w	r3, r3, #4
 800551e:	2b04      	cmp	r3, #4
 8005520:	d101      	bne.n	8005526 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b0a1      	sub	sp, #132	@ 0x84
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800553e:	2300      	movs	r3, #0
 8005540:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800554e:	2302      	movs	r3, #2
 8005550:	e0e7      	b.n	8005722 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800555a:	2300      	movs	r3, #0
 800555c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800555e:	2300      	movs	r3, #0
 8005560:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800556a:	d102      	bne.n	8005572 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800556c:	4b6f      	ldr	r3, [pc, #444]	@ (800572c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800556e:	60bb      	str	r3, [r7, #8]
 8005570:	e009      	b.n	8005586 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a6e      	ldr	r2, [pc, #440]	@ (8005730 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d102      	bne.n	8005582 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800557c:	4b6d      	ldr	r3, [pc, #436]	@ (8005734 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800557e:	60bb      	str	r3, [r7, #8]
 8005580:	e001      	b.n	8005586 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10b      	bne.n	80055a4 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005590:	f043 0220 	orr.w	r2, r3, #32
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0be      	b.n	8005722 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff ffb1 	bl	800550e <LL_ADC_REG_IsConversionOngoing>
 80055ac:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff ffab 	bl	800550e <LL_ADC_REG_IsConversionOngoing>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 80a0 	bne.w	8005700 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80055c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f040 809c 	bne.w	8005700 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055d0:	d004      	beq.n	80055dc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a55      	ldr	r2, [pc, #340]	@ (800572c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d101      	bne.n	80055e0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80055dc:	4b56      	ldr	r3, [pc, #344]	@ (8005738 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80055de:	e000      	b.n	80055e2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80055e0:	4b56      	ldr	r3, [pc, #344]	@ (800573c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80055e2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d04b      	beq.n	8005684 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80055ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80055fe:	035b      	lsls	r3, r3, #13
 8005600:	430b      	orrs	r3, r1
 8005602:	431a      	orrs	r2, r3
 8005604:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005606:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005610:	d004      	beq.n	800561c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a45      	ldr	r2, [pc, #276]	@ (800572c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d10f      	bne.n	800563c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800561c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005620:	f7ff ff62 	bl	80054e8 <LL_ADC_IsEnabled>
 8005624:	4604      	mov	r4, r0
 8005626:	4841      	ldr	r0, [pc, #260]	@ (800572c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005628:	f7ff ff5e 	bl	80054e8 <LL_ADC_IsEnabled>
 800562c:	4603      	mov	r3, r0
 800562e:	4323      	orrs	r3, r4
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf0c      	ite	eq
 8005634:	2301      	moveq	r3, #1
 8005636:	2300      	movne	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e012      	b.n	8005662 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800563c:	483c      	ldr	r0, [pc, #240]	@ (8005730 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800563e:	f7ff ff53 	bl	80054e8 <LL_ADC_IsEnabled>
 8005642:	4604      	mov	r4, r0
 8005644:	483b      	ldr	r0, [pc, #236]	@ (8005734 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005646:	f7ff ff4f 	bl	80054e8 <LL_ADC_IsEnabled>
 800564a:	4603      	mov	r3, r0
 800564c:	431c      	orrs	r4, r3
 800564e:	483c      	ldr	r0, [pc, #240]	@ (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005650:	f7ff ff4a 	bl	80054e8 <LL_ADC_IsEnabled>
 8005654:	4603      	mov	r3, r0
 8005656:	4323      	orrs	r3, r4
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf0c      	ite	eq
 800565c:	2301      	moveq	r3, #1
 800565e:	2300      	movne	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d056      	beq.n	8005714 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005666:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800566e:	f023 030f 	bic.w	r3, r3, #15
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	6811      	ldr	r1, [r2, #0]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	6892      	ldr	r2, [r2, #8]
 800567a:	430a      	orrs	r2, r1
 800567c:	431a      	orrs	r2, r3
 800567e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005680:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005682:	e047      	b.n	8005714 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800568c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800568e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005698:	d004      	beq.n	80056a4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a23      	ldr	r2, [pc, #140]	@ (800572c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d10f      	bne.n	80056c4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80056a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80056a8:	f7ff ff1e 	bl	80054e8 <LL_ADC_IsEnabled>
 80056ac:	4604      	mov	r4, r0
 80056ae:	481f      	ldr	r0, [pc, #124]	@ (800572c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056b0:	f7ff ff1a 	bl	80054e8 <LL_ADC_IsEnabled>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4323      	orrs	r3, r4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf0c      	ite	eq
 80056bc:	2301      	moveq	r3, #1
 80056be:	2300      	movne	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	e012      	b.n	80056ea <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80056c4:	481a      	ldr	r0, [pc, #104]	@ (8005730 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80056c6:	f7ff ff0f 	bl	80054e8 <LL_ADC_IsEnabled>
 80056ca:	4604      	mov	r4, r0
 80056cc:	4819      	ldr	r0, [pc, #100]	@ (8005734 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80056ce:	f7ff ff0b 	bl	80054e8 <LL_ADC_IsEnabled>
 80056d2:	4603      	mov	r3, r0
 80056d4:	431c      	orrs	r4, r3
 80056d6:	481a      	ldr	r0, [pc, #104]	@ (8005740 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80056d8:	f7ff ff06 	bl	80054e8 <LL_ADC_IsEnabled>
 80056dc:	4603      	mov	r3, r0
 80056de:	4323      	orrs	r3, r4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d012      	beq.n	8005714 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80056f6:	f023 030f 	bic.w	r3, r3, #15
 80056fa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80056fc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80056fe:	e009      	b.n	8005714 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005712:	e000      	b.n	8005716 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005714:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800571e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005722:	4618      	mov	r0, r3
 8005724:	3784      	adds	r7, #132	@ 0x84
 8005726:	46bd      	mov	sp, r7
 8005728:	bd90      	pop	{r4, r7, pc}
 800572a:	bf00      	nop
 800572c:	50000100 	.word	0x50000100
 8005730:	50000400 	.word	0x50000400
 8005734:	50000500 	.word	0x50000500
 8005738:	50000300 	.word	0x50000300
 800573c:	50000700 	.word	0x50000700
 8005740:	50000600 	.word	0x50000600

08005744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005754:	4b0c      	ldr	r3, [pc, #48]	@ (8005788 <__NVIC_SetPriorityGrouping+0x44>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005760:	4013      	ands	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800576c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005776:	4a04      	ldr	r2, [pc, #16]	@ (8005788 <__NVIC_SetPriorityGrouping+0x44>)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	60d3      	str	r3, [r2, #12]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	e000ed00 	.word	0xe000ed00

0800578c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005790:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	f003 0307 	and.w	r3, r3, #7
}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	e000ed00 	.word	0xe000ed00

080057a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	db0b      	blt.n	80057d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	f003 021f 	and.w	r2, r3, #31
 80057c0:	4907      	ldr	r1, [pc, #28]	@ (80057e0 <__NVIC_EnableIRQ+0x38>)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2001      	movs	r0, #1
 80057ca:	fa00 f202 	lsl.w	r2, r0, r2
 80057ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000e100 	.word	0xe000e100

080057e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	6039      	str	r1, [r7, #0]
 80057ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db0a      	blt.n	800580e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	490c      	ldr	r1, [pc, #48]	@ (8005830 <__NVIC_SetPriority+0x4c>)
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	440b      	add	r3, r1
 8005808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800580c:	e00a      	b.n	8005824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4908      	ldr	r1, [pc, #32]	@ (8005834 <__NVIC_SetPriority+0x50>)
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	3b04      	subs	r3, #4
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	440b      	add	r3, r1
 8005822:	761a      	strb	r2, [r3, #24]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000e100 	.word	0xe000e100
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	@ 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f1c3 0307 	rsb	r3, r3, #7
 8005852:	2b04      	cmp	r3, #4
 8005854:	bf28      	it	cs
 8005856:	2304      	movcs	r3, #4
 8005858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3304      	adds	r3, #4
 800585e:	2b06      	cmp	r3, #6
 8005860:	d902      	bls.n	8005868 <NVIC_EncodePriority+0x30>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3b03      	subs	r3, #3
 8005866:	e000      	b.n	800586a <NVIC_EncodePriority+0x32>
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800586c:	f04f 32ff 	mov.w	r2, #4294967295
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	401a      	ands	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005880:	f04f 31ff 	mov.w	r1, #4294967295
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	43d9      	mvns	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005890:	4313      	orrs	r3, r2
         );
}
 8005892:	4618      	mov	r0, r3
 8005894:	3724      	adds	r7, #36	@ 0x24
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058b0:	d301      	bcc.n	80058b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058b2:	2301      	movs	r3, #1
 80058b4:	e00f      	b.n	80058d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058b6:	4a0a      	ldr	r2, [pc, #40]	@ (80058e0 <SysTick_Config+0x40>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058be:	210f      	movs	r1, #15
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	f7ff ff8e 	bl	80057e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c8:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <SysTick_Config+0x40>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ce:	4b04      	ldr	r3, [pc, #16]	@ (80058e0 <SysTick_Config+0x40>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	e000e010 	.word	0xe000e010

080058e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff ff29 	bl	8005744 <__NVIC_SetPriorityGrouping>
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	4603      	mov	r3, r0
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005908:	f7ff ff40 	bl	800578c <__NVIC_GetPriorityGrouping>
 800590c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	6978      	ldr	r0, [r7, #20]
 8005914:	f7ff ff90 	bl	8005838 <NVIC_EncodePriority>
 8005918:	4602      	mov	r2, r0
 800591a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ff5f 	bl	80057e4 <__NVIC_SetPriority>
}
 8005926:	bf00      	nop
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b082      	sub	sp, #8
 8005932:	af00      	add	r7, sp, #0
 8005934:	4603      	mov	r3, r0
 8005936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800593c:	4618      	mov	r0, r3
 800593e:	f7ff ff33 	bl	80057a8 <__NVIC_EnableIRQ>
}
 8005942:	bf00      	nop
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff ffa4 	bl	80058a0 <SysTick_Config>
 8005958:	4603      	mov	r3, r0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e08d      	b.n	8005a92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	4b47      	ldr	r3, [pc, #284]	@ (8005a9c <HAL_DMA_Init+0x138>)
 800597e:	429a      	cmp	r2, r3
 8005980:	d80f      	bhi.n	80059a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	4b45      	ldr	r3, [pc, #276]	@ (8005aa0 <HAL_DMA_Init+0x13c>)
 800598a:	4413      	add	r3, r2
 800598c:	4a45      	ldr	r2, [pc, #276]	@ (8005aa4 <HAL_DMA_Init+0x140>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	009a      	lsls	r2, r3, #2
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a42      	ldr	r2, [pc, #264]	@ (8005aa8 <HAL_DMA_Init+0x144>)
 800599e:	641a      	str	r2, [r3, #64]	@ 0x40
 80059a0:	e00e      	b.n	80059c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	4b40      	ldr	r3, [pc, #256]	@ (8005aac <HAL_DMA_Init+0x148>)
 80059aa:	4413      	add	r3, r2
 80059ac:	4a3d      	ldr	r2, [pc, #244]	@ (8005aa4 <HAL_DMA_Init+0x140>)
 80059ae:	fba2 2303 	umull	r2, r3, r2, r3
 80059b2:	091b      	lsrs	r3, r3, #4
 80059b4:	009a      	lsls	r2, r3, #2
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ab0 <HAL_DMA_Init+0x14c>)
 80059be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80059d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80059e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa82 	bl	8005f1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a20:	d102      	bne.n	8005a28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d010      	beq.n	8005a68 <HAL_DMA_Init+0x104>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d80c      	bhi.n	8005a68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 faa2 	bl	8005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a64:	605a      	str	r2, [r3, #4]
 8005a66:	e008      	b.n	8005a7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	40020407 	.word	0x40020407
 8005aa0:	bffdfff8 	.word	0xbffdfff8
 8005aa4:	cccccccd 	.word	0xcccccccd
 8005aa8:	40020000 	.word	0x40020000
 8005aac:	bffdfbf8 	.word	0xbffdfbf8
 8005ab0:	40020400 	.word	0x40020400

08005ab4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d101      	bne.n	8005ad4 <HAL_DMA_Start_IT+0x20>
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e066      	b.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d155      	bne.n	8005b94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	68f8      	ldr	r0, [r7, #12]
 8005b0e:	f000 f9c7 	bl	8005ea0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d008      	beq.n	8005b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 020e 	orr.w	r2, r2, #14
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	e00f      	b.n	8005b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0204 	bic.w	r2, r2, #4
 8005b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 020a 	orr.w	r2, r2, #10
 8005b4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d007      	beq.n	8005b82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e005      	b.n	8005ba0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b085      	sub	sp, #20
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d005      	beq.n	8005bce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
 8005bcc:	e037      	b.n	8005c3e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 020e 	bic.w	r2, r2, #14
 8005bdc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	f003 021f 	and.w	r2, r3, #31
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c10:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c1a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00c      	beq.n	8005c3e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c32:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c3c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d00d      	beq.n	8005c90 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2204      	movs	r2, #4
 8005c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
 8005c8e:	e047      	b.n	8005d20 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 020e 	bic.w	r2, r2, #14
 8005c9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cc4:	f003 021f 	and.w	r2, r3, #31
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ccc:	2101      	movs	r1, #1
 8005cce:	fa01 f202 	lsl.w	r2, r1, r2
 8005cd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cdc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cf4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005cfe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
    }
  }
  return status;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	2204      	movs	r2, #4
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d026      	beq.n	8005da4 <HAL_DMA_IRQHandler+0x7a>
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d021      	beq.n	8005da4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0320 	and.w	r3, r3, #32
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d107      	bne.n	8005d7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0204 	bic.w	r2, r2, #4
 8005d7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d82:	f003 021f 	and.w	r2, r3, #31
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8a:	2104      	movs	r1, #4
 8005d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d071      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005da2:	e06c      	b.n	8005e7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2202      	movs	r2, #2
 8005dae:	409a      	lsls	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d02e      	beq.n	8005e16 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d029      	beq.n	8005e16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0320 	and.w	r3, r3, #32
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 020a 	bic.w	r2, r2, #10
 8005dde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dec:	f003 021f 	and.w	r2, r3, #31
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	2102      	movs	r1, #2
 8005df6:	fa01 f202 	lsl.w	r2, r1, r2
 8005dfa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d038      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005e14:	e033      	b.n	8005e7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2208      	movs	r2, #8
 8005e20:	409a      	lsls	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4013      	ands	r3, r2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d02a      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f003 0308 	and.w	r3, r3, #8
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d025      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 020e 	bic.w	r2, r2, #14
 8005e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e48:	f003 021f 	and.w	r2, r3, #31
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e50:	2101      	movs	r1, #1
 8005e52:	fa01 f202 	lsl.w	r2, r1, r2
 8005e56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
}
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005eb6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ec8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ece:	f003 021f 	and.w	r2, r3, #31
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8005edc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	2b10      	cmp	r3, #16
 8005eec:	d108      	bne.n	8005f00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005efe:	e007      	b.n	8005f10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	60da      	str	r2, [r3, #12]
}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4b16      	ldr	r3, [pc, #88]	@ (8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d802      	bhi.n	8005f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005f30:	4b15      	ldr	r3, [pc, #84]	@ (8005f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e001      	b.n	8005f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005f36:	4b15      	ldr	r3, [pc, #84]	@ (8005f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005f38:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	3b08      	subs	r3, #8
 8005f46:	4a12      	ldr	r2, [pc, #72]	@ (8005f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	091b      	lsrs	r3, r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f54:	089b      	lsrs	r3, r3, #2
 8005f56:	009a      	lsls	r2, r3, #2
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a0b      	ldr	r2, [pc, #44]	@ (8005f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005f66:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2201      	movs	r2, #1
 8005f70:	409a      	lsls	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f76:	bf00      	nop
 8005f78:	371c      	adds	r7, #28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	40020407 	.word	0x40020407
 8005f88:	40020800 	.word	0x40020800
 8005f8c:	40020820 	.word	0x40020820
 8005f90:	cccccccd 	.word	0xcccccccd
 8005f94:	40020880 	.word	0x40020880

08005f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a08      	ldr	r2, [pc, #32]	@ (8005fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005fba:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	f003 031f 	and.w	r3, r3, #31
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	409a      	lsls	r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005fcc:	bf00      	nop
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	1000823f 	.word	0x1000823f
 8005fdc:	40020940 	.word	0x40020940

08005fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005fee:	e15a      	b.n	80062a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 814c 	beq.w	80062a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	2b01      	cmp	r3, #1
 8006012:	d005      	beq.n	8006020 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800601c:	2b02      	cmp	r3, #2
 800601e:	d130      	bne.n	8006082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	2203      	movs	r2, #3
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	43db      	mvns	r3, r3
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4013      	ands	r3, r2
 8006036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68da      	ldr	r2, [r3, #12]
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006056:	2201      	movs	r2, #1
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0201 	and.w	r2, r3, #1
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b03      	cmp	r3, #3
 800608c:	d017      	beq.n	80060be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	2203      	movs	r2, #3
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	693a      	ldr	r2, [r7, #16]
 80060a2:	4013      	ands	r3, r2
 80060a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689a      	ldr	r2, [r3, #8]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d123      	bne.n	8006112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	08da      	lsrs	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3208      	adds	r2, #8
 80060d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	220f      	movs	r2, #15
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	43db      	mvns	r3, r3
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	4013      	ands	r3, r2
 80060ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	08da      	lsrs	r2, r3, #3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3208      	adds	r2, #8
 800610c:	6939      	ldr	r1, [r7, #16]
 800610e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	2203      	movs	r2, #3
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	43db      	mvns	r3, r3
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 0203 	and.w	r2, r3, #3
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80a6 	beq.w	80062a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006154:	4b5b      	ldr	r3, [pc, #364]	@ (80062c4 <HAL_GPIO_Init+0x2e4>)
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	4a5a      	ldr	r2, [pc, #360]	@ (80062c4 <HAL_GPIO_Init+0x2e4>)
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006160:	4b58      	ldr	r3, [pc, #352]	@ (80062c4 <HAL_GPIO_Init+0x2e4>)
 8006162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	60bb      	str	r3, [r7, #8]
 800616a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800616c:	4a56      	ldr	r2, [pc, #344]	@ (80062c8 <HAL_GPIO_Init+0x2e8>)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	3302      	adds	r3, #2
 8006174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f003 0303 	and.w	r3, r3, #3
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	220f      	movs	r2, #15
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4013      	ands	r3, r2
 800618e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006196:	d01f      	beq.n	80061d8 <HAL_GPIO_Init+0x1f8>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a4c      	ldr	r2, [pc, #304]	@ (80062cc <HAL_GPIO_Init+0x2ec>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d019      	beq.n	80061d4 <HAL_GPIO_Init+0x1f4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a4b      	ldr	r2, [pc, #300]	@ (80062d0 <HAL_GPIO_Init+0x2f0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d013      	beq.n	80061d0 <HAL_GPIO_Init+0x1f0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a4a      	ldr	r2, [pc, #296]	@ (80062d4 <HAL_GPIO_Init+0x2f4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d00d      	beq.n	80061cc <HAL_GPIO_Init+0x1ec>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a49      	ldr	r2, [pc, #292]	@ (80062d8 <HAL_GPIO_Init+0x2f8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <HAL_GPIO_Init+0x1e8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a48      	ldr	r2, [pc, #288]	@ (80062dc <HAL_GPIO_Init+0x2fc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d101      	bne.n	80061c4 <HAL_GPIO_Init+0x1e4>
 80061c0:	2305      	movs	r3, #5
 80061c2:	e00a      	b.n	80061da <HAL_GPIO_Init+0x1fa>
 80061c4:	2306      	movs	r3, #6
 80061c6:	e008      	b.n	80061da <HAL_GPIO_Init+0x1fa>
 80061c8:	2304      	movs	r3, #4
 80061ca:	e006      	b.n	80061da <HAL_GPIO_Init+0x1fa>
 80061cc:	2303      	movs	r3, #3
 80061ce:	e004      	b.n	80061da <HAL_GPIO_Init+0x1fa>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e002      	b.n	80061da <HAL_GPIO_Init+0x1fa>
 80061d4:	2301      	movs	r3, #1
 80061d6:	e000      	b.n	80061da <HAL_GPIO_Init+0x1fa>
 80061d8:	2300      	movs	r3, #0
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	f002 0203 	and.w	r2, r2, #3
 80061e0:	0092      	lsls	r2, r2, #2
 80061e2:	4093      	lsls	r3, r2
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061ea:	4937      	ldr	r1, [pc, #220]	@ (80062c8 <HAL_GPIO_Init+0x2e8>)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	3302      	adds	r3, #2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061f8:	4b39      	ldr	r3, [pc, #228]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	43db      	mvns	r3, r3
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800621c:	4a30      	ldr	r2, [pc, #192]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006222:	4b2f      	ldr	r3, [pc, #188]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	43db      	mvns	r3, r3
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4013      	ands	r3, r2
 8006230:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006246:	4a26      	ldr	r2, [pc, #152]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800624c:	4b24      	ldr	r3, [pc, #144]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	43db      	mvns	r3, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4013      	ands	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006268:	693a      	ldr	r2, [r7, #16]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006270:	4a1b      	ldr	r2, [pc, #108]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006276:	4b1a      	ldr	r3, [pc, #104]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	43db      	mvns	r3, r3
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	4013      	ands	r3, r2
 8006284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800629a:	4a11      	ldr	r2, [pc, #68]	@ (80062e0 <HAL_GPIO_Init+0x300>)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	3301      	adds	r3, #1
 80062a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f47f ae9d 	bne.w	8005ff0 <HAL_GPIO_Init+0x10>
  }
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	371c      	adds	r7, #28
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	40021000 	.word	0x40021000
 80062c8:	40010000 	.word	0x40010000
 80062cc:	48000400 	.word	0x48000400
 80062d0:	48000800 	.word	0x48000800
 80062d4:	48000c00 	.word	0x48000c00
 80062d8:	48001000 	.word	0x48001000
 80062dc:	48001400 	.word	0x48001400
 80062e0:	40010400 	.word	0x40010400

080062e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	807b      	strh	r3, [r7, #2]
 80062f0:	4613      	mov	r3, r2
 80062f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062f4:	787b      	ldrb	r3, [r7, #1]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80062fa:	887a      	ldrh	r2, [r7, #2]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006300:	e002      	b.n	8006308 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006302:	887a      	ldrh	r2, [r7, #2]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800631e:	4b08      	ldr	r3, [pc, #32]	@ (8006340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006320:	695a      	ldr	r2, [r3, #20]
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	4013      	ands	r3, r2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800632a:	4a05      	ldr	r2, [pc, #20]	@ (8006340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	4618      	mov	r0, r3
 8006334:	f7fc ff6c 	bl	8003210 <HAL_GPIO_EXTI_Callback>
  }
}
 8006338:	bf00      	nop
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40010400 	.word	0x40010400

08006344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d141      	bne.n	80063d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006352:	4b4b      	ldr	r3, [pc, #300]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800635e:	d131      	bne.n	80063c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006360:	4b47      	ldr	r3, [pc, #284]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006366:	4a46      	ldr	r2, [pc, #280]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800636c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006370:	4b43      	ldr	r3, [pc, #268]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006378:	4a41      	ldr	r2, [pc, #260]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800637e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006380:	4b40      	ldr	r3, [pc, #256]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2232      	movs	r2, #50	@ 0x32
 8006386:	fb02 f303 	mul.w	r3, r2, r3
 800638a:	4a3f      	ldr	r2, [pc, #252]	@ (8006488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	0c9b      	lsrs	r3, r3, #18
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006396:	e002      	b.n	800639e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3b01      	subs	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800639e:	4b38      	ldr	r3, [pc, #224]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063aa:	d102      	bne.n	80063b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f2      	bne.n	8006398 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063b2:	4b33      	ldr	r3, [pc, #204]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063be:	d158      	bne.n	8006472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063c0:	2303      	movs	r3, #3
 80063c2:	e057      	b.n	8006474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ca:	4a2d      	ldr	r2, [pc, #180]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063d4:	e04d      	b.n	8006472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063dc:	d141      	bne.n	8006462 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063de:	4b28      	ldr	r3, [pc, #160]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ea:	d131      	bne.n	8006450 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063ec:	4b24      	ldr	r3, [pc, #144]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063f2:	4a23      	ldr	r2, [pc, #140]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063fc:	4b20      	ldr	r3, [pc, #128]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006404:	4a1e      	ldr	r2, [pc, #120]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800640a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800640c:	4b1d      	ldr	r3, [pc, #116]	@ (8006484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2232      	movs	r2, #50	@ 0x32
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	4a1c      	ldr	r2, [pc, #112]	@ (8006488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006418:	fba2 2303 	umull	r2, r3, r2, r3
 800641c:	0c9b      	lsrs	r3, r3, #18
 800641e:	3301      	adds	r3, #1
 8006420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006422:	e002      	b.n	800642a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3b01      	subs	r3, #1
 8006428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800642a:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006436:	d102      	bne.n	800643e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1f2      	bne.n	8006424 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800643e:	4b10      	ldr	r3, [pc, #64]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644a:	d112      	bne.n	8006472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e011      	b.n	8006474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006450:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006456:	4a0a      	ldr	r2, [pc, #40]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800645c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006460:	e007      	b.n	8006472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006462:	4b07      	ldr	r3, [pc, #28]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800646a:	4a05      	ldr	r2, [pc, #20]	@ (8006480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006470:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40007000 	.word	0x40007000
 8006484:	20000200 	.word	0x20000200
 8006488:	431bde83 	.word	0x431bde83

0800648c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006490:	4b05      	ldr	r3, [pc, #20]	@ (80064a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	4a04      	ldr	r2, [pc, #16]	@ (80064a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800649a:	6093      	str	r3, [r2, #8]
}
 800649c:	bf00      	nop
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40007000 	.word	0x40007000

080064ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e2fe      	b.n	8006abc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d075      	beq.n	80065b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ca:	4b97      	ldr	r3, [pc, #604]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 030c 	and.w	r3, r3, #12
 80064d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064d4:	4b94      	ldr	r3, [pc, #592]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0303 	and.w	r3, r3, #3
 80064dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b0c      	cmp	r3, #12
 80064e2:	d102      	bne.n	80064ea <HAL_RCC_OscConfig+0x3e>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	d002      	beq.n	80064f0 <HAL_RCC_OscConfig+0x44>
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d10b      	bne.n	8006508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f0:	4b8d      	ldr	r3, [pc, #564]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d05b      	beq.n	80065b4 <HAL_RCC_OscConfig+0x108>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d157      	bne.n	80065b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e2d9      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006510:	d106      	bne.n	8006520 <HAL_RCC_OscConfig+0x74>
 8006512:	4b85      	ldr	r3, [pc, #532]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a84      	ldr	r2, [pc, #528]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e01d      	b.n	800655c <HAL_RCC_OscConfig+0xb0>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006528:	d10c      	bne.n	8006544 <HAL_RCC_OscConfig+0x98>
 800652a:	4b7f      	ldr	r3, [pc, #508]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a7e      	ldr	r2, [pc, #504]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4b7c      	ldr	r3, [pc, #496]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a7b      	ldr	r2, [pc, #492]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 800653c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e00b      	b.n	800655c <HAL_RCC_OscConfig+0xb0>
 8006544:	4b78      	ldr	r3, [pc, #480]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a77      	ldr	r2, [pc, #476]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 800654a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	4b75      	ldr	r3, [pc, #468]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a74      	ldr	r2, [pc, #464]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d013      	beq.n	800658c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006564:	f7fd fe24 	bl	80041b0 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800656c:	f7fd fe20 	bl	80041b0 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b64      	cmp	r3, #100	@ 0x64
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e29e      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800657e:	4b6a      	ldr	r3, [pc, #424]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d0f0      	beq.n	800656c <HAL_RCC_OscConfig+0xc0>
 800658a:	e014      	b.n	80065b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fd fe10 	bl	80041b0 <HAL_GetTick>
 8006590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006594:	f7fd fe0c 	bl	80041b0 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b64      	cmp	r3, #100	@ 0x64
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e28a      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065a6:	4b60      	ldr	r3, [pc, #384]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d1f0      	bne.n	8006594 <HAL_RCC_OscConfig+0xe8>
 80065b2:	e000      	b.n	80065b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d075      	beq.n	80066ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065c2:	4b59      	ldr	r3, [pc, #356]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 030c 	and.w	r3, r3, #12
 80065ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065cc:	4b56      	ldr	r3, [pc, #344]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	2b0c      	cmp	r3, #12
 80065da:	d102      	bne.n	80065e2 <HAL_RCC_OscConfig+0x136>
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d002      	beq.n	80065e8 <HAL_RCC_OscConfig+0x13c>
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b04      	cmp	r3, #4
 80065e6:	d11f      	bne.n	8006628 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065e8:	4b4f      	ldr	r3, [pc, #316]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_RCC_OscConfig+0x154>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e25d      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006600:	4b49      	ldr	r3, [pc, #292]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	061b      	lsls	r3, r3, #24
 800660e:	4946      	ldr	r1, [pc, #280]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006610:	4313      	orrs	r3, r2
 8006612:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006614:	4b45      	ldr	r3, [pc, #276]	@ (800672c <HAL_RCC_OscConfig+0x280>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fd fd7d 	bl	8004118 <HAL_InitTick>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d043      	beq.n	80066ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e249      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d023      	beq.n	8006678 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006630:	4b3d      	ldr	r3, [pc, #244]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a3c      	ldr	r2, [pc, #240]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663c:	f7fd fdb8 	bl	80041b0 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006644:	f7fd fdb4 	bl	80041b0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e232      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006656:	4b34      	ldr	r3, [pc, #208]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	4b31      	ldr	r3, [pc, #196]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	492d      	ldr	r1, [pc, #180]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	604b      	str	r3, [r1, #4]
 8006676:	e01a      	b.n	80066ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006678:	4b2b      	ldr	r3, [pc, #172]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2a      	ldr	r2, [pc, #168]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 800667e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fd fd94 	bl	80041b0 <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800668c:	f7fd fd90 	bl	80041b0 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e20e      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800669e:	4b22      	ldr	r3, [pc, #136]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1f0      	bne.n	800668c <HAL_RCC_OscConfig+0x1e0>
 80066aa:	e000      	b.n	80066ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d041      	beq.n	800673e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d01c      	beq.n	80066fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066c2:	4b19      	ldr	r3, [pc, #100]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80066c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066c8:	4a17      	ldr	r2, [pc, #92]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d2:	f7fd fd6d 	bl	80041b0 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066da:	f7fd fd69 	bl	80041b0 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e1e7      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80066ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0ef      	beq.n	80066da <HAL_RCC_OscConfig+0x22e>
 80066fa:	e020      	b.n	800673e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066fc:	4b0a      	ldr	r3, [pc, #40]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 80066fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006702:	4a09      	ldr	r2, [pc, #36]	@ (8006728 <HAL_RCC_OscConfig+0x27c>)
 8006704:	f023 0301 	bic.w	r3, r3, #1
 8006708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800670c:	f7fd fd50 	bl	80041b0 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006712:	e00d      	b.n	8006730 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006714:	f7fd fd4c 	bl	80041b0 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b02      	cmp	r3, #2
 8006720:	d906      	bls.n	8006730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e1ca      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
 8006726:	bf00      	nop
 8006728:	40021000 	.word	0x40021000
 800672c:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006730:	4b8c      	ldr	r3, [pc, #560]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006736:	f003 0302 	and.w	r3, r3, #2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1ea      	bne.n	8006714 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0304 	and.w	r3, r3, #4
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 80a6 	beq.w	8006898 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800674c:	2300      	movs	r3, #0
 800674e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006750:	4b84      	ldr	r3, [pc, #528]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_OscConfig+0x2b4>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <HAL_RCC_OscConfig+0x2b6>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00d      	beq.n	8006782 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006766:	4b7f      	ldr	r3, [pc, #508]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800676a:	4a7e      	ldr	r2, [pc, #504]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 800676c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006770:	6593      	str	r3, [r2, #88]	@ 0x58
 8006772:	4b7c      	ldr	r3, [pc, #496]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800677e:	2301      	movs	r3, #1
 8006780:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006782:	4b79      	ldr	r3, [pc, #484]	@ (8006968 <HAL_RCC_OscConfig+0x4bc>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800678a:	2b00      	cmp	r3, #0
 800678c:	d118      	bne.n	80067c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800678e:	4b76      	ldr	r3, [pc, #472]	@ (8006968 <HAL_RCC_OscConfig+0x4bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a75      	ldr	r2, [pc, #468]	@ (8006968 <HAL_RCC_OscConfig+0x4bc>)
 8006794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800679a:	f7fd fd09 	bl	80041b0 <HAL_GetTick>
 800679e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a0:	e008      	b.n	80067b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a2:	f7fd fd05 	bl	80041b0 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d901      	bls.n	80067b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e183      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067b4:	4b6c      	ldr	r3, [pc, #432]	@ (8006968 <HAL_RCC_OscConfig+0x4bc>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0f0      	beq.n	80067a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d108      	bne.n	80067da <HAL_RCC_OscConfig+0x32e>
 80067c8:	4b66      	ldr	r3, [pc, #408]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ce:	4a65      	ldr	r2, [pc, #404]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80067d0:	f043 0301 	orr.w	r3, r3, #1
 80067d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067d8:	e024      	b.n	8006824 <HAL_RCC_OscConfig+0x378>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d110      	bne.n	8006804 <HAL_RCC_OscConfig+0x358>
 80067e2:	4b60      	ldr	r3, [pc, #384]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80067ea:	f043 0304 	orr.w	r3, r3, #4
 80067ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80067f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80067fa:	f043 0301 	orr.w	r3, r3, #1
 80067fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006802:	e00f      	b.n	8006824 <HAL_RCC_OscConfig+0x378>
 8006804:	4b57      	ldr	r3, [pc, #348]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680a:	4a56      	ldr	r2, [pc, #344]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006814:	4b53      	ldr	r3, [pc, #332]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681a:	4a52      	ldr	r2, [pc, #328]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 800681c:	f023 0304 	bic.w	r3, r3, #4
 8006820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d016      	beq.n	800685a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800682c:	f7fd fcc0 	bl	80041b0 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006832:	e00a      	b.n	800684a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006834:	f7fd fcbc 	bl	80041b0 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006842:	4293      	cmp	r3, r2
 8006844:	d901      	bls.n	800684a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e138      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800684a:	4b46      	ldr	r3, [pc, #280]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 800684c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0ed      	beq.n	8006834 <HAL_RCC_OscConfig+0x388>
 8006858:	e015      	b.n	8006886 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685a:	f7fd fca9 	bl	80041b0 <HAL_GetTick>
 800685e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006860:	e00a      	b.n	8006878 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006862:	f7fd fca5 	bl	80041b0 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e121      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006878:	4b3a      	ldr	r3, [pc, #232]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 800687a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1ed      	bne.n	8006862 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006886:	7ffb      	ldrb	r3, [r7, #31]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688c:	4b35      	ldr	r3, [pc, #212]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006890:	4a34      	ldr	r2, [pc, #208]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006896:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d03c      	beq.n	800691e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01c      	beq.n	80068e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068ac:	4b2d      	ldr	r3, [pc, #180]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80068ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068bc:	f7fd fc78 	bl	80041b0 <HAL_GetTick>
 80068c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068c2:	e008      	b.n	80068d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068c4:	f7fd fc74 	bl	80041b0 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d901      	bls.n	80068d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e0f2      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068d6:	4b23      	ldr	r3, [pc, #140]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80068d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d0ef      	beq.n	80068c4 <HAL_RCC_OscConfig+0x418>
 80068e4:	e01b      	b.n	800691e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80068e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 80068ee:	f023 0301 	bic.w	r3, r3, #1
 80068f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f6:	f7fd fc5b 	bl	80041b0 <HAL_GetTick>
 80068fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068fe:	f7fd fc57 	bl	80041b0 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e0d5      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006910:	4b14      	ldr	r3, [pc, #80]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1ef      	bne.n	80068fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	2b00      	cmp	r3, #0
 8006924:	f000 80c9 	beq.w	8006aba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006928:	4b0e      	ldr	r3, [pc, #56]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f003 030c 	and.w	r3, r3, #12
 8006930:	2b0c      	cmp	r3, #12
 8006932:	f000 8083 	beq.w	8006a3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d15e      	bne.n	80069fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800693e:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a08      	ldr	r2, [pc, #32]	@ (8006964 <HAL_RCC_OscConfig+0x4b8>)
 8006944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694a:	f7fd fc31 	bl	80041b0 <HAL_GetTick>
 800694e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006950:	e00c      	b.n	800696c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006952:	f7fd fc2d 	bl	80041b0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d905      	bls.n	800696c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e0ab      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
 8006964:	40021000 	.word	0x40021000
 8006968:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800696c:	4b55      	ldr	r3, [pc, #340]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1ec      	bne.n	8006952 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006978:	4b52      	ldr	r3, [pc, #328]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	4b52      	ldr	r3, [pc, #328]	@ (8006ac8 <HAL_RCC_OscConfig+0x61c>)
 800697e:	4013      	ands	r3, r2
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6a11      	ldr	r1, [r2, #32]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006988:	3a01      	subs	r2, #1
 800698a:	0112      	lsls	r2, r2, #4
 800698c:	4311      	orrs	r1, r2
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006992:	0212      	lsls	r2, r2, #8
 8006994:	4311      	orrs	r1, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800699a:	0852      	lsrs	r2, r2, #1
 800699c:	3a01      	subs	r2, #1
 800699e:	0552      	lsls	r2, r2, #21
 80069a0:	4311      	orrs	r1, r2
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069a6:	0852      	lsrs	r2, r2, #1
 80069a8:	3a01      	subs	r2, #1
 80069aa:	0652      	lsls	r2, r2, #25
 80069ac:	4311      	orrs	r1, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069b2:	06d2      	lsls	r2, r2, #27
 80069b4:	430a      	orrs	r2, r1
 80069b6:	4943      	ldr	r1, [pc, #268]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069bc:	4b41      	ldr	r3, [pc, #260]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a40      	ldr	r2, [pc, #256]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 80069c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069c8:	4b3e      	ldr	r3, [pc, #248]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a3d      	ldr	r2, [pc, #244]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 80069ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fd fbec 	bl	80041b0 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069dc:	f7fd fbe8 	bl	80041b0 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e066      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069ee:	4b35      	ldr	r3, [pc, #212]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0x530>
 80069fa:	e05e      	b.n	8006aba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069fc:	4b31      	ldr	r3, [pc, #196]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a30      	ldr	r2, [pc, #192]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 8006a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a08:	f7fd fbd2 	bl	80041b0 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a10:	f7fd fbce 	bl	80041b0 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e04c      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a22:	4b28      	ldr	r3, [pc, #160]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1f0      	bne.n	8006a10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a2e:	4b25      	ldr	r3, [pc, #148]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	4924      	ldr	r1, [pc, #144]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 8006a34:	4b25      	ldr	r3, [pc, #148]	@ (8006acc <HAL_RCC_OscConfig+0x620>)
 8006a36:	4013      	ands	r3, r2
 8006a38:	60cb      	str	r3, [r1, #12]
 8006a3a:	e03e      	b.n	8006aba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e039      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a48:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac4 <HAL_RCC_OscConfig+0x618>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f003 0203 	and.w	r2, r3, #3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d12c      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	3b01      	subs	r3, #1
 8006a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d123      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d11b      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d113      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	085b      	lsrs	r3, r3, #1
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d109      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d001      	beq.n	8006aba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3720      	adds	r7, #32
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	019f800c 	.word	0x019f800c
 8006acc:	feeefffc 	.word	0xfeeefffc

08006ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e11e      	b.n	8006d26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae8:	4b91      	ldr	r3, [pc, #580]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d910      	bls.n	8006b18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af6:	4b8e      	ldr	r3, [pc, #568]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f023 020f 	bic.w	r2, r3, #15
 8006afe:	498c      	ldr	r1, [pc, #560]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b06:	4b8a      	ldr	r3, [pc, #552]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 030f 	and.w	r3, r3, #15
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d001      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e106      	b.n	8006d26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d073      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d129      	bne.n	8006b80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b2c:	4b81      	ldr	r3, [pc, #516]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e0f4      	b.n	8006d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b3c:	f000 f99e 	bl	8006e7c <RCC_GetSysClockFreqFromPLLSource>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	4a7c      	ldr	r2, [pc, #496]	@ (8006d38 <HAL_RCC_ClockConfig+0x268>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d93f      	bls.n	8006bca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d033      	beq.n	8006bca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d12f      	bne.n	8006bca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b6a:	4b72      	ldr	r3, [pc, #456]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b72:	4a70      	ldr	r2, [pc, #448]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b7a:	2380      	movs	r3, #128	@ 0x80
 8006b7c:	617b      	str	r3, [r7, #20]
 8006b7e:	e024      	b.n	8006bca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d107      	bne.n	8006b98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b88:	4b6a      	ldr	r3, [pc, #424]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d109      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0c6      	b.n	8006d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b98:	4b66      	ldr	r3, [pc, #408]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0be      	b.n	8006d26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006ba8:	f000 f8ce 	bl	8006d48 <HAL_RCC_GetSysClockFreq>
 8006bac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4a61      	ldr	r2, [pc, #388]	@ (8006d38 <HAL_RCC_ClockConfig+0x268>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d909      	bls.n	8006bca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bc6:	2380      	movs	r3, #128	@ 0x80
 8006bc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bca:	4b5a      	ldr	r3, [pc, #360]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f023 0203 	bic.w	r2, r3, #3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	4957      	ldr	r1, [pc, #348]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bdc:	f7fd fae8 	bl	80041b0 <HAL_GetTick>
 8006be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be2:	e00a      	b.n	8006bfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006be4:	f7fd fae4 	bl	80041b0 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e095      	b.n	8006d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f003 020c 	and.w	r2, r3, #12
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d1eb      	bne.n	8006be4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d023      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c24:	4b43      	ldr	r3, [pc, #268]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	4a42      	ldr	r2, [pc, #264]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0308 	and.w	r3, r3, #8
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c44:	4a3b      	ldr	r2, [pc, #236]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c4c:	4b39      	ldr	r3, [pc, #228]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	4936      	ldr	r1, [pc, #216]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2b80      	cmp	r3, #128	@ 0x80
 8006c64:	d105      	bne.n	8006c72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c66:	4b33      	ldr	r3, [pc, #204]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	4a32      	ldr	r2, [pc, #200]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006c6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c72:	4b2f      	ldr	r3, [pc, #188]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 030f 	and.w	r3, r3, #15
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d21d      	bcs.n	8006cbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c80:	4b2b      	ldr	r3, [pc, #172]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f023 020f 	bic.w	r2, r3, #15
 8006c88:	4929      	ldr	r1, [pc, #164]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006c90:	f7fd fa8e 	bl	80041b0 <HAL_GetTick>
 8006c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c96:	e00a      	b.n	8006cae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c98:	f7fd fa8a 	bl	80041b0 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e03b      	b.n	8006d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cae:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <HAL_RCC_ClockConfig+0x260>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d1ed      	bne.n	8006c98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	4917      	ldr	r1, [pc, #92]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ce6:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	490f      	ldr	r1, [pc, #60]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cfa:	f000 f825 	bl	8006d48 <HAL_RCC_GetSysClockFreq>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <HAL_RCC_ClockConfig+0x264>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	091b      	lsrs	r3, r3, #4
 8006d06:	f003 030f 	and.w	r3, r3, #15
 8006d0a:	490c      	ldr	r1, [pc, #48]	@ (8006d3c <HAL_RCC_ClockConfig+0x26c>)
 8006d0c:	5ccb      	ldrb	r3, [r1, r3]
 8006d0e:	f003 031f 	and.w	r3, r3, #31
 8006d12:	fa22 f303 	lsr.w	r3, r2, r3
 8006d16:	4a0a      	ldr	r2, [pc, #40]	@ (8006d40 <HAL_RCC_ClockConfig+0x270>)
 8006d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d44 <HAL_RCC_ClockConfig+0x274>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fd f9fa 	bl	8004118 <HAL_InitTick>
 8006d24:	4603      	mov	r3, r0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40022000 	.word	0x40022000
 8006d34:	40021000 	.word	0x40021000
 8006d38:	04c4b400 	.word	0x04c4b400
 8006d3c:	0800cc24 	.word	0x0800cc24
 8006d40:	20000200 	.word	0x20000200
 8006d44:	20000204 	.word	0x20000204

08006d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f003 030c 	and.w	r3, r3, #12
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d102      	bne.n	8006d60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	e047      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d60:	4b27      	ldr	r3, [pc, #156]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 030c 	and.w	r3, r3, #12
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d102      	bne.n	8006d72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d6c:	4b26      	ldr	r3, [pc, #152]	@ (8006e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	e03e      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d72:	4b23      	ldr	r3, [pc, #140]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 030c 	and.w	r3, r3, #12
 8006d7a:	2b0c      	cmp	r3, #12
 8006d7c:	d136      	bne.n	8006dec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d7e:	4b20      	ldr	r3, [pc, #128]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d88:	4b1d      	ldr	r3, [pc, #116]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	091b      	lsrs	r3, r3, #4
 8006d8e:	f003 030f 	and.w	r3, r3, #15
 8006d92:	3301      	adds	r3, #1
 8006d94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d10c      	bne.n	8006db6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da4:	4a16      	ldr	r2, [pc, #88]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da6:	68d2      	ldr	r2, [r2, #12]
 8006da8:	0a12      	lsrs	r2, r2, #8
 8006daa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
 8006db2:	617b      	str	r3, [r7, #20]
      break;
 8006db4:	e00c      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006db6:	4a13      	ldr	r2, [pc, #76]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dbe:	4a10      	ldr	r2, [pc, #64]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dc0:	68d2      	ldr	r2, [r2, #12]
 8006dc2:	0a12      	lsrs	r2, r2, #8
 8006dc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dc8:	fb02 f303 	mul.w	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]
      break;
 8006dce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	0e5b      	lsrs	r3, r3, #25
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	3301      	adds	r3, #1
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006de0:	697a      	ldr	r2, [r7, #20]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	613b      	str	r3, [r7, #16]
 8006dea:	e001      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006df0:	693b      	ldr	r3, [r7, #16]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	40021000 	.word	0x40021000
 8006e04:	00f42400 	.word	0x00f42400
 8006e08:	016e3600 	.word	0x016e3600

08006e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e10:	4b03      	ldr	r3, [pc, #12]	@ (8006e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e12:	681b      	ldr	r3, [r3, #0]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000200 	.word	0x20000200

08006e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e28:	f7ff fff0 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b06      	ldr	r3, [pc, #24]	@ (8006e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	0a1b      	lsrs	r3, r3, #8
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	4904      	ldr	r1, [pc, #16]	@ (8006e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	0800cc34 	.word	0x0800cc34

08006e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e54:	f7ff ffda 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b06      	ldr	r3, [pc, #24]	@ (8006e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	0adb      	lsrs	r3, r3, #11
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4904      	ldr	r1, [pc, #16]	@ (8006e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	f003 031f 	and.w	r3, r3, #31
 8006e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40021000 	.word	0x40021000
 8006e78:	0800cc34 	.word	0x0800cc34

08006e7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e82:	4b1e      	ldr	r3, [pc, #120]	@ (8006efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	091b      	lsrs	r3, r3, #4
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	3301      	adds	r3, #1
 8006e98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	2b03      	cmp	r3, #3
 8006e9e:	d10c      	bne.n	8006eba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ea0:	4a17      	ldr	r2, [pc, #92]	@ (8006f00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea8:	4a14      	ldr	r2, [pc, #80]	@ (8006efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eaa:	68d2      	ldr	r2, [r2, #12]
 8006eac:	0a12      	lsrs	r2, r2, #8
 8006eae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	617b      	str	r3, [r7, #20]
    break;
 8006eb8:	e00c      	b.n	8006ed4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006eba:	4a12      	ldr	r2, [pc, #72]	@ (8006f04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8006efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ec4:	68d2      	ldr	r2, [r2, #12]
 8006ec6:	0a12      	lsrs	r2, r2, #8
 8006ec8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ecc:	fb02 f303 	mul.w	r3, r2, r3
 8006ed0:	617b      	str	r3, [r7, #20]
    break;
 8006ed2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ed4:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	0e5b      	lsrs	r3, r3, #25
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	3301      	adds	r3, #1
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006eee:	687b      	ldr	r3, [r7, #4]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	40021000 	.word	0x40021000
 8006f00:	016e3600 	.word	0x016e3600
 8006f04:	00f42400 	.word	0x00f42400

08006f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f10:	2300      	movs	r3, #0
 8006f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f14:	2300      	movs	r3, #0
 8006f16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8098 	beq.w	8007056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f26:	2300      	movs	r3, #0
 8006f28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f2a:	4b43      	ldr	r3, [pc, #268]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10d      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f36:	4b40      	ldr	r3, [pc, #256]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f42:	4b3d      	ldr	r3, [pc, #244]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f4a:	60bb      	str	r3, [r7, #8]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f52:	4b3a      	ldr	r3, [pc, #232]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a39      	ldr	r2, [pc, #228]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f5e:	f7fd f927 	bl	80041b0 <HAL_GetTick>
 8006f62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f64:	e009      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f66:	f7fd f923 	bl	80041b0 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d902      	bls.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	74fb      	strb	r3, [r7, #19]
        break;
 8006f78:	e005      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f7a:	4b30      	ldr	r3, [pc, #192]	@ (800703c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d0ef      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006f86:	7cfb      	ldrb	r3, [r7, #19]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d159      	bne.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d01e      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d019      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fa8:	4b23      	ldr	r3, [pc, #140]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fb4:	4b20      	ldr	r3, [pc, #128]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fba:	4a1f      	ldr	r2, [pc, #124]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fca:	4a1b      	ldr	r2, [pc, #108]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006fd4:	4a18      	ldr	r2, [pc, #96]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d016      	beq.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe6:	f7fd f8e3 	bl	80041b0 <HAL_GetTick>
 8006fea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fec:	e00b      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fee:	f7fd f8df 	bl	80041b0 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d902      	bls.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	74fb      	strb	r3, [r7, #19]
            break;
 8007004:	e006      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007006:	4b0c      	ldr	r3, [pc, #48]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0ec      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007014:	7cfb      	ldrb	r3, [r7, #19]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800701a:	4b07      	ldr	r3, [pc, #28]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007028:	4903      	ldr	r1, [pc, #12]	@ (8007038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007030:	e008      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007032:	7cfb      	ldrb	r3, [r7, #19]
 8007034:	74bb      	strb	r3, [r7, #18]
 8007036:	e005      	b.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007038:	40021000 	.word	0x40021000
 800703c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007040:	7cfb      	ldrb	r3, [r7, #19]
 8007042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007044:	7c7b      	ldrb	r3, [r7, #17]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d105      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800704a:	4ba7      	ldr	r3, [pc, #668]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800704c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800704e:	4aa6      	ldr	r2, [pc, #664]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007054:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00a      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007062:	4ba1      	ldr	r3, [pc, #644]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007068:	f023 0203 	bic.w	r2, r3, #3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	499d      	ldr	r1, [pc, #628]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007072:	4313      	orrs	r3, r2
 8007074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00a      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007084:	4b98      	ldr	r3, [pc, #608]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708a:	f023 020c 	bic.w	r2, r3, #12
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	4995      	ldr	r1, [pc, #596]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007094:	4313      	orrs	r3, r2
 8007096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0304 	and.w	r3, r3, #4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070a6:	4b90      	ldr	r3, [pc, #576]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	498c      	ldr	r1, [pc, #560]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0308 	and.w	r3, r3, #8
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d00a      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070c8:	4b87      	ldr	r3, [pc, #540]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	4984      	ldr	r1, [pc, #528]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d8:	4313      	orrs	r3, r2
 80070da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80070ea:	4b7f      	ldr	r3, [pc, #508]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	497b      	ldr	r1, [pc, #492]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0320 	and.w	r3, r3, #32
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800710c:	4b76      	ldr	r3, [pc, #472]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007112:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	4973      	ldr	r1, [pc, #460]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800712e:	4b6e      	ldr	r3, [pc, #440]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007134:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	496a      	ldr	r1, [pc, #424]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007150:	4b65      	ldr	r3, [pc, #404]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	4962      	ldr	r1, [pc, #392]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007172:	4b5d      	ldr	r3, [pc, #372]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007178:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	4959      	ldr	r1, [pc, #356]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007194:	4b54      	ldr	r3, [pc, #336]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800719a:	f023 0203 	bic.w	r2, r3, #3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a2:	4951      	ldr	r1, [pc, #324]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071b6:	4b4c      	ldr	r3, [pc, #304]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	4948      	ldr	r1, [pc, #288]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d015      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071d8:	4b43      	ldr	r3, [pc, #268]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071e6:	4940      	ldr	r1, [pc, #256]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f6:	d105      	bne.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071f8:	4b3b      	ldr	r3, [pc, #236]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4a3a      	ldr	r2, [pc, #232]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007202:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800720c:	2b00      	cmp	r3, #0
 800720e:	d015      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007210:	4b35      	ldr	r3, [pc, #212]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007216:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800721e:	4932      	ldr	r1, [pc, #200]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007220:	4313      	orrs	r3, r2
 8007222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800722e:	d105      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007230:	4b2d      	ldr	r3, [pc, #180]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	4a2c      	ldr	r2, [pc, #176]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800723a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d015      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007248:	4b27      	ldr	r3, [pc, #156]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800724a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800724e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007256:	4924      	ldr	r1, [pc, #144]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007258:	4313      	orrs	r3, r2
 800725a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007266:	d105      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007268:	4b1f      	ldr	r3, [pc, #124]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4a1e      	ldr	r2, [pc, #120]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007272:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d015      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007280:	4b19      	ldr	r3, [pc, #100]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007286:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728e:	4916      	ldr	r1, [pc, #88]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007290:	4313      	orrs	r3, r2
 8007292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800729e:	d105      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072a0:	4b11      	ldr	r3, [pc, #68]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4a10      	ldr	r2, [pc, #64]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d019      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072b8:	4b0b      	ldr	r3, [pc, #44]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c6:	4908      	ldr	r1, [pc, #32]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c8:	4313      	orrs	r3, r2
 80072ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072d6:	d109      	bne.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d8:	4b03      	ldr	r3, [pc, #12]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	4a02      	ldr	r2, [pc, #8]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072e2:	60d3      	str	r3, [r2, #12]
 80072e4:	e002      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80072e6:	bf00      	nop
 80072e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d015      	beq.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80072f8:	4b29      	ldr	r3, [pc, #164]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007306:	4926      	ldr	r1, [pc, #152]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007316:	d105      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007318:	4b21      	ldr	r3, [pc, #132]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	4a20      	ldr	r2, [pc, #128]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800731e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007322:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d015      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007330:	4b1b      	ldr	r3, [pc, #108]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007336:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800733e:	4918      	ldr	r1, [pc, #96]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007340:	4313      	orrs	r3, r2
 8007342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800734a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800734e:	d105      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007350:	4b13      	ldr	r3, [pc, #76]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	4a12      	ldr	r2, [pc, #72]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800735a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007364:	2b00      	cmp	r3, #0
 8007366:	d015      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007368:	4b0d      	ldr	r3, [pc, #52]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800736a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800736e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007376:	490a      	ldr	r1, [pc, #40]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007386:	d105      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007388:	4b05      	ldr	r3, [pc, #20]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	4a04      	ldr	r2, [pc, #16]	@ (80073a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800738e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007392:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007394:	7cbb      	ldrb	r3, [r7, #18]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	40021000 	.word	0x40021000

080073a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e09d      	b.n	80074f2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d108      	bne.n	80073d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073c6:	d009      	beq.n	80073dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	61da      	str	r2, [r3, #28]
 80073ce:	e005      	b.n	80073dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d106      	bne.n	80073fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7fb ff9c 	bl	8003334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007412:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800741c:	d902      	bls.n	8007424 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	e002      	b.n	800742a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007428:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007432:	d007      	beq.n	8007444 <HAL_SPI_Init+0xa0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800743c:	d002      	beq.n	8007444 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007454:	431a      	orrs	r2, r3
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007472:	431a      	orrs	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007486:	ea42 0103 	orr.w	r1, r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	0c1b      	lsrs	r3, r3, #16
 80074a0:	f003 0204 	and.w	r2, r3, #4
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b2:	f003 0308 	and.w	r3, r3, #8
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074c0:	ea42 0103 	orr.w	r1, r2, r3
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69da      	ldr	r2, [r3, #28]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
	...

080074fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e054      	b.n	80075b8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d111      	bne.n	800753e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f001 ffd4 	bl	80094d0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d102      	bne.n	8007536 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a23      	ldr	r2, [pc, #140]	@ (80075c0 <HAL_TIM_Base_Init+0xc4>)
 8007534:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f001 fb1d 	bl	8008b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	08003be9 	.word	0x08003be9

080075c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d001      	beq.n	80075dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	e04c      	b.n	8007676 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a26      	ldr	r2, [pc, #152]	@ (8007684 <HAL_TIM_Base_Start+0xc0>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d022      	beq.n	8007634 <HAL_TIM_Base_Start+0x70>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075f6:	d01d      	beq.n	8007634 <HAL_TIM_Base_Start+0x70>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a22      	ldr	r2, [pc, #136]	@ (8007688 <HAL_TIM_Base_Start+0xc4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d018      	beq.n	8007634 <HAL_TIM_Base_Start+0x70>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a21      	ldr	r2, [pc, #132]	@ (800768c <HAL_TIM_Base_Start+0xc8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d013      	beq.n	8007634 <HAL_TIM_Base_Start+0x70>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a1f      	ldr	r2, [pc, #124]	@ (8007690 <HAL_TIM_Base_Start+0xcc>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d00e      	beq.n	8007634 <HAL_TIM_Base_Start+0x70>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1e      	ldr	r2, [pc, #120]	@ (8007694 <HAL_TIM_Base_Start+0xd0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d009      	beq.n	8007634 <HAL_TIM_Base_Start+0x70>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a1c      	ldr	r2, [pc, #112]	@ (8007698 <HAL_TIM_Base_Start+0xd4>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <HAL_TIM_Base_Start+0x70>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1b      	ldr	r2, [pc, #108]	@ (800769c <HAL_TIM_Base_Start+0xd8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d115      	bne.n	8007660 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689a      	ldr	r2, [r3, #8]
 800763a:	4b19      	ldr	r3, [pc, #100]	@ (80076a0 <HAL_TIM_Base_Start+0xdc>)
 800763c:	4013      	ands	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b06      	cmp	r3, #6
 8007644:	d015      	beq.n	8007672 <HAL_TIM_Base_Start+0xae>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800764c:	d011      	beq.n	8007672 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0201 	orr.w	r2, r2, #1
 800765c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800765e:	e008      	b.n	8007672 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	e000      	b.n	8007674 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007672:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40000400 	.word	0x40000400
 800768c:	40000800 	.word	0x40000800
 8007690:	40000c00 	.word	0x40000c00
 8007694:	40013400 	.word	0x40013400
 8007698:	40014000 	.word	0x40014000
 800769c:	40015000 	.word	0x40015000
 80076a0:	00010007 	.word	0x00010007

080076a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d001      	beq.n	80076bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e054      	b.n	8007766 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0201 	orr.w	r2, r2, #1
 80076d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a26      	ldr	r2, [pc, #152]	@ (8007774 <HAL_TIM_Base_Start_IT+0xd0>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d022      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x80>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e6:	d01d      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x80>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a22      	ldr	r2, [pc, #136]	@ (8007778 <HAL_TIM_Base_Start_IT+0xd4>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d018      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x80>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	@ (800777c <HAL_TIM_Base_Start_IT+0xd8>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x80>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1f      	ldr	r2, [pc, #124]	@ (8007780 <HAL_TIM_Base_Start_IT+0xdc>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d00e      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x80>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1e      	ldr	r2, [pc, #120]	@ (8007784 <HAL_TIM_Base_Start_IT+0xe0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d009      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x80>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1c      	ldr	r2, [pc, #112]	@ (8007788 <HAL_TIM_Base_Start_IT+0xe4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <HAL_TIM_Base_Start_IT+0x80>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1b      	ldr	r2, [pc, #108]	@ (800778c <HAL_TIM_Base_Start_IT+0xe8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d115      	bne.n	8007750 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	4b19      	ldr	r3, [pc, #100]	@ (8007790 <HAL_TIM_Base_Start_IT+0xec>)
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b06      	cmp	r3, #6
 8007734:	d015      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0xbe>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800773c:	d011      	beq.n	8007762 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0201 	orr.w	r2, r2, #1
 800774c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800774e:	e008      	b.n	8007762 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e000      	b.n	8007764 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007762:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3714      	adds	r7, #20
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40012c00 	.word	0x40012c00
 8007778:	40000400 	.word	0x40000400
 800777c:	40000800 	.word	0x40000800
 8007780:	40000c00 	.word	0x40000c00
 8007784:	40013400 	.word	0x40013400
 8007788:	40014000 	.word	0x40014000
 800778c:	40015000 	.word	0x40015000
 8007790:	00010007 	.word	0x00010007

08007794 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e054      	b.n	8007850 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d111      	bne.n	80077d6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fe88 	bl	80094d0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a23      	ldr	r2, [pc, #140]	@ (8007858 <HAL_TIM_OC_Init+0xc4>)
 80077cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2202      	movs	r2, #2
 80077da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4619      	mov	r1, r3
 80077e8:	4610      	mov	r0, r2
 80077ea:	f001 f9d1 	bl	8008b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2201      	movs	r2, #1
 8007802:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2201      	movs	r2, #1
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	0800785d 	.word	0x0800785d

0800785c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e054      	b.n	800792c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d111      	bne.n	80078b2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fe1a 	bl	80094d0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d102      	bne.n	80078aa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a23      	ldr	r2, [pc, #140]	@ (8007934 <HAL_TIM_PWM_Init+0xc4>)
 80078a8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3304      	adds	r3, #4
 80078c2:	4619      	mov	r1, r3
 80078c4:	4610      	mov	r0, r2
 80078c6:	f001 f963 	bl	8008b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	08007939 	.word	0x08007939

08007938 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d109      	bne.n	8007970 <HAL_TIM_PWM_Start+0x24>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007962:	b2db      	uxtb	r3, r3
 8007964:	2b01      	cmp	r3, #1
 8007966:	bf14      	ite	ne
 8007968:	2301      	movne	r3, #1
 800796a:	2300      	moveq	r3, #0
 800796c:	b2db      	uxtb	r3, r3
 800796e:	e03c      	b.n	80079ea <HAL_TIM_PWM_Start+0x9e>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b04      	cmp	r3, #4
 8007974:	d109      	bne.n	800798a <HAL_TIM_PWM_Start+0x3e>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b01      	cmp	r3, #1
 8007980:	bf14      	ite	ne
 8007982:	2301      	movne	r3, #1
 8007984:	2300      	moveq	r3, #0
 8007986:	b2db      	uxtb	r3, r3
 8007988:	e02f      	b.n	80079ea <HAL_TIM_PWM_Start+0x9e>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d109      	bne.n	80079a4 <HAL_TIM_PWM_Start+0x58>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b01      	cmp	r3, #1
 800799a:	bf14      	ite	ne
 800799c:	2301      	movne	r3, #1
 800799e:	2300      	moveq	r3, #0
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	e022      	b.n	80079ea <HAL_TIM_PWM_Start+0x9e>
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b0c      	cmp	r3, #12
 80079a8:	d109      	bne.n	80079be <HAL_TIM_PWM_Start+0x72>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	bf14      	ite	ne
 80079b6:	2301      	movne	r3, #1
 80079b8:	2300      	moveq	r3, #0
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	e015      	b.n	80079ea <HAL_TIM_PWM_Start+0x9e>
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b10      	cmp	r3, #16
 80079c2:	d109      	bne.n	80079d8 <HAL_TIM_PWM_Start+0x8c>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	bf14      	ite	ne
 80079d0:	2301      	movne	r3, #1
 80079d2:	2300      	moveq	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	e008      	b.n	80079ea <HAL_TIM_PWM_Start+0x9e>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	bf14      	ite	ne
 80079e4:	2301      	movne	r3, #1
 80079e6:	2300      	moveq	r3, #0
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e0a6      	b.n	8007b40 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <HAL_TIM_PWM_Start+0xb6>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a00:	e023      	b.n	8007a4a <HAL_TIM_PWM_Start+0xfe>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d104      	bne.n	8007a12 <HAL_TIM_PWM_Start+0xc6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a10:	e01b      	b.n	8007a4a <HAL_TIM_PWM_Start+0xfe>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d104      	bne.n	8007a22 <HAL_TIM_PWM_Start+0xd6>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a20:	e013      	b.n	8007a4a <HAL_TIM_PWM_Start+0xfe>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b0c      	cmp	r3, #12
 8007a26:	d104      	bne.n	8007a32 <HAL_TIM_PWM_Start+0xe6>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007a30:	e00b      	b.n	8007a4a <HAL_TIM_PWM_Start+0xfe>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b10      	cmp	r3, #16
 8007a36:	d104      	bne.n	8007a42 <HAL_TIM_PWM_Start+0xf6>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a40:	e003      	b.n	8007a4a <HAL_TIM_PWM_Start+0xfe>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2202      	movs	r2, #2
 8007a46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 fd16 	bl	8009484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a3a      	ldr	r2, [pc, #232]	@ (8007b48 <HAL_TIM_PWM_Start+0x1fc>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d018      	beq.n	8007a94 <HAL_TIM_PWM_Start+0x148>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a39      	ldr	r2, [pc, #228]	@ (8007b4c <HAL_TIM_PWM_Start+0x200>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d013      	beq.n	8007a94 <HAL_TIM_PWM_Start+0x148>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a37      	ldr	r2, [pc, #220]	@ (8007b50 <HAL_TIM_PWM_Start+0x204>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d00e      	beq.n	8007a94 <HAL_TIM_PWM_Start+0x148>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a36      	ldr	r2, [pc, #216]	@ (8007b54 <HAL_TIM_PWM_Start+0x208>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d009      	beq.n	8007a94 <HAL_TIM_PWM_Start+0x148>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a34      	ldr	r2, [pc, #208]	@ (8007b58 <HAL_TIM_PWM_Start+0x20c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d004      	beq.n	8007a94 <HAL_TIM_PWM_Start+0x148>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a33      	ldr	r2, [pc, #204]	@ (8007b5c <HAL_TIM_PWM_Start+0x210>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d101      	bne.n	8007a98 <HAL_TIM_PWM_Start+0x14c>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <HAL_TIM_PWM_Start+0x14e>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007aac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a25      	ldr	r2, [pc, #148]	@ (8007b48 <HAL_TIM_PWM_Start+0x1fc>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d022      	beq.n	8007afe <HAL_TIM_PWM_Start+0x1b2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac0:	d01d      	beq.n	8007afe <HAL_TIM_PWM_Start+0x1b2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a26      	ldr	r2, [pc, #152]	@ (8007b60 <HAL_TIM_PWM_Start+0x214>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d018      	beq.n	8007afe <HAL_TIM_PWM_Start+0x1b2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a24      	ldr	r2, [pc, #144]	@ (8007b64 <HAL_TIM_PWM_Start+0x218>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d013      	beq.n	8007afe <HAL_TIM_PWM_Start+0x1b2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a23      	ldr	r2, [pc, #140]	@ (8007b68 <HAL_TIM_PWM_Start+0x21c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d00e      	beq.n	8007afe <HAL_TIM_PWM_Start+0x1b2>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a19      	ldr	r2, [pc, #100]	@ (8007b4c <HAL_TIM_PWM_Start+0x200>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d009      	beq.n	8007afe <HAL_TIM_PWM_Start+0x1b2>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a18      	ldr	r2, [pc, #96]	@ (8007b50 <HAL_TIM_PWM_Start+0x204>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_TIM_PWM_Start+0x1b2>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <HAL_TIM_PWM_Start+0x210>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d115      	bne.n	8007b2a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	4b19      	ldr	r3, [pc, #100]	@ (8007b6c <HAL_TIM_PWM_Start+0x220>)
 8007b06:	4013      	ands	r3, r2
 8007b08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2b06      	cmp	r3, #6
 8007b0e:	d015      	beq.n	8007b3c <HAL_TIM_PWM_Start+0x1f0>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b16:	d011      	beq.n	8007b3c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0201 	orr.w	r2, r2, #1
 8007b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b28:	e008      	b.n	8007b3c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0201 	orr.w	r2, r2, #1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e000      	b.n	8007b3e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3710      	adds	r7, #16
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	40012c00 	.word	0x40012c00
 8007b4c:	40013400 	.word	0x40013400
 8007b50:	40014000 	.word	0x40014000
 8007b54:	40014400 	.word	0x40014400
 8007b58:	40014800 	.word	0x40014800
 8007b5c:	40015000 	.word	0x40015000
 8007b60:	40000400 	.word	0x40000400
 8007b64:	40000800 	.word	0x40000800
 8007b68:	40000c00 	.word	0x40000c00
 8007b6c:	00010007 	.word	0x00010007

08007b70 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e04c      	b.n	8007c1e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b8a:	b2db      	uxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d111      	bne.n	8007bb4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f001 fc99 	bl	80094d0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d102      	bne.n	8007bac <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8007c28 <HAL_TIM_OnePulse_Init+0xb8>)
 8007baa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681a      	ldr	r2, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f000 ffe2 	bl	8008b90 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0208 	bic.w	r2, r2, #8
 8007bda:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6819      	ldr	r1, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	430a      	orrs	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	08007c2d 	.word	0x08007c2d

08007c2c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c68:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d108      	bne.n	8007c82 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c76:	7b7b      	ldrb	r3, [r7, #13]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d102      	bne.n	8007c82 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c7c:	7b3b      	ldrb	r3, [r7, #12]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d001      	beq.n	8007c86 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e059      	b.n	8007d3a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2202      	movs	r2, #2
 8007c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f042 0202 	orr.w	r2, r2, #2
 8007cb4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0204 	orr.w	r2, r2, #4
 8007cc4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	2100      	movs	r1, #0
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f001 fbd8 	bl	8009484 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	2104      	movs	r1, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f001 fbd1 	bl	8009484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a17      	ldr	r2, [pc, #92]	@ (8007d44 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d018      	beq.n	8007d1e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a15      	ldr	r2, [pc, #84]	@ (8007d48 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d013      	beq.n	8007d1e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a14      	ldr	r2, [pc, #80]	@ (8007d4c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a12      	ldr	r2, [pc, #72]	@ (8007d50 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a11      	ldr	r2, [pc, #68]	@ (8007d54 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a0f      	ldr	r2, [pc, #60]	@ (8007d58 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d101      	bne.n	8007d22 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007d22:	2300      	movs	r3, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d007      	beq.n	8007d38 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40012c00 	.word	0x40012c00
 8007d48:	40013400 	.word	0x40013400
 8007d4c:	40014000 	.word	0x40014000
 8007d50:	40014400 	.word	0x40014400
 8007d54:	40014800 	.word	0x40014800
 8007d58:	40015000 	.word	0x40015000

08007d5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e0a2      	b.n	8007eb6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d111      	bne.n	8007da0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f001 fba3 	bl	80094d0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d102      	bne.n	8007d98 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a4a      	ldr	r2, [pc, #296]	@ (8007ec0 <HAL_TIM_Encoder_Init+0x164>)
 8007d96:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007db6:	f023 0307 	bic.w	r3, r3, #7
 8007dba:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f000 fee2 	bl	8008b90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007df4:	f023 0303 	bic.w	r3, r3, #3
 8007df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	689a      	ldr	r2, [r3, #8]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	021b      	lsls	r3, r3, #8
 8007e04:	4313      	orrs	r3, r2
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007e12:	f023 030c 	bic.w	r3, r3, #12
 8007e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	021b      	lsls	r3, r3, #8
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	011a      	lsls	r2, r3, #4
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
 8007e40:	031b      	lsls	r3, r3, #12
 8007e42:	4313      	orrs	r3, r2
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007e50:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007e58:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	685a      	ldr	r2, [r3, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	4313      	orrs	r3, r2
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	697a      	ldr	r2, [r7, #20]
 8007e72:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	08003d01 	.word	0x08003d01

08007ec4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ed4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007edc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ee4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007eec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d110      	bne.n	8007f16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d102      	bne.n	8007f00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007efa:	7b7b      	ldrb	r3, [r7, #13]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d001      	beq.n	8007f04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e069      	b.n	8007fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f14:	e031      	b.n	8007f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d110      	bne.n	8007f3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d102      	bne.n	8007f28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f22:	7b3b      	ldrb	r3, [r7, #12]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d001      	beq.n	8007f2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e055      	b.n	8007fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f3c:	e01d      	b.n	8007f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d108      	bne.n	8007f56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f44:	7bbb      	ldrb	r3, [r7, #14]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d105      	bne.n	8007f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f4a:	7b7b      	ldrb	r3, [r7, #13]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d102      	bne.n	8007f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f50:	7b3b      	ldrb	r3, [r7, #12]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d001      	beq.n	8007f5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e03e      	b.n	8007fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2202      	movs	r2, #2
 8007f6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2202      	movs	r2, #2
 8007f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d003      	beq.n	8007f88 <HAL_TIM_Encoder_Start+0xc4>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b04      	cmp	r3, #4
 8007f84:	d008      	beq.n	8007f98 <HAL_TIM_Encoder_Start+0xd4>
 8007f86:	e00f      	b.n	8007fa8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	2100      	movs	r1, #0
 8007f90:	4618      	mov	r0, r3
 8007f92:	f001 fa77 	bl	8009484 <TIM_CCxChannelCmd>
      break;
 8007f96:	e016      	b.n	8007fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	2104      	movs	r1, #4
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f001 fa6f 	bl	8009484 <TIM_CCxChannelCmd>
      break;
 8007fa6:	e00e      	b.n	8007fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2201      	movs	r2, #1
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 fa67 	bl	8009484 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	2104      	movs	r1, #4
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f001 fa60 	bl	8009484 <TIM_CCxChannelCmd>
      break;
 8007fc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f042 0201 	orr.w	r2, r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d026      	beq.n	8008050 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d021      	beq.n	8008050 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f06f 0202 	mvn.w	r2, #2
 8008014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d005      	beq.n	8008036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
 8008034:	e009      	b.n	800804a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	f003 0304 	and.w	r3, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	d026      	beq.n	80080a8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d021      	beq.n	80080a8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0204 	mvn.w	r2, #4
 800806c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2202      	movs	r2, #2
 8008072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
 800808c:	e009      	b.n	80080a2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d026      	beq.n	8008100 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d021      	beq.n	8008100 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f06f 0208 	mvn.w	r2, #8
 80080c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2204      	movs	r2, #4
 80080ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d005      	beq.n	80080e6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
 80080e4:	e009      	b.n	80080fa <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b00      	cmp	r3, #0
 8008108:	d026      	beq.n	8008158 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d021      	beq.n	8008158 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0210 	mvn.w	r2, #16
 800811c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2208      	movs	r2, #8
 8008122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	4798      	blx	r3
 800813c:	e009      	b.n	8008152 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00e      	beq.n	8008180 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d009      	beq.n	8008180 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0201 	mvn.w	r2, #1
 8008174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00e      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80081a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00e      	beq.n	80081da <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80081ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00e      	beq.n	8008202 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80081f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00e      	beq.n	800822a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f06f 0220 	mvn.w	r2, #32
 800821e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00e      	beq.n	8008252 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d009      	beq.n	8008252 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d009      	beq.n	800827a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800826e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00e      	beq.n	80082a2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00e      	beq.n	80082ca <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80082be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e066      	b.n	80083c0 <HAL_TIM_OC_ConfigChannel+0xec>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b14      	cmp	r3, #20
 80082fe:	d857      	bhi.n	80083b0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008300:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080083b1 	.word	0x080083b1
 8008310:	080083b1 	.word	0x080083b1
 8008314:	080083b1 	.word	0x080083b1
 8008318:	0800836b 	.word	0x0800836b
 800831c:	080083b1 	.word	0x080083b1
 8008320:	080083b1 	.word	0x080083b1
 8008324:	080083b1 	.word	0x080083b1
 8008328:	08008379 	.word	0x08008379
 800832c:	080083b1 	.word	0x080083b1
 8008330:	080083b1 	.word	0x080083b1
 8008334:	080083b1 	.word	0x080083b1
 8008338:	08008387 	.word	0x08008387
 800833c:	080083b1 	.word	0x080083b1
 8008340:	080083b1 	.word	0x080083b1
 8008344:	080083b1 	.word	0x080083b1
 8008348:	08008395 	.word	0x08008395
 800834c:	080083b1 	.word	0x080083b1
 8008350:	080083b1 	.word	0x080083b1
 8008354:	080083b1 	.word	0x080083b1
 8008358:	080083a3 	.word	0x080083a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fcc8 	bl	8008cf8 <TIM_OC1_SetConfig>
      break;
 8008368:	e025      	b.n	80083b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fd5b 	bl	8008e2c <TIM_OC2_SetConfig>
      break;
 8008376:	e01e      	b.n	80083b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 fde8 	bl	8008f54 <TIM_OC3_SetConfig>
      break;
 8008384:	e017      	b.n	80083b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	4618      	mov	r0, r3
 800838e:	f000 fe73 	bl	8009078 <TIM_OC4_SetConfig>
      break;
 8008392:	e010      	b.n	80083b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68b9      	ldr	r1, [r7, #8]
 800839a:	4618      	mov	r0, r3
 800839c:	f000 ff00 	bl	80091a0 <TIM_OC5_SetConfig>
      break;
 80083a0:	e009      	b.n	80083b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68b9      	ldr	r1, [r7, #8]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 ff63 	bl	8009274 <TIM_OC6_SetConfig>
      break;
 80083ae:	e002      	b.n	80083b6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	75fb      	strb	r3, [r7, #23]
      break;
 80083b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e0ff      	b.n	80085e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b14      	cmp	r3, #20
 80083f2:	f200 80f0 	bhi.w	80085d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083f6:	a201      	add	r2, pc, #4	@ (adr r2, 80083fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	08008451 	.word	0x08008451
 8008400:	080085d7 	.word	0x080085d7
 8008404:	080085d7 	.word	0x080085d7
 8008408:	080085d7 	.word	0x080085d7
 800840c:	08008491 	.word	0x08008491
 8008410:	080085d7 	.word	0x080085d7
 8008414:	080085d7 	.word	0x080085d7
 8008418:	080085d7 	.word	0x080085d7
 800841c:	080084d3 	.word	0x080084d3
 8008420:	080085d7 	.word	0x080085d7
 8008424:	080085d7 	.word	0x080085d7
 8008428:	080085d7 	.word	0x080085d7
 800842c:	08008513 	.word	0x08008513
 8008430:	080085d7 	.word	0x080085d7
 8008434:	080085d7 	.word	0x080085d7
 8008438:	080085d7 	.word	0x080085d7
 800843c:	08008555 	.word	0x08008555
 8008440:	080085d7 	.word	0x080085d7
 8008444:	080085d7 	.word	0x080085d7
 8008448:	080085d7 	.word	0x080085d7
 800844c:	08008595 	.word	0x08008595
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68b9      	ldr	r1, [r7, #8]
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fc4e 	bl	8008cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699a      	ldr	r2, [r3, #24]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0208 	orr.w	r2, r2, #8
 800846a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f022 0204 	bic.w	r2, r2, #4
 800847a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6999      	ldr	r1, [r3, #24]
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	691a      	ldr	r2, [r3, #16]
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	619a      	str	r2, [r3, #24]
      break;
 800848e:	e0a5      	b.n	80085dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fcc8 	bl	8008e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699a      	ldr	r2, [r3, #24]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6999      	ldr	r1, [r3, #24]
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	021a      	lsls	r2, r3, #8
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	619a      	str	r2, [r3, #24]
      break;
 80084d0:	e084      	b.n	80085dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68b9      	ldr	r1, [r7, #8]
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fd3b 	bl	8008f54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	69da      	ldr	r2, [r3, #28]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0208 	orr.w	r2, r2, #8
 80084ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	69da      	ldr	r2, [r3, #28]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0204 	bic.w	r2, r2, #4
 80084fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69d9      	ldr	r1, [r3, #28]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	61da      	str	r2, [r3, #28]
      break;
 8008510:	e064      	b.n	80085dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68b9      	ldr	r1, [r7, #8]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fdad 	bl	8009078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	69da      	ldr	r2, [r3, #28]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800852c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69da      	ldr	r2, [r3, #28]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800853c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	69d9      	ldr	r1, [r3, #28]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	021a      	lsls	r2, r3, #8
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	61da      	str	r2, [r3, #28]
      break;
 8008552:	e043      	b.n	80085dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fe20 	bl	80091a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f042 0208 	orr.w	r2, r2, #8
 800856e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f022 0204 	bic.w	r2, r2, #4
 800857e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008592:	e023      	b.n	80085dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	4618      	mov	r0, r3
 800859c:	f000 fe6a 	bl	8009274 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	021a      	lsls	r2, r3, #8
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085d4:	e002      	b.n	80085dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	75fb      	strb	r3, [r7, #23]
      break;
 80085da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop

080085f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_TIM_ConfigClockSource+0x1c>
 8008608:	2302      	movs	r3, #2
 800860a:	e0f6      	b.n	80087fa <HAL_TIM_ConfigClockSource+0x20a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800862a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800862e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008636:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a6f      	ldr	r2, [pc, #444]	@ (8008804 <HAL_TIM_ConfigClockSource+0x214>)
 8008646:	4293      	cmp	r3, r2
 8008648:	f000 80c1 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 800864c:	4a6d      	ldr	r2, [pc, #436]	@ (8008804 <HAL_TIM_ConfigClockSource+0x214>)
 800864e:	4293      	cmp	r3, r2
 8008650:	f200 80c6 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008654:	4a6c      	ldr	r2, [pc, #432]	@ (8008808 <HAL_TIM_ConfigClockSource+0x218>)
 8008656:	4293      	cmp	r3, r2
 8008658:	f000 80b9 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 800865c:	4a6a      	ldr	r2, [pc, #424]	@ (8008808 <HAL_TIM_ConfigClockSource+0x218>)
 800865e:	4293      	cmp	r3, r2
 8008660:	f200 80be 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008664:	4a69      	ldr	r2, [pc, #420]	@ (800880c <HAL_TIM_ConfigClockSource+0x21c>)
 8008666:	4293      	cmp	r3, r2
 8008668:	f000 80b1 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 800866c:	4a67      	ldr	r2, [pc, #412]	@ (800880c <HAL_TIM_ConfigClockSource+0x21c>)
 800866e:	4293      	cmp	r3, r2
 8008670:	f200 80b6 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008674:	4a66      	ldr	r2, [pc, #408]	@ (8008810 <HAL_TIM_ConfigClockSource+0x220>)
 8008676:	4293      	cmp	r3, r2
 8008678:	f000 80a9 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 800867c:	4a64      	ldr	r2, [pc, #400]	@ (8008810 <HAL_TIM_ConfigClockSource+0x220>)
 800867e:	4293      	cmp	r3, r2
 8008680:	f200 80ae 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008684:	4a63      	ldr	r2, [pc, #396]	@ (8008814 <HAL_TIM_ConfigClockSource+0x224>)
 8008686:	4293      	cmp	r3, r2
 8008688:	f000 80a1 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 800868c:	4a61      	ldr	r2, [pc, #388]	@ (8008814 <HAL_TIM_ConfigClockSource+0x224>)
 800868e:	4293      	cmp	r3, r2
 8008690:	f200 80a6 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008694:	4a60      	ldr	r2, [pc, #384]	@ (8008818 <HAL_TIM_ConfigClockSource+0x228>)
 8008696:	4293      	cmp	r3, r2
 8008698:	f000 8099 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 800869c:	4a5e      	ldr	r2, [pc, #376]	@ (8008818 <HAL_TIM_ConfigClockSource+0x228>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	f200 809e 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086a8:	f000 8091 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 80086ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80086b0:	f200 8096 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086b8:	f000 8089 	beq.w	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 80086bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086c0:	f200 808e 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086c8:	d03e      	beq.n	8008748 <HAL_TIM_ConfigClockSource+0x158>
 80086ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086ce:	f200 8087 	bhi.w	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086d6:	f000 8086 	beq.w	80087e6 <HAL_TIM_ConfigClockSource+0x1f6>
 80086da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086de:	d87f      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086e0:	2b70      	cmp	r3, #112	@ 0x70
 80086e2:	d01a      	beq.n	800871a <HAL_TIM_ConfigClockSource+0x12a>
 80086e4:	2b70      	cmp	r3, #112	@ 0x70
 80086e6:	d87b      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086e8:	2b60      	cmp	r3, #96	@ 0x60
 80086ea:	d050      	beq.n	800878e <HAL_TIM_ConfigClockSource+0x19e>
 80086ec:	2b60      	cmp	r3, #96	@ 0x60
 80086ee:	d877      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086f0:	2b50      	cmp	r3, #80	@ 0x50
 80086f2:	d03c      	beq.n	800876e <HAL_TIM_ConfigClockSource+0x17e>
 80086f4:	2b50      	cmp	r3, #80	@ 0x50
 80086f6:	d873      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80086f8:	2b40      	cmp	r3, #64	@ 0x40
 80086fa:	d058      	beq.n	80087ae <HAL_TIM_ConfigClockSource+0x1be>
 80086fc:	2b40      	cmp	r3, #64	@ 0x40
 80086fe:	d86f      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008700:	2b30      	cmp	r3, #48	@ 0x30
 8008702:	d064      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 8008704:	2b30      	cmp	r3, #48	@ 0x30
 8008706:	d86b      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008708:	2b20      	cmp	r3, #32
 800870a:	d060      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 800870c:	2b20      	cmp	r3, #32
 800870e:	d867      	bhi.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8008710:	2b00      	cmp	r3, #0
 8008712:	d05c      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 8008714:	2b10      	cmp	r3, #16
 8008716:	d05a      	beq.n	80087ce <HAL_TIM_ConfigClockSource+0x1de>
 8008718:	e062      	b.n	80087e0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800872a:	f000 fe8b 	bl	8009444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800873c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	609a      	str	r2, [r3, #8]
      break;
 8008746:	e04f      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008758:	f000 fe74 	bl	8009444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800876a:	609a      	str	r2, [r3, #8]
      break;
 800876c:	e03c      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800877a:	461a      	mov	r2, r3
 800877c:	f000 fde6 	bl	800934c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2150      	movs	r1, #80	@ 0x50
 8008786:	4618      	mov	r0, r3
 8008788:	f000 fe3f 	bl	800940a <TIM_ITRx_SetConfig>
      break;
 800878c:	e02c      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800879a:	461a      	mov	r2, r3
 800879c:	f000 fe05 	bl	80093aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2160      	movs	r1, #96	@ 0x60
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fe2f 	bl	800940a <TIM_ITRx_SetConfig>
      break;
 80087ac:	e01c      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087ba:	461a      	mov	r2, r3
 80087bc:	f000 fdc6 	bl	800934c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2140      	movs	r1, #64	@ 0x40
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fe1f 	bl	800940a <TIM_ITRx_SetConfig>
      break;
 80087cc:	e00c      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f000 fe16 	bl	800940a <TIM_ITRx_SetConfig>
      break;
 80087de:	e003      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
      break;
 80087e4:	e000      	b.n	80087e8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80087e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	00100070 	.word	0x00100070
 8008808:	00100060 	.word	0x00100060
 800880c:	00100050 	.word	0x00100050
 8008810:	00100040 	.word	0x00100040
 8008814:	00100030 	.word	0x00100030
 8008818:	00100020 	.word	0x00100020

0800881c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008824:	bf00      	nop
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr

08008830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800884c:	bf00      	nop
 800884e:	370c      	adds	r7, #12
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80088b0:	bf00      	nop
 80088b2:	370c      	adds	r7, #12
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	460b      	mov	r3, r1
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e14a      	b.n	8008b82 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	f040 80dd 	bne.w	8008ab4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80088fa:	7afb      	ldrb	r3, [r7, #11]
 80088fc:	2b1f      	cmp	r3, #31
 80088fe:	f200 80d6 	bhi.w	8008aae <HAL_TIM_RegisterCallback+0x1de>
 8008902:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <HAL_TIM_RegisterCallback+0x38>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008989 	.word	0x08008989
 800890c:	08008991 	.word	0x08008991
 8008910:	08008999 	.word	0x08008999
 8008914:	080089a1 	.word	0x080089a1
 8008918:	080089a9 	.word	0x080089a9
 800891c:	080089b1 	.word	0x080089b1
 8008920:	080089b9 	.word	0x080089b9
 8008924:	080089c1 	.word	0x080089c1
 8008928:	080089c9 	.word	0x080089c9
 800892c:	080089d1 	.word	0x080089d1
 8008930:	080089d9 	.word	0x080089d9
 8008934:	080089e1 	.word	0x080089e1
 8008938:	080089e9 	.word	0x080089e9
 800893c:	080089f1 	.word	0x080089f1
 8008940:	080089fb 	.word	0x080089fb
 8008944:	08008a05 	.word	0x08008a05
 8008948:	08008a0f 	.word	0x08008a0f
 800894c:	08008a19 	.word	0x08008a19
 8008950:	08008a23 	.word	0x08008a23
 8008954:	08008a2d 	.word	0x08008a2d
 8008958:	08008a37 	.word	0x08008a37
 800895c:	08008a41 	.word	0x08008a41
 8008960:	08008a4b 	.word	0x08008a4b
 8008964:	08008a55 	.word	0x08008a55
 8008968:	08008a5f 	.word	0x08008a5f
 800896c:	08008a69 	.word	0x08008a69
 8008970:	08008a73 	.word	0x08008a73
 8008974:	08008a7d 	.word	0x08008a7d
 8008978:	08008a87 	.word	0x08008a87
 800897c:	08008a91 	.word	0x08008a91
 8008980:	08008a9b 	.word	0x08008a9b
 8008984:	08008aa5 	.word	0x08008aa5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800898e:	e0f7      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008996:	e0f3      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800899e:	e0ef      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80089a6:	e0eb      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80089ae:	e0e7      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80089b6:	e0e3      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80089be:	e0df      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80089c6:	e0db      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80089ce:	e0d7      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80089d6:	e0d3      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80089de:	e0cf      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80089e6:	e0cb      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80089ee:	e0c7      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089f8:	e0c2      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008a02:	e0bd      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008a0c:	e0b8      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008a16:	e0b3      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008a20:	e0ae      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008a2a:	e0a9      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008a34:	e0a4      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008a3e:	e09f      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008a48:	e09a      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a52:	e095      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a5c:	e090      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a66:	e08b      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a70:	e086      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a7a:	e081      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a84:	e07c      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a8e:	e077      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008a98:	e072      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008aa2:	e06d      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008aac:	e068      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	75fb      	strb	r3, [r7, #23]
        break;
 8008ab2:	e065      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d15d      	bne.n	8008b7c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008ac0:	7afb      	ldrb	r3, [r7, #11]
 8008ac2:	2b0d      	cmp	r3, #13
 8008ac4:	d857      	bhi.n	8008b76 <HAL_TIM_RegisterCallback+0x2a6>
 8008ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8008acc <HAL_TIM_RegisterCallback+0x1fc>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008b05 	.word	0x08008b05
 8008ad0:	08008b0d 	.word	0x08008b0d
 8008ad4:	08008b15 	.word	0x08008b15
 8008ad8:	08008b1d 	.word	0x08008b1d
 8008adc:	08008b25 	.word	0x08008b25
 8008ae0:	08008b2d 	.word	0x08008b2d
 8008ae4:	08008b35 	.word	0x08008b35
 8008ae8:	08008b3d 	.word	0x08008b3d
 8008aec:	08008b45 	.word	0x08008b45
 8008af0:	08008b4d 	.word	0x08008b4d
 8008af4:	08008b55 	.word	0x08008b55
 8008af8:	08008b5d 	.word	0x08008b5d
 8008afc:	08008b65 	.word	0x08008b65
 8008b00:	08008b6d 	.word	0x08008b6d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008b0a:	e039      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008b12:	e035      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008b1a:	e031      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008b22:	e02d      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008b2a:	e029      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008b32:	e025      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008b3a:	e021      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008b42:	e01d      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008b4a:	e019      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008b52:	e015      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b5a:	e011      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b62:	e00d      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b6a:	e009      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b74:	e004      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	75fb      	strb	r3, [r7, #23]
        break;
 8008b7a:	e001      	b.n	8008b80 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop

08008b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a4c      	ldr	r2, [pc, #304]	@ (8008cd4 <TIM_Base_SetConfig+0x144>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d017      	beq.n	8008bd8 <TIM_Base_SetConfig+0x48>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bae:	d013      	beq.n	8008bd8 <TIM_Base_SetConfig+0x48>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a49      	ldr	r2, [pc, #292]	@ (8008cd8 <TIM_Base_SetConfig+0x148>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00f      	beq.n	8008bd8 <TIM_Base_SetConfig+0x48>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	4a48      	ldr	r2, [pc, #288]	@ (8008cdc <TIM_Base_SetConfig+0x14c>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00b      	beq.n	8008bd8 <TIM_Base_SetConfig+0x48>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a47      	ldr	r2, [pc, #284]	@ (8008ce0 <TIM_Base_SetConfig+0x150>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d007      	beq.n	8008bd8 <TIM_Base_SetConfig+0x48>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a46      	ldr	r2, [pc, #280]	@ (8008ce4 <TIM_Base_SetConfig+0x154>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d003      	beq.n	8008bd8 <TIM_Base_SetConfig+0x48>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a45      	ldr	r2, [pc, #276]	@ (8008ce8 <TIM_Base_SetConfig+0x158>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d108      	bne.n	8008bea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a39      	ldr	r2, [pc, #228]	@ (8008cd4 <TIM_Base_SetConfig+0x144>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d023      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf8:	d01f      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a36      	ldr	r2, [pc, #216]	@ (8008cd8 <TIM_Base_SetConfig+0x148>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d01b      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a35      	ldr	r2, [pc, #212]	@ (8008cdc <TIM_Base_SetConfig+0x14c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d017      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a34      	ldr	r2, [pc, #208]	@ (8008ce0 <TIM_Base_SetConfig+0x150>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d013      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a33      	ldr	r2, [pc, #204]	@ (8008ce4 <TIM_Base_SetConfig+0x154>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d00f      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a33      	ldr	r2, [pc, #204]	@ (8008cec <TIM_Base_SetConfig+0x15c>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00b      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a32      	ldr	r2, [pc, #200]	@ (8008cf0 <TIM_Base_SetConfig+0x160>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d007      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a31      	ldr	r2, [pc, #196]	@ (8008cf4 <TIM_Base_SetConfig+0x164>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_Base_SetConfig+0xaa>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a2c      	ldr	r2, [pc, #176]	@ (8008ce8 <TIM_Base_SetConfig+0x158>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d108      	bne.n	8008c4c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a18      	ldr	r2, [pc, #96]	@ (8008cd4 <TIM_Base_SetConfig+0x144>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d013      	beq.n	8008ca0 <TIM_Base_SetConfig+0x110>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ce4 <TIM_Base_SetConfig+0x154>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d00f      	beq.n	8008ca0 <TIM_Base_SetConfig+0x110>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a1a      	ldr	r2, [pc, #104]	@ (8008cec <TIM_Base_SetConfig+0x15c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d00b      	beq.n	8008ca0 <TIM_Base_SetConfig+0x110>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a19      	ldr	r2, [pc, #100]	@ (8008cf0 <TIM_Base_SetConfig+0x160>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d007      	beq.n	8008ca0 <TIM_Base_SetConfig+0x110>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a18      	ldr	r2, [pc, #96]	@ (8008cf4 <TIM_Base_SetConfig+0x164>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d003      	beq.n	8008ca0 <TIM_Base_SetConfig+0x110>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a13      	ldr	r2, [pc, #76]	@ (8008ce8 <TIM_Base_SetConfig+0x158>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d103      	bne.n	8008ca8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d105      	bne.n	8008cc6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f023 0201 	bic.w	r2, r3, #1
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	611a      	str	r2, [r3, #16]
  }
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	40012c00 	.word	0x40012c00
 8008cd8:	40000400 	.word	0x40000400
 8008cdc:	40000800 	.word	0x40000800
 8008ce0:	40000c00 	.word	0x40000c00
 8008ce4:	40013400 	.word	0x40013400
 8008ce8:	40015000 	.word	0x40015000
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40014400 	.word	0x40014400
 8008cf4:	40014800 	.word	0x40014800

08008cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1b      	ldr	r3, [r3, #32]
 8008d06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a1b      	ldr	r3, [r3, #32]
 8008d0c:	f023 0201 	bic.w	r2, r3, #1
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0303 	bic.w	r3, r3, #3
 8008d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f023 0302 	bic.w	r3, r3, #2
 8008d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a30      	ldr	r2, [pc, #192]	@ (8008e14 <TIM_OC1_SetConfig+0x11c>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d013      	beq.n	8008d80 <TIM_OC1_SetConfig+0x88>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8008e18 <TIM_OC1_SetConfig+0x120>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00f      	beq.n	8008d80 <TIM_OC1_SetConfig+0x88>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a2e      	ldr	r2, [pc, #184]	@ (8008e1c <TIM_OC1_SetConfig+0x124>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d00b      	beq.n	8008d80 <TIM_OC1_SetConfig+0x88>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8008e20 <TIM_OC1_SetConfig+0x128>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d007      	beq.n	8008d80 <TIM_OC1_SetConfig+0x88>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a2c      	ldr	r2, [pc, #176]	@ (8008e24 <TIM_OC1_SetConfig+0x12c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d003      	beq.n	8008d80 <TIM_OC1_SetConfig+0x88>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8008e28 <TIM_OC1_SetConfig+0x130>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d10c      	bne.n	8008d9a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	f023 0308 	bic.w	r3, r3, #8
 8008d86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f023 0304 	bic.w	r3, r3, #4
 8008d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8008e14 <TIM_OC1_SetConfig+0x11c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d013      	beq.n	8008dca <TIM_OC1_SetConfig+0xd2>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a1c      	ldr	r2, [pc, #112]	@ (8008e18 <TIM_OC1_SetConfig+0x120>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00f      	beq.n	8008dca <TIM_OC1_SetConfig+0xd2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a1b      	ldr	r2, [pc, #108]	@ (8008e1c <TIM_OC1_SetConfig+0x124>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00b      	beq.n	8008dca <TIM_OC1_SetConfig+0xd2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a1a      	ldr	r2, [pc, #104]	@ (8008e20 <TIM_OC1_SetConfig+0x128>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d007      	beq.n	8008dca <TIM_OC1_SetConfig+0xd2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a19      	ldr	r2, [pc, #100]	@ (8008e24 <TIM_OC1_SetConfig+0x12c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d003      	beq.n	8008dca <TIM_OC1_SetConfig+0xd2>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a18      	ldr	r2, [pc, #96]	@ (8008e28 <TIM_OC1_SetConfig+0x130>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d111      	bne.n	8008dee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	693a      	ldr	r2, [r7, #16]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	68fa      	ldr	r2, [r7, #12]
 8008df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	621a      	str	r2, [r3, #32]
}
 8008e08:	bf00      	nop
 8008e0a:	371c      	adds	r7, #28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr
 8008e14:	40012c00 	.word	0x40012c00
 8008e18:	40013400 	.word	0x40013400
 8008e1c:	40014000 	.word	0x40014000
 8008e20:	40014400 	.word	0x40014400
 8008e24:	40014800 	.word	0x40014800
 8008e28:	40015000 	.word	0x40015000

08008e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a1b      	ldr	r3, [r3, #32]
 8008e40:	f023 0210 	bic.w	r2, r3, #16
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f023 0320 	bic.w	r3, r3, #32
 8008e7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	011b      	lsls	r3, r3, #4
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8008f3c <TIM_OC2_SetConfig+0x110>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d007      	beq.n	8008ea0 <TIM_OC2_SetConfig+0x74>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a2b      	ldr	r2, [pc, #172]	@ (8008f40 <TIM_OC2_SetConfig+0x114>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d003      	beq.n	8008ea0 <TIM_OC2_SetConfig+0x74>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f44 <TIM_OC2_SetConfig+0x118>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d10d      	bne.n	8008ebc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8008f3c <TIM_OC2_SetConfig+0x110>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d013      	beq.n	8008eec <TIM_OC2_SetConfig+0xc0>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8008f40 <TIM_OC2_SetConfig+0x114>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d00f      	beq.n	8008eec <TIM_OC2_SetConfig+0xc0>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a1e      	ldr	r2, [pc, #120]	@ (8008f48 <TIM_OC2_SetConfig+0x11c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d00b      	beq.n	8008eec <TIM_OC2_SetConfig+0xc0>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f4c <TIM_OC2_SetConfig+0x120>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d007      	beq.n	8008eec <TIM_OC2_SetConfig+0xc0>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a1c      	ldr	r2, [pc, #112]	@ (8008f50 <TIM_OC2_SetConfig+0x124>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d003      	beq.n	8008eec <TIM_OC2_SetConfig+0xc0>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a17      	ldr	r2, [pc, #92]	@ (8008f44 <TIM_OC2_SetConfig+0x118>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d113      	bne.n	8008f14 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	621a      	str	r2, [r3, #32]
}
 8008f2e:	bf00      	nop
 8008f30:	371c      	adds	r7, #28
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40012c00 	.word	0x40012c00
 8008f40:	40013400 	.word	0x40013400
 8008f44:	40015000 	.word	0x40015000
 8008f48:	40014000 	.word	0x40014000
 8008f4c:	40014400 	.word	0x40014400
 8008f50:	40014800 	.word	0x40014800

08008f54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a1b      	ldr	r3, [r3, #32]
 8008f62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a2b      	ldr	r2, [pc, #172]	@ (8009060 <TIM_OC3_SetConfig+0x10c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d007      	beq.n	8008fc6 <TIM_OC3_SetConfig+0x72>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a2a      	ldr	r2, [pc, #168]	@ (8009064 <TIM_OC3_SetConfig+0x110>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_OC3_SetConfig+0x72>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a29      	ldr	r2, [pc, #164]	@ (8009068 <TIM_OC3_SetConfig+0x114>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d10d      	bne.n	8008fe2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8009060 <TIM_OC3_SetConfig+0x10c>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d013      	beq.n	8009012 <TIM_OC3_SetConfig+0xbe>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a1d      	ldr	r2, [pc, #116]	@ (8009064 <TIM_OC3_SetConfig+0x110>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d00f      	beq.n	8009012 <TIM_OC3_SetConfig+0xbe>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800906c <TIM_OC3_SetConfig+0x118>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00b      	beq.n	8009012 <TIM_OC3_SetConfig+0xbe>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8009070 <TIM_OC3_SetConfig+0x11c>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d007      	beq.n	8009012 <TIM_OC3_SetConfig+0xbe>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a1b      	ldr	r2, [pc, #108]	@ (8009074 <TIM_OC3_SetConfig+0x120>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d003      	beq.n	8009012 <TIM_OC3_SetConfig+0xbe>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a16      	ldr	r2, [pc, #88]	@ (8009068 <TIM_OC3_SetConfig+0x114>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d113      	bne.n	800903a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	4313      	orrs	r3, r2
 800902c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4313      	orrs	r3, r2
 8009038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	621a      	str	r2, [r3, #32]
}
 8009054:	bf00      	nop
 8009056:	371c      	adds	r7, #28
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	40012c00 	.word	0x40012c00
 8009064:	40013400 	.word	0x40013400
 8009068:	40015000 	.word	0x40015000
 800906c:	40014000 	.word	0x40014000
 8009070:	40014400 	.word	0x40014400
 8009074:	40014800 	.word	0x40014800

08009078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	021b      	lsls	r3, r3, #8
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80090c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	031b      	lsls	r3, r3, #12
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a2c      	ldr	r2, [pc, #176]	@ (8009188 <TIM_OC4_SetConfig+0x110>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d007      	beq.n	80090ec <TIM_OC4_SetConfig+0x74>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a2b      	ldr	r2, [pc, #172]	@ (800918c <TIM_OC4_SetConfig+0x114>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d003      	beq.n	80090ec <TIM_OC4_SetConfig+0x74>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009190 <TIM_OC4_SetConfig+0x118>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d10d      	bne.n	8009108 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	68db      	ldr	r3, [r3, #12]
 80090f8:	031b      	lsls	r3, r3, #12
 80090fa:	697a      	ldr	r2, [r7, #20]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009106:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a1f      	ldr	r2, [pc, #124]	@ (8009188 <TIM_OC4_SetConfig+0x110>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d013      	beq.n	8009138 <TIM_OC4_SetConfig+0xc0>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4a1e      	ldr	r2, [pc, #120]	@ (800918c <TIM_OC4_SetConfig+0x114>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d00f      	beq.n	8009138 <TIM_OC4_SetConfig+0xc0>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a1e      	ldr	r2, [pc, #120]	@ (8009194 <TIM_OC4_SetConfig+0x11c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d00b      	beq.n	8009138 <TIM_OC4_SetConfig+0xc0>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a1d      	ldr	r2, [pc, #116]	@ (8009198 <TIM_OC4_SetConfig+0x120>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d007      	beq.n	8009138 <TIM_OC4_SetConfig+0xc0>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a1c      	ldr	r2, [pc, #112]	@ (800919c <TIM_OC4_SetConfig+0x124>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d003      	beq.n	8009138 <TIM_OC4_SetConfig+0xc0>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a17      	ldr	r2, [pc, #92]	@ (8009190 <TIM_OC4_SetConfig+0x118>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d113      	bne.n	8009160 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800913e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009146:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	019b      	lsls	r3, r3, #6
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	4313      	orrs	r3, r2
 8009152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	019b      	lsls	r3, r3, #6
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	697a      	ldr	r2, [r7, #20]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40012c00 	.word	0x40012c00
 800918c:	40013400 	.word	0x40013400
 8009190:	40015000 	.word	0x40015000
 8009194:	40014000 	.word	0x40014000
 8009198:	40014400 	.word	0x40014400
 800919c:	40014800 	.word	0x40014800

080091a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6a1b      	ldr	r3, [r3, #32]
 80091b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80091e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	041b      	lsls	r3, r3, #16
 80091ec:	693a      	ldr	r2, [r7, #16]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4a19      	ldr	r2, [pc, #100]	@ (800925c <TIM_OC5_SetConfig+0xbc>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d013      	beq.n	8009222 <TIM_OC5_SetConfig+0x82>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a18      	ldr	r2, [pc, #96]	@ (8009260 <TIM_OC5_SetConfig+0xc0>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d00f      	beq.n	8009222 <TIM_OC5_SetConfig+0x82>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a17      	ldr	r2, [pc, #92]	@ (8009264 <TIM_OC5_SetConfig+0xc4>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00b      	beq.n	8009222 <TIM_OC5_SetConfig+0x82>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a16      	ldr	r2, [pc, #88]	@ (8009268 <TIM_OC5_SetConfig+0xc8>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d007      	beq.n	8009222 <TIM_OC5_SetConfig+0x82>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a15      	ldr	r2, [pc, #84]	@ (800926c <TIM_OC5_SetConfig+0xcc>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_OC5_SetConfig+0x82>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a14      	ldr	r2, [pc, #80]	@ (8009270 <TIM_OC5_SetConfig+0xd0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d109      	bne.n	8009236 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	4313      	orrs	r3, r2
 8009234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	621a      	str	r2, [r3, #32]
}
 8009250:	bf00      	nop
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	40012c00 	.word	0x40012c00
 8009260:	40013400 	.word	0x40013400
 8009264:	40014000 	.word	0x40014000
 8009268:	40014400 	.word	0x40014400
 800926c:	40014800 	.word	0x40014800
 8009270:	40015000 	.word	0x40015000

08009274 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6a1b      	ldr	r3, [r3, #32]
 8009288:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80092ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	051b      	lsls	r3, r3, #20
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a1a      	ldr	r2, [pc, #104]	@ (8009334 <TIM_OC6_SetConfig+0xc0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d013      	beq.n	80092f8 <TIM_OC6_SetConfig+0x84>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a19      	ldr	r2, [pc, #100]	@ (8009338 <TIM_OC6_SetConfig+0xc4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d00f      	beq.n	80092f8 <TIM_OC6_SetConfig+0x84>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a18      	ldr	r2, [pc, #96]	@ (800933c <TIM_OC6_SetConfig+0xc8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d00b      	beq.n	80092f8 <TIM_OC6_SetConfig+0x84>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a17      	ldr	r2, [pc, #92]	@ (8009340 <TIM_OC6_SetConfig+0xcc>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d007      	beq.n	80092f8 <TIM_OC6_SetConfig+0x84>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a16      	ldr	r2, [pc, #88]	@ (8009344 <TIM_OC6_SetConfig+0xd0>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d003      	beq.n	80092f8 <TIM_OC6_SetConfig+0x84>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a15      	ldr	r2, [pc, #84]	@ (8009348 <TIM_OC6_SetConfig+0xd4>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d109      	bne.n	800930c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	029b      	lsls	r3, r3, #10
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	4313      	orrs	r3, r2
 800930a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	621a      	str	r2, [r3, #32]
}
 8009326:	bf00      	nop
 8009328:	371c      	adds	r7, #28
 800932a:	46bd      	mov	sp, r7
 800932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	40012c00 	.word	0x40012c00
 8009338:	40013400 	.word	0x40013400
 800933c:	40014000 	.word	0x40014000
 8009340:	40014400 	.word	0x40014400
 8009344:	40014800 	.word	0x40014800
 8009348:	40015000 	.word	0x40015000

0800934c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800934c:	b480      	push	{r7}
 800934e:	b087      	sub	sp, #28
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a1b      	ldr	r3, [r3, #32]
 8009362:	f023 0201 	bic.w	r2, r3, #1
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4313      	orrs	r3, r2
 8009380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f023 030a 	bic.w	r3, r3, #10
 8009388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800938a:	697a      	ldr	r2, [r7, #20]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	621a      	str	r2, [r3, #32]
}
 800939e:	bf00      	nop
 80093a0:	371c      	adds	r7, #28
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b087      	sub	sp, #28
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	60f8      	str	r0, [r7, #12]
 80093b2:	60b9      	str	r1, [r7, #8]
 80093b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	f023 0210 	bic.w	r2, r3, #16
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80093d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	031b      	lsls	r3, r3, #12
 80093da:	693a      	ldr	r2, [r7, #16]
 80093dc:	4313      	orrs	r3, r2
 80093de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80093e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	011b      	lsls	r3, r3, #4
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	697a      	ldr	r2, [r7, #20]
 80093fc:	621a      	str	r2, [r3, #32]
}
 80093fe:	bf00      	nop
 8009400:	371c      	adds	r7, #28
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800940a:	b480      	push	{r7}
 800940c:	b085      	sub	sp, #20
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009426:	683a      	ldr	r2, [r7, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4313      	orrs	r3, r2
 800942c:	f043 0307 	orr.w	r3, r3, #7
 8009430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	609a      	str	r2, [r3, #8]
}
 8009438:	bf00      	nop
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800945e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	021a      	lsls	r2, r3, #8
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	431a      	orrs	r2, r3
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	4313      	orrs	r3, r2
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	4313      	orrs	r3, r2
 8009470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	609a      	str	r2, [r3, #8]
}
 8009478:	bf00      	nop
 800947a:	371c      	adds	r7, #28
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	2201      	movs	r2, #1
 8009498:	fa02 f303 	lsl.w	r3, r2, r3
 800949c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6a1a      	ldr	r2, [r3, #32]
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	43db      	mvns	r3, r3
 80094a6:	401a      	ands	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6a1a      	ldr	r2, [r3, #32]
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f003 031f 	and.w	r3, r3, #31
 80094b6:	6879      	ldr	r1, [r7, #4]
 80094b8:	fa01 f303 	lsl.w	r3, r1, r3
 80094bc:	431a      	orrs	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	621a      	str	r2, [r3, #32]
}
 80094c2:	bf00      	nop
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
	...

080094d0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a26      	ldr	r2, [pc, #152]	@ (8009574 <TIM_ResetCallback+0xa4>)
 80094dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a25      	ldr	r2, [pc, #148]	@ (8009578 <TIM_ResetCallback+0xa8>)
 80094e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a24      	ldr	r2, [pc, #144]	@ (800957c <TIM_ResetCallback+0xac>)
 80094ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a23      	ldr	r2, [pc, #140]	@ (8009580 <TIM_ResetCallback+0xb0>)
 80094f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a22      	ldr	r2, [pc, #136]	@ (8009584 <TIM_ResetCallback+0xb4>)
 80094fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a21      	ldr	r2, [pc, #132]	@ (8009588 <TIM_ResetCallback+0xb8>)
 8009504:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a20      	ldr	r2, [pc, #128]	@ (800958c <TIM_ResetCallback+0xbc>)
 800950c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a1f      	ldr	r2, [pc, #124]	@ (8009590 <TIM_ResetCallback+0xc0>)
 8009514:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a1e      	ldr	r2, [pc, #120]	@ (8009594 <TIM_ResetCallback+0xc4>)
 800951c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1d      	ldr	r2, [pc, #116]	@ (8009598 <TIM_ResetCallback+0xc8>)
 8009524:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1c      	ldr	r2, [pc, #112]	@ (800959c <TIM_ResetCallback+0xcc>)
 800952c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a1b      	ldr	r2, [pc, #108]	@ (80095a0 <TIM_ResetCallback+0xd0>)
 8009534:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a1a      	ldr	r2, [pc, #104]	@ (80095a4 <TIM_ResetCallback+0xd4>)
 800953c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a19      	ldr	r2, [pc, #100]	@ (80095a8 <TIM_ResetCallback+0xd8>)
 8009544:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a18      	ldr	r2, [pc, #96]	@ (80095ac <TIM_ResetCallback+0xdc>)
 800954c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a17      	ldr	r2, [pc, #92]	@ (80095b0 <TIM_ResetCallback+0xe0>)
 8009554:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a16      	ldr	r2, [pc, #88]	@ (80095b4 <TIM_ResetCallback+0xe4>)
 800955c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a15      	ldr	r2, [pc, #84]	@ (80095b8 <TIM_ResetCallback+0xe8>)
 8009564:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	08003299 	.word	0x08003299
 8009578:	0800881d 	.word	0x0800881d
 800957c:	08008895 	.word	0x08008895
 8009580:	080088a9 	.word	0x080088a9
 8009584:	08008845 	.word	0x08008845
 8009588:	08008859 	.word	0x08008859
 800958c:	08008831 	.word	0x08008831
 8009590:	0800886d 	.word	0x0800886d
 8009594:	08008881 	.word	0x08008881
 8009598:	080088bd 	.word	0x080088bd
 800959c:	08009811 	.word	0x08009811
 80095a0:	08009825 	.word	0x08009825
 80095a4:	08009839 	.word	0x08009839
 80095a8:	0800984d 	.word	0x0800984d
 80095ac:	08009861 	.word	0x08009861
 80095b0:	08009875 	.word	0x08009875
 80095b4:	08009889 	.word	0x08009889
 80095b8:	0800989d 	.word	0x0800989d

080095bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d101      	bne.n	80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095d0:	2302      	movs	r3, #2
 80095d2:	e074      	b.n	80096be <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a34      	ldr	r2, [pc, #208]	@ (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d009      	beq.n	8009612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a33      	ldr	r2, [pc, #204]	@ (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d004      	beq.n	8009612 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a31      	ldr	r2, [pc, #196]	@ (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d108      	bne.n	8009624 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009618:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	4313      	orrs	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800962a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800962e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a21      	ldr	r2, [pc, #132]	@ (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d022      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009654:	d01d      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1f      	ldr	r2, [pc, #124]	@ (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d018      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1d      	ldr	r2, [pc, #116]	@ (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d013      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a1c      	ldr	r2, [pc, #112]	@ (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d00e      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a15      	ldr	r2, [pc, #84]	@ (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d009      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a18      	ldr	r2, [pc, #96]	@ (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d004      	beq.n	8009692 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a11      	ldr	r2, [pc, #68]	@ (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d10c      	bne.n	80096ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	68ba      	ldr	r2, [r7, #8]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	40012c00 	.word	0x40012c00
 80096d0:	40013400 	.word	0x40013400
 80096d4:	40015000 	.word	0x40015000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40014000 	.word	0x40014000

080096e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009700:	2302      	movs	r3, #2
 8009702:	e078      	b.n	80097f6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	4313      	orrs	r3, r2
 8009718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	695b      	ldr	r3, [r3, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800976a:	4313      	orrs	r3, r2
 800976c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	041b      	lsls	r3, r3, #16
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	4313      	orrs	r3, r2
 800978a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1c      	ldr	r2, [pc, #112]	@ (8009804 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d009      	beq.n	80097aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a1b      	ldr	r2, [pc, #108]	@ (8009808 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d004      	beq.n	80097aa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a19      	ldr	r2, [pc, #100]	@ (800980c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d11c      	bne.n	80097e4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b4:	051b      	lsls	r3, r3, #20
 80097b6:	4313      	orrs	r3, r2
 80097b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40013400 	.word	0x40013400
 800980c:	40015000 	.word	0x40015000

08009810 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009854:	bf00      	nop
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009868:	bf00      	nop
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009874:	b480      	push	{r7}
 8009876:	b083      	sub	sp, #12
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800987c:	bf00      	nop
 800987e:	370c      	adds	r7, #12
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098a4:	bf00      	nop
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b082      	sub	sp, #8
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e050      	b.n	8009964 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d114      	bne.n	80098f6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fe37 	bl	800a548 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d103      	bne.n	80098ec <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	4a21      	ldr	r2, [pc, #132]	@ (800996c <HAL_UART_Init+0xbc>)
 80098e8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2224      	movs	r2, #36	@ 0x24
 80098fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f022 0201 	bic.w	r2, r2, #1
 800990c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 f964 	bl	800abe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fe65 	bl	800a5ec <UART_SetConfig>
 8009922:	4603      	mov	r3, r0
 8009924:	2b01      	cmp	r3, #1
 8009926:	d101      	bne.n	800992c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e01b      	b.n	8009964 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800993a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800994a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0201 	orr.w	r2, r2, #1
 800995a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 f9e3 	bl	800ad28 <UART_CheckIdleState>
 8009962:	4603      	mov	r3, r0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3708      	adds	r7, #8
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	08003f7d 	.word	0x08003f7d

08009970 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009970:	b480      	push	{r7}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60f8      	str	r0, [r7, #12]
 8009978:	460b      	mov	r3, r1
 800997a:	607a      	str	r2, [r7, #4]
 800997c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d109      	bne.n	800999c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800998e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e09c      	b.n	8009ad6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099a2:	2b20      	cmp	r3, #32
 80099a4:	d16c      	bne.n	8009a80 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80099a6:	7afb      	ldrb	r3, [r7, #11]
 80099a8:	2b0c      	cmp	r3, #12
 80099aa:	d85e      	bhi.n	8009a6a <HAL_UART_RegisterCallback+0xfa>
 80099ac:	a201      	add	r2, pc, #4	@ (adr r2, 80099b4 <HAL_UART_RegisterCallback+0x44>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099e9 	.word	0x080099e9
 80099b8:	080099f3 	.word	0x080099f3
 80099bc:	080099fd 	.word	0x080099fd
 80099c0:	08009a07 	.word	0x08009a07
 80099c4:	08009a11 	.word	0x08009a11
 80099c8:	08009a1b 	.word	0x08009a1b
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a2f 	.word	0x08009a2f
 80099d4:	08009a39 	.word	0x08009a39
 80099d8:	08009a43 	.word	0x08009a43
 80099dc:	08009a4d 	.word	0x08009a4d
 80099e0:	08009a57 	.word	0x08009a57
 80099e4:	08009a61 	.word	0x08009a61
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80099f0:	e070      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80099fa:	e06b      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009a04:	e066      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009a0e:	e061      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009a18:	e05c      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009a22:	e057      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009a2c:	e052      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009a36:	e04d      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009a40:	e048      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009a4a:	e043      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009a54:	e03e      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009a5e:	e039      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009a68:	e034      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	75fb      	strb	r3, [r7, #23]
        break;
 8009a7e:	e029      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d11a      	bne.n	8009ac0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	2b0b      	cmp	r3, #11
 8009a8e:	d002      	beq.n	8009a96 <HAL_UART_RegisterCallback+0x126>
 8009a90:	2b0c      	cmp	r3, #12
 8009a92:	d005      	beq.n	8009aa0 <HAL_UART_RegisterCallback+0x130>
 8009a94:	e009      	b.n	8009aaa <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009a9e:	e019      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009aa8:	e014      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75fb      	strb	r3, [r7, #23]
        break;
 8009abe:	e009      	b.n	8009ad4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ac6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	371c      	adds	r7, #28
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop

08009ae4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	@ 0x28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d137      	bne.n	8009b6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d002      	beq.n	8009b08 <HAL_UART_Receive_IT+0x24>
 8009b02:	88fb      	ldrh	r3, [r7, #6]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e030      	b.n	8009b6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a18      	ldr	r2, [pc, #96]	@ (8009b78 <HAL_UART_Receive_IT+0x94>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d01f      	beq.n	8009b5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d018      	beq.n	8009b5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	613b      	str	r3, [r7, #16]
   return(result);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	623b      	str	r3, [r7, #32]
 8009b4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	69f9      	ldr	r1, [r7, #28]
 8009b4e:	6a3a      	ldr	r2, [r7, #32]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e6      	bne.n	8009b2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b5c:	88fb      	ldrh	r3, [r7, #6]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f001 f9f8 	bl	800af58 <UART_Start_Receive_IT>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	e000      	b.n	8009b6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b6c:	2302      	movs	r3, #2
  }
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3728      	adds	r7, #40	@ 0x28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40008000 	.word	0x40008000

08009b7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08a      	sub	sp, #40	@ 0x28
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	4613      	mov	r3, r2
 8009b88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b90:	2b20      	cmp	r3, #32
 8009b92:	d167      	bne.n	8009c64 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d002      	beq.n	8009ba0 <HAL_UART_Transmit_DMA+0x24>
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e060      	b.n	8009c66 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	88fa      	ldrh	r2, [r7, #6]
 8009bae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	88fa      	ldrh	r2, [r7, #6]
 8009bb6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2221      	movs	r2, #33	@ 0x21
 8009bc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d028      	beq.n	8009c24 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bd6:	4a26      	ldr	r2, [pc, #152]	@ (8009c70 <HAL_UART_Transmit_DMA+0xf4>)
 8009bd8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bde:	4a25      	ldr	r2, [pc, #148]	@ (8009c74 <HAL_UART_Transmit_DMA+0xf8>)
 8009be0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009be6:	4a24      	ldr	r2, [pc, #144]	@ (8009c78 <HAL_UART_Transmit_DMA+0xfc>)
 8009be8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009bee:	2200      	movs	r2, #0
 8009bf0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	3328      	adds	r3, #40	@ 0x28
 8009c02:	461a      	mov	r2, r3
 8009c04:	88fb      	ldrh	r3, [r7, #6]
 8009c06:	f7fb ff55 	bl	8005ab4 <HAL_DMA_Start_IT>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d009      	beq.n	8009c24 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2210      	movs	r2, #16
 8009c14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8009c20:	2301      	movs	r3, #1
 8009c22:	e020      	b.n	8009c66 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2240      	movs	r2, #64	@ 0x40
 8009c2a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3308      	adds	r3, #8
 8009c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3308      	adds	r3, #8
 8009c4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c4c:	623a      	str	r2, [r7, #32]
 8009c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	69f9      	ldr	r1, [r7, #28]
 8009c52:	6a3a      	ldr	r2, [r7, #32]
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e5      	bne.n	8009c2c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	e000      	b.n	8009c66 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009c64:	2302      	movs	r3, #2
  }
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3728      	adds	r7, #40	@ 0x28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	0800b2eb 	.word	0x0800b2eb
 8009c74:	0800b389 	.word	0x0800b389
 8009c78:	0800b3a9 	.word	0x0800b3a9

08009c7c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b09a      	sub	sp, #104	@ 0x68
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c8c:	e853 3f00 	ldrex	r3, [r3]
 8009c90:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c98:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ca2:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ca4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ca8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009caa:	e841 2300 	strex	r3, r2, [r1]
 8009cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1e6      	bne.n	8009c84 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	3308      	adds	r3, #8
 8009cd8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cda:	643a      	str	r2, [r7, #64]	@ 0x40
 8009cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ce2:	e841 2300 	strex	r3, r2, [r1]
 8009ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d1e3      	bne.n	8009cb6 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d118      	bne.n	8009d28 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	e853 3f00 	ldrex	r3, [r3]
 8009d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	f023 0310 	bic.w	r3, r3, #16
 8009d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	461a      	mov	r2, r3
 8009d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d1c:	e841 2300 	strex	r3, r2, [r1]
 8009d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d1e6      	bne.n	8009cf6 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d32:	2b40      	cmp	r3, #64	@ 0x40
 8009d34:	d13b      	bne.n	8009dae <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	e853 3f00 	ldrex	r3, [r3]
 8009d44:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3308      	adds	r3, #8
 8009d54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d56:	61ba      	str	r2, [r7, #24]
 8009d58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d5a:	6979      	ldr	r1, [r7, #20]
 8009d5c:	69ba      	ldr	r2, [r7, #24]
 8009d5e:	e841 2300 	strex	r3, r2, [r1]
 8009d62:	613b      	str	r3, [r7, #16]
   return(result);
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d1e5      	bne.n	8009d36 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d01c      	beq.n	8009dae <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7fb ff10 	bl	8005baa <HAL_DMA_Abort>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00e      	beq.n	8009dae <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7fc f876 	bl	8005e88 <HAL_DMA_GetError>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b20      	cmp	r3, #32
 8009da0:	d105      	bne.n	8009dae <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2210      	movs	r2, #16
 8009da6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009daa:	2303      	movs	r3, #3
 8009dac:	e017      	b.n	8009dde <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	220f      	movs	r2, #15
 8009dbc:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699a      	ldr	r2, [r3, #24]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0208 	orr.w	r2, r2, #8
 8009dcc:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3768      	adds	r7, #104	@ 0x68
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b0ba      	sub	sp, #232	@ 0xe8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009e12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009e16:	4013      	ands	r3, r2
 8009e18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11b      	bne.n	8009e5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d015      	beq.n	8009e5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d105      	bne.n	8009e48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d009      	beq.n	8009e5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 8312 	beq.w	800a476 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	4798      	blx	r3
      }
      return;
 8009e5a:	e30c      	b.n	800a476 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8129 	beq.w	800a0b8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009e66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009e6a:	4b90      	ldr	r3, [pc, #576]	@ (800a0ac <HAL_UART_IRQHandler+0x2c4>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009e72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009e76:	4b8e      	ldr	r3, [pc, #568]	@ (800a0b0 <HAL_UART_IRQHandler+0x2c8>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 811c 	beq.w	800a0b8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e84:	f003 0301 	and.w	r3, r3, #1
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d011      	beq.n	8009eb0 <HAL_UART_IRQHandler+0xc8>
 8009e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d00b      	beq.n	8009eb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ea6:	f043 0201 	orr.w	r2, r3, #1
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009eb4:	f003 0302 	and.w	r3, r3, #2
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d011      	beq.n	8009ee0 <HAL_UART_IRQHandler+0xf8>
 8009ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00b      	beq.n	8009ee0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2202      	movs	r2, #2
 8009ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ed6:	f043 0204 	orr.w	r2, r3, #4
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ee4:	f003 0304 	and.w	r3, r3, #4
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d011      	beq.n	8009f10 <HAL_UART_IRQHandler+0x128>
 8009eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2204      	movs	r2, #4
 8009efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f06:	f043 0202 	orr.w	r2, r3, #2
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f14:	f003 0308 	and.w	r3, r3, #8
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d017      	beq.n	8009f4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d105      	bne.n	8009f34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009f28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009f2c:	4b5f      	ldr	r3, [pc, #380]	@ (800a0ac <HAL_UART_IRQHandler+0x2c4>)
 8009f2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00b      	beq.n	8009f4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2208      	movs	r2, #8
 8009f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f42:	f043 0208 	orr.w	r2, r3, #8
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d012      	beq.n	8009f7e <HAL_UART_IRQHandler+0x196>
 8009f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d00c      	beq.n	8009f7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f74:	f043 0220 	orr.w	r2, r3, #32
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 8278 	beq.w	800a47a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d013      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d105      	bne.n	8009fae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d007      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d003      	beq.n	8009fbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fd2:	2b40      	cmp	r3, #64	@ 0x40
 8009fd4:	d005      	beq.n	8009fe2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009fda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d058      	beq.n	800a094 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 f91b 	bl	800b21e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff2:	2b40      	cmp	r3, #64	@ 0x40
 8009ff4:	d148      	bne.n	800a088 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a000:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a004:	e853 3f00 	ldrex	r3, [r3]
 800a008:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a00c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3308      	adds	r3, #8
 800a01e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a022:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a02e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a032:	e841 2300 	strex	r3, r2, [r1]
 800a036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a03a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1d9      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d017      	beq.n	800a07c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a052:	4a18      	ldr	r2, [pc, #96]	@ (800a0b4 <HAL_UART_IRQHandler+0x2cc>)
 800a054:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a05c:	4618      	mov	r0, r3
 800a05e:	f7fb fdfd 	bl	8005c5c <HAL_DMA_Abort_IT>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01f      	beq.n	800a0a8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a076:	4610      	mov	r0, r2
 800a078:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a07a:	e015      	b.n	800a0a8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a086:	e00f      	b.n	800a0a8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a092:	e009      	b.n	800a0a8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a0a6:	e1e8      	b.n	800a47a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a8:	bf00      	nop
    return;
 800a0aa:	e1e6      	b.n	800a47a <HAL_UART_IRQHandler+0x692>
 800a0ac:	10000001 	.word	0x10000001
 800a0b0:	04000120 	.word	0x04000120
 800a0b4:	0800b42d 	.word	0x0800b42d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	f040 8176 	bne.w	800a3ae <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c6:	f003 0310 	and.w	r3, r3, #16
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	f000 816f 	beq.w	800a3ae <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0d4:	f003 0310 	and.w	r3, r3, #16
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 8168 	beq.w	800a3ae <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2210      	movs	r2, #16
 800a0e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f0:	2b40      	cmp	r3, #64	@ 0x40
 800a0f2:	f040 80dc 	bne.w	800a2ae <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80b1 	beq.w	800a270 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a114:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a118:	429a      	cmp	r2, r3
 800a11a:	f080 80a9 	bcs.w	800a270 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a124:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f003 0320 	and.w	r3, r3, #32
 800a136:	2b00      	cmp	r3, #0
 800a138:	f040 8087 	bne.w	800a24a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a16a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a17e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1da      	bne.n	800a13c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3308      	adds	r3, #8
 800a18c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a198:	f023 0301 	bic.w	r3, r3, #1
 800a19c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3308      	adds	r3, #8
 800a1a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a1aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a1ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a1b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a1bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e1      	bne.n	800a186 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a1cc:	e853 3f00 	ldrex	r3, [r3]
 800a1d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a1d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a1d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a1e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a1e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a1ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a1f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e3      	bne.n	800a1c2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2220      	movs	r2, #32
 800a1fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a20e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a210:	e853 3f00 	ldrex	r3, [r3]
 800a214:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a218:	f023 0310 	bic.w	r3, r3, #16
 800a21c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	461a      	mov	r2, r3
 800a226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a22a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a22c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a22e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a230:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a232:	e841 2300 	strex	r3, r2, [r1]
 800a236:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1e4      	bne.n	800a208 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a244:	4618      	mov	r0, r3
 800a246:	f7fb fcb0 	bl	8005baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2202      	movs	r2, #2
 800a24e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a262:	b292      	uxth	r2, r2
 800a264:	1a8a      	subs	r2, r1, r2
 800a266:	b292      	uxth	r2, r2
 800a268:	4611      	mov	r1, r2
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a26e:	e106      	b.n	800a47e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a27a:	429a      	cmp	r2, r3
 800a27c:	f040 80ff 	bne.w	800a47e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b20      	cmp	r3, #32
 800a290:	f040 80f5 	bne.w	800a47e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2202      	movs	r2, #2
 800a298:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	4798      	blx	r3
      return;
 800a2ac:	e0e7      	b.n	800a47e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	f000 80d9 	beq.w	800a482 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a2d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	f000 80d4 	beq.w	800a482 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a2ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a2fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2fe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a300:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a302:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a304:	e841 2300 	strex	r3, r2, [r1]
 800a308:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a30a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1e4      	bne.n	800a2da <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	3308      	adds	r3, #8
 800a316:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	623b      	str	r3, [r7, #32]
   return(result);
 800a320:	6a3b      	ldr	r3, [r7, #32]
 800a322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a326:	f023 0301 	bic.w	r3, r3, #1
 800a32a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a338:	633a      	str	r2, [r7, #48]	@ 0x30
 800a33a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a340:	e841 2300 	strex	r3, r2, [r1]
 800a344:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e1      	bne.n	800a310 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2220      	movs	r2, #32
 800a350:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	e853 3f00 	ldrex	r3, [r3]
 800a36c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f023 0310 	bic.w	r3, r3, #16
 800a374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a386:	69b9      	ldr	r1, [r7, #24]
 800a388:	69fa      	ldr	r2, [r7, #28]
 800a38a:	e841 2300 	strex	r3, r2, [r1]
 800a38e:	617b      	str	r3, [r7, #20]
   return(result);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1e4      	bne.n	800a360 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2202      	movs	r2, #2
 800a39a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a3a2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a3ac:	e069      	b.n	800a482 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d010      	beq.n	800a3dc <HAL_UART_IRQHandler+0x5f4>
 800a3ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a3ce:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3da:	e055      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a3dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d014      	beq.n	800a412 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d105      	bne.n	800a400 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a3f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d008      	beq.n	800a412 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a404:	2b00      	cmp	r3, #0
 800a406:	d03e      	beq.n	800a486 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	4798      	blx	r3
    }
    return;
 800a410:	e039      	b.n	800a486 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <HAL_UART_IRQHandler+0x64a>
 800a41e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 f812 	bl	800b454 <UART_EndTransmit_IT>
    return;
 800a430:	e02a      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a436:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d00b      	beq.n	800a456 <HAL_UART_IRQHandler+0x66e>
 800a43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a442:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a446:	2b00      	cmp	r3, #0
 800a448:	d005      	beq.n	800a456 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a454:	e018      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a45a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d012      	beq.n	800a488 <HAL_UART_IRQHandler+0x6a0>
 800a462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a466:	2b00      	cmp	r3, #0
 800a468:	da0e      	bge.n	800a488 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a474:	e008      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a476:	bf00      	nop
 800a478:	e006      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a47a:	bf00      	nop
 800a47c:	e004      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a47e:	bf00      	nop
 800a480:	e002      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a482:	bf00      	nop
 800a484:	e000      	b.n	800a488 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a486:	bf00      	nop
  }
}
 800a488:	37e8      	adds	r7, #232	@ 0xe8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop

0800a490 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a4ac:	bf00      	nop
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a4c0:	bf00      	nop
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a510:	bf00      	nop
 800a512:	370c      	adds	r7, #12
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr

0800a51c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b083      	sub	sp, #12
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a1a      	ldr	r2, [pc, #104]	@ (800a5bc <UART_InitCallbacksToDefault+0x74>)
 800a554:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a19      	ldr	r2, [pc, #100]	@ (800a5c0 <UART_InitCallbacksToDefault+0x78>)
 800a55c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a18      	ldr	r2, [pc, #96]	@ (800a5c4 <UART_InitCallbacksToDefault+0x7c>)
 800a564:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	4a17      	ldr	r2, [pc, #92]	@ (800a5c8 <UART_InitCallbacksToDefault+0x80>)
 800a56c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	4a16      	ldr	r2, [pc, #88]	@ (800a5cc <UART_InitCallbacksToDefault+0x84>)
 800a574:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a15      	ldr	r2, [pc, #84]	@ (800a5d0 <UART_InitCallbacksToDefault+0x88>)
 800a57c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a14      	ldr	r2, [pc, #80]	@ (800a5d4 <UART_InitCallbacksToDefault+0x8c>)
 800a584:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a13      	ldr	r2, [pc, #76]	@ (800a5d8 <UART_InitCallbacksToDefault+0x90>)
 800a58c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a12      	ldr	r2, [pc, #72]	@ (800a5dc <UART_InitCallbacksToDefault+0x94>)
 800a594:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a11      	ldr	r2, [pc, #68]	@ (800a5e0 <UART_InitCallbacksToDefault+0x98>)
 800a59c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a10      	ldr	r2, [pc, #64]	@ (800a5e4 <UART_InitCallbacksToDefault+0x9c>)
 800a5a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a0f      	ldr	r2, [pc, #60]	@ (800a5e8 <UART_InitCallbacksToDefault+0xa0>)
 800a5ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	0800a4a5 	.word	0x0800a4a5
 800a5c0:	0800a491 	.word	0x0800a491
 800a5c4:	0800a4cd 	.word	0x0800a4cd
 800a5c8:	0800a4b9 	.word	0x0800a4b9
 800a5cc:	0800a4e1 	.word	0x0800a4e1
 800a5d0:	0800a4f5 	.word	0x0800a4f5
 800a5d4:	0800a509 	.word	0x0800a509
 800a5d8:	0800a51d 	.word	0x0800a51d
 800a5dc:	0800bf19 	.word	0x0800bf19
 800a5e0:	0800bf2d 	.word	0x0800bf2d
 800a5e4:	0800bf41 	.word	0x0800bf41
 800a5e8:	0800a531 	.word	0x0800a531

0800a5ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5f0:	b08c      	sub	sp, #48	@ 0x30
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	431a      	orrs	r2, r3
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	695b      	ldr	r3, [r3, #20]
 800a60a:	431a      	orrs	r2, r3
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	69db      	ldr	r3, [r3, #28]
 800a610:	4313      	orrs	r3, r2
 800a612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	4baa      	ldr	r3, [pc, #680]	@ (800a8c4 <UART_SetConfig+0x2d8>)
 800a61c:	4013      	ands	r3, r2
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	6812      	ldr	r2, [r2, #0]
 800a622:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a624:	430b      	orrs	r3, r1
 800a626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	68da      	ldr	r2, [r3, #12]
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	430a      	orrs	r2, r1
 800a63c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a9f      	ldr	r2, [pc, #636]	@ (800a8c8 <UART_SetConfig+0x2dc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d004      	beq.n	800a658 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a654:	4313      	orrs	r3, r2
 800a656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a662:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	6812      	ldr	r2, [r2, #0]
 800a66a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a676:	f023 010f 	bic.w	r1, r3, #15
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a90      	ldr	r2, [pc, #576]	@ (800a8cc <UART_SetConfig+0x2e0>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d125      	bne.n	800a6dc <UART_SetConfig+0xf0>
 800a690:	4b8f      	ldr	r3, [pc, #572]	@ (800a8d0 <UART_SetConfig+0x2e4>)
 800a692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	d81a      	bhi.n	800a6d4 <UART_SetConfig+0xe8>
 800a69e:	a201      	add	r2, pc, #4	@ (adr r2, 800a6a4 <UART_SetConfig+0xb8>)
 800a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a4:	0800a6b5 	.word	0x0800a6b5
 800a6a8:	0800a6c5 	.word	0x0800a6c5
 800a6ac:	0800a6bd 	.word	0x0800a6bd
 800a6b0:	0800a6cd 	.word	0x0800a6cd
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ba:	e116      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a6bc:	2302      	movs	r3, #2
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c2:	e112      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a6c4:	2304      	movs	r3, #4
 800a6c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ca:	e10e      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a6cc:	2308      	movs	r3, #8
 800a6ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6d2:	e10a      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a6d4:	2310      	movs	r3, #16
 800a6d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6da:	e106      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a7c      	ldr	r2, [pc, #496]	@ (800a8d4 <UART_SetConfig+0x2e8>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d138      	bne.n	800a758 <UART_SetConfig+0x16c>
 800a6e6:	4b7a      	ldr	r3, [pc, #488]	@ (800a8d0 <UART_SetConfig+0x2e4>)
 800a6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ec:	f003 030c 	and.w	r3, r3, #12
 800a6f0:	2b0c      	cmp	r3, #12
 800a6f2:	d82d      	bhi.n	800a750 <UART_SetConfig+0x164>
 800a6f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6fc <UART_SetConfig+0x110>)
 800a6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fa:	bf00      	nop
 800a6fc:	0800a731 	.word	0x0800a731
 800a700:	0800a751 	.word	0x0800a751
 800a704:	0800a751 	.word	0x0800a751
 800a708:	0800a751 	.word	0x0800a751
 800a70c:	0800a741 	.word	0x0800a741
 800a710:	0800a751 	.word	0x0800a751
 800a714:	0800a751 	.word	0x0800a751
 800a718:	0800a751 	.word	0x0800a751
 800a71c:	0800a739 	.word	0x0800a739
 800a720:	0800a751 	.word	0x0800a751
 800a724:	0800a751 	.word	0x0800a751
 800a728:	0800a751 	.word	0x0800a751
 800a72c:	0800a749 	.word	0x0800a749
 800a730:	2300      	movs	r3, #0
 800a732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a736:	e0d8      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a738:	2302      	movs	r3, #2
 800a73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a73e:	e0d4      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a740:	2304      	movs	r3, #4
 800a742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a746:	e0d0      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a748:	2308      	movs	r3, #8
 800a74a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a74e:	e0cc      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a750:	2310      	movs	r3, #16
 800a752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a756:	e0c8      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a5e      	ldr	r2, [pc, #376]	@ (800a8d8 <UART_SetConfig+0x2ec>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d125      	bne.n	800a7ae <UART_SetConfig+0x1c2>
 800a762:	4b5b      	ldr	r3, [pc, #364]	@ (800a8d0 <UART_SetConfig+0x2e4>)
 800a764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a768:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a76c:	2b30      	cmp	r3, #48	@ 0x30
 800a76e:	d016      	beq.n	800a79e <UART_SetConfig+0x1b2>
 800a770:	2b30      	cmp	r3, #48	@ 0x30
 800a772:	d818      	bhi.n	800a7a6 <UART_SetConfig+0x1ba>
 800a774:	2b20      	cmp	r3, #32
 800a776:	d00a      	beq.n	800a78e <UART_SetConfig+0x1a2>
 800a778:	2b20      	cmp	r3, #32
 800a77a:	d814      	bhi.n	800a7a6 <UART_SetConfig+0x1ba>
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <UART_SetConfig+0x19a>
 800a780:	2b10      	cmp	r3, #16
 800a782:	d008      	beq.n	800a796 <UART_SetConfig+0x1aa>
 800a784:	e00f      	b.n	800a7a6 <UART_SetConfig+0x1ba>
 800a786:	2300      	movs	r3, #0
 800a788:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a78c:	e0ad      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a78e:	2302      	movs	r3, #2
 800a790:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a794:	e0a9      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a796:	2304      	movs	r3, #4
 800a798:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a79c:	e0a5      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a79e:	2308      	movs	r3, #8
 800a7a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7a4:	e0a1      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a7a6:	2310      	movs	r3, #16
 800a7a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ac:	e09d      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a4a      	ldr	r2, [pc, #296]	@ (800a8dc <UART_SetConfig+0x2f0>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d125      	bne.n	800a804 <UART_SetConfig+0x218>
 800a7b8:	4b45      	ldr	r3, [pc, #276]	@ (800a8d0 <UART_SetConfig+0x2e4>)
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a7c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7c4:	d016      	beq.n	800a7f4 <UART_SetConfig+0x208>
 800a7c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7c8:	d818      	bhi.n	800a7fc <UART_SetConfig+0x210>
 800a7ca:	2b80      	cmp	r3, #128	@ 0x80
 800a7cc:	d00a      	beq.n	800a7e4 <UART_SetConfig+0x1f8>
 800a7ce:	2b80      	cmp	r3, #128	@ 0x80
 800a7d0:	d814      	bhi.n	800a7fc <UART_SetConfig+0x210>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d002      	beq.n	800a7dc <UART_SetConfig+0x1f0>
 800a7d6:	2b40      	cmp	r3, #64	@ 0x40
 800a7d8:	d008      	beq.n	800a7ec <UART_SetConfig+0x200>
 800a7da:	e00f      	b.n	800a7fc <UART_SetConfig+0x210>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7e2:	e082      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a7e4:	2302      	movs	r3, #2
 800a7e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7ea:	e07e      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a7ec:	2304      	movs	r3, #4
 800a7ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7f2:	e07a      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a7f4:	2308      	movs	r3, #8
 800a7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a7fa:	e076      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a7fc:	2310      	movs	r3, #16
 800a7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a802:	e072      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a35      	ldr	r2, [pc, #212]	@ (800a8e0 <UART_SetConfig+0x2f4>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d12a      	bne.n	800a864 <UART_SetConfig+0x278>
 800a80e:	4b30      	ldr	r3, [pc, #192]	@ (800a8d0 <UART_SetConfig+0x2e4>)
 800a810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a814:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a818:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a81c:	d01a      	beq.n	800a854 <UART_SetConfig+0x268>
 800a81e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a822:	d81b      	bhi.n	800a85c <UART_SetConfig+0x270>
 800a824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a828:	d00c      	beq.n	800a844 <UART_SetConfig+0x258>
 800a82a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a82e:	d815      	bhi.n	800a85c <UART_SetConfig+0x270>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d003      	beq.n	800a83c <UART_SetConfig+0x250>
 800a834:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a838:	d008      	beq.n	800a84c <UART_SetConfig+0x260>
 800a83a:	e00f      	b.n	800a85c <UART_SetConfig+0x270>
 800a83c:	2300      	movs	r3, #0
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a842:	e052      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a844:	2302      	movs	r3, #2
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a84a:	e04e      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a84c:	2304      	movs	r3, #4
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a852:	e04a      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a854:	2308      	movs	r3, #8
 800a856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a85a:	e046      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a85c:	2310      	movs	r3, #16
 800a85e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a862:	e042      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a864:	697b      	ldr	r3, [r7, #20]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4a17      	ldr	r2, [pc, #92]	@ (800a8c8 <UART_SetConfig+0x2dc>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d13a      	bne.n	800a8e4 <UART_SetConfig+0x2f8>
 800a86e:	4b18      	ldr	r3, [pc, #96]	@ (800a8d0 <UART_SetConfig+0x2e4>)
 800a870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a874:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a878:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a87c:	d01a      	beq.n	800a8b4 <UART_SetConfig+0x2c8>
 800a87e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a882:	d81b      	bhi.n	800a8bc <UART_SetConfig+0x2d0>
 800a884:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a888:	d00c      	beq.n	800a8a4 <UART_SetConfig+0x2b8>
 800a88a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a88e:	d815      	bhi.n	800a8bc <UART_SetConfig+0x2d0>
 800a890:	2b00      	cmp	r3, #0
 800a892:	d003      	beq.n	800a89c <UART_SetConfig+0x2b0>
 800a894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a898:	d008      	beq.n	800a8ac <UART_SetConfig+0x2c0>
 800a89a:	e00f      	b.n	800a8bc <UART_SetConfig+0x2d0>
 800a89c:	2300      	movs	r3, #0
 800a89e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8a2:	e022      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a8a4:	2302      	movs	r3, #2
 800a8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8aa:	e01e      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8b2:	e01a      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a8b4:	2308      	movs	r3, #8
 800a8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8ba:	e016      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a8bc:	2310      	movs	r3, #16
 800a8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a8c2:	e012      	b.n	800a8ea <UART_SetConfig+0x2fe>
 800a8c4:	cfff69f3 	.word	0xcfff69f3
 800a8c8:	40008000 	.word	0x40008000
 800a8cc:	40013800 	.word	0x40013800
 800a8d0:	40021000 	.word	0x40021000
 800a8d4:	40004400 	.word	0x40004400
 800a8d8:	40004800 	.word	0x40004800
 800a8dc:	40004c00 	.word	0x40004c00
 800a8e0:	40005000 	.word	0x40005000
 800a8e4:	2310      	movs	r3, #16
 800a8e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4aae      	ldr	r2, [pc, #696]	@ (800aba8 <UART_SetConfig+0x5bc>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	f040 8097 	bne.w	800aa24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a8f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8fa:	2b08      	cmp	r3, #8
 800a8fc:	d823      	bhi.n	800a946 <UART_SetConfig+0x35a>
 800a8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a904 <UART_SetConfig+0x318>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a929 	.word	0x0800a929
 800a908:	0800a947 	.word	0x0800a947
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a947 	.word	0x0800a947
 800a914:	0800a937 	.word	0x0800a937
 800a918:	0800a947 	.word	0x0800a947
 800a91c:	0800a947 	.word	0x0800a947
 800a920:	0800a947 	.word	0x0800a947
 800a924:	0800a93f 	.word	0x0800a93f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a928:	f7fc fa7c 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 800a92c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a92e:	e010      	b.n	800a952 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a930:	4b9e      	ldr	r3, [pc, #632]	@ (800abac <UART_SetConfig+0x5c0>)
 800a932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a934:	e00d      	b.n	800a952 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a936:	f7fc fa07 	bl	8006d48 <HAL_RCC_GetSysClockFreq>
 800a93a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a93c:	e009      	b.n	800a952 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a93e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a944:	e005      	b.n	800a952 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a946:	2300      	movs	r3, #0
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	2b00      	cmp	r3, #0
 800a956:	f000 8130 	beq.w	800abba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a95e:	4a94      	ldr	r2, [pc, #592]	@ (800abb0 <UART_SetConfig+0x5c4>)
 800a960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a964:	461a      	mov	r2, r3
 800a966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a968:	fbb3 f3f2 	udiv	r3, r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	685a      	ldr	r2, [r3, #4]
 800a972:	4613      	mov	r3, r2
 800a974:	005b      	lsls	r3, r3, #1
 800a976:	4413      	add	r3, r2
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d305      	bcc.n	800a98a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	429a      	cmp	r2, r3
 800a988:	d903      	bls.n	800a992 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a990:	e113      	b.n	800abba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a994:	2200      	movs	r2, #0
 800a996:	60bb      	str	r3, [r7, #8]
 800a998:	60fa      	str	r2, [r7, #12]
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	4a84      	ldr	r2, [pc, #528]	@ (800abb0 <UART_SetConfig+0x5c4>)
 800a9a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	603b      	str	r3, [r7, #0]
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a9b4:	f7f6 f97c 	bl	8000cb0 <__aeabi_uldivmod>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4610      	mov	r0, r2
 800a9be:	4619      	mov	r1, r3
 800a9c0:	f04f 0200 	mov.w	r2, #0
 800a9c4:	f04f 0300 	mov.w	r3, #0
 800a9c8:	020b      	lsls	r3, r1, #8
 800a9ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a9ce:	0202      	lsls	r2, r0, #8
 800a9d0:	6979      	ldr	r1, [r7, #20]
 800a9d2:	6849      	ldr	r1, [r1, #4]
 800a9d4:	0849      	lsrs	r1, r1, #1
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	4605      	mov	r5, r0
 800a9dc:	eb12 0804 	adds.w	r8, r2, r4
 800a9e0:	eb43 0905 	adc.w	r9, r3, r5
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	469a      	mov	sl, r3
 800a9ec:	4693      	mov	fp, r2
 800a9ee:	4652      	mov	r2, sl
 800a9f0:	465b      	mov	r3, fp
 800a9f2:	4640      	mov	r0, r8
 800a9f4:	4649      	mov	r1, r9
 800a9f6:	f7f6 f95b 	bl	8000cb0 <__aeabi_uldivmod>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	4613      	mov	r3, r2
 800aa00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa08:	d308      	bcc.n	800aa1c <UART_SetConfig+0x430>
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa10:	d204      	bcs.n	800aa1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6a3a      	ldr	r2, [r7, #32]
 800aa18:	60da      	str	r2, [r3, #12]
 800aa1a:	e0ce      	b.n	800abba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aa22:	e0ca      	b.n	800abba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	69db      	ldr	r3, [r3, #28]
 800aa28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa2c:	d166      	bne.n	800aafc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aa2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aa32:	2b08      	cmp	r3, #8
 800aa34:	d827      	bhi.n	800aa86 <UART_SetConfig+0x49a>
 800aa36:	a201      	add	r2, pc, #4	@ (adr r2, 800aa3c <UART_SetConfig+0x450>)
 800aa38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa3c:	0800aa61 	.word	0x0800aa61
 800aa40:	0800aa69 	.word	0x0800aa69
 800aa44:	0800aa71 	.word	0x0800aa71
 800aa48:	0800aa87 	.word	0x0800aa87
 800aa4c:	0800aa77 	.word	0x0800aa77
 800aa50:	0800aa87 	.word	0x0800aa87
 800aa54:	0800aa87 	.word	0x0800aa87
 800aa58:	0800aa87 	.word	0x0800aa87
 800aa5c:	0800aa7f 	.word	0x0800aa7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aa60:	f7fc f9e0 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 800aa64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa66:	e014      	b.n	800aa92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aa68:	f7fc f9f2 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 800aa6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa6e:	e010      	b.n	800aa92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aa70:	4b4e      	ldr	r3, [pc, #312]	@ (800abac <UART_SetConfig+0x5c0>)
 800aa72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa74:	e00d      	b.n	800aa92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aa76:	f7fc f967 	bl	8006d48 <HAL_RCC_GetSysClockFreq>
 800aa7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aa7c:	e009      	b.n	800aa92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aa84:	e005      	b.n	800aa92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800aa86:	2300      	movs	r3, #0
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aa90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 8090 	beq.w	800abba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9e:	4a44      	ldr	r2, [pc, #272]	@ (800abb0 <UART_SetConfig+0x5c4>)
 800aaa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aaac:	005a      	lsls	r2, r3, #1
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	085b      	lsrs	r3, r3, #1
 800aab4:	441a      	add	r2, r3
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	fbb2 f3f3 	udiv	r3, r2, r3
 800aabe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	2b0f      	cmp	r3, #15
 800aac4:	d916      	bls.n	800aaf4 <UART_SetConfig+0x508>
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aacc:	d212      	bcs.n	800aaf4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aace:	6a3b      	ldr	r3, [r7, #32]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	f023 030f 	bic.w	r3, r3, #15
 800aad6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aad8:	6a3b      	ldr	r3, [r7, #32]
 800aada:	085b      	lsrs	r3, r3, #1
 800aadc:	b29b      	uxth	r3, r3
 800aade:	f003 0307 	and.w	r3, r3, #7
 800aae2:	b29a      	uxth	r2, r3
 800aae4:	8bfb      	ldrh	r3, [r7, #30]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	8bfa      	ldrh	r2, [r7, #30]
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	e062      	b.n	800abba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aafa:	e05e      	b.n	800abba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aafc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d828      	bhi.n	800ab56 <UART_SetConfig+0x56a>
 800ab04:	a201      	add	r2, pc, #4	@ (adr r2, 800ab0c <UART_SetConfig+0x520>)
 800ab06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0a:	bf00      	nop
 800ab0c:	0800ab31 	.word	0x0800ab31
 800ab10:	0800ab39 	.word	0x0800ab39
 800ab14:	0800ab41 	.word	0x0800ab41
 800ab18:	0800ab57 	.word	0x0800ab57
 800ab1c:	0800ab47 	.word	0x0800ab47
 800ab20:	0800ab57 	.word	0x0800ab57
 800ab24:	0800ab57 	.word	0x0800ab57
 800ab28:	0800ab57 	.word	0x0800ab57
 800ab2c:	0800ab4f 	.word	0x0800ab4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab30:	f7fc f978 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 800ab34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab36:	e014      	b.n	800ab62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab38:	f7fc f98a 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 800ab3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab3e:	e010      	b.n	800ab62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab40:	4b1a      	ldr	r3, [pc, #104]	@ (800abac <UART_SetConfig+0x5c0>)
 800ab42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab44:	e00d      	b.n	800ab62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab46:	f7fc f8ff 	bl	8006d48 <HAL_RCC_GetSysClockFreq>
 800ab4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab4c:	e009      	b.n	800ab62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ab52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab54:	e005      	b.n	800ab62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ab60:	bf00      	nop
    }

    if (pclk != 0U)
 800ab62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d028      	beq.n	800abba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	4a10      	ldr	r2, [pc, #64]	@ (800abb0 <UART_SetConfig+0x5c4>)
 800ab6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab72:	461a      	mov	r2, r3
 800ab74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab76:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	085b      	lsrs	r3, r3, #1
 800ab80:	441a      	add	r2, r3
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	2b0f      	cmp	r3, #15
 800ab90:	d910      	bls.n	800abb4 <UART_SetConfig+0x5c8>
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab98:	d20c      	bcs.n	800abb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ab9a:	6a3b      	ldr	r3, [r7, #32]
 800ab9c:	b29a      	uxth	r2, r3
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	60da      	str	r2, [r3, #12]
 800aba4:	e009      	b.n	800abba <UART_SetConfig+0x5ce>
 800aba6:	bf00      	nop
 800aba8:	40008000 	.word	0x40008000
 800abac:	00f42400 	.word	0x00f42400
 800abb0:	0800cc3c 	.word	0x0800cc3c
      }
      else
      {
        ret = HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	2200      	movs	r2, #0
 800abce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2200      	movs	r2, #0
 800abd4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800abd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3730      	adds	r7, #48	@ 0x30
 800abde:	46bd      	mov	sp, r7
 800abe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800abe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf0:	f003 0308 	and.w	r3, r3, #8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00a      	beq.n	800ac0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	430a      	orrs	r2, r1
 800ac2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac34:	f003 0302 	and.w	r3, r3, #2
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	430a      	orrs	r2, r1
 800ac50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	430a      	orrs	r2, r1
 800ac72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9a:	f003 0320 	and.w	r3, r3, #32
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	430a      	orrs	r2, r1
 800acb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01a      	beq.n	800acfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ace2:	d10a      	bne.n	800acfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	430a      	orrs	r2, r1
 800acf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00a      	beq.n	800ad1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	430a      	orrs	r2, r1
 800ad1a:	605a      	str	r2, [r3, #4]
  }
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b098      	sub	sp, #96	@ 0x60
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad38:	f7f9 fa3a 	bl	80041b0 <HAL_GetTick>
 800ad3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0308 	and.w	r3, r3, #8
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d12f      	bne.n	800adac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad54:	2200      	movs	r2, #0
 800ad56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f88e 	bl	800ae7c <UART_WaitOnFlagUntilTimeout>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d022      	beq.n	800adac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad6e:	e853 3f00 	ldrex	r3, [r3]
 800ad72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ad74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	461a      	mov	r2, r3
 800ad82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad84:	647b      	str	r3, [r7, #68]	@ 0x44
 800ad86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ad8c:	e841 2300 	strex	r3, r2, [r1]
 800ad90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1e6      	bne.n	800ad66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ada8:	2303      	movs	r3, #3
 800adaa:	e063      	b.n	800ae74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d149      	bne.n	800ae4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800adbe:	9300      	str	r3, [sp, #0]
 800adc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adc2:	2200      	movs	r2, #0
 800adc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f857 	bl	800ae7c <UART_WaitOnFlagUntilTimeout>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d03c      	beq.n	800ae4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	623b      	str	r3, [r7, #32]
   return(result);
 800ade2:	6a3b      	ldr	r3, [r7, #32]
 800ade4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ade8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800adf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800adf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adfa:	e841 2300 	strex	r3, r2, [r1]
 800adfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1e6      	bne.n	800add4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f023 0301 	bic.w	r3, r3, #1
 800ae1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae26:	61fa      	str	r2, [r7, #28]
 800ae28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	69b9      	ldr	r1, [r7, #24]
 800ae2c:	69fa      	ldr	r2, [r7, #28]
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	617b      	str	r3, [r7, #20]
   return(result);
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e5      	bne.n	800ae06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	2220      	movs	r2, #32
 800ae3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	e012      	b.n	800ae74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2220      	movs	r2, #32
 800ae5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3758      	adds	r7, #88	@ 0x58
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae8c:	e04f      	b.n	800af2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae94:	d04b      	beq.n	800af2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae96:	f7f9 f98b 	bl	80041b0 <HAL_GetTick>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d302      	bcc.n	800aeac <UART_WaitOnFlagUntilTimeout+0x30>
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e04e      	b.n	800af4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 0304 	and.w	r3, r3, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d037      	beq.n	800af2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	2b80      	cmp	r3, #128	@ 0x80
 800aec2:	d034      	beq.n	800af2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	2b40      	cmp	r3, #64	@ 0x40
 800aec8:	d031      	beq.n	800af2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	f003 0308 	and.w	r3, r3, #8
 800aed4:	2b08      	cmp	r3, #8
 800aed6:	d110      	bne.n	800aefa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2208      	movs	r2, #8
 800aede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 f99c 	bl	800b21e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2208      	movs	r2, #8
 800aeea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e029      	b.n	800af4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800af04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af08:	d111      	bne.n	800af2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800af12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f000 f982 	bl	800b21e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e00f      	b.n	800af4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	69da      	ldr	r2, [r3, #28]
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	4013      	ands	r3, r2
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	bf0c      	ite	eq
 800af3e:	2301      	moveq	r3, #1
 800af40:	2300      	movne	r3, #0
 800af42:	b2db      	uxtb	r3, r3
 800af44:	461a      	mov	r2, r3
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d0a0      	beq.n	800ae8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af58:	b480      	push	{r7}
 800af5a:	b0a3      	sub	sp, #140	@ 0x8c
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60f8      	str	r0, [r7, #12]
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	4613      	mov	r3, r2
 800af64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	88fa      	ldrh	r2, [r7, #6]
 800af70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	88fa      	ldrh	r2, [r7, #6]
 800af78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af8a:	d10e      	bne.n	800afaa <UART_Start_Receive_IT+0x52>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d105      	bne.n	800afa0 <UART_Start_Receive_IT+0x48>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800af9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800af9e:	e02d      	b.n	800affc <UART_Start_Receive_IT+0xa4>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	22ff      	movs	r2, #255	@ 0xff
 800afa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afa8:	e028      	b.n	800affc <UART_Start_Receive_IT+0xa4>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10d      	bne.n	800afce <UART_Start_Receive_IT+0x76>
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d104      	bne.n	800afc4 <UART_Start_Receive_IT+0x6c>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	22ff      	movs	r2, #255	@ 0xff
 800afbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afc2:	e01b      	b.n	800affc <UART_Start_Receive_IT+0xa4>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	227f      	movs	r2, #127	@ 0x7f
 800afc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afcc:	e016      	b.n	800affc <UART_Start_Receive_IT+0xa4>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afd6:	d10d      	bne.n	800aff4 <UART_Start_Receive_IT+0x9c>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <UART_Start_Receive_IT+0x92>
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	227f      	movs	r2, #127	@ 0x7f
 800afe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800afe8:	e008      	b.n	800affc <UART_Start_Receive_IT+0xa4>
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	223f      	movs	r2, #63	@ 0x3f
 800afee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800aff2:	e003      	b.n	800affc <UART_Start_Receive_IT+0xa4>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2200      	movs	r2, #0
 800aff8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2222      	movs	r2, #34	@ 0x22
 800b008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	3308      	adds	r3, #8
 800b012:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b016:	e853 3f00 	ldrex	r3, [r3]
 800b01a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b01c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b01e:	f043 0301 	orr.w	r3, r3, #1
 800b022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	3308      	adds	r3, #8
 800b02c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b030:	673a      	str	r2, [r7, #112]	@ 0x70
 800b032:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b034:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800b036:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b038:	e841 2300 	strex	r3, r2, [r1]
 800b03c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800b03e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1e3      	bne.n	800b00c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b04c:	d14f      	bne.n	800b0ee <UART_Start_Receive_IT+0x196>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b054:	88fa      	ldrh	r2, [r7, #6]
 800b056:	429a      	cmp	r2, r3
 800b058:	d349      	bcc.n	800b0ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b062:	d107      	bne.n	800b074 <UART_Start_Receive_IT+0x11c>
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d103      	bne.n	800b074 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4a47      	ldr	r2, [pc, #284]	@ (800b18c <UART_Start_Receive_IT+0x234>)
 800b070:	675a      	str	r2, [r3, #116]	@ 0x74
 800b072:	e002      	b.n	800b07a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	4a46      	ldr	r2, [pc, #280]	@ (800b190 <UART_Start_Receive_IT+0x238>)
 800b078:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d01a      	beq.n	800b0b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b0a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b0aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b0ac:	e841 2300 	strex	r3, r2, [r1]
 800b0b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b0b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d1e4      	bne.n	800b082 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	3308      	adds	r3, #8
 800b0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0c2:	e853 3f00 	ldrex	r3, [r3]
 800b0c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b0c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	3308      	adds	r3, #8
 800b0d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b0d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b0da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b0de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e5      	bne.n	800b0b8 <UART_Start_Receive_IT+0x160>
 800b0ec:	e046      	b.n	800b17c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0f6:	d107      	bne.n	800b108 <UART_Start_Receive_IT+0x1b0>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d103      	bne.n	800b108 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4a24      	ldr	r2, [pc, #144]	@ (800b194 <UART_Start_Receive_IT+0x23c>)
 800b104:	675a      	str	r2, [r3, #116]	@ 0x74
 800b106:	e002      	b.n	800b10e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4a23      	ldr	r2, [pc, #140]	@ (800b198 <UART_Start_Receive_IT+0x240>)
 800b10c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d019      	beq.n	800b14a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11e:	e853 3f00 	ldrex	r3, [r3]
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b12a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	461a      	mov	r2, r3
 800b132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b134:	637b      	str	r3, [r7, #52]	@ 0x34
 800b136:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b13a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b13c:	e841 2300 	strex	r3, r2, [r1]
 800b140:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1e6      	bne.n	800b116 <UART_Start_Receive_IT+0x1be>
 800b148:	e018      	b.n	800b17c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	e853 3f00 	ldrex	r3, [r3]
 800b156:	613b      	str	r3, [r7, #16]
   return(result);
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f043 0320 	orr.w	r3, r3, #32
 800b15e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	461a      	mov	r2, r3
 800b166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b168:	623b      	str	r3, [r7, #32]
 800b16a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b16c:	69f9      	ldr	r1, [r7, #28]
 800b16e:	6a3a      	ldr	r2, [r7, #32]
 800b170:	e841 2300 	strex	r3, r2, [r1]
 800b174:	61bb      	str	r3, [r7, #24]
   return(result);
 800b176:	69bb      	ldr	r3, [r7, #24]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1e6      	bne.n	800b14a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	378c      	adds	r7, #140	@ 0x8c
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	0800bba1 	.word	0x0800bba1
 800b190:	0800b831 	.word	0x0800b831
 800b194:	0800b671 	.word	0x0800b671
 800b198:	0800b4b1 	.word	0x0800b4b1

0800b19c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b08f      	sub	sp, #60	@ 0x3c
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	e853 3f00 	ldrex	r3, [r3]
 800b1b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b1b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b1c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b1ca:	e841 2300 	strex	r3, r2, [r1]
 800b1ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1e6      	bne.n	800b1a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	3308      	adds	r3, #8
 800b1dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	e853 3f00 	ldrex	r3, [r3]
 800b1e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b1ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f6:	61ba      	str	r2, [r7, #24]
 800b1f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6979      	ldr	r1, [r7, #20]
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	613b      	str	r3, [r7, #16]
   return(result);
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e5      	bne.n	800b1d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2220      	movs	r2, #32
 800b20e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b212:	bf00      	nop
 800b214:	373c      	adds	r7, #60	@ 0x3c
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b21e:	b480      	push	{r7}
 800b220:	b095      	sub	sp, #84	@ 0x54
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b22c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b22e:	e853 3f00 	ldrex	r3, [r3]
 800b232:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b236:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b23a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	461a      	mov	r2, r3
 800b242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b244:	643b      	str	r3, [r7, #64]	@ 0x40
 800b246:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b248:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b24a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b24c:	e841 2300 	strex	r3, r2, [r1]
 800b250:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1e6      	bne.n	800b226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	3308      	adds	r3, #8
 800b25e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	e853 3f00 	ldrex	r3, [r3]
 800b266:	61fb      	str	r3, [r7, #28]
   return(result);
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b26e:	f023 0301 	bic.w	r3, r3, #1
 800b272:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	3308      	adds	r3, #8
 800b27a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b27c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b27e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b284:	e841 2300 	strex	r3, r2, [r1]
 800b288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e3      	bne.n	800b258 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b294:	2b01      	cmp	r3, #1
 800b296:	d118      	bne.n	800b2ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f023 0310 	bic.w	r3, r3, #16
 800b2ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6979      	ldr	r1, [r7, #20]
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e6      	bne.n	800b298 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b2de:	bf00      	nop
 800b2e0:	3754      	adds	r7, #84	@ 0x54
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr

0800b2ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b090      	sub	sp, #64	@ 0x40
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f003 0320 	and.w	r3, r3, #32
 800b302:	2b00      	cmp	r3, #0
 800b304:	d137      	bne.n	800b376 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b308:	2200      	movs	r2, #0
 800b30a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3308      	adds	r3, #8
 800b314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b318:	e853 3f00 	ldrex	r3, [r3]
 800b31c:	623b      	str	r3, [r7, #32]
   return(result);
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b324:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b32e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b336:	e841 2300 	strex	r3, r2, [r1]
 800b33a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1e5      	bne.n	800b30e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	e853 3f00 	ldrex	r3, [r3]
 800b34e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b356:	637b      	str	r3, [r7, #52]	@ 0x34
 800b358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b360:	61fb      	str	r3, [r7, #28]
 800b362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b364:	69b9      	ldr	r1, [r7, #24]
 800b366:	69fa      	ldr	r2, [r7, #28]
 800b368:	e841 2300 	strex	r3, r2, [r1]
 800b36c:	617b      	str	r3, [r7, #20]
   return(result);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d1e6      	bne.n	800b342 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b374:	e004      	b.n	800b380 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b37c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b37e:	4798      	blx	r3
}
 800b380:	bf00      	nop
 800b382:	3740      	adds	r7, #64	@ 0x40
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b394:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3b4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d0:	2b80      	cmp	r3, #128	@ 0x80
 800b3d2:	d109      	bne.n	800b3e8 <UART_DMAError+0x40>
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	2b21      	cmp	r3, #33	@ 0x21
 800b3d8:	d106      	bne.n	800b3e8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b3e2:	6978      	ldr	r0, [r7, #20]
 800b3e4:	f7ff feda 	bl	800b19c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3f2:	2b40      	cmp	r3, #64	@ 0x40
 800b3f4:	d109      	bne.n	800b40a <UART_DMAError+0x62>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b22      	cmp	r3, #34	@ 0x22
 800b3fa:	d106      	bne.n	800b40a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b404:	6978      	ldr	r0, [r7, #20]
 800b406:	f7ff ff0a 	bl	800b21e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b410:	f043 0210 	orr.w	r2, r3, #16
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b420:	6978      	ldr	r0, [r7, #20]
 800b422:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b424:	bf00      	nop
 800b426:	3718      	adds	r7, #24
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b438:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b44c:	bf00      	nop
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b088      	sub	sp, #32
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	60bb      	str	r3, [r7, #8]
   return(result);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	461a      	mov	r2, r3
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	61bb      	str	r3, [r7, #24]
 800b47c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47e:	6979      	ldr	r1, [r7, #20]
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	e841 2300 	strex	r3, r2, [r1]
 800b486:	613b      	str	r3, [r7, #16]
   return(result);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1e6      	bne.n	800b45c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2220      	movs	r2, #32
 800b492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b4a6:	bf00      	nop
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
	...

0800b4b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b09c      	sub	sp, #112	@ 0x70
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b4be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4c8:	2b22      	cmp	r3, #34	@ 0x22
 800b4ca:	f040 80c2 	bne.w	800b652 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b4d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b4dc:	b2d9      	uxtb	r1, r3
 800b4de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4e8:	400a      	ands	r2, r1
 800b4ea:	b2d2      	uxtb	r2, r2
 800b4ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	3b01      	subs	r3, #1
 800b502:	b29a      	uxth	r2, r3
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b510:	b29b      	uxth	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	f040 80a5 	bne.w	800b662 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b52c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	461a      	mov	r2, r3
 800b534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b536:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b538:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b53c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b53e:	e841 2300 	strex	r3, r2, [r1]
 800b542:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1e6      	bne.n	800b518 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3308      	adds	r3, #8
 800b550:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b554:	e853 3f00 	ldrex	r3, [r3]
 800b558:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b55a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55c:	f023 0301 	bic.w	r3, r3, #1
 800b560:	667b      	str	r3, [r7, #100]	@ 0x64
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3308      	adds	r3, #8
 800b568:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b56a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b56c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b572:	e841 2300 	strex	r3, r2, [r1]
 800b576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1e5      	bne.n	800b54a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2220      	movs	r2, #32
 800b582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2200      	movs	r2, #0
 800b58a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4a35      	ldr	r2, [pc, #212]	@ (800b66c <UART_RxISR_8BIT+0x1bc>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d01f      	beq.n	800b5dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d018      	beq.n	800b5dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b2:	e853 3f00 	ldrex	r3, [r3]
 800b5b6:	623b      	str	r3, [r7, #32]
   return(result);
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b5be:	663b      	str	r3, [r7, #96]	@ 0x60
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b5c8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b5ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5d0:	e841 2300 	strex	r3, r2, [r1]
 800b5d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e6      	bne.n	800b5aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d130      	bne.n	800b646 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f023 0310 	bic.w	r3, r3, #16
 800b5fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	461a      	mov	r2, r3
 800b606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	69b9      	ldr	r1, [r7, #24]
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	617b      	str	r3, [r7, #20]
   return(result);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e6      	bne.n	800b5ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	69db      	ldr	r3, [r3, #28]
 800b622:	f003 0310 	and.w	r3, r3, #16
 800b626:	2b10      	cmp	r3, #16
 800b628:	d103      	bne.n	800b632 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2210      	movs	r2, #16
 800b630:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b63e:	4611      	mov	r1, r2
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b644:	e00d      	b.n	800b662 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	4798      	blx	r3
}
 800b650:	e007      	b.n	800b662 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	699a      	ldr	r2, [r3, #24]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f042 0208 	orr.w	r2, r2, #8
 800b660:	619a      	str	r2, [r3, #24]
}
 800b662:	bf00      	nop
 800b664:	3770      	adds	r7, #112	@ 0x70
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	40008000 	.word	0x40008000

0800b670 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b09c      	sub	sp, #112	@ 0x70
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b67e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b688:	2b22      	cmp	r3, #34	@ 0x22
 800b68a:	f040 80c2 	bne.w	800b812 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b694:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b69c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b69e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800b6a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800b6a6:	4013      	ands	r3, r2
 800b6a8:	b29a      	uxth	r2, r3
 800b6aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6ac:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6b2:	1c9a      	adds	r2, r3, #2
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f040 80a5 	bne.w	800b822 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6e0:	e853 3f00 	ldrex	r3, [r3]
 800b6e4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b6e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b6f8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b6fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6fe:	e841 2300 	strex	r3, r2, [r1]
 800b702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1e6      	bne.n	800b6d8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3308      	adds	r3, #8
 800b710:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b714:	e853 3f00 	ldrex	r3, [r3]
 800b718:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71c:	f023 0301 	bic.w	r3, r3, #1
 800b720:	663b      	str	r3, [r7, #96]	@ 0x60
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3308      	adds	r3, #8
 800b728:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b72a:	643a      	str	r2, [r7, #64]	@ 0x40
 800b72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b730:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e5      	bne.n	800b70a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2220      	movs	r2, #32
 800b742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a35      	ldr	r2, [pc, #212]	@ (800b82c <UART_RxISR_16BIT+0x1bc>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d01f      	beq.n	800b79c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d018      	beq.n	800b79c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	e853 3f00 	ldrex	r3, [r3]
 800b776:	61fb      	str	r3, [r7, #28]
   return(result);
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b77e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	461a      	mov	r2, r3
 800b786:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b78a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b78c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b78e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b790:	e841 2300 	strex	r3, r2, [r1]
 800b794:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1e6      	bne.n	800b76a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d130      	bne.n	800b806 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	e853 3f00 	ldrex	r3, [r3]
 800b7b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	f023 0310 	bic.w	r3, r3, #16
 800b7be:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7c8:	61bb      	str	r3, [r7, #24]
 800b7ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7cc:	6979      	ldr	r1, [r7, #20]
 800b7ce:	69ba      	ldr	r2, [r7, #24]
 800b7d0:	e841 2300 	strex	r3, r2, [r1]
 800b7d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1e6      	bne.n	800b7aa <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	69db      	ldr	r3, [r3, #28]
 800b7e2:	f003 0310 	and.w	r3, r3, #16
 800b7e6:	2b10      	cmp	r3, #16
 800b7e8:	d103      	bne.n	800b7f2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2210      	movs	r2, #16
 800b7f0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b7fe:	4611      	mov	r1, r2
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b804:	e00d      	b.n	800b822 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	4798      	blx	r3
}
 800b810:	e007      	b.n	800b822 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	699a      	ldr	r2, [r3, #24]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f042 0208 	orr.w	r2, r2, #8
 800b820:	619a      	str	r2, [r3, #24]
}
 800b822:	bf00      	nop
 800b824:	3770      	adds	r7, #112	@ 0x70
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	40008000 	.word	0x40008000

0800b830 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b0ac      	sub	sp, #176	@ 0xb0
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800b83e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	69db      	ldr	r3, [r3, #28]
 800b848:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b866:	2b22      	cmp	r3, #34	@ 0x22
 800b868:	f040 8189 	bne.w	800bb7e <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800b872:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b876:	e12c      	b.n	800bad2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b882:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800b886:	b2d9      	uxtb	r1, r3
 800b888:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b892:	400a      	ands	r2, r1
 800b894:	b2d2      	uxtb	r2, r2
 800b896:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b89c:	1c5a      	adds	r2, r3, #1
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b8be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8c2:	f003 0307 	and.w	r3, r3, #7
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d055      	beq.n	800b976 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b8ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d011      	beq.n	800b8fa <UART_RxISR_8BIT_FIFOEN+0xca>
 800b8d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b8da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d00b      	beq.n	800b8fa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f0:	f043 0201 	orr.w	r2, r3, #1
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8fe:	f003 0302 	and.w	r3, r3, #2
 800b902:	2b00      	cmp	r3, #0
 800b904:	d011      	beq.n	800b92a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800b906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00b      	beq.n	800b92a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2202      	movs	r2, #2
 800b918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b920:	f043 0204 	orr.w	r2, r3, #4
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b92a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b92e:	f003 0304 	and.w	r3, r3, #4
 800b932:	2b00      	cmp	r3, #0
 800b934:	d011      	beq.n	800b95a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800b936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b93a:	f003 0301 	and.w	r3, r3, #1
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00b      	beq.n	800b95a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2204      	movs	r2, #4
 800b948:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b950:	f043 0202 	orr.w	r2, r3, #2
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b960:	2b00      	cmp	r3, #0
 800b962:	d008      	beq.n	800b976 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b97c:	b29b      	uxth	r3, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f040 80a7 	bne.w	800bad2 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b98c:	e853 3f00 	ldrex	r3, [r3]
 800b990:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800b992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b9a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b9a8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b9ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b9ae:	e841 2300 	strex	r3, r2, [r1]
 800b9b2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800b9b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1e4      	bne.n	800b984 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800b9ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9d0:	f023 0301 	bic.w	r3, r3, #1
 800b9d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	3308      	adds	r3, #8
 800b9de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b9e2:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b9e4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800b9e8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9ea:	e841 2300 	strex	r3, r2, [r1]
 800b9ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800b9f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d1e1      	bne.n	800b9ba <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a62      	ldr	r2, [pc, #392]	@ (800bb98 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d021      	beq.n	800ba58 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d01a      	beq.n	800ba58 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba2a:	e853 3f00 	ldrex	r3, [r3]
 800ba2e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	461a      	mov	r2, r3
 800ba40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ba44:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba46:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba48:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba4c:	e841 2300 	strex	r3, r2, [r1]
 800ba50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e4      	bne.n	800ba22 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d132      	bne.n	800bac6 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6e:	e853 3f00 	ldrex	r3, [r3]
 800ba72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba76:	f023 0310 	bic.w	r3, r3, #16
 800ba7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	461a      	mov	r2, r3
 800ba84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ba88:	643b      	str	r3, [r7, #64]	@ 0x40
 800ba8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ba90:	e841 2300 	strex	r3, r2, [r1]
 800ba94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ba96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d1e4      	bne.n	800ba66 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	f003 0310 	and.w	r3, r3, #16
 800baa6:	2b10      	cmp	r3, #16
 800baa8:	d103      	bne.n	800bab2 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2210      	movs	r2, #16
 800bab0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800babe:	4611      	mov	r1, r2
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800bac4:	e010      	b.n	800bae8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	4798      	blx	r3
        break;
 800bad0:	e00a      	b.n	800bae8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bad2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d006      	beq.n	800bae8 <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800bada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bade:	f003 0320 	and.w	r3, r3, #32
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f47f aec8 	bne.w	800b878 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800baee:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800baf2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d049      	beq.n	800bb8e <UART_RxISR_8BIT_FIFOEN+0x35e>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bb00:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d242      	bcs.n	800bb8e <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	6a3b      	ldr	r3, [r7, #32]
 800bb12:	e853 3f00 	ldrex	r3, [r3]
 800bb16:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bb1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3308      	adds	r3, #8
 800bb28:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800bb2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb34:	e841 2300 	strex	r3, r2, [r1]
 800bb38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1e3      	bne.n	800bb08 <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a16      	ldr	r2, [pc, #88]	@ (800bb9c <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800bb44:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	e853 3f00 	ldrex	r3, [r3]
 800bb52:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	f043 0320 	orr.w	r3, r3, #32
 800bb5a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	461a      	mov	r2, r3
 800bb64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bb68:	61bb      	str	r3, [r7, #24]
 800bb6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6c:	6979      	ldr	r1, [r7, #20]
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	e841 2300 	strex	r3, r2, [r1]
 800bb74:	613b      	str	r3, [r7, #16]
   return(result);
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d1e4      	bne.n	800bb46 <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bb7c:	e007      	b.n	800bb8e <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	699a      	ldr	r2, [r3, #24]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f042 0208 	orr.w	r2, r2, #8
 800bb8c:	619a      	str	r2, [r3, #24]
}
 800bb8e:	bf00      	nop
 800bb90:	37b0      	adds	r7, #176	@ 0xb0
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	40008000 	.word	0x40008000
 800bb9c:	0800b4b1 	.word	0x0800b4b1

0800bba0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b0ae      	sub	sp, #184	@ 0xb8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bbae:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	69db      	ldr	r3, [r3, #28]
 800bbb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbd6:	2b22      	cmp	r3, #34	@ 0x22
 800bbd8:	f040 818d 	bne.w	800bef6 <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800bbe2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bbe6:	e130      	b.n	800be4a <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbee:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bbfa:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800bbfe:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800bc02:	4013      	ands	r3, r2
 800bc04:	b29a      	uxth	r2, r3
 800bc06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bc0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc10:	1c9a      	adds	r2, r3, #2
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bc32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc36:	f003 0307 	and.w	r3, r3, #7
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d055      	beq.n	800bcea <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc42:	f003 0301 	and.w	r3, r3, #1
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d011      	beq.n	800bc6e <UART_RxISR_16BIT_FIFOEN+0xce>
 800bc4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bc4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00b      	beq.n	800bc6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc64:	f043 0201 	orr.w	r2, r3, #1
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d011      	beq.n	800bc9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bc7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc7e:	f003 0301 	and.w	r3, r3, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00b      	beq.n	800bc9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc94:	f043 0204 	orr.w	r2, r3, #4
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bca2:	f003 0304 	and.w	r3, r3, #4
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d011      	beq.n	800bcce <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bcaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bcae:	f003 0301 	and.w	r3, r3, #1
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d00b      	beq.n	800bcce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2204      	movs	r2, #4
 800bcbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc4:	f043 0202 	orr.w	r2, r3, #2
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d008      	beq.n	800bcea <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f040 80a9 	bne.w	800be4a <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd00:	e853 3f00 	ldrex	r3, [r3]
 800bd04:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800bd06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	461a      	mov	r2, r3
 800bd16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bd1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bd1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800bd22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bd26:	e841 2300 	strex	r3, r2, [r1]
 800bd2a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800bd2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d1e2      	bne.n	800bcf8 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3308      	adds	r3, #8
 800bd38:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd3c:	e853 3f00 	ldrex	r3, [r3]
 800bd40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800bd42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd48:	f023 0301 	bic.w	r3, r3, #1
 800bd4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3308      	adds	r3, #8
 800bd56:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bd5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800bd5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800bd60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800bd68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e1      	bne.n	800bd32 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4a62      	ldr	r2, [pc, #392]	@ (800bf10 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800bd88:	4293      	cmp	r3, r2
 800bd8a:	d021      	beq.n	800bdd0 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d01a      	beq.n	800bdd0 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda2:	e853 3f00 	ldrex	r3, [r3]
 800bda6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bda8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bdae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bdbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bdbe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bdc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdc4:	e841 2300 	strex	r3, r2, [r1]
 800bdc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bdca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d1e4      	bne.n	800bd9a <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d132      	bne.n	800be3e <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bde4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bde6:	e853 3f00 	ldrex	r3, [r3]
 800bdea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bdec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdee:	f023 0310 	bic.w	r3, r3, #16
 800bdf2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800be00:	647b      	str	r3, [r7, #68]	@ 0x44
 800be02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800be06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be08:	e841 2300 	strex	r3, r2, [r1]
 800be0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800be0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e4      	bne.n	800bdde <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	f003 0310 	and.w	r3, r3, #16
 800be1e:	2b10      	cmp	r3, #16
 800be20:	d103      	bne.n	800be2a <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2210      	movs	r2, #16
 800be28:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800be36:	4611      	mov	r1, r2
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800be3c:	e010      	b.n	800be60 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	4798      	blx	r3
        break;
 800be48:	e00a      	b.n	800be60 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800be4a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d006      	beq.n	800be60 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800be52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be56:	f003 0320 	and.w	r3, r3, #32
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f47f aec4 	bne.w	800bbe8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800be66:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800be6a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d049      	beq.n	800bf06 <UART_RxISR_16BIT_FIFOEN+0x366>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800be78:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d242      	bcs.n	800bf06 <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	623b      	str	r3, [r7, #32]
   return(result);
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	3308      	adds	r3, #8
 800bea0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800bea4:	633a      	str	r2, [r7, #48]	@ 0x30
 800bea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800beaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800beb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e3      	bne.n	800be80 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a16      	ldr	r2, [pc, #88]	@ (800bf14 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800bebc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	e853 3f00 	ldrex	r3, [r3]
 800beca:	60fb      	str	r3, [r7, #12]
   return(result);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f043 0320 	orr.w	r3, r3, #32
 800bed2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bee0:	61fb      	str	r3, [r7, #28]
 800bee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee4:	69b9      	ldr	r1, [r7, #24]
 800bee6:	69fa      	ldr	r2, [r7, #28]
 800bee8:	e841 2300 	strex	r3, r2, [r1]
 800beec:	617b      	str	r3, [r7, #20]
   return(result);
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1e4      	bne.n	800bebe <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bef4:	e007      	b.n	800bf06 <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	699a      	ldr	r2, [r3, #24]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f042 0208 	orr.w	r2, r2, #8
 800bf04:	619a      	str	r2, [r3, #24]
}
 800bf06:	bf00      	nop
 800bf08:	37b8      	adds	r7, #184	@ 0xb8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	40008000 	.word	0x40008000
 800bf14:	0800b671 	.word	0x0800b671

0800bf18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b083      	sub	sp, #12
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bf34:	bf00      	nop
 800bf36:	370c      	adds	r7, #12
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d101      	bne.n	800bf6a <HAL_UARTEx_DisableFifoMode+0x16>
 800bf66:	2302      	movs	r3, #2
 800bf68:	e027      	b.n	800bfba <HAL_UARTEx_DisableFifoMode+0x66>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2224      	movs	r2, #36	@ 0x24
 800bf76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f022 0201 	bic.w	r2, r2, #1
 800bf90:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bf98:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfb8:	2300      	movs	r3, #0
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3714      	adds	r7, #20
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d101      	bne.n	800bfde <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bfda:	2302      	movs	r3, #2
 800bfdc:	e02d      	b.n	800c03a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2224      	movs	r2, #36	@ 0x24
 800bfea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f022 0201 	bic.w	r2, r2, #1
 800c004:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	430a      	orrs	r2, r1
 800c018:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f850 	bl	800c0c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2220      	movs	r2, #32
 800c02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b084      	sub	sp, #16
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c052:	2b01      	cmp	r3, #1
 800c054:	d101      	bne.n	800c05a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c056:	2302      	movs	r3, #2
 800c058:	e02d      	b.n	800c0b6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2224      	movs	r2, #36	@ 0x24
 800c066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f022 0201 	bic.w	r2, r2, #1
 800c080:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	430a      	orrs	r2, r1
 800c094:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f812 	bl	800c0c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2220      	movs	r2, #32
 800c0a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d108      	bne.n	800c0e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c0e0:	e031      	b.n	800c146 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c0e2:	2308      	movs	r3, #8
 800c0e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c0e6:	2308      	movs	r3, #8
 800c0e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	0e5b      	lsrs	r3, r3, #25
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	f003 0307 	and.w	r3, r3, #7
 800c0f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	689b      	ldr	r3, [r3, #8]
 800c100:	0f5b      	lsrs	r3, r3, #29
 800c102:	b2db      	uxtb	r3, r3
 800c104:	f003 0307 	and.w	r3, r3, #7
 800c108:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	7b3a      	ldrb	r2, [r7, #12]
 800c10e:	4911      	ldr	r1, [pc, #68]	@ (800c154 <UARTEx_SetNbDataToProcess+0x94>)
 800c110:	5c8a      	ldrb	r2, [r1, r2]
 800c112:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c116:	7b3a      	ldrb	r2, [r7, #12]
 800c118:	490f      	ldr	r1, [pc, #60]	@ (800c158 <UARTEx_SetNbDataToProcess+0x98>)
 800c11a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c11c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c120:	b29a      	uxth	r2, r3
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c128:	7bfb      	ldrb	r3, [r7, #15]
 800c12a:	7b7a      	ldrb	r2, [r7, #13]
 800c12c:	4909      	ldr	r1, [pc, #36]	@ (800c154 <UARTEx_SetNbDataToProcess+0x94>)
 800c12e:	5c8a      	ldrb	r2, [r1, r2]
 800c130:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c134:	7b7a      	ldrb	r2, [r7, #13]
 800c136:	4908      	ldr	r1, [pc, #32]	@ (800c158 <UARTEx_SetNbDataToProcess+0x98>)
 800c138:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c13a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c13e:	b29a      	uxth	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c146:	bf00      	nop
 800c148:	3714      	adds	r7, #20
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	0800cc54 	.word	0x0800cc54
 800c158:	0800cc5c 	.word	0x0800cc5c

0800c15c <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	ed93 7a06 	vldr	s14, [r3, #24]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	edd3 7a07 	vldr	s15, [r3, #28]
 800c172:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	edd3 7a08 	vldr	s15, [r3, #32]
 800c17c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	edd3 7a06 	vldr	s15, [r3, #24]
 800c18c:	eeb1 7a67 	vneg.f32	s14, s15
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	edd3 7a08 	vldr	s15, [r3, #32]
 800c196:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c19a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1a      	ldr	r2, [r3, #32]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d006      	beq.n	800c1c0 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	330c      	adds	r3, #12
 800c1b6:	220c      	movs	r2, #12
 800c1b8:	2100      	movs	r1, #0
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 fcc4 	bl	800cb48 <memset>
  }

}
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b08b      	sub	sp, #44	@ 0x2c
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	885b      	ldrh	r3, [r3, #2]
 800c1f0:	fb02 f303 	mul.w	r3, r2, r3
 800c1f4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c1fa:	e013      	b.n	800c224 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fe:	1d1a      	adds	r2, r3, #4
 800c200:	627a      	str	r2, [r7, #36]	@ 0x24
 800c202:	ed93 7a00 	vldr	s14, [r3]
 800c206:	6a3b      	ldr	r3, [r7, #32]
 800c208:	1d1a      	adds	r2, r3, #4
 800c20a:	623a      	str	r2, [r7, #32]
 800c20c:	edd3 7a00 	vldr	s15, [r3]
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	1d1a      	adds	r2, r3, #4
 800c214:	61fa      	str	r2, [r7, #28]
 800c216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c21a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c21e:	69bb      	ldr	r3, [r7, #24]
 800c220:	3b01      	subs	r3, #1
 800c222:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d1e8      	bne.n	800c1fc <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c22a:	2300      	movs	r3, #0
 800c22c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c22e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c232:	4618      	mov	r0, r3
 800c234:	372c      	adds	r7, #44	@ 0x2c
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr

0800c23e <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c23e:	b480      	push	{r7}
 800c240:	b085      	sub	sp, #20
 800c242:	af00      	add	r7, sp, #0
 800c244:	60f8      	str	r0, [r7, #12]
 800c246:	607b      	str	r3, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	817b      	strh	r3, [r7, #10]
 800c24c:	4613      	mov	r3, r2
 800c24e:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	897a      	ldrh	r2, [r7, #10]
 800c254:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	893a      	ldrh	r2, [r7, #8]
 800c25a:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	605a      	str	r2, [r3, #4]
}
 800c262:	bf00      	nop
 800c264:	3714      	adds	r7, #20
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr

0800c26e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c26e:	b480      	push	{r7}
 800c270:	b0bb      	sub	sp, #236	@ 0xec
 800c272:	af00      	add	r7, sp, #0
 800c274:	6078      	str	r0, [r7, #4]
 800c276:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685b      	ldr	r3, [r3, #4]
 800c27c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	885b      	ldrh	r3, [r3, #2]
 800c28e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800c290:	f04f 0300 	mov.w	r3, #0
 800c294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c298:	f04f 0300 	mov.w	r3, #0
 800c29c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800c2a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c2a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800c2aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800c2b0:	e03b      	b.n	800c32a <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800c2b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c2b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c2b8:	1ad3      	subs	r3, r2, r3
 800c2ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c2be:	e00c      	b.n	800c2da <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800c2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2c4:	1d1a      	adds	r2, r3, #4
 800c2c6:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c2ca:	f04f 0200 	mov.w	r2, #0
 800c2ce:	601a      	str	r2, [r3, #0]
        j--;
 800c2d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c2da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1ee      	bne.n	800c2c0 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800c2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c2e6:	1d1a      	adds	r2, r3, #4
 800c2e8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c2ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c2f0:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800c2f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c2fc:	e00c      	b.n	800c318 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800c2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c302:	1d1a      	adds	r2, r3, #4
 800c304:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c308:	f04f 0200 	mov.w	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
        j--;
 800c30e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c312:	3b01      	subs	r3, #1
 800c314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c318:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1ee      	bne.n	800c2fe <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800c320:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c324:	3b01      	subs	r3, #1
 800c326:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800c32a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d1bf      	bne.n	800c2b2 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800c332:	2300      	movs	r3, #0
 800c334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c338:	e2c7      	b.n	800c8ca <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800c33a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c33e:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	685a      	ldr	r2, [r3, #4]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	885b      	ldrh	r3, [r3, #2]
 800c348:	3301      	adds	r3, #1
 800c34a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800c34e:	fb01 f303 	mul.w	r3, r1, r3
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800c35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800c364:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c368:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800c36c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c370:	3301      	adds	r3, #1
 800c372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c376:	e02c      	b.n	800c3d2 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685a      	ldr	r2, [r3, #4]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	885b      	ldrh	r3, [r3, #2]
 800c380:	4619      	mov	r1, r3
 800c382:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c386:	fb03 f101 	mul.w	r1, r3, r1
 800c38a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c38e:	440b      	add	r3, r1
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800c398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800c3a0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800c3a4:	eeb0 7ae7 	vabs.f32	s14, s15
 800c3a8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c3ac:	eef0 7ae7 	vabs.f32	s15, s15
 800c3b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b8:	dd06      	ble.n	800c3c8 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800c3ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c3be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800c3c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800c3c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c3d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c3d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d3cd      	bcc.n	800c378 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800c3dc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c3e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c3e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3e8:	f000 809b 	beq.w	800c522 <arm_mat_inverse_f32+0x2b4>
 800c3ec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c3f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	f000 8094 	beq.w	800c522 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	885b      	ldrh	r3, [r3, #2]
 800c40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c410:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c41a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c41c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c41e:	fb03 f202 	mul.w	r2, r3, r2
 800c422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c426:	4413      	add	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c42e:	4413      	add	r3, r2
 800c430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c436:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c43a:	fb03 f202 	mul.w	r2, r3, r2
 800c43e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c442:	4413      	add	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c44a:	4413      	add	r3, r2
 800c44c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c450:	2300      	movs	r3, #0
 800c452:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c456:	e018      	b.n	800c48a <arm_mat_inverse_f32+0x21c>
 800c458:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c464:	1d1a      	adds	r2, r3, #4
 800c466:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800c46a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c46e:	6812      	ldr	r2, [r2, #0]
 800c470:	601a      	str	r2, [r3, #0]
 800c472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c476:	1d1a      	adds	r2, r3, #4
 800c478:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c47c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c47e:	601a      	str	r2, [r3, #0]
 800c480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c484:	3301      	adds	r3, #1
 800c486:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c48a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800c48e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c490:	429a      	cmp	r2, r3
 800c492:	dbe1      	blt.n	800c458 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	685b      	ldr	r3, [r3, #4]
 800c498:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	885b      	ldrh	r3, [r3, #2]
 800c4a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c4b2:	fb02 f303 	mul.w	r3, r2, r3
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c4bc:	4413      	add	r3, r2
 800c4be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c4c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c4c8:	fb02 f303 	mul.w	r3, r2, r3
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c4de:	e018      	b.n	800c512 <arm_mat_inverse_f32+0x2a4>
 800c4e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c4ec:	1d1a      	adds	r2, r3, #4
 800c4ee:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c4f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c4f6:	6812      	ldr	r2, [r2, #0]
 800c4f8:	601a      	str	r2, [r3, #0]
 800c4fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c4fe:	1d1a      	adds	r2, r3, #4
 800c500:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c504:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c506:	601a      	str	r2, [r3, #0]
 800c508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c50c:	3301      	adds	r3, #1
 800c50e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c518:	429a      	cmp	r2, r3
 800c51a:	dbe1      	blt.n	800c4e0 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800c51c:	2301      	movs	r3, #1
 800c51e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800c522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c526:	2b01      	cmp	r3, #1
 800c528:	d009      	beq.n	800c53e <arm_mat_inverse_f32+0x2d0>
 800c52a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c52e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c536:	d102      	bne.n	800c53e <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800c538:	f06f 0304 	mvn.w	r3, #4
 800c53c:	e208      	b.n	800c950 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800c53e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c542:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800c546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c54a:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	885b      	ldrh	r3, [r3, #2]
 800c55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c55c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c55e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c562:	1ad3      	subs	r3, r2, r3
 800c564:	633b      	str	r3, [r7, #48]	@ 0x30
 800c566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c568:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c56a:	fb03 f202 	mul.w	r2, r3, r2
 800c56e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c572:	4413      	add	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c57a:	4413      	add	r3, r2
 800c57c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c580:	2300      	movs	r3, #0
 800c582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c586:	e011      	b.n	800c5ac <arm_mat_inverse_f32+0x33e>
 800c588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c58c:	1d1a      	adds	r2, r3, #4
 800c58e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800c592:	ed93 7a00 	vldr	s14, [r3]
 800c596:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59e:	edc3 7a00 	vstr	s15, [r3]
 800c5a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c5a6:	3301      	adds	r3, #1
 800c5a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c5ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	dbe8      	blt.n	800c588 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	885b      	ldrh	r3, [r3, #2]
 800c5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c5cc:	fb02 f303 	mul.w	r3, r2, r3
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c5d6:	4413      	add	r3, r2
 800c5d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5e2:	e011      	b.n	800c608 <arm_mat_inverse_f32+0x39a>
 800c5e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c5e8:	1d1a      	adds	r2, r3, #4
 800c5ea:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800c5ee:	ed93 7a00 	vldr	s14, [r3]
 800c5f2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5fa:	edc3 7a00 	vstr	s15, [r3]
 800c5fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c602:	3301      	adds	r3, #1
 800c604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c608:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800c60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60e:	429a      	cmp	r2, r3
 800c610:	dbe8      	blt.n	800c5e4 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800c612:	2300      	movs	r3, #0
 800c614:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800c618:	e0ae      	b.n	800c778 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	885b      	ldrh	r3, [r3, #2]
 800c622:	4619      	mov	r1, r3
 800c624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c628:	fb03 f101 	mul.w	r1, r3, r1
 800c62c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c630:	440b      	add	r3, r1
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	4413      	add	r3, r2
 800c636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	885b      	ldrh	r3, [r3, #2]
 800c658:	617b      	str	r3, [r7, #20]
 800c65a:	697a      	ldr	r2, [r7, #20]
 800c65c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	613b      	str	r3, [r7, #16]
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c66a:	fb03 f202 	mul.w	r2, r3, r2
 800c66e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c67a:	4413      	add	r3, r2
 800c67c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c684:	fb03 f202 	mul.w	r2, r3, r2
 800c688:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c68c:	4413      	add	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c694:	4413      	add	r3, r2
 800c696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c69a:	2300      	movs	r3, #0
 800c69c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c6a0:	e01a      	b.n	800c6d8 <arm_mat_inverse_f32+0x46a>
 800c6a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c6a6:	1d1a      	adds	r2, r3, #4
 800c6a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c6ac:	ed93 7a00 	vldr	s14, [r3]
 800c6b0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c6b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c6bc:	1d1a      	adds	r2, r3, #4
 800c6be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c6c2:	ed93 7a00 	vldr	s14, [r3]
 800c6c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6ca:	edc3 7a00 	vstr	s15, [r3]
 800c6ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c6d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	dbdf      	blt.n	800c6a2 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	885b      	ldrh	r3, [r3, #2]
 800c6f6:	60fb      	str	r3, [r7, #12]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	60bb      	str	r3, [r7, #8]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c702:	fb02 f303 	mul.w	r3, r2, r3
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c70c:	4413      	add	r3, r2
 800c70e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c716:	fb02 f303 	mul.w	r3, r2, r3
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c720:	4413      	add	r3, r2
 800c722:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c726:	2300      	movs	r3, #0
 800c728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c72c:	e01a      	b.n	800c764 <arm_mat_inverse_f32+0x4f6>
 800c72e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c732:	1d1a      	adds	r2, r3, #4
 800c734:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c738:	ed93 7a00 	vldr	s14, [r3]
 800c73c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c740:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c748:	1d1a      	adds	r2, r3, #4
 800c74a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c74e:	ed93 7a00 	vldr	s14, [r3]
 800c752:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c756:	edc3 7a00 	vstr	s15, [r3]
 800c75a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c75e:	3301      	adds	r3, #1
 800c760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c764:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	429a      	cmp	r2, r3
 800c76c:	dbdf      	blt.n	800c72e <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c76e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c772:	3301      	adds	r3, #1
 800c774:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c778:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c77c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c77e:	429a      	cmp	r2, r3
 800c780:	f4ff af4b 	bcc.w	800c61a <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c786:	3301      	adds	r3, #1
 800c788:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c78c:	e092      	b.n	800c8b4 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	685a      	ldr	r2, [r3, #4]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	885b      	ldrh	r3, [r3, #2]
 800c796:	4619      	mov	r1, r3
 800c798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c79c:	fb03 f101 	mul.w	r1, r3, r1
 800c7a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c7a4:	440b      	add	r3, r1
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	685b      	ldr	r3, [r3, #4]
 800c7bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	677b      	str	r3, [r7, #116]	@ 0x74
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	885b      	ldrh	r3, [r3, #2]
 800c7c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	623b      	str	r3, [r7, #32]
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c7da:	fb03 f202 	mul.w	r2, r3, r2
 800c7de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c7e2:	4413      	add	r3, r2
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c7e8:	4413      	add	r3, r2
 800c7ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c7ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7f0:	fb03 f202 	mul.w	r2, r3, r2
 800c7f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c7f8:	4413      	add	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c7fe:	4413      	add	r3, r2
 800c800:	677b      	str	r3, [r7, #116]	@ 0x74
 800c802:	2300      	movs	r3, #0
 800c804:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c806:	e014      	b.n	800c832 <arm_mat_inverse_f32+0x5c4>
 800c808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c80a:	1d1a      	adds	r2, r3, #4
 800c80c:	677a      	str	r2, [r7, #116]	@ 0x74
 800c80e:	ed93 7a00 	vldr	s14, [r3]
 800c812:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c81a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c81c:	1d1a      	adds	r2, r3, #4
 800c81e:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c820:	ed93 7a00 	vldr	s14, [r3]
 800c824:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c828:	edc3 7a00 	vstr	s15, [r3]
 800c82c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c82e:	3301      	adds	r3, #1
 800c830:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c832:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c834:	6a3b      	ldr	r3, [r7, #32]
 800c836:	429a      	cmp	r2, r3
 800c838:	dbe6      	blt.n	800c808 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	685b      	ldr	r3, [r3, #4]
 800c83e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	885b      	ldrh	r3, [r3, #2]
 800c84a:	61fb      	str	r3, [r7, #28]
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	61bb      	str	r3, [r7, #24]
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c856:	fb02 f303 	mul.w	r3, r2, r3
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c85e:	4413      	add	r3, r2
 800c860:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c866:	fb02 f303 	mul.w	r3, r2, r3
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c86e:	4413      	add	r3, r2
 800c870:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c872:	2300      	movs	r3, #0
 800c874:	673b      	str	r3, [r7, #112]	@ 0x70
 800c876:	e014      	b.n	800c8a2 <arm_mat_inverse_f32+0x634>
 800c878:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c87a:	1d1a      	adds	r2, r3, #4
 800c87c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c87e:	ed93 7a00 	vldr	s14, [r3]
 800c882:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c88c:	1d1a      	adds	r2, r3, #4
 800c88e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c890:	ed93 7a00 	vldr	s14, [r3]
 800c894:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c898:	edc3 7a00 	vstr	s15, [r3]
 800c89c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c89e:	3301      	adds	r3, #1
 800c8a0:	673b      	str	r3, [r7, #112]	@ 0x70
 800c8a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	dbe6      	blt.n	800c878 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c8aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c8b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c8b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	f4ff af67 	bcc.w	800c78e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c8c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	f4ff ad32 	bcc.w	800c33a <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c8dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d033      	beq.n	800c94c <arm_mat_inverse_f32+0x6de>
 800c8e4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c8e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f0:	d12c      	bne.n	800c94c <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c8fe:	e010      	b.n	800c922 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c908:	4413      	add	r3, r2
 800c90a:	edd3 7a00 	vldr	s15, [r3]
 800c90e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c916:	d10d      	bne.n	800c934 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c918:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c91c:	3301      	adds	r3, #1
 800c91e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c924:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c926:	fb02 f303 	mul.w	r3, r2, r3
 800c92a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c92e:	429a      	cmp	r2, r3
 800c930:	d3e6      	bcc.n	800c900 <arm_mat_inverse_f32+0x692>
 800c932:	e000      	b.n	800c936 <arm_mat_inverse_f32+0x6c8>
            break;
 800c934:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c936:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c938:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c93a:	fb02 f303 	mul.w	r3, r2, r3
 800c93e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c942:	429a      	cmp	r2, r3
 800c944:	d102      	bne.n	800c94c <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c946:	23fb      	movs	r3, #251	@ 0xfb
 800c948:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c94c:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c950:	4618      	mov	r0, r3
 800c952:	37ec      	adds	r7, #236	@ 0xec
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b093      	sub	sp, #76	@ 0x4c
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	685b      	ldr	r3, [r3, #4]
 800c972:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	685b      	ldr	r3, [r3, #4]
 800c978:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c97a:	68bb      	ldr	r3, [r7, #8]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	885b      	ldrh	r3, [r3, #2]
 800c990:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c998:	2300      	movs	r3, #0
 800c99a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c99c:	8b7b      	ldrh	r3, [r7, #26]
 800c99e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	69fa      	ldr	r2, [r7, #28]
 800c9a6:	4413      	add	r3, r2
 800c9a8:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c9aa:	8b3b      	ldrh	r3, [r7, #24]
 800c9ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c9b4:	f04f 0300 	mov.w	r3, #0
 800c9b8:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c9ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9bc:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c9be:	8afb      	ldrh	r3, [r7, #22]
 800c9c0:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c9c2:	e017      	b.n	800c9f4 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c9c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9c6:	1d1a      	adds	r2, r3, #4
 800c9c8:	647a      	str	r2, [r7, #68]	@ 0x44
 800c9ca:	ed93 7a00 	vldr	s14, [r3]
 800c9ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9d0:	edd3 7a00 	vldr	s15, [r3]
 800c9d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c9dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9e0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c9e4:	8b3b      	ldrh	r3, [r7, #24]
 800c9e6:	009b      	lsls	r3, r3, #2
 800c9e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9ea:	4413      	add	r3, r2
 800c9ec:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d1e4      	bne.n	800c9c4 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	1d1a      	adds	r2, r3, #4
 800c9fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ca00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca02:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	3b01      	subs	r3, #1
 800ca08:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800ca0a:	8b3a      	ldrh	r2, [r7, #24]
 800ca0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	6a3a      	ldr	r2, [r7, #32]
 800ca14:	4413      	add	r3, r2
 800ca16:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1ca      	bne.n	800c9b4 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800ca1e:	8b3b      	ldrh	r3, [r7, #24]
 800ca20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca22:	4413      	add	r3, r2
 800ca24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800ca26:	8afb      	ldrh	r3, [r7, #22]
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ca2c:	4413      	add	r3, r2
 800ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800ca30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca32:	3b01      	subs	r3, #1
 800ca34:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800ca36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1b1      	bne.n	800c9a0 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800ca40:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	374c      	adds	r7, #76	@ 0x4c
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b08b      	sub	sp, #44	@ 0x2c
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60f8      	str	r0, [r7, #12]
 800ca58:	60b9      	str	r1, [r7, #8]
 800ca5a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	461a      	mov	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	885b      	ldrh	r3, [r3, #2]
 800ca78:	fb02 f303 	mul.w	r3, r2, r3
 800ca7c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ca82:	e013      	b.n	800caac <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800ca84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca86:	1d1a      	adds	r2, r3, #4
 800ca88:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca8a:	ed93 7a00 	vldr	s14, [r3]
 800ca8e:	6a3b      	ldr	r3, [r7, #32]
 800ca90:	1d1a      	adds	r2, r3, #4
 800ca92:	623a      	str	r2, [r7, #32]
 800ca94:	edd3 7a00 	vldr	s15, [r3]
 800ca98:	69fb      	ldr	r3, [r7, #28]
 800ca9a:	1d1a      	adds	r2, r3, #4
 800ca9c:	61fa      	str	r2, [r7, #28]
 800ca9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800caa2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	3b01      	subs	r3, #1
 800caaa:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d1e8      	bne.n	800ca84 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cab2:	2300      	movs	r3, #0
 800cab4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800cab6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	372c      	adds	r7, #44	@ 0x2c
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b08b      	sub	sp, #44	@ 0x2c
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	885b      	ldrh	r3, [r3, #2]
 800cae6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800cae8:	89fb      	ldrh	r3, [r7, #14]
 800caea:	61bb      	str	r3, [r7, #24]
 800caec:	2300      	movs	r3, #0
 800caee:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	4413      	add	r3, r2
 800caf8:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800cafa:	89bb      	ldrh	r3, [r7, #12]
 800cafc:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800cafe:	e00d      	b.n	800cb1c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800cb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb02:	1d1a      	adds	r2, r3, #4
 800cb04:	627a      	str	r2, [r7, #36]	@ 0x24
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	6a3b      	ldr	r3, [r7, #32]
 800cb0a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800cb0c:	89fb      	ldrh	r3, [r7, #14]
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	6a3a      	ldr	r2, [r7, #32]
 800cb12:	4413      	add	r3, r2
 800cb14:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1ee      	bne.n	800cb00 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	3301      	adds	r3, #1
 800cb26:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1dd      	bne.n	800caf0 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cb34:	2300      	movs	r3, #0
 800cb36:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800cb38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	372c      	adds	r7, #44	@ 0x2c
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <memset>:
 800cb48:	4402      	add	r2, r0
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d100      	bne.n	800cb52 <memset+0xa>
 800cb50:	4770      	bx	lr
 800cb52:	f803 1b01 	strb.w	r1, [r3], #1
 800cb56:	e7f9      	b.n	800cb4c <memset+0x4>

0800cb58 <__errno>:
 800cb58:	4b01      	ldr	r3, [pc, #4]	@ (800cb60 <__errno+0x8>)
 800cb5a:	6818      	ldr	r0, [r3, #0]
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	2000020c 	.word	0x2000020c

0800cb64 <__libc_init_array>:
 800cb64:	b570      	push	{r4, r5, r6, lr}
 800cb66:	4d0d      	ldr	r5, [pc, #52]	@ (800cb9c <__libc_init_array+0x38>)
 800cb68:	4c0d      	ldr	r4, [pc, #52]	@ (800cba0 <__libc_init_array+0x3c>)
 800cb6a:	1b64      	subs	r4, r4, r5
 800cb6c:	10a4      	asrs	r4, r4, #2
 800cb6e:	2600      	movs	r6, #0
 800cb70:	42a6      	cmp	r6, r4
 800cb72:	d109      	bne.n	800cb88 <__libc_init_array+0x24>
 800cb74:	4d0b      	ldr	r5, [pc, #44]	@ (800cba4 <__libc_init_array+0x40>)
 800cb76:	4c0c      	ldr	r4, [pc, #48]	@ (800cba8 <__libc_init_array+0x44>)
 800cb78:	f000 f848 	bl	800cc0c <_init>
 800cb7c:	1b64      	subs	r4, r4, r5
 800cb7e:	10a4      	asrs	r4, r4, #2
 800cb80:	2600      	movs	r6, #0
 800cb82:	42a6      	cmp	r6, r4
 800cb84:	d105      	bne.n	800cb92 <__libc_init_array+0x2e>
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb8c:	4798      	blx	r3
 800cb8e:	3601      	adds	r6, #1
 800cb90:	e7ee      	b.n	800cb70 <__libc_init_array+0xc>
 800cb92:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb96:	4798      	blx	r3
 800cb98:	3601      	adds	r6, #1
 800cb9a:	e7f2      	b.n	800cb82 <__libc_init_array+0x1e>
 800cb9c:	0800cc6c 	.word	0x0800cc6c
 800cba0:	0800cc6c 	.word	0x0800cc6c
 800cba4:	0800cc6c 	.word	0x0800cc6c
 800cba8:	0800cc70 	.word	0x0800cc70

0800cbac <memcpy>:
 800cbac:	440a      	add	r2, r1
 800cbae:	4291      	cmp	r1, r2
 800cbb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800cbb4:	d100      	bne.n	800cbb8 <memcpy+0xc>
 800cbb6:	4770      	bx	lr
 800cbb8:	b510      	push	{r4, lr}
 800cbba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbc2:	4291      	cmp	r1, r2
 800cbc4:	d1f9      	bne.n	800cbba <memcpy+0xe>
 800cbc6:	bd10      	pop	{r4, pc}

0800cbc8 <sqrtf>:
 800cbc8:	b508      	push	{r3, lr}
 800cbca:	ed2d 8b02 	vpush	{d8}
 800cbce:	eeb0 8a40 	vmov.f32	s16, s0
 800cbd2:	f000 f817 	bl	800cc04 <__ieee754_sqrtf>
 800cbd6:	eeb4 8a48 	vcmp.f32	s16, s16
 800cbda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbde:	d60c      	bvs.n	800cbfa <sqrtf+0x32>
 800cbe0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cc00 <sqrtf+0x38>
 800cbe4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cbe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbec:	d505      	bpl.n	800cbfa <sqrtf+0x32>
 800cbee:	f7ff ffb3 	bl	800cb58 <__errno>
 800cbf2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cbf6:	2321      	movs	r3, #33	@ 0x21
 800cbf8:	6003      	str	r3, [r0, #0]
 800cbfa:	ecbd 8b02 	vpop	{d8}
 800cbfe:	bd08      	pop	{r3, pc}
 800cc00:	00000000 	.word	0x00000000

0800cc04 <__ieee754_sqrtf>:
 800cc04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cc08:	4770      	bx	lr
	...

0800cc0c <_init>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr

0800cc18 <_fini>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	bf00      	nop
 800cc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1e:	bc08      	pop	{r3}
 800cc20:	469e      	mov	lr, r3
 800cc22:	4770      	bx	lr
