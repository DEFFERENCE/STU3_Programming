
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a18c  0800a18c  0000b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  0000c264  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a1cc  0800a1cc  0000b1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1d4  0800a1d4  0000c264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d4  0800a1d4  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1d8  0800a1d8  0000b1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000264  20000000  0800a1dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010c0  20000264  0800a440  0000c264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001324  0800a440  0000c324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca92  00000000  00000000  0000c294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003400  00000000  00000000  00028d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0002c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000119d  00000000  00000000  0002d7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cea  00000000  00000000  0002e95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a86e  00000000  00000000  00057647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115747  00000000  00000000  00071eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001875fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000637c  00000000  00000000  00187640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0018d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000264 	.word	0x20000264
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a174 	.word	0x0800a174

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000268 	.word	0x20000268
 8000214:	0800a174 	.word	0x0800a174

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 8000544:	b480      	push	{r7}
 8000546:	b089      	sub	sp, #36	@ 0x24
 8000548:	af00      	add	r7, sp, #0
 800054a:	61f8      	str	r0, [r7, #28]
 800054c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000550:	edc7 0a05 	vstr	s1, [r7, #20]
 8000554:	ed87 1a04 	vstr	s2, [r7, #16]
 8000558:	edc7 1a03 	vstr	s3, [r7, #12]
 800055c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000560:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 8000564:	69fb      	ldr	r3, [r7, #28]
 8000566:	685b      	ldr	r3, [r3, #4]
 8000568:	3322      	adds	r3, #34	@ 0x22
 800056a:	edd7 7a06 	vldr	s15, [r7, #24]
 800056e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000572:	ee17 2a90 	vmov	r2, s15
 8000576:	b292      	uxth	r2, r2
 8000578:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x12].U16 = theta_pos;
 800057a:	69fb      	ldr	r3, [r7, #28]
 800057c:	685b      	ldr	r3, [r3, #4]
 800057e:	3324      	adds	r3, #36	@ 0x24
 8000580:	edd7 7a05 	vldr	s15, [r7, #20]
 8000584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000588:	ee17 2a90 	vmov	r2, s15
 800058c:	b292      	uxth	r2, r2
 800058e:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x13].U16 = r_Velo;
 8000590:	69fb      	ldr	r3, [r7, #28]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	3326      	adds	r3, #38	@ 0x26
 8000596:	edd7 7a04 	vldr	s15, [r7, #16]
 800059a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800059e:	ee17 2a90 	vmov	r2, s15
 80005a2:	b292      	uxth	r2, r2
 80005a4:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x14].U16 = theta_Velo;
 80005a6:	69fb      	ldr	r3, [r7, #28]
 80005a8:	685b      	ldr	r3, [r3, #4]
 80005aa:	3328      	adds	r3, #40	@ 0x28
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005b4:	ee17 2a90 	vmov	r2, s15
 80005b8:	b292      	uxth	r2, r2
 80005ba:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x15].U16 = r_accel;
 80005bc:	69fb      	ldr	r3, [r7, #28]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	332a      	adds	r3, #42	@ 0x2a
 80005c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005ca:	ee17 2a90 	vmov	r2, s15
 80005ce:	b292      	uxth	r2, r2
 80005d0:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
 80005d2:	69fb      	ldr	r3, [r7, #28]
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	332c      	adds	r3, #44	@ 0x2c
 80005d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80005dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e0:	ee17 2a90 	vmov	r2, s15
 80005e4:	b292      	uxth	r2, r2
 80005e6:	801a      	strh	r2, [r3, #0]
}
 80005e8:	bf00      	nop
 80005ea:	3724      	adds	r7, #36	@ 0x24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) // 9 >= Index >= 0
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000600:	edc7 0a01 	vstr	s1, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	if (index >=0 && index <= 9) {
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	2b09      	cmp	r3, #9
 800060c:	d81c      	bhi.n	8000648 <set_Target_Position_ten_points+0x54>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = r_pos;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	3310      	adds	r3, #16
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	4413      	add	r3, r2
 800061a:	edd7 7a02 	vldr	s15, [r7, #8]
 800061e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000622:	ee17 2a90 	vmov	r2, s15
 8000626:	b292      	uxth	r2, r2
 8000628:	801a      	strh	r2, [r3, #0]
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 = theta_pos;
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	78fb      	ldrb	r3, [r7, #3]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	3321      	adds	r3, #33	@ 0x21
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	4413      	add	r3, r2
 8000638:	edd7 7a01 	vldr	s15, [r7, #4]
 800063c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000640:	ee17 2a90 	vmov	r2, s15
 8000644:	b292      	uxth	r2, r2
 8000646:	801a      	strh	r2, [r3, #0]
	}
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	3380      	adds	r3, #128	@ 0x80
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	81fb      	strh	r3, [r7, #14]
	return goal_r_position;
 8000666:	89fb      	ldrh	r3, [r7, #14]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	3382      	adds	r3, #130	@ 0x82
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position;
 8000686:	89fb      	ldrh	r3, [r7, #14]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <Encoder_Init>:
#include "Encoder.h"

#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	683a      	ldr	r2, [r7, #0]
 80006a2:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 80006a4:	213c      	movs	r1, #60	@ 0x3c
 80006a6:	6838      	ldr	r0, [r7, #0]
 80006a8:	f005 fbac 	bl	8005e04 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b2:	461a      	mov	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f04f 0200 	mov.w	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f04f 0200 	mov.w	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f04f 0200 	mov.w	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = 0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 80006e8:	b480      	push	{r7}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006fc:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800070e:	4293      	cmp	r3, r2
 8000710:	dd05      	ble.n	800071e <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8000718:	3b60      	subs	r3, #96	@ 0x60
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e008      	b.n	8000730 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4a25      	ldr	r2, [pc, #148]	@ (80007b8 <Encoder_Update+0xd0>)
 8000722:	4293      	cmp	r3, r2
 8000724:	da04      	bge.n	8000730 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800072c:	3360      	adds	r3, #96	@ 0x60
 800072e:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	ed93 7a02 	vldr	s14, [r3, #8]
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	ee07 3a90 	vmov	s15, r3
 800073c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000740:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80007bc <Encoder_Update+0xd4>
 8000744:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000748:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 80007c0 <Encoder_Update+0xd8>
 800074c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	edd3 7a05 	vldr	s15, [r3, #20]
 8000766:	ee77 6a67 	vsub.f32	s13, s14, s15
 800076a:	ed97 7a00 	vldr	s14, [r7]
 800076e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	ed93 7a03 	vldr	s14, [r3, #12]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	edd3 7a06 	vldr	s15, [r3, #24]
 8000784:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000788:	ed97 7a00 	vldr	s14, [r7]
 800078c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	edc3 7a04 	vstr	s15, [r3, #16]

    enc->lastRawPosition = rawPosition;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	615a      	str	r2, [r3, #20]
    enc->lastVelocity = enc->velocity;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	619a      	str	r2, [r3, #24]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	ffff8ad0 	.word	0xffff8ad0
 80007bc:	40c90fda 	.word	0x40c90fda
 80007c0:	463b8000 	.word	0x463b8000

080007c4 <Encoder_GetPosition>:
void Encoder_setLimit(Encoder *enc, float limit)
{
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    return enc->position;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	ee07 3a90 	vmov	s15, r3
}
 80007d4:	eeb0 0a67 	vmov.f32	s0, s15
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	ee07 3a90 	vmov	s15, r3
}
 80007f2:	eeb0 0a67 	vmov.f32	s0, s15
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	ee07 3a90 	vmov	s15, r3
}
 8000810:	eeb0 0a67 	vmov.f32	s0, s15
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <modbus_1t5_Timeout+0x1c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2201      	movs	r2, #1
 800082e:	751a      	strb	r2, [r3, #20]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	20000280 	.word	0x20000280

08000840 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <modbus_3t5_Timeout+0x1c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2201      	movs	r2, #1
 800084e:	755a      	strb	r2, [r3, #21]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	20000280 	.word	0x20000280

08000860 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <modbus_UART_Recived+0x60>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2201      	movs	r2, #1
 8000870:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <modbus_UART_Recived+0x60>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800087a:	1c59      	adds	r1, r3, #1
 800087c:	b289      	uxth	r1, r1
 800087e:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8000882:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000886:	d210      	bcs.n	80008aa <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000888:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <modbus_UART_Recived+0x60>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68d8      	ldr	r0, [r3, #12]
 800088e:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <modbus_UART_Recived+0x60>)
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <modbus_UART_Recived+0x60>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800089a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800089e:	4413      	add	r3, r2
 80008a0:	3302      	adds	r3, #2
 80008a2:	2201      	movs	r2, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	f007 f8c7 	bl	8007a38 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80008aa:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <modbus_UART_Recived+0x60>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000280 	.word	0x20000280

080008c4 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80008ce:	4a24      	ldr	r2, [pc, #144]	@ (8000960 <Modbus_init+0x9c>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <Modbus_init+0x9c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80008dc:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <Modbus_init+0x9c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	4a20      	ldr	r2, [pc, #128]	@ (8000964 <Modbus_init+0xa0>)
 80008e4:	2114      	movs	r1, #20
 80008e6:	4618      	mov	r0, r3
 80008e8:	f005 ff9c 	bl	8006824 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <Modbus_init+0x9c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	691b      	ldr	r3, [r3, #16]
 80008f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000968 <Modbus_init+0xa4>)
 80008f4:	210e      	movs	r1, #14
 80008f6:	4618      	mov	r0, r3
 80008f8:	f005 ff94 	bl	8006824 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80008fc:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <Modbus_init+0x9c>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	4a1a      	ldr	r2, [pc, #104]	@ (800096c <Modbus_init+0xa8>)
 8000904:	2103      	movs	r1, #3
 8000906:	4618      	mov	r0, r3
 8000908:	f006 ffdc 	bl	80078c4 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <Modbus_init+0x9c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68d8      	ldr	r0, [r3, #12]
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <Modbus_init+0x9c>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <Modbus_init+0x9c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800091e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000922:	4413      	add	r3, r2
 8000924:	3302      	adds	r3, #2
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	f007 f885 	bl	8007a38 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800092e:	4b0c      	ldr	r3, [pc, #48]	@ (8000960 <Modbus_init+0x9c>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	691b      	ldr	r3, [r3, #16]
 8000934:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b01      	cmp	r3, #1
 800093c:	d10c      	bne.n	8000958 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800093e:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <Modbus_init+0x9c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	691b      	ldr	r3, [r3, #16]
 8000944:	4618      	mov	r0, r3
 8000946:	f004 ff5f 	bl	8005808 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <Modbus_init+0x9c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	691b      	ldr	r3, [r3, #16]
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f005 f914 	bl	8005b80 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000280 	.word	0x20000280
 8000964:	08000821 	.word	0x08000821
 8000968:	08000841 	.word	0x08000841
 800096c:	08000861 	.word	0x08000861

08000970 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800097c:	23ff      	movs	r3, #255	@ 0xff
 800097e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000980:	23ff      	movs	r3, #255	@ 0xff
 8000982:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000984:	e013      	b.n	80009ae <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	1c5a      	adds	r2, r3, #1
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	7bbb      	ldrb	r3, [r7, #14]
 8000990:	4053      	eors	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <CRC16+0x68>)
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4413      	add	r3, r2
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4053      	eors	r3, r2
 80009a2:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <CRC16+0x6c>)
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	4413      	add	r3, r2
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80009ae:	883b      	ldrh	r3, [r7, #0]
 80009b0:	1e5a      	subs	r2, r3, #1
 80009b2:	803a      	strh	r2, [r7, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1e6      	bne.n	8000986 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	b21b      	sxth	r3, r3
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	b21a      	sxth	r2, r3
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	b29b      	uxth	r3, r3
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000100 	.word	0x20000100
 80009dc:	20000000 	.word	0x20000000

080009e0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80009e6:	4b80      	ldr	r3, [pc, #512]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	7e1b      	ldrb	r3, [r3, #24]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d80a      	bhi.n	8000a08 <Modbus_Protocal_Worker+0x28>
 80009f2:	a201      	add	r2, pc, #4	@ (adr r2, 80009f8 <Modbus_Protocal_Worker+0x18>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000a13 	.word	0x08000a13
 80009fc:	08000bb1 	.word	0x08000bb1
 8000a00:	08000a9d 	.word	0x08000a9d
 8000a04:	08000ac3 	.word	0x08000ac3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8000a08:	4b77      	ldr	r3, [pc, #476]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	761a      	strb	r2, [r3, #24]
		break;
 8000a10:	e0e6      	b.n	8000be0 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000a12:	4b75      	ldr	r3, [pc, #468]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8000a1e:	f000 f9d5 	bl	8000dcc <Modbus_Emission>
 8000a22:	e01c      	b.n	8000a5e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000a24:	4b70      	ldr	r3, [pc, #448]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	7d9b      	ldrb	r3, [r3, #22]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d017      	beq.n	8000a5e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2200      	movs	r2, #0
 8000a34:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000a36:	4b6c      	ldr	r3, [pc, #432]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8000a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	691b      	ldr	r3, [r3, #16]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b67      	ldr	r3, [pc, #412]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	691b      	ldr	r3, [r3, #16]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f042 0201 	orr.w	r2, r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000a56:	4b64      	ldr	r3, [pc, #400]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8000a5e:	4b62      	ldr	r3, [pc, #392]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a68:	2b20      	cmp	r3, #32
 8000a6a:	f040 80b2 	bne.w	8000bd2 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8000a6e:	4b5e      	ldr	r3, [pc, #376]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000a78:	4b5b      	ldr	r3, [pc, #364]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	68d8      	ldr	r0, [r3, #12]
 8000a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b59      	ldr	r3, [pc, #356]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000a8a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000a8e:	4413      	add	r3, r2
 8000a90:	3302      	adds	r3, #2
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	f006 ffcf 	bl	8007a38 <HAL_UART_Receive_IT>
		}
		break;
 8000a9a:	e09a      	b.n	8000bd2 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8000a9c:	4b52      	ldr	r3, [pc, #328]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7d1b      	ldrb	r3, [r3, #20]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f000 8097 	beq.w	8000bd6 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2200      	movs	r2, #0
 8000aae:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8000ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	22fe      	movs	r2, #254	@ 0xfe
 8000ab6:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2204      	movs	r2, #4
 8000abe:	761a      	strb	r2, [r3, #24]
		}
		break;
 8000ac0:	e089      	b.n	8000bd6 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8000ac2:	4b49      	ldr	r3, [pc, #292]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	7d9b      	ldrb	r3, [r3, #22]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8000acc:	4b46      	ldr	r3, [pc, #280]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d103      	bne.n	8000ae0 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000ad8:	4b43      	ldr	r3, [pc, #268]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	22ff      	movs	r2, #255	@ 0xff
 8000ade:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8000ae0:	4b41      	ldr	r3, [pc, #260]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8000ae8:	f113 0f02 	cmn.w	r3, #2
 8000aec:	d150      	bne.n	8000b90 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8000aee:	4b3e      	ldr	r3, [pc, #248]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2200      	movs	r2, #0
 8000af4:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8000af6:	4b3c      	ldr	r3, [pc, #240]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8000afe:	4b3a      	ldr	r3, [pc, #232]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b06:	3b02      	subs	r3, #2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	f7ff ff30 	bl	8000970 <CRC16>
 8000b10:	4603      	mov	r3, r0
 8000b12:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000b14:	793a      	ldrb	r2, [r7, #4]
 8000b16:	4b34      	ldr	r3, [pc, #208]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b18:	6819      	ldr	r1, [r3, #0]
 8000b1a:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b22:	3b02      	subs	r3, #2
 8000b24:	440b      	add	r3, r1
 8000b26:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d10c      	bne.n	8000b48 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8000b2e:	797a      	ldrb	r2, [r7, #5]
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	4b2c      	ldr	r3, [pc, #176]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	440b      	add	r3, r1
 8000b40:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d004      	beq.n	8000b52 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000b48:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	22ff      	movs	r2, #255	@ 0xff
 8000b4e:	75da      	strb	r2, [r3, #23]
				break;
 8000b50:	e046      	b.n	8000be0 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000b52:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8000b5a:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d113      	bne.n	8000b8c <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000b64:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000b74:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000b76:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000b7e:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000b80:	461a      	mov	r2, r3
 8000b82:	f009 fac7 	bl	800a114 <memcpy>

			//execute command
			Modbus_frame_response();
 8000b86:	f000 f909 	bl	8000d9c <Modbus_frame_response>
 8000b8a:	e001      	b.n	8000b90 <Modbus_Protocal_Worker+0x1b0>
				break;
 8000b8c:	bf00      	nop
					}
		break;


	}
}
 8000b8e:	e027      	b.n	8000be0 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000b90:	4b15      	ldr	r3, [pc, #84]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7d5b      	ldrb	r3, [r3, #21]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d01f      	beq.n	8000bda <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f007 f811 	bl	8007bd0 <HAL_UART_AbortReceive>
		break;
 8000bae:	e014      	b.n	8000bda <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bba:	2b20      	cmp	r3, #32
 8000bbc:	d10f      	bne.n	8000bde <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <Modbus_Protocal_Worker+0x208>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2201      	movs	r2, #1
 8000bce:	761a      	strb	r2, [r3, #24]
		break;
 8000bd0:	e005      	b.n	8000bde <Modbus_Protocal_Worker+0x1fe>
		break;
 8000bd2:	bf00      	nop
 8000bd4:	e004      	b.n	8000be0 <Modbus_Protocal_Worker+0x200>
		break;
 8000bd6:	bf00      	nop
 8000bd8:	e002      	b.n	8000be0 <Modbus_Protocal_Worker+0x200>
		break;
 8000bda:	bf00      	nop
 8000bdc:	e000      	b.n	8000be0 <Modbus_Protocal_Worker+0x200>
		break;
 8000bde:	bf00      	nop
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000280 	.word	0x20000280

08000bec <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	7e9b      	ldrb	r3, [r3, #26]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000bfe:	6812      	ldr	r2, [r2, #0]
 8000c00:	7ed2      	ldrb	r2, [r2, #27]
 8000c02:	4413      	add	r3, r2
 8000c04:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8000c06:	88fa      	ldrh	r2, [r7, #6]
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d903      	bls.n	8000c1a <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000c12:	2002      	movs	r0, #2
 8000c14:	f000 f8a0 	bl	8000d58 <ModbusErrorReply>
			 return;
 8000c18:	e023      	b.n	8000c62 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8000c1a:	4b13      	ldr	r3, [pc, #76]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6859      	ldr	r1, [r3, #4]
 8000c24:	88fb      	ldrh	r3, [r7, #6]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	440b      	add	r3, r1
 8000c2a:	7f12      	ldrb	r2, [r2, #28]
 8000c2c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b0d      	ldr	r3, [pc, #52]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	6859      	ldr	r1, [r3, #4]
 8000c38:	88fb      	ldrh	r3, [r7, #6]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	440b      	add	r3, r1
 8000c3e:	7f52      	ldrb	r2, [r2, #29]
 8000c40:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000c42:	4b09      	ldr	r3, [pc, #36]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000c50:	2208      	movs	r2, #8
 8000c52:	4619      	mov	r1, r3
 8000c54:	f009 fa5e 	bl	800a114 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000c58:	4b03      	ldr	r3, [pc, #12]	@ (8000c68 <modbusWrite1Register+0x7c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	2205      	movs	r2, #5
 8000c5e:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000280 	.word	0x20000280

08000c6c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000c72:	4b38      	ldr	r3, [pc, #224]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	7f1b      	ldrb	r3, [r3, #28]
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4a35      	ldr	r2, [pc, #212]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	7f52      	ldrb	r2, [r2, #29]
 8000c82:	4413      	add	r3, r2
 8000c84:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8000c86:	4b33      	ldr	r3, [pc, #204]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	7e9b      	ldrb	r3, [r3, #26]
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4a30      	ldr	r2, [pc, #192]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	7ed2      	ldrb	r2, [r2, #27]
 8000c96:	4413      	add	r3, r2
 8000c98:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <modbusRead1Register+0x3a>
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	2b7d      	cmp	r3, #125	@ 0x7d
 8000ca4:	d903      	bls.n	8000cae <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f000 f856 	bl	8000d58 <ModbusErrorReply>
		 return;
 8000cac:	e04e      	b.n	8000d4c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000cae:	88ba      	ldrh	r2, [r7, #4]
 8000cb0:	4b28      	ldr	r3, [pc, #160]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d808      	bhi.n	8000ccc <modbusRead1Register+0x60>
 8000cba:	88ba      	ldrh	r2, [r7, #4]
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b24      	ldr	r3, [pc, #144]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d903      	bls.n	8000cd4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f000 f843 	bl	8000d58 <ModbusErrorReply>
		 return;
 8000cd2:	e03b      	b.n	8000d4c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2203      	movs	r2, #3
 8000cda:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	0052      	lsls	r2, r2, #1
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e020      	b.n	8000d34 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8000cf2:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	4423      	add	r3, r4
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	18d1      	adds	r1, r2, r3
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	1c63      	adds	r3, r4, #1
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	7849      	ldrb	r1, [r1, #1]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000d12:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	88bb      	ldrh	r3, [r7, #4]
 8000d1a:	4423      	add	r3, r4
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	18d1      	adds	r1, r2, r3
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	0063      	lsls	r3, r4, #1
 8000d26:	3303      	adds	r3, #3
 8000d28:	7809      	ldrb	r1, [r1, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	460a      	mov	r2, r1
 8000d2e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000d32:	3401      	adds	r4, #1
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	429c      	cmp	r4, r3
 8000d38:	dbdb      	blt.n	8000cf2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <modbusRead1Register+0xe8>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	0052      	lsls	r2, r2, #1
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000280 	.word	0x20000280

08000d58 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <ModbusErrorReply+0x40>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	7e5a      	ldrb	r2, [r3, #25]
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <ModbusErrorReply+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <ModbusErrorReply+0x40>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	79fa      	ldrb	r2, [r7, #7]
 8000d7c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <ModbusErrorReply+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2202      	movs	r2, #2
 8000d86:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000280 	.word	0x20000280

08000d9c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000da0:	4b09      	ldr	r3, [pc, #36]	@ (8000dc8 <Modbus_frame_response+0x2c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	7e5b      	ldrb	r3, [r3, #25]
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d004      	beq.n	8000db4 <Modbus_frame_response+0x18>
 8000daa:	2b06      	cmp	r3, #6
 8000dac:	d105      	bne.n	8000dba <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000dae:	f7ff ff1d 	bl	8000bec <modbusWrite1Register>
		break;
 8000db2:	e006      	b.n	8000dc2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000db4:	f7ff ff5a 	bl	8000c6c <modbusRead1Register>
		break;
 8000db8:	e003      	b.n	8000dc2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <ModbusErrorReply>
		break;
 8000dc0:	bf00      	nop

	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000280 	.word	0x20000280

08000dcc <Modbus_Emission>:

void Modbus_Emission()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ddc:	2b20      	cmp	r3, #32
 8000dde:	d15d      	bne.n	8000e9c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000de0:	4b38      	ldr	r3, [pc, #224]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b37      	ldr	r3, [pc, #220]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	7812      	ldrb	r2, [r2, #0]
 8000dea:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000dee:	4b35      	ldr	r3, [pc, #212]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000df6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000df8:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8000e00:	4b30      	ldr	r3, [pc, #192]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f009 f983 	bl	800a114 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b2a      	ldr	r3, [pc, #168]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3203      	adds	r2, #3
 8000e1e:	b292      	uxth	r2, r2
 8000e20:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000e24:	4b27      	ldr	r3, [pc, #156]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000e34:	3b02      	subs	r3, #2
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f7ff fd99 	bl	8000970 <CRC16>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000e42:	4b20      	ldr	r3, [pc, #128]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000e4e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000e50:	7939      	ldrb	r1, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	460a      	mov	r2, r1
 8000e56:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000e66:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000e68:	7979      	ldrb	r1, [r7, #5]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	460a      	mov	r2, r1
 8000e6e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000e72:	4b14      	ldr	r3, [pc, #80]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7c:	2b20      	cmp	r3, #32
 8000e7e:	d10d      	bne.n	8000e9c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000e80:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000e92:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000e96:	461a      	mov	r2, r3
 8000e98:	f006 fe1a 	bl	8007ad0 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000eac:	4b05      	ldr	r3, [pc, #20]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000eb4:	4b03      	ldr	r3, [pc, #12]	@ (8000ec4 <Modbus_Emission+0xf8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000280 	.word	0x20000280

08000ec8 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	@ 0x30
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6178      	str	r0, [r7, #20]
 8000ed0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ed4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ed8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000edc:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ee0:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8000ee4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8000ef4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000ef8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f00:	db02      	blt.n	8000f08 <InitTrajectorySegment+0x40>
 8000f02:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000f06:	e000      	b.n	8000f0a <InitTrajectorySegment+0x42>
 8000f08:	4b43      	ldr	r3, [pc, #268]	@ (8001018 <InitTrajectorySegment+0x150>)
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8000f0c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f10:	eef0 7ae7 	vabs.f32	s15, s15
 8000f14:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8000f18:	edd7 6a02 	vldr	s13, [r7, #8]
 8000f1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f24:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8000f28:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000f30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f34:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f44:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8000f48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f50:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000f54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5c:	d517      	bpl.n	8000f8e <InitTrajectorySegment+0xc6>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8000f5e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000f6a:	eeb0 0a66 	vmov.f32	s0, s13
 8000f6e:	f009 f8df 	bl	800a130 <sqrtf>
 8000f72:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f04f 0200 	mov.w	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8000f7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	edc3 7a07 	vstr	s15, [r3, #28]
 8000f8c:	e01e      	b.n	8000fcc <InitTrajectorySegment+0x104>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8000f8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000f92:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f96:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9e:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8000fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8000fa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8000faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8000fb4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000fb8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	edc3 7a07 	vstr	s15, [r3, #28]
    }

    seg->start_pos = start;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	68fa      	ldr	r2, [r7, #12]
 8000fd6:	605a      	str	r2, [r3, #4]
    seg->v_max = v_max * dir;
 8000fd8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fdc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	edc3 7a02 	vstr	s15, [r3, #8]
    seg->a_max = a_max * dir;
 8000fea:	ed97 7a01 	vldr	s14, [r7, #4]
 8000fee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001000:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001006:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	621a      	str	r2, [r3, #32]
}
 800100e:	bf00      	nop
 8001010:	3730      	adds	r7, #48	@ 0x30
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	bf800000 	.word	0xbf800000

0800101c <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 800101c:	b480      	push	{r7}
 800101e:	b08f      	sub	sp, #60	@ 0x3c
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	edd3 7a08 	vldr	s15, [r3, #32]
 800102e:	ed97 7a00 	vldr	s14, [r7]
 8001032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001036:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 800103a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800103e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001046:	d503      	bpl.n	8001050 <GetTrajectoryPosition+0x34>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edd3 7a00 	vldr	s15, [r3]
 800104e:	e0b4      	b.n	80011ba <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	edd3 7a07 	vldr	s15, [r3, #28]
 8001056:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800105a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001062:	db03      	blt.n	800106c <GetTrajectoryPosition+0x50>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a01 	vldr	s15, [r3, #4]
 800106a:	e0a6      	b.n	80011ba <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	edd3 7a04 	vldr	s15, [r3, #16]
 8001084:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	d512      	bpl.n	80010b8 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 8001092:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001096:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800109a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800109e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b6:	e080      	b.n	80011ba <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80010c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80010cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d525      	bpl.n	8001122 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80010dc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80010e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80010e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80010fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001100:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8001104:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001108:	edd7 7a04 	vldr	s15, [r7, #16]
 800110c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001110:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001118:	edd7 7a03 	vldr	s15, [r7, #12]
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	e04b      	b.n	80011ba <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800112e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001132:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001136:	ee27 7a87 	vmul.f32	s14, s15, s14
 800113a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800113e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001142:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800114e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001152:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8001156:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800115a:	edd7 7a08 	vldr	s15, [r7, #32]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	ed97 7a07 	vldr	s14, [r7, #28]
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116a:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 800116e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001172:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001176:	ee37 7a67 	vsub.f32	s14, s14, s15
 800117a:	edd7 7a08 	vldr	s15, [r7, #32]
 800117e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001182:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 8001186:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800118a:	edd7 7a05 	vldr	s15, [r7, #20]
 800118e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001192:	edd7 7a06 	vldr	s15, [r7, #24]
 8001196:	ee37 7a27 	vadd.f32	s14, s14, s15
 800119a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800119e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80011a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80011a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80011ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80011b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b6:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80011ba:	eeb0 0a67 	vmov.f32	s0, s15
 80011be:	373c      	adds	r7, #60	@ 0x3c
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edd3 7a08 	vldr	s15, [r3, #32]
 80011da:	ed97 7a00 	vldr	s14, [r7]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 80011e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d502      	bpl.n	80011fa <GetTrajectoryVelocity+0x32>
 80011f4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80012a4 <GetTrajectoryVelocity+0xdc>
 80011f8:	e04d      	b.n	8001296 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001200:	ed97 7a05 	vldr	s14, [r7, #20]
 8001204:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120c:	db02      	blt.n	8001214 <GetTrajectoryVelocity+0x4c>
 800120e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80012a4 <GetTrajectoryVelocity+0xdc>
 8001212:	e040      	b.n	8001296 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	edd3 7a04 	vldr	s15, [r3, #16]
 8001226:	ed97 7a05 	vldr	s14, [r7, #20]
 800122a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	d506      	bpl.n	8001242 <GetTrajectoryVelocity+0x7a>
        return a * t;
 8001234:	ed97 7a04 	vldr	s14, [r7, #16]
 8001238:	edd7 7a05 	vldr	s15, [r7, #20]
 800123c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001240:	e029      	b.n	8001296 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	ed93 7a04 	vldr	s14, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	edd3 7a05 	vldr	s15, [r3, #20]
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	ed97 7a05 	vldr	s14, [r7, #20]
 8001256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	d502      	bpl.n	8001266 <GetTrajectoryVelocity+0x9e>
        return v;
 8001260:	edd7 7a03 	vldr	s15, [r7, #12]
 8001264:	e017      	b.n	8001296 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	edd3 7a04 	vldr	s15, [r3, #16]
 800126c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edd3 7a05 	vldr	s15, [r3, #20]
 800127a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127e:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 8001282:	ed97 7a04 	vldr	s14, [r7, #16]
 8001286:	edd7 7a02 	vldr	s15, [r7, #8]
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001292:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8001296:	eeb0 0a67 	vmov.f32	s0, s15
 800129a:	371c      	adds	r7, #28
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	00000000 	.word	0x00000000

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f001 faa6 	bl	80027fe <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f9d7 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 fe4d 	bl	8001f54 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ba:	f000 fe21 	bl	8001f00 <MX_DMA_Init>
  MX_TIM3_Init();
 80012be:	f000 fb39 	bl	8001934 <MX_TIM3_Init>
  MX_ADC1_Init();
 80012c2:	f000 fa1b 	bl	80016fc <MX_ADC1_Init>
  MX_TIM1_Init();
 80012c6:	f000 fa93 	bl	80017f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012ca:	f000 fae5 	bl	8001898 <MX_TIM2_Init>
  MX_TIM4_Init();
 80012ce:	f000 fb87 	bl	80019e0 <MX_TIM4_Init>
  MX_TIM20_Init();
 80012d2:	f000 fd0b 	bl	8001cec <MX_TIM20_Init>
  MX_TIM8_Init();
 80012d6:	f000 fbd9 	bl	8001a8c <MX_TIM8_Init>
  MX_TIM16_Init();
 80012da:	f000 fc87 	bl	8001bec <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80012de:	f000 fdc1 	bl	8001e64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	Encoder_Init(&encoder1, &htim4);
 80012e2:	49b8      	ldr	r1, [pc, #736]	@ (80015c4 <main+0x31c>)
 80012e4:	48b8      	ldr	r0, [pc, #736]	@ (80015c8 <main+0x320>)
 80012e6:	f7ff f9d5 	bl	8000694 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80012ea:	49b8      	ldr	r1, [pc, #736]	@ (80015cc <main+0x324>)
 80012ec:	48b8      	ldr	r0, [pc, #736]	@ (80015d0 <main+0x328>)
 80012ee:	f7ff f9d1 	bl	8000694 <Encoder_Init>

	InitTrajectorySegment(&segments[0], 0.0f, 100.0f, 50.0f, 100.0f, 0.0f);
 80012f2:	ed9f 2ab8 	vldr	s4, [pc, #736]	@ 80015d4 <main+0x32c>
 80012f6:	eddf 1ab8 	vldr	s3, [pc, #736]	@ 80015d8 <main+0x330>
 80012fa:	ed9f 1ab8 	vldr	s2, [pc, #736]	@ 80015dc <main+0x334>
 80012fe:	eddf 0ab6 	vldr	s1, [pc, #728]	@ 80015d8 <main+0x330>
 8001302:	ed9f 0ab4 	vldr	s0, [pc, #720]	@ 80015d4 <main+0x32c>
 8001306:	48b6      	ldr	r0, [pc, #728]	@ (80015e0 <main+0x338>)
 8001308:	f7ff fdde 	bl	8000ec8 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[1], 100.0f, 50.0f, 40.0f, 80.0f,
			segments[0].t_start + segments[0].t_total);
 800130c:	4bb4      	ldr	r3, [pc, #720]	@ (80015e0 <main+0x338>)
 800130e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001312:	4bb3      	ldr	r3, [pc, #716]	@ (80015e0 <main+0x338>)
 8001314:	edd3 7a07 	vldr	s15, [r3, #28]
	InitTrajectorySegment(&segments[1], 100.0f, 50.0f, 40.0f, 80.0f,
 8001318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131c:	eeb0 2a67 	vmov.f32	s4, s15
 8001320:	eddf 1ab0 	vldr	s3, [pc, #704]	@ 80015e4 <main+0x33c>
 8001324:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80015e8 <main+0x340>
 8001328:	eddf 0aac 	vldr	s1, [pc, #688]	@ 80015dc <main+0x334>
 800132c:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 80015d8 <main+0x330>
 8001330:	48ae      	ldr	r0, [pc, #696]	@ (80015ec <main+0x344>)
 8001332:	f7ff fdc9 	bl	8000ec8 <InitTrajectorySegment>
	InitTrajectorySegment(&segments[2], 50.0f, 200.0f, 60.0f, 120.0f,
			segments[1].t_start + segments[1].t_total);
 8001336:	4baa      	ldr	r3, [pc, #680]	@ (80015e0 <main+0x338>)
 8001338:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800133c:	4ba8      	ldr	r3, [pc, #672]	@ (80015e0 <main+0x338>)
 800133e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
	InitTrajectorySegment(&segments[2], 50.0f, 200.0f, 60.0f, 120.0f,
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	eeb0 2a67 	vmov.f32	s4, s15
 800134a:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 80015f0 <main+0x348>
 800134e:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 80015f4 <main+0x34c>
 8001352:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80015f8 <main+0x350>
 8001356:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 80015dc <main+0x334>
 800135a:	48a8      	ldr	r0, [pc, #672]	@ (80015fc <main+0x354>)
 800135c:	f7ff fdb4 	bl	8000ec8 <InitTrajectorySegment>

	int lastTick = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001364:	213c      	movs	r1, #60	@ 0x3c
 8001366:	4899      	ldr	r0, [pc, #612]	@ (80015cc <main+0x324>)
 8001368:	f004 fd4c 	bl	8005e04 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800136c:	213c      	movs	r1, #60	@ 0x3c
 800136e:	4895      	ldr	r0, [pc, #596]	@ (80015c4 <main+0x31c>)
 8001370:	f004 fd48 	bl	8005e04 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8001374:	4ba2      	ldr	r3, [pc, #648]	@ (8001600 <main+0x358>)
 8001376:	4aa3      	ldr	r2, [pc, #652]	@ (8001604 <main+0x35c>)
 8001378:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800137a:	4ba1      	ldr	r3, [pc, #644]	@ (8001600 <main+0x358>)
 800137c:	4aa2      	ldr	r2, [pc, #648]	@ (8001608 <main+0x360>)
 800137e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001380:	4b9f      	ldr	r3, [pc, #636]	@ (8001600 <main+0x358>)
 8001382:	2215      	movs	r2, #21
 8001384:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8001386:	4b9e      	ldr	r3, [pc, #632]	@ (8001600 <main+0x358>)
 8001388:	22c8      	movs	r2, #200	@ 0xc8
 800138a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800138c:	499f      	ldr	r1, [pc, #636]	@ (800160c <main+0x364>)
 800138e:	489c      	ldr	r0, [pc, #624]	@ (8001600 <main+0x358>)
 8001390:	f7ff fa98 	bl	80008c4 <Modbus_init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001394:	4b8d      	ldr	r3, [pc, #564]	@ (80015cc <main+0x324>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	4a9d      	ldr	r2, [pc, #628]	@ (8001610 <main+0x368>)
 800139c:	6013      	str	r3, [r2, #0]
		QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 800139e:	4b89      	ldr	r3, [pc, #548]	@ (80015c4 <main+0x31c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a4:	4a9b      	ldr	r2, [pc, #620]	@ (8001614 <main+0x36c>)
 80013a6:	6013      	str	r3, [r2, #0]
		float r_pos = 5;
 80013a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001618 <main+0x370>)
 80013aa:	61fb      	str	r3, [r7, #28]
		float theta_pos = 6;
 80013ac:	4b9b      	ldr	r3, [pc, #620]	@ (800161c <main+0x374>)
 80013ae:	61bb      	str	r3, [r7, #24]
		float r_Velo = 7;
 80013b0:	4b9b      	ldr	r3, [pc, #620]	@ (8001620 <main+0x378>)
 80013b2:	617b      	str	r3, [r7, #20]
		float theta_Velo = 8;
 80013b4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80013b8:	613b      	str	r3, [r7, #16]
		float r_accel = 9;
 80013ba:	4b9a      	ldr	r3, [pc, #616]	@ (8001624 <main+0x37c>)
 80013bc:	60fb      	str	r3, [r7, #12]
		float theta_accel = 10;
 80013be:	4b9a      	ldr	r3, [pc, #616]	@ (8001628 <main+0x380>)
 80013c0:	60bb      	str	r3, [r7, #8]
		Modbus_Protocal_Worker();
 80013c2:	f7ff fb0d 	bl	80009e0 <Modbus_Protocal_Worker>
		//modbus_r_position(&hmodbus,7);
		hmodbus.RegisterAddress[0x00].U16 = 22881;
 80013c6:	4b8e      	ldr	r3, [pc, #568]	@ (8001600 <main+0x358>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f645 1261 	movw	r2, #22881	@ 0x5961
 80013ce:	801a      	strh	r2, [r3, #0]
//		modbus_theta_position(&hmodbus,5);
//		modbus_r_velocity(&hmodbus,5);
//		modbus_theta_velocity(&hmodbus,5);
//		modbus_r_acceleration(&hmodbus,5);
//		modbus_theta_acceleration(&hmodbus,5);
		modbus_Update_All(&hmodbus, r_pos, theta_pos, r_Velo, theta_Velo,
 80013d0:	edd7 2a02 	vldr	s5, [r7, #8]
 80013d4:	ed97 2a03 	vldr	s4, [r7, #12]
 80013d8:	edd7 1a04 	vldr	s3, [r7, #16]
 80013dc:	ed97 1a05 	vldr	s2, [r7, #20]
 80013e0:	edd7 0a06 	vldr	s1, [r7, #24]
 80013e4:	ed97 0a07 	vldr	s0, [r7, #28]
 80013e8:	4885      	ldr	r0, [pc, #532]	@ (8001600 <main+0x358>)
 80013ea:	f7ff f8ab 	bl	8000544 <modbus_Update_All>
				r_accel, theta_accel);
		for (int i = 0; i < 10; i++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
 80013f2:	e017      	b.n	8001424 <main+0x17c>
			set_Target_Position_ten_points(&hmodbus, i, i + 10, i);
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	330a      	adds	r3, #10
 8001402:	ee07 3a10 	vmov	s14, r3
 8001406:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4619      	mov	r1, r3
 8001410:	eef0 0a47 	vmov.f32	s1, s14
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	4879      	ldr	r0, [pc, #484]	@ (8001600 <main+0x358>)
 800141a:	f7ff f8eb 	bl	80005f4 <set_Target_Position_ten_points>
		for (int i = 0; i < 10; i++) {
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	3301      	adds	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
 8001424:	6a3b      	ldr	r3, [r7, #32]
 8001426:	2b09      	cmp	r3, #9
 8001428:	dde4      	ble.n	80013f4 <main+0x14c>
		}
		Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 800142a:	4875      	ldr	r0, [pc, #468]	@ (8001600 <main+0x358>)
 800142c:	f7ff f912 	bl	8000654 <modbus_set_goal_r_position>
 8001430:	4603      	mov	r3, r0
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800143a:	4b7c      	ldr	r3, [pc, #496]	@ (800162c <main+0x384>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
		Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 8001440:	486f      	ldr	r0, [pc, #444]	@ (8001600 <main+0x358>)
 8001442:	f7ff f917 	bl	8000674 <modbus_set_goal_theta_position>
 8001446:	4603      	mov	r3, r0
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001450:	4b77      	ldr	r3, [pc, #476]	@ (8001630 <main+0x388>)
 8001452:	edc3 7a00 	vstr	s15, [r3]
//		registerFrame[0x06].U16 = 7;
//		registerFrame[0x07].U16 = 8;
//		registerFrame[0x08].U16 = 9;
		//registerFrame[0x15].U16 = 10;
		//}
		uint32_t currentTick = HAL_GetTick();
 8001456:	f001 fa37 	bl	80028c8 <HAL_GetTick>
 800145a:	6078      	str	r0, [r7, #4]
		float dt = (currentTick - lastTick) / 1000.0f;
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	ee07 3a90 	vmov	s15, r3
 8001466:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800146a:	eddf 6a72 	vldr	s13, [pc, #456]	@ 8001634 <main+0x38c>
 800146e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001472:	edc7 7a00 	vstr	s15, [r7]
//		QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim4);
		if (dt >= 0.01f) {
 8001476:	edd7 7a00 	vldr	s15, [r7]
 800147a:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001638 <main+0x390>
 800147e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	db3b      	blt.n	8001500 <main+0x258>
			Encoder_Update(&encoder1, dt);
 8001488:	ed97 0a00 	vldr	s0, [r7]
 800148c:	484e      	ldr	r0, [pc, #312]	@ (80015c8 <main+0x320>)
 800148e:	f7ff f92b 	bl	80006e8 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8001492:	ed97 0a00 	vldr	s0, [r7]
 8001496:	484e      	ldr	r0, [pc, #312]	@ (80015d0 <main+0x328>)
 8001498:	f7ff f926 	bl	80006e8 <Encoder_Update>
			lastTick = currentTick;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24

			p1 = Encoder_GetPosition(&encoder1);
 80014a0:	4849      	ldr	r0, [pc, #292]	@ (80015c8 <main+0x320>)
 80014a2:	f7ff f98f 	bl	80007c4 <Encoder_GetPosition>
 80014a6:	eef0 7a40 	vmov.f32	s15, s0
 80014aa:	4b64      	ldr	r3, [pc, #400]	@ (800163c <main+0x394>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 80014b0:	4845      	ldr	r0, [pc, #276]	@ (80015c8 <main+0x320>)
 80014b2:	f7ff f996 	bl	80007e2 <Encoder_GetVelocity>
 80014b6:	eef0 7a40 	vmov.f32	s15, s0
 80014ba:	4b61      	ldr	r3, [pc, #388]	@ (8001640 <main+0x398>)
 80014bc:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 80014c0:	4841      	ldr	r0, [pc, #260]	@ (80015c8 <main+0x320>)
 80014c2:	f7ff f99d 	bl	8000800 <Encoder_GetAcceleration>
 80014c6:	eef0 7a40 	vmov.f32	s15, s0
 80014ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001644 <main+0x39c>)
 80014cc:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 80014d0:	483f      	ldr	r0, [pc, #252]	@ (80015d0 <main+0x328>)
 80014d2:	f7ff f977 	bl	80007c4 <Encoder_GetPosition>
 80014d6:	eef0 7a40 	vmov.f32	s15, s0
 80014da:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <main+0x3a0>)
 80014dc:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 80014e0:	483b      	ldr	r0, [pc, #236]	@ (80015d0 <main+0x328>)
 80014e2:	f7ff f97e 	bl	80007e2 <Encoder_GetVelocity>
 80014e6:	eef0 7a40 	vmov.f32	s15, s0
 80014ea:	4b58      	ldr	r3, [pc, #352]	@ (800164c <main+0x3a4>)
 80014ec:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 80014f0:	4837      	ldr	r0, [pc, #220]	@ (80015d0 <main+0x328>)
 80014f2:	f7ff f985 	bl	8000800 <Encoder_GetAcceleration>
 80014f6:	eef0 7a40 	vmov.f32	s15, s0
 80014fa:	4b55      	ldr	r3, [pc, #340]	@ (8001650 <main+0x3a8>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]

// Now use p1,v1,a1 and p2,v2,a2 as needed
		}

		t_global = HAL_GetTick() / 1000.0f;
 8001500:	f001 f9e2 	bl	80028c8 <HAL_GetTick>
 8001504:	ee07 0a90 	vmov	s15, r0
 8001508:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150c:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8001634 <main+0x38c>
 8001510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001514:	4b4f      	ldr	r3, [pc, #316]	@ (8001654 <main+0x3ac>)
 8001516:	edc3 7a00 	vstr	s15, [r3]
		pos = GetTrajectoryPosition(&segments[current_segment], t_global);
 800151a:	4b4f      	ldr	r3, [pc, #316]	@ (8001658 <main+0x3b0>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4613      	mov	r3, r2
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4a2e      	ldr	r2, [pc, #184]	@ (80015e0 <main+0x338>)
 8001528:	4413      	add	r3, r2
 800152a:	4a4a      	ldr	r2, [pc, #296]	@ (8001654 <main+0x3ac>)
 800152c:	edd2 7a00 	vldr	s15, [r2]
 8001530:	eeb0 0a67 	vmov.f32	s0, s15
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fd71 	bl	800101c <GetTrajectoryPosition>
 800153a:	eef0 7a40 	vmov.f32	s15, s0
 800153e:	4b47      	ldr	r3, [pc, #284]	@ (800165c <main+0x3b4>)
 8001540:	edc3 7a00 	vstr	s15, [r3]
		vel = GetTrajectoryVelocity(&segments[current_segment], t_global);
 8001544:	4b44      	ldr	r3, [pc, #272]	@ (8001658 <main+0x3b0>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <main+0x338>)
 8001552:	4413      	add	r3, r2
 8001554:	4a3f      	ldr	r2, [pc, #252]	@ (8001654 <main+0x3ac>)
 8001556:	edd2 7a00 	vldr	s15, [r2]
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fe32 	bl	80011c8 <GetTrajectoryVelocity>
 8001564:	eef0 7a40 	vmov.f32	s15, s0
 8001568:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <main+0x3b8>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
		// ถ้าจบ segment ปัจจุบันให้ข้ามไปอันถัดไป
		if (t_global
				> segments[current_segment].t_start
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <main+0x3b0>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	491b      	ldr	r1, [pc, #108]	@ (80015e0 <main+0x338>)
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3320      	adds	r3, #32
 8001580:	ed93 7a00 	vldr	s14, [r3]
						+ segments[current_segment].t_total) {
 8001584:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <main+0x3b0>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4915      	ldr	r1, [pc, #84]	@ (80015e0 <main+0x338>)
 800158a:	4613      	mov	r3, r2
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4413      	add	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	440b      	add	r3, r1
 8001594:	331c      	adds	r3, #28
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee37 7a27 	vadd.f32	s14, s14, s15
				> segments[current_segment].t_start
 800159e:	4b2d      	ldr	r3, [pc, #180]	@ (8001654 <main+0x3ac>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
		if (t_global
 80015a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d509      	bpl.n	80015c2 <main+0x31a>
			if (current_segment < MAX_SEGMENTS - 1) {
 80015ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001658 <main+0x3b0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	f73f aeee 	bgt.w	8001394 <main+0xec>
				current_segment++;
 80015b8:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <main+0x3b0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a26      	ldr	r2, [pc, #152]	@ (8001658 <main+0x3b0>)
 80015c0:	6013      	str	r3, [r2, #0]
	while (1) {
 80015c2:	e6e7      	b.n	8001394 <main+0xec>
 80015c4:	20000554 	.word	0x20000554
 80015c8:	200009b0 	.word	0x200009b0
 80015cc:	20000488 	.word	0x20000488
 80015d0:	200009cc 	.word	0x200009cc
 80015d4:	00000000 	.word	0x00000000
 80015d8:	42c80000 	.word	0x42c80000
 80015dc:	42480000 	.word	0x42480000
 80015e0:	200009f8 	.word	0x200009f8
 80015e4:	42a00000 	.word	0x42a00000
 80015e8:	42200000 	.word	0x42200000
 80015ec:	20000a1c 	.word	0x20000a1c
 80015f0:	42f00000 	.word	0x42f00000
 80015f4:	42700000 	.word	0x42700000
 80015f8:	43480000 	.word	0x43480000
 80015fc:	20000a40 	.word	0x20000a40
 8001600:	20000b80 	.word	0x20000b80
 8001604:	20000884 	.word	0x20000884
 8001608:	200006ec 	.word	0x200006ec
 800160c:	20001058 	.word	0x20001058
 8001610:	200009e8 	.word	0x200009e8
 8001614:	200009ec 	.word	0x200009ec
 8001618:	40a00000 	.word	0x40a00000
 800161c:	40c00000 	.word	0x40c00000
 8001620:	40e00000 	.word	0x40e00000
 8001624:	41100000 	.word	0x41100000
 8001628:	41200000 	.word	0x41200000
 800162c:	20000200 	.word	0x20000200
 8001630:	20000204 	.word	0x20000204
 8001634:	447a0000 	.word	0x447a0000
 8001638:	3c23d70a 	.word	0x3c23d70a
 800163c:	20000b68 	.word	0x20000b68
 8001640:	20000b6c 	.word	0x20000b6c
 8001644:	20000b70 	.word	0x20000b70
 8001648:	20000b74 	.word	0x20000b74
 800164c:	20000b78 	.word	0x20000b78
 8001650:	20000b7c 	.word	0x20000b7c
 8001654:	20000b64 	.word	0x20000b64
 8001658:	20000b60 	.word	0x20000b60
 800165c:	200009f0 	.word	0x200009f0
 8001660:	200009f4 	.word	0x200009f4

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	@ 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2238      	movs	r2, #56	@ 0x38
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f008 fd1c 	bl	800a0b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001686:	2000      	movs	r0, #0
 8001688:	f003 f82a 	bl	80046e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001696:	2340      	movs	r3, #64	@ 0x40
 8001698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169a:	2302      	movs	r3, #2
 800169c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169e:	2302      	movs	r3, #2
 80016a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80016a2:	2304      	movs	r3, #4
 80016a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016a6:	2355      	movs	r3, #85	@ 0x55
 80016a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016aa:	2302      	movs	r3, #2
 80016ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b2:	2302      	movs	r3, #2
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b6:	f107 0318 	add.w	r3, r7, #24
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f8c4 	bl	8004848 <HAL_RCC_OscConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016c6:	f000 fd24 	bl	8002112 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ca:	230f      	movs	r3, #15
 80016cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ce:	2303      	movs	r3, #3
 80016d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2104      	movs	r1, #4
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fbc2 	bl	8004e6c <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016ee:	f000 fd10 	bl	8002112 <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	@ 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08c      	sub	sp, #48	@ 0x30
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2220      	movs	r2, #32
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f008 fccb 	bl	800a0b0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800171a:	4b32      	ldr	r3, [pc, #200]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 800171c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001720:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001722:	4b30      	ldr	r3, [pc, #192]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001724:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800172a:	4b2e      	ldr	r3, [pc, #184]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001730:	4b2c      	ldr	r3, [pc, #176]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001736:	4b2b      	ldr	r3, [pc, #172]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001742:	4b28      	ldr	r3, [pc, #160]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001744:	2204      	movs	r2, #4
 8001746:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001748:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 800174a:	2200      	movs	r2, #0
 800174c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800174e:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001750:	2200      	movs	r2, #0
 8001752:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001756:	2201      	movs	r2, #1
 8001758:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001764:	2200      	movs	r2, #0
 8001766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001768:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 800176a:	2200      	movs	r2, #0
 800176c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800176e:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001776:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001784:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 8001786:	f001 fa81 	bl	8002c8c <HAL_ADC_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001790:	f000 fcbf 	bl	8002112 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	4811      	ldr	r0, [pc, #68]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 80017a0:	f002 f896 	bl	80038d0 <HAL_ADCEx_MultiModeConfigChannel>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80017aa:	f000 fcb2 	bl	8002112 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MX_ADC1_Init+0xec>)
 80017b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017b2:	2306      	movs	r3, #6
 80017b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80017ba:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <MX_ADC1_Init+0xf0>)
 80017bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017be:	2304      	movs	r3, #4
 80017c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <MX_ADC1_Init+0xe8>)
 80017cc:	f001 fc1a 	bl	8003004 <HAL_ADC_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80017d6:	f000 fc9c 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	3730      	adds	r7, #48	@ 0x30
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000284 	.word	0x20000284
 80017e8:	04300002 	.word	0x04300002
 80017ec:	407f0000 	.word	0x407f0000

080017f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0310 	add.w	r3, r7, #16
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <MX_TIM1_Init+0xa0>)
 8001810:	4a20      	ldr	r2, [pc, #128]	@ (8001894 <MX_TIM1_Init+0xa4>)
 8001812:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001814:	4b1e      	ldr	r3, [pc, #120]	@ (8001890 <MX_TIM1_Init+0xa0>)
 8001816:	2200      	movs	r2, #0
 8001818:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <MX_TIM1_Init+0xa0>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8001820:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <MX_TIM1_Init+0xa0>)
 8001822:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001826:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <MX_TIM1_Init+0xa0>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <MX_TIM1_Init+0xa0>)
 8001830:	2200      	movs	r2, #0
 8001832:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b16      	ldr	r3, [pc, #88]	@ (8001890 <MX_TIM1_Init+0xa0>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800183a:	4815      	ldr	r0, [pc, #84]	@ (8001890 <MX_TIM1_Init+0xa0>)
 800183c:	f003 ff80 	bl	8005740 <HAL_TIM_Base_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001846:	f000 fc64 	bl	8002112 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800184e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	480e      	ldr	r0, [pc, #56]	@ (8001890 <MX_TIM1_Init+0xa0>)
 8001858:	f004 fe6a 	bl	8006530 <HAL_TIM_ConfigClockSource>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001862:	f000 fc56 	bl	8002112 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <MX_TIM1_Init+0xa0>)
 8001878:	f005 fe4a 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001882:	f000 fc46 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001886:	bf00      	nop
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002f0 	.word	0x200002f0
 8001894:	40012c00 	.word	0x40012c00

08001898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018be:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018ca:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018de:	4814      	ldr	r0, [pc, #80]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018e0:	f003 ff2e 	bl	8005740 <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ea:	f000 fc12 	bl	8002112 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_TIM2_Init+0x98>)
 80018fc:	f004 fe18 	bl	8006530 <HAL_TIM_ConfigClockSource>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001906:	f000 fc04 	bl	8002112 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	4806      	ldr	r0, [pc, #24]	@ (8001930 <MX_TIM2_Init+0x98>)
 8001918:	f005 fdfa 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001922:	f000 fbf6 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200003bc 	.word	0x200003bc

08001934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	@ 0x30
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2224      	movs	r2, #36	@ 0x24
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f008 fbb4 	bl	800a0b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001952:	4b21      	ldr	r3, [pc, #132]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 8001954:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <MX_TIM3_Init+0xa8>)
 8001956:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001958:	4b1f      	ldr	r3, [pc, #124]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 800195a:	2200      	movs	r2, #0
 800195c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195e:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8001964:	4b1c      	ldr	r3, [pc, #112]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 8001966:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800196a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	4b1a      	ldr	r3, [pc, #104]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001972:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001978:	2303      	movs	r3, #3
 800197a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001980:	2301      	movs	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001990:	2301      	movs	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	4619      	mov	r1, r3
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 80019a4:	f004 f97a 	bl	8005c9c <HAL_TIM_Encoder_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80019ae:	f000 fbb0 	bl	8002112 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ba:	463b      	mov	r3, r7
 80019bc:	4619      	mov	r1, r3
 80019be:	4806      	ldr	r0, [pc, #24]	@ (80019d8 <MX_TIM3_Init+0xa4>)
 80019c0:	f005 fda6 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80019ca:	f000 fba2 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	3730      	adds	r7, #48	@ 0x30
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000488 	.word	0x20000488
 80019dc:	40000400 	.word	0x40000400

080019e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08c      	sub	sp, #48	@ 0x30
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	2224      	movs	r2, #36	@ 0x24
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f008 fb5e 	bl	800a0b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	463b      	mov	r3, r7
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019fe:	4b21      	ldr	r3, [pc, #132]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a00:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <MX_TIM4_Init+0xa8>)
 8001a02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a04:	4b1f      	ldr	r3, [pc, #124]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8001a10:	4b1c      	ldr	r3, [pc, #112]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a12:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8001a16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a18:	4b1a      	ldr	r3, [pc, #104]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1e:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a24:	2303      	movs	r3, #3
 8001a26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a50:	f004 f924 	bl	8005c9c <HAL_TIM_Encoder_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001a5a:	f000 fb5a 	bl	8002112 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a66:	463b      	mov	r3, r7
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4806      	ldr	r0, [pc, #24]	@ (8001a84 <MX_TIM4_Init+0xa4>)
 8001a6c:	f005 fd50 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001a76:	f000 fb4c 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	3730      	adds	r7, #48	@ 0x30
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000554 	.word	0x20000554
 8001a88:	40000800 	.word	0x40000800

08001a8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b09c      	sub	sp, #112	@ 0x70
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a92:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	2234      	movs	r2, #52	@ 0x34
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f008 faf2 	bl	800a0b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001acc:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001ace:	4a46      	ldr	r2, [pc, #280]	@ (8001be8 <MX_TIM8_Init+0x15c>)
 8001ad0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ad2:	4b44      	ldr	r3, [pc, #272]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad8:	4b42      	ldr	r3, [pc, #264]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001ade:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001ae0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ae4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001aec:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b3c      	ldr	r3, [pc, #240]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001af8:	483a      	ldr	r0, [pc, #232]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001afa:	f003 fe21 	bl	8005740 <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001b04:	f000 fb05 	bl	8002112 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b12:	4619      	mov	r1, r3
 8001b14:	4833      	ldr	r0, [pc, #204]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001b16:	f004 fd0b 	bl	8006530 <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b20:	f000 faf7 	bl	8002112 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b24:	482f      	ldr	r0, [pc, #188]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001b26:	f003 ff55 	bl	80059d4 <HAL_TIM_PWM_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001b30:	f000 faef 	bl	8002112 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b40:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b44:	4619      	mov	r1, r3
 8001b46:	4827      	ldr	r0, [pc, #156]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001b48:	f005 fce2 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001b52:	f000 fade 	bl	8002112 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b56:	2360      	movs	r3, #96	@ 0x60
 8001b58:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b62:	2300      	movs	r3, #0
 8001b64:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b66:	2300      	movs	r3, #0
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b76:	220c      	movs	r2, #12
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481a      	ldr	r0, [pc, #104]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001b7c:	f004 fbc4 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001b86:	f000 fac4 	bl	8002112 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001bc8:	f005 fd38 	bl	800763c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8001bd2:	f000 fa9e 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001bd6:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <MX_TIM8_Init+0x158>)
 8001bd8:	f000 fc4e 	bl	8002478 <HAL_TIM_MspPostInit>

}
 8001bdc:	bf00      	nop
 8001bde:	3770      	adds	r7, #112	@ 0x70
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000620 	.word	0x20000620
 8001be8:	40013400 	.word	0x40013400

08001bec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b094      	sub	sp, #80	@ 0x50
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
 8001bfe:	60da      	str	r2, [r3, #12]
 8001c00:	611a      	str	r2, [r3, #16]
 8001c02:	615a      	str	r2, [r3, #20]
 8001c04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c06:	463b      	mov	r3, r7
 8001c08:	2234      	movs	r2, #52	@ 0x34
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f008 fa4f 	bl	800a0b0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c14:	4a34      	ldr	r2, [pc, #208]	@ (8001ce8 <MX_TIM16_Init+0xfc>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001c18:	4b32      	ldr	r3, [pc, #200]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c1a:	22a9      	movs	r2, #169	@ 0xa9
 8001c1c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8001c24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c26:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8001c2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001c32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001c3e:	4829      	ldr	r0, [pc, #164]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c40:	f003 fd7e 	bl	8005740 <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001c4a:	f000 fa62 	bl	8002112 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001c4e:	4825      	ldr	r0, [pc, #148]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c50:	f003 fe52 	bl	80058f8 <HAL_TIM_OC_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001c5a:	f000 fa5a 	bl	8002112 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c5e:	2108      	movs	r1, #8
 8001c60:	4820      	ldr	r0, [pc, #128]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c62:	f003 ff25 	bl	8005ab0 <HAL_TIM_OnePulse_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001c6c:	f000 fa51 	bl	8002112 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001c70:	2310      	movs	r3, #16
 8001c72:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8001c74:	f240 5399 	movw	r3, #1433	@ 0x599
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c92:	2200      	movs	r2, #0
 8001c94:	4619      	mov	r1, r3
 8001c96:	4813      	ldr	r0, [pc, #76]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001c98:	f004 fabc 	bl	8006214 <HAL_TIM_OC_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8001ca2:	f000 fa36 	bl	8002112 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cbe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	@ (8001ce4 <MX_TIM16_Init+0xf8>)
 8001cce:	f005 fcb5 	bl	800763c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8001cd8:	f000 fa1b 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3750      	adds	r7, #80	@ 0x50
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	200006ec 	.word	0x200006ec
 8001ce8:	40014400 	.word	0x40014400

08001cec <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b09c      	sub	sp, #112	@ 0x70
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
 8001d1c:	615a      	str	r2, [r3, #20]
 8001d1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2234      	movs	r2, #52	@ 0x34
 8001d24:	2100      	movs	r1, #0
 8001d26:	4618      	mov	r0, r3
 8001d28:	f008 f9c2 	bl	800a0b0 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d2e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e60 <MX_TIM20_Init+0x174>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001d32:	4b4a      	ldr	r3, [pc, #296]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b48      	ldr	r3, [pc, #288]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001d3e:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d44:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b45      	ldr	r3, [pc, #276]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001d4c:	4b43      	ldr	r3, [pc, #268]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001d58:	4840      	ldr	r0, [pc, #256]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d5a:	f003 fcf1 	bl	8005740 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001d64:	f000 f9d5 	bl	8002112 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001d6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d72:	4619      	mov	r1, r3
 8001d74:	4839      	ldr	r0, [pc, #228]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d76:	f004 fbdb 	bl	8006530 <HAL_TIM_ConfigClockSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001d80:	f000 f9c7 	bl	8002112 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001d84:	4835      	ldr	r0, [pc, #212]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001d86:	f003 fe25 	bl	80059d4 <HAL_TIM_PWM_Init>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001d90:	f000 f9bf 	bl	8002112 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001da0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001da4:	4619      	mov	r1, r3
 8001da6:	482d      	ldr	r0, [pc, #180]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001da8:	f005 fbb2 	bl	8007510 <HAL_TIMEx_MasterConfigSynchronization>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001db2:	f000 f9ae 	bl	8002112 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001db6:	2360      	movs	r3, #96	@ 0x60
 8001db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4820      	ldr	r0, [pc, #128]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001ddc:	f004 fa94 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001de6:	f000 f994 	bl	8002112 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dee:	2208      	movs	r2, #8
 8001df0:	4619      	mov	r1, r3
 8001df2:	481a      	ldr	r0, [pc, #104]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001df4:	f004 fa88 	bl	8006308 <HAL_TIM_PWM_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001dfe:	f000 f988 	bl	8002112 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4807      	ldr	r0, [pc, #28]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001e40:	f005 fbfc 	bl	800763c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001e4a:	f000 f962 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001e4e:	4803      	ldr	r0, [pc, #12]	@ (8001e5c <MX_TIM20_Init+0x170>)
 8001e50:	f000 fb12 	bl	8002478 <HAL_TIM_MspPostInit>

}
 8001e54:	bf00      	nop
 8001e56:	3770      	adds	r7, #112	@ 0x70
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200007b8 	.word	0x200007b8
 8001e60:	40015000 	.word	0x40015000

08001e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e68:	4b23      	ldr	r3, [pc, #140]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e6a:	4a24      	ldr	r2, [pc, #144]	@ (8001efc <MX_USART2_UART_Init+0x98>)
 8001e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001e6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e70:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001e76:	4b20      	ldr	r3, [pc, #128]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e7c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e8e:	220c      	movs	r2, #12
 8001e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e98:	4b17      	ldr	r3, [pc, #92]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ea4:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eaa:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eb0:	4811      	ldr	r0, [pc, #68]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001eb2:	f005 fca7 	bl	8007804 <HAL_UART_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001ebc:	f000 f929 	bl	8002112 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	480d      	ldr	r0, [pc, #52]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001ec4:	f008 f829 	bl	8009f1a <HAL_UARTEx_SetTxFifoThreshold>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001ece:	f000 f920 	bl	8002112 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4808      	ldr	r0, [pc, #32]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001ed6:	f008 f85e 	bl	8009f96 <HAL_UARTEx_SetRxFifoThreshold>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001ee0:	f000 f917 	bl	8002112 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	@ (8001ef8 <MX_USART2_UART_Init+0x94>)
 8001ee6:	f007 ffdf 	bl	8009ea8 <HAL_UARTEx_DisableFifoMode>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001ef0:	f000 f90f 	bl	8002112 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000884 	.word	0x20000884
 8001efc:	40004400 	.word	0x40004400

08001f00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <MX_DMA_Init+0x50>)
 8001f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0a:	4a11      	ldr	r2, [pc, #68]	@ (8001f50 <MX_DMA_Init+0x50>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f12:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <MX_DMA_Init+0x50>)
 8001f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <MX_DMA_Init+0x50>)
 8001f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f22:	4a0b      	ldr	r2, [pc, #44]	@ (8001f50 <MX_DMA_Init+0x50>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <MX_DMA_Init+0x50>)
 8001f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2100      	movs	r1, #0
 8001f3a:	200b      	movs	r0, #11
 8001f3c:	f001 feab 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f40:	200b      	movs	r0, #11
 8001f42:	f001 fec2 	bl	8003cca <HAL_NVIC_EnableIRQ>

}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40021000 	.word	0x40021000

08001f54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f6a:	4b61      	ldr	r3, [pc, #388]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f6e:	4a60      	ldr	r2, [pc, #384]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f76:	4b5e      	ldr	r3, [pc, #376]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f82:	4b5b      	ldr	r3, [pc, #364]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f86:	4a5a      	ldr	r2, [pc, #360]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001f88:	f043 0320 	orr.w	r3, r3, #32
 8001f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8e:	4b58      	ldr	r3, [pc, #352]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b55      	ldr	r3, [pc, #340]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4a54      	ldr	r2, [pc, #336]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa6:	4b52      	ldr	r3, [pc, #328]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	4a4e      	ldr	r2, [pc, #312]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <MX_GPIO_Init+0x19c>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2102      	movs	r1, #2
 8001fce:	4849      	ldr	r0, [pc, #292]	@ (80020f4 <MX_GPIO_Init+0x1a0>)
 8001fd0:	f002 fb56 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2140      	movs	r1, #64	@ 0x40
 8001fd8:	4847      	ldr	r0, [pc, #284]	@ (80020f8 <MX_GPIO_Init+0x1a4>)
 8001fda:	f002 fb51 	bl	8004680 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ffc:	f002 f9be 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 8002000:	2302      	movs	r3, #2
 8002002:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002004:	2301      	movs	r3, #1
 8002006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	4619      	mov	r1, r3
 8002016:	4837      	ldr	r0, [pc, #220]	@ (80020f4 <MX_GPIO_Init+0x1a0>)
 8002018:	f002 f9b0 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin
                           Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin
 800201c:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8002020:	617b      	str	r3, [r7, #20]
                          |Limit_Switch_pen_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002022:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	4619      	mov	r1, r3
 8002032:	4830      	ldr	r0, [pc, #192]	@ (80020f4 <MX_GPIO_Init+0x1a0>)
 8002034:	f002 f9a2 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 8002038:	2340      	movs	r3, #64	@ 0x40
 800203a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203c:	2301      	movs	r3, #1
 800203e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4619      	mov	r1, r3
 800204e:	482a      	ldr	r0, [pc, #168]	@ (80020f8 <MX_GPIO_Init+0x1a4>)
 8002050:	f002 f994 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8002054:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800205a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800206e:	f002 f985 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8002072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	4619      	mov	r1, r3
 8002086:	481c      	ldr	r0, [pc, #112]	@ (80020f8 <MX_GPIO_Init+0x1a4>)
 8002088:	f002 f978 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 800208c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002092:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4815      	ldr	r0, [pc, #84]	@ (80020f8 <MX_GPIO_Init+0x1a4>)
 80020a4:	f002 f96a 	bl	800437c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020a8:	2330      	movs	r3, #48	@ 0x30
 80020aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020b8:	2305      	movs	r3, #5
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	480c      	ldr	r0, [pc, #48]	@ (80020f4 <MX_GPIO_Init+0x1a0>)
 80020c4:	f002 f95a 	bl	800437c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	2017      	movs	r0, #23
 80020ce:	f001 fde2 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80020d2:	2017      	movs	r0, #23
 80020d4:	f001 fdf9 	bl	8003cca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2028      	movs	r0, #40	@ 0x28
 80020de:	f001 fdda 	bl	8003c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80020e2:	2028      	movs	r0, #40	@ 0x28
 80020e4:	f001 fdf1 	bl	8003cca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	@ 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40021000 	.word	0x40021000
 80020f4:	48000400 	.word	0x48000400
 80020f8:	48000800 	.word	0x48000800

080020fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
//	if (GPIO_Pin == GPIO_PIN_13) {
//		Encoder_setLimit(&encoder1, 180);
//		Encoder_setLimit(&encoder2, 180);
//		check += 1;
//	}
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002112:	b480      	push	{r7}
 8002114:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002116:	b672      	cpsid	i
}
 8002118:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800211a:	bf00      	nop
 800211c:	e7fd      	b.n	800211a <Error_Handler+0x8>
	...

08002120 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	4b0f      	ldr	r3, [pc, #60]	@ (8002164 <HAL_MspInit+0x44>)
 8002128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212a:	4a0e      	ldr	r2, [pc, #56]	@ (8002164 <HAL_MspInit+0x44>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6613      	str	r3, [r2, #96]	@ 0x60
 8002132:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <HAL_MspInit+0x44>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_MspInit+0x44>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002142:	4a08      	ldr	r2, [pc, #32]	@ (8002164 <HAL_MspInit+0x44>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	@ 0x58
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_MspInit+0x44>)
 800214c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002156:	f002 fb67 	bl	8004828 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000

08002168 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b09e      	sub	sp, #120	@ 0x78
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	2254      	movs	r2, #84	@ 0x54
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f007 ff91 	bl	800a0b0 <memset>
  if(hadc->Instance==ADC1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002196:	d134      	bne.n	8002202 <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800219c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800219e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021a2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4618      	mov	r0, r3
 80021aa:	f003 f87b 	bl	80052a4 <HAL_RCCEx_PeriphCLKConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80021b4:	f7ff ffad 	bl	8002112 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <HAL_ADC_MspInit+0xa4>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021bc:	4a13      	ldr	r2, [pc, #76]	@ (800220c <HAL_ADC_MspInit+0xa4>)
 80021be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <HAL_ADC_MspInit+0xa4>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <HAL_ADC_MspInit+0xa4>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <HAL_ADC_MspInit+0xa4>)
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021dc:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_ADC_MspInit+0xa4>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80021e8:	2303      	movs	r3, #3
 80021ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ec:	2303      	movs	r3, #3
 80021ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021fe:	f002 f8bd 	bl	800437c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002202:	bf00      	nop
 8002204:	3778      	adds	r7, #120	@ 0x78
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000

08002210 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a39      	ldr	r2, [pc, #228]	@ (8002304 <HAL_TIM_Base_MspInit+0xf4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d11c      	bne.n	800225c <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002222:	4b39      	ldr	r3, [pc, #228]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002226:	4a38      	ldr	r2, [pc, #224]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 8002228:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800222c:	6613      	str	r3, [r2, #96]	@ 0x60
 800222e:	4b36      	ldr	r3, [pc, #216]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002236:	61fb      	str	r3, [r7, #28]
 8002238:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2018      	movs	r0, #24
 8002240:	f001 fd29 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002244:	2018      	movs	r0, #24
 8002246:	f001 fd40 	bl	8003cca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800224a:	2200      	movs	r2, #0
 800224c:	2100      	movs	r1, #0
 800224e:	2019      	movs	r0, #25
 8002250:	f001 fd21 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002254:	2019      	movs	r0, #25
 8002256:	f001 fd38 	bl	8003cca <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 800225a:	e04e      	b.n	80022fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002264:	d10c      	bne.n	8002280 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002266:	4b28      	ldr	r3, [pc, #160]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	4a27      	ldr	r2, [pc, #156]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6593      	str	r3, [r2, #88]	@ 0x58
 8002272:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 8002274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	69bb      	ldr	r3, [r7, #24]
}
 800227e:	e03c      	b.n	80022fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a21      	ldr	r2, [pc, #132]	@ (800230c <HAL_TIM_Base_MspInit+0xfc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d10c      	bne.n	80022a4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800228a:	4b1f      	ldr	r3, [pc, #124]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 800228c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800228e:	4a1e      	ldr	r2, [pc, #120]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 8002290:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002294:	6613      	str	r3, [r2, #96]	@ 0x60
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 8002298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]
}
 80022a2:	e02a      	b.n	80022fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <HAL_TIM_Base_MspInit+0x100>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d114      	bne.n	80022d8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022ae:	4b16      	ldr	r3, [pc, #88]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	4a15      	ldr	r2, [pc, #84]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ba:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	2019      	movs	r0, #25
 80022cc:	f001 fce3 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022d0:	2019      	movs	r0, #25
 80022d2:	f001 fcfa 	bl	8003cca <HAL_NVIC_EnableIRQ>
}
 80022d6:	e010      	b.n	80022fa <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002314 <HAL_TIM_Base_MspInit+0x104>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10b      	bne.n	80022fa <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80022e2:	4b09      	ldr	r3, [pc, #36]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022e6:	4a08      	ldr	r2, [pc, #32]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 80022e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_TIM_Base_MspInit+0xf8>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]
}
 80022fa:	bf00      	nop
 80022fc:	3720      	adds	r7, #32
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40012c00 	.word	0x40012c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40013400 	.word	0x40013400
 8002310:	40014400 	.word	0x40014400
 8002314:	40015000 	.word	0x40015000

08002318 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08e      	sub	sp, #56	@ 0x38
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a4b      	ldr	r2, [pc, #300]	@ (8002464 <HAL_TIM_Encoder_MspInit+0x14c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d145      	bne.n	80023c6 <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800233a:	4b4b      	ldr	r3, [pc, #300]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 800233c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233e:	4a4a      	ldr	r2, [pc, #296]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002340:	f043 0302 	orr.w	r3, r3, #2
 8002344:	6593      	str	r3, [r2, #88]	@ 0x58
 8002346:	4b48      	ldr	r3, [pc, #288]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	623b      	str	r3, [r7, #32]
 8002350:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b45      	ldr	r3, [pc, #276]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	4a44      	ldr	r2, [pc, #272]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800235e:	4b42      	ldr	r3, [pc, #264]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	4a3e      	ldr	r2, [pc, #248]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002376:	4b3c      	ldr	r3, [pc, #240]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 8002382:	2340      	movs	r3, #64	@ 0x40
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002392:	2302      	movs	r3, #2
 8002394:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800239a:	4619      	mov	r1, r3
 800239c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a0:	f001 ffec 	bl	800437c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023b4:	2302      	movs	r3, #2
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	482b      	ldr	r0, [pc, #172]	@ (800246c <HAL_TIM_Encoder_MspInit+0x154>)
 80023c0:	f001 ffdc 	bl	800437c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 80023c4:	e04a      	b.n	800245c <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a29      	ldr	r2, [pc, #164]	@ (8002470 <HAL_TIM_Encoder_MspInit+0x158>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d145      	bne.n	800245c <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023d0:	4b25      	ldr	r3, [pc, #148]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	4a24      	ldr	r2, [pc, #144]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 80023d6:	f043 0304 	orr.w	r3, r3, #4
 80023da:	6593      	str	r3, [r2, #88]	@ 0x58
 80023dc:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 80023ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 80023f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002404:	4a18      	ldr	r2, [pc, #96]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800240c:	4b16      	ldr	r3, [pc, #88]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x150>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8002418:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800242a:	230a      	movs	r3, #10
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 800242e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002438:	f001 ffa0 	bl	800437c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 800243c:	2380      	movs	r3, #128	@ 0x80
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800244c:	2302      	movs	r3, #2
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002454:	4619      	mov	r1, r3
 8002456:	4807      	ldr	r0, [pc, #28]	@ (8002474 <HAL_TIM_Encoder_MspInit+0x15c>)
 8002458:	f001 ff90 	bl	800437c <HAL_GPIO_Init>
}
 800245c:	bf00      	nop
 800245e:	3738      	adds	r7, #56	@ 0x38
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40000400 	.word	0x40000400
 8002468:	40021000 	.word	0x40021000
 800246c:	48000800 	.word	0x48000800
 8002470:	40000800 	.word	0x40000800
 8002474:	48000400 	.word	0x48000400

08002478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a31      	ldr	r2, [pc, #196]	@ (800255c <HAL_TIM_MspPostInit+0xe4>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d11d      	bne.n	80024d6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4a30      	ldr	r2, [pc, #192]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a6:	4b2e      	ldr	r3, [pc, #184]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	613b      	str	r3, [r7, #16]
 80024b0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80024b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b8:	2302      	movs	r3, #2
 80024ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c0:	2300      	movs	r3, #0
 80024c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80024c4:	2304      	movs	r3, #4
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4619      	mov	r1, r3
 80024ce:	4825      	ldr	r0, [pc, #148]	@ (8002564 <HAL_TIM_MspPostInit+0xec>)
 80024d0:	f001 ff54 	bl	800437c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80024d4:	e03d      	b.n	8002552 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a23      	ldr	r2, [pc, #140]	@ (8002568 <HAL_TIM_MspPostInit+0xf0>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d138      	bne.n	8002552 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 80024e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 80024e6:	f043 0302 	orr.w	r3, r3, #2
 80024ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 80024ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 80024fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fc:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002504:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_TIM_MspPostInit+0xe8>)
 8002506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8002510:	2304      	movs	r3, #4
 8002512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8002520:	2303      	movs	r3, #3
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	4810      	ldr	r0, [pc, #64]	@ (800256c <HAL_TIM_MspPostInit+0xf4>)
 800252c:	f001 ff26 	bl	800437c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8002530:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253e:	2300      	movs	r3, #0
 8002540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002542:	2306      	movs	r3, #6
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8002546:	f107 0314 	add.w	r3, r7, #20
 800254a:	4619      	mov	r1, r3
 800254c:	4805      	ldr	r0, [pc, #20]	@ (8002564 <HAL_TIM_MspPostInit+0xec>)
 800254e:	f001 ff15 	bl	800437c <HAL_GPIO_Init>
}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	@ 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40013400 	.word	0x40013400
 8002560:	40021000 	.word	0x40021000
 8002564:	48000800 	.word	0x48000800
 8002568:	40015000 	.word	0x40015000
 800256c:	48000400 	.word	0x48000400

08002570 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b09e      	sub	sp, #120	@ 0x78
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	2254      	movs	r2, #84	@ 0x54
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f007 fd8d 	bl	800a0b0 <memset>
  if(huart->Instance==USART2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a37      	ldr	r2, [pc, #220]	@ (8002678 <HAL_UART_MspInit+0x108>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d167      	bne.n	8002670 <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80025a0:	2302      	movs	r3, #2
 80025a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fe79 	bl	80052a4 <HAL_RCCEx_PeriphCLKConfig>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025b8:	f7ff fdab 	bl	8002112 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025bc:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c0:	4a2e      	ldr	r2, [pc, #184]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c8:	4b2c      	ldr	r3, [pc, #176]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d8:	4a28      	ldr	r2, [pc, #160]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025e0:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_UART_MspInit+0x10c>)
 80025e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	60bb      	str	r3, [r7, #8]
 80025ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025ec:	230c      	movs	r3, #12
 80025ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025fc:	2307      	movs	r3, #7
 80025fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002600:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002604:	4619      	mov	r1, r3
 8002606:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800260a:	f001 feb7 	bl	800437c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800260e:	4b1c      	ldr	r3, [pc, #112]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002610:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <HAL_UART_MspInit+0x114>)
 8002612:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002614:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002616:	221b      	movs	r2, #27
 8002618:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <HAL_UART_MspInit+0x110>)
 800261c:	2210      	movs	r2, #16
 800261e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002620:	4b17      	ldr	r3, [pc, #92]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002626:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800262c:	4b14      	ldr	r3, [pc, #80]	@ (8002680 <HAL_UART_MspInit+0x110>)
 800262e:	2200      	movs	r2, #0
 8002630:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002632:	4b13      	ldr	r3, [pc, #76]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_UART_MspInit+0x110>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002644:	480e      	ldr	r0, [pc, #56]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002646:	f001 fb5b 	bl	8003d00 <HAL_DMA_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002650:	f7ff fd5f 	bl	8002112 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <HAL_UART_MspInit+0x110>)
 8002658:	67da      	str	r2, [r3, #124]	@ 0x7c
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_UART_MspInit+0x110>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	2026      	movs	r0, #38	@ 0x26
 8002666:	f001 fb16 	bl	8003c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800266a:	2026      	movs	r0, #38	@ 0x26
 800266c:	f001 fb2d 	bl	8003cca <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002670:	bf00      	nop
 8002672:	3778      	adds	r7, #120	@ 0x78
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40004400 	.word	0x40004400
 800267c:	40021000 	.word	0x40021000
 8002680:	20000950 	.word	0x20000950
 8002684:	40020008 	.word	0x40020008

08002688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <NMI_Handler+0x4>

08002690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <HardFault_Handler+0x4>

08002698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <MemManage_Handler+0x4>

080026a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <BusFault_Handler+0x4>

080026a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026ac:	bf00      	nop
 80026ae:	e7fd      	b.n	80026ac <UsageFault_Handler+0x4>

080026b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026be:	b480      	push	{r7}
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026de:	f000 f8e1 	bl	80028a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <DMA1_Channel1_IRQHandler+0x10>)
 80026ee:	f001 fcea 	bl	80040c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000950 	.word	0x20000950

080026fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8002700:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002704:	f001 ffd4 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	bd80      	pop	{r7, pc}

0800270c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002710:	4802      	ldr	r0, [pc, #8]	@ (800271c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002712:	f003 fc05 	bl	8005f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200002f0 	.word	0x200002f0

08002720 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002724:	4803      	ldr	r0, [pc, #12]	@ (8002734 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002726:	f003 fbfb 	bl	8005f20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800272a:	4803      	ldr	r0, [pc, #12]	@ (8002738 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800272c:	f003 fbf8 	bl	8005f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200002f0 	.word	0x200002f0
 8002738:	200006ec 	.word	0x200006ec

0800273c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002740:	4802      	ldr	r0, [pc, #8]	@ (800274c <USART2_IRQHandler+0x10>)
 8002742:	f005 fafb 	bl	8007d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000884 	.word	0x20000884

08002750 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8002754:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002758:	f001 ffaa 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 800275c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002760:	f001 ffa6 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8002764:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002768:	f001 ffa2 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 800276c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002770:	f001 ff9e 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8002774:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002778:	f001 ff9a 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 800277c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002780:	f001 ff96 	bl	80046b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}

08002788 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800278c:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <SystemInit+0x20>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	4a05      	ldr	r2, [pc, #20]	@ (80027a8 <SystemInit+0x20>)
 8002794:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002798:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027ac:	480d      	ldr	r0, [pc, #52]	@ (80027e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b0:	f7ff ffea 	bl	8002788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b4:	480c      	ldr	r0, [pc, #48]	@ (80027e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80027b6:	490d      	ldr	r1, [pc, #52]	@ (80027ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b8:	4a0d      	ldr	r2, [pc, #52]	@ (80027f0 <LoopForever+0xe>)
  movs r3, #0
 80027ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027bc:	e002      	b.n	80027c4 <LoopCopyDataInit>

080027be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c2:	3304      	adds	r3, #4

080027c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c8:	d3f9      	bcc.n	80027be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ca:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027cc:	4c0a      	ldr	r4, [pc, #40]	@ (80027f8 <LoopForever+0x16>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d0:	e001      	b.n	80027d6 <LoopFillZerobss>

080027d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d4:	3204      	adds	r2, #4

080027d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d8:	d3fb      	bcc.n	80027d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027da:	f007 fc77 	bl	800a0cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027de:	f7fe fd63 	bl	80012a8 <main>

080027e2 <LoopForever>:

LoopForever:
    b LoopForever
 80027e2:	e7fe      	b.n	80027e2 <LoopForever>
  ldr   r0, =_estack
 80027e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	20000264 	.word	0x20000264
  ldr r2, =_sidata
 80027f0:	0800a1dc 	.word	0x0800a1dc
  ldr r2, =_sbss
 80027f4:	20000264 	.word	0x20000264
  ldr r4, =_ebss
 80027f8:	20001324 	.word	0x20001324

080027fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC1_2_IRQHandler>

080027fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f001 fa39 	bl	8003c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800280e:	2000      	movs	r0, #0
 8002810:	f000 f80e 	bl	8002830 <HAL_InitTick>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d002      	beq.n	8002820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	71fb      	strb	r3, [r7, #7]
 800281e:	e001      	b.n	8002824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002820:	f7ff fc7e 	bl	8002120 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002824:	79fb      	ldrb	r3, [r7, #7]

}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800283c:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <HAL_InitTick+0x68>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d022      	beq.n	800288a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002844:	4b15      	ldr	r3, [pc, #84]	@ (800289c <HAL_InitTick+0x6c>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HAL_InitTick+0x68>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002850:	fbb1 f3f3 	udiv	r3, r1, r3
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	4618      	mov	r0, r3
 800285a:	f001 fa44 	bl	8003ce6 <HAL_SYSTICK_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10f      	bne.n	8002884 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b0f      	cmp	r3, #15
 8002868:	d809      	bhi.n	800287e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800286a:	2200      	movs	r2, #0
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	f04f 30ff 	mov.w	r0, #4294967295
 8002872:	f001 fa10 	bl	8003c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002876:	4a0a      	ldr	r2, [pc, #40]	@ (80028a0 <HAL_InitTick+0x70>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	e007      	b.n	800288e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
 8002882:	e004      	b.n	800288e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
 8002888:	e001      	b.n	800288e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000210 	.word	0x20000210
 800289c:	20000208 	.word	0x20000208
 80028a0:	2000020c 	.word	0x2000020c

080028a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <HAL_IncTick+0x1c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <HAL_IncTick+0x20>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4413      	add	r3, r2
 80028b2:	4a03      	ldr	r2, [pc, #12]	@ (80028c0 <HAL_IncTick+0x1c>)
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	200011e8 	.word	0x200011e8
 80028c4:	20000210 	.word	0x20000210

080028c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return uwTick;
 80028cc:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <HAL_GetTick+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	200011e8 	.word	0x200011e8

080028e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	609a      	str	r2, [r3, #8]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	609a      	str	r2, [r3, #8]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002948:	b480      	push	{r7}
 800294a:	b087      	sub	sp, #28
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	3360      	adds	r3, #96	@ 0x60
 800295a:	461a      	mov	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4b08      	ldr	r3, [pc, #32]	@ (800298c <LL_ADC_SetOffset+0x44>)
 800296a:	4013      	ands	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	4313      	orrs	r3, r2
 8002978:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	03fff000 	.word	0x03fff000

08002990 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3360      	adds	r3, #96	@ 0x60
 800299e:	461a      	mov	r2, r3
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	3360      	adds	r3, #96	@ 0x60
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b087      	sub	sp, #28
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3360      	adds	r3, #96	@ 0x60
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3360      	adds	r3, #96	@ 0x60
 8002a38:	461a      	mov	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4413      	add	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	615a      	str	r2, [r3, #20]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3330      	adds	r3, #48	@ 0x30
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	f003 030c 	and.w	r3, r3, #12
 8002aa0:	4413      	add	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 031f 	and.w	r3, r3, #31
 8002aae:	211f      	movs	r1, #31
 8002ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	f003 011f 	and.w	r1, r3, #31
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	431a      	orrs	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3314      	adds	r3, #20
 8002aec:	461a      	mov	r2, r3
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	0e5b      	lsrs	r3, r3, #25
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	0d1b      	lsrs	r3, r3, #20
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	2107      	movs	r1, #7
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	0d1b      	lsrs	r3, r3, #20
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b20:	431a      	orrs	r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b26:	bf00      	nop
 8002b28:	371c      	adds	r7, #28
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 0318 	and.w	r3, r3, #24
 8002b56:	4908      	ldr	r1, [pc, #32]	@ (8002b78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b58:	40d9      	lsrs	r1, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	431a      	orrs	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	0007ffff 	.word	0x0007ffff

08002b7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6093      	str	r3, [r2, #8]
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bb4:	d101      	bne.n	8002bba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bd8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bdc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_IsEnabled+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_IsEnabled+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0304 	and.w	r3, r3, #4
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0308 	and.w	r3, r3, #8
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d101      	bne.n	8002c7c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
	...

08002c8c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c8c:	b590      	push	{r4, r7, lr}
 8002c8e:	b089      	sub	sp, #36	@ 0x24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e1a9      	b.n	8002ffa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d109      	bne.n	8002cc8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fa57 	bl	8002168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ff67 	bl	8002ba0 <LL_ADC_IsDeepPowerDownEnabled>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d004      	beq.n	8002ce2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff4d 	bl	8002b7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff ff82 	bl	8002bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d115      	bne.n	8002d1e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff ff66 	bl	8002bc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cfc:	4b9c      	ldr	r3, [pc, #624]	@ (8002f70 <HAL_ADC_Init+0x2e4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	4a9c      	ldr	r2, [pc, #624]	@ (8002f74 <HAL_ADC_Init+0x2e8>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d10:	e002      	b.n	8002d18 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1f9      	bne.n	8002d12 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff ff64 	bl	8002bf0 <LL_ADC_IsInternalRegulatorEnabled>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10d      	bne.n	8002d4a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	f043 0210 	orr.w	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	f043 0201 	orr.w	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff ff75 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 8002d54:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 8142 	bne.w	8002fe8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 813e 	bne.w	8002fe8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d74:	f043 0202 	orr.w	r2, r3, #2
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff49 	bl	8002c18 <LL_ADC_IsEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d141      	bne.n	8002e10 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d94:	d004      	beq.n	8002da0 <HAL_ADC_Init+0x114>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a77      	ldr	r2, [pc, #476]	@ (8002f78 <HAL_ADC_Init+0x2ec>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_ADC_Init+0x134>
 8002da0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002da4:	f7ff ff38 	bl	8002c18 <LL_ADC_IsEnabled>
 8002da8:	4604      	mov	r4, r0
 8002daa:	4873      	ldr	r0, [pc, #460]	@ (8002f78 <HAL_ADC_Init+0x2ec>)
 8002dac:	f7ff ff34 	bl	8002c18 <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4323      	orrs	r3, r4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e012      	b.n	8002de6 <HAL_ADC_Init+0x15a>
 8002dc0:	486e      	ldr	r0, [pc, #440]	@ (8002f7c <HAL_ADC_Init+0x2f0>)
 8002dc2:	f7ff ff29 	bl	8002c18 <LL_ADC_IsEnabled>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	486d      	ldr	r0, [pc, #436]	@ (8002f80 <HAL_ADC_Init+0x2f4>)
 8002dca:	f7ff ff25 	bl	8002c18 <LL_ADC_IsEnabled>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	431c      	orrs	r4, r3
 8002dd2:	486c      	ldr	r0, [pc, #432]	@ (8002f84 <HAL_ADC_Init+0x2f8>)
 8002dd4:	f7ff ff20 	bl	8002c18 <LL_ADC_IsEnabled>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4323      	orrs	r3, r4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002df2:	d004      	beq.n	8002dfe <HAL_ADC_Init+0x172>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a5f      	ldr	r2, [pc, #380]	@ (8002f78 <HAL_ADC_Init+0x2ec>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Init+0x176>
 8002dfe:	4a62      	ldr	r2, [pc, #392]	@ (8002f88 <HAL_ADC_Init+0x2fc>)
 8002e00:	e000      	b.n	8002e04 <HAL_ADC_Init+0x178>
 8002e02:	4a62      	ldr	r2, [pc, #392]	@ (8002f8c <HAL_ADC_Init+0x300>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f7ff fd68 	bl	80028e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7f5b      	ldrb	r3, [r3, #29]
 8002e14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d106      	bne.n	8002e4c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	3b01      	subs	r3, #1
 8002e44:	045b      	lsls	r3, r3, #17
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b48      	ldr	r3, [pc, #288]	@ (8002f90 <HAL_ADC_Init+0x304>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fee4 	bl	8002c64 <LL_ADC_INJ_IsConversionOngoing>
 8002e9c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d17f      	bne.n	8002fa4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d17c      	bne.n	8002fa4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002eb6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ec6:	f023 0302 	bic.w	r3, r3, #2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	69b9      	ldr	r1, [r7, #24]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d017      	beq.n	8002f0c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002eea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ef4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ef8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6911      	ldr	r1, [r2, #16]
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	430b      	orrs	r3, r1
 8002f06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002f0a:	e013      	b.n	8002f34 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d12a      	bne.n	8002f94 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f54:	4311      	orrs	r1, r2
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f5a:	4311      	orrs	r1, r2
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f60:	430a      	orrs	r2, r1
 8002f62:	431a      	orrs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0201 	orr.w	r2, r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
 8002f6e:	e019      	b.n	8002fa4 <HAL_ADC_Init+0x318>
 8002f70:	20000208 	.word	0x20000208
 8002f74:	053e2d63 	.word	0x053e2d63
 8002f78:	50000100 	.word	0x50000100
 8002f7c:	50000400 	.word	0x50000400
 8002f80:	50000500 	.word	0x50000500
 8002f84:	50000600 	.word	0x50000600
 8002f88:	50000300 	.word	0x50000300
 8002f8c:	50000700 	.word	0x50000700
 8002f90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d10c      	bne.n	8002fc6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f023 010f 	bic.w	r1, r3, #15
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	1e5a      	subs	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fc4:	e007      	b.n	8002fd6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 020f 	bic.w	r2, r2, #15
 8002fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	f043 0201 	orr.w	r2, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fe6:	e007      	b.n	8002ff8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ff8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	bf00      	nop

08003004 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b0b6      	sub	sp, #216	@ 0xd8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x24>
 8003022:	2302      	movs	r3, #2
 8003024:	f000 bc13 	b.w	800384e <HAL_ADC_ConfigChannel+0x84a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fe02 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	f040 83f3 	bne.w	8003828 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	f7ff fd18 	bl	8002a84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fdf0 	bl	8002c3e <LL_ADC_REG_IsConversionOngoing>
 800305e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff fdfc 	bl	8002c64 <LL_ADC_INJ_IsConversionOngoing>
 800306c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003070:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 81d9 	bne.w	800342c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800307a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800307e:	2b00      	cmp	r3, #0
 8003080:	f040 81d4 	bne.w	800342c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800308c:	d10f      	bne.n	80030ae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	4619      	mov	r1, r3
 800309a:	f7ff fd1f 	bl	8002adc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fcd9 	bl	8002a5e <LL_ADC_SetSamplingTimeCommonConfig>
 80030ac:	e00e      	b.n	80030cc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fd0e 	bl	8002adc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2100      	movs	r1, #0
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fcc9 	bl	8002a5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d022      	beq.n	8003134 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6919      	ldr	r1, [r3, #16]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80030fe:	f7ff fc23 	bl	8002948 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	6919      	ldr	r1, [r3, #16]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	461a      	mov	r2, r3
 8003110:	f7ff fc6f 	bl	80029f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6818      	ldr	r0, [r3, #0]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003120:	2b01      	cmp	r3, #1
 8003122:	d102      	bne.n	800312a <HAL_ADC_ConfigChannel+0x126>
 8003124:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003128:	e000      	b.n	800312c <HAL_ADC_ConfigChannel+0x128>
 800312a:	2300      	movs	r3, #0
 800312c:	461a      	mov	r2, r3
 800312e:	f7ff fc7b 	bl	8002a28 <LL_ADC_SetOffsetSaturation>
 8003132:	e17b      	b.n	800342c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fc28 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003140:	4603      	mov	r3, r0
 8003142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10a      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x15c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fc1d 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003156:	4603      	mov	r3, r0
 8003158:	0e9b      	lsrs	r3, r3, #26
 800315a:	f003 021f 	and.w	r2, r3, #31
 800315e:	e01e      	b.n	800319e <HAL_ADC_ConfigChannel+0x19a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2100      	movs	r1, #0
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff fc12 	bl	8002990 <LL_ADC_GetOffsetChannel>
 800316c:	4603      	mov	r3, r0
 800316e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003172:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800317e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003182:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003186:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e004      	b.n	800319c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d105      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x1b2>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	f003 031f 	and.w	r3, r3, #31
 80031b4:	e018      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x1e4>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031c2:	fa93 f3a3 	rbit	r3, r3
 80031c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80031ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80031d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80031da:	2320      	movs	r3, #32
 80031dc:	e004      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80031de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d106      	bne.n	80031fa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2200      	movs	r2, #0
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff fbe1 	bl	80029bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff fbc5 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003206:	4603      	mov	r3, r0
 8003208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x222>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2101      	movs	r1, #1
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff fbba 	bl	8002990 <LL_ADC_GetOffsetChannel>
 800321c:	4603      	mov	r3, r0
 800321e:	0e9b      	lsrs	r3, r3, #26
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	e01e      	b.n	8003264 <HAL_ADC_ConfigChannel+0x260>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2101      	movs	r1, #1
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fbaf 	bl	8002990 <LL_ADC_GetOffsetChannel>
 8003232:	4603      	mov	r3, r0
 8003234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003248:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800324c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003254:	2320      	movs	r3, #32
 8003256:	e004      	b.n	8003262 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003258:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_ADC_ConfigChannel+0x278>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	e018      	b.n	80032ae <HAL_ADC_ConfigChannel+0x2aa>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003290:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e004      	b.n	80032ae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80032a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d106      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2200      	movs	r2, #0
 80032b8:	2101      	movs	r1, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fb7e 	bl	80029bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2102      	movs	r1, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fb62 	bl	8002990 <LL_ADC_GetOffsetChannel>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x2e8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2102      	movs	r1, #2
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fb57 	bl	8002990 <LL_ADC_GetOffsetChannel>
 80032e2:	4603      	mov	r3, r0
 80032e4:	0e9b      	lsrs	r3, r3, #26
 80032e6:	f003 021f 	and.w	r2, r3, #31
 80032ea:	e01e      	b.n	800332a <HAL_ADC_ConfigChannel+0x326>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2102      	movs	r1, #2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fb4c 	bl	8002990 <LL_ADC_GetOffsetChannel>
 80032f8:	4603      	mov	r3, r0
 80032fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800330a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800330e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003312:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800331a:	2320      	movs	r3, #32
 800331c:	e004      	b.n	8003328 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800331e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x33e>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	e016      	b.n	8003370 <HAL_ADC_ConfigChannel+0x36c>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003354:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003356:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800335a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003362:	2320      	movs	r3, #32
 8003364:	e004      	b.n	8003370 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003366:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003370:	429a      	cmp	r2, r3
 8003372:	d106      	bne.n	8003382 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	2102      	movs	r1, #2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fb1d 	bl	80029bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2103      	movs	r1, #3
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff fb01 	bl	8002990 <LL_ADC_GetOffsetChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x3aa>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2103      	movs	r1, #3
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff faf6 	bl	8002990 <LL_ADC_GetOffsetChannel>
 80033a4:	4603      	mov	r3, r0
 80033a6:	0e9b      	lsrs	r3, r3, #26
 80033a8:	f003 021f 	and.w	r2, r3, #31
 80033ac:	e017      	b.n	80033de <HAL_ADC_ConfigChannel+0x3da>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2103      	movs	r1, #3
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff faeb 	bl	8002990 <LL_ADC_GetOffsetChannel>
 80033ba:	4603      	mov	r3, r0
 80033bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80033c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033c8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80033ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e003      	b.n	80033dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80033d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x3f2>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	0e9b      	lsrs	r3, r3, #26
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	e011      	b.n	800341a <HAL_ADC_ConfigChannel+0x416>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80033fe:	fa93 f3a3 	rbit	r3, r3
 8003402:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003404:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003406:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800340e:	2320      	movs	r3, #32
 8003410:	e003      	b.n	800341a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800341a:	429a      	cmp	r2, r3
 800341c:	d106      	bne.n	800342c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2200      	movs	r2, #0
 8003424:	2103      	movs	r1, #3
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fac8 	bl	80029bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fbf1 	bl	8002c18 <LL_ADC_IsEnabled>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 813d 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6819      	ldr	r1, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f7ff fb72 	bl	8002b34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4aa2      	ldr	r2, [pc, #648]	@ (80036e0 <HAL_ADC_ConfigChannel+0x6dc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	f040 812e 	bne.w	80036b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10b      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x480>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2b09      	cmp	r3, #9
 800347a:	bf94      	ite	ls
 800347c:	2301      	movls	r3, #1
 800347e:	2300      	movhi	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	e019      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x4b4>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003492:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003494:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80034a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2b09      	cmp	r3, #9
 80034b0:	bf94      	ite	ls
 80034b2:	2301      	movls	r3, #1
 80034b4:	2300      	movhi	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d079      	beq.n	80035b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d107      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x4d4>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	0e9b      	lsrs	r3, r3, #26
 80034ce:	3301      	adds	r3, #1
 80034d0:	069b      	lsls	r3, r3, #26
 80034d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034d6:	e015      	b.n	8003504 <HAL_ADC_ConfigChannel+0x500>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80034e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80034ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80034f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	069b      	lsls	r3, r3, #26
 8003500:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x520>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	0e9b      	lsrs	r3, r3, #26
 8003516:	3301      	adds	r3, #1
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	2101      	movs	r1, #1
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	e017      	b.n	8003554 <HAL_ADC_ConfigChannel+0x550>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003534:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003536:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2101      	movs	r1, #1
 8003550:	fa01 f303 	lsl.w	r3, r1, r3
 8003554:	ea42 0103 	orr.w	r1, r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10a      	bne.n	800357a <HAL_ADC_ConfigChannel+0x576>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	3301      	adds	r3, #1
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	051b      	lsls	r3, r3, #20
 8003578:	e018      	b.n	80035ac <HAL_ADC_ConfigChannel+0x5a8>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800358c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003592:	2320      	movs	r3, #32
 8003594:	e003      	b.n	800359e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ac:	430b      	orrs	r3, r1
 80035ae:	e07e      	b.n	80036ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d107      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x5c8>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	3301      	adds	r3, #1
 80035c4:	069b      	lsls	r3, r3, #26
 80035c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ca:	e015      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x5f4>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d4:	fa93 f3a3 	rbit	r3, r3
 80035d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80035de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80035e4:	2320      	movs	r3, #32
 80035e6:	e003      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80035e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ea:	fab3 f383 	clz	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	3301      	adds	r3, #1
 80035f2:	069b      	lsls	r3, r3, #26
 80035f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003600:	2b00      	cmp	r3, #0
 8003602:	d109      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x614>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	0e9b      	lsrs	r3, r3, #26
 800360a:	3301      	adds	r3, #1
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2101      	movs	r1, #1
 8003612:	fa01 f303 	lsl.w	r3, r1, r3
 8003616:	e017      	b.n	8003648 <HAL_ADC_ConfigChannel+0x644>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	61fb      	str	r3, [r7, #28]
  return result;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e003      	b.n	800363c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2101      	movs	r1, #1
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	ea42 0103 	orr.w	r1, r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10d      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x670>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	0e9b      	lsrs	r3, r3, #26
 800365e:	3301      	adds	r3, #1
 8003660:	f003 021f 	and.w	r2, r3, #31
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	3b1e      	subs	r3, #30
 800366c:	051b      	lsls	r3, r3, #20
 800366e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003672:	e01b      	b.n	80036ac <HAL_ADC_ConfigChannel+0x6a8>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	613b      	str	r3, [r7, #16]
  return result;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	e003      	b.n	8003698 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f003 021f 	and.w	r2, r3, #31
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	3b1e      	subs	r3, #30
 80036a6:	051b      	lsls	r3, r3, #20
 80036a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b2:	4619      	mov	r1, r3
 80036b4:	f7ff fa12 	bl	8002adc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	4b09      	ldr	r3, [pc, #36]	@ (80036e4 <HAL_ADC_ConfigChannel+0x6e0>)
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80be 	beq.w	8003842 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ce:	d004      	beq.n	80036da <HAL_ADC_ConfigChannel+0x6d6>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a04      	ldr	r2, [pc, #16]	@ (80036e8 <HAL_ADC_ConfigChannel+0x6e4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10a      	bne.n	80036f0 <HAL_ADC_ConfigChannel+0x6ec>
 80036da:	4b04      	ldr	r3, [pc, #16]	@ (80036ec <HAL_ADC_ConfigChannel+0x6e8>)
 80036dc:	e009      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x6ee>
 80036de:	bf00      	nop
 80036e0:	407f0000 	.word	0x407f0000
 80036e4:	80080000 	.word	0x80080000
 80036e8:	50000100 	.word	0x50000100
 80036ec:	50000300 	.word	0x50000300
 80036f0:	4b59      	ldr	r3, [pc, #356]	@ (8003858 <HAL_ADC_ConfigChannel+0x854>)
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f91a 	bl	800292c <LL_ADC_GetCommonPathInternalCh>
 80036f8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a56      	ldr	r2, [pc, #344]	@ (800385c <HAL_ADC_ConfigChannel+0x858>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_ADC_ConfigChannel+0x70c>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a55      	ldr	r2, [pc, #340]	@ (8003860 <HAL_ADC_ConfigChannel+0x85c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d13a      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003714:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d134      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003724:	d005      	beq.n	8003732 <HAL_ADC_ConfigChannel+0x72e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a4e      	ldr	r2, [pc, #312]	@ (8003864 <HAL_ADC_ConfigChannel+0x860>)
 800372c:	4293      	cmp	r3, r2
 800372e:	f040 8085 	bne.w	800383c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800373a:	d004      	beq.n	8003746 <HAL_ADC_ConfigChannel+0x742>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a49      	ldr	r2, [pc, #292]	@ (8003868 <HAL_ADC_ConfigChannel+0x864>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x746>
 8003746:	4a49      	ldr	r2, [pc, #292]	@ (800386c <HAL_ADC_ConfigChannel+0x868>)
 8003748:	e000      	b.n	800374c <HAL_ADC_ConfigChannel+0x748>
 800374a:	4a43      	ldr	r2, [pc, #268]	@ (8003858 <HAL_ADC_ConfigChannel+0x854>)
 800374c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003750:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f7ff f8d5 	bl	8002906 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800375c:	4b44      	ldr	r3, [pc, #272]	@ (8003870 <HAL_ADC_ConfigChannel+0x86c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	4a44      	ldr	r2, [pc, #272]	@ (8003874 <HAL_ADC_ConfigChannel+0x870>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	099b      	lsrs	r3, r3, #6
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	4613      	mov	r3, r2
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003776:	e002      	b.n	800377e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3b01      	subs	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1f9      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003784:	e05a      	b.n	800383c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3b      	ldr	r2, [pc, #236]	@ (8003878 <HAL_ADC_ConfigChannel+0x874>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d125      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003790:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003794:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11f      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a31      	ldr	r2, [pc, #196]	@ (8003868 <HAL_ADC_ConfigChannel+0x864>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d104      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x7ac>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a34      	ldr	r2, [pc, #208]	@ (800387c <HAL_ADC_ConfigChannel+0x878>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d047      	beq.n	8003840 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b8:	d004      	beq.n	80037c4 <HAL_ADC_ConfigChannel+0x7c0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2a      	ldr	r2, [pc, #168]	@ (8003868 <HAL_ADC_ConfigChannel+0x864>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x7c4>
 80037c4:	4a29      	ldr	r2, [pc, #164]	@ (800386c <HAL_ADC_ConfigChannel+0x868>)
 80037c6:	e000      	b.n	80037ca <HAL_ADC_ConfigChannel+0x7c6>
 80037c8:	4a23      	ldr	r2, [pc, #140]	@ (8003858 <HAL_ADC_ConfigChannel+0x854>)
 80037ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037d2:	4619      	mov	r1, r3
 80037d4:	4610      	mov	r0, r2
 80037d6:	f7ff f896 	bl	8002906 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037da:	e031      	b.n	8003840 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a27      	ldr	r2, [pc, #156]	@ (8003880 <HAL_ADC_ConfigChannel+0x87c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d12d      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80037e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d127      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <HAL_ADC_ConfigChannel+0x864>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d022      	beq.n	8003842 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003804:	d004      	beq.n	8003810 <HAL_ADC_ConfigChannel+0x80c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a17      	ldr	r2, [pc, #92]	@ (8003868 <HAL_ADC_ConfigChannel+0x864>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x810>
 8003810:	4a16      	ldr	r2, [pc, #88]	@ (800386c <HAL_ADC_ConfigChannel+0x868>)
 8003812:	e000      	b.n	8003816 <HAL_ADC_ConfigChannel+0x812>
 8003814:	4a10      	ldr	r2, [pc, #64]	@ (8003858 <HAL_ADC_ConfigChannel+0x854>)
 8003816:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800381a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800381e:	4619      	mov	r1, r3
 8003820:	4610      	mov	r0, r2
 8003822:	f7ff f870 	bl	8002906 <LL_ADC_SetCommonPathInternalCh>
 8003826:	e00c      	b.n	8003842 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800383a:	e002      	b.n	8003842 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800383c:	bf00      	nop
 800383e:	e000      	b.n	8003842 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003840:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800384a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800384e:	4618      	mov	r0, r3
 8003850:	37d8      	adds	r7, #216	@ 0xd8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	50000700 	.word	0x50000700
 800385c:	c3210000 	.word	0xc3210000
 8003860:	90c00010 	.word	0x90c00010
 8003864:	50000600 	.word	0x50000600
 8003868:	50000100 	.word	0x50000100
 800386c:	50000300 	.word	0x50000300
 8003870:	20000208 	.word	0x20000208
 8003874:	053e2d63 	.word	0x053e2d63
 8003878:	c7520000 	.word	0xc7520000
 800387c:	50000500 	.word	0x50000500
 8003880:	cb840000 	.word	0xcb840000

08003884 <LL_ADC_IsEnabled>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <LL_ADC_IsEnabled+0x18>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <LL_ADC_IsEnabled+0x1a>
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_ADC_REG_IsConversionOngoing>:
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d101      	bne.n	80038c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b0a1      	sub	sp, #132	@ 0x84
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e0e7      	b.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80038f6:	2300      	movs	r3, #0
 80038f8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80038fa:	2300      	movs	r3, #0
 80038fc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003906:	d102      	bne.n	800390e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003908:	4b6f      	ldr	r3, [pc, #444]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	e009      	b.n	8003922 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a6e      	ldr	r2, [pc, #440]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d102      	bne.n	800391e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003918:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	e001      	b.n	8003922 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800391e:	2300      	movs	r3, #0
 8003920:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	f043 0220 	orr.w	r2, r3, #32
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0be      	b.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ffb1 	bl	80038aa <LL_ADC_REG_IsConversionOngoing>
 8003948:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ffab 	bl	80038aa <LL_ADC_REG_IsConversionOngoing>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 80a0 	bne.w	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800395c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 809c 	bne.w	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800396c:	d004      	beq.n	8003978 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a55      	ldr	r2, [pc, #340]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003978:	4b56      	ldr	r3, [pc, #344]	@ (8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800397a:	e000      	b.n	800397e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800397c:	4b56      	ldr	r3, [pc, #344]	@ (8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800397e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d04b      	beq.n	8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003988:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800399a:	035b      	lsls	r3, r3, #13
 800399c:	430b      	orrs	r3, r1
 800399e:	431a      	orrs	r2, r3
 80039a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039ac:	d004      	beq.n	80039b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a45      	ldr	r2, [pc, #276]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d10f      	bne.n	80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80039b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80039bc:	f7ff ff62 	bl	8003884 <LL_ADC_IsEnabled>
 80039c0:	4604      	mov	r4, r0
 80039c2:	4841      	ldr	r0, [pc, #260]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039c4:	f7ff ff5e 	bl	8003884 <LL_ADC_IsEnabled>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4323      	orrs	r3, r4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	e012      	b.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80039d8:	483c      	ldr	r0, [pc, #240]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039da:	f7ff ff53 	bl	8003884 <LL_ADC_IsEnabled>
 80039de:	4604      	mov	r4, r0
 80039e0:	483b      	ldr	r0, [pc, #236]	@ (8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039e2:	f7ff ff4f 	bl	8003884 <LL_ADC_IsEnabled>
 80039e6:	4603      	mov	r3, r0
 80039e8:	431c      	orrs	r4, r3
 80039ea:	483c      	ldr	r0, [pc, #240]	@ (8003adc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80039ec:	f7ff ff4a 	bl	8003884 <LL_ADC_IsEnabled>
 80039f0:	4603      	mov	r3, r0
 80039f2:	4323      	orrs	r3, r4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	bf0c      	ite	eq
 80039f8:	2301      	moveq	r3, #1
 80039fa:	2300      	movne	r3, #0
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d056      	beq.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a0a:	f023 030f 	bic.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	6811      	ldr	r1, [r2, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	6892      	ldr	r2, [r2, #8]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a1c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a1e:	e047      	b.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a2a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a34:	d004      	beq.n	8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a23      	ldr	r2, [pc, #140]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10f      	bne.n	8003a60 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003a40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a44:	f7ff ff1e 	bl	8003884 <LL_ADC_IsEnabled>
 8003a48:	4604      	mov	r4, r0
 8003a4a:	481f      	ldr	r0, [pc, #124]	@ (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a4c:	f7ff ff1a 	bl	8003884 <LL_ADC_IsEnabled>
 8003a50:	4603      	mov	r3, r0
 8003a52:	4323      	orrs	r3, r4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	bf0c      	ite	eq
 8003a58:	2301      	moveq	r3, #1
 8003a5a:	2300      	movne	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	e012      	b.n	8003a86 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003a60:	481a      	ldr	r0, [pc, #104]	@ (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a62:	f7ff ff0f 	bl	8003884 <LL_ADC_IsEnabled>
 8003a66:	4604      	mov	r4, r0
 8003a68:	4819      	ldr	r0, [pc, #100]	@ (8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a6a:	f7ff ff0b 	bl	8003884 <LL_ADC_IsEnabled>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	431c      	orrs	r4, r3
 8003a72:	481a      	ldr	r0, [pc, #104]	@ (8003adc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a74:	f7ff ff06 	bl	8003884 <LL_ADC_IsEnabled>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4323      	orrs	r3, r4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d012      	beq.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003a92:	f023 030f 	bic.w	r3, r3, #15
 8003a96:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a98:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a9a:	e009      	b.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003aae:	e000      	b.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003aba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3784      	adds	r7, #132	@ 0x84
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd90      	pop	{r4, r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	50000100 	.word	0x50000100
 8003acc:	50000400 	.word	0x50000400
 8003ad0:	50000500 	.word	0x50000500
 8003ad4:	50000300 	.word	0x50000300
 8003ad8:	50000700 	.word	0x50000700
 8003adc:	50000600 	.word	0x50000600

08003ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b08:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	@ (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	@ (8003b40 <__NVIC_GetPriorityGrouping+0x18>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 0307 	and.w	r3, r3, #7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db0b      	blt.n	8003b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4907      	ldr	r1, [pc, #28]	@ (8003b7c <__NVIC_EnableIRQ+0x38>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	e000e100 	.word	0xe000e100

08003b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	db0a      	blt.n	8003baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	490c      	ldr	r1, [pc, #48]	@ (8003bcc <__NVIC_SetPriority+0x4c>)
 8003b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9e:	0112      	lsls	r2, r2, #4
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba8:	e00a      	b.n	8003bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4908      	ldr	r1, [pc, #32]	@ (8003bd0 <__NVIC_SetPriority+0x50>)
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	3b04      	subs	r3, #4
 8003bb8:	0112      	lsls	r2, r2, #4
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	761a      	strb	r2, [r3, #24]
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	e000e100 	.word	0xe000e100
 8003bd0:	e000ed00 	.word	0xe000ed00

08003bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	@ 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f1c3 0307 	rsb	r3, r3, #7
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	bf28      	it	cs
 8003bf2:	2304      	movcs	r3, #4
 8003bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	2b06      	cmp	r3, #6
 8003bfc:	d902      	bls.n	8003c04 <NVIC_EncodePriority+0x30>
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	3b03      	subs	r3, #3
 8003c02:	e000      	b.n	8003c06 <NVIC_EncodePriority+0x32>
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43da      	mvns	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	401a      	ands	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	fa01 f303 	lsl.w	r3, r1, r3
 8003c26:	43d9      	mvns	r1, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c2c:	4313      	orrs	r3, r2
         );
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	@ 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
	...

08003c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c4c:	d301      	bcc.n	8003c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00f      	b.n	8003c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c52:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <SysTick_Config+0x40>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c5a:	210f      	movs	r1, #15
 8003c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c60:	f7ff ff8e 	bl	8003b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c64:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <SysTick_Config+0x40>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c6a:	4b04      	ldr	r3, [pc, #16]	@ (8003c7c <SysTick_Config+0x40>)
 8003c6c:	2207      	movs	r2, #7
 8003c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	e000e010 	.word	0xe000e010

08003c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ff29 	bl	8003ae0 <__NVIC_SetPriorityGrouping>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b086      	sub	sp, #24
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
 8003ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca4:	f7ff ff40 	bl	8003b28 <__NVIC_GetPriorityGrouping>
 8003ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	6978      	ldr	r0, [r7, #20]
 8003cb0:	f7ff ff90 	bl	8003bd4 <NVIC_EncodePriority>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cba:	4611      	mov	r1, r2
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff5f 	bl	8003b80 <__NVIC_SetPriority>
}
 8003cc2:	bf00      	nop
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7ff ff33 	bl	8003b44 <__NVIC_EnableIRQ>
}
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b082      	sub	sp, #8
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7ff ffa4 	bl	8003c3c <SysTick_Config>
 8003cf4:	4603      	mov	r3, r0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e08d      	b.n	8003e2e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_DMA_Init+0x138>)
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d80f      	bhi.n	8003d3e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4b45      	ldr	r3, [pc, #276]	@ (8003e3c <HAL_DMA_Init+0x13c>)
 8003d26:	4413      	add	r3, r2
 8003d28:	4a45      	ldr	r2, [pc, #276]	@ (8003e40 <HAL_DMA_Init+0x140>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	009a      	lsls	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a42      	ldr	r2, [pc, #264]	@ (8003e44 <HAL_DMA_Init+0x144>)
 8003d3a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d3c:	e00e      	b.n	8003d5c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	4b40      	ldr	r3, [pc, #256]	@ (8003e48 <HAL_DMA_Init+0x148>)
 8003d46:	4413      	add	r3, r2
 8003d48:	4a3d      	ldr	r2, [pc, #244]	@ (8003e40 <HAL_DMA_Init+0x140>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	009a      	lsls	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a3c      	ldr	r2, [pc, #240]	@ (8003e4c <HAL_DMA_Init+0x14c>)
 8003d5a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d76:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa82 	bl	80042b8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dbc:	d102      	bne.n	8003dc4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003dd8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d010      	beq.n	8003e04 <HAL_DMA_Init+0x104>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d80c      	bhi.n	8003e04 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 faa2 	bl	8004334 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	e008      	b.n	8003e16 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40020407 	.word	0x40020407
 8003e3c:	bffdfff8 	.word	0xbffdfff8
 8003e40:	cccccccd 	.word	0xcccccccd
 8003e44:	40020000 	.word	0x40020000
 8003e48:	bffdfbf8 	.word	0xbffdfbf8
 8003e4c:	40020400 	.word	0x40020400

08003e50 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_DMA_Start_IT+0x20>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e066      	b.n	8003f3e <HAL_DMA_Start_IT+0xee>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d155      	bne.n	8003f30 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f000 f9c7 	bl	800423c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 020e 	orr.w	r2, r2, #14
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e00f      	b.n	8003ee8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 020a 	orr.w	r2, r2, #10
 8003ee6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d007      	beq.n	8003f06 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f04:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d007      	beq.n	8003f1e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f18:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f042 0201 	orr.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e005      	b.n	8003f3c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b085      	sub	sp, #20
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d005      	beq.n	8003f6a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2204      	movs	r2, #4
 8003f62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	e037      	b.n	8003fda <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 020e 	bic.w	r2, r2, #14
 8003f78:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f88:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0201 	bic.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f003 021f 	and.w	r2, r3, #31
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8003fac:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fb6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00c      	beq.n	8003fda <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fce:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fd8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d00d      	beq.n	800402c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e047      	b.n	80040bc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 020e 	bic.w	r2, r2, #14
 800403a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004056:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800405a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004060:	f003 021f 	and.w	r2, r3, #31
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f202 	lsl.w	r2, r1, r2
 800406e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004078:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00c      	beq.n	800409c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004090:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800409a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	4798      	blx	r3
    }
  }
  return status;
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	2204      	movs	r2, #4
 80040e8:	409a      	lsls	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d026      	beq.n	8004140 <HAL_DMA_IRQHandler+0x7a>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d021      	beq.n	8004140 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0320 	and.w	r3, r3, #32
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0204 	bic.w	r2, r2, #4
 8004118:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	2104      	movs	r1, #4
 8004128:	fa01 f202 	lsl.w	r2, r1, r2
 800412c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	2b00      	cmp	r3, #0
 8004134:	d071      	beq.n	800421a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800413e:	e06c      	b.n	800421a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004144:	f003 031f 	and.w	r3, r3, #31
 8004148:	2202      	movs	r2, #2
 800414a:	409a      	lsls	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4013      	ands	r3, r2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02e      	beq.n	80041b2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d029      	beq.n	80041b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0320 	and.w	r3, r3, #32
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10b      	bne.n	8004184 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 020a 	bic.w	r2, r2, #10
 800417a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004188:	f003 021f 	and.w	r2, r3, #31
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	2102      	movs	r1, #2
 8004192:	fa01 f202 	lsl.w	r2, r1, r2
 8004196:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d038      	beq.n	800421a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041b0:	e033      	b.n	800421a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	f003 031f 	and.w	r3, r3, #31
 80041ba:	2208      	movs	r2, #8
 80041bc:	409a      	lsls	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d02a      	beq.n	800421c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d025      	beq.n	800421c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 020e 	bic.w	r2, r2, #14
 80041de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e4:	f003 021f 	and.w	r2, r3, #31
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f202 	lsl.w	r2, r1, r2
 80041f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420e:	2b00      	cmp	r3, #0
 8004210:	d004      	beq.n	800421c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800421a:	bf00      	nop
 800421c:	bf00      	nop
}
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004252:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004258:	2b00      	cmp	r3, #0
 800425a:	d004      	beq.n	8004266 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004264:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f003 021f 	and.w	r2, r3, #31
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b10      	cmp	r3, #16
 8004288:	d108      	bne.n	800429c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800429a:	e007      	b.n	80042ac <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b16      	ldr	r3, [pc, #88]	@ (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d802      	bhi.n	80042d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80042cc:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e001      	b.n	80042d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80042d2:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80042d4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	3b08      	subs	r3, #8
 80042e2:	4a12      	ldr	r2, [pc, #72]	@ (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f0:	089b      	lsrs	r3, r3, #2
 80042f2:	009a      	lsls	r2, r3, #2
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	461a      	mov	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a0b      	ldr	r2, [pc, #44]	@ (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004302:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2201      	movs	r2, #1
 800430c:	409a      	lsls	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40020407 	.word	0x40020407
 8004324:	40020800 	.word	0x40020800
 8004328:	40020820 	.word	0x40020820
 800432c:	cccccccd 	.word	0xcccccccd
 8004330:	40020880 	.word	0x40020880

08004334 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a08      	ldr	r2, [pc, #32]	@ (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004356:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	f003 031f 	and.w	r3, r3, #31
 8004360:	2201      	movs	r2, #1
 8004362:	409a      	lsls	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	1000823f 	.word	0x1000823f
 8004378:	40020940 	.word	0x40020940

0800437c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800438a:	e15a      	b.n	8004642 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	2101      	movs	r1, #1
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	fa01 f303 	lsl.w	r3, r1, r3
 8004398:	4013      	ands	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 814c 	beq.w	800463c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d005      	beq.n	80043bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d130      	bne.n	800441e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	2203      	movs	r2, #3
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4013      	ands	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68da      	ldr	r2, [r3, #12]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043f2:	2201      	movs	r2, #1
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	693a      	ldr	r2, [r7, #16]
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	091b      	lsrs	r3, r3, #4
 8004408:	f003 0201 	and.w	r2, r3, #1
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b03      	cmp	r3, #3
 8004428:	d017      	beq.n	800445a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	2203      	movs	r2, #3
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4013      	ands	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0303 	and.w	r3, r3, #3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d123      	bne.n	80044ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	08da      	lsrs	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3208      	adds	r2, #8
 800446e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004472:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	220f      	movs	r2, #15
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4313      	orrs	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	08da      	lsrs	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3208      	adds	r2, #8
 80044a8:	6939      	ldr	r1, [r7, #16]
 80044aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	2203      	movs	r2, #3
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4013      	ands	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0203 	and.w	r2, r3, #3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	4313      	orrs	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80a6 	beq.w	800463c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f0:	4b5b      	ldr	r3, [pc, #364]	@ (8004660 <HAL_GPIO_Init+0x2e4>)
 80044f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004660 <HAL_GPIO_Init+0x2e4>)
 80044f6:	f043 0301 	orr.w	r3, r3, #1
 80044fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80044fc:	4b58      	ldr	r3, [pc, #352]	@ (8004660 <HAL_GPIO_Init+0x2e4>)
 80044fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004500:	f003 0301 	and.w	r3, r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004508:	4a56      	ldr	r2, [pc, #344]	@ (8004664 <HAL_GPIO_Init+0x2e8>)
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	089b      	lsrs	r3, r3, #2
 800450e:	3302      	adds	r3, #2
 8004510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004514:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f003 0303 	and.w	r3, r3, #3
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	220f      	movs	r2, #15
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4013      	ands	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004532:	d01f      	beq.n	8004574 <HAL_GPIO_Init+0x1f8>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a4c      	ldr	r2, [pc, #304]	@ (8004668 <HAL_GPIO_Init+0x2ec>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d019      	beq.n	8004570 <HAL_GPIO_Init+0x1f4>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a4b      	ldr	r2, [pc, #300]	@ (800466c <HAL_GPIO_Init+0x2f0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_GPIO_Init+0x1f0>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a4a      	ldr	r2, [pc, #296]	@ (8004670 <HAL_GPIO_Init+0x2f4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00d      	beq.n	8004568 <HAL_GPIO_Init+0x1ec>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a49      	ldr	r2, [pc, #292]	@ (8004674 <HAL_GPIO_Init+0x2f8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d007      	beq.n	8004564 <HAL_GPIO_Init+0x1e8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a48      	ldr	r2, [pc, #288]	@ (8004678 <HAL_GPIO_Init+0x2fc>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d101      	bne.n	8004560 <HAL_GPIO_Init+0x1e4>
 800455c:	2305      	movs	r3, #5
 800455e:	e00a      	b.n	8004576 <HAL_GPIO_Init+0x1fa>
 8004560:	2306      	movs	r3, #6
 8004562:	e008      	b.n	8004576 <HAL_GPIO_Init+0x1fa>
 8004564:	2304      	movs	r3, #4
 8004566:	e006      	b.n	8004576 <HAL_GPIO_Init+0x1fa>
 8004568:	2303      	movs	r3, #3
 800456a:	e004      	b.n	8004576 <HAL_GPIO_Init+0x1fa>
 800456c:	2302      	movs	r3, #2
 800456e:	e002      	b.n	8004576 <HAL_GPIO_Init+0x1fa>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <HAL_GPIO_Init+0x1fa>
 8004574:	2300      	movs	r3, #0
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	f002 0203 	and.w	r2, r2, #3
 800457c:	0092      	lsls	r2, r2, #2
 800457e:	4093      	lsls	r3, r2
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004586:	4937      	ldr	r1, [pc, #220]	@ (8004664 <HAL_GPIO_Init+0x2e8>)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	089b      	lsrs	r3, r3, #2
 800458c:	3302      	adds	r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004594:	4b39      	ldr	r3, [pc, #228]	@ (800467c <HAL_GPIO_Init+0x300>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	43db      	mvns	r3, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4013      	ands	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045b8:	4a30      	ldr	r2, [pc, #192]	@ (800467c <HAL_GPIO_Init+0x300>)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80045be:	4b2f      	ldr	r3, [pc, #188]	@ (800467c <HAL_GPIO_Init+0x300>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80045e2:	4a26      	ldr	r2, [pc, #152]	@ (800467c <HAL_GPIO_Init+0x300>)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80045e8:	4b24      	ldr	r3, [pc, #144]	@ (800467c <HAL_GPIO_Init+0x300>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	43db      	mvns	r3, r3
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	4013      	ands	r3, r2
 80045f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800460c:	4a1b      	ldr	r2, [pc, #108]	@ (800467c <HAL_GPIO_Init+0x300>)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004612:	4b1a      	ldr	r3, [pc, #104]	@ (800467c <HAL_GPIO_Init+0x300>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	43db      	mvns	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4013      	ands	r3, r2
 8004620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004636:	4a11      	ldr	r2, [pc, #68]	@ (800467c <HAL_GPIO_Init+0x300>)
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	3301      	adds	r3, #1
 8004640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	f47f ae9d 	bne.w	800438c <HAL_GPIO_Init+0x10>
  }
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	371c      	adds	r7, #28
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	40021000 	.word	0x40021000
 8004664:	40010000 	.word	0x40010000
 8004668:	48000400 	.word	0x48000400
 800466c:	48000800 	.word	0x48000800
 8004670:	48000c00 	.word	0x48000c00
 8004674:	48001000 	.word	0x48001000
 8004678:	48001400 	.word	0x48001400
 800467c:	40010400 	.word	0x40010400

08004680 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
 800468c:	4613      	mov	r3, r2
 800468e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004690:	787b      	ldrb	r3, [r7, #1]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004696:	887a      	ldrh	r2, [r7, #2]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800469c:	e002      	b.n	80046a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046ba:	4b08      	ldr	r3, [pc, #32]	@ (80046dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046bc:	695a      	ldr	r2, [r3, #20]
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d006      	beq.n	80046d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046c6:	4a05      	ldr	r2, [pc, #20]	@ (80046dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046cc:	88fb      	ldrh	r3, [r7, #6]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fd fd14 	bl	80020fc <HAL_GPIO_EXTI_Callback>
  }
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40010400 	.word	0x40010400

080046e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d141      	bne.n	8004772 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ee:	4b4b      	ldr	r3, [pc, #300]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fa:	d131      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046fc:	4b47      	ldr	r3, [pc, #284]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004702:	4a46      	ldr	r2, [pc, #280]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004708:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800470c:	4b43      	ldr	r3, [pc, #268]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004714:	4a41      	ldr	r2, [pc, #260]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800471a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800471c:	4b40      	ldr	r3, [pc, #256]	@ (8004820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2232      	movs	r2, #50	@ 0x32
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	4a3f      	ldr	r2, [pc, #252]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	0c9b      	lsrs	r3, r3, #18
 800472e:	3301      	adds	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004732:	e002      	b.n	800473a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800473a:	4b38      	ldr	r3, [pc, #224]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004746:	d102      	bne.n	800474e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f2      	bne.n	8004734 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800474e:	4b33      	ldr	r3, [pc, #204]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800475a:	d158      	bne.n	800480e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e057      	b.n	8004810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004760:	4b2e      	ldr	r3, [pc, #184]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004762:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004766:	4a2d      	ldr	r2, [pc, #180]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800476c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004770:	e04d      	b.n	800480e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004778:	d141      	bne.n	80047fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800477a:	4b28      	ldr	r3, [pc, #160]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004786:	d131      	bne.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004788:	4b24      	ldr	r3, [pc, #144]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800478a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800478e:	4a23      	ldr	r2, [pc, #140]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004794:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004798:	4b20      	ldr	r3, [pc, #128]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047a0:	4a1e      	ldr	r2, [pc, #120]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80047a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004820 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2232      	movs	r2, #50	@ 0x32
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047b4:	fba2 2303 	umull	r2, r3, r2, r3
 80047b8:	0c9b      	lsrs	r3, r3, #18
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047be:	e002      	b.n	80047c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047c6:	4b15      	ldr	r3, [pc, #84]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047d2:	d102      	bne.n	80047da <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f2      	bne.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047da:	4b10      	ldr	r3, [pc, #64]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e6:	d112      	bne.n	800480e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e011      	b.n	8004810 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047ec:	4b0b      	ldr	r3, [pc, #44]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f2:	4a0a      	ldr	r2, [pc, #40]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80047fc:	e007      	b.n	800480e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047fe:	4b07      	ldr	r3, [pc, #28]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004806:	4a05      	ldr	r2, [pc, #20]	@ (800481c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004808:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800480c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	40007000 	.word	0x40007000
 8004820:	20000208 	.word	0x20000208
 8004824:	431bde83 	.word	0x431bde83

08004828 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800482c:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a04      	ldr	r2, [pc, #16]	@ (8004844 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004836:	6093      	str	r3, [r2, #8]
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	40007000 	.word	0x40007000

08004848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e2fe      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d075      	beq.n	8004952 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004866:	4b97      	ldr	r3, [pc, #604]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004870:	4b94      	ldr	r3, [pc, #592]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d102      	bne.n	8004886 <HAL_RCC_OscConfig+0x3e>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d002      	beq.n	800488c <HAL_RCC_OscConfig+0x44>
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b08      	cmp	r3, #8
 800488a:	d10b      	bne.n	80048a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800488c:	4b8d      	ldr	r3, [pc, #564]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d05b      	beq.n	8004950 <HAL_RCC_OscConfig+0x108>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d157      	bne.n	8004950 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e2d9      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ac:	d106      	bne.n	80048bc <HAL_RCC_OscConfig+0x74>
 80048ae:	4b85      	ldr	r3, [pc, #532]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a84      	ldr	r2, [pc, #528]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	e01d      	b.n	80048f8 <HAL_RCC_OscConfig+0xb0>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCC_OscConfig+0x98>
 80048c6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a7e      	ldr	r2, [pc, #504]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	4b7c      	ldr	r3, [pc, #496]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7b      	ldr	r2, [pc, #492]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e00b      	b.n	80048f8 <HAL_RCC_OscConfig+0xb0>
 80048e0:	4b78      	ldr	r3, [pc, #480]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a77      	ldr	r2, [pc, #476]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b75      	ldr	r3, [pc, #468]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a74      	ldr	r2, [pc, #464]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80048f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d013      	beq.n	8004928 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004900:	f7fd ffe2 	bl	80028c8 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004908:	f7fd ffde 	bl	80028c8 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	@ 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e29e      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800491a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0xc0>
 8004926:	e014      	b.n	8004952 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd ffce 	bl	80028c8 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7fd ffca 	bl	80028c8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	@ 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e28a      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004942:	4b60      	ldr	r3, [pc, #384]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0xe8>
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d075      	beq.n	8004a4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800495e:	4b59      	ldr	r3, [pc, #356]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
 8004966:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004968:	4b56      	ldr	r3, [pc, #344]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b0c      	cmp	r3, #12
 8004976:	d102      	bne.n	800497e <HAL_RCC_OscConfig+0x136>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d002      	beq.n	8004984 <HAL_RCC_OscConfig+0x13c>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d11f      	bne.n	80049c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004984:	4b4f      	ldr	r3, [pc, #316]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_OscConfig+0x154>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e25d      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499c:	4b49      	ldr	r3, [pc, #292]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	061b      	lsls	r3, r3, #24
 80049aa:	4946      	ldr	r1, [pc, #280]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80049b0:	4b45      	ldr	r3, [pc, #276]	@ (8004ac8 <HAL_RCC_OscConfig+0x280>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7fd ff3b 	bl	8002830 <HAL_InitTick>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d043      	beq.n	8004a48 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e249      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d023      	beq.n	8004a14 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049cc:	4b3d      	ldr	r3, [pc, #244]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd ff76 	bl	80028c8 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e0:	f7fd ff72 	bl	80028c8 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e232      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049f2:	4b34      	ldr	r3, [pc, #208]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d0f0      	beq.n	80049e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b31      	ldr	r3, [pc, #196]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	492d      	ldr	r1, [pc, #180]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	604b      	str	r3, [r1, #4]
 8004a12:	e01a      	b.n	8004a4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a14:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a1a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a20:	f7fd ff52 	bl	80028c8 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a28:	f7fd ff4e 	bl	80028c8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e20e      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1f0      	bne.n	8004a28 <HAL_RCC_OscConfig+0x1e0>
 8004a46:	e000      	b.n	8004a4a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d041      	beq.n	8004ada <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a64:	4a17      	ldr	r2, [pc, #92]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a6e:	f7fd ff2b 	bl	80028c8 <HAL_GetTick>
 8004a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a74:	e008      	b.n	8004a88 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a76:	f7fd ff27 	bl	80028c8 <HAL_GetTick>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d901      	bls.n	8004a88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e1e7      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a88:	4b0e      	ldr	r3, [pc, #56]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0ef      	beq.n	8004a76 <HAL_RCC_OscConfig+0x22e>
 8004a96:	e020      	b.n	8004ada <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a9e:	4a09      	ldr	r2, [pc, #36]	@ (8004ac4 <HAL_RCC_OscConfig+0x27c>)
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fd ff0e 	bl	80028c8 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aae:	e00d      	b.n	8004acc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fd ff0a 	bl	80028c8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d906      	bls.n	8004acc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1ca      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
 8004ac2:	bf00      	nop
 8004ac4:	40021000 	.word	0x40021000
 8004ac8:	2000020c 	.word	0x2000020c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004acc:	4b8c      	ldr	r3, [pc, #560]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1ea      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 80a6 	beq.w	8004c34 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aec:	4b84      	ldr	r3, [pc, #528]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004af0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_OscConfig+0x2b4>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x2b6>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00d      	beq.n	8004b1e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	4b7f      	ldr	r3, [pc, #508]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b06:	4a7e      	ldr	r2, [pc, #504]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b0e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b1e:	4b79      	ldr	r3, [pc, #484]	@ (8004d04 <HAL_RCC_OscConfig+0x4bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d118      	bne.n	8004b5c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b2a:	4b76      	ldr	r3, [pc, #472]	@ (8004d04 <HAL_RCC_OscConfig+0x4bc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a75      	ldr	r2, [pc, #468]	@ (8004d04 <HAL_RCC_OscConfig+0x4bc>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b36:	f7fd fec7 	bl	80028c8 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3e:	f7fd fec3 	bl	80028c8 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e183      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b50:	4b6c      	ldr	r3, [pc, #432]	@ (8004d04 <HAL_RCC_OscConfig+0x4bc>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d108      	bne.n	8004b76 <HAL_RCC_OscConfig+0x32e>
 8004b64:	4b66      	ldr	r3, [pc, #408]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b6a:	4a65      	ldr	r2, [pc, #404]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b74:	e024      	b.n	8004bc0 <HAL_RCC_OscConfig+0x378>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d110      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x358>
 8004b7e:	4b60      	ldr	r3, [pc, #384]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b84:	4a5e      	ldr	r2, [pc, #376]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b86:	f043 0304 	orr.w	r3, r3, #4
 8004b8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b8e:	4b5c      	ldr	r3, [pc, #368]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b94:	4a5a      	ldr	r2, [pc, #360]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004b9e:	e00f      	b.n	8004bc0 <HAL_RCC_OscConfig+0x378>
 8004ba0:	4b57      	ldr	r3, [pc, #348]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba6:	4a56      	ldr	r2, [pc, #344]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004bb0:	4b53      	ldr	r3, [pc, #332]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb6:	4a52      	ldr	r2, [pc, #328]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d016      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc8:	f7fd fe7e 	bl	80028c8 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bce:	e00a      	b.n	8004be6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd0:	f7fd fe7a 	bl	80028c8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e138      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be6:	4b46      	ldr	r3, [pc, #280]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ed      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x388>
 8004bf4:	e015      	b.n	8004c22 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf6:	f7fd fe67 	bl	80028c8 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fd fe63 	bl	80028c8 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e121      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c14:	4b3a      	ldr	r3, [pc, #232]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1ed      	bne.n	8004bfe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c22:	7ffb      	ldrb	r3, [r7, #31]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d105      	bne.n	8004c34 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c28:	4b35      	ldr	r3, [pc, #212]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2c:	4a34      	ldr	r2, [pc, #208]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c32:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d03c      	beq.n	8004cba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d01c      	beq.n	8004c82 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c48:	4b2d      	ldr	r3, [pc, #180]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c58:	f7fd fe36 	bl	80028c8 <HAL_GetTick>
 8004c5c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c60:	f7fd fe32 	bl	80028c8 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e0f2      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004c72:	4b23      	ldr	r3, [pc, #140]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0ef      	beq.n	8004c60 <HAL_RCC_OscConfig+0x418>
 8004c80:	e01b      	b.n	8004cba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c82:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c88:	4a1d      	ldr	r2, [pc, #116]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c92:	f7fd fe19 	bl	80028c8 <HAL_GetTick>
 8004c96:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004c98:	e008      	b.n	8004cac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c9a:	f7fd fe15 	bl	80028c8 <HAL_GetTick>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d901      	bls.n	8004cac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e0d5      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004cac:	4b14      	ldr	r3, [pc, #80]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1ef      	bne.n	8004c9a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80c9 	beq.w	8004e56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	f000 8083 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d15e      	bne.n	8004d98 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cda:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a08      	ldr	r2, [pc, #32]	@ (8004d00 <HAL_RCC_OscConfig+0x4b8>)
 8004ce0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fdef 	bl	80028c8 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cec:	e00c      	b.n	8004d08 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd fdeb 	bl	80028c8 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d905      	bls.n	8004d08 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e0ab      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d08:	4b55      	ldr	r3, [pc, #340]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ec      	bne.n	8004cee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d14:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d16:	68da      	ldr	r2, [r3, #12]
 8004d18:	4b52      	ldr	r3, [pc, #328]	@ (8004e64 <HAL_RCC_OscConfig+0x61c>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	6a11      	ldr	r1, [r2, #32]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d24:	3a01      	subs	r2, #1
 8004d26:	0112      	lsls	r2, r2, #4
 8004d28:	4311      	orrs	r1, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004d2e:	0212      	lsls	r2, r2, #8
 8004d30:	4311      	orrs	r1, r2
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004d36:	0852      	lsrs	r2, r2, #1
 8004d38:	3a01      	subs	r2, #1
 8004d3a:	0552      	lsls	r2, r2, #21
 8004d3c:	4311      	orrs	r1, r2
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d42:	0852      	lsrs	r2, r2, #1
 8004d44:	3a01      	subs	r2, #1
 8004d46:	0652      	lsls	r2, r2, #25
 8004d48:	4311      	orrs	r1, r2
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d4e:	06d2      	lsls	r2, r2, #27
 8004d50:	430a      	orrs	r2, r1
 8004d52:	4943      	ldr	r1, [pc, #268]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d58:	4b41      	ldr	r3, [pc, #260]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a40      	ldr	r2, [pc, #256]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d62:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d64:	4b3e      	ldr	r3, [pc, #248]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a3d      	ldr	r2, [pc, #244]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7fd fdaa 	bl	80028c8 <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fd fda6 	bl	80028c8 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e066      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d8a:	4b35      	ldr	r3, [pc, #212]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0f0      	beq.n	8004d78 <HAL_RCC_OscConfig+0x530>
 8004d96:	e05e      	b.n	8004e56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d98:	4b31      	ldr	r3, [pc, #196]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a30      	ldr	r2, [pc, #192]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da4:	f7fd fd90 	bl	80028c8 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004daa:	e008      	b.n	8004dbe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fd fd8c 	bl	80028c8 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e04c      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dbe:	4b28      	ldr	r3, [pc, #160]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1f0      	bne.n	8004dac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004dca:	4b25      	ldr	r3, [pc, #148]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	4924      	ldr	r1, [pc, #144]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004dd0:	4b25      	ldr	r3, [pc, #148]	@ (8004e68 <HAL_RCC_OscConfig+0x620>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	60cb      	str	r3, [r1, #12]
 8004dd6:	e03e      	b.n	8004e56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e039      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004de4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e60 <HAL_RCC_OscConfig+0x618>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0203 	and.w	r2, r3, #3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d12c      	bne.n	8004e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	3b01      	subs	r3, #1
 8004e04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d123      	bne.n	8004e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d11b      	bne.n	8004e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d113      	bne.n	8004e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e34:	085b      	lsrs	r3, r3, #1
 8004e36:	3b01      	subs	r3, #1
 8004e38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d109      	bne.n	8004e52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e48:	085b      	lsrs	r3, r3, #1
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d001      	beq.n	8004e56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	019f800c 	.word	0x019f800c
 8004e68:	feeefffc 	.word	0xfeeefffc

08004e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e11e      	b.n	80050c2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e84:	4b91      	ldr	r3, [pc, #580]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 030f 	and.w	r3, r3, #15
 8004e8c:	683a      	ldr	r2, [r7, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d910      	bls.n	8004eb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e92:	4b8e      	ldr	r3, [pc, #568]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 020f 	bic.w	r2, r3, #15
 8004e9a:	498c      	ldr	r1, [pc, #560]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ea2:	4b8a      	ldr	r3, [pc, #552]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e106      	b.n	80050c2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d073      	beq.n	8004fa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b03      	cmp	r3, #3
 8004ec6:	d129      	bne.n	8004f1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec8:	4b81      	ldr	r3, [pc, #516]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d101      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0f4      	b.n	80050c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ed8:	f000 f99e 	bl	8005218 <RCC_GetSysClockFreqFromPLLSource>
 8004edc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4a7c      	ldr	r2, [pc, #496]	@ (80050d4 <HAL_RCC_ClockConfig+0x268>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d93f      	bls.n	8004f66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ee6:	4b7a      	ldr	r3, [pc, #488]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d033      	beq.n	8004f66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d12f      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f06:	4b72      	ldr	r3, [pc, #456]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f0e:	4a70      	ldr	r2, [pc, #448]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004f16:	2380      	movs	r3, #128	@ 0x80
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e024      	b.n	8004f66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f24:	4b6a      	ldr	r3, [pc, #424]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d109      	bne.n	8004f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0c6      	b.n	80050c2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f34:	4b66      	ldr	r3, [pc, #408]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0be      	b.n	80050c2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f44:	f000 f8ce 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 8004f48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4a61      	ldr	r2, [pc, #388]	@ (80050d4 <HAL_RCC_ClockConfig+0x268>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d909      	bls.n	8004f66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004f52:	4b5f      	ldr	r3, [pc, #380]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f5a:	4a5d      	ldr	r2, [pc, #372]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004f62:	2380      	movs	r3, #128	@ 0x80
 8004f64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f66:	4b5a      	ldr	r3, [pc, #360]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f023 0203 	bic.w	r2, r3, #3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	4957      	ldr	r1, [pc, #348]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f78:	f7fd fca6 	bl	80028c8 <HAL_GetTick>
 8004f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7e:	e00a      	b.n	8004f96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f80:	f7fd fca2 	bl	80028c8 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e095      	b.n	80050c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f96:	4b4e      	ldr	r3, [pc, #312]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 020c 	and.w	r2, r3, #12
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1eb      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0302 	and.w	r3, r3, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d023      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0304 	and.w	r3, r3, #4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc0:	4b43      	ldr	r3, [pc, #268]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a42      	ldr	r2, [pc, #264]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004fc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004fe2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fe6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe8:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	4936      	ldr	r1, [pc, #216]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	608b      	str	r3, [r1, #8]
 8004ffa:	e008      	b.n	800500e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b80      	cmp	r3, #128	@ 0x80
 8005000:	d105      	bne.n	800500e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005002:	4b33      	ldr	r3, [pc, #204]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	4a32      	ldr	r2, [pc, #200]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8005008:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800500c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800500e:	4b2f      	ldr	r3, [pc, #188]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d21d      	bcs.n	8005058 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501c:	4b2b      	ldr	r3, [pc, #172]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 020f 	bic.w	r2, r3, #15
 8005024:	4929      	ldr	r1, [pc, #164]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800502c:	f7fd fc4c 	bl	80028c8 <HAL_GetTick>
 8005030:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	e00a      	b.n	800504a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005034:	f7fd fc48 	bl	80028c8 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005042:	4293      	cmp	r3, r2
 8005044:	d901      	bls.n	800504a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e03b      	b.n	80050c2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <HAL_RCC_ClockConfig+0x260>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d1ed      	bne.n	8005034 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005064:	4b1a      	ldr	r3, [pc, #104]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	4917      	ldr	r1, [pc, #92]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8005072:	4313      	orrs	r3, r2
 8005074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005082:	4b13      	ldr	r3, [pc, #76]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	490f      	ldr	r1, [pc, #60]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 8005092:	4313      	orrs	r3, r2
 8005094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005096:	f000 f825 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 800509a:	4602      	mov	r2, r0
 800509c:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <HAL_RCC_ClockConfig+0x264>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f003 030f 	and.w	r3, r3, #15
 80050a6:	490c      	ldr	r1, [pc, #48]	@ (80050d8 <HAL_RCC_ClockConfig+0x26c>)
 80050a8:	5ccb      	ldrb	r3, [r1, r3]
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	fa22 f303 	lsr.w	r3, r2, r3
 80050b2:	4a0a      	ldr	r2, [pc, #40]	@ (80050dc <HAL_RCC_ClockConfig+0x270>)
 80050b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050b6:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <HAL_RCC_ClockConfig+0x274>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fd fbb8 	bl	8002830 <HAL_InitTick>
 80050c0:	4603      	mov	r3, r0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40022000 	.word	0x40022000
 80050d0:	40021000 	.word	0x40021000
 80050d4:	04c4b400 	.word	0x04c4b400
 80050d8:	0800a18c 	.word	0x0800a18c
 80050dc:	20000208 	.word	0x20000208
 80050e0:	2000020c 	.word	0x2000020c

080050e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80050ea:	4b2c      	ldr	r3, [pc, #176]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d102      	bne.n	80050fc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050f6:	4b2a      	ldr	r3, [pc, #168]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	e047      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80050fc:	4b27      	ldr	r3, [pc, #156]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 030c 	and.w	r3, r3, #12
 8005104:	2b08      	cmp	r3, #8
 8005106:	d102      	bne.n	800510e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005108:	4b26      	ldr	r3, [pc, #152]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800510a:	613b      	str	r3, [r7, #16]
 800510c:	e03e      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800510e:	4b23      	ldr	r3, [pc, #140]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f003 030c 	and.w	r3, r3, #12
 8005116:	2b0c      	cmp	r3, #12
 8005118:	d136      	bne.n	8005188 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800511a:	4b20      	ldr	r3, [pc, #128]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005124:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	f003 030f 	and.w	r3, r3, #15
 800512e:	3301      	adds	r3, #1
 8005130:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b03      	cmp	r3, #3
 8005136:	d10c      	bne.n	8005152 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005138:	4a1a      	ldr	r2, [pc, #104]	@ (80051a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005140:	4a16      	ldr	r2, [pc, #88]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005142:	68d2      	ldr	r2, [r2, #12]
 8005144:	0a12      	lsrs	r2, r2, #8
 8005146:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800514a:	fb02 f303 	mul.w	r3, r2, r3
 800514e:	617b      	str	r3, [r7, #20]
      break;
 8005150:	e00c      	b.n	800516c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005152:	4a13      	ldr	r2, [pc, #76]	@ (80051a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	4a10      	ldr	r2, [pc, #64]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	0a12      	lsrs	r2, r2, #8
 8005160:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005164:	fb02 f303 	mul.w	r3, r2, r3
 8005168:	617b      	str	r3, [r7, #20]
      break;
 800516a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800516c:	4b0b      	ldr	r3, [pc, #44]	@ (800519c <HAL_RCC_GetSysClockFreq+0xb8>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	0e5b      	lsrs	r3, r3, #25
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	3301      	adds	r3, #1
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	e001      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800518c:	693b      	ldr	r3, [r7, #16]
}
 800518e:	4618      	mov	r0, r3
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	016e3600 	.word	0x016e3600

080051a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ac:	4b03      	ldr	r3, [pc, #12]	@ (80051bc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ae:	681b      	ldr	r3, [r3, #0]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000208 	.word	0x20000208

080051c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051c4:	f7ff fff0 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	4904      	ldr	r1, [pc, #16]	@ (80051e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051d6:	5ccb      	ldrb	r3, [r1, r3]
 80051d8:	f003 031f 	and.w	r3, r3, #31
 80051dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40021000 	.word	0x40021000
 80051e8:	0800a19c 	.word	0x0800a19c

080051ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051f0:	f7ff ffda 	bl	80051a8 <HAL_RCC_GetHCLKFreq>
 80051f4:	4602      	mov	r2, r0
 80051f6:	4b06      	ldr	r3, [pc, #24]	@ (8005210 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	0adb      	lsrs	r3, r3, #11
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	4904      	ldr	r1, [pc, #16]	@ (8005214 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005202:	5ccb      	ldrb	r3, [r1, r3]
 8005204:	f003 031f 	and.w	r3, r3, #31
 8005208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800520c:	4618      	mov	r0, r3
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40021000 	.word	0x40021000
 8005214:	0800a19c 	.word	0x0800a19c

08005218 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800521e:	4b1e      	ldr	r3, [pc, #120]	@ (8005298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005228:	4b1b      	ldr	r3, [pc, #108]	@ (8005298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	3301      	adds	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d10c      	bne.n	8005256 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800523c:	4a17      	ldr	r2, [pc, #92]	@ (800529c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	fbb2 f3f3 	udiv	r3, r2, r3
 8005244:	4a14      	ldr	r2, [pc, #80]	@ (8005298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005246:	68d2      	ldr	r2, [r2, #12]
 8005248:	0a12      	lsrs	r2, r2, #8
 800524a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	617b      	str	r3, [r7, #20]
    break;
 8005254:	e00c      	b.n	8005270 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005256:	4a12      	ldr	r2, [pc, #72]	@ (80052a0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	fbb2 f3f3 	udiv	r3, r2, r3
 800525e:	4a0e      	ldr	r2, [pc, #56]	@ (8005298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005260:	68d2      	ldr	r2, [r2, #12]
 8005262:	0a12      	lsrs	r2, r2, #8
 8005264:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	617b      	str	r3, [r7, #20]
    break;
 800526e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005270:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0e5b      	lsrs	r3, r3, #25
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	3301      	adds	r3, #1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800528a:	687b      	ldr	r3, [r7, #4]
}
 800528c:	4618      	mov	r0, r3
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40021000 	.word	0x40021000
 800529c:	016e3600 	.word	0x016e3600
 80052a0:	00f42400 	.word	0x00f42400

080052a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052ac:	2300      	movs	r3, #0
 80052ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052b0:	2300      	movs	r3, #0
 80052b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 8098 	beq.w	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052c2:	2300      	movs	r3, #0
 80052c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052c6:	4b43      	ldr	r3, [pc, #268]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052d2:	4b40      	ldr	r3, [pc, #256]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d6:	4a3f      	ldr	r2, [pc, #252]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80052de:	4b3d      	ldr	r3, [pc, #244]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ea:	2301      	movs	r3, #1
 80052ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ee:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a39      	ldr	r2, [pc, #228]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80052f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052fa:	f7fd fae5 	bl	80028c8 <HAL_GetTick>
 80052fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005300:	e009      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005302:	f7fd fae1 	bl	80028c8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d902      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	74fb      	strb	r3, [r7, #19]
        break;
 8005314:	e005      	b.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005316:	4b30      	ldr	r3, [pc, #192]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ef      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005322:	7cfb      	ldrb	r3, [r7, #19]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d159      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005328:	4b2a      	ldr	r3, [pc, #168]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800532a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005332:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d01e      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	429a      	cmp	r2, r3
 8005342:	d019      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005344:	4b23      	ldr	r3, [pc, #140]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800534e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005350:	4b20      	ldr	r3, [pc, #128]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005356:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800535c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005360:	4b1c      	ldr	r3, [pc, #112]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005366:	4a1b      	ldr	r2, [pc, #108]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005370:	4a18      	ldr	r2, [pc, #96]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fd faa1 	bl	80028c8 <HAL_GetTick>
 8005386:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005388:	e00b      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fd fa9d 	bl	80028c8 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005398:	4293      	cmp	r3, r2
 800539a:	d902      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	74fb      	strb	r3, [r7, #19]
            break;
 80053a0:	e006      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053a2:	4b0c      	ldr	r3, [pc, #48]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0ec      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80053b0:	7cfb      	ldrb	r3, [r7, #19]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10b      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b6:	4b07      	ldr	r3, [pc, #28]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c4:	4903      	ldr	r1, [pc, #12]	@ (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80053cc:	e008      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ce:	7cfb      	ldrb	r3, [r7, #19]
 80053d0:	74bb      	strb	r3, [r7, #18]
 80053d2:	e005      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80053d4:	40021000 	.word	0x40021000
 80053d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053e0:	7c7b      	ldrb	r3, [r7, #17]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4ba7      	ldr	r3, [pc, #668]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053ea:	4aa6      	ldr	r2, [pc, #664]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fe:	4ba1      	ldr	r3, [pc, #644]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005404:	f023 0203 	bic.w	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	499d      	ldr	r1, [pc, #628]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005420:	4b98      	ldr	r3, [pc, #608]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005426:	f023 020c 	bic.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	4995      	ldr	r1, [pc, #596]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005442:	4b90      	ldr	r3, [pc, #576]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005448:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	498c      	ldr	r1, [pc, #560]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005464:	4b87      	ldr	r3, [pc, #540]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	4984      	ldr	r1, [pc, #528]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005486:	4b7f      	ldr	r3, [pc, #508]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800548c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	497b      	ldr	r1, [pc, #492]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054a8:	4b76      	ldr	r3, [pc, #472]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	4973      	ldr	r1, [pc, #460]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054ca:	4b6e      	ldr	r3, [pc, #440]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	496a      	ldr	r1, [pc, #424]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ec:	4b65      	ldr	r3, [pc, #404]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	4962      	ldr	r1, [pc, #392]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800550e:	4b5d      	ldr	r3, [pc, #372]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551c:	4959      	ldr	r1, [pc, #356]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00a      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005530:	4b54      	ldr	r3, [pc, #336]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005536:	f023 0203 	bic.w	r2, r3, #3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553e:	4951      	ldr	r1, [pc, #324]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005552:	4b4c      	ldr	r3, [pc, #304]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	4948      	ldr	r1, [pc, #288]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005570:	2b00      	cmp	r3, #0
 8005572:	d015      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005574:	4b43      	ldr	r3, [pc, #268]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	4940      	ldr	r1, [pc, #256]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005592:	d105      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005594:	4b3b      	ldr	r3, [pc, #236]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	4a3a      	ldr	r2, [pc, #232]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800559e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d015      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055ac:	4b35      	ldr	r3, [pc, #212]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ba:	4932      	ldr	r1, [pc, #200]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055ca:	d105      	bne.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	4a2c      	ldr	r2, [pc, #176]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80055d6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d015      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055e4:	4b27      	ldr	r3, [pc, #156]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f2:	4924      	ldr	r1, [pc, #144]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005602:	d105      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005604:	4b1f      	ldr	r3, [pc, #124]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4a1e      	ldr	r2, [pc, #120]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800560e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d015      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800561c:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005622:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562a:	4916      	ldr	r1, [pc, #88]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800563a:	d105      	bne.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800563c:	4b11      	ldr	r3, [pc, #68]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a10      	ldr	r2, [pc, #64]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005646:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d019      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005654:	4b0b      	ldr	r3, [pc, #44]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005662:	4908      	ldr	r1, [pc, #32]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005672:	d109      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005674:	4b03      	ldr	r3, [pc, #12]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	4a02      	ldr	r2, [pc, #8]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800567e:	60d3      	str	r3, [r2, #12]
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005694:	4b29      	ldr	r3, [pc, #164]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800569a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a2:	4926      	ldr	r1, [pc, #152]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056b2:	d105      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056b4:	4b21      	ldr	r3, [pc, #132]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4a20      	ldr	r2, [pc, #128]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d015      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80056cc:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056da:	4918      	ldr	r1, [pc, #96]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ea:	d105      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056ec:	4b13      	ldr	r3, [pc, #76]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	4a12      	ldr	r2, [pc, #72]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d015      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005704:	4b0d      	ldr	r3, [pc, #52]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800570a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005712:	490a      	ldr	r1, [pc, #40]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005714:	4313      	orrs	r3, r2
 8005716:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800571e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005722:	d105      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	4a04      	ldr	r2, [pc, #16]	@ (800573c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800572a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800572e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005730:	7cbb      	ldrb	r3, [r7, #18]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000

08005740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e054      	b.n	80057fc <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d111      	bne.n	8005782 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f001 fe5c 	bl	8007424 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a23      	ldr	r2, [pc, #140]	@ (8005804 <HAL_TIM_Base_Init+0xc4>)
 8005778:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	4619      	mov	r1, r3
 8005794:	4610      	mov	r0, r2
 8005796:	f001 f9a5 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	08002211 	.word	0x08002211

08005808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e054      	b.n	80058ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a26      	ldr	r2, [pc, #152]	@ (80058d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d022      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584a:	d01d      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a22      	ldr	r2, [pc, #136]	@ (80058dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d018      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a21      	ldr	r2, [pc, #132]	@ (80058e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d013      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1f      	ldr	r2, [pc, #124]	@ (80058e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00e      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1e      	ldr	r2, [pc, #120]	@ (80058e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d009      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1c      	ldr	r2, [pc, #112]	@ (80058ec <HAL_TIM_Base_Start_IT+0xe4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d004      	beq.n	8005888 <HAL_TIM_Base_Start_IT+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1b      	ldr	r2, [pc, #108]	@ (80058f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d115      	bne.n	80058b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	4b19      	ldr	r3, [pc, #100]	@ (80058f4 <HAL_TIM_Base_Start_IT+0xec>)
 8005890:	4013      	ands	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b06      	cmp	r3, #6
 8005898:	d015      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0xbe>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a0:	d011      	beq.n	80058c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0201 	orr.w	r2, r2, #1
 80058b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b2:	e008      	b.n	80058c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e000      	b.n	80058c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40013400 	.word	0x40013400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40015000 	.word	0x40015000
 80058f4:	00010007 	.word	0x00010007

080058f8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e054      	b.n	80059b4 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d111      	bne.n	800593a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 fd80 	bl	8007424 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a23      	ldr	r2, [pc, #140]	@ (80059bc <HAL_TIM_OC_Init+0xc4>)
 8005930:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2202      	movs	r2, #2
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f001 f8c9 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	080059c1 	.word	0x080059c1

080059c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e054      	b.n	8005a90 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d111      	bne.n	8005a16 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f001 fd12 	bl	8007424 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a23      	ldr	r2, [pc, #140]	@ (8005a98 <HAL_TIM_PWM_Init+0xc4>)
 8005a0c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2202      	movs	r2, #2
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	3304      	adds	r3, #4
 8005a26:	4619      	mov	r1, r3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	f001 f85b 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	08005a9d 	.word	0x08005a9d

08005a9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e04c      	b.n	8005b5e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d111      	bne.n	8005af4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f001 fca3 	bl	8007424 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8005b68 <HAL_TIM_OnePulse_Init+0xb8>)
 8005aea:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	3304      	adds	r3, #4
 8005b04:	4619      	mov	r1, r3
 8005b06:	4610      	mov	r0, r2
 8005b08:	f000 ffec 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0208 	bic.w	r2, r2, #8
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	08005b6d 	.word	0x08005b6d

08005b6c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005b98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ba0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ba8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d108      	bne.n	8005bc2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d105      	bne.n	8005bc2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bb6:	7b7b      	ldrb	r3, [r7, #13]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d102      	bne.n	8005bc2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bbc:	7b3b      	ldrb	r3, [r7, #12]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d001      	beq.n	8005bc6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e059      	b.n	8005c7a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0202 	orr.w	r2, r2, #2
 8005bf4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0204 	orr.w	r2, r2, #4
 8005c04:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	2100      	movs	r1, #0
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fbe2 	bl	80073d8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f001 fbdb 	bl	80073d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a17      	ldr	r2, [pc, #92]	@ (8005c84 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d018      	beq.n	8005c5e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a15      	ldr	r2, [pc, #84]	@ (8005c88 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a14      	ldr	r2, [pc, #80]	@ (8005c8c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00e      	beq.n	8005c5e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a12      	ldr	r2, [pc, #72]	@ (8005c90 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a11      	ldr	r2, [pc, #68]	@ (8005c94 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a0f      	ldr	r2, [pc, #60]	@ (8005c98 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d101      	bne.n	8005c62 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d007      	beq.n	8005c78 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40012c00 	.word	0x40012c00
 8005c88:	40013400 	.word	0x40013400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40014400 	.word	0x40014400
 8005c94:	40014800 	.word	0x40014800
 8005c98:	40015000 	.word	0x40015000

08005c9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0a2      	b.n	8005df6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d111      	bne.n	8005ce0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fbad 	bl	8007424 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d102      	bne.n	8005cd8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8005e00 <HAL_TIM_Encoder_Init+0x164>)
 8005cd6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f000 feec 	bl	8006ae4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d34:	f023 0303 	bic.w	r3, r3, #3
 8005d38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	4313      	orrs	r3, r2
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005d52:	f023 030c 	bic.w	r3, r3, #12
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	021b      	lsls	r3, r3, #8
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	011a      	lsls	r2, r3, #4
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	031b      	lsls	r3, r3, #12
 8005d82:	4313      	orrs	r3, r2
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005d90:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005d98:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	4313      	orrs	r3, r2
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	08002319 	.word	0x08002319

08005e04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d110      	bne.n	8005e56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d102      	bne.n	8005e40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e3a:	7b7b      	ldrb	r3, [r7, #13]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d001      	beq.n	8005e44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	e069      	b.n	8005f18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2202      	movs	r2, #2
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e54:	e031      	b.n	8005eba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d110      	bne.n	8005e7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e5c:	7bbb      	ldrb	r3, [r7, #14]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d102      	bne.n	8005e68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e62:	7b3b      	ldrb	r3, [r7, #12]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d001      	beq.n	8005e6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e055      	b.n	8005f18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e7c:	e01d      	b.n	8005eba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e7e:	7bfb      	ldrb	r3, [r7, #15]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d108      	bne.n	8005e96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d105      	bne.n	8005e96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e8a:	7b7b      	ldrb	r3, [r7, #13]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d102      	bne.n	8005e96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e90:	7b3b      	ldrb	r3, [r7, #12]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d001      	beq.n	8005e9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e03e      	b.n	8005f18 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d003      	beq.n	8005ec8 <HAL_TIM_Encoder_Start+0xc4>
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d008      	beq.n	8005ed8 <HAL_TIM_Encoder_Start+0xd4>
 8005ec6:	e00f      	b.n	8005ee8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 fa81 	bl	80073d8 <TIM_CCxChannelCmd>
      break;
 8005ed6:	e016      	b.n	8005f06 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2201      	movs	r2, #1
 8005ede:	2104      	movs	r1, #4
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fa79 	bl	80073d8 <TIM_CCxChannelCmd>
      break;
 8005ee6:	e00e      	b.n	8005f06 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2201      	movs	r2, #1
 8005eee:	2100      	movs	r1, #0
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fa71 	bl	80073d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2201      	movs	r2, #1
 8005efc:	2104      	movs	r1, #4
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 fa6a 	bl	80073d8 <TIM_CCxChannelCmd>
      break;
 8005f04:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0201 	orr.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d026      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d021      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f06f 0202 	mvn.w	r2, #2
 8005f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d005      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
 8005f74:	e009      	b.n	8005f8a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d026      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d021      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0204 	mvn.w	r2, #4
 8005fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4798      	blx	r3
 8005fcc:	e009      	b.n	8005fe2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d026      	beq.n	8006040 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d021      	beq.n	8006040 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0208 	mvn.w	r2, #8
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2204      	movs	r2, #4
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	4798      	blx	r3
 8006024:	e009      	b.n	800603a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0310 	and.w	r3, r3, #16
 8006046:	2b00      	cmp	r3, #0
 8006048:	d026      	beq.n	8006098 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	d021      	beq.n	8006098 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0210 	mvn.w	r2, #16
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2208      	movs	r2, #8
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	e009      	b.n	8006092 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00e      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0201 	mvn.w	r2, #1
 80060b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00e      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00e      	beq.n	800611a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800610e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00e      	beq.n	800616a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f06f 0220 	mvn.w	r2, #32
 800615e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00e      	beq.n	8006192 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00e      	beq.n	80061ba <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d009      	beq.n	80061ba <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80061ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00e      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80061d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00e      	beq.n	800620a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80061fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_TIM_OC_ConfigChannel+0x1e>
 800622e:	2302      	movs	r3, #2
 8006230:	e066      	b.n	8006300 <HAL_TIM_OC_ConfigChannel+0xec>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b14      	cmp	r3, #20
 800623e:	d857      	bhi.n	80062f0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006240:	a201      	add	r2, pc, #4	@ (adr r2, 8006248 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006246:	bf00      	nop
 8006248:	0800629d 	.word	0x0800629d
 800624c:	080062f1 	.word	0x080062f1
 8006250:	080062f1 	.word	0x080062f1
 8006254:	080062f1 	.word	0x080062f1
 8006258:	080062ab 	.word	0x080062ab
 800625c:	080062f1 	.word	0x080062f1
 8006260:	080062f1 	.word	0x080062f1
 8006264:	080062f1 	.word	0x080062f1
 8006268:	080062b9 	.word	0x080062b9
 800626c:	080062f1 	.word	0x080062f1
 8006270:	080062f1 	.word	0x080062f1
 8006274:	080062f1 	.word	0x080062f1
 8006278:	080062c7 	.word	0x080062c7
 800627c:	080062f1 	.word	0x080062f1
 8006280:	080062f1 	.word	0x080062f1
 8006284:	080062f1 	.word	0x080062f1
 8006288:	080062d5 	.word	0x080062d5
 800628c:	080062f1 	.word	0x080062f1
 8006290:	080062f1 	.word	0x080062f1
 8006294:	080062f1 	.word	0x080062f1
 8006298:	080062e3 	.word	0x080062e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68b9      	ldr	r1, [r7, #8]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 fcd2 	bl	8006c4c <TIM_OC1_SetConfig>
      break;
 80062a8:	e025      	b.n	80062f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fd65 	bl	8006d80 <TIM_OC2_SetConfig>
      break;
 80062b6:	e01e      	b.n	80062f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fdf2 	bl	8006ea8 <TIM_OC3_SetConfig>
      break;
 80062c4:	e017      	b.n	80062f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fe7d 	bl	8006fcc <TIM_OC4_SetConfig>
      break;
 80062d2:	e010      	b.n	80062f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 ff0a 	bl	80070f4 <TIM_OC5_SetConfig>
      break;
 80062e0:	e009      	b.n	80062f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 ff6d 	bl	80071c8 <TIM_OC6_SetConfig>
      break;
 80062ee:	e002      	b.n	80062f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]
      break;
 80062f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006322:	2302      	movs	r3, #2
 8006324:	e0ff      	b.n	8006526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2b14      	cmp	r3, #20
 8006332:	f200 80f0 	bhi.w	8006516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006336:	a201      	add	r2, pc, #4	@ (adr r2, 800633c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633c:	08006391 	.word	0x08006391
 8006340:	08006517 	.word	0x08006517
 8006344:	08006517 	.word	0x08006517
 8006348:	08006517 	.word	0x08006517
 800634c:	080063d1 	.word	0x080063d1
 8006350:	08006517 	.word	0x08006517
 8006354:	08006517 	.word	0x08006517
 8006358:	08006517 	.word	0x08006517
 800635c:	08006413 	.word	0x08006413
 8006360:	08006517 	.word	0x08006517
 8006364:	08006517 	.word	0x08006517
 8006368:	08006517 	.word	0x08006517
 800636c:	08006453 	.word	0x08006453
 8006370:	08006517 	.word	0x08006517
 8006374:	08006517 	.word	0x08006517
 8006378:	08006517 	.word	0x08006517
 800637c:	08006495 	.word	0x08006495
 8006380:	08006517 	.word	0x08006517
 8006384:	08006517 	.word	0x08006517
 8006388:	08006517 	.word	0x08006517
 800638c:	080064d5 	.word	0x080064d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fc58 	bl	8006c4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	699a      	ldr	r2, [r3, #24]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0204 	bic.w	r2, r2, #4
 80063ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6999      	ldr	r1, [r3, #24]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	430a      	orrs	r2, r1
 80063cc:	619a      	str	r2, [r3, #24]
      break;
 80063ce:	e0a5      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68b9      	ldr	r1, [r7, #8]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f000 fcd2 	bl	8006d80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6999      	ldr	r1, [r3, #24]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	021a      	lsls	r2, r3, #8
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	619a      	str	r2, [r3, #24]
      break;
 8006410:	e084      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fd45 	bl	8006ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f042 0208 	orr.w	r2, r2, #8
 800642c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0204 	bic.w	r2, r2, #4
 800643c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	61da      	str	r2, [r3, #28]
      break;
 8006450:	e064      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68b9      	ldr	r1, [r7, #8]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fdb7 	bl	8006fcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800646c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69d9      	ldr	r1, [r3, #28]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	021a      	lsls	r2, r3, #8
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
      break;
 8006492:	e043      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68b9      	ldr	r1, [r7, #8]
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fe2a 	bl	80070f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0208 	orr.w	r2, r2, #8
 80064ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0204 	bic.w	r2, r2, #4
 80064be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80064d2:	e023      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68b9      	ldr	r1, [r7, #8]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fe74 	bl	80071c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	021a      	lsls	r2, r3, #8
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	430a      	orrs	r2, r1
 8006512:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006514:	e002      	b.n	800651c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	75fb      	strb	r3, [r7, #23]
      break;
 800651a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop

08006530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006544:	2b01      	cmp	r3, #1
 8006546:	d101      	bne.n	800654c <HAL_TIM_ConfigClockSource+0x1c>
 8006548:	2302      	movs	r3, #2
 800654a:	e0f6      	b.n	800673a <HAL_TIM_ConfigClockSource+0x20a>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800656a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800656e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a6f      	ldr	r2, [pc, #444]	@ (8006744 <HAL_TIM_ConfigClockSource+0x214>)
 8006586:	4293      	cmp	r3, r2
 8006588:	f000 80c1 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 800658c:	4a6d      	ldr	r2, [pc, #436]	@ (8006744 <HAL_TIM_ConfigClockSource+0x214>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f200 80c6 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006594:	4a6c      	ldr	r2, [pc, #432]	@ (8006748 <HAL_TIM_ConfigClockSource+0x218>)
 8006596:	4293      	cmp	r3, r2
 8006598:	f000 80b9 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 800659c:	4a6a      	ldr	r2, [pc, #424]	@ (8006748 <HAL_TIM_ConfigClockSource+0x218>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	f200 80be 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 80065a4:	4a69      	ldr	r2, [pc, #420]	@ (800674c <HAL_TIM_ConfigClockSource+0x21c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	f000 80b1 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 80065ac:	4a67      	ldr	r2, [pc, #412]	@ (800674c <HAL_TIM_ConfigClockSource+0x21c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	f200 80b6 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 80065b4:	4a66      	ldr	r2, [pc, #408]	@ (8006750 <HAL_TIM_ConfigClockSource+0x220>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	f000 80a9 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 80065bc:	4a64      	ldr	r2, [pc, #400]	@ (8006750 <HAL_TIM_ConfigClockSource+0x220>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	f200 80ae 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 80065c4:	4a63      	ldr	r2, [pc, #396]	@ (8006754 <HAL_TIM_ConfigClockSource+0x224>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	f000 80a1 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 80065cc:	4a61      	ldr	r2, [pc, #388]	@ (8006754 <HAL_TIM_ConfigClockSource+0x224>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	f200 80a6 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 80065d4:	4a60      	ldr	r2, [pc, #384]	@ (8006758 <HAL_TIM_ConfigClockSource+0x228>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	f000 8099 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 80065dc:	4a5e      	ldr	r2, [pc, #376]	@ (8006758 <HAL_TIM_ConfigClockSource+0x228>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	f200 809e 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 80065e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065e8:	f000 8091 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 80065ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80065f0:	f200 8096 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 80065f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065f8:	f000 8089 	beq.w	800670e <HAL_TIM_ConfigClockSource+0x1de>
 80065fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006600:	f200 808e 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006604:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006608:	d03e      	beq.n	8006688 <HAL_TIM_ConfigClockSource+0x158>
 800660a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800660e:	f200 8087 	bhi.w	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006616:	f000 8086 	beq.w	8006726 <HAL_TIM_ConfigClockSource+0x1f6>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661e:	d87f      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006620:	2b70      	cmp	r3, #112	@ 0x70
 8006622:	d01a      	beq.n	800665a <HAL_TIM_ConfigClockSource+0x12a>
 8006624:	2b70      	cmp	r3, #112	@ 0x70
 8006626:	d87b      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006628:	2b60      	cmp	r3, #96	@ 0x60
 800662a:	d050      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x19e>
 800662c:	2b60      	cmp	r3, #96	@ 0x60
 800662e:	d877      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006630:	2b50      	cmp	r3, #80	@ 0x50
 8006632:	d03c      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x17e>
 8006634:	2b50      	cmp	r3, #80	@ 0x50
 8006636:	d873      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006638:	2b40      	cmp	r3, #64	@ 0x40
 800663a:	d058      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x1be>
 800663c:	2b40      	cmp	r3, #64	@ 0x40
 800663e:	d86f      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006640:	2b30      	cmp	r3, #48	@ 0x30
 8006642:	d064      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x1de>
 8006644:	2b30      	cmp	r3, #48	@ 0x30
 8006646:	d86b      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006648:	2b20      	cmp	r3, #32
 800664a:	d060      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x1de>
 800664c:	2b20      	cmp	r3, #32
 800664e:	d867      	bhi.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d05c      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x1de>
 8006654:	2b10      	cmp	r3, #16
 8006656:	d05a      	beq.n	800670e <HAL_TIM_ConfigClockSource+0x1de>
 8006658:	e062      	b.n	8006720 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800666a:	f000 fe95 	bl	8007398 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800667c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68ba      	ldr	r2, [r7, #8]
 8006684:	609a      	str	r2, [r3, #8]
      break;
 8006686:	e04f      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006698:	f000 fe7e 	bl	8007398 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066aa:	609a      	str	r2, [r3, #8]
      break;
 80066ac:	e03c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 fdf0 	bl	80072a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2150      	movs	r1, #80	@ 0x50
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fe49 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 80066cc:	e02c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 fe0f 	bl	80072fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2160      	movs	r1, #96	@ 0x60
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fe39 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 80066ec:	e01c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066fa:	461a      	mov	r2, r3
 80066fc:	f000 fdd0 	bl	80072a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2140      	movs	r1, #64	@ 0x40
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fe29 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 800670c:	e00c      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4619      	mov	r1, r3
 8006718:	4610      	mov	r0, r2
 800671a:	f000 fe20 	bl	800735e <TIM_ITRx_SetConfig>
      break;
 800671e:	e003      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	73fb      	strb	r3, [r7, #15]
      break;
 8006724:	e000      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006726:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006738:	7bfb      	ldrb	r3, [r7, #15]
}
 800673a:	4618      	mov	r0, r3
 800673c:	3710      	adds	r7, #16
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	00100070 	.word	0x00100070
 8006748:	00100060 	.word	0x00100060
 800674c:	00100050 	.word	0x00100050
 8006750:	00100040 	.word	0x00100040
 8006754:	00100030 	.word	0x00100030
 8006758:	00100020 	.word	0x00100020

0800675c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	460b      	mov	r3, r1
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d101      	bne.n	8006840 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e14a      	b.n	8006ad6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b01      	cmp	r3, #1
 800684a:	f040 80dd 	bne.w	8006a08 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800684e:	7afb      	ldrb	r3, [r7, #11]
 8006850:	2b1f      	cmp	r3, #31
 8006852:	f200 80d6 	bhi.w	8006a02 <HAL_TIM_RegisterCallback+0x1de>
 8006856:	a201      	add	r2, pc, #4	@ (adr r2, 800685c <HAL_TIM_RegisterCallback+0x38>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	080068dd 	.word	0x080068dd
 8006860:	080068e5 	.word	0x080068e5
 8006864:	080068ed 	.word	0x080068ed
 8006868:	080068f5 	.word	0x080068f5
 800686c:	080068fd 	.word	0x080068fd
 8006870:	08006905 	.word	0x08006905
 8006874:	0800690d 	.word	0x0800690d
 8006878:	08006915 	.word	0x08006915
 800687c:	0800691d 	.word	0x0800691d
 8006880:	08006925 	.word	0x08006925
 8006884:	0800692d 	.word	0x0800692d
 8006888:	08006935 	.word	0x08006935
 800688c:	0800693d 	.word	0x0800693d
 8006890:	08006945 	.word	0x08006945
 8006894:	0800694f 	.word	0x0800694f
 8006898:	08006959 	.word	0x08006959
 800689c:	08006963 	.word	0x08006963
 80068a0:	0800696d 	.word	0x0800696d
 80068a4:	08006977 	.word	0x08006977
 80068a8:	08006981 	.word	0x08006981
 80068ac:	0800698b 	.word	0x0800698b
 80068b0:	08006995 	.word	0x08006995
 80068b4:	0800699f 	.word	0x0800699f
 80068b8:	080069a9 	.word	0x080069a9
 80068bc:	080069b3 	.word	0x080069b3
 80068c0:	080069bd 	.word	0x080069bd
 80068c4:	080069c7 	.word	0x080069c7
 80068c8:	080069d1 	.word	0x080069d1
 80068cc:	080069db 	.word	0x080069db
 80068d0:	080069e5 	.word	0x080069e5
 80068d4:	080069ef 	.word	0x080069ef
 80068d8:	080069f9 	.word	0x080069f9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80068e2:	e0f7      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80068ea:	e0f3      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80068f2:	e0ef      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80068fa:	e0eb      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006902:	e0e7      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800690a:	e0e3      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006912:	e0df      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800691a:	e0db      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006922:	e0d7      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800692a:	e0d3      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006932:	e0cf      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800693a:	e0cb      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006942:	e0c7      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800694c:	e0c2      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8006956:	e0bd      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006960:	e0b8      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800696a:	e0b3      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8006974:	e0ae      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800697e:	e0a9      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006988:	e0a4      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8006992:	e09f      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800699c:	e09a      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80069a6:	e095      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80069b0:	e090      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80069ba:	e08b      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80069c4:	e086      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80069ce:	e081      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80069d8:	e07c      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80069e2:	e077      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80069ec:	e072      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80069f6:	e06d      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8006a00:	e068      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	75fb      	strb	r3, [r7, #23]
        break;
 8006a06:	e065      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d15d      	bne.n	8006ad0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	2b0d      	cmp	r3, #13
 8006a18:	d857      	bhi.n	8006aca <HAL_TIM_RegisterCallback+0x2a6>
 8006a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a20 <HAL_TIM_RegisterCallback+0x1fc>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a59 	.word	0x08006a59
 8006a24:	08006a61 	.word	0x08006a61
 8006a28:	08006a69 	.word	0x08006a69
 8006a2c:	08006a71 	.word	0x08006a71
 8006a30:	08006a79 	.word	0x08006a79
 8006a34:	08006a81 	.word	0x08006a81
 8006a38:	08006a89 	.word	0x08006a89
 8006a3c:	08006a91 	.word	0x08006a91
 8006a40:	08006a99 	.word	0x08006a99
 8006a44:	08006aa1 	.word	0x08006aa1
 8006a48:	08006aa9 	.word	0x08006aa9
 8006a4c:	08006ab1 	.word	0x08006ab1
 8006a50:	08006ab9 	.word	0x08006ab9
 8006a54:	08006ac1 	.word	0x08006ac1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006a5e:	e039      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8006a66:	e035      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006a6e:	e031      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8006a76:	e02d      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006a7e:	e029      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8006a86:	e025      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006a8e:	e021      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006a96:	e01d      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006a9e:	e019      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006aa6:	e015      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006aae:	e011      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006ab6:	e00d      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006abe:	e009      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006ac8:	e004      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
        break;
 8006ace:	e001      	b.n	8006ad4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	371c      	adds	r7, #28
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop

08006ae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a4c      	ldr	r2, [pc, #304]	@ (8006c28 <TIM_Base_SetConfig+0x144>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d017      	beq.n	8006b2c <TIM_Base_SetConfig+0x48>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b02:	d013      	beq.n	8006b2c <TIM_Base_SetConfig+0x48>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a49      	ldr	r2, [pc, #292]	@ (8006c2c <TIM_Base_SetConfig+0x148>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_Base_SetConfig+0x48>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a48      	ldr	r2, [pc, #288]	@ (8006c30 <TIM_Base_SetConfig+0x14c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0x48>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a47      	ldr	r2, [pc, #284]	@ (8006c34 <TIM_Base_SetConfig+0x150>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0x48>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a46      	ldr	r2, [pc, #280]	@ (8006c38 <TIM_Base_SetConfig+0x154>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0x48>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a45      	ldr	r2, [pc, #276]	@ (8006c3c <TIM_Base_SetConfig+0x158>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d108      	bne.n	8006b3e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a39      	ldr	r2, [pc, #228]	@ (8006c28 <TIM_Base_SetConfig+0x144>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d023      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4c:	d01f      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a36      	ldr	r2, [pc, #216]	@ (8006c2c <TIM_Base_SetConfig+0x148>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01b      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a35      	ldr	r2, [pc, #212]	@ (8006c30 <TIM_Base_SetConfig+0x14c>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d017      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a34      	ldr	r2, [pc, #208]	@ (8006c34 <TIM_Base_SetConfig+0x150>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a33      	ldr	r2, [pc, #204]	@ (8006c38 <TIM_Base_SetConfig+0x154>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00f      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a33      	ldr	r2, [pc, #204]	@ (8006c40 <TIM_Base_SetConfig+0x15c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00b      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a32      	ldr	r2, [pc, #200]	@ (8006c44 <TIM_Base_SetConfig+0x160>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d007      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a31      	ldr	r2, [pc, #196]	@ (8006c48 <TIM_Base_SetConfig+0x164>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d003      	beq.n	8006b8e <TIM_Base_SetConfig+0xaa>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a2c      	ldr	r2, [pc, #176]	@ (8006c3c <TIM_Base_SetConfig+0x158>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d108      	bne.n	8006ba0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a18      	ldr	r2, [pc, #96]	@ (8006c28 <TIM_Base_SetConfig+0x144>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <TIM_Base_SetConfig+0x110>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a1a      	ldr	r2, [pc, #104]	@ (8006c38 <TIM_Base_SetConfig+0x154>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00f      	beq.n	8006bf4 <TIM_Base_SetConfig+0x110>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8006c40 <TIM_Base_SetConfig+0x15c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d00b      	beq.n	8006bf4 <TIM_Base_SetConfig+0x110>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a19      	ldr	r2, [pc, #100]	@ (8006c44 <TIM_Base_SetConfig+0x160>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d007      	beq.n	8006bf4 <TIM_Base_SetConfig+0x110>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a18      	ldr	r2, [pc, #96]	@ (8006c48 <TIM_Base_SetConfig+0x164>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d003      	beq.n	8006bf4 <TIM_Base_SetConfig+0x110>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a13      	ldr	r2, [pc, #76]	@ (8006c3c <TIM_Base_SetConfig+0x158>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d103      	bne.n	8006bfc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	691a      	ldr	r2, [r3, #16]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d105      	bne.n	8006c1a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f023 0201 	bic.w	r2, r3, #1
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	611a      	str	r2, [r3, #16]
  }
}
 8006c1a:	bf00      	nop
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40012c00 	.word	0x40012c00
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40013400 	.word	0x40013400
 8006c3c:	40015000 	.word	0x40015000
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40014400 	.word	0x40014400
 8006c48:	40014800 	.word	0x40014800

08006c4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f023 0201 	bic.w	r2, r3, #1
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f023 0302 	bic.w	r3, r3, #2
 8006c98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a30      	ldr	r2, [pc, #192]	@ (8006d68 <TIM_OC1_SetConfig+0x11c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d013      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x88>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a2f      	ldr	r2, [pc, #188]	@ (8006d6c <TIM_OC1_SetConfig+0x120>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d00f      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x88>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8006d70 <TIM_OC1_SetConfig+0x124>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d00b      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x88>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8006d74 <TIM_OC1_SetConfig+0x128>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d007      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x88>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d78 <TIM_OC1_SetConfig+0x12c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC1_SetConfig+0x88>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a2b      	ldr	r2, [pc, #172]	@ (8006d7c <TIM_OC1_SetConfig+0x130>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d10c      	bne.n	8006cee <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f023 0308 	bic.w	r3, r3, #8
 8006cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 0304 	bic.w	r3, r3, #4
 8006cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d68 <TIM_OC1_SetConfig+0x11c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <TIM_OC1_SetConfig+0xd2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d6c <TIM_OC1_SetConfig+0x120>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00f      	beq.n	8006d1e <TIM_OC1_SetConfig+0xd2>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a1b      	ldr	r2, [pc, #108]	@ (8006d70 <TIM_OC1_SetConfig+0x124>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00b      	beq.n	8006d1e <TIM_OC1_SetConfig+0xd2>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a1a      	ldr	r2, [pc, #104]	@ (8006d74 <TIM_OC1_SetConfig+0x128>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d007      	beq.n	8006d1e <TIM_OC1_SetConfig+0xd2>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a19      	ldr	r2, [pc, #100]	@ (8006d78 <TIM_OC1_SetConfig+0x12c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d003      	beq.n	8006d1e <TIM_OC1_SetConfig+0xd2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a18      	ldr	r2, [pc, #96]	@ (8006d7c <TIM_OC1_SetConfig+0x130>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d111      	bne.n	8006d42 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	693a      	ldr	r2, [r7, #16]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	621a      	str	r2, [r3, #32]
}
 8006d5c:	bf00      	nop
 8006d5e:	371c      	adds	r7, #28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40013400 	.word	0x40013400
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40014400 	.word	0x40014400
 8006d78:	40014800 	.word	0x40014800
 8006d7c:	40015000 	.word	0x40015000

08006d80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	f023 0210 	bic.w	r2, r3, #16
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f023 0320 	bic.w	r3, r3, #32
 8006dce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	011b      	lsls	r3, r3, #4
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a2c      	ldr	r2, [pc, #176]	@ (8006e90 <TIM_OC2_SetConfig+0x110>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_OC2_SetConfig+0x74>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a2b      	ldr	r2, [pc, #172]	@ (8006e94 <TIM_OC2_SetConfig+0x114>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_OC2_SetConfig+0x74>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a2a      	ldr	r2, [pc, #168]	@ (8006e98 <TIM_OC2_SetConfig+0x118>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d10d      	bne.n	8006e10 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	011b      	lsls	r3, r3, #4
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a1f      	ldr	r2, [pc, #124]	@ (8006e90 <TIM_OC2_SetConfig+0x110>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <TIM_OC2_SetConfig+0xc0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8006e94 <TIM_OC2_SetConfig+0x114>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00f      	beq.n	8006e40 <TIM_OC2_SetConfig+0xc0>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1e      	ldr	r2, [pc, #120]	@ (8006e9c <TIM_OC2_SetConfig+0x11c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <TIM_OC2_SetConfig+0xc0>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ea0 <TIM_OC2_SetConfig+0x120>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d007      	beq.n	8006e40 <TIM_OC2_SetConfig+0xc0>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a1c      	ldr	r2, [pc, #112]	@ (8006ea4 <TIM_OC2_SetConfig+0x124>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_OC2_SetConfig+0xc0>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <TIM_OC2_SetConfig+0x118>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d113      	bne.n	8006e68 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	699b      	ldr	r3, [r3, #24]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	693a      	ldr	r2, [r7, #16]
 8006e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	40012c00 	.word	0x40012c00
 8006e94:	40013400 	.word	0x40013400
 8006e98:	40015000 	.word	0x40015000
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0303 	bic.w	r3, r3, #3
 8006ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	021b      	lsls	r3, r3, #8
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb4 <TIM_OC3_SetConfig+0x10c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d007      	beq.n	8006f1a <TIM_OC3_SetConfig+0x72>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8006fb8 <TIM_OC3_SetConfig+0x110>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_OC3_SetConfig+0x72>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a29      	ldr	r2, [pc, #164]	@ (8006fbc <TIM_OC3_SetConfig+0x114>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10d      	bne.n	8006f36 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1e      	ldr	r2, [pc, #120]	@ (8006fb4 <TIM_OC3_SetConfig+0x10c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d013      	beq.n	8006f66 <TIM_OC3_SetConfig+0xbe>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb8 <TIM_OC3_SetConfig+0x110>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00f      	beq.n	8006f66 <TIM_OC3_SetConfig+0xbe>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <TIM_OC3_SetConfig+0x118>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d00b      	beq.n	8006f66 <TIM_OC3_SetConfig+0xbe>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc4 <TIM_OC3_SetConfig+0x11c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d007      	beq.n	8006f66 <TIM_OC3_SetConfig+0xbe>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc8 <TIM_OC3_SetConfig+0x120>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d003      	beq.n	8006f66 <TIM_OC3_SetConfig+0xbe>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a16      	ldr	r2, [pc, #88]	@ (8006fbc <TIM_OC3_SetConfig+0x114>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d113      	bne.n	8006f8e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	693a      	ldr	r2, [r7, #16]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	011b      	lsls	r3, r3, #4
 8006f88:	693a      	ldr	r2, [r7, #16]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	621a      	str	r2, [r3, #32]
}
 8006fa8:	bf00      	nop
 8006faa:	371c      	adds	r7, #28
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40013400 	.word	0x40013400
 8006fbc:	40015000 	.word	0x40015000
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a1b      	ldr	r3, [r3, #32]
 8006fe0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ffa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	021b      	lsls	r3, r3, #8
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800701a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	031b      	lsls	r3, r3, #12
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a2c      	ldr	r2, [pc, #176]	@ (80070dc <TIM_OC4_SetConfig+0x110>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d007      	beq.n	8007040 <TIM_OC4_SetConfig+0x74>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a2b      	ldr	r2, [pc, #172]	@ (80070e0 <TIM_OC4_SetConfig+0x114>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d003      	beq.n	8007040 <TIM_OC4_SetConfig+0x74>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	4a2a      	ldr	r2, [pc, #168]	@ (80070e4 <TIM_OC4_SetConfig+0x118>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10d      	bne.n	800705c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800705a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a1f      	ldr	r2, [pc, #124]	@ (80070dc <TIM_OC4_SetConfig+0x110>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <TIM_OC4_SetConfig+0xc0>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a1e      	ldr	r2, [pc, #120]	@ (80070e0 <TIM_OC4_SetConfig+0x114>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00f      	beq.n	800708c <TIM_OC4_SetConfig+0xc0>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a1e      	ldr	r2, [pc, #120]	@ (80070e8 <TIM_OC4_SetConfig+0x11c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00b      	beq.n	800708c <TIM_OC4_SetConfig+0xc0>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a1d      	ldr	r2, [pc, #116]	@ (80070ec <TIM_OC4_SetConfig+0x120>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d007      	beq.n	800708c <TIM_OC4_SetConfig+0xc0>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a1c      	ldr	r2, [pc, #112]	@ (80070f0 <TIM_OC4_SetConfig+0x124>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC4_SetConfig+0xc0>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a17      	ldr	r2, [pc, #92]	@ (80070e4 <TIM_OC4_SetConfig+0x118>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d113      	bne.n	80070b4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007092:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800709a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	019b      	lsls	r3, r3, #6
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	019b      	lsls	r3, r3, #6
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40013400 	.word	0x40013400
 80070e4:	40015000 	.word	0x40015000
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800

080070f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1b      	ldr	r3, [r3, #32]
 8007108:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	4313      	orrs	r3, r2
 8007130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	4313      	orrs	r3, r2
 8007144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a19      	ldr	r2, [pc, #100]	@ (80071b0 <TIM_OC5_SetConfig+0xbc>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <TIM_OC5_SetConfig+0x82>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a18      	ldr	r2, [pc, #96]	@ (80071b4 <TIM_OC5_SetConfig+0xc0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00f      	beq.n	8007176 <TIM_OC5_SetConfig+0x82>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a17      	ldr	r2, [pc, #92]	@ (80071b8 <TIM_OC5_SetConfig+0xc4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00b      	beq.n	8007176 <TIM_OC5_SetConfig+0x82>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a16      	ldr	r2, [pc, #88]	@ (80071bc <TIM_OC5_SetConfig+0xc8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d007      	beq.n	8007176 <TIM_OC5_SetConfig+0x82>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a15      	ldr	r2, [pc, #84]	@ (80071c0 <TIM_OC5_SetConfig+0xcc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_OC5_SetConfig+0x82>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a14      	ldr	r2, [pc, #80]	@ (80071c4 <TIM_OC5_SetConfig+0xd0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d109      	bne.n	800718a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800717c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	685a      	ldr	r2, [r3, #4]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	621a      	str	r2, [r3, #32]
}
 80071a4:	bf00      	nop
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	40012c00 	.word	0x40012c00
 80071b4:	40013400 	.word	0x40013400
 80071b8:	40014000 	.word	0x40014000
 80071bc:	40014400 	.word	0x40014400
 80071c0:	40014800 	.word	0x40014800
 80071c4:	40015000 	.word	0x40015000

080071c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	4313      	orrs	r3, r2
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800720e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	051b      	lsls	r3, r3, #20
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4313      	orrs	r3, r2
 800721a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a1a      	ldr	r2, [pc, #104]	@ (8007288 <TIM_OC6_SetConfig+0xc0>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d013      	beq.n	800724c <TIM_OC6_SetConfig+0x84>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a19      	ldr	r2, [pc, #100]	@ (800728c <TIM_OC6_SetConfig+0xc4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d00f      	beq.n	800724c <TIM_OC6_SetConfig+0x84>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a18      	ldr	r2, [pc, #96]	@ (8007290 <TIM_OC6_SetConfig+0xc8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00b      	beq.n	800724c <TIM_OC6_SetConfig+0x84>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a17      	ldr	r2, [pc, #92]	@ (8007294 <TIM_OC6_SetConfig+0xcc>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d007      	beq.n	800724c <TIM_OC6_SetConfig+0x84>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a16      	ldr	r2, [pc, #88]	@ (8007298 <TIM_OC6_SetConfig+0xd0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d003      	beq.n	800724c <TIM_OC6_SetConfig+0x84>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a15      	ldr	r2, [pc, #84]	@ (800729c <TIM_OC6_SetConfig+0xd4>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d109      	bne.n	8007260 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007252:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	029b      	lsls	r3, r3, #10
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	621a      	str	r2, [r3, #32]
}
 800727a:	bf00      	nop
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40012c00 	.word	0x40012c00
 800728c:	40013400 	.word	0x40013400
 8007290:	40014000 	.word	0x40014000
 8007294:	40014400 	.word	0x40014400
 8007298:	40014800 	.word	0x40014800
 800729c:	40015000 	.word	0x40015000

080072a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f023 0201 	bic.w	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 030a 	bic.w	r3, r3, #10
 80072dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	621a      	str	r2, [r3, #32]
}
 80072f2:	bf00      	nop
 80072f4:	371c      	adds	r7, #28
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072fe:	b480      	push	{r7}
 8007300:	b087      	sub	sp, #28
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f023 0210 	bic.w	r2, r3, #16
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	031b      	lsls	r3, r3, #12
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800733a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	621a      	str	r2, [r3, #32]
}
 8007352:	bf00      	nop
 8007354:	371c      	adds	r7, #28
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
 8007366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	f043 0307 	orr.w	r3, r3, #7
 8007384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	609a      	str	r2, [r3, #8]
}
 800738c:	bf00      	nop
 800738e:	3714      	adds	r7, #20
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	607a      	str	r2, [r7, #4]
 80073a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	021a      	lsls	r2, r3, #8
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	4313      	orrs	r3, r2
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	609a      	str	r2, [r3, #8]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073d8:	b480      	push	{r7}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f003 031f 	and.w	r3, r3, #31
 80073ea:	2201      	movs	r2, #1
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a1a      	ldr	r2, [r3, #32]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	43db      	mvns	r3, r3
 80073fa:	401a      	ands	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6a1a      	ldr	r2, [r3, #32]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f003 031f 	and.w	r3, r3, #31
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	fa01 f303 	lsl.w	r3, r1, r3
 8007410:	431a      	orrs	r2, r3
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a26      	ldr	r2, [pc, #152]	@ (80074c8 <TIM_ResetCallback+0xa4>)
 8007430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a25      	ldr	r2, [pc, #148]	@ (80074cc <TIM_ResetCallback+0xa8>)
 8007438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a24      	ldr	r2, [pc, #144]	@ (80074d0 <TIM_ResetCallback+0xac>)
 8007440:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a23      	ldr	r2, [pc, #140]	@ (80074d4 <TIM_ResetCallback+0xb0>)
 8007448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a22      	ldr	r2, [pc, #136]	@ (80074d8 <TIM_ResetCallback+0xb4>)
 8007450:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a21      	ldr	r2, [pc, #132]	@ (80074dc <TIM_ResetCallback+0xb8>)
 8007458:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a20      	ldr	r2, [pc, #128]	@ (80074e0 <TIM_ResetCallback+0xbc>)
 8007460:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a1f      	ldr	r2, [pc, #124]	@ (80074e4 <TIM_ResetCallback+0xc0>)
 8007468:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a1e      	ldr	r2, [pc, #120]	@ (80074e8 <TIM_ResetCallback+0xc4>)
 8007470:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <TIM_ResetCallback+0xc8>)
 8007478:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1c      	ldr	r2, [pc, #112]	@ (80074f0 <TIM_ResetCallback+0xcc>)
 8007480:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1b      	ldr	r2, [pc, #108]	@ (80074f4 <TIM_ResetCallback+0xd0>)
 8007488:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a1a      	ldr	r2, [pc, #104]	@ (80074f8 <TIM_ResetCallback+0xd4>)
 8007490:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a19      	ldr	r2, [pc, #100]	@ (80074fc <TIM_ResetCallback+0xd8>)
 8007498:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <TIM_ResetCallback+0xdc>)
 80074a0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a17      	ldr	r2, [pc, #92]	@ (8007504 <TIM_ResetCallback+0xe0>)
 80074a8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a16      	ldr	r2, [pc, #88]	@ (8007508 <TIM_ResetCallback+0xe4>)
 80074b0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a15      	ldr	r2, [pc, #84]	@ (800750c <TIM_ResetCallback+0xe8>)
 80074b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	0800675d 	.word	0x0800675d
 80074cc:	08006771 	.word	0x08006771
 80074d0:	080067e9 	.word	0x080067e9
 80074d4:	080067fd 	.word	0x080067fd
 80074d8:	08006799 	.word	0x08006799
 80074dc:	080067ad 	.word	0x080067ad
 80074e0:	08006785 	.word	0x08006785
 80074e4:	080067c1 	.word	0x080067c1
 80074e8:	080067d5 	.word	0x080067d5
 80074ec:	08006811 	.word	0x08006811
 80074f0:	08007765 	.word	0x08007765
 80074f4:	08007779 	.word	0x08007779
 80074f8:	0800778d 	.word	0x0800778d
 80074fc:	080077a1 	.word	0x080077a1
 8007500:	080077b5 	.word	0x080077b5
 8007504:	080077c9 	.word	0x080077c9
 8007508:	080077dd 	.word	0x080077dd
 800750c:	080077f1 	.word	0x080077f1

08007510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007524:	2302      	movs	r3, #2
 8007526:	e074      	b.n	8007612 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2202      	movs	r2, #2
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a34      	ldr	r2, [pc, #208]	@ (8007620 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d009      	beq.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a33      	ldr	r2, [pc, #204]	@ (8007624 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a31      	ldr	r2, [pc, #196]	@ (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d108      	bne.n	8007578 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800756c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800757e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a21      	ldr	r2, [pc, #132]	@ (8007620 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d022      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075a8:	d01d      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a1f      	ldr	r2, [pc, #124]	@ (800762c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d018      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007630 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d013      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007634 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00e      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a15      	ldr	r2, [pc, #84]	@ (8007624 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d009      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d004      	beq.n	80075e6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a11      	ldr	r2, [pc, #68]	@ (8007628 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d10c      	bne.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3714      	adds	r7, #20
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40012c00 	.word	0x40012c00
 8007624:	40013400 	.word	0x40013400
 8007628:	40015000 	.word	0x40015000
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	40014000 	.word	0x40014000

0800763c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007654:	2302      	movs	r3, #2
 8007656:	e078      	b.n	800774a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	041b      	lsls	r3, r3, #16
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007758 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d009      	beq.n	80076fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1b      	ldr	r2, [pc, #108]	@ (800775c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d004      	beq.n	80076fe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a19      	ldr	r2, [pc, #100]	@ (8007760 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d11c      	bne.n	8007738 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	051b      	lsls	r3, r3, #20
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	6a1b      	ldr	r3, [r3, #32]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007726:	4313      	orrs	r3, r2
 8007728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40012c00 	.word	0x40012c00
 800775c:	40013400 	.word	0x40013400
 8007760:	40015000 	.word	0x40015000

08007764 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e050      	b.n	80078b8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800781c:	2b00      	cmp	r3, #0
 800781e:	d114      	bne.n	800784a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fe37 	bl	800849c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007834:	2b00      	cmp	r3, #0
 8007836:	d103      	bne.n	8007840 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a21      	ldr	r2, [pc, #132]	@ (80078c0 <HAL_UART_Init+0xbc>)
 800783c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2224      	movs	r2, #36	@ 0x24
 800784e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0201 	bic.w	r2, r2, #1
 8007860:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007866:	2b00      	cmp	r3, #0
 8007868:	d002      	beq.n	8007870 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 f964 	bl	8008b38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fe65 	bl	8008540 <UART_SetConfig>
 8007876:	4603      	mov	r3, r0
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e01b      	b.n	80078b8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685a      	ldr	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800788e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800789e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0201 	orr.w	r2, r2, #1
 80078ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f9e3 	bl	8008c7c <UART_CheckIdleState>
 80078b6:	4603      	mov	r3, r0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	08002571 	.word	0x08002571

080078c4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b087      	sub	sp, #28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	460b      	mov	r3, r1
 80078ce:	607a      	str	r2, [r7, #4]
 80078d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d109      	bne.n	80078f0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e09c      	b.n	8007a2a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078f6:	2b20      	cmp	r3, #32
 80078f8:	d16c      	bne.n	80079d4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	2b0c      	cmp	r3, #12
 80078fe:	d85e      	bhi.n	80079be <HAL_UART_RegisterCallback+0xfa>
 8007900:	a201      	add	r2, pc, #4	@ (adr r2, 8007908 <HAL_UART_RegisterCallback+0x44>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800793d 	.word	0x0800793d
 800790c:	08007947 	.word	0x08007947
 8007910:	08007951 	.word	0x08007951
 8007914:	0800795b 	.word	0x0800795b
 8007918:	08007965 	.word	0x08007965
 800791c:	0800796f 	.word	0x0800796f
 8007920:	08007979 	.word	0x08007979
 8007924:	08007983 	.word	0x08007983
 8007928:	0800798d 	.word	0x0800798d
 800792c:	08007997 	.word	0x08007997
 8007930:	080079a1 	.word	0x080079a1
 8007934:	080079ab 	.word	0x080079ab
 8007938:	080079b5 	.word	0x080079b5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007944:	e070      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800794e:	e06b      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007958:	e066      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007962:	e061      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800796c:	e05c      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007976:	e057      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007980:	e052      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800798a:	e04d      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007994:	e048      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800799e:	e043      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80079a8:	e03e      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80079b2:	e039      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80079bc:	e034      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079c4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	75fb      	strb	r3, [r7, #23]
        break;
 80079d2:	e029      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d11a      	bne.n	8007a14 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	2b0b      	cmp	r3, #11
 80079e2:	d002      	beq.n	80079ea <HAL_UART_RegisterCallback+0x126>
 80079e4:	2b0c      	cmp	r3, #12
 80079e6:	d005      	beq.n	80079f4 <HAL_UART_RegisterCallback+0x130>
 80079e8:	e009      	b.n	80079fe <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80079f2:	e019      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80079fc:	e014      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	75fb      	strb	r3, [r7, #23]
        break;
 8007a12:	e009      	b.n	8007a28 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop

08007a38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	@ 0x28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a4c:	2b20      	cmp	r3, #32
 8007a4e:	d137      	bne.n	8007ac0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d002      	beq.n	8007a5c <HAL_UART_Receive_IT+0x24>
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e030      	b.n	8007ac2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_UART_Receive_IT+0x94>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d01f      	beq.n	8007ab0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d018      	beq.n	8007ab0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	623b      	str	r3, [r7, #32]
 8007a9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	69f9      	ldr	r1, [r7, #28]
 8007aa2:	6a3a      	ldr	r2, [r7, #32]
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e6      	bne.n	8007a7e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f001 f9f8 	bl	8008eac <UART_Start_Receive_IT>
 8007abc:	4603      	mov	r3, r0
 8007abe:	e000      	b.n	8007ac2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ac0:	2302      	movs	r3, #2
  }
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3728      	adds	r7, #40	@ 0x28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	40008000 	.word	0x40008000

08007ad0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08a      	sub	sp, #40	@ 0x28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d167      	bne.n	8007bb8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_UART_Transmit_DMA+0x24>
 8007aee:	88fb      	ldrh	r3, [r7, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d101      	bne.n	8007af8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e060      	b.n	8007bba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68ba      	ldr	r2, [r7, #8]
 8007afc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	88fa      	ldrh	r2, [r7, #6]
 8007b02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	88fa      	ldrh	r2, [r7, #6]
 8007b0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2221      	movs	r2, #33	@ 0x21
 8007b1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d028      	beq.n	8007b78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b2a:	4a26      	ldr	r2, [pc, #152]	@ (8007bc4 <HAL_UART_Transmit_DMA+0xf4>)
 8007b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b32:	4a25      	ldr	r2, [pc, #148]	@ (8007bc8 <HAL_UART_Transmit_DMA+0xf8>)
 8007b34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b3a:	4a24      	ldr	r2, [pc, #144]	@ (8007bcc <HAL_UART_Transmit_DMA+0xfc>)
 8007b3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b42:	2200      	movs	r2, #0
 8007b44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b4e:	4619      	mov	r1, r3
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3328      	adds	r3, #40	@ 0x28
 8007b56:	461a      	mov	r2, r3
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	f7fc f979 	bl	8003e50 <HAL_DMA_Start_IT>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2210      	movs	r2, #16
 8007b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e020      	b.n	8007bba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2240      	movs	r2, #64	@ 0x40
 8007b7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	3308      	adds	r3, #8
 8007b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba0:	623a      	str	r2, [r7, #32]
 8007ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	69f9      	ldr	r1, [r7, #28]
 8007ba6:	6a3a      	ldr	r2, [r7, #32]
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e5      	bne.n	8007b80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e000      	b.n	8007bba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007bb8:	2302      	movs	r3, #2
  }
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3728      	adds	r7, #40	@ 0x28
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	0800923f 	.word	0x0800923f
 8007bc8:	080092dd 	.word	0x080092dd
 8007bcc:	080092fd 	.word	0x080092fd

08007bd0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b09a      	sub	sp, #104	@ 0x68
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007be8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bec:	667b      	str	r3, [r7, #100]	@ 0x64
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bf6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bf8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007bfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e6      	bne.n	8007bd8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c20:	f023 0301 	bic.w	r3, r3, #1
 8007c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	3308      	adds	r3, #8
 8007c2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007c2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c36:	e841 2300 	strex	r3, r2, [r1]
 8007c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1e3      	bne.n	8007c0a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d118      	bne.n	8007c7c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f023 0310 	bic.w	r3, r3, #16
 8007c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	461a      	mov	r2, r3
 8007c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c6a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e6      	bne.n	8007c4a <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c86:	2b40      	cmp	r3, #64	@ 0x40
 8007c88:	d13b      	bne.n	8007d02 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3308      	adds	r3, #8
 8007c90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	e853 3f00 	ldrex	r3, [r3]
 8007c98:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ca0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007caa:	61ba      	str	r2, [r7, #24]
 8007cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6979      	ldr	r1, [r7, #20]
 8007cb0:	69ba      	ldr	r2, [r7, #24]
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e5      	bne.n	8007c8a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d01c      	beq.n	8007d02 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cce:	2200      	movs	r2, #0
 8007cd0:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fc f934 	bl	8003f46 <HAL_DMA_Abort>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00e      	beq.n	8007d02 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fc fa9a 	bl	8004224 <HAL_DMA_GetError>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b20      	cmp	r3, #32
 8007cf4:	d105      	bne.n	8007d02 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2210      	movs	r2, #16
 8007cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e017      	b.n	8007d32 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	220f      	movs	r2, #15
 8007d10:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	699a      	ldr	r2, [r3, #24]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0208 	orr.w	r2, r2, #8
 8007d20:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3768      	adds	r7, #104	@ 0x68
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b0ba      	sub	sp, #232	@ 0xe8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11b      	bne.n	8007db0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d015      	beq.n	8007db0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d105      	bne.n	8007d9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d009      	beq.n	8007db0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8312 	beq.w	80083ca <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	4798      	blx	r3
      }
      return;
 8007dae:	e30c      	b.n	80083ca <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8129 	beq.w	800800c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007dba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007dbe:	4b90      	ldr	r3, [pc, #576]	@ (8008000 <HAL_UART_IRQHandler+0x2c4>)
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d106      	bne.n	8007dd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007dc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007dca:	4b8e      	ldr	r3, [pc, #568]	@ (8008004 <HAL_UART_IRQHandler+0x2c8>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 811c 	beq.w	800800c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d011      	beq.n	8007e04 <HAL_UART_IRQHandler+0xc8>
 8007de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00b      	beq.n	8007e04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2201      	movs	r2, #1
 8007df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfa:	f043 0201 	orr.w	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d011      	beq.n	8007e34 <HAL_UART_IRQHandler+0xf8>
 8007e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2202      	movs	r2, #2
 8007e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e2a:	f043 0204 	orr.w	r2, r3, #4
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e38:	f003 0304 	and.w	r3, r3, #4
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d011      	beq.n	8007e64 <HAL_UART_IRQHandler+0x128>
 8007e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00b      	beq.n	8007e64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2204      	movs	r2, #4
 8007e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e5a:	f043 0202 	orr.w	r2, r3, #2
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d017      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d105      	bne.n	8007e88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e80:	4b5f      	ldr	r3, [pc, #380]	@ (8008000 <HAL_UART_IRQHandler+0x2c4>)
 8007e82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e96:	f043 0208 	orr.w	r2, r3, #8
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d012      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x196>
 8007eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00c      	beq.n	8007ed2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ec8:	f043 0220 	orr.w	r2, r3, #32
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 8278 	beq.w	80083ce <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d013      	beq.n	8007f12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eee:	f003 0320 	and.w	r3, r3, #32
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d007      	beq.n	8007f12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f26:	2b40      	cmp	r3, #64	@ 0x40
 8007f28:	d005      	beq.n	8007f36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007f2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d058      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f001 f91b 	bl	8009172 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f46:	2b40      	cmp	r3, #64	@ 0x40
 8007f48:	d148      	bne.n	8007fdc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	3308      	adds	r3, #8
 8007f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3308      	adds	r3, #8
 8007f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f86:	e841 2300 	strex	r3, r2, [r1]
 8007f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1d9      	bne.n	8007f4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d017      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa6:	4a18      	ldr	r2, [pc, #96]	@ (8008008 <HAL_UART_IRQHandler+0x2cc>)
 8007fa8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fc f821 	bl	8003ff8 <HAL_DMA_Abort_IT>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01f      	beq.n	8007ffc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007fca:	4610      	mov	r0, r2
 8007fcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fce:	e015      	b.n	8007ffc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fda:	e00f      	b.n	8007ffc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe6:	e009      	b.n	8007ffc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007ffa:	e1e8      	b.n	80083ce <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	bf00      	nop
    return;
 8007ffe:	e1e6      	b.n	80083ce <HAL_UART_IRQHandler+0x692>
 8008000:	10000001 	.word	0x10000001
 8008004:	04000120 	.word	0x04000120
 8008008:	08009381 	.word	0x08009381

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008010:	2b01      	cmp	r3, #1
 8008012:	f040 8176 	bne.w	8008302 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800801a:	f003 0310 	and.w	r3, r3, #16
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 816f 	beq.w	8008302 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008028:	f003 0310 	and.w	r3, r3, #16
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8168 	beq.w	8008302 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2210      	movs	r2, #16
 8008038:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008044:	2b40      	cmp	r3, #64	@ 0x40
 8008046:	f040 80dc 	bne.w	8008202 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80b1 	beq.w	80081c4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800806c:	429a      	cmp	r2, r3
 800806e:	f080 80a9 	bcs.w	80081c4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008078:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	2b00      	cmp	r3, #0
 800808c:	f040 8087 	bne.w	800819e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008098:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80080a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80080a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	461a      	mov	r2, r3
 80080b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80080ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80080c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80080ca:	e841 2300 	strex	r3, r2, [r1]
 80080ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80080d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1da      	bne.n	8008090 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3308      	adds	r3, #8
 80080e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80080ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80080ec:	f023 0301 	bic.w	r3, r3, #1
 80080f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3308      	adds	r3, #8
 80080fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008102:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008106:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800810a:	e841 2300 	strex	r3, r2, [r1]
 800810e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1e1      	bne.n	80080da <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800812c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800813a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800813c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008140:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e3      	bne.n	8008116 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800816a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800816c:	f023 0310 	bic.w	r3, r3, #16
 8008170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800817e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008180:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800818c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e4      	bne.n	800815c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008198:	4618      	mov	r0, r3
 800819a:	f7fb fed4 	bl	8003f46 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2202      	movs	r2, #2
 80081a2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80081b6:	b292      	uxth	r2, r2
 80081b8:	1a8a      	subs	r2, r1, r2
 80081ba:	b292      	uxth	r2, r2
 80081bc:	4611      	mov	r1, r2
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80081c2:	e106      	b.n	80083d2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80081ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80081ce:	429a      	cmp	r2, r3
 80081d0:	f040 80ff 	bne.w	80083d2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	f040 80f5 	bne.w	80083d2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80081fa:	4611      	mov	r1, r2
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
      return;
 8008200:	e0e7      	b.n	80083d2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800820e:	b29b      	uxth	r3, r3
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800821c:	b29b      	uxth	r3, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 80d9 	beq.w	80083d6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8008224:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 80d4 	beq.w	80083d6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800823c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008242:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008250:	647b      	str	r3, [r7, #68]	@ 0x44
 8008252:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008256:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800825e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e4      	bne.n	800822e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3308      	adds	r3, #8
 800826a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	e853 3f00 	ldrex	r3, [r3]
 8008272:	623b      	str	r3, [r7, #32]
   return(result);
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800827a:	f023 0301 	bic.w	r3, r3, #1
 800827e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3308      	adds	r3, #8
 8008288:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800828c:	633a      	str	r2, [r7, #48]	@ 0x30
 800828e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008292:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e1      	bne.n	8008264 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f023 0310 	bic.w	r3, r3, #16
 80082c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	461a      	mov	r2, r3
 80082d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80082d6:	61fb      	str	r3, [r7, #28]
 80082d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	69b9      	ldr	r1, [r7, #24]
 80082dc:	69fa      	ldr	r2, [r7, #28]
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	617b      	str	r3, [r7, #20]
   return(result);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e4      	bne.n	80082b4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2202      	movs	r2, #2
 80082ee:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80082f6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80082fa:	4611      	mov	r1, r2
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008300:	e069      	b.n	80083d6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d010      	beq.n	8008330 <HAL_UART_IRQHandler+0x5f4>
 800830e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008322:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800832e:	e055      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008338:	2b00      	cmp	r3, #0
 800833a:	d014      	beq.n	8008366 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800833c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008344:	2b00      	cmp	r3, #0
 8008346:	d105      	bne.n	8008354 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800834c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d008      	beq.n	8008366 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008358:	2b00      	cmp	r3, #0
 800835a:	d03e      	beq.n	80083da <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	4798      	blx	r3
    }
    return;
 8008364:	e039      	b.n	80083da <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800836a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <HAL_UART_IRQHandler+0x64a>
 8008372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837a:	2b00      	cmp	r3, #0
 800837c:	d003      	beq.n	8008386 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 f812 	bl	80093a8 <UART_EndTransmit_IT>
    return;
 8008384:	e02a      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800838a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <HAL_UART_IRQHandler+0x66e>
 8008392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008396:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d005      	beq.n	80083aa <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083a8:	e018      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80083aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d012      	beq.n	80083dc <HAL_UART_IRQHandler+0x6a0>
 80083b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	da0e      	bge.n	80083dc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083c8:	e008      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
      return;
 80083ca:	bf00      	nop
 80083cc:	e006      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
    return;
 80083ce:	bf00      	nop
 80083d0:	e004      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
      return;
 80083d2:	bf00      	nop
 80083d4:	e002      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
      return;
 80083d6:	bf00      	nop
 80083d8:	e000      	b.n	80083dc <HAL_UART_IRQHandler+0x6a0>
    return;
 80083da:	bf00      	nop
  }
}
 80083dc:	37e8      	adds	r7, #232	@ 0xe8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop

080083e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008510 <UART_InitCallbacksToDefault+0x74>)
 80084a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a19      	ldr	r2, [pc, #100]	@ (8008514 <UART_InitCallbacksToDefault+0x78>)
 80084b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a18      	ldr	r2, [pc, #96]	@ (8008518 <UART_InitCallbacksToDefault+0x7c>)
 80084b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	4a17      	ldr	r2, [pc, #92]	@ (800851c <UART_InitCallbacksToDefault+0x80>)
 80084c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a16      	ldr	r2, [pc, #88]	@ (8008520 <UART_InitCallbacksToDefault+0x84>)
 80084c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a15      	ldr	r2, [pc, #84]	@ (8008524 <UART_InitCallbacksToDefault+0x88>)
 80084d0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4a14      	ldr	r2, [pc, #80]	@ (8008528 <UART_InitCallbacksToDefault+0x8c>)
 80084d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	4a13      	ldr	r2, [pc, #76]	@ (800852c <UART_InitCallbacksToDefault+0x90>)
 80084e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a12      	ldr	r2, [pc, #72]	@ (8008530 <UART_InitCallbacksToDefault+0x94>)
 80084e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a11      	ldr	r2, [pc, #68]	@ (8008534 <UART_InitCallbacksToDefault+0x98>)
 80084f0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a10      	ldr	r2, [pc, #64]	@ (8008538 <UART_InitCallbacksToDefault+0x9c>)
 80084f8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a0f      	ldr	r2, [pc, #60]	@ (800853c <UART_InitCallbacksToDefault+0xa0>)
 8008500:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	080083f9 	.word	0x080083f9
 8008514:	080083e5 	.word	0x080083e5
 8008518:	08008421 	.word	0x08008421
 800851c:	0800840d 	.word	0x0800840d
 8008520:	08008435 	.word	0x08008435
 8008524:	08008449 	.word	0x08008449
 8008528:	0800845d 	.word	0x0800845d
 800852c:	08008471 	.word	0x08008471
 8008530:	08009e6d 	.word	0x08009e6d
 8008534:	08009e81 	.word	0x08009e81
 8008538:	08009e95 	.word	0x08009e95
 800853c:	08008485 	.word	0x08008485

08008540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008544:	b08c      	sub	sp, #48	@ 0x30
 8008546:	af00      	add	r7, sp, #0
 8008548:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	431a      	orrs	r2, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	431a      	orrs	r2, r3
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	69db      	ldr	r3, [r3, #28]
 8008564:	4313      	orrs	r3, r2
 8008566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4baa      	ldr	r3, [pc, #680]	@ (8008818 <UART_SetConfig+0x2d8>)
 8008570:	4013      	ands	r3, r2
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	6812      	ldr	r2, [r2, #0]
 8008576:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008578:	430b      	orrs	r3, r1
 800857a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	68da      	ldr	r2, [r3, #12]
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a9f      	ldr	r2, [pc, #636]	@ (800881c <UART_SetConfig+0x2dc>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d004      	beq.n	80085ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085a8:	4313      	orrs	r3, r2
 80085aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80085b6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	6812      	ldr	r2, [r2, #0]
 80085be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085c0:	430b      	orrs	r3, r1
 80085c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ca:	f023 010f 	bic.w	r1, r3, #15
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a90      	ldr	r2, [pc, #576]	@ (8008820 <UART_SetConfig+0x2e0>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d125      	bne.n	8008630 <UART_SetConfig+0xf0>
 80085e4:	4b8f      	ldr	r3, [pc, #572]	@ (8008824 <UART_SetConfig+0x2e4>)
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d81a      	bhi.n	8008628 <UART_SetConfig+0xe8>
 80085f2:	a201      	add	r2, pc, #4	@ (adr r2, 80085f8 <UART_SetConfig+0xb8>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008609 	.word	0x08008609
 80085fc:	08008619 	.word	0x08008619
 8008600:	08008611 	.word	0x08008611
 8008604:	08008621 	.word	0x08008621
 8008608:	2301      	movs	r3, #1
 800860a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800860e:	e116      	b.n	800883e <UART_SetConfig+0x2fe>
 8008610:	2302      	movs	r3, #2
 8008612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008616:	e112      	b.n	800883e <UART_SetConfig+0x2fe>
 8008618:	2304      	movs	r3, #4
 800861a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800861e:	e10e      	b.n	800883e <UART_SetConfig+0x2fe>
 8008620:	2308      	movs	r3, #8
 8008622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008626:	e10a      	b.n	800883e <UART_SetConfig+0x2fe>
 8008628:	2310      	movs	r3, #16
 800862a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800862e:	e106      	b.n	800883e <UART_SetConfig+0x2fe>
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a7c      	ldr	r2, [pc, #496]	@ (8008828 <UART_SetConfig+0x2e8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d138      	bne.n	80086ac <UART_SetConfig+0x16c>
 800863a:	4b7a      	ldr	r3, [pc, #488]	@ (8008824 <UART_SetConfig+0x2e4>)
 800863c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008640:	f003 030c 	and.w	r3, r3, #12
 8008644:	2b0c      	cmp	r3, #12
 8008646:	d82d      	bhi.n	80086a4 <UART_SetConfig+0x164>
 8008648:	a201      	add	r2, pc, #4	@ (adr r2, 8008650 <UART_SetConfig+0x110>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008685 	.word	0x08008685
 8008654:	080086a5 	.word	0x080086a5
 8008658:	080086a5 	.word	0x080086a5
 800865c:	080086a5 	.word	0x080086a5
 8008660:	08008695 	.word	0x08008695
 8008664:	080086a5 	.word	0x080086a5
 8008668:	080086a5 	.word	0x080086a5
 800866c:	080086a5 	.word	0x080086a5
 8008670:	0800868d 	.word	0x0800868d
 8008674:	080086a5 	.word	0x080086a5
 8008678:	080086a5 	.word	0x080086a5
 800867c:	080086a5 	.word	0x080086a5
 8008680:	0800869d 	.word	0x0800869d
 8008684:	2300      	movs	r3, #0
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800868a:	e0d8      	b.n	800883e <UART_SetConfig+0x2fe>
 800868c:	2302      	movs	r3, #2
 800868e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008692:	e0d4      	b.n	800883e <UART_SetConfig+0x2fe>
 8008694:	2304      	movs	r3, #4
 8008696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800869a:	e0d0      	b.n	800883e <UART_SetConfig+0x2fe>
 800869c:	2308      	movs	r3, #8
 800869e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086a2:	e0cc      	b.n	800883e <UART_SetConfig+0x2fe>
 80086a4:	2310      	movs	r3, #16
 80086a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086aa:	e0c8      	b.n	800883e <UART_SetConfig+0x2fe>
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a5e      	ldr	r2, [pc, #376]	@ (800882c <UART_SetConfig+0x2ec>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d125      	bne.n	8008702 <UART_SetConfig+0x1c2>
 80086b6:	4b5b      	ldr	r3, [pc, #364]	@ (8008824 <UART_SetConfig+0x2e4>)
 80086b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80086c0:	2b30      	cmp	r3, #48	@ 0x30
 80086c2:	d016      	beq.n	80086f2 <UART_SetConfig+0x1b2>
 80086c4:	2b30      	cmp	r3, #48	@ 0x30
 80086c6:	d818      	bhi.n	80086fa <UART_SetConfig+0x1ba>
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d00a      	beq.n	80086e2 <UART_SetConfig+0x1a2>
 80086cc:	2b20      	cmp	r3, #32
 80086ce:	d814      	bhi.n	80086fa <UART_SetConfig+0x1ba>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d002      	beq.n	80086da <UART_SetConfig+0x19a>
 80086d4:	2b10      	cmp	r3, #16
 80086d6:	d008      	beq.n	80086ea <UART_SetConfig+0x1aa>
 80086d8:	e00f      	b.n	80086fa <UART_SetConfig+0x1ba>
 80086da:	2300      	movs	r3, #0
 80086dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086e0:	e0ad      	b.n	800883e <UART_SetConfig+0x2fe>
 80086e2:	2302      	movs	r3, #2
 80086e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086e8:	e0a9      	b.n	800883e <UART_SetConfig+0x2fe>
 80086ea:	2304      	movs	r3, #4
 80086ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f0:	e0a5      	b.n	800883e <UART_SetConfig+0x2fe>
 80086f2:	2308      	movs	r3, #8
 80086f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80086f8:	e0a1      	b.n	800883e <UART_SetConfig+0x2fe>
 80086fa:	2310      	movs	r3, #16
 80086fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008700:	e09d      	b.n	800883e <UART_SetConfig+0x2fe>
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a4a      	ldr	r2, [pc, #296]	@ (8008830 <UART_SetConfig+0x2f0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d125      	bne.n	8008758 <UART_SetConfig+0x218>
 800870c:	4b45      	ldr	r3, [pc, #276]	@ (8008824 <UART_SetConfig+0x2e4>)
 800870e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008712:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008716:	2bc0      	cmp	r3, #192	@ 0xc0
 8008718:	d016      	beq.n	8008748 <UART_SetConfig+0x208>
 800871a:	2bc0      	cmp	r3, #192	@ 0xc0
 800871c:	d818      	bhi.n	8008750 <UART_SetConfig+0x210>
 800871e:	2b80      	cmp	r3, #128	@ 0x80
 8008720:	d00a      	beq.n	8008738 <UART_SetConfig+0x1f8>
 8008722:	2b80      	cmp	r3, #128	@ 0x80
 8008724:	d814      	bhi.n	8008750 <UART_SetConfig+0x210>
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <UART_SetConfig+0x1f0>
 800872a:	2b40      	cmp	r3, #64	@ 0x40
 800872c:	d008      	beq.n	8008740 <UART_SetConfig+0x200>
 800872e:	e00f      	b.n	8008750 <UART_SetConfig+0x210>
 8008730:	2300      	movs	r3, #0
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008736:	e082      	b.n	800883e <UART_SetConfig+0x2fe>
 8008738:	2302      	movs	r3, #2
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800873e:	e07e      	b.n	800883e <UART_SetConfig+0x2fe>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008746:	e07a      	b.n	800883e <UART_SetConfig+0x2fe>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800874e:	e076      	b.n	800883e <UART_SetConfig+0x2fe>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008756:	e072      	b.n	800883e <UART_SetConfig+0x2fe>
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a35      	ldr	r2, [pc, #212]	@ (8008834 <UART_SetConfig+0x2f4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d12a      	bne.n	80087b8 <UART_SetConfig+0x278>
 8008762:	4b30      	ldr	r3, [pc, #192]	@ (8008824 <UART_SetConfig+0x2e4>)
 8008764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800876c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008770:	d01a      	beq.n	80087a8 <UART_SetConfig+0x268>
 8008772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008776:	d81b      	bhi.n	80087b0 <UART_SetConfig+0x270>
 8008778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800877c:	d00c      	beq.n	8008798 <UART_SetConfig+0x258>
 800877e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008782:	d815      	bhi.n	80087b0 <UART_SetConfig+0x270>
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <UART_SetConfig+0x250>
 8008788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800878c:	d008      	beq.n	80087a0 <UART_SetConfig+0x260>
 800878e:	e00f      	b.n	80087b0 <UART_SetConfig+0x270>
 8008790:	2300      	movs	r3, #0
 8008792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008796:	e052      	b.n	800883e <UART_SetConfig+0x2fe>
 8008798:	2302      	movs	r3, #2
 800879a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800879e:	e04e      	b.n	800883e <UART_SetConfig+0x2fe>
 80087a0:	2304      	movs	r3, #4
 80087a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a6:	e04a      	b.n	800883e <UART_SetConfig+0x2fe>
 80087a8:	2308      	movs	r3, #8
 80087aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ae:	e046      	b.n	800883e <UART_SetConfig+0x2fe>
 80087b0:	2310      	movs	r3, #16
 80087b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b6:	e042      	b.n	800883e <UART_SetConfig+0x2fe>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a17      	ldr	r2, [pc, #92]	@ (800881c <UART_SetConfig+0x2dc>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d13a      	bne.n	8008838 <UART_SetConfig+0x2f8>
 80087c2:	4b18      	ldr	r3, [pc, #96]	@ (8008824 <UART_SetConfig+0x2e4>)
 80087c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80087cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087d0:	d01a      	beq.n	8008808 <UART_SetConfig+0x2c8>
 80087d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80087d6:	d81b      	bhi.n	8008810 <UART_SetConfig+0x2d0>
 80087d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087dc:	d00c      	beq.n	80087f8 <UART_SetConfig+0x2b8>
 80087de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087e2:	d815      	bhi.n	8008810 <UART_SetConfig+0x2d0>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <UART_SetConfig+0x2b0>
 80087e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ec:	d008      	beq.n	8008800 <UART_SetConfig+0x2c0>
 80087ee:	e00f      	b.n	8008810 <UART_SetConfig+0x2d0>
 80087f0:	2300      	movs	r3, #0
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f6:	e022      	b.n	800883e <UART_SetConfig+0x2fe>
 80087f8:	2302      	movs	r3, #2
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087fe:	e01e      	b.n	800883e <UART_SetConfig+0x2fe>
 8008800:	2304      	movs	r3, #4
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008806:	e01a      	b.n	800883e <UART_SetConfig+0x2fe>
 8008808:	2308      	movs	r3, #8
 800880a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800880e:	e016      	b.n	800883e <UART_SetConfig+0x2fe>
 8008810:	2310      	movs	r3, #16
 8008812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008816:	e012      	b.n	800883e <UART_SetConfig+0x2fe>
 8008818:	cfff69f3 	.word	0xcfff69f3
 800881c:	40008000 	.word	0x40008000
 8008820:	40013800 	.word	0x40013800
 8008824:	40021000 	.word	0x40021000
 8008828:	40004400 	.word	0x40004400
 800882c:	40004800 	.word	0x40004800
 8008830:	40004c00 	.word	0x40004c00
 8008834:	40005000 	.word	0x40005000
 8008838:	2310      	movs	r3, #16
 800883a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4aae      	ldr	r2, [pc, #696]	@ (8008afc <UART_SetConfig+0x5bc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	f040 8097 	bne.w	8008978 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800884a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800884e:	2b08      	cmp	r3, #8
 8008850:	d823      	bhi.n	800889a <UART_SetConfig+0x35a>
 8008852:	a201      	add	r2, pc, #4	@ (adr r2, 8008858 <UART_SetConfig+0x318>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	0800887d 	.word	0x0800887d
 800885c:	0800889b 	.word	0x0800889b
 8008860:	08008885 	.word	0x08008885
 8008864:	0800889b 	.word	0x0800889b
 8008868:	0800888b 	.word	0x0800888b
 800886c:	0800889b 	.word	0x0800889b
 8008870:	0800889b 	.word	0x0800889b
 8008874:	0800889b 	.word	0x0800889b
 8008878:	08008893 	.word	0x08008893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800887c:	f7fc fca0 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8008880:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008882:	e010      	b.n	80088a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008884:	4b9e      	ldr	r3, [pc, #632]	@ (8008b00 <UART_SetConfig+0x5c0>)
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008888:	e00d      	b.n	80088a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800888a:	f7fc fc2b 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 800888e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008890:	e009      	b.n	80088a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008896:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008898:	e005      	b.n	80088a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80088a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	f000 8130 	beq.w	8008b0e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b2:	4a94      	ldr	r2, [pc, #592]	@ (8008b04 <UART_SetConfig+0x5c4>)
 80088b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	685a      	ldr	r2, [r3, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	4413      	add	r3, r2
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d305      	bcc.n	80088de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d903      	bls.n	80088e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80088e4:	e113      	b.n	8008b0e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	2200      	movs	r2, #0
 80088ea:	60bb      	str	r3, [r7, #8]
 80088ec:	60fa      	str	r2, [r7, #12]
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f2:	4a84      	ldr	r2, [pc, #528]	@ (8008b04 <UART_SetConfig+0x5c4>)
 80088f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2200      	movs	r2, #0
 80088fc:	603b      	str	r3, [r7, #0]
 80088fe:	607a      	str	r2, [r7, #4]
 8008900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008904:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008908:	f7f7 fc86 	bl	8000218 <__aeabi_uldivmod>
 800890c:	4602      	mov	r2, r0
 800890e:	460b      	mov	r3, r1
 8008910:	4610      	mov	r0, r2
 8008912:	4619      	mov	r1, r3
 8008914:	f04f 0200 	mov.w	r2, #0
 8008918:	f04f 0300 	mov.w	r3, #0
 800891c:	020b      	lsls	r3, r1, #8
 800891e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008922:	0202      	lsls	r2, r0, #8
 8008924:	6979      	ldr	r1, [r7, #20]
 8008926:	6849      	ldr	r1, [r1, #4]
 8008928:	0849      	lsrs	r1, r1, #1
 800892a:	2000      	movs	r0, #0
 800892c:	460c      	mov	r4, r1
 800892e:	4605      	mov	r5, r0
 8008930:	eb12 0804 	adds.w	r8, r2, r4
 8008934:	eb43 0905 	adc.w	r9, r3, r5
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	469a      	mov	sl, r3
 8008940:	4693      	mov	fp, r2
 8008942:	4652      	mov	r2, sl
 8008944:	465b      	mov	r3, fp
 8008946:	4640      	mov	r0, r8
 8008948:	4649      	mov	r1, r9
 800894a:	f7f7 fc65 	bl	8000218 <__aeabi_uldivmod>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4613      	mov	r3, r2
 8008954:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800895c:	d308      	bcc.n	8008970 <UART_SetConfig+0x430>
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008964:	d204      	bcs.n	8008970 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	6a3a      	ldr	r2, [r7, #32]
 800896c:	60da      	str	r2, [r3, #12]
 800896e:	e0ce      	b.n	8008b0e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008976:	e0ca      	b.n	8008b0e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008980:	d166      	bne.n	8008a50 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008982:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008986:	2b08      	cmp	r3, #8
 8008988:	d827      	bhi.n	80089da <UART_SetConfig+0x49a>
 800898a:	a201      	add	r2, pc, #4	@ (adr r2, 8008990 <UART_SetConfig+0x450>)
 800898c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008990:	080089b5 	.word	0x080089b5
 8008994:	080089bd 	.word	0x080089bd
 8008998:	080089c5 	.word	0x080089c5
 800899c:	080089db 	.word	0x080089db
 80089a0:	080089cb 	.word	0x080089cb
 80089a4:	080089db 	.word	0x080089db
 80089a8:	080089db 	.word	0x080089db
 80089ac:	080089db 	.word	0x080089db
 80089b0:	080089d3 	.word	0x080089d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089b4:	f7fc fc04 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 80089b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089ba:	e014      	b.n	80089e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089bc:	f7fc fc16 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
 80089c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089c2:	e010      	b.n	80089e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089c4:	4b4e      	ldr	r3, [pc, #312]	@ (8008b00 <UART_SetConfig+0x5c0>)
 80089c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089c8:	e00d      	b.n	80089e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089ca:	f7fc fb8b 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 80089ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089d0:	e009      	b.n	80089e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089d8:	e005      	b.n	80089e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8090 	beq.w	8008b0e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f2:	4a44      	ldr	r2, [pc, #272]	@ (8008b04 <UART_SetConfig+0x5c4>)
 80089f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f8:	461a      	mov	r2, r3
 80089fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a00:	005a      	lsls	r2, r3, #1
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	085b      	lsrs	r3, r3, #1
 8008a08:	441a      	add	r2, r3
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a14:	6a3b      	ldr	r3, [r7, #32]
 8008a16:	2b0f      	cmp	r3, #15
 8008a18:	d916      	bls.n	8008a48 <UART_SetConfig+0x508>
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a20:	d212      	bcs.n	8008a48 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	f023 030f 	bic.w	r3, r3, #15
 8008a2a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	085b      	lsrs	r3, r3, #1
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	8bfb      	ldrh	r3, [r7, #30]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	8bfa      	ldrh	r2, [r7, #30]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	e062      	b.n	8008b0e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a4e:	e05e      	b.n	8008b0e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d828      	bhi.n	8008aaa <UART_SetConfig+0x56a>
 8008a58:	a201      	add	r2, pc, #4	@ (adr r2, 8008a60 <UART_SetConfig+0x520>)
 8008a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5e:	bf00      	nop
 8008a60:	08008a85 	.word	0x08008a85
 8008a64:	08008a8d 	.word	0x08008a8d
 8008a68:	08008a95 	.word	0x08008a95
 8008a6c:	08008aab 	.word	0x08008aab
 8008a70:	08008a9b 	.word	0x08008a9b
 8008a74:	08008aab 	.word	0x08008aab
 8008a78:	08008aab 	.word	0x08008aab
 8008a7c:	08008aab 	.word	0x08008aab
 8008a80:	08008aa3 	.word	0x08008aa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a84:	f7fc fb9c 	bl	80051c0 <HAL_RCC_GetPCLK1Freq>
 8008a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a8a:	e014      	b.n	8008ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a8c:	f7fc fbae 	bl	80051ec <HAL_RCC_GetPCLK2Freq>
 8008a90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008a92:	e010      	b.n	8008ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a94:	4b1a      	ldr	r3, [pc, #104]	@ (8008b00 <UART_SetConfig+0x5c0>)
 8008a96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008a98:	e00d      	b.n	8008ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a9a:	f7fc fb23 	bl	80050e4 <HAL_RCC_GetSysClockFreq>
 8008a9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aa0:	e009      	b.n	8008ab6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008aa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008aa8:	e005      	b.n	8008ab6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008ab4:	bf00      	nop
    }

    if (pclk != 0U)
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d028      	beq.n	8008b0e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac0:	4a10      	ldr	r2, [pc, #64]	@ (8008b04 <UART_SetConfig+0x5c4>)
 8008ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aca:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	085b      	lsrs	r3, r3, #1
 8008ad4:	441a      	add	r2, r3
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ade:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	2b0f      	cmp	r3, #15
 8008ae4:	d910      	bls.n	8008b08 <UART_SetConfig+0x5c8>
 8008ae6:	6a3b      	ldr	r3, [r7, #32]
 8008ae8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aec:	d20c      	bcs.n	8008b08 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	b29a      	uxth	r2, r3
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	60da      	str	r2, [r3, #12]
 8008af8:	e009      	b.n	8008b0e <UART_SetConfig+0x5ce>
 8008afa:	bf00      	nop
 8008afc:	40008000 	.word	0x40008000
 8008b00:	00f42400 	.word	0x00f42400
 8008b04:	0800a1a4 	.word	0x0800a1a4
      }
      else
      {
        ret = HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2201      	movs	r2, #1
 8008b1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2200      	movs	r2, #0
 8008b22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	2200      	movs	r2, #0
 8008b28:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008b2a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3730      	adds	r7, #48	@ 0x30
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	f003 0308 	and.w	r3, r3, #8
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b88:	f003 0302 	and.w	r3, r3, #2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00a      	beq.n	8008ba6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008baa:	f003 0304 	and.w	r3, r3, #4
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00a      	beq.n	8008bc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	f003 0310 	and.w	r3, r3, #16
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d00a      	beq.n	8008bea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00a      	beq.n	8008c0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01a      	beq.n	8008c4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c36:	d10a      	bne.n	8008c4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00a      	beq.n	8008c70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	430a      	orrs	r2, r1
 8008c6e:	605a      	str	r2, [r3, #4]
  }
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b098      	sub	sp, #96	@ 0x60
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c8c:	f7f9 fe1c 	bl	80028c8 <HAL_GetTick>
 8008c90:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0308 	and.w	r3, r3, #8
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d12f      	bne.n	8008d00 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f88e 	bl	8008dd0 <UART_WaitOnFlagUntilTimeout>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d022      	beq.n	8008d00 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc2:	e853 3f00 	ldrex	r3, [r3]
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cda:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cdc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cde:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce0:	e841 2300 	strex	r3, r2, [r1]
 8008ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1e6      	bne.n	8008cba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e063      	b.n	8008dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0304 	and.w	r3, r3, #4
 8008d0a:	2b04      	cmp	r3, #4
 8008d0c:	d149      	bne.n	8008da2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d0e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d16:	2200      	movs	r2, #0
 8008d18:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f857 	bl	8008dd0 <UART_WaitOnFlagUntilTimeout>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d03c      	beq.n	8008da2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d30:	e853 3f00 	ldrex	r3, [r3]
 8008d34:	623b      	str	r3, [r7, #32]
   return(result);
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d4e:	e841 2300 	strex	r3, r2, [r1]
 8008d52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d1e6      	bne.n	8008d28 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	e853 3f00 	ldrex	r3, [r3]
 8008d68:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f023 0301 	bic.w	r3, r3, #1
 8008d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3308      	adds	r3, #8
 8008d78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d7a:	61fa      	str	r2, [r7, #28]
 8008d7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	69b9      	ldr	r1, [r7, #24]
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	617b      	str	r3, [r7, #20]
   return(result);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e5      	bne.n	8008d5a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e012      	b.n	8008dc8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2220      	movs	r2, #32
 8008dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3758      	adds	r7, #88	@ 0x58
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	603b      	str	r3, [r7, #0]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008de0:	e04f      	b.n	8008e82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de8:	d04b      	beq.n	8008e82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dea:	f7f9 fd6d 	bl	80028c8 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d302      	bcc.n	8008e00 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e04e      	b.n	8008ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0304 	and.w	r3, r3, #4
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d037      	beq.n	8008e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b80      	cmp	r3, #128	@ 0x80
 8008e16:	d034      	beq.n	8008e82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2b40      	cmp	r3, #64	@ 0x40
 8008e1c:	d031      	beq.n	8008e82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	69db      	ldr	r3, [r3, #28]
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d110      	bne.n	8008e4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2208      	movs	r2, #8
 8008e32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f99c 	bl	8009172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e029      	b.n	8008ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e5c:	d111      	bne.n	8008e82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 f982 	bl	8009172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e00f      	b.n	8008ea2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	bf0c      	ite	eq
 8008e92:	2301      	moveq	r3, #1
 8008e94:	2300      	movne	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d0a0      	beq.n	8008de2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
	...

08008eac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b0a3      	sub	sp, #140	@ 0x8c
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	88fa      	ldrh	r2, [r7, #6]
 8008ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	88fa      	ldrh	r2, [r7, #6]
 8008ecc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ede:	d10e      	bne.n	8008efe <UART_Start_Receive_IT+0x52>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d105      	bne.n	8008ef4 <UART_Start_Receive_IT+0x48>
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008eee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008ef2:	e02d      	b.n	8008f50 <UART_Start_Receive_IT+0xa4>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	22ff      	movs	r2, #255	@ 0xff
 8008ef8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008efc:	e028      	b.n	8008f50 <UART_Start_Receive_IT+0xa4>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d10d      	bne.n	8008f22 <UART_Start_Receive_IT+0x76>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d104      	bne.n	8008f18 <UART_Start_Receive_IT+0x6c>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	22ff      	movs	r2, #255	@ 0xff
 8008f12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f16:	e01b      	b.n	8008f50 <UART_Start_Receive_IT+0xa4>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	227f      	movs	r2, #127	@ 0x7f
 8008f1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f20:	e016      	b.n	8008f50 <UART_Start_Receive_IT+0xa4>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f2a:	d10d      	bne.n	8008f48 <UART_Start_Receive_IT+0x9c>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	691b      	ldr	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d104      	bne.n	8008f3e <UART_Start_Receive_IT+0x92>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	227f      	movs	r2, #127	@ 0x7f
 8008f38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f3c:	e008      	b.n	8008f50 <UART_Start_Receive_IT+0xa4>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	223f      	movs	r2, #63	@ 0x3f
 8008f42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008f46:	e003      	b.n	8008f50 <UART_Start_Receive_IT+0xa4>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2222      	movs	r2, #34	@ 0x22
 8008f5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3308      	adds	r3, #8
 8008f66:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f70:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f72:	f043 0301 	orr.w	r3, r3, #1
 8008f76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008f84:	673a      	str	r2, [r7, #112]	@ 0x70
 8008f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f88:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008f8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008f8c:	e841 2300 	strex	r3, r2, [r1]
 8008f90:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1e3      	bne.n	8008f60 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa0:	d14f      	bne.n	8009042 <UART_Start_Receive_IT+0x196>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fa8:	88fa      	ldrh	r2, [r7, #6]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d349      	bcc.n	8009042 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fb6:	d107      	bne.n	8008fc8 <UART_Start_Receive_IT+0x11c>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4a47      	ldr	r2, [pc, #284]	@ (80090e0 <UART_Start_Receive_IT+0x234>)
 8008fc4:	675a      	str	r2, [r3, #116]	@ 0x74
 8008fc6:	e002      	b.n	8008fce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	4a46      	ldr	r2, [pc, #280]	@ (80090e4 <UART_Start_Receive_IT+0x238>)
 8008fcc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d01a      	beq.n	800900c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ffa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008ffe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8009006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3308      	adds	r3, #8
 8009012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009016:	e853 3f00 	ldrex	r3, [r3]
 800901a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009022:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3308      	adds	r3, #8
 800902a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800902c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800902e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009030:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009034:	e841 2300 	strex	r3, r2, [r1]
 8009038:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800903a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1e5      	bne.n	800900c <UART_Start_Receive_IT+0x160>
 8009040:	e046      	b.n	80090d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800904a:	d107      	bne.n	800905c <UART_Start_Receive_IT+0x1b0>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	4a24      	ldr	r2, [pc, #144]	@ (80090e8 <UART_Start_Receive_IT+0x23c>)
 8009058:	675a      	str	r2, [r3, #116]	@ 0x74
 800905a:	e002      	b.n	8009062 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a23      	ldr	r2, [pc, #140]	@ (80090ec <UART_Start_Receive_IT+0x240>)
 8009060:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d019      	beq.n	800909e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	e853 3f00 	ldrex	r3, [r3]
 8009076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800907e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	461a      	mov	r2, r3
 8009086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009088:	637b      	str	r3, [r7, #52]	@ 0x34
 800908a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800908e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009090:	e841 2300 	strex	r3, r2, [r1]
 8009094:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e6      	bne.n	800906a <UART_Start_Receive_IT+0x1be>
 800909c:	e018      	b.n	80090d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	e853 3f00 	ldrex	r3, [r3]
 80090aa:	613b      	str	r3, [r7, #16]
   return(result);
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	f043 0320 	orr.w	r3, r3, #32
 80090b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	461a      	mov	r2, r3
 80090ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80090bc:	623b      	str	r3, [r7, #32]
 80090be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	69f9      	ldr	r1, [r7, #28]
 80090c2:	6a3a      	ldr	r2, [r7, #32]
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e6      	bne.n	800909e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	378c      	adds	r7, #140	@ 0x8c
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	08009af5 	.word	0x08009af5
 80090e4:	08009785 	.word	0x08009785
 80090e8:	080095c5 	.word	0x080095c5
 80090ec:	08009405 	.word	0x08009405

080090f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b08f      	sub	sp, #60	@ 0x3c
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fe:	6a3b      	ldr	r3, [r7, #32]
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	61fb      	str	r3, [r7, #28]
   return(result);
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800910c:	637b      	str	r3, [r7, #52]	@ 0x34
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	461a      	mov	r2, r3
 8009114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009116:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009118:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800911a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800911c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800911e:	e841 2300 	strex	r3, r2, [r1]
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1e6      	bne.n	80090f8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	3308      	adds	r3, #8
 8009130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	60bb      	str	r3, [r7, #8]
   return(result);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009140:	633b      	str	r3, [r7, #48]	@ 0x30
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	3308      	adds	r3, #8
 8009148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800914a:	61ba      	str	r2, [r7, #24]
 800914c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6979      	ldr	r1, [r7, #20]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	613b      	str	r3, [r7, #16]
   return(result);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e5      	bne.n	800912a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009166:	bf00      	nop
 8009168:	373c      	adds	r7, #60	@ 0x3c
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009172:	b480      	push	{r7}
 8009174:	b095      	sub	sp, #84	@ 0x54
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800918e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009198:	643b      	str	r3, [r7, #64]	@ 0x40
 800919a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800919c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800919e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091a0:	e841 2300 	strex	r3, r2, [r1]
 80091a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d1e6      	bne.n	800917a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	3308      	adds	r3, #8
 80091b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091c2:	f023 0301 	bic.w	r3, r3, #1
 80091c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e3      	bne.n	80091ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d118      	bne.n	800921e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	f023 0310 	bic.w	r3, r3, #16
 8009200:	647b      	str	r3, [r7, #68]	@ 0x44
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800920a:	61bb      	str	r3, [r7, #24]
 800920c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800920e:	6979      	ldr	r1, [r7, #20]
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	e841 2300 	strex	r3, r2, [r1]
 8009216:	613b      	str	r3, [r7, #16]
   return(result);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1e6      	bne.n	80091ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2220      	movs	r2, #32
 8009222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009232:	bf00      	nop
 8009234:	3754      	adds	r7, #84	@ 0x54
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b090      	sub	sp, #64	@ 0x40
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d137      	bne.n	80092ca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800925a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800925c:	2200      	movs	r2, #0
 800925e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3308      	adds	r3, #8
 8009268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	e853 3f00 	ldrex	r3, [r3]
 8009270:	623b      	str	r3, [r7, #32]
   return(result);
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800927a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	3308      	adds	r3, #8
 8009280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009282:	633a      	str	r2, [r7, #48]	@ 0x30
 8009284:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009286:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800928a:	e841 2300 	strex	r3, r2, [r1]
 800928e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1e5      	bne.n	8009262 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	e853 3f00 	ldrex	r3, [r3]
 80092a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b4:	61fb      	str	r3, [r7, #28]
 80092b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	69b9      	ldr	r1, [r7, #24]
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	617b      	str	r3, [r7, #20]
   return(result);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e6      	bne.n	8009296 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092c8:	e004      	b.n	80092d4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80092ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092d0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80092d2:	4798      	blx	r3
}
 80092d4:	bf00      	nop
 80092d6:	3740      	adds	r7, #64	@ 0x40
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092f4:	bf00      	nop
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009310:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009318:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009324:	2b80      	cmp	r3, #128	@ 0x80
 8009326:	d109      	bne.n	800933c <UART_DMAError+0x40>
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	2b21      	cmp	r3, #33	@ 0x21
 800932c:	d106      	bne.n	800933c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2200      	movs	r2, #0
 8009332:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009336:	6978      	ldr	r0, [r7, #20]
 8009338:	f7ff feda 	bl	80090f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009346:	2b40      	cmp	r3, #64	@ 0x40
 8009348:	d109      	bne.n	800935e <UART_DMAError+0x62>
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b22      	cmp	r3, #34	@ 0x22
 800934e:	d106      	bne.n	800935e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	2200      	movs	r2, #0
 8009354:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009358:	6978      	ldr	r0, [r7, #20]
 800935a:	f7ff ff0a 	bl	8009172 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009364:	f043 0210 	orr.w	r2, r3, #16
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009374:	6978      	ldr	r0, [r7, #20]
 8009376:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009378:	bf00      	nop
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800938c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093c4:	61fb      	str	r3, [r7, #28]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	61bb      	str	r3, [r7, #24]
 80093d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6979      	ldr	r1, [r7, #20]
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	613b      	str	r3, [r7, #16]
   return(result);
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e6      	bne.n	80093b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093fa:	bf00      	nop
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b09c      	sub	sp, #112	@ 0x70
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009412:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800941c:	2b22      	cmp	r3, #34	@ 0x22
 800941e:	f040 80c2 	bne.w	80095a6 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009428:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800942c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009430:	b2d9      	uxtb	r1, r3
 8009432:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009436:	b2da      	uxtb	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943c:	400a      	ands	r2, r1
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009452:	b29b      	uxth	r3, r3
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009464:	b29b      	uxth	r3, r3
 8009466:	2b00      	cmp	r3, #0
 8009468:	f040 80a5 	bne.w	80095b6 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800947a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800947c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800948a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800948c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009490:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e6      	bne.n	800946c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3308      	adds	r3, #8
 80094a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a8:	e853 3f00 	ldrex	r3, [r3]
 80094ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b0:	f023 0301 	bic.w	r3, r3, #1
 80094b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3308      	adds	r3, #8
 80094bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80094be:	647a      	str	r2, [r7, #68]	@ 0x44
 80094c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094c6:	e841 2300 	strex	r3, r2, [r1]
 80094ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1e5      	bne.n	800949e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a35      	ldr	r2, [pc, #212]	@ (80095c0 <UART_RxISR_8BIT+0x1bc>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d01f      	beq.n	8009530 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d018      	beq.n	8009530 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009506:	e853 3f00 	ldrex	r3, [r3]
 800950a:	623b      	str	r3, [r7, #32]
   return(result);
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009512:	663b      	str	r3, [r7, #96]	@ 0x60
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	461a      	mov	r2, r3
 800951a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800951c:	633b      	str	r3, [r7, #48]	@ 0x30
 800951e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009524:	e841 2300 	strex	r3, r2, [r1]
 8009528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1e6      	bne.n	80094fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009534:	2b01      	cmp	r3, #1
 8009536:	d130      	bne.n	800959a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	60fb      	str	r3, [r7, #12]
   return(result);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f023 0310 	bic.w	r3, r3, #16
 8009552:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800955c:	61fb      	str	r3, [r7, #28]
 800955e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	69b9      	ldr	r1, [r7, #24]
 8009562:	69fa      	ldr	r2, [r7, #28]
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	617b      	str	r3, [r7, #20]
   return(result);
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e6      	bne.n	800953e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b10      	cmp	r3, #16
 800957c:	d103      	bne.n	8009586 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2210      	movs	r2, #16
 8009584:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009592:	4611      	mov	r1, r2
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009598:	e00d      	b.n	80095b6 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
}
 80095a4:	e007      	b.n	80095b6 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	699a      	ldr	r2, [r3, #24]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f042 0208 	orr.w	r2, r2, #8
 80095b4:	619a      	str	r2, [r3, #24]
}
 80095b6:	bf00      	nop
 80095b8:	3770      	adds	r7, #112	@ 0x70
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	40008000 	.word	0x40008000

080095c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b09c      	sub	sp, #112	@ 0x70
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80095d2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80095dc:	2b22      	cmp	r3, #34	@ 0x22
 80095de:	f040 80c2 	bne.w	8009766 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80095f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80095f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80095fa:	4013      	ands	r3, r2
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009600:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009606:	1c9a      	adds	r2, r3, #2
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009612:	b29b      	uxth	r3, r3
 8009614:	3b01      	subs	r3, #1
 8009616:	b29a      	uxth	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009624:	b29b      	uxth	r3, r3
 8009626:	2b00      	cmp	r3, #0
 8009628:	f040 80a5 	bne.w	8009776 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800963a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800963c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009640:	667b      	str	r3, [r7, #100]	@ 0x64
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800964a:	657b      	str	r3, [r7, #84]	@ 0x54
 800964c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009650:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e6      	bne.n	800962c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3308      	adds	r3, #8
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	f023 0301 	bic.w	r3, r3, #1
 8009674:	663b      	str	r3, [r7, #96]	@ 0x60
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800967e:	643a      	str	r2, [r7, #64]	@ 0x40
 8009680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009684:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800968c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e5      	bne.n	800965e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a35      	ldr	r2, [pc, #212]	@ (8009780 <UART_RxISR_16BIT+0x1bc>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d01f      	beq.n	80096f0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d018      	beq.n	80096f0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	e853 3f00 	ldrex	r3, [r3]
 80096ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80096d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	461a      	mov	r2, r3
 80096da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096de:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e6      	bne.n	80096be <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d130      	bne.n	800975a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2200      	movs	r2, #0
 80096fc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	60bb      	str	r3, [r7, #8]
   return(result);
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f023 0310 	bic.w	r3, r3, #16
 8009712:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800971c:	61bb      	str	r3, [r7, #24]
 800971e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6979      	ldr	r1, [r7, #20]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	613b      	str	r3, [r7, #16]
   return(result);
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e6      	bne.n	80096fe <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	2b10      	cmp	r3, #16
 800973c:	d103      	bne.n	8009746 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2210      	movs	r2, #16
 8009744:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009752:	4611      	mov	r1, r2
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009758:	e00d      	b.n	8009776 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	4798      	blx	r3
}
 8009764:	e007      	b.n	8009776 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	699a      	ldr	r2, [r3, #24]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f042 0208 	orr.w	r2, r2, #8
 8009774:	619a      	str	r2, [r3, #24]
}
 8009776:	bf00      	nop
 8009778:	3770      	adds	r7, #112	@ 0x70
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	40008000 	.word	0x40008000

08009784 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b0ac      	sub	sp, #176	@ 0xb0
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009792:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097ba:	2b22      	cmp	r3, #34	@ 0x22
 80097bc:	f040 8189 	bne.w	8009ad2 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80097c6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097ca:	e12c      	b.n	8009a26 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097d2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80097da:	b2d9      	uxtb	r1, r3
 80097dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80097e0:	b2da      	uxtb	r2, r3
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097e6:	400a      	ands	r2, r1
 80097e8:	b2d2      	uxtb	r2, r2
 80097ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	3b01      	subs	r3, #1
 8009800:	b29a      	uxth	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	2b00      	cmp	r3, #0
 800981c:	d055      	beq.n	80098ca <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800981e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d011      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0xca>
 800982a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800982e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00b      	beq.n	800984e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2201      	movs	r2, #1
 800983c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009844:	f043 0201 	orr.w	r2, r3, #1
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800984e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d011      	beq.n	800987e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800985a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2202      	movs	r2, #2
 800986c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009874:	f043 0204 	orr.w	r2, r3, #4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800987e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009882:	f003 0304 	and.w	r3, r3, #4
 8009886:	2b00      	cmp	r3, #0
 8009888:	d011      	beq.n	80098ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800988a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00b      	beq.n	80098ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2204      	movs	r2, #4
 800989c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a4:	f043 0202 	orr.w	r2, r3, #2
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f040 80a7 	bne.w	8009a26 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80098e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80098ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	461a      	mov	r2, r3
 80098f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80098fc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009900:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1e4      	bne.n	80098d8 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	3308      	adds	r3, #8
 8009914:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800991e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009920:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009924:	f023 0301 	bic.w	r3, r3, #1
 8009928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	3308      	adds	r3, #8
 8009932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009936:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009938:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800993c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800993e:	e841 2300 	strex	r3, r2, [r1]
 8009942:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009944:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1e1      	bne.n	800990e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2220      	movs	r2, #32
 800994e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2200      	movs	r2, #0
 8009956:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a62      	ldr	r2, [pc, #392]	@ (8009aec <UART_RxISR_8BIT_FIFOEN+0x368>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d021      	beq.n	80099ac <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d01a      	beq.n	80099ac <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009984:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800998a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009998:	657b      	str	r3, [r7, #84]	@ 0x54
 800999a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800999e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80099a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e4      	bne.n	8009976 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	d132      	bne.n	8009a1a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c2:	e853 3f00 	ldrex	r3, [r3]
 80099c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ca:	f023 0310 	bic.w	r3, r3, #16
 80099ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80099de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80099e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80099e4:	e841 2300 	strex	r3, r2, [r1]
 80099e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80099ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d1e4      	bne.n	80099ba <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	2b10      	cmp	r3, #16
 80099fc:	d103      	bne.n	8009a06 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2210      	movs	r2, #16
 8009a04:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009a12:	4611      	mov	r1, r2
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009a18:	e010      	b.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4798      	blx	r3
        break;
 8009a24:	e00a      	b.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a26:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d006      	beq.n	8009a3c <UART_RxISR_8BIT_FIFOEN+0x2b8>
 8009a2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f47f aec8 	bne.w	80097cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009a42:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a46:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d049      	beq.n	8009ae2 <UART_RxISR_8BIT_FIFOEN+0x35e>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009a54:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d242      	bcs.n	8009ae2 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a6c:	69fb      	ldr	r3, [r7, #28]
 8009a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3308      	adds	r3, #8
 8009a7c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009a80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e3      	bne.n	8009a5c <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a16      	ldr	r2, [pc, #88]	@ (8009af0 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8009a98:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f043 0320 	orr.w	r3, r3, #32
 8009aae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	461a      	mov	r2, r3
 8009ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009abc:	61bb      	str	r3, [r7, #24]
 8009abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	6979      	ldr	r1, [r7, #20]
 8009ac2:	69ba      	ldr	r2, [r7, #24]
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e4      	bne.n	8009a9a <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ad0:	e007      	b.n	8009ae2 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0208 	orr.w	r2, r2, #8
 8009ae0:	619a      	str	r2, [r3, #24]
}
 8009ae2:	bf00      	nop
 8009ae4:	37b0      	adds	r7, #176	@ 0xb0
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40008000 	.word	0x40008000
 8009af0:	08009405 	.word	0x08009405

08009af4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b0ae      	sub	sp, #184	@ 0xb8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009b02:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69db      	ldr	r3, [r3, #28]
 8009b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b2a:	2b22      	cmp	r3, #34	@ 0x22
 8009b2c:	f040 818d 	bne.w	8009e4a <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009b36:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b3a:	e130      	b.n	8009d9e <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b42:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b4e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009b52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009b56:	4013      	ands	r3, r2
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009b5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b64:	1c9a      	adds	r2, r3, #2
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	3b01      	subs	r3, #1
 8009b74:	b29a      	uxth	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d055      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009b96:	f003 0301 	and.w	r3, r3, #1
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d011      	beq.n	8009bc2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009b9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00b      	beq.n	8009bc2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bb8:	f043 0201 	orr.w	r2, r3, #1
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bc6:	f003 0302 	and.w	r3, r3, #2
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d011      	beq.n	8009bf2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00b      	beq.n	8009bf2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2202      	movs	r2, #2
 8009be0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009be8:	f043 0204 	orr.w	r2, r3, #4
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009bf6:	f003 0304 	and.w	r3, r3, #4
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d011      	beq.n	8009c22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009c02:	f003 0301 	and.w	r3, r3, #1
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00b      	beq.n	8009c22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2204      	movs	r2, #4
 8009c10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c18:	f043 0202 	orr.w	r2, r3, #2
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d008      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f040 80a9 	bne.w	8009d9e <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c72:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c7a:	e841 2300 	strex	r3, r2, [r1]
 8009c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e2      	bne.n	8009c4c <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c9c:	f023 0301 	bic.w	r3, r3, #1
 8009ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3308      	adds	r3, #8
 8009caa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8009cae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009cb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009cb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009cbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e1      	bne.n	8009c86 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a62      	ldr	r2, [pc, #392]	@ (8009e64 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d021      	beq.n	8009d24 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d01a      	beq.n	8009d24 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009cfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009cfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009d10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d12:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e4      	bne.n	8009cee <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d132      	bne.n	8009d92 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d42:	f023 0310 	bic.w	r3, r3, #16
 8009d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e4      	bne.n	8009d32 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	2b10      	cmp	r3, #16
 8009d74:	d103      	bne.n	8009d7e <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2210      	movs	r2, #16
 8009d7c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009d90:	e010      	b.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	4798      	blx	r3
        break;
 8009d9c:	e00a      	b.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d9e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d006      	beq.n	8009db4 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 8009da6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f47f aec4 	bne.w	8009b3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dba:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009dbe:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d049      	beq.n	8009e5a <UART_RxISR_16BIT_FIFOEN+0x366>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009dcc:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d242      	bcs.n	8009e5a <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	3308      	adds	r3, #8
 8009dda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dde:	e853 3f00 	ldrex	r3, [r3]
 8009de2:	623b      	str	r3, [r7, #32]
   return(result);
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009df8:	633a      	str	r2, [r7, #48]	@ 0x30
 8009dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e00:	e841 2300 	strex	r3, r2, [r1]
 8009e04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1e3      	bne.n	8009dd4 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a16      	ldr	r2, [pc, #88]	@ (8009e68 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009e10:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	e853 3f00 	ldrex	r3, [r3]
 8009e1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f043 0320 	orr.w	r3, r3, #32
 8009e26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e34:	61fb      	str	r3, [r7, #28]
 8009e36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e38:	69b9      	ldr	r1, [r7, #24]
 8009e3a:	69fa      	ldr	r2, [r7, #28]
 8009e3c:	e841 2300 	strex	r3, r2, [r1]
 8009e40:	617b      	str	r3, [r7, #20]
   return(result);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1e4      	bne.n	8009e12 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e48:	e007      	b.n	8009e5a <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	699a      	ldr	r2, [r3, #24]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f042 0208 	orr.w	r2, r2, #8
 8009e58:	619a      	str	r2, [r3, #24]
}
 8009e5a:	bf00      	nop
 8009e5c:	37b8      	adds	r7, #184	@ 0xb8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	40008000 	.word	0x40008000
 8009e68:	080095c5 	.word	0x080095c5

08009e6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e74:	bf00      	nop
 8009e76:	370c      	adds	r7, #12
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b083      	sub	sp, #12
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d101      	bne.n	8009ebe <HAL_UARTEx_DisableFifoMode+0x16>
 8009eba:	2302      	movs	r3, #2
 8009ebc:	e027      	b.n	8009f0e <HAL_UARTEx_DisableFifoMode+0x66>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2224      	movs	r2, #36	@ 0x24
 8009eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f022 0201 	bic.w	r2, r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009eec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2220      	movs	r2, #32
 8009f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e02d      	b.n	8009f8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2224      	movs	r2, #36	@ 0x24
 8009f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f022 0201 	bic.w	r2, r2, #1
 8009f58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	683a      	ldr	r2, [r7, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f850 	bl	800a014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
 8009f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009faa:	2302      	movs	r3, #2
 8009fac:	e02d      	b.n	800a00a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2224      	movs	r2, #36	@ 0x24
 8009fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f022 0201 	bic.w	r2, r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	683a      	ldr	r2, [r7, #0]
 8009fe6:	430a      	orrs	r2, r1
 8009fe8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f812 	bl	800a014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a020:	2b00      	cmp	r3, #0
 800a022:	d108      	bne.n	800a036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a034:	e031      	b.n	800a09a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a036:	2308      	movs	r3, #8
 800a038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a03a:	2308      	movs	r3, #8
 800a03c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	0e5b      	lsrs	r3, r3, #25
 800a046:	b2db      	uxtb	r3, r3
 800a048:	f003 0307 	and.w	r3, r3, #7
 800a04c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	689b      	ldr	r3, [r3, #8]
 800a054:	0f5b      	lsrs	r3, r3, #29
 800a056:	b2db      	uxtb	r3, r3
 800a058:	f003 0307 	and.w	r3, r3, #7
 800a05c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	7b3a      	ldrb	r2, [r7, #12]
 800a062:	4911      	ldr	r1, [pc, #68]	@ (800a0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a064:	5c8a      	ldrb	r2, [r1, r2]
 800a066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a06a:	7b3a      	ldrb	r2, [r7, #12]
 800a06c:	490f      	ldr	r1, [pc, #60]	@ (800a0ac <UARTEx_SetNbDataToProcess+0x98>)
 800a06e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a070:	fb93 f3f2 	sdiv	r3, r3, r2
 800a074:	b29a      	uxth	r2, r3
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	7b7a      	ldrb	r2, [r7, #13]
 800a080:	4909      	ldr	r1, [pc, #36]	@ (800a0a8 <UARTEx_SetNbDataToProcess+0x94>)
 800a082:	5c8a      	ldrb	r2, [r1, r2]
 800a084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a088:	7b7a      	ldrb	r2, [r7, #13]
 800a08a:	4908      	ldr	r1, [pc, #32]	@ (800a0ac <UARTEx_SetNbDataToProcess+0x98>)
 800a08c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a08e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a092:	b29a      	uxth	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a09a:	bf00      	nop
 800a09c:	3714      	adds	r7, #20
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	0800a1bc 	.word	0x0800a1bc
 800a0ac:	0800a1c4 	.word	0x0800a1c4

0800a0b0 <memset>:
 800a0b0:	4402      	add	r2, r0
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d100      	bne.n	800a0ba <memset+0xa>
 800a0b8:	4770      	bx	lr
 800a0ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a0be:	e7f9      	b.n	800a0b4 <memset+0x4>

0800a0c0 <__errno>:
 800a0c0:	4b01      	ldr	r3, [pc, #4]	@ (800a0c8 <__errno+0x8>)
 800a0c2:	6818      	ldr	r0, [r3, #0]
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	20000214 	.word	0x20000214

0800a0cc <__libc_init_array>:
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	4d0d      	ldr	r5, [pc, #52]	@ (800a104 <__libc_init_array+0x38>)
 800a0d0:	4c0d      	ldr	r4, [pc, #52]	@ (800a108 <__libc_init_array+0x3c>)
 800a0d2:	1b64      	subs	r4, r4, r5
 800a0d4:	10a4      	asrs	r4, r4, #2
 800a0d6:	2600      	movs	r6, #0
 800a0d8:	42a6      	cmp	r6, r4
 800a0da:	d109      	bne.n	800a0f0 <__libc_init_array+0x24>
 800a0dc:	4d0b      	ldr	r5, [pc, #44]	@ (800a10c <__libc_init_array+0x40>)
 800a0de:	4c0c      	ldr	r4, [pc, #48]	@ (800a110 <__libc_init_array+0x44>)
 800a0e0:	f000 f848 	bl	800a174 <_init>
 800a0e4:	1b64      	subs	r4, r4, r5
 800a0e6:	10a4      	asrs	r4, r4, #2
 800a0e8:	2600      	movs	r6, #0
 800a0ea:	42a6      	cmp	r6, r4
 800a0ec:	d105      	bne.n	800a0fa <__libc_init_array+0x2e>
 800a0ee:	bd70      	pop	{r4, r5, r6, pc}
 800a0f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f4:	4798      	blx	r3
 800a0f6:	3601      	adds	r6, #1
 800a0f8:	e7ee      	b.n	800a0d8 <__libc_init_array+0xc>
 800a0fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fe:	4798      	blx	r3
 800a100:	3601      	adds	r6, #1
 800a102:	e7f2      	b.n	800a0ea <__libc_init_array+0x1e>
 800a104:	0800a1d4 	.word	0x0800a1d4
 800a108:	0800a1d4 	.word	0x0800a1d4
 800a10c:	0800a1d4 	.word	0x0800a1d4
 800a110:	0800a1d8 	.word	0x0800a1d8

0800a114 <memcpy>:
 800a114:	440a      	add	r2, r1
 800a116:	4291      	cmp	r1, r2
 800a118:	f100 33ff 	add.w	r3, r0, #4294967295
 800a11c:	d100      	bne.n	800a120 <memcpy+0xc>
 800a11e:	4770      	bx	lr
 800a120:	b510      	push	{r4, lr}
 800a122:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a12a:	4291      	cmp	r1, r2
 800a12c:	d1f9      	bne.n	800a122 <memcpy+0xe>
 800a12e:	bd10      	pop	{r4, pc}

0800a130 <sqrtf>:
 800a130:	b508      	push	{r3, lr}
 800a132:	ed2d 8b02 	vpush	{d8}
 800a136:	eeb0 8a40 	vmov.f32	s16, s0
 800a13a:	f000 f817 	bl	800a16c <__ieee754_sqrtf>
 800a13e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a146:	d60c      	bvs.n	800a162 <sqrtf+0x32>
 800a148:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a168 <sqrtf+0x38>
 800a14c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a154:	d505      	bpl.n	800a162 <sqrtf+0x32>
 800a156:	f7ff ffb3 	bl	800a0c0 <__errno>
 800a15a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a15e:	2321      	movs	r3, #33	@ 0x21
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	ecbd 8b02 	vpop	{d8}
 800a166:	bd08      	pop	{r3, pc}
 800a168:	00000000 	.word	0x00000000

0800a16c <__ieee754_sqrtf>:
 800a16c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a170:	4770      	bx	lr
	...

0800a174 <_init>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr

0800a180 <_fini>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr
