
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111b4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08011390  08011390  00012390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080117e8  080117e8  00013268  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080117e8  080117e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080117f0  080117f0  00013268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080117f0  080117f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080117f4  080117f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000268  20000000  080117f8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d04  20000268  08011a60  00013268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001f6c  08011a60  00013f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013268  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b76  00000000  00000000  00013298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6a  00000000  00000000  0003ce0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00041b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001682  00000000  00000000  00043878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b510  00000000  00000000  00044efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002872b  00000000  00000000  0007040a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011acd0  00000000  00000000  00098b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b3805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085a8  00000000  00000000  001b3848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001bbdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000268 	.word	0x20000268
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08011374 	.word	0x08011374

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000026c 	.word	0x2000026c
 8000214:	08011374 	.word	0x08011374

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b988 	b.w	8001114 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	468e      	mov	lr, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	d962      	bls.n	8000ef8 <__udivmoddi4+0xdc>
 8000e32:	fab2 f682 	clz	r6, r2
 8000e36:	b14e      	cbz	r6, 8000e4c <__udivmoddi4+0x30>
 8000e38:	f1c6 0320 	rsb	r3, r6, #32
 8000e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	ea43 0808 	orr.w	r8, r3, r8
 8000e4a:	40b4      	lsls	r4, r6
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fb01 f20c 	mul.w	r2, r1, ip
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e70:	f080 80ea 	bcs.w	8001048 <__udivmoddi4+0x22c>
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f240 80e7 	bls.w	8001048 <__udivmoddi4+0x22c>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	1a9a      	subs	r2, r3, r2
 8000e80:	b2a3      	uxth	r3, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e92:	459c      	cmp	ip, r3
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x8e>
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	f080 80d6 	bcs.w	800104c <__udivmoddi4+0x230>
 8000ea0:	459c      	cmp	ip, r3
 8000ea2:	f240 80d3 	bls.w	800104c <__udivmoddi4+0x230>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eae:	eba3 030c 	sub.w	r3, r3, ip
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40f3      	lsrs	r3, r6
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xb6>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb0>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x14c>
 8000eda:	4573      	cmp	r3, lr
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xc8>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 8105 	bhi.w	80010ee <__udivmoddi4+0x2d2>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	4690      	mov	r8, r2
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0e5      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ef6:	e7e2      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	f000 8090 	beq.w	800101e <__udivmoddi4+0x202>
 8000efe:	fab2 f682 	clz	r6, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f040 80a4 	bne.w	8001050 <__udivmoddi4+0x234>
 8000f08:	1a8a      	subs	r2, r1, r2
 8000f0a:	0c03      	lsrs	r3, r0, #16
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f22:	fb04 f20c 	mul.w	r2, r4, ip
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x11e>
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x11c>
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f200 80e0 	bhi.w	80010f8 <__udivmoddi4+0x2dc>
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f48:	fb02 f404 	mul.w	r4, r2, r4
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x144>
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x142>
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	f200 80ca 	bhi.w	80010f2 <__udivmoddi4+0x2d6>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	1b1b      	subs	r3, r3, r4
 8000f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa0e f401 	lsl.w	r4, lr, r1
 8000f78:	fa20 f306 	lsr.w	r3, r0, r6
 8000f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	fa1f fc87 	uxth.w	ip, r7
 8000f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000f92:	0c1c      	lsrs	r4, r3, #16
 8000f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x1a0>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fae:	f080 809c 	bcs.w	80010ea <__udivmoddi4+0x2ce>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f240 8099 	bls.w	80010ea <__udivmoddi4+0x2ce>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	eba4 040e 	sub.w	r4, r4, lr
 8000fc0:	fa1f fe83 	uxth.w	lr, r3
 8000fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x1ce>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fde:	f080 8082 	bcs.w	80010e6 <__udivmoddi4+0x2ca>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d97f      	bls.n	80010e6 <__udivmoddi4+0x2ca>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fee:	eba4 040c 	sub.w	r4, r4, ip
 8000ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ff6:	4564      	cmp	r4, ip
 8000ff8:	4673      	mov	r3, lr
 8000ffa:	46e1      	mov	r9, ip
 8000ffc:	d362      	bcc.n	80010c4 <__udivmoddi4+0x2a8>
 8000ffe:	d05f      	beq.n	80010c0 <__udivmoddi4+0x2a4>
 8001000:	b15d      	cbz	r5, 800101a <__udivmoddi4+0x1fe>
 8001002:	ebb8 0203 	subs.w	r2, r8, r3
 8001006:	eb64 0409 	sbc.w	r4, r4, r9
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	fa22 f301 	lsr.w	r3, r2, r1
 8001012:	431e      	orrs	r6, r3
 8001014:	40cc      	lsrs	r4, r1
 8001016:	e9c5 6400 	strd	r6, r4, [r5]
 800101a:	2100      	movs	r1, #0
 800101c:	e74f      	b.n	8000ebe <__udivmoddi4+0xa2>
 800101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8001022:	0c01      	lsrs	r1, r0, #16
 8001024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001028:	b280      	uxth	r0, r0
 800102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800102e:	463b      	mov	r3, r7
 8001030:	4638      	mov	r0, r7
 8001032:	463c      	mov	r4, r7
 8001034:	46b8      	mov	r8, r7
 8001036:	46be      	mov	lr, r7
 8001038:	2620      	movs	r6, #32
 800103a:	fbb1 f1f7 	udiv	r1, r1, r7
 800103e:	eba2 0208 	sub.w	r2, r2, r8
 8001042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001046:	e766      	b.n	8000f16 <__udivmoddi4+0xfa>
 8001048:	4601      	mov	r1, r0
 800104a:	e718      	b.n	8000e7e <__udivmoddi4+0x62>
 800104c:	4610      	mov	r0, r2
 800104e:	e72c      	b.n	8000eaa <__udivmoddi4+0x8e>
 8001050:	f1c6 0220 	rsb	r2, r6, #32
 8001054:	fa2e f302 	lsr.w	r3, lr, r2
 8001058:	40b7      	lsls	r7, r6
 800105a:	40b1      	lsls	r1, r6
 800105c:	fa20 f202 	lsr.w	r2, r0, r2
 8001060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001064:	430a      	orrs	r2, r1
 8001066:	fbb3 f8fe 	udiv	r8, r3, lr
 800106a:	b2bc      	uxth	r4, r7
 800106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8001070:	0c11      	lsrs	r1, r2, #16
 8001072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001076:	fb08 f904 	mul.w	r9, r8, r4
 800107a:	40b0      	lsls	r0, r6
 800107c:	4589      	cmp	r9, r1
 800107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001082:	b280      	uxth	r0, r0
 8001084:	d93e      	bls.n	8001104 <__udivmoddi4+0x2e8>
 8001086:	1879      	adds	r1, r7, r1
 8001088:	f108 3cff 	add.w	ip, r8, #4294967295
 800108c:	d201      	bcs.n	8001092 <__udivmoddi4+0x276>
 800108e:	4589      	cmp	r9, r1
 8001090:	d81f      	bhi.n	80010d2 <__udivmoddi4+0x2b6>
 8001092:	eba1 0109 	sub.w	r1, r1, r9
 8001096:	fbb1 f9fe 	udiv	r9, r1, lr
 800109a:	fb09 f804 	mul.w	r8, r9, r4
 800109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80010a2:	b292      	uxth	r2, r2
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	4542      	cmp	r2, r8
 80010aa:	d229      	bcs.n	8001100 <__udivmoddi4+0x2e4>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80010b2:	d2c4      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b4:	4542      	cmp	r2, r8
 80010b6:	d2c2      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b8:	f1a9 0102 	sub.w	r1, r9, #2
 80010bc:	443a      	add	r2, r7
 80010be:	e7be      	b.n	800103e <__udivmoddi4+0x222>
 80010c0:	45f0      	cmp	r8, lr
 80010c2:	d29d      	bcs.n	8001000 <__udivmoddi4+0x1e4>
 80010c4:	ebbe 0302 	subs.w	r3, lr, r2
 80010c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010cc:	3801      	subs	r0, #1
 80010ce:	46e1      	mov	r9, ip
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1e4>
 80010d2:	eba7 0909 	sub.w	r9, r7, r9
 80010d6:	4449      	add	r1, r9
 80010d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7db      	b.n	800109e <__udivmoddi4+0x282>
 80010e6:	4673      	mov	r3, lr
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1ce>
 80010ea:	4650      	mov	r0, sl
 80010ec:	e766      	b.n	8000fbc <__udivmoddi4+0x1a0>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e6fd      	b.n	8000eee <__udivmoddi4+0xd2>
 80010f2:	443b      	add	r3, r7
 80010f4:	3a02      	subs	r2, #2
 80010f6:	e733      	b.n	8000f60 <__udivmoddi4+0x144>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	443b      	add	r3, r7
 80010fe:	e71c      	b.n	8000f3a <__udivmoddi4+0x11e>
 8001100:	4649      	mov	r1, r9
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x222>
 8001104:	eba1 0109 	sub.w	r1, r1, r9
 8001108:	46c4      	mov	ip, r8
 800110a:	fbb1 f9fe 	udiv	r9, r1, lr
 800110e:	fb09 f804 	mul.w	r8, r9, r4
 8001112:	e7c4      	b.n	800109e <__udivmoddi4+0x282>

08001114 <__aeabi_idiv0>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <sign>:
#include <math.h>

/**
 * @brief Sign function: returns +1, -1, or 0 based on input value.
 */
int8_t sign(float32_t x) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0.0f) {
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd01      	ble.n	8001134 <sign+0x1c>
        return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e00a      	b.n	800114a <sign+0x32>
    } else if (x < 0.0f) {
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d502      	bpl.n	8001148 <sign+0x30>
        return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <sign+0x32>
    } else {
        return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Backlash_Update>:
 * @param pos_ref Desired reference position.
 * @param pos_act Actual measured position.
 * @param vel Measured or estimated velocity.
 * @return Compensated position to use in control.
 */
float32_t Backlash_Update(BacklashController *ctrl, float32_t pos_ref, float32_t pos_act, float32_t vel) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	60f8      	str	r0, [r7, #12]
 800115e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001162:	edc7 0a01 	vstr	s1, [r7, #4]
 8001166:	ed87 1a00 	vstr	s2, [r7]
    int8_t direction_now = sign(vel);
 800116a:	ed97 0a00 	vldr	s0, [r7]
 800116e:	f7ff ffd3 	bl	8001118 <sign>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]

    // Detect direction change
    if (direction_now != ctrl->direction_prev && direction_now != 0) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800117c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8001180:	429a      	cmp	r2, r3
 8001182:	d01a      	beq.n	80011ba <Backlash_Update+0x64>
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d016      	beq.n	80011ba <Backlash_Update+0x64>
        ctrl->direction_prev = direction_now;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	7dfa      	ldrb	r2, [r7, #23]
 8001190:	721a      	strb	r2, [r3, #8]
        ctrl->state = TRANSITION;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	725a      	strb	r2, [r3, #9]

        if (direction_now > 0) {
 8001198:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd04      	ble.n	80011aa <Backlash_Update+0x54>
            ctrl->backlash_offset = ctrl->backlash_width;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	e007      	b.n	80011ba <Backlash_Update+0x64>
        } else {
            ctrl->backlash_offset = -ctrl->backlash_width;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eef1 7a67 	vneg.f32	s15, s15
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }

    // Apply backlash offset to reference
    float32_t pos_ref_compensated = pos_ref + ctrl->backlash_offset;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80011c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if backlash has been taken up
    if (ctrl->state == TRANSITION) {
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d11e      	bne.n	8001214 <Backlash_Update+0xbe>
        if (fabsf(pos_ref - pos_act) >= ctrl->backlash_width) {
 80011d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011da:	edd7 7a01 	vldr	s15, [r7, #4]
 80011de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011e2:	eeb0 7ae7 	vabs.f32	s14, s15
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	db0e      	blt.n	8001214 <Backlash_Update+0xbe>
            if (direction_now > 0) {
 80011f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	dd03      	ble.n	8001206 <Backlash_Update+0xb0>
                ctrl->state = ENGAGED_POS;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2201      	movs	r2, #1
 8001202:	725a      	strb	r2, [r3, #9]
 8001204:	e002      	b.n	800120c <Backlash_Update+0xb6>
            } else {
                ctrl->state = ENGAGED_NEG;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	22ff      	movs	r2, #255	@ 0xff
 800120a:	725a      	strb	r2, [r3, #9]
            }
            ctrl->backlash_offset = 0.0f;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
        }
    }

    return pos_ref_compensated;
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	ee07 3a90 	vmov	s15, r3
}
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <modbus_heartbeat>:

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
}

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	//if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001234:	801a      	strh	r2, [r3, #0]
	//}
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 8001242:	b480      	push	{r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	3302      	adds	r3, #2
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	73fb      	strb	r3, [r7, #15]
	return status;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <modbus_servo_Status>:

void modbus_servo_Status(ModbusHandleTypedef *hmodbus, uint8_t Pen_status) {
 8001262:	b480      	push	{r7}
 8001264:	b083      	sub	sp, #12
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	460b      	mov	r3, r1
 800126c:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x03].U16 = Pen_status;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	3306      	adds	r3, #6
 8001274:	78fa      	ldrb	r2, [r7, #3]
 8001276:	b292      	uxth	r2, r2
 8001278:	801a      	strh	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <modbus_write_servo_up>:

uint8_t modbus_write_servo_up(ModbusHandleTypedef *hmodbus) {
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x04].U16;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	3308      	adds	r3, #8
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	73fb      	strb	r3, [r7, #15]
//	if (status == 1) {
//		if (hmodbus->RegisterAddress[0x05].U16 == 1) {
//			hmodbus->RegisterAddress[0x05].U16 = 0;
//		}
//	}
	return status;
 8001298:	7bfb      	ldrb	r3, [r7, #15]

}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <modbus_write_servo_down>:
uint8_t modbus_write_servo_down(ModbusHandleTypedef *hmodbus) {
 80012a6:	b480      	push	{r7}
 80012a8:	b085      	sub	sp, #20
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x05].U16;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	330a      	adds	r3, #10
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	73fb      	strb	r3, [r7, #15]
//		if (hmodbus->RegisterAddress[0x04].U16 == 1) {
//			hmodbus->RegisterAddress[0x04].U16 = 0;
//		}
//
//	}
	return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <R_Theta_moving_Status>:

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	3320      	adds	r3, #32
 80012d8:	78fa      	ldrb	r2, [r7, #3]
 80012da:	b292      	uxth	r2, r2
 80012dc:	801a      	strh	r2, [r3, #0]
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 80012ea:	b590      	push	{r4, r7, lr}
 80012ec:	b089      	sub	sp, #36	@ 0x24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	61f8      	str	r0, [r7, #28]
 80012f2:	ed87 0a06 	vstr	s0, [r7, #24]
 80012f6:	edc7 0a05 	vstr	s1, [r7, #20]
 80012fa:	ed87 1a04 	vstr	s2, [r7, #16]
 80012fe:	edc7 1a03 	vstr	s3, [r7, #12]
 8001302:	ed87 2a02 	vstr	s4, [r7, #8]
 8001306:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = format_robot_to_base(r_pos);
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f103 0422 	add.w	r4, r3, #34	@ 0x22
 8001312:	ed97 0a06 	vldr	s0, [r7, #24]
 8001316:	f000 fd0d 	bl	8001d34 <format_robot_to_base>
 800131a:	4603      	mov	r3, r0
 800131c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x12].U16 = format_robot_to_base(theta_pos);
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8001326:	ed97 0a05 	vldr	s0, [r7, #20]
 800132a:	f000 fd03 	bl	8001d34 <format_robot_to_base>
 800132e:	4603      	mov	r3, r0
 8001330:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x13].U16 = format_robot_to_base(r_Velo);
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800133a:	ed97 0a04 	vldr	s0, [r7, #16]
 800133e:	f000 fcf9 	bl	8001d34 <format_robot_to_base>
 8001342:	4603      	mov	r3, r0
 8001344:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x14].U16 = format_robot_to_base(theta_Velo);
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800134e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001352:	f000 fcef 	bl	8001d34 <format_robot_to_base>
 8001356:	4603      	mov	r3, r0
 8001358:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x15].U16 = format_robot_to_base(r_accel);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f103 042a 	add.w	r4, r3, #42	@ 0x2a
 8001362:	ed97 0a02 	vldr	s0, [r7, #8]
 8001366:	f000 fce5 	bl	8001d34 <format_robot_to_base>
 800136a:	4603      	mov	r3, r0
 800136c:	8023      	strh	r3, [r4, #0]
	hmodbus->RegisterAddress[0x16].U16 = format_robot_to_base(theta_accel);
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 8001376:	ed97 0a01 	vldr	s0, [r7, #4]
 800137a:	f000 fcdb 	bl	8001d34 <format_robot_to_base>
 800137e:	4603      	mov	r3, r0
 8001380:	8023      	strh	r3, [r4, #0]
}
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	@ 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd90      	pop	{r4, r7, pc}

0800138a <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) //
{
 800138a:	b590      	push	{r4, r7, lr}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	ed87 0a02 	vstr	s0, [r7, #8]
 8001396:	edc7 0a01 	vstr	s1, [r7, #4]
 800139a:	460b      	mov	r3, r1
 800139c:	70fb      	strb	r3, [r7, #3]
	if (index >= 0 && index <= 9) {
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	d818      	bhi.n	80013d6 <set_Target_Position_ten_points+0x4c>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = format_robot_to_base(
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	3310      	adds	r3, #16
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	18d4      	adds	r4, r2, r3
 80013b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b4:	f000 fcbe 	bl	8001d34 <format_robot_to_base>
 80013b8:	4603      	mov	r3, r0
 80013ba:	8023      	strh	r3, [r4, #0]
				r_pos);
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	3321      	adds	r3, #33	@ 0x21
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	18d4      	adds	r4, r2, r3
				format_robot_to_base(theta_pos);
 80013ca:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ce:	f000 fcb1 	bl	8001d34 <format_robot_to_base>
 80013d2:	4603      	mov	r3, r0
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 =
 80013d4:	8023      	strh	r3, [r4, #0]
	}
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}

080013de <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	3380      	adds	r3, #128	@ 0x80
 80013ec:	881b      	ldrh	r3, [r3, #0]
 80013ee:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_r_position);
 80013f0:	89fb      	ldrh	r3, [r7, #14]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fcc0 	bl	8001d78 <format_base_to_robot>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001400:	ee17 3a90 	vmov	r3, s15
 8001404:	b29b      	uxth	r3, r3
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	3382      	adds	r3, #130	@ 0x82
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	81fb      	strh	r3, [r7, #14]
	return format_base_to_robot(goal_theta_position);
 8001420:	89fb      	ldrh	r3, [r7, #14]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fca8 	bl	8001d78 <format_base_to_robot>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001430:	ee17 3a90 	vmov	r3, s15
 8001434:	b29b      	uxth	r3, r3
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <Coordinate_Base_to_Robot>:

Robot_goal_point Coordinate_Base_to_Robot(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b090      	sub	sp, #64	@ 0x40
 8001444:	af00      	add	r7, sp, #0
 8001446:	6178      	str	r0, [r7, #20]
 8001448:	ed87 0a04 	vstr	s0, [r7, #16]
 800144c:	edc7 0a03 	vstr	s1, [r7, #12]

	Goal_point->r_goal_position = 0;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	605a      	str	r2, [r3, #4]

	float prismatic_pos;
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f7ff f83d 	bl	80004e0 <__aeabi_f2d>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	ed9f 1bd3 	vldr	d1, [pc, #844]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 800146e:	ec43 2b10 	vmov	d0, r2, r3
 8001472:	f00e f913 	bl	800f69c <pow>
 8001476:	ec51 0b10 	vmov	r0, r1, d0
 800147a:	a3d1      	add	r3, pc, #836	@ (adr r3, 80017c0 <Coordinate_Base_to_Robot+0x380>)
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	f7fe fed0 	bl	8000224 <__adddf3>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	4610      	mov	r0, r2
 800148a:	4619      	mov	r1, r3
 800148c:	f7ff fb50 	bl	8000b30 <__aeabi_d2f>
 8001490:	4603      	mov	r3, r0
 8001492:	63bb      	str	r3, [r7, #56]	@ 0x38
	float gamma = 2 * r_position * Offet;
 8001494:	edd7 7a04 	vldr	s15, [r7, #16]
 8001498:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800149c:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 80017c8 <Coordinate_Base_to_Robot+0x388>
 80014a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	db35      	blt.n	8001522 <Coordinate_Base_to_Robot+0xe2>
 80014b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ba:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	d82c      	bhi.n	8001522 <Coordinate_Base_to_Robot+0xe2>
			{
		//Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90)));
 80014c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014cc:	ed9f 7ac4 	vldr	s14, [pc, #784]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 80014d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f000 fc02 	bl	8001ce0 <degree_to_rad>
 80014dc:	eef0 7a40 	vmov.f32	s15, s0
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f00e f9c0 	bl	800f868 <cosf>
 80014e8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ec:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7fe ffee 	bl	80004e0 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b10 	vmov	d0, r2, r3
 800150c:	f00e f936 	bl	800f77c <sqrt>
 8001510:	ec53 2b10 	vmov	r2, r3, d0
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb0a 	bl	8000b30 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001520:	e0b9      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position + 90));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
 8001526:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	db35      	blt.n	80015a0 <Coordinate_Base_to_Robot+0x160>
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d82c      	bhi.n	80015a0 <Coordinate_Base_to_Robot+0x160>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 8001546:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f000 fbc3 	bl	8001ce0 <degree_to_rad>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	f00e f981 	bl	800f868 <cosf>
 8001566:	eeb0 7a40 	vmov.f32	s14, s0
 800156a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800156e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001572:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157a:	ee17 0a90 	vmov	r0, s15
 800157e:	f7fe ffaf 	bl	80004e0 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	ec43 2b10 	vmov	d0, r2, r3
 800158a:	f00e f8f7 	bl	800f77c <sqrt>
 800158e:	ec53 2b10 	vmov	r2, r3, d0
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff facb 	bl	8000b30 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800159e:	e07a      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(180 - theta_position));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 80015a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ac:	d835      	bhi.n	800161a <Coordinate_Base_to_Robot+0x1da>
 80015ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b2:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80017cc <Coordinate_Base_to_Robot+0x38c>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	db2c      	blt.n	800161a <Coordinate_Base_to_Robot+0x1da>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 80015c0:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 80015c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	f000 fb86 	bl	8001ce0 <degree_to_rad>
 80015d4:	eef0 7a40 	vmov.f32	s15, s0
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	f00e f944 	bl	800f868 <cosf>
 80015e0:	eeb0 7a40 	vmov.f32	s14, s0
 80015e4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80015f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f4:	ee17 0a90 	vmov	r0, s15
 80015f8:	f7fe ff72 	bl	80004e0 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	ec43 2b10 	vmov	d0, r2, r3
 8001604:	f00e f8ba 	bl	800f77c <sqrt>
 8001608:	ec53 2b10 	vmov	r2, r3, d0
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7ff fa8e 	bl	8000b30 <__aeabi_d2f>
 8001614:	4603      	mov	r3, r0
 8001616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001618:	e03d      	b.n	8001696 <Coordinate_Base_to_Robot+0x256>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position - 90));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 800161a:	edd7 7a03 	vldr	s15, [r7, #12]
 800161e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80017cc <Coordinate_Base_to_Robot+0x38c>
 8001622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162a:	d834      	bhi.n	8001696 <Coordinate_Base_to_Robot+0x256>
 800162c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001630:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 80017d0 <Coordinate_Base_to_Robot+0x390>
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	db2b      	blt.n	8001696 <Coordinate_Base_to_Robot+0x256>
			{
//		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(90 - theta_position));
		prismatic_pos = sqrt(beta - gamma * cosf(degree_to_rad(270 - theta_position)));
 800163e:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 8001642:	edd7 7a03 	vldr	s15, [r7, #12]
 8001646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	f000 fb47 	bl	8001ce0 <degree_to_rad>
 8001652:	eef0 7a40 	vmov.f32	s15, s0
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f00e f905 	bl	800f868 <cosf>
 800165e:	eeb0 7a40 	vmov.f32	s14, s0
 8001662:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800166e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001672:	ee17 0a90 	vmov	r0, s15
 8001676:	f7fe ff33 	bl	80004e0 <__aeabi_f2d>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	ec43 2b10 	vmov	d0, r2, r3
 8001682:	f00e f87b 	bl	800f77c <sqrt>
 8001686:	ec53 2b10 	vmov	r2, r3, d0
 800168a:	4610      	mov	r0, r2
 800168c:	4619      	mov	r1, r3
 800168e:	f7ff fa4f 	bl	8000b30 <__aeabi_d2f>
 8001692:	4603      	mov	r3, r0
 8001694:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}

	float up = pow(r_position, 2) - pow(prismatic_pos, 2) - pow(Offet, 2);
 8001696:	6938      	ldr	r0, [r7, #16]
 8001698:	f7fe ff22 	bl	80004e0 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	ed9f 1b45 	vldr	d1, [pc, #276]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 80016a4:	ec43 2b10 	vmov	d0, r2, r3
 80016a8:	f00d fff8 	bl	800f69c <pow>
 80016ac:	ec55 4b10 	vmov	r4, r5, d0
 80016b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80016b2:	f7fe ff15 	bl	80004e0 <__aeabi_f2d>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	ed9f 1b3f 	vldr	d1, [pc, #252]	@ 80017b8 <Coordinate_Base_to_Robot+0x378>
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d ffeb 	bl	800f69c <pow>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe fda7 	bl	8000220 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	a339      	add	r3, pc, #228	@ (adr r3, 80017c0 <Coordinate_Base_to_Robot+0x380>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fd9e 	bl	8000220 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fa20 	bl	8000b30 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	633b      	str	r3, [r7, #48]	@ 0x30
	float down = -2 * prismatic_pos * Offet;
 80016f4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80016f8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80016fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001700:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80017c8 <Coordinate_Base_to_Robot+0x388>
 8001704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001708:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float arc = acosf(up/down);
 800170c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001710:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001714:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001718:	eeb0 0a66 	vmov.f32	s0, s13
 800171c:	f00e f85a 	bl	800f7d4 <acosf>
 8001720:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float alpha = rad_to_degree(arc);
 8001724:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001728:	f000 faae 	bl	8001c88 <rad_to_degree>
 800172c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 8001730:	edd7 7a03 	vldr	s15, [r7, #12]
 8001734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	db18      	blt.n	8001770 <Coordinate_Base_to_Robot+0x330>
 800173e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001742:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	d80f      	bhi.n	8001770 <Coordinate_Base_to_Robot+0x330>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 8001750:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001754:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	f000 fabe 	bl	8001ce0 <degree_to_rad>
 8001764:	eef0 7a40 	vmov.f32	s15, s0
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	edc3 7a01 	vstr	s15, [r3, #4]
 800176e:	e07c      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position + 90))));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001770:	edd7 7a03 	vldr	s15, [r7, #12]
 8001774:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	db30      	blt.n	80017e4 <Coordinate_Base_to_Robot+0x3a4>
 8001782:	edd7 7a03 	vldr	s15, [r7, #12]
 8001786:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 800178a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800178e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001792:	d827      	bhi.n	80017e4 <Coordinate_Base_to_Robot+0x3a4>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001794:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001798:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 800179c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a0:	eeb0 0a67 	vmov.f32	s0, s15
 80017a4:	f000 fa9c 	bl	8001ce0 <degree_to_rad>
 80017a8:	eef0 7a40 	vmov.f32	s15, s0
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	edc3 7a01 	vstr	s15, [r3, #4]
 80017b2:	e05a      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
 80017b4:	f3af 8000 	nop.w
 80017b8:	00000000 	.word	0x00000000
 80017bc:	40000000 	.word	0x40000000
 80017c0:	00000000 	.word	0x00000000
 80017c4:	41058880 	.word	0x41058880
 80017c8:	43d20000 	.word	0x43d20000
 80017cc:	c2b40000 	.word	0xc2b40000
 80017d0:	c3340000 	.word	0xc3340000
 80017d4:	43340000 	.word	0x43340000
 80017d8:	43870000 	.word	0x43870000
 80017dc:	43b40000 	.word	0x43b40000
 80017e0:	42b40000 	.word	0x42b40000
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(180 - theta_position))));
	} else if (theta_position <= 180 && theta_position >= 270) // quadrant 3
 80017e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017e8:	ed1f 7a06 	vldr	s14, [pc, #-24]	@ 80017d4 <Coordinate_Base_to_Robot+0x394>
 80017ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f4:	d818      	bhi.n	8001828 <Coordinate_Base_to_Robot+0x3e8>
 80017f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017fa:	ed1f 7a09 	vldr	s14, [pc, #-36]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	db0f      	blt.n	8001828 <Coordinate_Base_to_Robot+0x3e8>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001808:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800180c:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	f000 fa62 	bl	8001ce0 <degree_to_rad>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	edc3 7a01 	vstr	s15, [r3, #4]
 8001826:	e020      	b.n	800186a <Coordinate_Base_to_Robot+0x42a>
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(theta_position - 90))));
	} else if (theta_position <= 270 && theta_position >= 360) // quadrant 4
 8001828:	edd7 7a03 	vldr	s15, [r7, #12]
 800182c:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80017d8 <Coordinate_Base_to_Robot+0x398>
 8001830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001838:	d817      	bhi.n	800186a <Coordinate_Base_to_Robot+0x42a>
 800183a:	edd7 7a03 	vldr	s15, [r7, #12]
 800183e:	ed1f 7a19 	vldr	s14, [pc, #-100]	@ 80017dc <Coordinate_Base_to_Robot+0x39c>
 8001842:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	db0e      	blt.n	800186a <Coordinate_Base_to_Robot+0x42a>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 800184c:	ed1f 7a1c 	vldr	s14, [pc, #-112]	@ 80017e0 <Coordinate_Base_to_Robot+0x3a0>
 8001850:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f000 fa40 	bl	8001ce0 <degree_to_rad>
 8001860:	eef0 7a40 	vmov.f32	s15, s0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	edc3 7a01 	vstr	s15, [r3, #4]
//		prismatic_pos = format_base_to_robot(sqrt(beta - gamma * cosf(degree_to_rad(90 - theta_position))));
	}

//	Goal_point->r_goal_position = format_base_to_robot(prismatic_pos);
	Goal_point->r_goal_position = prismatic_pos;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800186e:	601a      	str	r2, [r3, #0]

	return *Goal_point;
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	f107 031c 	add.w	r3, r7, #28
 8001876:	e892 0003 	ldmia.w	r2, {r0, r1}
 800187a:	e883 0003 	stmia.w	r3, {r0, r1}
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	ee07 2a10 	vmov	s14, r2
 8001886:	ee07 3a90 	vmov	s15, r3
}
 800188a:	eeb0 0a47 	vmov.f32	s0, s14
 800188e:	eef0 0a67 	vmov.f32	s1, s15
 8001892:	3740      	adds	r7, #64	@ 0x40
 8001894:	46bd      	mov	sp, r7
 8001896:	bdb0      	pop	{r4, r5, r7, pc}

08001898 <Coordinate_Robot_to_Base>:

Robot_goal_point Coordinate_Robot_to_Base(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b092      	sub	sp, #72	@ 0x48
 800189c:	af00      	add	r7, sp, #0
 800189e:	6178      	str	r0, [r7, #20]
 80018a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80018a4:	edc7 0a03 	vstr	s1, [r7, #12]

	float theta_position_deg = rad_to_degree(theta_position);
 80018a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ac:	f000 f9ec 	bl	8001c88 <rad_to_degree>
 80018b0:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	Goal_point->r_goal_position = 0;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]

	int quadrant = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
	if (theta_position_deg >= 0 && theta_position_deg <= 90) {
 80018c8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	db1f      	blt.n	8001916 <Coordinate_Robot_to_Base+0x7e>
 80018d6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80018da:	ed9f 7ad5 	vldr	s14, [pc, #852]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 80018de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e6:	d816      	bhi.n	8001916 <Coordinate_Robot_to_Base+0x7e>
		if (sinf(theta_position) * r_position >= Offet) {
 80018e8:	ed97 0a03 	vldr	s0, [r7, #12]
 80018ec:	f00e f808 	bl	800f900 <sinf>
 80018f0:	eeb0 7a40 	vmov.f32	s14, s0
 80018f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	db02      	blt.n	8001910 <Coordinate_Robot_to_Base+0x78>
			quadrant = 1;
 800190a:	2301      	movs	r3, #1
 800190c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 800190e:	e022      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 4;
 8001910:	2304      	movs	r3, #4
 8001912:	647b      	str	r3, [r7, #68]	@ 0x44
		if (sinf(theta_position) * r_position >= Offet) {
 8001914:	e01f      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		}
	} else {
		if (cosf(theta_position - degree_to_rad(90.0)) * r_position >= Offet) {
 8001916:	ed9f 0ac6 	vldr	s0, [pc, #792]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 800191a:	f000 f9e1 	bl	8001ce0 <degree_to_rad>
 800191e:	eeb0 7a40 	vmov.f32	s14, s0
 8001922:	edd7 7a03 	vldr	s15, [r7, #12]
 8001926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	f00d ff9b 	bl	800f868 <cosf>
 8001932:	eeb0 7a40 	vmov.f32	s14, s0
 8001936:	edd7 7a04 	vldr	s15, [r7, #16]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194a:	db02      	blt.n	8001952 <Coordinate_Robot_to_Base+0xba>
			quadrant = 2;
 800194c:	2302      	movs	r3, #2
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001950:	e001      	b.n	8001956 <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 3;
 8001952:	2303      	movs	r3, #3
 8001954:	647b      	str	r3, [r7, #68]	@ 0x44
		}
	}
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001956:	6938      	ldr	r0, [r7, #16]
 8001958:	f7fe fdc2 	bl	80004e0 <__aeabi_f2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	ed9f 1bab 	vldr	d1, [pc, #684]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001964:	ec43 2b10 	vmov	d0, r2, r3
 8001968:	f00d fe98 	bl	800f69c <pow>
 800196c:	ec51 0b10 	vmov	r0, r1, d0
 8001970:	a3a9      	add	r3, pc, #676	@ (adr r3, 8001c18 <Coordinate_Robot_to_Base+0x380>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fc55 	bl	8000224 <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff f8d5 	bl	8000b30 <__aeabi_d2f>
 8001986:	4603      	mov	r3, r0
 8001988:	637b      	str	r3, [r7, #52]	@ 0x34
	float gamma = -2 * r_position * Offet;
 800198a:	edd7 7a04 	vldr	s15, [r7, #16]
 800198e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 800199a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float Prismatic_pos;
	float theta;
	if (quadrant == 1) // quadrant 1
 80019a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d12a      	bne.n	80019fe <Coordinate_Robot_to_Base+0x166>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 80019a8:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 80019ac:	f000 f998 	bl	8001ce0 <degree_to_rad>
 80019b0:	eeb0 7a40 	vmov.f32	s14, s0
 80019b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	f00d ff52 	bl	800f868 <cosf>
 80019c4:	eeb0 7a40 	vmov.f32	s14, s0
 80019c8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80019d4:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 80019d8:	ee17 0a90 	vmov	r0, s15
 80019dc:	f7fe fd80 	bl	80004e0 <__aeabi_f2d>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	ec43 2b10 	vmov	d0, r2, r3
 80019e8:	f00d fec8 	bl	800f77c <sqrt>
 80019ec:	ec53 2b10 	vmov	r2, r3, d0
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f89c 	bl	8000b30 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80019fc:	e085      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 2) // quadrant 2
 80019fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d12a      	bne.n	8001a5a <Coordinate_Robot_to_Base+0x1c2>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a04:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001a08:	f000 f96a 	bl	8001ce0 <degree_to_rad>
 8001a0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f00d ff24 	bl	800f868 <cosf>
 8001a20:	eeb0 7a40 	vmov.f32	s14, s0
 8001a24:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a30:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001a34:	ee17 0a90 	vmov	r0, s15
 8001a38:	f7fe fd52 	bl	80004e0 <__aeabi_f2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	ec43 2b10 	vmov	d0, r2, r3
 8001a44:	f00d fe9a 	bl	800f77c <sqrt>
 8001a48:	ec53 2b10 	vmov	r2, r3, d0
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f86e 	bl	8000b30 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a58:	e057      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 3) // quadrant 3
 8001a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d12a      	bne.n	8001ab6 <Coordinate_Robot_to_Base+0x21e>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001a60:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001a64:	f000 f93c 	bl	8001ce0 <degree_to_rad>
 8001a68:	eeb0 7a40 	vmov.f32	s14, s0
 8001a6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	f00d fef6 	bl	800f868 <cosf>
 8001a7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a80:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a88:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001a90:	ee17 0a90 	vmov	r0, s15
 8001a94:	f7fe fd24 	bl	80004e0 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f00d fe6c 	bl	800f77c <sqrt>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f840 	bl	8000b30 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ab4:	e029      	b.n	8001b0a <Coordinate_Robot_to_Base+0x272>
	} else  // quadrant 4
	{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001ab6:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001aba:	f000 f911 	bl	8001ce0 <degree_to_rad>
 8001abe:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ace:	f00d fecb 	bl	800f868 <cosf>
 8001ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001ae6:	ee17 0a90 	vmov	r0, s15
 8001aea:	f7fe fcf9 	bl	80004e0 <__aeabi_f2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	ec43 2b10 	vmov	d0, r2, r3
 8001af6:	f00d fe41 	bl	800f77c <sqrt>
 8001afa:	ec53 2b10 	vmov	r2, r3, d0
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f815 	bl	8000b30 <__aeabi_d2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	643b      	str	r3, [r7, #64]	@ 0x40
	}

	float up = pow(r_position, 2) - pow(Prismatic_pos, 2) - pow(Offet, 2);
 8001b0a:	6938      	ldr	r0, [r7, #16]
 8001b0c:	f7fe fce8 	bl	80004e0 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	ed9f 1b3e 	vldr	d1, [pc, #248]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001b18:	ec43 2b10 	vmov	d0, r2, r3
 8001b1c:	f00d fdbe 	bl	800f69c <pow>
 8001b20:	ec55 4b10 	vmov	r4, r5, d0
 8001b24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b26:	f7fe fcdb 	bl	80004e0 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	ed9f 1b38 	vldr	d1, [pc, #224]	@ 8001c10 <Coordinate_Robot_to_Base+0x378>
 8001b32:	ec43 2b10 	vmov	d0, r2, r3
 8001b36:	f00d fdb1 	bl	800f69c <pow>
 8001b3a:	ec53 2b10 	vmov	r2, r3, d0
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fb6d 	bl	8000220 <__aeabi_dsub>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	a332      	add	r3, pc, #200	@ (adr r3, 8001c18 <Coordinate_Robot_to_Base+0x380>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fb64 	bl	8000220 <__aeabi_dsub>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7fe ffe6 	bl	8000b30 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float down = (-2 * Prismatic_pos * Offet);
 8001b68:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001b6c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b74:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001c20 <Coordinate_Robot_to_Base+0x388>
 8001b78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float alpha = acosf(up/down);
 8001b80:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001b84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b88:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b8c:	eeb0 0a66 	vmov.f32	s0, s13
 8001b90:	f00d fe20 	bl	800f7d4 <acosf>
 8001b94:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	if (quadrant == 1) // quadrant 1
 8001b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d116      	bne.n	8001bcc <Coordinate_Robot_to_Base+0x334>
			{
		theta = rad_to_degree(alpha) - 90.0;
 8001b9e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001ba2:	f000 f871 	bl	8001c88 <rad_to_degree>
 8001ba6:	ee10 3a10 	vmov	r3, s0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fc98 	bl	80004e0 <__aeabi_f2d>
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <Coordinate_Robot_to_Base+0x38c>)
 8001bb6:	f7fe fb33 	bl	8000220 <__aeabi_dsub>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ffb5 	bl	8000b30 <__aeabi_d2f>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bca:	e041      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>

	} else if (quadrant == 2) // quadrant 2
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d10c      	bne.n	8001bec <Coordinate_Robot_to_Base+0x354>
			{
		theta = 270 - rad_to_degree(alpha);
 8001bd2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bd6:	f000 f857 	bl	8001c88 <rad_to_degree>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001c28 <Coordinate_Robot_to_Base+0x390>
 8001be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001bea:	e031      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>

	} else if (quadrant == 3) // quadrant 3
 8001bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d120      	bne.n	8001c34 <Coordinate_Robot_to_Base+0x39c>
			{
		theta = -90 - rad_to_degree(alpha);
 8001bf2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bf6:	f000 f847 	bl	8001c88 <rad_to_degree>
 8001bfa:	eef0 7a40 	vmov.f32	s15, s0
 8001bfe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001c2c <Coordinate_Robot_to_Base+0x394>
 8001c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c06:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8001c0a:	e021      	b.n	8001c50 <Coordinate_Robot_to_Base+0x3b8>
 8001c0c:	f3af 8000 	nop.w
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40000000 	.word	0x40000000
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	41058880 	.word	0x41058880
 8001c20:	43d20000 	.word	0x43d20000
 8001c24:	40568000 	.word	0x40568000
 8001c28:	43870000 	.word	0x43870000
 8001c2c:	c2b40000 	.word	0xc2b40000
 8001c30:	42b40000 	.word	0x42b40000
	} else  // quadrant 4
	{
		theta = -1 * (90 - rad_to_degree(alpha));
 8001c34:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001c38:	f000 f826 	bl	8001c88 <rad_to_degree>
 8001c3c:	eef0 7a40 	vmov.f32	s15, s0
 8001c40:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001c30 <Coordinate_Robot_to_Base+0x398>
 8001c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c48:	eef1 7a67 	vneg.f32	s15, s15
 8001c4c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	}
//	Goal_point->r_goal_position = format_robot_to_base(Prismatic_pos);
//	Goal_point->theta_goal_position = format_robot_to_base(theta);
	Goal_point->r_goal_position = Prismatic_pos;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c54:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = theta;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c5a:	605a      	str	r2, [r3, #4]
	return *Goal_point;
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c66:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	6a3b      	ldr	r3, [r7, #32]
 8001c6e:	ee07 2a10 	vmov	s14, r2
 8001c72:	ee07 3a90 	vmov	s15, r3
}
 8001c76:	eeb0 0a47 	vmov.f32	s0, s14
 8001c7a:	eef0 0a67 	vmov.f32	s1, s15
 8001c7e:	3748      	adds	r7, #72	@ 0x48
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	0000      	movs	r0, r0
	...

08001c88 <rad_to_degree>:

float rad_to_degree(float rad) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (rad * 180.0) / 3.142;
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f7fe fc24 	bl	80004e0 <__aeabi_f2d>
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <rad_to_degree+0x50>)
 8001c9e:	f7fe fc77 	bl	8000590 <__aeabi_dmul>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	a309      	add	r3, pc, #36	@ (adr r3, 8001cd0 <rad_to_degree+0x48>)
 8001cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb0:	f7fe fd98 	bl	80007e4 <__aeabi_ddiv>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f7fe ff38 	bl	8000b30 <__aeabi_d2f>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	ee07 3a90 	vmov	s15, r3
}
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	e5604189 	.word	0xe5604189
 8001cd4:	400922d0 	.word	0x400922d0
 8001cd8:	40668000 	.word	0x40668000
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <degree_to_rad>:
float degree_to_rad(float degree) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree * 3.142) / 180.0;
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fbf8 	bl	80004e0 <__aeabi_f2d>
 8001cf0:	a30e      	add	r3, pc, #56	@ (adr r3, 8001d2c <degree_to_rad+0x4c>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fc4b 	bl	8000590 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4610      	mov	r0, r2
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <degree_to_rad+0x48>)
 8001d08:	f7fe fd6c 	bl	80007e4 <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f7fe ff0c 	bl	8000b30 <__aeabi_d2f>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	ee07 3a90 	vmov	s15, r3
}
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40668000 	.word	0x40668000
 8001d2c:	e5604189 	.word	0xe5604189
 8001d30:	400922d0 	.word	0x400922d0

08001d34 <format_robot_to_base>:
uint16_t format_robot_to_base(float degree) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	ed87 0a01 	vstr	s0, [r7, #4]
	return (uint16_t) (roundf(degree) * 10.0);
 8001d3e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d42:	f00d ff0f 	bl	800fb64 <roundf>
 8001d46:	ee10 3a10 	vmov	r3, s0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fbc8 	bl	80004e0 <__aeabi_f2d>
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <format_robot_to_base+0x40>)
 8001d56:	f7fe fc1b 	bl	8000590 <__aeabi_dmul>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4610      	mov	r0, r2
 8001d60:	4619      	mov	r1, r3
 8001d62:	f7fe fec5 	bl	8000af0 <__aeabi_d2uiz>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29b      	uxth	r3, r3
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40240000 	.word	0x40240000

08001d78 <format_base_to_robot>:
float format_base_to_robot(uint16_t degree) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	return (float) (degree / 10.0);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fb99 	bl	80004bc <__aeabi_i2d>
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <format_base_to_robot+0x38>)
 8001d90:	f7fe fd28 	bl	80007e4 <__aeabi_ddiv>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4610      	mov	r0, r2
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f7fe fec8 	bl	8000b30 <__aeabi_d2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	ee07 3a90 	vmov	s15, r3
}
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40240000 	.word	0x40240000

08001db4 <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 10.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001dc4:	213c      	movs	r1, #60	@ 0x3c
 8001dc6:	6838      	ldr	r0, [r7, #0]
 8001dc8:	f008 fde6 	bl	800a998 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1c:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	dd05      	ble.n	8001e3e <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8001e38:	3b60      	subs	r3, #96	@ 0x60
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	e008      	b.n	8001e50 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4a48      	ldr	r2, [pc, #288]	@ (8001f64 <Encoder_Update+0x15c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	da04      	bge.n	8001e50 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001e4c:	3360      	adds	r3, #96	@ 0x60
 8001e4e:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001f68 <Encoder_Update+0x160>
 8001e64:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001e68:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001f6c <Encoder_Update+0x164>
 8001e6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	edd3 7a06 	vldr	s15, [r3, #24]
 8001e86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e8a:	ed97 7a00 	vldr	s14, [r7]
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ea4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ea8:	ed97 7a00 	vldr	s14, [r7]
 8001eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ebc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001f70 <Encoder_Update+0x168>
 8001ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ef0:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001f6c <Encoder_Update+0x164>
 8001ef4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ef8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f16:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f1a:	ed97 7a00 	vldr	s14, [r7]
 8001f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001f34:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f38:	ed97 7a00 	vldr	s14, [r7]
 8001f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	ffff8ad0 	.word	0xffff8ad0
 8001f68:	40c90fda 	.word	0x40c90fda
 8001f6c:	463b8000 	.word	0x463b8000
 8001f70:	42651738 	.word	0x42651738

08001f74 <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	ee07 3a90 	vmov	s15, r3
}
 8001f84:	eeb0 0a67 	vmov.f32	s0, s15
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	ee07 3a90 	vmov	s15, r3
}
 8001fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	ee07 3a90 	vmov	s15, r3
}
 8001fc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	ee07 3a90 	vmov	s15, r3
}
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	ee07 3a90 	vmov	s15, r3
}
 8001ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	ee07 3a90 	vmov	s15, r3
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	ee07 3a90 	vmov	s15, r3
}
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
//	HAL_Delay(1);
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002054:	4811      	ldr	r0, [pc, #68]	@ (800209c <PS2_ReadData+0x54>)
 8002056:	f006 fb2d 	bl	80086b4 <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800205a:	2300      	movs	r3, #0
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	e00f      	b.n	8002080 <PS2_ReadData+0x38>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0f      	ldr	r2, [pc, #60]	@ (80020a0 <PS2_ReadData+0x58>)
 8002064:	1899      	adds	r1, r3, r2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a0e      	ldr	r2, [pc, #56]	@ (80020a4 <PS2_ReadData+0x5c>)
 800206a:	441a      	add	r2, r3
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <PS2_ReadData+0x60>)
 8002076:	f007 fc28 	bl	80098ca <HAL_SPI_TransmitReceive>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b07      	cmp	r3, #7
 8002084:	ddec      	ble.n	8002060 <PS2_ReadData+0x18>
//		HAL_Delay(5);
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800208c:	4803      	ldr	r0, [pc, #12]	@ (800209c <PS2_ReadData+0x54>)
 800208e:	f006 fb11 	bl	80086b4 <HAL_GPIO_WritePin>
//	HAL_Delay(5);
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	48000800 	.word	0x48000800
 80020a0:	20000000 	.word	0x20000000
 80020a4:	20000284 	.word	0x20000284
 80020a8:	2000170c 	.word	0x2000170c

080020ac <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <PS2_ButtonCircle+0x20>)
 80020b2:	791b      	ldrb	r3, [r3, #4]
 80020b4:	f003 0320 	and.w	r3, r3, #32
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	20000284 	.word	0x20000284

080020d0 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 80020d4:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <PS2_ButtonSquare+0x1c>)
 80020d6:	791b      	ldrb	r3, [r3, #4]
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	09db      	lsrs	r3, r3, #7
 80020e0:	b2db      	uxtb	r3, r3
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	20000284 	.word	0x20000284

080020f0 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <PS2_ButtonTriangle+0x20>)
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	20000284 	.word	0x20000284

08002114 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <PS2_ButtonCross+0x20>)
 800211a:	791b      	ldrb	r3, [r3, #4]
 800211c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	20000284 	.word	0x20000284

08002138 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <PS2_ButtonR1+0x20>)
 800213e:	791b      	ldrb	r3, [r3, #4]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20000284 	.word	0x20000284

0800215c <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <PS2_ButtonR2+0x20>)
 8002162:	791b      	ldrb	r3, [r3, #4]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	20000284 	.word	0x20000284

08002180 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <PS2_ButtonSelect+0x20>)
 8002186:	78db      	ldrb	r3, [r3, #3]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
}
 8002196:	4618      	mov	r0, r3
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	20000284 	.word	0x20000284

080021a4 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <PS2_ButtonStart+0x20>)
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	f003 0308 	and.w	r3, r3, #8
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	20000284 	.word	0x20000284

080021c8 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 80021cc:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <PS2_ButtonL2+0x20>)
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf0c      	ite	eq
 80021d8:	2301      	moveq	r3, #1
 80021da:	2300      	movne	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
}
 80021de:	4618      	mov	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	20000284 	.word	0x20000284

080021ec <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3370      	adds	r3, #112	@ 0x70
 80021fa:	2204      	movs	r2, #4
 80021fc:	2104      	movs	r1, #4
 80021fe:	f00c fd88 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f103 0008 	add.w	r0, r3, #8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	33b0      	adds	r3, #176	@ 0xb0
 800220c:	2204      	movs	r2, #4
 800220e:	2104      	movs	r1, #4
 8002210:	f00c fd7f 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f103 0010 	add.w	r0, r3, #16
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	33f0      	adds	r3, #240	@ 0xf0
 800221e:	2204      	movs	r2, #4
 8002220:	2104      	movs	r1, #4
 8002222:	f00c fd76 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f103 0018 	add.w	r0, r3, #24
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8002232:	2204      	movs	r2, #4
 8002234:	2104      	movs	r1, #4
 8002236:	f00c fd6c 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 0020 	add.w	r0, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002246:	2204      	movs	r2, #4
 8002248:	2104      	movs	r1, #4
 800224a:	f00c fd62 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800225a:	2204      	movs	r2, #4
 800225c:	2104      	movs	r1, #4
 800225e:	f00c fd58 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800226e:	2204      	movs	r2, #4
 8002270:	2104      	movs	r1, #4
 8002272:	f00c fd4e 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002282:	2201      	movs	r2, #1
 8002284:	2104      	movs	r1, #4
 8002286:	f00c fd44 	bl	800ed12 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 8002296:	2201      	movs	r2, #1
 8002298:	2104      	movs	r1, #4
 800229a:	f00c fd3a 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80022aa:	2201      	movs	r2, #1
 80022ac:	2104      	movs	r1, #4
 80022ae:	f00c fd30 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80022be:	2201      	movs	r2, #1
 80022c0:	2104      	movs	r1, #4
 80022c2:	f00c fd26 	bl	800ed12 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80022d2:	2204      	movs	r2, #4
 80022d4:	2104      	movs	r1, #4
 80022d6:	f00c fd1c 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80022e6:	2204      	movs	r2, #4
 80022e8:	2104      	movs	r1, #4
 80022ea:	f00c fd12 	bl	800ed12 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80022fa:	2204      	movs	r2, #4
 80022fc:	2104      	movs	r1, #4
 80022fe:	f00c fd08 	bl	800ed12 <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	e00b      	b.n	8002320 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	338c      	adds	r3, #140	@ 0x8c
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	3301      	adds	r3, #1
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b03      	cmp	r3, #3
 8002324:	ddf0      	ble.n	8002308 <Kalman_Init+0x11c>
    }
}
 8002326:	bf00      	nop
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	e01c      	b.n	800237c <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	e013      	b.n	8002370 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d101      	bne.n	8002354 <Kalman_SetProcessNoise+0x24>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	e001      	b.n	8002358 <Kalman_SetProcessNoise+0x28>
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	0091      	lsls	r1, r2, #2
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	440a      	add	r2, r1
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	324c      	adds	r2, #76	@ 0x4c
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	440a      	add	r2, r1
 8002368:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b03      	cmp	r3, #3
 8002374:	dde8      	ble.n	8002348 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	dddf      	ble.n	8002342 <Kalman_SetProcessNoise+0x12>
        }
    }
}
 8002382:	bf00      	nop
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	e01c      	b.n	80023dc <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	e013      	b.n	80023d0 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d101      	bne.n	80023b4 <Kalman_SetMeasurementNoise+0x24>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	e001      	b.n	80023b8 <Kalman_SetMeasurementNoise+0x28>
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	0091      	lsls	r1, r2, #2
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	440a      	add	r2, r1
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	325c      	adds	r2, #92	@ 0x5c
 80023c4:	0092      	lsls	r2, r2, #2
 80023c6:	440a      	add	r2, r1
 80023c8:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	dde8      	ble.n	80023a8 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	dddf      	ble.n	80023a2 <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3358      	adds	r3, #88	@ 0x58
 8002424:	461a      	mov	r2, r3
 8002426:	f00d f803 	bl	800f430 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f103 0008 	add.w	r0, r3, #8
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3360      	adds	r3, #96	@ 0x60
 800243a:	461a      	mov	r2, r3
 800243c:	f00c fff8 	bl	800f430 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3340      	adds	r3, #64	@ 0x40
 8002450:	461a      	mov	r2, r3
 8002452:	f00c fc23 	bl	800ec9c <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3358      	adds	r3, #88	@ 0x58
 8002462:	461a      	mov	r2, r3
 8002464:	f00c ffe4 	bl	800f430 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3360      	adds	r3, #96	@ 0x60
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f00d f892 	bl	800f59a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3328      	adds	r3, #40	@ 0x28
 8002486:	461a      	mov	r2, r3
 8002488:	f00c ffd2 	bl	800f430 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f103 0118 	add.w	r1, r3, #24
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3328      	adds	r3, #40	@ 0x28
 800249c:	461a      	mov	r2, r3
 800249e:	f00c fbfd 	bl	800ec9c <arm_mat_add_f32>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e00e      	b.n	80024d8 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3394      	adds	r3, #148	@ 0x94
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3304      	adds	r3, #4
 80024d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	dded      	ble.n	80024ba <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f103 0210 	add.w	r2, r3, #16
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3360      	adds	r3, #96	@ 0x60
 80024e8:	4619      	mov	r1, r3
 80024ea:	4610      	mov	r0, r2
 80024ec:	f00d f855 	bl	800f59a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3358      	adds	r3, #88	@ 0x58
 8002500:	461a      	mov	r2, r3
 8002502:	f00c ff95 	bl	800f430 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f103 0010 	add.w	r0, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3368      	adds	r3, #104	@ 0x68
 8002516:	461a      	mov	r2, r3
 8002518:	f00c ff8a 	bl	800f430 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f103 0120 	add.w	r1, r3, #32
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3368      	adds	r3, #104	@ 0x68
 800252c:	461a      	mov	r2, r3
 800252e:	f00c fbb5 	bl	800ec9c <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3368      	adds	r3, #104	@ 0x68
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f00c fbff 	bl	800ed42 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3330      	adds	r3, #48	@ 0x30
 8002554:	461a      	mov	r2, r3
 8002556:	f00c ff6b 	bl	800f430 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 0010 	add.w	r0, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3348      	adds	r3, #72	@ 0x48
 800256a:	461a      	mov	r2, r3
 800256c:	f00c ff60 	bl	800f430 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002570:	2300      	movs	r3, #0
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e01c      	b.n	80025b0 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	3394      	adds	r3, #148	@ 0x94
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	3304      	adds	r3, #4
 8002582:	ed93 7a00 	vldr	s14, [r3]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	3390      	adds	r3, #144	@ 0x90
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3390      	adds	r3, #144	@ 0x90
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	dddf      	ble.n	8002576 <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3348      	adds	r3, #72	@ 0x48
 80025c6:	461a      	mov	r2, r3
 80025c8:	f00c ff32 	bl	800f430 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e01c      	b.n	800260c <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	338c      	adds	r3, #140	@ 0x8c
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	3304      	adds	r3, #4
 80025de:	ed93 7a00 	vldr	s14, [r3]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3390      	adds	r3, #144	@ 0x90
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	3304      	adds	r3, #4
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	338c      	adds	r3, #140	@ 0x8c
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3301      	adds	r3, #1
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b03      	cmp	r3, #3
 8002610:	dddf      	ble.n	80025d2 <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e00b      	b.n	8002630 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	3398      	adds	r3, #152	@ 0x98
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	3301      	adds	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b0f      	cmp	r3, #15
 8002634:	ddf0      	ble.n	8002618 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e00e      	b.n	800265a <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4613      	mov	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4413      	add	r3, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	3398      	adds	r3, #152	@ 0x98
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	3304      	adds	r3, #4
 800264e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002652:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	3301      	adds	r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2b03      	cmp	r3, #3
 800265e:	dded      	ble.n	800263c <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f103 0110 	add.w	r1, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3360      	adds	r3, #96	@ 0x60
 8002670:	461a      	mov	r2, r3
 8002672:	f00c fedd 	bl	800f430 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3358      	adds	r3, #88	@ 0x58
 8002686:	461a      	mov	r2, r3
 8002688:	f00c ff4c 	bl	800f524 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3328      	adds	r3, #40	@ 0x28
 800269c:	461a      	mov	r2, r3
 800269e:	f00c fec7 	bl	800f430 <arm_mat_mult_f32>
}
 80026a2:	bf00      	nop
 80026a4:	3720      	adds	r7, #32
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <modbus_1t5_Timeout+0x1c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	751a      	strb	r2, [r3, #20]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	2000028c 	.word	0x2000028c

080026cc <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <modbus_3t5_Timeout+0x1c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2201      	movs	r2, #1
 80026da:	755a      	strb	r2, [r3, #21]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	2000028c 	.word	0x2000028c

080026ec <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <modbus_UART_Recived+0x60>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 80026fe:	4b13      	ldr	r3, [pc, #76]	@ (800274c <modbus_UART_Recived+0x60>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 8002706:	1c59      	adds	r1, r3, #1
 8002708:	b289      	uxth	r1, r1
 800270a:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 800270e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002712:	d210      	bcs.n	8002736 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <modbus_UART_Recived+0x60>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68d8      	ldr	r0, [r3, #12]
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <modbus_UART_Recived+0x60>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <modbus_UART_Recived+0x60>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002726:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800272a:	4413      	add	r3, r2
 800272c:	3302      	adds	r3, #2
 800272e:	2201      	movs	r2, #1
 8002730:	4619      	mov	r1, r3
 8002732:	f009 ff41 	bl	800c5b8 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8002736:	4b05      	ldr	r3, [pc, #20]	@ (800274c <modbus_UART_Recived+0x60>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2200      	movs	r2, #0
 8002740:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	2000028c 	.word	0x2000028c

08002750 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800275a:	4a24      	ldr	r2, [pc, #144]	@ (80027ec <Modbus_init+0x9c>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8002760:	4b22      	ldr	r3, [pc, #136]	@ (80027ec <Modbus_init+0x9c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8002768:	4b20      	ldr	r3, [pc, #128]	@ (80027ec <Modbus_init+0x9c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	4a20      	ldr	r2, [pc, #128]	@ (80027f0 <Modbus_init+0xa0>)
 8002770:	2114      	movs	r1, #20
 8002772:	4618      	mov	r0, r3
 8002774:	f008 fe16 	bl	800b3a4 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8002778:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <Modbus_init+0x9c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <Modbus_init+0xa4>)
 8002780:	210e      	movs	r1, #14
 8002782:	4618      	mov	r0, r3
 8002784:	f008 fe0e 	bl	800b3a4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002788:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <Modbus_init+0x9c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <Modbus_init+0xa8>)
 8002790:	2103      	movs	r1, #3
 8002792:	4618      	mov	r0, r3
 8002794:	f009 fe56 	bl	800c444 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <Modbus_init+0x9c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68d8      	ldr	r0, [r3, #12]
 800279e:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <Modbus_init+0x9c>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <Modbus_init+0x9c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80027aa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80027ae:	4413      	add	r3, r2
 80027b0:	3302      	adds	r3, #2
 80027b2:	2201      	movs	r2, #1
 80027b4:	4619      	mov	r1, r3
 80027b6:	f009 feff 	bl	800c5b8 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80027ba:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <Modbus_init+0x9c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d10c      	bne.n	80027e4 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80027ca:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <Modbus_init+0x9c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f007 fcd1 	bl	800a178 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <Modbus_init+0x9c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f007 ff98 	bl	800a714 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	2000028c 	.word	0x2000028c
 80027f0:	080026ad 	.word	0x080026ad
 80027f4:	080026cd 	.word	0x080026cd
 80027f8:	080026ed 	.word	0x080026ed

080027fc <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002808:	23ff      	movs	r3, #255	@ 0xff
 800280a:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 800280c:	23ff      	movs	r3, #255	@ 0xff
 800280e:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002810:	e013      	b.n	800283a <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	7bbb      	ldrb	r3, [r7, #14]
 800281c:	4053      	eors	r3, r2
 800281e:	b2db      	uxtb	r3, r3
 8002820:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002822:	4a10      	ldr	r2, [pc, #64]	@ (8002864 <CRC16+0x68>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4413      	add	r3, r2
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	4053      	eors	r3, r2
 800282e:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002830:	4a0d      	ldr	r2, [pc, #52]	@ (8002868 <CRC16+0x6c>)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800283a:	883b      	ldrh	r3, [r7, #0]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	803a      	strh	r2, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e6      	bne.n	8002812 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	b21b      	sxth	r3, r3
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	b21a      	sxth	r2, r3
 800284c:	7bbb      	ldrb	r3, [r7, #14]
 800284e:	b21b      	sxth	r3, r3
 8002850:	4313      	orrs	r3, r2
 8002852:	b21b      	sxth	r3, r3
 8002854:	b29b      	uxth	r3, r3
}
 8002856:	4618      	mov	r0, r3
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000108 	.word	0x20000108
 8002868:	20000008 	.word	0x20000008

0800286c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002872:	4b80      	ldr	r3, [pc, #512]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	7e1b      	ldrb	r3, [r3, #24]
 8002878:	3b01      	subs	r3, #1
 800287a:	2b03      	cmp	r3, #3
 800287c:	d80a      	bhi.n	8002894 <Modbus_Protocal_Worker+0x28>
 800287e:	a201      	add	r2, pc, #4	@ (adr r2, 8002884 <Modbus_Protocal_Worker+0x18>)
 8002880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002884:	0800289f 	.word	0x0800289f
 8002888:	08002a3d 	.word	0x08002a3d
 800288c:	08002929 	.word	0x08002929
 8002890:	0800294f 	.word	0x0800294f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002894:	4b77      	ldr	r3, [pc, #476]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	761a      	strb	r2, [r3, #24]
		break;
 800289c:	e0e6      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800289e:	4b75      	ldr	r3, [pc, #468]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80028aa:	f000 f9d5 	bl	8002c58 <Modbus_Emission>
 80028ae:	e01c      	b.n	80028ea <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80028b0:	4b70      	ldr	r3, [pc, #448]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	7d9b      	ldrb	r3, [r3, #22]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d017      	beq.n	80028ea <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80028ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2200      	movs	r2, #0
 80028c0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80028c2:	4b6c      	ldr	r3, [pc, #432]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80028ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b67      	ldr	r3, [pc, #412]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f042 0201 	orr.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80028e2:	4b64      	ldr	r3, [pc, #400]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2203      	movs	r2, #3
 80028e8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80028ea:	4b62      	ldr	r3, [pc, #392]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	f040 80b2 	bne.w	8002a5e <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80028fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002904:	4b5b      	ldr	r3, [pc, #364]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68d8      	ldr	r0, [r3, #12]
 800290a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b59      	ldr	r3, [pc, #356]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002916:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800291a:	4413      	add	r3, r2
 800291c:	3302      	adds	r3, #2
 800291e:	2201      	movs	r2, #1
 8002920:	4619      	mov	r1, r3
 8002922:	f009 fe49 	bl	800c5b8 <HAL_UART_Receive_IT>
		}
		break;
 8002926:	e09a      	b.n	8002a5e <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002928:	4b52      	ldr	r3, [pc, #328]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	7d1b      	ldrb	r3, [r3, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8097 	beq.w	8002a62 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8002934:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2200      	movs	r2, #0
 800293a:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800293c:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	22fe      	movs	r2, #254	@ 0xfe
 8002942:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002944:	4b4b      	ldr	r3, [pc, #300]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	761a      	strb	r2, [r3, #24]
		}
		break;
 800294c:	e089      	b.n	8002a62 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 800294e:	4b49      	ldr	r3, [pc, #292]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	7d9b      	ldrb	r3, [r3, #22]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 8002958:	4b46      	ldr	r3, [pc, #280]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002964:	4b43      	ldr	r3, [pc, #268]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22ff      	movs	r2, #255	@ 0xff
 800296a:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800296c:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8002974:	f113 0f02 	cmn.w	r3, #2
 8002978:	d150      	bne.n	8002a1c <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800297a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002982:	4b3c      	ldr	r3, [pc, #240]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800298a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002992:	3b02      	subs	r3, #2
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f7ff ff30 	bl	80027fc <CRC16>
 800299c:	4603      	mov	r3, r0
 800299e:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029a0:	793a      	ldrb	r2, [r7, #4]
 80029a2:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	4b33      	ldr	r3, [pc, #204]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029ae:	3b02      	subs	r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d10c      	bne.n	80029d4 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80029ba:	797a      	ldrb	r2, [r7, #5]
 80029bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029be:	6819      	ldr	r1, [r3, #0]
 80029c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80029c8:	3b01      	subs	r3, #1
 80029ca:	440b      	add	r3, r1
 80029cc:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d004      	beq.n	80029de <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80029d4:	4b27      	ldr	r3, [pc, #156]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ff      	movs	r2, #255	@ 0xff
 80029da:	75da      	strb	r2, [r3, #23]
				break;
 80029dc:	e046      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80029de:	4b25      	ldr	r3, [pc, #148]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d113      	bne.n	8002a18 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80029f0:	4b20      	ldr	r3, [pc, #128]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80029f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002a00:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a0a:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	f00c fe37 	bl	800f680 <memcpy>

			//execute command
			Modbus_frame_response();
 8002a12:	f000 f909 	bl	8002c28 <Modbus_frame_response>
 8002a16:	e001      	b.n	8002a1c <Modbus_Protocal_Worker+0x1b0>
				break;
 8002a18:	bf00      	nop
					}
		break;


	}
}
 8002a1a:	e027      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8002a1c:	4b15      	ldr	r3, [pc, #84]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	7d5b      	ldrb	r3, [r3, #21]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d01f      	beq.n	8002a66 <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f009 fe8b 	bl	800c750 <HAL_UART_AbortReceive>
		break;
 8002a3a:	e014      	b.n	8002a66 <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	2b20      	cmp	r3, #32
 8002a48:	d10f      	bne.n	8002a6a <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002a54:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <Modbus_Protocal_Worker+0x208>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	761a      	strb	r2, [r3, #24]
		break;
 8002a5c:	e005      	b.n	8002a6a <Modbus_Protocal_Worker+0x1fe>
		break;
 8002a5e:	bf00      	nop
 8002a60:	e004      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <Modbus_Protocal_Worker+0x200>
		break;
 8002a6a:	bf00      	nop
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	2000028c 	.word	0x2000028c

08002a78 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	7e9b      	ldrb	r3, [r3, #26]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4a1a      	ldr	r2, [pc, #104]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	7ed2      	ldrb	r2, [r2, #27]
 8002a8e:	4413      	add	r3, r2
 8002a90:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d903      	bls.n	8002aa6 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002a9e:	2002      	movs	r0, #2
 8002aa0:	f000 f8a0 	bl	8002be4 <ModbusErrorReply>
			 return;
 8002aa4:	e023      	b.n	8002aee <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002aa6:	4b13      	ldr	r3, [pc, #76]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b12      	ldr	r3, [pc, #72]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6859      	ldr	r1, [r3, #4]
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	440b      	add	r3, r1
 8002ab6:	7f12      	ldrb	r2, [r2, #28]
 8002ab8:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002aba:	4b0e      	ldr	r3, [pc, #56]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	440b      	add	r3, r1
 8002aca:	7f52      	ldrb	r2, [r2, #29]
 8002acc:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002ace:	4b09      	ldr	r3, [pc, #36]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8002ad6:	4b07      	ldr	r3, [pc, #28]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002adc:	2208      	movs	r2, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f00c fdce 	bl	800f680 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002ae4:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <modbusWrite1Register+0x7c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2205      	movs	r2, #5
 8002aea:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	2000028c 	.word	0x2000028c

08002af8 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002afe:	4b38      	ldr	r3, [pc, #224]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	7f1b      	ldrb	r3, [r3, #28]
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	4a35      	ldr	r2, [pc, #212]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	7f52      	ldrb	r2, [r2, #29]
 8002b0e:	4413      	add	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002b12:	4b33      	ldr	r3, [pc, #204]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	7e9b      	ldrb	r3, [r3, #26]
 8002b18:	021b      	lsls	r3, r3, #8
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	4a30      	ldr	r2, [pc, #192]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	7ed2      	ldrb	r2, [r2, #27]
 8002b22:	4413      	add	r3, r2
 8002b24:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <modbusRead1Register+0x3a>
 8002b2c:	88fb      	ldrh	r3, [r7, #6]
 8002b2e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002b30:	d903      	bls.n	8002b3a <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002b32:	2003      	movs	r0, #3
 8002b34:	f000 f856 	bl	8002be4 <ModbusErrorReply>
		 return;
 8002b38:	e04e      	b.n	8002bd8 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002b3a:	88ba      	ldrh	r2, [r7, #4]
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d808      	bhi.n	8002b58 <modbusRead1Register+0x60>
 8002b46:	88ba      	ldrh	r2, [r7, #4]
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d903      	bls.n	8002b60 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f000 f843 	bl	8002be4 <ModbusErrorReply>
		 return;
 8002b5e:	e03b      	b.n	8002bd8 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002b60:	4b1f      	ldr	r3, [pc, #124]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002b7a:	2400      	movs	r4, #0
 8002b7c:	e020      	b.n	8002bc0 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	88bb      	ldrh	r3, [r7, #4]
 8002b86:	4423      	add	r3, r4
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	18d1      	adds	r1, r2, r3
 8002b8c:	4b14      	ldr	r3, [pc, #80]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	1c63      	adds	r3, r4, #1
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	7849      	ldrb	r1, [r1, #1]
 8002b96:	4413      	add	r3, r2
 8002b98:	460a      	mov	r2, r1
 8002b9a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002b9e:	4b10      	ldr	r3, [pc, #64]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	4423      	add	r3, r4
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	18d1      	adds	r1, r2, r3
 8002bac:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	0063      	lsls	r3, r4, #1
 8002bb2:	3303      	adds	r3, #3
 8002bb4:	7809      	ldrb	r1, [r1, #0]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	460a      	mov	r2, r1
 8002bba:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8002bbe:	3401      	adds	r4, #1
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	429c      	cmp	r4, r3
 8002bc4:	dbdb      	blt.n	8002b7e <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <modbusRead1Register+0xe8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0052      	lsls	r2, r2, #1
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	2000028c 	.word	0x2000028c

08002be4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	7e5a      	ldrb	r2, [r3, #25]
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	79fa      	ldrb	r2, [r7, #7]
 8002c08:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <ModbusErrorReply+0x40>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2202      	movs	r2, #2
 8002c12:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000028c 	.word	0x2000028c

08002c28 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <Modbus_frame_response+0x2c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	7e5b      	ldrb	r3, [r3, #25]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d004      	beq.n	8002c40 <Modbus_frame_response+0x18>
 8002c36:	2b06      	cmp	r3, #6
 8002c38:	d105      	bne.n	8002c46 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002c3a:	f7ff ff1d 	bl	8002a78 <modbusWrite1Register>
		break;
 8002c3e:	e006      	b.n	8002c4e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002c40:	f7ff ff5a 	bl	8002af8 <modbusRead1Register>
		break;
 8002c44:	e003      	b.n	8002c4e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002c46:	2001      	movs	r0, #1
 8002c48:	f7ff ffcc 	bl	8002be4 <ModbusErrorReply>
		break;
 8002c4c:	bf00      	nop

	}
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000028c 	.word	0x2000028c

08002c58 <Modbus_Emission>:

void Modbus_Emission()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d15d      	bne.n	8002d28 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002c6c:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002c7a:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8002c82:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002c84:	4b32      	ldr	r3, [pc, #200]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8002c8c:	4b30      	ldr	r3, [pc, #192]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8002c94:	461a      	mov	r2, r3
 8002c96:	f00c fcf3 	bl	800f680 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3203      	adds	r2, #3
 8002caa:	b292      	uxth	r2, r2
 8002cac:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cb0:	4b27      	ldr	r3, [pc, #156]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002cb8:	4b25      	ldr	r3, [pc, #148]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002cc0:	3b02      	subs	r3, #2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f7ff fd99 	bl	80027fc <CRC16>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002cce:	4b20      	ldr	r3, [pc, #128]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002cda:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002cdc:	7939      	ldrb	r1, [r7, #4]
 8002cde:	4413      	add	r3, r2
 8002ce0:	460a      	mov	r2, r1
 8002ce2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4b19      	ldr	r3, [pc, #100]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002cf2:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002cf4:	7979      	ldrb	r1, [r7, #5]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	460a      	mov	r2, r1
 8002cfa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002cfe:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	2b20      	cmp	r3, #32
 8002d0a:	d10d      	bne.n	8002d28 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d0c:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002d12:	4b0f      	ldr	r3, [pc, #60]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d1e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d22:	461a      	mov	r2, r3
 8002d24:	f009 fc94 	bl	800c650 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002d28:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002d30:	4b07      	ldr	r3, [pc, #28]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2200      	movs	r2, #0
 8002d36:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002d40:	4b03      	ldr	r3, [pc, #12]	@ (8002d50 <Modbus_Emission+0xf8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2202      	movs	r2, #2
 8002d46:	761a      	strb	r2, [r3, #24]
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000028c 	.word	0x2000028c

08002d54 <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8002d54:	b4b0      	push	{r4, r5, r7}
 8002d56:	b09f      	sub	sp, #124	@ 0x7c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002d5c:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002d60:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002d64:	ed87 2b08 	vstr	d2, [r7, #32]
 8002d68:	ed87 3b06 	vstr	d3, [r7, #24]
 8002d6c:	ed87 4b04 	vstr	d4, [r7, #16]
 8002d70:	ed87 5b02 	vstr	d5, [r7, #8]
 8002d74:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002d78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002d7c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002d80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d84:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002d88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d8c:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002d90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d94:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002d98:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d9c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002da0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002da4:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dac:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8002db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002db2:	461d      	mov	r5, r3
 8002db4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dc8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002dcc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002dce:	377c      	adds	r7, #124	@ 0x7c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bcb0      	pop	{r4, r5, r7}
 8002dd4:	4770      	bx	lr

08002dd6 <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8002dd6:	b4b0      	push	{r4, r5, r7}
 8002dd8:	b09f      	sub	sp, #124	@ 0x7c
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002dde:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002de2:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002de6:	ed87 2b08 	vstr	d2, [r7, #32]
 8002dea:	ed87 3b06 	vstr	d3, [r7, #24]
 8002dee:	ed87 4b04 	vstr	d4, [r7, #16]
 8002df2:	ed87 5b02 	vstr	d5, [r7, #8]
 8002df6:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002dfa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002dfe:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002e02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e06:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e0e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002e12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e16:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e1e:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e26:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e2e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8002e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e34:	461d      	mov	r5, r3
 8002e36:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e4a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002e4e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e50:	377c      	adds	r7, #124	@ 0x7c
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bcb0      	pop	{r4, r5, r7}
 8002e56:	4770      	bx	lr

08002e58 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	@ 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6178      	str	r0, [r7, #20]
 8002e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002e6c:	edc7 1a01 	vstr	s3, [r7, #4]
 8002e70:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002e74:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e80:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8002e84:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	db02      	blt.n	8002e98 <InitTrajectorySegment+0x40>
 8002e92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e96:	e000      	b.n	8002e9a <InitTrajectorySegment+0x42>
 8002e98:	4b49      	ldr	r3, [pc, #292]	@ (8002fc0 <InitTrajectorySegment+0x168>)
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8002e9c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002ea0:	eef0 7ae7 	vabs.f32	s15, s15
 8002ea4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8002ea8:	edd7 6a02 	vldr	s13, [r7, #8]
 8002eac:	ed97 7a01 	vldr	s14, [r7, #4]
 8002eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8002eb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ebc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ec4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ecc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed4:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8002ed8:	edd7 7a08 	vldr	s15, [r7, #32]
 8002edc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ee0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	d524      	bpl.n	8002f38 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8002eee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002ef2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ef6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002efa:	eeb0 0a66 	vmov.f32	s0, s13
 8002efe:	f00c fc95 	bl	800f82c <sqrtf>
 8002f02:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8002f0e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002f1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f20:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	edc3 7a02 	vstr	s15, [r3, #8]
 8002f36:	e027      	b.n	8002f88 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f40:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f48:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f50:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8002f5e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f62:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8002f76:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 8002f94:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002faa:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb0:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	621a      	str	r2, [r3, #32]
}
 8002fb8:	bf00      	nop
 8002fba:	3730      	adds	r7, #48	@ 0x30
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	bf800000 	.word	0xbf800000

08002fc4 <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 8002fc4:	b480      	push	{r7}
 8002fc6:	b08f      	sub	sp, #60	@ 0x3c
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	edd3 7a08 	vldr	s15, [r3, #32]
 8002fd6:	ed97 7a00 	vldr	s14, [r7]
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 8002fe2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002fe6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fee:	d503      	bpl.n	8002ff8 <GetTrajectoryPosition+0x34>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	e0b4      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	edd3 7a07 	vldr	s15, [r3, #28]
 8002ffe:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300a:	db03      	blt.n	8003014 <GetTrajectoryPosition+0x50>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003012:	e0a6      	b.n	8003162 <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	edd3 7a04 	vldr	s15, [r3, #16]
 800302c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003030:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003038:	d512      	bpl.n	8003060 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 800303a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800303e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003042:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003046:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800304a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800304e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003056:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800305a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305e:	e080      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	ed93 7a04 	vldr	s14, [r3, #16]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	edd3 7a05 	vldr	s15, [r3, #20]
 800306c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003070:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003074:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307c:	d525      	bpl.n	80030ca <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 8003084:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003088:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800308c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003090:	edd7 7a04 	vldr	s15, [r7, #16]
 8003094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003098:	edd7 7a04 	vldr	s15, [r7, #16]
 800309c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a8:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 80030ac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80030b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80030bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c8:	e04b      	b.n	8003162 <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80030d6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030da:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 80030fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003102:	edd7 7a08 	vldr	s15, [r7, #32]
 8003106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800310a:	ed97 7a07 	vldr	s14, [r7, #28]
 800310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003112:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 8003116:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800311a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800311e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003122:	edd7 7a08 	vldr	s15, [r7, #32]
 8003126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312a:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 800312e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003132:	edd7 7a05 	vldr	s15, [r7, #20]
 8003136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800313a:	edd7 7a06 	vldr	s15, [r7, #24]
 800313e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003142:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003146:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800314a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800314e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003152:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800315e:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 8003162:	eeb0 0a67 	vmov.f32	s0, s15
 8003166:	373c      	adds	r7, #60	@ 0x3c
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003182:	ed97 7a00 	vldr	s14, [r7]
 8003186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 800318e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	d502      	bpl.n	80031a2 <GetTrajectoryVelocity+0x32>
 800319c:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800324c <GetTrajectoryVelocity+0xdc>
 80031a0:	e04d      	b.n	800323e <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80031a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80031ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b4:	db02      	blt.n	80031bc <GetTrajectoryVelocity+0x4c>
 80031b6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800324c <GetTrajectoryVelocity+0xdc>
 80031ba:	e040      	b.n	800323e <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80031ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80031d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031da:	d506      	bpl.n	80031ea <GetTrajectoryVelocity+0x7a>
        return a * t;
 80031dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80031e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e8:	e029      	b.n	800323e <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80031fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	d502      	bpl.n	800320e <GetTrajectoryVelocity+0x9e>
        return v;
 8003208:	edd7 7a03 	vldr	s15, [r7, #12]
 800320c:	e017      	b.n	800323e <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a04 	vldr	s15, [r3, #16]
 8003214:	ed97 7a05 	vldr	s14, [r7, #20]
 8003218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003226:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 800322a:	ed97 7a04 	vldr	s14, [r7, #16]
 800322e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	ed97 7a03 	vldr	s14, [r7, #12]
 800323a:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	00000000 	.word	0x00000000

08003250 <InitHoldTrajectorySegment>:

void InitHoldTrajectorySegment(TrajectorySegment *seg, float pos, float duration, float t_start) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	ed87 0a02 	vstr	s0, [r7, #8]
 800325c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003260:	ed87 1a00 	vstr	s2, [r7]
	seg->start_pos = pos;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	601a      	str	r2, [r3, #0]
	seg->end_pos = pos;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	605a      	str	r2, [r3, #4]
	seg->v_max = 0.0f;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
	seg->a_max = 0.0f;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	60da      	str	r2, [r3, #12]
	seg->t_accel = 0.0f;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
	seg->t_decel = 0.0f;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	619a      	str	r2, [r3, #24]
	seg->t_const = duration;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	615a      	str	r2, [r3, #20]
	seg->t_total = duration;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	61da      	str	r2, [r3, #28]
	seg->t_start = t_start;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	@ 0x30
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80032b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	605a      	str	r2, [r3, #4]
 80032c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	2220      	movs	r2, #32
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f00c f9a7 	bl	800f61c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80032ce:	4b32      	ldr	r3, [pc, #200]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80032d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032d6:	4b30      	ldr	r3, [pc, #192]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80032dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032de:	4b2e      	ldr	r3, [pc, #184]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80032ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032f0:	4b29      	ldr	r3, [pc, #164]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032f6:	4b28      	ldr	r3, [pc, #160]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032f8:	2204      	movs	r2, #4
 80032fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80032fc:	4b26      	ldr	r3, [pc, #152]	@ (8003398 <MX_ADC1_Init+0xe8>)
 80032fe:	2200      	movs	r2, #0
 8003300:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003302:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003304:	2200      	movs	r2, #0
 8003306:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003308:	4b23      	ldr	r3, [pc, #140]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800330a:	2201      	movs	r2, #1
 800330c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800330e:	4b22      	ldr	r3, [pc, #136]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003318:	2200      	movs	r2, #0
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800331c:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003322:	4b1d      	ldr	r3, [pc, #116]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800332a:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800332c:	2200      	movs	r2, #0
 800332e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003330:	4b19      	ldr	r3, [pc, #100]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003338:	4817      	ldr	r0, [pc, #92]	@ (8003398 <MX_ADC1_Init+0xe8>)
 800333a:	f003 fb39 	bl	80069b0 <HAL_ADC_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003344:	f002 f99a 	bl	800567c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003348:	2300      	movs	r3, #0
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800334c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003350:	4619      	mov	r1, r3
 8003352:	4811      	ldr	r0, [pc, #68]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003354:	f004 fad6 	bl	8007904 <HAL_ADCEx_MultiModeConfigChannel>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800335e:	f002 f98d 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <MX_ADC1_Init+0xec>)
 8003364:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003366:	2306      	movs	r3, #6
 8003368:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800336e:	237f      	movs	r3, #127	@ 0x7f
 8003370:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003372:	2304      	movs	r3, #4
 8003374:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800337a:	1d3b      	adds	r3, r7, #4
 800337c:	4619      	mov	r1, r3
 800337e:	4806      	ldr	r0, [pc, #24]	@ (8003398 <MX_ADC1_Init+0xe8>)
 8003380:	f003 fdc4 	bl	8006f0c <HAL_ADC_ConfigChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800338a:	f002 f977 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	3730      	adds	r7, #48	@ 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	20000290 	.word	0x20000290
 800339c:	04300002 	.word	0x04300002

080033a0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033a6:	463b      	mov	r3, r7
 80033a8:	2220      	movs	r2, #32
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f00c f935 	bl	800f61c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80033b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003464 <MX_ADC2_Init+0xc4>)
 80033b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033b8:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80033be:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80033c0:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033c6:	4b26      	ldr	r3, [pc, #152]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80033cc:	4b24      	ldr	r3, [pc, #144]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033d2:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033d8:	4b21      	ldr	r3, [pc, #132]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033da:	2204      	movs	r2, #4
 80033dc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80033e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80033f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <MX_ADC2_Init+0xc0>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033fe:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003404:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800340c:	4b14      	ldr	r3, [pc, #80]	@ (8003460 <MX_ADC2_Init+0xc0>)
 800340e:	2200      	movs	r2, #0
 8003410:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8003412:	4b13      	ldr	r3, [pc, #76]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800341a:	4811      	ldr	r0, [pc, #68]	@ (8003460 <MX_ADC2_Init+0xc0>)
 800341c:	f003 fac8 	bl	80069b0 <HAL_ADC_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8003426:	f002 f929 	bl	800567c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <MX_ADC2_Init+0xc8>)
 800342c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800342e:	2306      	movs	r3, #6
 8003430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003436:	237f      	movs	r3, #127	@ 0x7f
 8003438:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800343a:	2304      	movs	r3, #4
 800343c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003442:	463b      	mov	r3, r7
 8003444:	4619      	mov	r1, r3
 8003446:	4806      	ldr	r0, [pc, #24]	@ (8003460 <MX_ADC2_Init+0xc0>)
 8003448:	f003 fd60 	bl	8006f0c <HAL_ADC_ConfigChannel>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8003452:	f002 f913 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	200002fc 	.word	0x200002fc
 8003464:	50000100 	.word	0x50000100
 8003468:	08600004 	.word	0x08600004

0800346c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0a0      	sub	sp, #128	@ 0x80
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003484:	f107 0318 	add.w	r3, r7, #24
 8003488:	2254      	movs	r2, #84	@ 0x54
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f00c f8c5 	bl	800f61c <memset>
  if(adcHandle->Instance==ADC1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349a:	d13e      	bne.n	800351a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800349c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034a2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a8:	f107 0318 	add.w	r3, r7, #24
 80034ac:	4618      	mov	r0, r3
 80034ae:	f005 ff13 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d001      	beq.n	80034bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034b8:	f002 f8e0 	bl	800567c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034bc:	4b3a      	ldr	r3, [pc, #232]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80034c6:	4b38      	ldr	r3, [pc, #224]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10b      	bne.n	80034e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034ce:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d2:	4a36      	ldr	r2, [pc, #216]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034da:	4b34      	ldr	r3, [pc, #208]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e6:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	4a30      	ldr	r2, [pc, #192]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f2:	4b2e      	ldr	r3, [pc, #184]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 80034fe:	2303      	movs	r3, #3
 8003500:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003502:	2303      	movs	r3, #3
 8003504:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003506:	2300      	movs	r3, #0
 8003508:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800350e:	4619      	mov	r1, r3
 8003510:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003514:	f004 ff4c 	bl	80083b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003518:	e042      	b.n	80035a0 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <HAL_ADC_MspInit+0x144>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d13d      	bne.n	80035a0 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003528:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800352a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800352e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003530:	f107 0318 	add.w	r3, r7, #24
 8003534:	4618      	mov	r0, r3
 8003536:	f005 fecf 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8003540:	f002 f89c 	bl	800567c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 800354c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800354e:	4b16      	ldr	r3, [pc, #88]	@ (80035a8 <HAL_ADC_MspInit+0x13c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d10b      	bne.n	800356e <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	4a14      	ldr	r2, [pc, #80]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 800355c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003562:	4b12      	ldr	r3, [pc, #72]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	4a0e      	ldr	r2, [pc, #56]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800357a:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <HAL_ADC_MspInit+0x140>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 8003586:	2302      	movs	r3, #2
 8003588:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800358a:	2303      	movs	r3, #3
 800358c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 8003592:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003596:	4619      	mov	r1, r3
 8003598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800359c:	f004 ff08 	bl	80083b0 <HAL_GPIO_Init>
}
 80035a0:	bf00      	nop
 80035a2:	3780      	adds	r7, #128	@ 0x80
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000368 	.word	0x20000368
 80035ac:	40021000 	.word	0x40021000
 80035b0:	50000100 	.word	0x50000100

080035b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80035ba:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <MX_DMA_Init+0x50>)
 80035bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035be:	4a11      	ldr	r2, [pc, #68]	@ (8003604 <MX_DMA_Init+0x50>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <MX_DMA_Init+0x50>)
 80035c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <MX_DMA_Init+0x50>)
 80035d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003604 <MX_DMA_Init+0x50>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80035de:	4b09      	ldr	r3, [pc, #36]	@ (8003604 <MX_DMA_Init+0x50>)
 80035e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2100      	movs	r1, #0
 80035ee:	200b      	movs	r0, #11
 80035f0:	f004 fb6b 	bl	8007cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80035f4:	200b      	movs	r0, #11
 80035f6:	f004 fb82 	bl	8007cfe <HAL_NVIC_EnableIRQ>

}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000

08003608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	@ 0x28
 800360c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	609a      	str	r2, [r3, #8]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	4b54      	ldr	r3, [pc, #336]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003622:	4a53      	ldr	r2, [pc, #332]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800362a:	4b51      	ldr	r3, [pc, #324]	@ (8003770 <MX_GPIO_Init+0x168>)
 800362c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003636:	4b4e      	ldr	r3, [pc, #312]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	4a4d      	ldr	r2, [pc, #308]	@ (8003770 <MX_GPIO_Init+0x168>)
 800363c:	f043 0320 	orr.w	r3, r3, #32
 8003640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003642:	4b4b      	ldr	r3, [pc, #300]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800364e:	4b48      	ldr	r3, [pc, #288]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	4a47      	ldr	r2, [pc, #284]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003654:	f043 0301 	orr.w	r3, r3, #1
 8003658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800365a:	4b45      	ldr	r3, [pc, #276]	@ (8003770 <MX_GPIO_Init+0x168>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	4b42      	ldr	r3, [pc, #264]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a41      	ldr	r2, [pc, #260]	@ (8003770 <MX_GPIO_Init+0x168>)
 800366c:	f043 0302 	orr.w	r3, r3, #2
 8003670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003672:	4b3f      	ldr	r3, [pc, #252]	@ (8003770 <MX_GPIO_Init+0x168>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 800367e:	2200      	movs	r2, #0
 8003680:	2102      	movs	r1, #2
 8003682:	483c      	ldr	r0, [pc, #240]	@ (8003774 <MX_GPIO_Init+0x16c>)
 8003684:	f005 f816 	bl	80086b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8003688:	2200      	movs	r2, #0
 800368a:	2140      	movs	r1, #64	@ 0x40
 800368c:	483a      	ldr	r0, [pc, #232]	@ (8003778 <MX_GPIO_Init+0x170>)
 800368e:	f005 f811 	bl	80086b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 8003692:	2201      	movs	r2, #1
 8003694:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003698:	4837      	ldr	r0, [pc, #220]	@ (8003778 <MX_GPIO_Init+0x170>)
 800369a:	f005 f80b 	bl	80086b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 800369e:	2302      	movs	r3, #2
 80036a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036a2:	2301      	movs	r3, #1
 80036a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	2300      	movs	r3, #0
 80036ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	482f      	ldr	r0, [pc, #188]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036b6:	f004 fe7b 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80036ba:	f44f 438c 	mov.w	r3, #17920	@ 0x4600
 80036be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036c0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80036c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	4828      	ldr	r0, [pc, #160]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036d2:	f004 fe6d 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_Left_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin|Limit_Switch_Prismatic2_Pin;
 80036d6:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80036da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036dc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	4821      	ldr	r0, [pc, #132]	@ (8003774 <MX_GPIO_Init+0x16c>)
 80036ee:	f004 fe5f 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 80036f2:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80036f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	2300      	movs	r3, #0
 8003702:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003704:	f107 0314 	add.w	r3, r7, #20
 8003708:	4619      	mov	r1, r3
 800370a:	481b      	ldr	r0, [pc, #108]	@ (8003778 <MX_GPIO_Init+0x170>)
 800370c:	f004 fe50 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8003710:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003716:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800371a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8003720:	f107 0314 	add.w	r3, r7, #20
 8003724:	4619      	mov	r1, r3
 8003726:	4814      	ldr	r0, [pc, #80]	@ (8003778 <MX_GPIO_Init+0x170>)
 8003728:	f004 fe42 	bl	80083b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 800372c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003732:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 800373c:	f107 0314 	add.w	r3, r7, #20
 8003740:	4619      	mov	r1, r3
 8003742:	480d      	ldr	r0, [pc, #52]	@ (8003778 <MX_GPIO_Init+0x170>)
 8003744:	f004 fe34 	bl	80083b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003748:	2200      	movs	r2, #0
 800374a:	2100      	movs	r1, #0
 800374c:	2017      	movs	r0, #23
 800374e:	f004 fabc 	bl	8007cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003752:	2017      	movs	r0, #23
 8003754:	f004 fad3 	bl	8007cfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	2028      	movs	r0, #40	@ 0x28
 800375e:	f004 fab4 	bl	8007cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003762:	2028      	movs	r0, #40	@ 0x28
 8003764:	f004 facb 	bl	8007cfe <HAL_NVIC_EnableIRQ>

}
 8003768:	bf00      	nop
 800376a:	3728      	adds	r7, #40	@ 0x28
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40021000 	.word	0x40021000
 8003774:	48000400 	.word	0x48000400
 8003778:	48000800 	.word	0x48000800
 800377c:	00000000 	.word	0x00000000

08003780 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003784:	ed2d 8b04 	vpush	{d8-d9}
 8003788:	b0a4      	sub	sp, #144	@ 0x90
 800378a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800378c:	f002 fe93 	bl	80064b6 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003790:	f001 fc14 	bl	8004fbc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003794:	f7ff ff38 	bl	8003608 <MX_GPIO_Init>
	MX_DMA_Init();
 8003798:	f7ff ff0c 	bl	80035b4 <MX_DMA_Init>
	MX_TIM3_Init();
 800379c:	f002 f974 	bl	8005a88 <MX_TIM3_Init>
	MX_ADC1_Init();
 80037a0:	f7ff fd86 	bl	80032b0 <MX_ADC1_Init>
	MX_TIM1_Init();
 80037a4:	f002 f8ce 	bl	8005944 <MX_TIM1_Init>
	MX_TIM2_Init();
 80037a8:	f002 f920 	bl	80059ec <MX_TIM2_Init>
	MX_TIM4_Init();
 80037ac:	f002 f9c2 	bl	8005b34 <MX_TIM4_Init>
	MX_TIM20_Init();
 80037b0:	f002 fb46 	bl	8005e40 <MX_TIM20_Init>
	MX_TIM8_Init();
 80037b4:	f002 fa14 	bl	8005be0 <MX_TIM8_Init>
	MX_TIM16_Init();
 80037b8:	f002 fac2 	bl	8005d40 <MX_TIM16_Init>
	MX_USART2_UART_Init();
 80037bc:	f002 fd78 	bl	80062b0 <MX_USART2_UART_Init>
	MX_ADC2_Init();
 80037c0:	f7ff fdee 	bl	80033a0 <MX_ADC2_Init>
	MX_SPI1_Init();
 80037c4:	f001 ff60 	bl	8005688 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80037c8:	48a7      	ldr	r0, [pc, #668]	@ (8003a68 <main+0x2e8>)
 80037ca:	f006 fc65 	bl	800a098 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80037ce:	48a7      	ldr	r0, [pc, #668]	@ (8003a6c <main+0x2ec>)
 80037d0:	f006 fc62 	bl	800a098 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80037d4:	210c      	movs	r1, #12
 80037d6:	48a5      	ldr	r0, [pc, #660]	@ (8003a6c <main+0x2ec>)
 80037d8:	f006 fe22 	bl	800a420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80037dc:	2100      	movs	r1, #0
 80037de:	48a2      	ldr	r0, [pc, #648]	@ (8003a68 <main+0x2e8>)
 80037e0:	f006 fe1e 	bl	800a420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 80037e4:	2108      	movs	r1, #8
 80037e6:	48a0      	ldr	r0, [pc, #640]	@ (8003a68 <main+0x2e8>)
 80037e8:	f006 fe1a 	bl	800a420 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 80037ec:	49a0      	ldr	r1, [pc, #640]	@ (8003a70 <main+0x2f0>)
 80037ee:	48a1      	ldr	r0, [pc, #644]	@ (8003a74 <main+0x2f4>)
 80037f0:	f7fe fae0 	bl	8001db4 <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 80037f4:	49a0      	ldr	r1, [pc, #640]	@ (8003a78 <main+0x2f8>)
 80037f6:	48a1      	ldr	r0, [pc, #644]	@ (8003a7c <main+0x2fc>)
 80037f8:	f7fe fadc 	bl	8001db4 <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 80037fc:	48a0      	ldr	r0, [pc, #640]	@ (8003a80 <main+0x300>)
 80037fe:	f003 fa93 	bl	8006d28 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8003802:	48a0      	ldr	r0, [pc, #640]	@ (8003a84 <main+0x304>)
 8003804:	f006 fcb8 	bl	800a178 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003814:	213c      	movs	r1, #60	@ 0x3c
 8003816:	4898      	ldr	r0, [pc, #608]	@ (8003a78 <main+0x2f8>)
 8003818:	f007 f8be 	bl	800a998 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800381c:	213c      	movs	r1, #60	@ 0x3c
 800381e:	4894      	ldr	r0, [pc, #592]	@ (8003a70 <main+0x2f0>)
 8003820:	f007 f8ba 	bl	800a998 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 8003824:	4b98      	ldr	r3, [pc, #608]	@ (8003a88 <main+0x308>)
 8003826:	4a99      	ldr	r2, [pc, #612]	@ (8003a8c <main+0x30c>)
 8003828:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 800382a:	4b97      	ldr	r3, [pc, #604]	@ (8003a88 <main+0x308>)
 800382c:	4a98      	ldr	r2, [pc, #608]	@ (8003a90 <main+0x310>)
 800382e:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8003830:	4b95      	ldr	r3, [pc, #596]	@ (8003a88 <main+0x308>)
 8003832:	2215      	movs	r2, #21
 8003834:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 8003836:	4b94      	ldr	r3, [pc, #592]	@ (8003a88 <main+0x308>)
 8003838:	22c8      	movs	r2, #200	@ 0xc8
 800383a:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 800383c:	4995      	ldr	r1, [pc, #596]	@ (8003a94 <main+0x314>)
 800383e:	4892      	ldr	r0, [pc, #584]	@ (8003a88 <main+0x308>)
 8003840:	f7fe ff86 	bl	8002750 <Modbus_init>

	Kalman_Init(&kf_pris);
 8003844:	4894      	ldr	r0, [pc, #592]	@ (8003a98 <main+0x318>)
 8003846:	f7fe fcd1 	bl	80021ec <Kalman_Init>

	kf_pris.A_data[0] = 1;
 800384a:	4b93      	ldr	r3, [pc, #588]	@ (8003a98 <main+0x318>)
 800384c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003850:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 8003852:	4b91      	ldr	r3, [pc, #580]	@ (8003a98 <main+0x318>)
 8003854:	4a91      	ldr	r2, [pc, #580]	@ (8003a9c <main+0x31c>)
 8003856:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 8003858:	4b8f      	ldr	r3, [pc, #572]	@ (8003a98 <main+0x318>)
 800385a:	4a91      	ldr	r2, [pc, #580]	@ (8003aa0 <main+0x320>)
 800385c:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 800385e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a98 <main+0x318>)
 8003860:	4a90      	ldr	r2, [pc, #576]	@ (8003aa4 <main+0x324>)
 8003862:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 8003864:	4b8c      	ldr	r3, [pc, #560]	@ (8003a98 <main+0x318>)
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 800386e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a98 <main+0x318>)
 8003870:	4a8d      	ldr	r2, [pc, #564]	@ (8003aa8 <main+0x328>)
 8003872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <main+0x318>)
 8003878:	4a8c      	ldr	r2, [pc, #560]	@ (8003aac <main+0x32c>)
 800387a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 800387e:	4b86      	ldr	r3, [pc, #536]	@ (8003a98 <main+0x318>)
 8003880:	4a8b      	ldr	r2, [pc, #556]	@ (8003ab0 <main+0x330>)
 8003882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 8003886:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <main+0x318>)
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 8003890:	4b81      	ldr	r3, [pc, #516]	@ (8003a98 <main+0x318>)
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 800389a:	4b7f      	ldr	r3, [pc, #508]	@ (8003a98 <main+0x318>)
 800389c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80038a4:	4b7c      	ldr	r3, [pc, #496]	@ (8003a98 <main+0x318>)
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80038ae:	4b7a      	ldr	r3, [pc, #488]	@ (8003a98 <main+0x318>)
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 80038b8:	4b77      	ldr	r3, [pc, #476]	@ (8003a98 <main+0x318>)
 80038ba:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab4 <main+0x334>)
 80038bc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 80038c0:	4b75      	ldr	r3, [pc, #468]	@ (8003a98 <main+0x318>)
 80038c2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ab8 <main+0x338>)
 80038c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 80038c8:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <main+0x318>)
 80038ca:	4a7c      	ldr	r2, [pc, #496]	@ (8003abc <main+0x33c>)
 80038cc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 80038d0:	4b71      	ldr	r3, [pc, #452]	@ (8003a98 <main+0x318>)
 80038d2:	4a7b      	ldr	r2, [pc, #492]	@ (8003ac0 <main+0x340>)
 80038d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 80038d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <main+0x318>)
 80038da:	4a7a      	ldr	r2, [pc, #488]	@ (8003ac4 <main+0x344>)
 80038dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 80038e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003a98 <main+0x318>)
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 80038ea:	4b6b      	ldr	r3, [pc, #428]	@ (8003a98 <main+0x318>)
 80038ec:	4a76      	ldr	r2, [pc, #472]	@ (8003ac8 <main+0x348>)
 80038ee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038f8:	e027      	b.n	800394a <main+0x1ca>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80038fa:	2300      	movs	r3, #0
 80038fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003900:	e01a      	b.n	8003938 <main+0x1b8>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8003902:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003906:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800390a:	429a      	cmp	r2, r3
 800390c:	d102      	bne.n	8003914 <main+0x194>
 800390e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003912:	e001      	b.n	8003918 <main+0x198>
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800391c:	0099      	lsls	r1, r3, #2
 800391e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003922:	440b      	add	r3, r1
 8003924:	495c      	ldr	r1, [pc, #368]	@ (8003a98 <main+0x318>)
 8003926:	333c      	adds	r3, #60	@ 0x3c
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800392e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003932:	3301      	adds	r3, #1
 8003934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800393c:	2b03      	cmp	r3, #3
 800393e:	dde0      	ble.n	8003902 <main+0x182>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8003940:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003944:	3301      	adds	r3, #1
 8003946:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800394a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800394e:	2b03      	cmp	r3, #3
 8003950:	ddd3      	ble.n	80038fa <main+0x17a>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8003952:	4b51      	ldr	r3, [pc, #324]	@ (8003a98 <main+0x318>)
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 800395c:	4b4e      	ldr	r3, [pc, #312]	@ (8003a98 <main+0x318>)
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <main+0x318>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8003970:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <main+0x318>)
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 800397a:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003acc <main+0x34c>
 800397e:	4846      	ldr	r0, [pc, #280]	@ (8003a98 <main+0x318>)
 8003980:	f7fe fd06 	bl	8002390 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 8003984:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8003ad0 <main+0x350>
 8003988:	4843      	ldr	r0, [pc, #268]	@ (8003a98 <main+0x318>)
 800398a:	f7fe fcd1 	bl	8002330 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 800398e:	4851      	ldr	r0, [pc, #324]	@ (8003ad4 <main+0x354>)
 8003990:	f7fe fc2c 	bl	80021ec <Kalman_Init>

	kf_rev.A_data[0] = 1;
 8003994:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad4 <main+0x354>)
 8003996:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800399a:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 800399c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <main+0x354>)
 800399e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ad8 <main+0x358>)
 80039a0:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80039a2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <main+0x354>)
 80039a4:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <main+0x35c>)
 80039a6:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80039a8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <main+0x354>)
 80039aa:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae0 <main+0x360>)
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80039ae:	4b49      	ldr	r3, [pc, #292]	@ (8003ad4 <main+0x354>)
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80039b8:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <main+0x354>)
 80039ba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae4 <main+0x364>)
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80039c0:	4b44      	ldr	r3, [pc, #272]	@ (8003ad4 <main+0x354>)
 80039c2:	4a49      	ldr	r2, [pc, #292]	@ (8003ae8 <main+0x368>)
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80039c8:	4b42      	ldr	r3, [pc, #264]	@ (8003ad4 <main+0x354>)
 80039ca:	4a48      	ldr	r2, [pc, #288]	@ (8003aec <main+0x36c>)
 80039cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <main+0x354>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 80039da:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad4 <main+0x354>)
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 80039e4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <main+0x354>)
 80039e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 80039ee:	4b39      	ldr	r3, [pc, #228]	@ (8003ad4 <main+0x354>)
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 80039f8:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <main+0x354>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8003a02:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <main+0x354>)
 8003a04:	4a3a      	ldr	r2, [pc, #232]	@ (8003af0 <main+0x370>)
 8003a06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8003a0a:	4b32      	ldr	r3, [pc, #200]	@ (8003ad4 <main+0x354>)
 8003a0c:	4a39      	ldr	r2, [pc, #228]	@ (8003af4 <main+0x374>)
 8003a0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8003a12:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <main+0x354>)
 8003a14:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <main+0x378>)
 8003a16:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <main+0x354>)
 8003a1c:	4a37      	ldr	r2, [pc, #220]	@ (8003afc <main+0x37c>)
 8003a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8003a22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad4 <main+0x354>)
 8003a24:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <main+0x380>)
 8003a26:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <main+0x354>)
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8003a34:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <main+0x354>)
 8003a36:	4a33      	ldr	r2, [pc, #204]	@ (8003b04 <main+0x384>)
 8003a38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a40:	e076      	b.n	8003b30 <main+0x3b0>
		for (int j = 0; j < 4; j++) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a46:	e06d      	b.n	8003b24 <main+0x3a4>
			if (i == j) {
 8003a48:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003a4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d15b      	bne.n	8003b08 <main+0x388>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 8003a50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a56:	4413      	add	r3, r2
 8003a58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <main+0x354>)
 8003a5a:	333c      	adds	r3, #60	@ 0x3c
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e05a      	b.n	8003b1e <main+0x39e>
 8003a68:	20001c38 	.word	0x20001c38
 8003a6c:	20001aa0 	.word	0x20001aa0
 8003a70:	200019d4 	.word	0x200019d4
 8003a74:	2000036c 	.word	0x2000036c
 8003a78:	20001908 	.word	0x20001908
 8003a7c:	200003a0 	.word	0x200003a0
 8003a80:	20000290 	.word	0x20000290
 8003a84:	2000183c 	.word	0x2000183c
 8003a88:	200006f8 	.word	0x200006f8
 8003a8c:	20001d04 	.word	0x20001d04
 8003a90:	20001b6c 	.word	0x20001b6c
 8003a94:	20000bd0 	.word	0x20000bd0
 8003a98:	20000e8c 	.word	0x20000e8c
 8003a9c:	3a5c11e4 	.word	0x3a5c11e4
 8003aa0:	b4e160df 	.word	0xb4e160df
 8003aa4:	3757157b 	.word	0x3757157b
 8003aa8:	3f2dd97f 	.word	0x3f2dd97f
 8003aac:	ba5c11e4 	.word	0xba5c11e4
 8003ab0:	3cd20afa 	.word	0x3cd20afa
 8003ab4:	bd2c27a6 	.word	0xbd2c27a6
 8003ab8:	37b03ea2 	.word	0x37b03ea2
 8003abc:	bdc3e426 	.word	0xbdc3e426
 8003ac0:	36866b47 	.word	0x36866b47
 8003ac4:	3c034092 	.word	0x3c034092
 8003ac8:	3e90b0f2 	.word	0x3e90b0f2
 8003acc:	3c23d70a 	.word	0x3c23d70a
 8003ad0:	3f666666 	.word	0x3f666666
 8003ad4:	200011b0 	.word	0x200011b0
 8003ad8:	3a830bb9 	.word	0x3a830bb9
 8003adc:	b6327146 	.word	0xb6327146
 8003ae0:	33ae1e34 	.word	0x33ae1e34
 8003ae4:	3f7fe5c9 	.word	0x3f7fe5c9
 8003ae8:	bbae429e 	.word	0xbbae429e
 8003aec:	392a143b 	.word	0x392a143b
 8003af0:	c02fbe77 	.word	0xc02fbe77
 8003af4:	3bef4e01 	.word	0x3bef4e01
 8003af8:	3e0aa64c 	.word	0x3e0aa64c
 8003afc:	34012bd0 	.word	0x34012bd0
 8003b00:	397c4992 	.word	0x397c4992
 8003b04:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8003b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b0e:	4413      	add	r3, r2
 8003b10:	4ac1      	ldr	r2, [pc, #772]	@ (8003e18 <main+0x698>)
 8003b12:	333c      	adds	r3, #60	@ 0x3c
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b20:	3301      	adds	r3, #1
 8003b22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	dd8e      	ble.n	8003a48 <main+0x2c8>
	for (int i = 0; i < 2; i++) {
 8003b2a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	dd85      	ble.n	8003a42 <main+0x2c2>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8003b36:	4bb8      	ldr	r3, [pc, #736]	@ (8003e18 <main+0x698>)
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8003b40:	4bb5      	ldr	r3, [pc, #724]	@ (8003e18 <main+0x698>)
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8003b4a:	4bb3      	ldr	r3, [pc, #716]	@ (8003e18 <main+0x698>)
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8003b54:	4bb0      	ldr	r3, [pc, #704]	@ (8003e18 <main+0x698>)
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8003b5e:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8003e1c <main+0x69c>
 8003b62:	48ad      	ldr	r0, [pc, #692]	@ (8003e18 <main+0x698>)
 8003b64:	f7fe fc14 	bl	8002390 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8003b68:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8003e20 <main+0x6a0>
 8003b6c:	48aa      	ldr	r0, [pc, #680]	@ (8003e18 <main+0x698>)
 8003b6e:	f7fe fbdf 	bl	8002330 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8003b72:	4cac      	ldr	r4, [pc, #688]	@ (8003e24 <main+0x6a4>)
 8003b74:	463b      	mov	r3, r7
 8003b76:	ed9f 6b8e 	vldr	d6, [pc, #568]	@ 8003db0 <main+0x630>
 8003b7a:	ed9f 5b8f 	vldr	d5, [pc, #572]	@ 8003db8 <main+0x638>
 8003b7e:	ed9f 4b90 	vldr	d4, [pc, #576]	@ 8003dc0 <main+0x640>
 8003b82:	ed9f 3b8f 	vldr	d3, [pc, #572]	@ 8003dc0 <main+0x640>
 8003b86:	ed9f 2b90 	vldr	d2, [pc, #576]	@ 8003dc8 <main+0x648>
 8003b8a:	ed9f 1b91 	vldr	d1, [pc, #580]	@ 8003dd0 <main+0x650>
 8003b8e:	ed9f 0b92 	vldr	d0, [pc, #584]	@ 8003dd8 <main+0x658>
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f8de 	bl	8002d54 <create_prismatic_motor>
 8003b98:	4625      	mov	r5, r4
 8003b9a:	463c      	mov	r4, r7
 8003b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bac:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8003bb0:	4c9d      	ldr	r4, [pc, #628]	@ (8003e28 <main+0x6a8>)
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	ed9f 6b8a 	vldr	d6, [pc, #552]	@ 8003de0 <main+0x660>
 8003bb8:	ed9f 5b8b 	vldr	d5, [pc, #556]	@ 8003de8 <main+0x668>
 8003bbc:	ed9f 4b8c 	vldr	d4, [pc, #560]	@ 8003df0 <main+0x670>
 8003bc0:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 8003df8 <main+0x678>
 8003bc4:	ed9f 2b8e 	vldr	d2, [pc, #568]	@ 8003e00 <main+0x680>
 8003bc8:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 8003e08 <main+0x688>
 8003bcc:	ed9f 0b90 	vldr	d0, [pc, #576]	@ 8003e10 <main+0x690>
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f900 	bl	8002dd6 <create_motor>
 8003bd6:	4625      	mov	r5, r4
 8003bd8:	463c      	mov	r4, r7
 8003bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bea:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8003bee:	4b8f      	ldr	r3, [pc, #572]	@ (8003e2c <main+0x6ac>)
 8003bf0:	4a8f      	ldr	r2, [pc, #572]	@ (8003e30 <main+0x6b0>)
 8003bf2:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8003bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8003e2c <main+0x6ac>)
 8003bf6:	4a8f      	ldr	r2, [pc, #572]	@ (8003e34 <main+0x6b4>)
 8003bf8:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8003bfa:	4b8c      	ldr	r3, [pc, #560]	@ (8003e2c <main+0x6ac>)
 8003bfc:	4a8c      	ldr	r2, [pc, #560]	@ (8003e30 <main+0x6b0>)
 8003bfe:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8003c00:	2100      	movs	r1, #0
 8003c02:	488a      	ldr	r0, [pc, #552]	@ (8003e2c <main+0x6ac>)
 8003c04:	f00b f814 	bl	800ec30 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8003c08:	4b8b      	ldr	r3, [pc, #556]	@ (8003e38 <main+0x6b8>)
 8003c0a:	4a8c      	ldr	r2, [pc, #560]	@ (8003e3c <main+0x6bc>)
 8003c0c:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8003c0e:	4b8a      	ldr	r3, [pc, #552]	@ (8003e38 <main+0x6b8>)
 8003c10:	4a88      	ldr	r2, [pc, #544]	@ (8003e34 <main+0x6b4>)
 8003c12:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8003c14:	4b88      	ldr	r3, [pc, #544]	@ (8003e38 <main+0x6b8>)
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4886      	ldr	r0, [pc, #536]	@ (8003e38 <main+0x6b8>)
 8003c20:	f00b f806 	bl	800ec30 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 1.5;
 8003c24:	4b86      	ldr	r3, [pc, #536]	@ (8003e40 <main+0x6c0>)
 8003c26:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8003c2a:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 0.8;
 8003c2c:	4b84      	ldr	r3, [pc, #528]	@ (8003e40 <main+0x6c0>)
 8003c2e:	4a85      	ldr	r2, [pc, #532]	@ (8003e44 <main+0x6c4>)
 8003c30:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 0.4;
 8003c32:	4b83      	ldr	r3, [pc, #524]	@ (8003e40 <main+0x6c0>)
 8003c34:	4a84      	ldr	r2, [pc, #528]	@ (8003e48 <main+0x6c8>)
 8003c36:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4881      	ldr	r0, [pc, #516]	@ (8003e40 <main+0x6c0>)
 8003c3c:	f00a fff8 	bl	800ec30 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8003c40:	4b82      	ldr	r3, [pc, #520]	@ (8003e4c <main+0x6cc>)
 8003c42:	4a83      	ldr	r2, [pc, #524]	@ (8003e50 <main+0x6d0>)
 8003c44:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8003c46:	4b81      	ldr	r3, [pc, #516]	@ (8003e4c <main+0x6cc>)
 8003c48:	4a82      	ldr	r2, [pc, #520]	@ (8003e54 <main+0x6d4>)
 8003c4a:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8003c4c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e4c <main+0x6cc>)
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8003c54:	2100      	movs	r1, #0
 8003c56:	487d      	ldr	r0, [pc, #500]	@ (8003e4c <main+0x6cc>)
 8003c58:	f00a ffea 	bl	800ec30 <arm_pid_init_f32>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		Emer_trick = HAL_GetTick();
 8003c5c:	f002 fc90 	bl	8006580 <HAL_GetTick>
 8003c60:	4603      	mov	r3, r0
 8003c62:	4a7d      	ldr	r2, [pc, #500]	@ (8003e58 <main+0x6d8>)
 8003c64:	6013      	str	r3, [r2, #0]
		uint64_t currentTick = HAL_GetTick();
 8003c66:	f002 fc8b 	bl	8006580 <HAL_GetTick>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	469a      	mov	sl, r3
 8003c70:	4693      	mov	fp, r2
 8003c72:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
		float dt = (currentTick - lastTick) / 1000.0f;
 8003c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c7a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c7e:	ebb0 0802 	subs.w	r8, r0, r2
 8003c82:	eb61 0903 	sbc.w	r9, r1, r3
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fd f869 	bl	8000d60 <__aeabi_ul2f>
 8003c8e:	ee06 0a90 	vmov	s13, r0
 8003c92:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 8003e5c <main+0x6dc>
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		Modbus_Protocal_Worker();
 8003c9e:	f7fe fde5 	bl	800286c <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8003ca2:	486f      	ldr	r0, [pc, #444]	@ (8003e60 <main+0x6e0>)
 8003ca4:	f7fd fabe 	bl	8001224 <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8003ca8:	486d      	ldr	r0, [pc, #436]	@ (8003e60 <main+0x6e0>)
 8003caa:	f7fd faca 	bl	8001242 <modbus_Base_System_Status>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e64 <main+0x6e4>)
 8003cb4:	701a      	strb	r2, [r3, #0]
		PS2_ReadData();
 8003cb6:	f7fe f9c7 	bl	8002048 <PS2_ReadData>
		if (modbus_write_servo_up(&hmodbus) == 1) {
 8003cba:	4869      	ldr	r0, [pc, #420]	@ (8003e60 <main+0x6e0>)
 8003cbc:	f7fd fae3 	bl	8001286 <modbus_write_servo_up>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d102      	bne.n	8003ccc <main+0x54c>
			plotter = 1;
 8003cc6:	4b68      	ldr	r3, [pc, #416]	@ (8003e68 <main+0x6e8>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
		}
		if (modbus_write_servo_down(&hmodbus) == 1) {
 8003ccc:	4864      	ldr	r0, [pc, #400]	@ (8003e60 <main+0x6e0>)
 8003cce:	f7fd faea 	bl	80012a6 <modbus_write_servo_down>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d102      	bne.n	8003cde <main+0x55e>
			plotter = 2;
 8003cd8:	4b63      	ldr	r3, [pc, #396]	@ (8003e68 <main+0x6e8>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	601a      	str	r2, [r3, #0]
		}

		t_global = HAL_GetTick() / 1000.0f;
 8003cde:	f002 fc4f 	bl	8006580 <HAL_GetTick>
 8003ce2:	ee07 0a90 	vmov	s15, r0
 8003ce6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cea:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8003e5c <main+0x6dc>
 8003cee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cf2:	4b5e      	ldr	r3, [pc, #376]	@ (8003e6c <main+0x6ec>)
 8003cf4:	edc3 7a00 	vstr	s15, [r3]
//				__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//				servo_state = 0;
//			}
//		}

		if (dt >= 0.001f) {
 8003cf8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003cfc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8003e70 <main+0x6f0>
 8003d00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d08:	f2c1 806a 	blt.w	8004de0 <main+0x1660>

			HAL_ADC_Start(&hadc1);
 8003d0c:	4859      	ldr	r0, [pc, #356]	@ (8003e74 <main+0x6f4>)
 8003d0e:	f003 f80b 	bl	8006d28 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8003d12:	4859      	ldr	r0, [pc, #356]	@ (8003e78 <main+0x6f8>)
 8003d14:	f003 f808 	bl	8006d28 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8003d18:	4856      	ldr	r0, [pc, #344]	@ (8003e74 <main+0x6f4>)
 8003d1a:	f003 f8e9 	bl	8006ef0 <HAL_ADC_GetValue>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	4b56      	ldr	r3, [pc, #344]	@ (8003e7c <main+0x6fc>)
 8003d24:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8003d26:	4854      	ldr	r0, [pc, #336]	@ (8003e78 <main+0x6f8>)
 8003d28:	f003 f8e2 	bl	8006ef0 <HAL_ADC_GetValue>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	4b53      	ldr	r3, [pc, #332]	@ (8003e80 <main+0x700>)
 8003d32:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8003d34:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003d38:	4852      	ldr	r0, [pc, #328]	@ (8003e84 <main+0x704>)
 8003d3a:	f7fe f865 	bl	8001e08 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8003d3e:	ed97 0a19 	vldr	s0, [r7, #100]	@ 0x64
 8003d42:	4851      	ldr	r0, [pc, #324]	@ (8003e88 <main+0x708>)
 8003d44:	f7fe f860 	bl	8001e08 <Encoder_Update>
			lastTick = currentTick;
 8003d48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003d4c:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8003d50:	4b4e      	ldr	r3, [pc, #312]	@ (8003e8c <main+0x70c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	4a4e      	ldr	r2, [pc, #312]	@ (8003e90 <main+0x710>)
 8003d58:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e94 <main+0x714>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	4a4d      	ldr	r2, [pc, #308]	@ (8003e98 <main+0x718>)
 8003d62:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition_mm(&encoder1);
 8003d64:	4847      	ldr	r0, [pc, #284]	@ (8003e84 <main+0x704>)
 8003d66:	f7fe f941 	bl	8001fec <Encoder_GetPosition_mm>
 8003d6a:	eef0 7a40 	vmov.f32	s15, s0
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e9c <main+0x71c>)
 8003d70:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity_mm(&encoder1);
 8003d74:	4843      	ldr	r0, [pc, #268]	@ (8003e84 <main+0x704>)
 8003d76:	f7fe f948 	bl	800200a <Encoder_GetVelocity_mm>
 8003d7a:	eef0 7a40 	vmov.f32	s15, s0
 8003d7e:	4b48      	ldr	r3, [pc, #288]	@ (8003ea0 <main+0x720>)
 8003d80:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration_mm(&encoder1);
 8003d84:	483f      	ldr	r0, [pc, #252]	@ (8003e84 <main+0x704>)
 8003d86:	f7fe f94f 	bl	8002028 <Encoder_GetAcceleration_mm>
 8003d8a:	eef0 7a40 	vmov.f32	s15, s0
 8003d8e:	4b45      	ldr	r3, [pc, #276]	@ (8003ea4 <main+0x724>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8003d94:	483c      	ldr	r0, [pc, #240]	@ (8003e88 <main+0x708>)
 8003d96:	f7fe f8ed 	bl	8001f74 <Encoder_GetPosition>
 8003d9a:	eef0 7a40 	vmov.f32	s15, s0
 8003d9e:	4b42      	ldr	r3, [pc, #264]	@ (8003ea8 <main+0x728>)
 8003da0:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8003da4:	4838      	ldr	r0, [pc, #224]	@ (8003e88 <main+0x708>)
 8003da6:	f7fe f8f4 	bl	8001f92 <Encoder_GetVelocity>
 8003daa:	eef0 7a40 	vmov.f32	s15, s0
 8003dae:	e07d      	b.n	8003eac <main+0x72c>
 8003db0:	eb1c432d 	.word	0xeb1c432d
 8003db4:	3f5a36e2 	.word	0x3f5a36e2
 8003db8:	b50b0f28 	.word	0xb50b0f28
 8003dbc:	400ef9a6 	.word	0x400ef9a6
 8003dc0:	9db22d0e 	.word	0x9db22d0e
 8003dc4:	3fc6a7ef 	.word	0x3fc6a7ef
 8003dc8:	00000000 	.word	0x00000000
 8003dcc:	3fec0000 	.word	0x3fec0000
 8003dd0:	3c968944 	.word	0x3c968944
 8003dd4:	3f3f969e 	.word	0x3f3f969e
 8003dd8:	05857aff 	.word	0x05857aff
 8003ddc:	3f2e03f7 	.word	0x3f2e03f7
 8003de0:	fa8f7db7 	.word	0xfa8f7db7
 8003de4:	3f3615eb 	.word	0x3f3615eb
 8003de8:	f9db22d1 	.word	0xf9db22d1
 8003dec:	3fe06a7e 	.word	0x3fe06a7e
 8003df0:	a7daa4fc 	.word	0xa7daa4fc
 8003df4:	3ff331e3 	.word	0x3ff331e3
 8003df8:	e147ae14 	.word	0xe147ae14
 8003dfc:	3ffa147a 	.word	0x3ffa147a
 8003e00:	df3b645a 	.word	0xdf3b645a
 8003e04:	3fe78d4f 	.word	0x3fe78d4f
 8003e08:	003eea21 	.word	0x003eea21
 8003e0c:	3f7c4da9 	.word	0x3f7c4da9
 8003e10:	4dd2f1aa 	.word	0x4dd2f1aa
 8003e14:	3fc81062 	.word	0x3fc81062
 8003e18:	200011b0 	.word	0x200011b0
 8003e1c:	3da3d70a 	.word	0x3da3d70a
 8003e20:	3df5c28f 	.word	0x3df5c28f
 8003e24:	200014d8 	.word	0x200014d8
 8003e28:	20001510 	.word	0x20001510
 8003e2c:	20000d88 	.word	0x20000d88
 8003e30:	3e99999a 	.word	0x3e99999a
 8003e34:	3c23d70a 	.word	0x3c23d70a
 8003e38:	20000dc8 	.word	0x20000dc8
 8003e3c:	3da3d70a 	.word	0x3da3d70a
 8003e40:	20000e08 	.word	0x20000e08
 8003e44:	3f4ccccd 	.word	0x3f4ccccd
 8003e48:	3ecccccd 	.word	0x3ecccccd
 8003e4c:	20000e44 	.word	0x20000e44
 8003e50:	40400000 	.word	0x40400000
 8003e54:	3dcccccd 	.word	0x3dcccccd
 8003e58:	200016f8 	.word	0x200016f8
 8003e5c:	447a0000 	.word	0x447a0000
 8003e60:	200006f8 	.word	0x200006f8
 8003e64:	20000d60 	.word	0x20000d60
 8003e68:	200016e8 	.word	0x200016e8
 8003e6c:	200006c0 	.word	0x200006c0
 8003e70:	3a83126f 	.word	0x3a83126f
 8003e74:	20000290 	.word	0x20000290
 8003e78:	200002fc 	.word	0x200002fc
 8003e7c:	200006f4 	.word	0x200006f4
 8003e80:	200006f6 	.word	0x200006f6
 8003e84:	2000036c 	.word	0x2000036c
 8003e88:	200003a0 	.word	0x200003a0
 8003e8c:	20001908 	.word	0x20001908
 8003e90:	200003d4 	.word	0x200003d4
 8003e94:	200019d4 	.word	0x200019d4
 8003e98:	200003d8 	.word	0x200003d8
 8003e9c:	200006d8 	.word	0x200006d8
 8003ea0:	200006dc 	.word	0x200006dc
 8003ea4:	200006e0 	.word	0x200006e0
 8003ea8:	200006e4 	.word	0x200006e4
 8003eac:	4bac      	ldr	r3, [pc, #688]	@ (8004160 <main+0x9e0>)
 8003eae:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8003eb2:	48ac      	ldr	r0, [pc, #688]	@ (8004164 <main+0x9e4>)
 8003eb4:	f7fe f87c 	bl	8001fb0 <Encoder_GetAcceleration>
 8003eb8:	eef0 7a40 	vmov.f32	s15, s0
 8003ebc:	4baa      	ldr	r3, [pc, #680]	@ (8004168 <main+0x9e8>)
 8003ebe:	edc3 7a00 	vstr	s15, [r3]
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
//					NVIC_SystemReset();
//				}
//			}

			if (Base_Sysytem_status == Base_Home) {
 8003ec2:	4baa      	ldr	r3, [pc, #680]	@ (800416c <main+0x9ec>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	f000 8548 	beq.w	800495c <main+0x11dc>
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
//					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
//					NVIC_SystemReset();
//				}

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8003ecc:	4ba7      	ldr	r3, [pc, #668]	@ (800416c <main+0x9ec>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	f040 8415 	bne.w	8004700 <main+0xf80>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8003ed6:	2102      	movs	r1, #2
 8003ed8:	48a5      	ldr	r0, [pc, #660]	@ (8004170 <main+0x9f0>)
 8003eda:	f7fd f9f4 	bl	80012c6 <R_Theta_moving_Status>

				Circle = PS2_ButtonCircle();
 8003ede:	f7fe f8e5 	bl	80020ac <PS2_ButtonCircle>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4ba3      	ldr	r3, [pc, #652]	@ (8004174 <main+0x9f4>)
 8003ee8:	601a      	str	r2, [r3, #0]
				Square = PS2_ButtonSquare();
 8003eea:	f7fe f8f1 	bl	80020d0 <PS2_ButtonSquare>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4ba1      	ldr	r3, [pc, #644]	@ (8004178 <main+0x9f8>)
 8003ef4:	601a      	str	r2, [r3, #0]
				Triangle = PS2_ButtonTriangle();
 8003ef6:	f7fe f8fb 	bl	80020f0 <PS2_ButtonTriangle>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	4b9f      	ldr	r3, [pc, #636]	@ (800417c <main+0x9fc>)
 8003f00:	601a      	str	r2, [r3, #0]
				Cross = PS2_ButtonCross();
 8003f02:	f7fe f907 	bl	8002114 <PS2_ButtonCross>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b9d      	ldr	r3, [pc, #628]	@ (8004180 <main+0xa00>)
 8003f0c:	601a      	str	r2, [r3, #0]
				R1 = PS2_ButtonR1();
 8003f0e:	f7fe f913 	bl	8002138 <PS2_ButtonR1>
 8003f12:	4603      	mov	r3, r0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b9b      	ldr	r3, [pc, #620]	@ (8004184 <main+0xa04>)
 8003f18:	601a      	str	r2, [r3, #0]
				R2 = PS2_ButtonR2();
 8003f1a:	f7fe f91f 	bl	800215c <PS2_ButtonR2>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b99      	ldr	r3, [pc, #612]	@ (8004188 <main+0xa08>)
 8003f24:	601a      	str	r2, [r3, #0]
				Select = PS2_ButtonSelect();
 8003f26:	f7fe f92b 	bl	8002180 <PS2_ButtonSelect>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4b97      	ldr	r3, [pc, #604]	@ (800418c <main+0xa0c>)
 8003f30:	601a      	str	r2, [r3, #0]
				Start = PS2_ButtonStart();
 8003f32:	f7fe f937 	bl	80021a4 <PS2_ButtonStart>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b95      	ldr	r3, [pc, #596]	@ (8004190 <main+0xa10>)
 8003f3c:	601a      	str	r2, [r3, #0]
				L2 = PS2_ButtonL2();
 8003f3e:	f7fe f943 	bl	80021c8 <PS2_ButtonL2>
 8003f42:	4603      	mov	r3, r0
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b93      	ldr	r3, [pc, #588]	@ (8004194 <main+0xa14>)
 8003f48:	601a      	str	r2, [r3, #0]

				if (PS2_ButtonSquare()) {
 8003f4a:	f7fe f8c1 	bl	80020d0 <PS2_ButtonSquare>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <main+0x7ea>
					// Move Right (Revolute)
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1); // 0 or 1
 8003f54:	2201      	movs	r2, #1
 8003f56:	2140      	movs	r1, #64	@ 0x40
 8003f58:	488f      	ldr	r0, [pc, #572]	@ (8004198 <main+0xa18>)
 8003f5a:	f004 fbab 	bl	80086b4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 30000);
 8003f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800419c <main+0xa1c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f68:	e018      	b.n	8003f9c <main+0x81c>
				} else if (PS2_ButtonCircle()) {
 8003f6a:	f7fe f89f 	bl	80020ac <PS2_ButtonCircle>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <main+0x80a>
					// Move Left (Revolute)
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
 8003f74:	2200      	movs	r2, #0
 8003f76:	2140      	movs	r1, #64	@ 0x40
 8003f78:	4887      	ldr	r0, [pc, #540]	@ (8004198 <main+0xa18>)
 8003f7a:	f004 fb9b 	bl	80086b4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 30000);
 8003f7e:	4b87      	ldr	r3, [pc, #540]	@ (800419c <main+0xa1c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f247 5230 	movw	r2, #30000	@ 0x7530
 8003f86:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003f88:	e008      	b.n	8003f9c <main+0x81c>
				} else {
					//float v_set = (Revolute_dis() / 18.0) * 65535.0;
					// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
					//__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, v_set);
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0); // 0 or 1
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2140      	movs	r1, #64	@ 0x40
 8003f8e:	4882      	ldr	r0, [pc, #520]	@ (8004198 <main+0xa18>)
 8003f90:	f004 fb90 	bl	80086b4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, 0);
 8003f94:	4b81      	ldr	r3, [pc, #516]	@ (800419c <main+0xa1c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
				}

				if (PS2_ButtonTriangle()) {
 8003f9c:	f7fe f8a8 	bl	80020f0 <PS2_ButtonTriangle>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <main+0x83c>
					// Move Up (Prismatic)
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); // 0 or 1
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2102      	movs	r1, #2
 8003faa:	487d      	ldr	r0, [pc, #500]	@ (80041a0 <main+0xa20>)
 8003fac:	f004 fb82 	bl	80086b4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 40000);
 8003fb0:	4b7a      	ldr	r3, [pc, #488]	@ (800419c <main+0xa1c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fba:	e018      	b.n	8003fee <main+0x86e>
				} else if (PS2_ButtonCross()) {
 8003fbc:	f7fe f8aa 	bl	8002114 <PS2_ButtonCross>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <main+0x85c>
					// Move Down (Prismatic)
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2102      	movs	r1, #2
 8003fca:	4875      	ldr	r0, [pc, #468]	@ (80041a0 <main+0xa20>)
 8003fcc:	f004 fb72 	bl	80086b4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 40000);
 8003fd0:	4b72      	ldr	r3, [pc, #456]	@ (800419c <main+0xa1c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8003fd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fda:	e008      	b.n	8003fee <main+0x86e>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // 0 or 1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2102      	movs	r1, #2
 8003fe0:	486f      	ldr	r0, [pc, #444]	@ (80041a0 <main+0xa20>)
 8003fe2:	f004 fb67 	bl	80086b4 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 0);
 8003fe6:	4b6d      	ldr	r3, [pc, #436]	@ (800419c <main+0xa1c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	635a      	str	r2, [r3, #52]	@ 0x34
				}

				if (PS2_ButtonR1()) {
 8003fee:	f7fe f8a3 	bl	8002138 <PS2_ButtonR1>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <main+0x884>
					// Servo/Pen Move up
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 8003ff8:	4b6a      	ldr	r3, [pc, #424]	@ (80041a4 <main+0xa24>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004000:	641a      	str	r2, [r3, #64]	@ 0x40
 8004002:	e00e      	b.n	8004022 <main+0x8a2>
				} else if (PS2_ButtonR2()) {
 8004004:	f7fe f8aa 	bl	800215c <PS2_ButtonR2>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d005      	beq.n	800401a <main+0x89a>
					// Servo/Pen Move Down
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 800400e:	4b65      	ldr	r3, [pc, #404]	@ (80041a4 <main+0xa24>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004016:	641a      	str	r2, [r3, #64]	@ 0x40
 8004018:	e003      	b.n	8004022 <main+0x8a2>
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 800401a:	4b62      	ldr	r3, [pc, #392]	@ (80041a4 <main+0xa24>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				uint8_t selectPressed = PS2_ButtonL2();
 8004022:	f7fe f8d1 	bl	80021c8 <PS2_ButtonL2>
 8004026:	4603      	mov	r3, r0
 8004028:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
				static uint8_t prevSelect = 0;
				if (selectPressed && !prevSelect) {
 800402c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004030:	2b00      	cmp	r3, #0
 8004032:	d072      	beq.n	800411a <main+0x99a>
 8004034:	4b5c      	ldr	r3, [pc, #368]	@ (80041a8 <main+0xa28>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d16e      	bne.n	800411a <main+0x99a>
					if (count < 11) {
 800403c:	4b5b      	ldr	r3, [pc, #364]	@ (80041ac <main+0xa2c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b0a      	cmp	r3, #10
 8004042:	dc6a      	bgt.n	800411a <main+0x99a>
//						float test[11] = { 0.0f, 25.0f, 50.0f, 75.0f, 75.0f,
//								0.0f, 95.0f, 0.0f, 0.0f, 100.0f };
						PrismaticTenPoints[count] = roundf(
								Encoder_GetPosition_mm(&encoder1) * 10.0f);
 8004044:	485a      	ldr	r0, [pc, #360]	@ (80041b0 <main+0xa30>)
 8004046:	f7fd ffd1 	bl	8001fec <Encoder_GetPosition_mm>
 800404a:	eef0 7a40 	vmov.f32	s15, s0
						PrismaticTenPoints[count] = roundf(
 800404e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004056:	4b55      	ldr	r3, [pc, #340]	@ (80041ac <main+0xa2c>)
 8004058:	681c      	ldr	r4, [r3, #0]
 800405a:	eeb0 0a67 	vmov.f32	s0, s15
 800405e:	f00b fd81 	bl	800fb64 <roundf>
 8004062:	eef0 7a40 	vmov.f32	s15, s0
 8004066:	4a53      	ldr	r2, [pc, #332]	@ (80041b4 <main+0xa34>)
 8004068:	00a3      	lsls	r3, r4, #2
 800406a:	4413      	add	r3, r2
 800406c:	edc3 7a00 	vstr	s15, [r3]
						RevoluteTenPoints_Degree[count] = roundf(
								(Encoder_GetDegree(&encoder2) / (100.0 / 30.0))
 8004070:	483c      	ldr	r0, [pc, #240]	@ (8004164 <main+0x9e4>)
 8004072:	f7fd ffac 	bl	8001fce <Encoder_GetDegree>
 8004076:	ee10 3a10 	vmov	r3, s0
 800407a:	4618      	mov	r0, r3
 800407c:	f7fc fa30 	bl	80004e0 <__aeabi_f2d>
 8004080:	a335      	add	r3, pc, #212	@ (adr r3, 8004158 <main+0x9d8>)
 8004082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004086:	f7fc fbad 	bl	80007e4 <__aeabi_ddiv>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4610      	mov	r0, r2
 8004090:	4619      	mov	r1, r3
										* 10.0f);
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	4b48      	ldr	r3, [pc, #288]	@ (80041b8 <main+0xa38>)
 8004098:	f7fc fa7a 	bl	8000590 <__aeabi_dmul>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
						RevoluteTenPoints_Degree[count] = roundf(
 80040a0:	4610      	mov	r0, r2
 80040a2:	4619      	mov	r1, r3
 80040a4:	f7fc fd44 	bl	8000b30 <__aeabi_d2f>
 80040a8:	4602      	mov	r2, r0
 80040aa:	4b40      	ldr	r3, [pc, #256]	@ (80041ac <main+0xa2c>)
 80040ac:	681c      	ldr	r4, [r3, #0]
 80040ae:	ee00 2a10 	vmov	s0, r2
 80040b2:	f00b fd57 	bl	800fb64 <roundf>
 80040b6:	eef0 7a40 	vmov.f32	s15, s0
 80040ba:	4a40      	ldr	r2, [pc, #256]	@ (80041bc <main+0xa3c>)
 80040bc:	00a3      	lsls	r3, r4, #2
 80040be:	4413      	add	r3, r2
 80040c0:	edc3 7a00 	vstr	s15, [r3]
						PrismaticTenPoints_real[count] = Encoder_GetPosition_mm(
 80040c4:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <main+0xa2c>)
 80040c6:	681c      	ldr	r4, [r3, #0]
 80040c8:	4839      	ldr	r0, [pc, #228]	@ (80041b0 <main+0xa30>)
 80040ca:	f7fd ff8f 	bl	8001fec <Encoder_GetPosition_mm>
 80040ce:	eef0 7a40 	vmov.f32	s15, s0
 80040d2:	4a3b      	ldr	r2, [pc, #236]	@ (80041c0 <main+0xa40>)
 80040d4:	00a3      	lsls	r3, r4, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	edc3 7a00 	vstr	s15, [r3]
								&encoder1);
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 80040dc:	4821      	ldr	r0, [pc, #132]	@ (8004164 <main+0x9e4>)
 80040de:	f7fd ff49 	bl	8001f74 <Encoder_GetPosition>
 80040e2:	ee10 3a10 	vmov	r3, s0
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7fc f9fa 	bl	80004e0 <__aeabi_f2d>
								&encoder2) / (100.0 / 30.0);
 80040ec:	a31a      	add	r3, pc, #104	@ (adr r3, 8004158 <main+0x9d8>)
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f7fc fb77 	bl	80007e4 <__aeabi_ddiv>
 80040f6:	4602      	mov	r2, r0
 80040f8:	460b      	mov	r3, r1
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 80040fa:	492c      	ldr	r1, [pc, #176]	@ (80041ac <main+0xa2c>)
 80040fc:	680c      	ldr	r4, [r1, #0]
								&encoder2) / (100.0 / 30.0);
 80040fe:	4610      	mov	r0, r2
 8004100:	4619      	mov	r1, r3
 8004102:	f7fc fd15 	bl	8000b30 <__aeabi_d2f>
 8004106:	4602      	mov	r2, r0
						RevoluteTenPoints_real[count] = Encoder_GetPosition(
 8004108:	492e      	ldr	r1, [pc, #184]	@ (80041c4 <main+0xa44>)
 800410a:	00a3      	lsls	r3, r4, #2
 800410c:	440b      	add	r3, r1
 800410e:	601a      	str	r2, [r3, #0]
//						PrismaticTenPoints_real[count] = test[count];
//						RevoluteTenPoints_real[count] = test[count] / 10.0f;
						count += 1;
 8004110:	4b26      	ldr	r3, [pc, #152]	@ (80041ac <main+0xa2c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3301      	adds	r3, #1
 8004116:	4a25      	ldr	r2, [pc, #148]	@ (80041ac <main+0xa2c>)
 8004118:	6013      	str	r3, [r2, #0]
					}
				}
				prevSelect = selectPressed;
 800411a:	4a23      	ldr	r2, [pc, #140]	@ (80041a8 <main+0xa28>)
 800411c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004120:	7013      	strb	r3, [r2, #0]

				static uint8_t prevStart = 0;
				uint8_t nowStart = PS2_ButtonStart();
 8004122:	f7fe f83f 	bl	80021a4 <PS2_ButtonStart>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
				if (nowStart && !prevStart) {
 800412c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 819d 	beq.w	8004470 <main+0xcf0>
 8004136:	4b24      	ldr	r3, [pc, #144]	@ (80041c8 <main+0xa48>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f040 8198 	bne.w	8004470 <main+0xcf0>
					state_start = 1;
 8004140:	4b22      	ldr	r3, [pc, #136]	@ (80041cc <main+0xa4c>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]
					traj_start_time = t_global;
 8004146:	4b22      	ldr	r3, [pc, #136]	@ (80041d0 <main+0xa50>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a22      	ldr	r2, [pc, #136]	@ (80041d4 <main+0xa54>)
 800414c:	6013      	str	r3, [r2, #0]
					for (int i = 0; i < 10; i++) {
 800414e:	2300      	movs	r3, #0
 8004150:	677b      	str	r3, [r7, #116]	@ 0x74
 8004152:	e186      	b.n	8004462 <main+0xce2>
 8004154:	f3af 8000 	nop.w
 8004158:	aaaaaaab 	.word	0xaaaaaaab
 800415c:	400aaaaa 	.word	0x400aaaaa
 8004160:	200006e8 	.word	0x200006e8
 8004164:	200003a0 	.word	0x200003a0
 8004168:	200006ec 	.word	0x200006ec
 800416c:	20000d60 	.word	0x20000d60
 8004170:	200006f8 	.word	0x200006f8
 8004174:	20001568 	.word	0x20001568
 8004178:	2000156c 	.word	0x2000156c
 800417c:	20001570 	.word	0x20001570
 8004180:	20001574 	.word	0x20001574
 8004184:	20001578 	.word	0x20001578
 8004188:	2000157c 	.word	0x2000157c
 800418c:	20001580 	.word	0x20001580
 8004190:	20001584 	.word	0x20001584
 8004194:	20001588 	.word	0x20001588
 8004198:	48000800 	.word	0x48000800
 800419c:	20001c38 	.word	0x20001c38
 80041a0:	48000400 	.word	0x48000400
 80041a4:	20001aa0 	.word	0x20001aa0
 80041a8:	20001708 	.word	0x20001708
 80041ac:	20000208 	.word	0x20000208
 80041b0:	2000036c 	.word	0x2000036c
 80041b4:	2000158c 	.word	0x2000158c
 80041b8:	40240000 	.word	0x40240000
 80041bc:	200015b8 	.word	0x200015b8
 80041c0:	200015e4 	.word	0x200015e4
 80041c4:	20001610 	.word	0x20001610
 80041c8:	20001709 	.word	0x20001709
 80041cc:	200016ec 	.word	0x200016ec
 80041d0:	200006c0 	.word	0x200006c0
 80041d4:	200006c4 	.word	0x200006c4
						float start_pris = PrismaticTenPoints_real[i];
 80041d8:	4a79      	ldr	r2, [pc, #484]	@ (80043c0 <main+0xc40>)
 80041da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	657b      	str	r3, [r7, #84]	@ 0x54
						float end_pris = PrismaticTenPoints_real[i + 1];
 80041e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e6:	3301      	adds	r3, #1
 80041e8:	4a75      	ldr	r2, [pc, #468]	@ (80043c0 <main+0xc40>)
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	653b      	str	r3, [r7, #80]	@ 0x50
						float start_rev = RevoluteTenPoints_real[i];
 80041f2:	4a74      	ldr	r2, [pc, #464]	@ (80043c4 <main+0xc44>)
 80041f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
						float end_rev = (RevoluteTenPoints_real[i + 1]);
 80041fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004200:	3301      	adds	r3, #1
 8004202:	4a70      	ldr	r2, [pc, #448]	@ (80043c4 <main+0xc44>)
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	64bb      	str	r3, [r7, #72]	@ 0x48

						float t_start_pris =
								(i == 0) ?
										0.0f :
 800420c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800420e:	2b00      	cmp	r3, #0
 8004210:	d021      	beq.n	8004256 <main+0xad6>
										Prismatic[i - 1].t_start
 8004212:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	496c      	ldr	r1, [pc, #432]	@ (80043c8 <main+0xc48>)
 8004218:	4613      	mov	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	3320      	adds	r3, #32
 8004224:	ed93 7a00 	vldr	s14, [r3]
												+ Prismatic[i - 1].t_total
 8004228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800422a:	1e5a      	subs	r2, r3, #1
 800422c:	4966      	ldr	r1, [pc, #408]	@ (80043c8 <main+0xc48>)
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	331c      	adds	r3, #28
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee37 7a27 	vadd.f32	s14, s14, s15
												+ delay_pris[i - 1];
 8004242:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004244:	3b01      	subs	r3, #1
 8004246:	4a61      	ldr	r2, [pc, #388]	@ (80043cc <main+0xc4c>)
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	edd3 7a00 	vldr	s15, [r3]
										0.0f :
 8004250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004254:	e001      	b.n	800425a <main+0xada>
 8004256:	eddf 7a5e 	vldr	s15, [pc, #376]	@ 80043d0 <main+0xc50>
						float t_start_pris =
 800425a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
						float t_start_rev =
								(i == 0) ?
										0.0f :
 800425e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004260:	2b00      	cmp	r3, #0
 8004262:	d021      	beq.n	80042a8 <main+0xb28>
										Revolute[i - 1].t_start
 8004264:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004266:	1e5a      	subs	r2, r3, #1
 8004268:	495a      	ldr	r1, [pc, #360]	@ (80043d4 <main+0xc54>)
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	3320      	adds	r3, #32
 8004276:	ed93 7a00 	vldr	s14, [r3]
												+ Revolute[i - 1].t_total
 800427a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	4955      	ldr	r1, [pc, #340]	@ (80043d4 <main+0xc54>)
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	331c      	adds	r3, #28
 800428c:	edd3 7a00 	vldr	s15, [r3]
 8004290:	ee37 7a27 	vadd.f32	s14, s14, s15
												+ delay_rev[i - 1];
 8004294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004296:	3b01      	subs	r3, #1
 8004298:	4a4f      	ldr	r2, [pc, #316]	@ (80043d8 <main+0xc58>)
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	edd3 7a00 	vldr	s15, [r3]
										0.0f :
 80042a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a6:	e001      	b.n	80042ac <main+0xb2c>
 80042a8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80043d0 <main+0xc50>
						float t_start_rev =
 80042ac:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

						if (fabsf(end_pris - start_pris) < 0.001f) {
 80042b0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80042b4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80042b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042bc:	eef0 7ae7 	vabs.f32	s15, s15
 80042c0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80043dc <main+0xc5c>
 80042c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	d517      	bpl.n	80042fe <main+0xb7e>
							InitHoldTrajectorySegment(&Prismatic[i], start_pris,
 80042ce:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4a3b      	ldr	r2, [pc, #236]	@ (80043c8 <main+0xc48>)
 80042da:	4413      	add	r3, r2
 80042dc:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 80042e0:	eef1 0a06 	vmov.f32	s1, #22	@ 0x40b00000  5.5
 80042e4:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe ffb1 	bl	8003250 <InitHoldTrajectorySegment>
									5.5f, t_start_pris);
							delay_pris[i] = 0.0f;
 80042ee:	4a37      	ldr	r2, [pc, #220]	@ (80043cc <main+0xc4c>)
 80042f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e039      	b.n	8004372 <main+0xbf2>
						} else {
							InitTrajectorySegment(&Prismatic[i], start_pris,
 80042fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	4a2f      	ldr	r2, [pc, #188]	@ (80043c8 <main+0xc48>)
 800430a:	4413      	add	r3, r2
 800430c:	ed97 2a11 	vldr	s4, [r7, #68]	@ 0x44
 8004310:	eddf 1a33 	vldr	s3, [pc, #204]	@ 80043e0 <main+0xc60>
 8004314:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 80043e4 <main+0xc64>
 8004318:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 800431c:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fd99 	bl	8002e58 <InitTrajectorySegment>
									end_pris, v_max_pris, a_max_pris,
									t_start_pris);
							delay_pris[i] = 5.5f - Prismatic[i].t_total;
 8004326:	4928      	ldr	r1, [pc, #160]	@ (80043c8 <main+0xc48>)
 8004328:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800432a:	4613      	mov	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	331c      	adds	r3, #28
 8004336:	edd3 7a00 	vldr	s15, [r3]
 800433a:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 800433e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004342:	4a22      	ldr	r2, [pc, #136]	@ (80043cc <main+0xc4c>)
 8004344:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	edc3 7a00 	vstr	s15, [r3]
							if (delay_pris[i] < 0.0f)
 800434e:	4a1f      	ldr	r2, [pc, #124]	@ (80043cc <main+0xc4c>)
 8004350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	edd3 7a00 	vldr	s15, [r3]
 800435a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800435e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004362:	d506      	bpl.n	8004372 <main+0xbf2>
								delay_pris[i] = 0.0f;
 8004364:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <main+0xc4c>)
 8004366:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
						}

						if (fabsf(end_rev - start_rev) < 0.001f) {
 8004372:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004376:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800437a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800437e:	eef0 7ae7 	vabs.f32	s15, s15
 8004382:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80043dc <main+0xc5c>
 8004386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438e:	d52b      	bpl.n	80043e8 <main+0xc68>
							InitHoldTrajectorySegment(&Revolute[i], start_rev,
 8004390:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4a0e      	ldr	r2, [pc, #56]	@ (80043d4 <main+0xc54>)
 800439c:	4413      	add	r3, r2
 800439e:	ed97 1a10 	vldr	s2, [r7, #64]	@ 0x40
 80043a2:	eef1 0a06 	vmov.f32	s1, #22	@ 0x40b00000  5.5
 80043a6:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe ff50 	bl	8003250 <InitHoldTrajectorySegment>
									5.5f, t_start_rev);
							delay_rev[i] = 0.0f;
 80043b0:	4a09      	ldr	r2, [pc, #36]	@ (80043d8 <main+0xc58>)
 80043b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e04d      	b.n	800445c <main+0xcdc>
 80043c0:	200015e4 	.word	0x200015e4
 80043c4:	20001610 	.word	0x20001610
 80043c8:	200003f0 	.word	0x200003f0
 80043cc:	2000163c 	.word	0x2000163c
 80043d0:	00000000 	.word	0x00000000
 80043d4:	20000558 	.word	0x20000558
 80043d8:	20001664 	.word	0x20001664
 80043dc:	3a83126f 	.word	0x3a83126f
 80043e0:	437a0000 	.word	0x437a0000
 80043e4:	43fa0000 	.word	0x43fa0000
						} else {
							InitTrajectorySegment(&Revolute[i], start_rev,
 80043e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	4aae      	ldr	r2, [pc, #696]	@ (80046ac <main+0xf2c>)
 80043f4:	4413      	add	r3, r2
 80043f6:	ed97 2a10 	vldr	s4, [r7, #64]	@ 0x40
 80043fa:	eddf 1aad 	vldr	s3, [pc, #692]	@ 80046b0 <main+0xf30>
 80043fe:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004402:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8004406:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800440a:	4618      	mov	r0, r3
 800440c:	f7fe fd24 	bl	8002e58 <InitTrajectorySegment>
									end_rev, v_max_rev, a_max_rev, t_start_rev);
							delay_rev[i] = 5.5f - Revolute[i].t_total;
 8004410:	49a6      	ldr	r1, [pc, #664]	@ (80046ac <main+0xf2c>)
 8004412:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004414:	4613      	mov	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4413      	add	r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	331c      	adds	r3, #28
 8004420:	edd3 7a00 	vldr	s15, [r3]
 8004424:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8004428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800442c:	4aa1      	ldr	r2, [pc, #644]	@ (80046b4 <main+0xf34>)
 800442e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4413      	add	r3, r2
 8004434:	edc3 7a00 	vstr	s15, [r3]
							if (delay_rev[i] < 0.0f)
 8004438:	4a9e      	ldr	r2, [pc, #632]	@ (80046b4 <main+0xf34>)
 800443a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	d506      	bpl.n	800445c <main+0xcdc>
								delay_rev[i] = 0.0f;
 800444e:	4a99      	ldr	r2, [pc, #612]	@ (80046b4 <main+0xf34>)
 8004450:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 10; i++) {
 800445c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800445e:	3301      	adds	r3, #1
 8004460:	677b      	str	r3, [r7, #116]	@ 0x74
 8004462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004464:	2b09      	cmp	r3, #9
 8004466:	f77f aeb7 	ble.w	80041d8 <main+0xa58>
						}
					}
					current_segment = 0;
 800446a:	4b93      	ldr	r3, [pc, #588]	@ (80046b8 <main+0xf38>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
				}
				prevStart = nowStart;
 8004470:	4a92      	ldr	r2, [pc, #584]	@ (80046bc <main+0xf3c>)
 8004472:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8004476:	7013      	strb	r3, [r2, #0]

				float t_relative = t_global - traj_start_time;
 8004478:	4b91      	ldr	r3, [pc, #580]	@ (80046c0 <main+0xf40>)
 800447a:	ed93 7a00 	vldr	s14, [r3]
 800447e:	4b91      	ldr	r3, [pc, #580]	@ (80046c4 <main+0xf44>)
 8004480:	edd3 7a00 	vldr	s15, [r3]
 8004484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004488:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

				if (current_segment < 10) {
 800448c:	4b8a      	ldr	r3, [pc, #552]	@ (80046b8 <main+0xf38>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b09      	cmp	r3, #9
 8004492:	dc48      	bgt.n	8004526 <main+0xda6>
					pos_pris = GetTrajectoryPosition(
							&Prismatic[current_segment], t_relative);
 8004494:	4b88      	ldr	r3, [pc, #544]	@ (80046b8 <main+0xf38>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4a89      	ldr	r2, [pc, #548]	@ (80046c8 <main+0xf48>)
 80044a2:	4413      	add	r3, r2
					pos_pris = GetTrajectoryPosition(
 80044a4:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe fd8b 	bl	8002fc4 <GetTrajectoryPosition>
 80044ae:	eef0 7a40 	vmov.f32	s15, s0
 80044b2:	4b86      	ldr	r3, [pc, #536]	@ (80046cc <main+0xf4c>)
 80044b4:	edc3 7a00 	vstr	s15, [r3]
					vel_pris = GetTrajectoryVelocity(
							&Prismatic[current_segment], t_relative);
 80044b8:	4b7f      	ldr	r3, [pc, #508]	@ (80046b8 <main+0xf38>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4613      	mov	r3, r2
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4a80      	ldr	r2, [pc, #512]	@ (80046c8 <main+0xf48>)
 80044c6:	4413      	add	r3, r2
					vel_pris = GetTrajectoryVelocity(
 80044c8:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7fe fe4f 	bl	8003170 <GetTrajectoryVelocity>
 80044d2:	eef0 7a40 	vmov.f32	s15, s0
 80044d6:	4b7e      	ldr	r3, [pc, #504]	@ (80046d0 <main+0xf50>)
 80044d8:	edc3 7a00 	vstr	s15, [r3]
					pos_rev = GetTrajectoryPosition(&Revolute[current_segment],
 80044dc:	4b76      	ldr	r3, [pc, #472]	@ (80046b8 <main+0xf38>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4a70      	ldr	r2, [pc, #448]	@ (80046ac <main+0xf2c>)
 80044ea:	4413      	add	r3, r2
 80044ec:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fd67 	bl	8002fc4 <GetTrajectoryPosition>
 80044f6:	eef0 7a40 	vmov.f32	s15, s0
 80044fa:	4b76      	ldr	r3, [pc, #472]	@ (80046d4 <main+0xf54>)
 80044fc:	edc3 7a00 	vstr	s15, [r3]
							t_relative);
					vel_rev = GetTrajectoryVelocity(&Revolute[current_segment],
 8004500:	4b6d      	ldr	r3, [pc, #436]	@ (80046b8 <main+0xf38>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4a67      	ldr	r2, [pc, #412]	@ (80046ac <main+0xf2c>)
 800450e:	4413      	add	r3, r2
 8004510:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe fe2b 	bl	8003170 <GetTrajectoryVelocity>
 800451a:	eef0 7a40 	vmov.f32	s15, s0
 800451e:	4b6e      	ldr	r3, [pc, #440]	@ (80046d8 <main+0xf58>)
 8004520:	edc3 7a00 	vstr	s15, [r3]
 8004524:	e014      	b.n	8004550 <main+0xdd0>
							t_relative);
				} else {
					pos_pris = Prismatic[9].end_pos;
 8004526:	4b68      	ldr	r3, [pc, #416]	@ (80046c8 <main+0xf48>)
 8004528:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800452c:	4a67      	ldr	r2, [pc, #412]	@ (80046cc <main+0xf4c>)
 800452e:	6013      	str	r3, [r2, #0]
					vel_pris = 0.0f;
 8004530:	4b67      	ldr	r3, [pc, #412]	@ (80046d0 <main+0xf50>)
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	601a      	str	r2, [r3, #0]
					pos_rev = Revolute[9].end_pos;
 8004538:	4b5c      	ldr	r3, [pc, #368]	@ (80046ac <main+0xf2c>)
 800453a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800453e:	4a65      	ldr	r2, [pc, #404]	@ (80046d4 <main+0xf54>)
 8004540:	6013      	str	r3, [r2, #0]
					vel_rev = 0.0f;
 8004542:	4b65      	ldr	r3, [pc, #404]	@ (80046d8 <main+0xf58>)
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
					state_start = 0;
 800454a:	4b64      	ldr	r3, [pc, #400]	@ (80046dc <main+0xf5c>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
				}

				if (t_relative
						> Prismatic[current_segment].t_start
 8004550:	4b59      	ldr	r3, [pc, #356]	@ (80046b8 <main+0xf38>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	495c      	ldr	r1, [pc, #368]	@ (80046c8 <main+0xf48>)
 8004556:	4613      	mov	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4413      	add	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	440b      	add	r3, r1
 8004560:	3320      	adds	r3, #32
 8004562:	ed93 7a00 	vldr	s14, [r3]
								+ Prismatic[current_segment].t_total
 8004566:	4b54      	ldr	r3, [pc, #336]	@ (80046b8 <main+0xf38>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4957      	ldr	r1, [pc, #348]	@ (80046c8 <main+0xf48>)
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	331c      	adds	r3, #28
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	ee77 7a27 	vadd.f32	s15, s14, s15
				if (t_relative
 8004580:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	dd27      	ble.n	80045de <main+0xe5e>
						&& t_relative
								> Revolute[current_segment].t_start
 800458e:	4b4a      	ldr	r3, [pc, #296]	@ (80046b8 <main+0xf38>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4946      	ldr	r1, [pc, #280]	@ (80046ac <main+0xf2c>)
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	3320      	adds	r3, #32
 80045a0:	ed93 7a00 	vldr	s14, [r3]
										+ Revolute[current_segment].t_total) {
 80045a4:	4b44      	ldr	r3, [pc, #272]	@ (80046b8 <main+0xf38>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	4940      	ldr	r1, [pc, #256]	@ (80046ac <main+0xf2c>)
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	331c      	adds	r3, #28
 80045b6:	edd3 7a00 	vldr	s15, [r3]
 80045ba:	ee77 7a27 	vadd.f32	s15, s14, s15
						&& t_relative
 80045be:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80045c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ca:	dd08      	ble.n	80045de <main+0xe5e>
					if (current_segment < 9)
 80045cc:	4b3a      	ldr	r3, [pc, #232]	@ (80046b8 <main+0xf38>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b08      	cmp	r3, #8
 80045d2:	dc04      	bgt.n	80045de <main+0xe5e>
						current_segment++;
 80045d4:	4b38      	ldr	r3, [pc, #224]	@ (80046b8 <main+0xf38>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3301      	adds	r3, #1
 80045da:	4a37      	ldr	r2, [pc, #220]	@ (80046b8 <main+0xf38>)
 80045dc:	6013      	str	r3, [r2, #0]
				}

				if (plotter == 1) // Pen_Up
 80045de:	4b40      	ldr	r3, [pc, #256]	@ (80046e0 <main+0xf60>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d109      	bne.n	80045fa <main+0xe7a>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 80045e6:	4b3f      	ldr	r3, [pc, #252]	@ (80046e4 <main+0xf64>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80045ee:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 80045f0:	2102      	movs	r1, #2
 80045f2:	483d      	ldr	r0, [pc, #244]	@ (80046e8 <main+0xf68>)
 80045f4:	f7fc fe35 	bl	8001262 <modbus_servo_Status>
 80045f8:	e011      	b.n	800461e <main+0xe9e>
				} else if (plotter == 2) // Pen_Down
 80045fa:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <main+0xf60>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d109      	bne.n	8004616 <main+0xe96>
//					if (status < 2000) {
//						status += 1;
//					} else {
//						status += 0;
//					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 8004602:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <main+0xf64>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 800460c:	2101      	movs	r1, #1
 800460e:	4836      	ldr	r0, [pc, #216]	@ (80046e8 <main+0xf68>)
 8004610:	f7fc fe27 	bl	8001262 <modbus_servo_Status>
 8004614:	e003      	b.n	800461e <main+0xe9e>
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 8004616:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <main+0xf64>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2200      	movs	r2, #0
 800461c:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				if (count == 11 && Num_point <= 9) {  // Set_Target 10 points
 800461e:	4b33      	ldr	r3, [pc, #204]	@ (80046ec <main+0xf6c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b0b      	cmp	r3, #11
 8004624:	f040 819a 	bne.w	800495c <main+0x11dc>
 8004628:	4b31      	ldr	r3, [pc, #196]	@ (80046f0 <main+0xf70>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b09      	cmp	r3, #9
 800462e:	f200 8195 	bhi.w	800495c <main+0x11dc>
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 8004632:	4b2f      	ldr	r3, [pc, #188]	@ (80046f0 <main+0xf70>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4a2e      	ldr	r2, [pc, #184]	@ (80046f4 <main+0xf74>)
 800463a:	441a      	add	r2, r3
							PrismaticTenPoints[Num_point + 1],
 800463c:	4b2c      	ldr	r3, [pc, #176]	@ (80046f0 <main+0xf70>)
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 8004642:	492d      	ldr	r1, [pc, #180]	@ (80046f8 <main+0xf78>)
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	edd3 7a00 	vldr	s15, [r3]
							RevoluteTenPoints_Degree[Num_point + 1]);
 800464c:	4b28      	ldr	r3, [pc, #160]	@ (80046f0 <main+0xf70>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point],
 8004652:	492a      	ldr	r1, [pc, #168]	@ (80046fc <main+0xf7c>)
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	ed93 7a00 	vldr	s14, [r3]
 800465c:	eef0 0a47 	vmov.f32	s1, s14
 8004660:	eeb0 0a67 	vmov.f32	s0, s15
 8004664:	4610      	mov	r0, r2
 8004666:	f7fd f917 	bl	8001898 <Coordinate_Robot_to_Base>
					set_Target_Position_ten_points(&hmodbus,
 800466a:	4b21      	ldr	r3, [pc, #132]	@ (80046f0 <main+0xf70>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	4a21      	ldr	r2, [pc, #132]	@ (80046f4 <main+0xf74>)
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4413      	add	r3, r2
 8004674:	edd3 7a00 	vldr	s15, [r3]
 8004678:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <main+0xf70>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	4a1d      	ldr	r2, [pc, #116]	@ (80046f4 <main+0xf74>)
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	ed93 7a00 	vldr	s14, [r3]
 8004688:	4b19      	ldr	r3, [pc, #100]	@ (80046f0 <main+0xf70>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	4619      	mov	r1, r3
 800468e:	eef0 0a47 	vmov.f32	s1, s14
 8004692:	eeb0 0a67 	vmov.f32	s0, s15
 8004696:	4814      	ldr	r0, [pc, #80]	@ (80046e8 <main+0xf68>)
 8004698:	f7fc fe77 	bl	800138a <set_Target_Position_ten_points>
							Goal_point[Num_point].r_goal_position,
							Goal_point[Num_point].theta_goal_position,
							Num_point);
					Num_point += 1;
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <main+0xf70>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	3301      	adds	r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	4b12      	ldr	r3, [pc, #72]	@ (80046f0 <main+0xf70>)
 80046a6:	701a      	strb	r2, [r3, #0]
 80046a8:	e158      	b.n	800495c <main+0x11dc>
 80046aa:	bf00      	nop
 80046ac:	20000558 	.word	0x20000558
 80046b0:	3ecccccd 	.word	0x3ecccccd
 80046b4:	20001664 	.word	0x20001664
 80046b8:	200003ec 	.word	0x200003ec
 80046bc:	20001709 	.word	0x20001709
 80046c0:	200006c0 	.word	0x200006c0
 80046c4:	200006c4 	.word	0x200006c4
 80046c8:	200003f0 	.word	0x200003f0
 80046cc:	200003dc 	.word	0x200003dc
 80046d0:	200003e0 	.word	0x200003e0
 80046d4:	200003e4 	.word	0x200003e4
 80046d8:	200003e8 	.word	0x200003e8
 80046dc:	200016ec 	.word	0x200016ec
 80046e0:	200016e8 	.word	0x200016e8
 80046e4:	20001aa0 	.word	0x20001aa0
 80046e8:	200006f8 	.word	0x200006f8
 80046ec:	20000208 	.word	0x20000208
 80046f0:	2000168c 	.word	0x2000168c
 80046f4:	20001690 	.word	0x20001690
 80046f8:	2000158c 	.word	0x2000158c
 80046fc:	200015b8 	.word	0x200015b8
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 8004700:	4b6d      	ldr	r3, [pc, #436]	@ (80048b8 <main+0x1138>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d11a      	bne.n	800473e <main+0xfbe>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8004708:	486c      	ldr	r0, [pc, #432]	@ (80048bc <main+0x113c>)
 800470a:	f7fc fe68 	bl	80013de <modbus_set_goal_r_position>
 800470e:	4603      	mov	r3, r0
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004718:	4b69      	ldr	r3, [pc, #420]	@ (80048c0 <main+0x1140>)
 800471a:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 800471e:	4867      	ldr	r0, [pc, #412]	@ (80048bc <main+0x113c>)
 8004720:	f7fc fe75 	bl	800140e <modbus_set_goal_theta_position>
 8004724:	4603      	mov	r3, r0
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472e:	4b65      	ldr	r3, [pc, #404]	@ (80048c4 <main+0x1144>)
 8004730:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 8004734:	2104      	movs	r1, #4
 8004736:	4861      	ldr	r0, [pc, #388]	@ (80048bc <main+0x113c>)
 8004738:	f7fc fdc5 	bl	80012c6 <R_Theta_moving_Status>
 800473c:	e10e      	b.n	800495c <main+0x11dc>

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 800473e:	4b5e      	ldr	r3, [pc, #376]	@ (80048b8 <main+0x1138>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b08      	cmp	r3, #8
 8004744:	f040 810a 	bne.w	800495c <main+0x11dc>

				R_Theta_moving_Status(&hmodbus, Go_to_Target);
 8004748:	2108      	movs	r1, #8
 800474a:	485c      	ldr	r0, [pc, #368]	@ (80048bc <main+0x113c>)
 800474c:	f7fc fdbb 	bl	80012c6 <R_Theta_moving_Status>

				state_go_to = 1;
 8004750:	4b5d      	ldr	r3, [pc, #372]	@ (80048c8 <main+0x1148>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

				if (!has_initialized_target_traj) {
 8004756:	4b5d      	ldr	r3, [pc, #372]	@ (80048cc <main+0x114c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d159      	bne.n	8004812 <main+0x1092>
					Coordinate_Base_to_Robot(&Go_to_point, Goal_r_position,
 800475e:	4b58      	ldr	r3, [pc, #352]	@ (80048c0 <main+0x1140>)
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	4b57      	ldr	r3, [pc, #348]	@ (80048c4 <main+0x1144>)
 8004766:	ed93 7a00 	vldr	s14, [r3]
 800476a:	eef0 0a47 	vmov.f32	s1, s14
 800476e:	eeb0 0a67 	vmov.f32	s0, s15
 8004772:	4857      	ldr	r0, [pc, #348]	@ (80048d0 <main+0x1150>)
 8004774:	f7fc fe64 	bl	8001440 <Coordinate_Base_to_Robot>
							Goal_theta_position);

					traj_start_time_target = HAL_GetTick() / 1000.0f;
 8004778:	f001 ff02 	bl	8006580 <HAL_GetTick>
 800477c:	ee07 0a90 	vmov	s15, r0
 8004780:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004784:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80048d4 <main+0x1154>
 8004788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800478c:	4b52      	ldr	r3, [pc, #328]	@ (80048d8 <main+0x1158>)
 800478e:	edc3 7a00 	vstr	s15, [r3]
					has_initialized_target_traj = 1;
 8004792:	4b4e      	ldr	r3, [pc, #312]	@ (80048cc <main+0x114c>)
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]

					start_p = Go_to_point.r_goal_position;
 8004798:	4b4d      	ldr	r3, [pc, #308]	@ (80048d0 <main+0x1150>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a4f      	ldr	r2, [pc, #316]	@ (80048dc <main+0x115c>)
 800479e:	6013      	str	r3, [r2, #0]
					start_r = Go_to_point.theta_goal_position - 0.436332f + 0.02;
 80047a0:	4b4b      	ldr	r3, [pc, #300]	@ (80048d0 <main+0x1150>)
 80047a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80047a6:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80048e0 <main+0x1160>
 80047aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047ae:	ee17 0a90 	vmov	r0, s15
 80047b2:	f7fb fe95 	bl	80004e0 <__aeabi_f2d>
 80047b6:	a33e      	add	r3, pc, #248	@ (adr r3, 80048b0 <main+0x1130>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fb fd32 	bl	8000224 <__adddf3>
 80047c0:	4602      	mov	r2, r0
 80047c2:	460b      	mov	r3, r1
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	f7fc f9b2 	bl	8000b30 <__aeabi_d2f>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4a45      	ldr	r2, [pc, #276]	@ (80048e4 <main+0x1164>)
 80047d0:	6013      	str	r3, [r2, #0]
					InitTrajectorySegment(&Prismatic[0], 0.0f, start_p,
 80047d2:	4b42      	ldr	r3, [pc, #264]	@ (80048dc <main+0x115c>)
 80047d4:	edd3 7a00 	vldr	s15, [r3]
 80047d8:	ed9f 2a43 	vldr	s4, [pc, #268]	@ 80048e8 <main+0x1168>
 80047dc:	eddf 1a43 	vldr	s3, [pc, #268]	@ 80048ec <main+0x116c>
 80047e0:	ed9f 1a43 	vldr	s2, [pc, #268]	@ 80048f0 <main+0x1170>
 80047e4:	eef0 0a67 	vmov.f32	s1, s15
 80047e8:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 80048e8 <main+0x1168>
 80047ec:	4841      	ldr	r0, [pc, #260]	@ (80048f4 <main+0x1174>)
 80047ee:	f7fe fb33 	bl	8002e58 <InitTrajectorySegment>
					v_max_pris, a_max_pris, 0.0f);
					InitTrajectorySegment(&Revolute[0], 0.0f, start_r,
 80047f2:	4b3c      	ldr	r3, [pc, #240]	@ (80048e4 <main+0x1164>)
 80047f4:	edd3 7a00 	vldr	s15, [r3]
 80047f8:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 80048e8 <main+0x1168>
 80047fc:	eddf 1a3e 	vldr	s3, [pc, #248]	@ 80048f8 <main+0x1178>
 8004800:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004804:	eef0 0a67 	vmov.f32	s1, s15
 8004808:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80048e8 <main+0x1168>
 800480c:	483b      	ldr	r0, [pc, #236]	@ (80048fc <main+0x117c>)
 800480e:	f7fe fb23 	bl	8002e58 <InitTrajectorySegment>
					v_max_rev, a_max_rev, 0.0f);
				}

				float t_rel = t_global - traj_start_time_target;
 8004812:	4b3b      	ldr	r3, [pc, #236]	@ (8004900 <main+0x1180>)
 8004814:	ed93 7a00 	vldr	s14, [r3]
 8004818:	4b2f      	ldr	r3, [pc, #188]	@ (80048d8 <main+0x1158>)
 800481a:	edd3 7a00 	vldr	s15, [r3]
 800481e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004822:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
				pos_pris = GetTrajectoryPosition(&Prismatic[0], t_rel);
 8004826:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800482a:	4832      	ldr	r0, [pc, #200]	@ (80048f4 <main+0x1174>)
 800482c:	f7fe fbca 	bl	8002fc4 <GetTrajectoryPosition>
 8004830:	eef0 7a40 	vmov.f32	s15, s0
 8004834:	4b33      	ldr	r3, [pc, #204]	@ (8004904 <main+0x1184>)
 8004836:	edc3 7a00 	vstr	s15, [r3]
				vel_pris = GetTrajectoryVelocity(&Prismatic[0], t_rel);
 800483a:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 800483e:	482d      	ldr	r0, [pc, #180]	@ (80048f4 <main+0x1174>)
 8004840:	f7fe fc96 	bl	8003170 <GetTrajectoryVelocity>
 8004844:	eef0 7a40 	vmov.f32	s15, s0
 8004848:	4b2f      	ldr	r3, [pc, #188]	@ (8004908 <main+0x1188>)
 800484a:	edc3 7a00 	vstr	s15, [r3]
				pos_rev = GetTrajectoryPosition(&Revolute[0], t_rel);
 800484e:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8004852:	482a      	ldr	r0, [pc, #168]	@ (80048fc <main+0x117c>)
 8004854:	f7fe fbb6 	bl	8002fc4 <GetTrajectoryPosition>
 8004858:	eef0 7a40 	vmov.f32	s15, s0
 800485c:	4b2b      	ldr	r3, [pc, #172]	@ (800490c <main+0x118c>)
 800485e:	edc3 7a00 	vstr	s15, [r3]
				vel_rev = GetTrajectoryVelocity(&Revolute[0], t_rel);
 8004862:	ed97 0a18 	vldr	s0, [r7, #96]	@ 0x60
 8004866:	4825      	ldr	r0, [pc, #148]	@ (80048fc <main+0x117c>)
 8004868:	f7fe fc82 	bl	8003170 <GetTrajectoryVelocity>
 800486c:	eef0 7a40 	vmov.f32	s15, s0
 8004870:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <main+0x1190>)
 8004872:	edc3 7a00 	vstr	s15, [r3]

				if (plotter == 1) // Pen_Up
 8004876:	4b27      	ldr	r3, [pc, #156]	@ (8004914 <main+0x1194>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d109      	bne.n	8004892 <main+0x1112>
				{
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
 800487e:	4b26      	ldr	r3, [pc, #152]	@ (8004918 <main+0x1198>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Up);
 8004888:	2102      	movs	r1, #2
 800488a:	480c      	ldr	r0, [pc, #48]	@ (80048bc <main+0x113c>)
 800488c:	f7fc fce9 	bl	8001262 <modbus_servo_Status>
 8004890:	e048      	b.n	8004924 <main+0x11a4>
				} else if (plotter == 2) // Pen_Down
 8004892:	4b20      	ldr	r3, [pc, #128]	@ (8004914 <main+0x1194>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b02      	cmp	r3, #2
 8004898:	d140      	bne.n	800491c <main+0x119c>
//					if (status < 2000) {
//						status += 1;
//					} else {
//						status += 0;
//					}
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
 800489a:	4b1f      	ldr	r3, [pc, #124]	@ (8004918 <main+0x1198>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80048a2:	641a      	str	r2, [r3, #64]	@ 0x40
					modbus_servo_Status(&hmodbus, Limit_Down);
 80048a4:	2101      	movs	r1, #1
 80048a6:	4805      	ldr	r0, [pc, #20]	@ (80048bc <main+0x113c>)
 80048a8:	f7fc fcdb 	bl	8001262 <modbus_servo_Status>
 80048ac:	e03a      	b.n	8004924 <main+0x11a4>
 80048ae:	bf00      	nop
 80048b0:	47ae147b 	.word	0x47ae147b
 80048b4:	3f947ae1 	.word	0x3f947ae1
 80048b8:	20000d60 	.word	0x20000d60
 80048bc:	200006f8 	.word	0x200006f8
 80048c0:	20000d64 	.word	0x20000d64
 80048c4:	20000d68 	.word	0x20000d68
 80048c8:	200016f0 	.word	0x200016f0
 80048cc:	200006d4 	.word	0x200006d4
 80048d0:	200016e0 	.word	0x200016e0
 80048d4:	447a0000 	.word	0x447a0000
 80048d8:	200006d0 	.word	0x200006d0
 80048dc:	200006c8 	.word	0x200006c8
 80048e0:	3edf66e8 	.word	0x3edf66e8
 80048e4:	200006cc 	.word	0x200006cc
 80048e8:	00000000 	.word	0x00000000
 80048ec:	437a0000 	.word	0x437a0000
 80048f0:	43fa0000 	.word	0x43fa0000
 80048f4:	200003f0 	.word	0x200003f0
 80048f8:	3ecccccd 	.word	0x3ecccccd
 80048fc:	20000558 	.word	0x20000558
 8004900:	200006c0 	.word	0x200006c0
 8004904:	200003dc 	.word	0x200003dc
 8004908:	200003e0 	.word	0x200003e0
 800490c:	200003e4 	.word	0x200003e4
 8004910:	200003e8 	.word	0x200003e8
 8004914:	200016e8 	.word	0x200016e8
 8004918:	20001aa0 	.word	0x20001aa0
				} else {
					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
 800491c:	4bc4      	ldr	r3, [pc, #784]	@ (8004c30 <main+0x14b0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	641a      	str	r2, [r3, #64]	@ 0x40
				}

				float t_end = Revolute[0].t_start + Revolute[0].t_total;
 8004924:	4bc3      	ldr	r3, [pc, #780]	@ (8004c34 <main+0x14b4>)
 8004926:	ed93 7a08 	vldr	s14, [r3, #32]
 800492a:	4bc2      	ldr	r3, [pc, #776]	@ (8004c34 <main+0x14b4>)
 800492c:	edd3 7a07 	vldr	s15, [r3, #28]
 8004930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004934:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 500);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

				if (t_global > t_end + 2.0f) {
 8004938:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800493c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8004940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004944:	4bbc      	ldr	r3, [pc, #752]	@ (8004c38 <main+0x14b8>)
 8004946:	edd3 7a00 	vldr	s15, [r3]
 800494a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004952:	d503      	bpl.n	800495c <main+0x11dc>
					R_Theta_moving_Status(&hmodbus, Idle);
 8004954:	2100      	movs	r1, #0
 8004956:	48b9      	ldr	r0, [pc, #740]	@ (8004c3c <main+0x14bc>)
 8004958:	f7fc fcb5 	bl	80012c6 <R_Theta_moving_Status>
				}
			}

			if (Base_Sysytem_status != Base_Go_to_Target) {
 800495c:	4bb8      	ldr	r3, [pc, #736]	@ (8004c40 <main+0x14c0>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d005      	beq.n	8004970 <main+0x11f0>
				has_initialized_target_traj = 0;
 8004964:	4bb7      	ldr	r3, [pc, #732]	@ (8004c44 <main+0x14c4>)
 8004966:	2200      	movs	r2, #0
 8004968:	701a      	strb	r2, [r3, #0]
				state_go_to = 0;
 800496a:	4bb7      	ldr	r3, [pc, #732]	@ (8004c48 <main+0x14c8>)
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
			}

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 8004970:	48b6      	ldr	r0, [pc, #728]	@ (8004c4c <main+0x14cc>)
 8004972:	f7fd fb3b 	bl	8001fec <Encoder_GetPosition_mm>
 8004976:	eef0 7a40 	vmov.f32	s15, s0
 800497a:	4bb5      	ldr	r3, [pc, #724]	@ (8004c50 <main+0x14d0>)
 800497c:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 8004980:	48b2      	ldr	r0, [pc, #712]	@ (8004c4c <main+0x14cc>)
 8004982:	f7fd fb42 	bl	800200a <Encoder_GetVelocity_mm>
 8004986:	eef0 7a40 	vmov.f32	s15, s0
 800498a:	4bb1      	ldr	r3, [pc, #708]	@ (8004c50 <main+0x14d0>)
 800498c:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 8004990:	4baf      	ldr	r3, [pc, #700]	@ (8004c50 <main+0x14d0>)
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 8004998:	4bad      	ldr	r3, [pc, #692]	@ (8004c50 <main+0x14d0>)
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 80049a0:	4bac      	ldr	r3, [pc, #688]	@ (8004c54 <main+0x14d4>)
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	eeb0 0a67 	vmov.f32	s0, s15
 80049aa:	48ab      	ldr	r0, [pc, #684]	@ (8004c58 <main+0x14d8>)
 80049ac:	f7fd fd20 	bl	80023f0 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 80049b0:	48a9      	ldr	r0, [pc, #676]	@ (8004c58 <main+0x14d8>)
 80049b2:	f7fd fd2d 	bl	8002410 <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 80049b6:	49a6      	ldr	r1, [pc, #664]	@ (8004c50 <main+0x14d0>)
 80049b8:	48a7      	ldr	r0, [pc, #668]	@ (8004c58 <main+0x14d8>)
 80049ba:	f7fd fd76 	bl	80024aa <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 80049be:	48a7      	ldr	r0, [pc, #668]	@ (8004c5c <main+0x14dc>)
 80049c0:	f7fd fad8 	bl	8001f74 <Encoder_GetPosition>
 80049c4:	ee10 3a10 	vmov	r3, s0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fb fd89 	bl	80004e0 <__aeabi_f2d>
 80049ce:	a394      	add	r3, pc, #592	@ (adr r3, 8004c20 <main+0x14a0>)
 80049d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d4:	f7fb ff06 	bl	80007e4 <__aeabi_ddiv>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	f7fc f8a6 	bl	8000b30 <__aeabi_d2f>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4a9e      	ldr	r2, [pc, #632]	@ (8004c60 <main+0x14e0>)
 80049e8:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 80049ea:	489c      	ldr	r0, [pc, #624]	@ (8004c5c <main+0x14dc>)
 80049ec:	f7fd fad1 	bl	8001f92 <Encoder_GetVelocity>
 80049f0:	ee10 3a10 	vmov	r3, s0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fb fd73 	bl	80004e0 <__aeabi_f2d>
 80049fa:	a389      	add	r3, pc, #548	@ (adr r3, 8004c20 <main+0x14a0>)
 80049fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a00:	f7fb fef0 	bl	80007e4 <__aeabi_ddiv>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fc f890 	bl	8000b30 <__aeabi_d2f>
 8004a10:	4603      	mov	r3, r0
 8004a12:	4a93      	ldr	r2, [pc, #588]	@ (8004c60 <main+0x14e0>)
 8004a14:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 8004a16:	4b92      	ldr	r3, [pc, #584]	@ (8004c60 <main+0x14e0>)
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 8004a1e:	4b90      	ldr	r3, [pc, #576]	@ (8004c60 <main+0x14e0>)
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 8004a26:	4b8f      	ldr	r3, [pc, #572]	@ (8004c64 <main+0x14e4>)
 8004a28:	edd3 7a00 	vldr	s15, [r3]
 8004a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a30:	488d      	ldr	r0, [pc, #564]	@ (8004c68 <main+0x14e8>)
 8004a32:	f7fd fcdd 	bl	80023f0 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 8004a36:	488c      	ldr	r0, [pc, #560]	@ (8004c68 <main+0x14e8>)
 8004a38:	f7fd fcea 	bl	8002410 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 8004a3c:	4988      	ldr	r1, [pc, #544]	@ (8004c60 <main+0x14e0>)
 8004a3e:	488a      	ldr	r0, [pc, #552]	@ (8004c68 <main+0x14e8>)
 8004a40:	f7fd fd33 	bl	80024aa <Kalman_Update>

			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004a44:	4881      	ldr	r0, [pc, #516]	@ (8004c4c <main+0x14cc>)
 8004a46:	f7fd fad1 	bl	8001fec <Encoder_GetPosition_mm>
 8004a4a:	eeb0 8a40 	vmov.f32	s16, s0
 8004a4e:	4883      	ldr	r0, [pc, #524]	@ (8004c5c <main+0x14dc>)
 8004a50:	f7fd fabd 	bl	8001fce <Encoder_GetDegree>
 8004a54:	eef0 8a40 	vmov.f32	s17, s0
 8004a58:	487c      	ldr	r0, [pc, #496]	@ (8004c4c <main+0x14cc>)
 8004a5a:	f7fd fad6 	bl	800200a <Encoder_GetVelocity_mm>
 8004a5e:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 8004a62:	487e      	ldr	r0, [pc, #504]	@ (8004c5c <main+0x14dc>)
 8004a64:	f7fd fa95 	bl	8001f92 <Encoder_GetVelocity>
 8004a68:	ee10 3a10 	vmov	r3, s0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fb fd37 	bl	80004e0 <__aeabi_f2d>
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	4b7d      	ldr	r3, [pc, #500]	@ (8004c6c <main+0x14ec>)
 8004a78:	f7fb fd8a 	bl	8000590 <__aeabi_dmul>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4610      	mov	r0, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	a368      	add	r3, pc, #416	@ (adr r3, 8004c28 <main+0x14a8>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f7fb feab 	bl	80007e4 <__aeabi_ddiv>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004a92:	4610      	mov	r0, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	f7fc f84b 	bl	8000b30 <__aeabi_d2f>
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	486b      	ldr	r0, [pc, #428]	@ (8004c4c <main+0x14cc>)
 8004a9e:	f7fd fac3 	bl	8002028 <Encoder_GetAcceleration_mm>
 8004aa2:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 8004aa6:	486d      	ldr	r0, [pc, #436]	@ (8004c5c <main+0x14dc>)
 8004aa8:	f7fd fa82 	bl	8001fb0 <Encoder_GetAcceleration>
 8004aac:	ee10 3a10 	vmov	r3, s0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fb fd15 	bl	80004e0 <__aeabi_f2d>
 8004ab6:	f04f 0200 	mov.w	r2, #0
 8004aba:	4b6c      	ldr	r3, [pc, #432]	@ (8004c6c <main+0x14ec>)
 8004abc:	f7fb fd68 	bl	8000590 <__aeabi_dmul>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	a357      	add	r3, pc, #348	@ (adr r3, 8004c28 <main+0x14a8>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f7fb fe89 	bl	80007e4 <__aeabi_ddiv>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f7fc f829 	bl	8000b30 <__aeabi_d2f>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	ee02 3a90 	vmov	s5, r3
 8004ae4:	eeb0 2a69 	vmov.f32	s4, s19
 8004ae8:	ee01 4a90 	vmov	s3, r4
 8004aec:	eeb0 1a49 	vmov.f32	s2, s18
 8004af0:	eef0 0a68 	vmov.f32	s1, s17
 8004af4:	eeb0 0a48 	vmov.f32	s0, s16
 8004af8:	4850      	ldr	r0, [pc, #320]	@ (8004c3c <main+0x14bc>)
 8004afa:	f7fc fbf6 	bl	80012ea <modbus_Update_All>

			if (state_start == 1 || state_go_to == 1) {
 8004afe:	4b5c      	ldr	r3, [pc, #368]	@ (8004c70 <main+0x14f0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d004      	beq.n	8004b10 <main+0x1390>
 8004b06:	4b50      	ldr	r3, [pc, #320]	@ (8004c48 <main+0x14c8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	f040 8168 	bne.w	8004de0 <main+0x1660>
				Revolute_dis();
 8004b10:	f000 fd76 	bl	8005600 <Revolute_dis>
				count_Tim2 += 1;
 8004b14:	4b57      	ldr	r3, [pc, #348]	@ (8004c74 <main+0x14f4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	4a56      	ldr	r2, [pc, #344]	@ (8004c74 <main+0x14f4>)
 8004b1c:	6013      	str	r3, [r2, #0]
				// Velocity Control Prismatic
				velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 8004b1e:	484b      	ldr	r0, [pc, #300]	@ (8004c4c <main+0x14cc>)
 8004b20:	f7fd fa73 	bl	800200a <Encoder_GetVelocity_mm>
 8004b24:	eef0 7a40 	vmov.f32	s15, s0
 8004b28:	4b53      	ldr	r3, [pc, #332]	@ (8004c78 <main+0x14f8>)
 8004b2a:	edc3 7a00 	vstr	s15, [r3]
				//			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
				setvelocity_pris = vel_pris + V_pris_posi_PID;
 8004b2e:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <main+0x14fc>)
 8004b30:	ed93 7a00 	vldr	s14, [r3]
 8004b34:	4b52      	ldr	r3, [pc, #328]	@ (8004c80 <main+0x1500>)
 8004b36:	edd3 7a00 	vldr	s15, [r3]
 8004b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b3e:	4b51      	ldr	r3, [pc, #324]	@ (8004c84 <main+0x1504>)
 8004b40:	edc3 7a00 	vstr	s15, [r3]
				delta_velo_pris = setvelocity_pris - velocity_pris;
 8004b44:	4b4f      	ldr	r3, [pc, #316]	@ (8004c84 <main+0x1504>)
 8004b46:	ed93 7a00 	vldr	s14, [r3]
 8004b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c78 <main+0x14f8>)
 8004b4c:	edd3 7a00 	vldr	s15, [r3]
 8004b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b54:	4b4c      	ldr	r3, [pc, #304]	@ (8004c88 <main+0x1508>)
 8004b56:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
				V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 8004b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8004c88 <main+0x1508>)
 8004b5c:	edd3 7a00 	vldr	s15, [r3]
 8004b60:	eeb0 0a67 	vmov.f32	s0, s15
 8004b64:	f000 fb68 	bl	8005238 <Prismatic_velocity_control>
 8004b68:	eef0 7a40 	vmov.f32	s15, s0
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <main+0x14d4>)
 8004b6e:	edc3 7a00 	vstr	s15, [r3]

				// Velocity Control revolute
				velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 8004b72:	483a      	ldr	r0, [pc, #232]	@ (8004c5c <main+0x14dc>)
 8004b74:	f7fd fa0d 	bl	8001f92 <Encoder_GetVelocity>
 8004b78:	ee10 3a10 	vmov	r3, s0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fb fcaf 	bl	80004e0 <__aeabi_f2d>
 8004b82:	a327      	add	r3, pc, #156	@ (adr r3, 8004c20 <main+0x14a0>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fe2c 	bl	80007e4 <__aeabi_ddiv>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4610      	mov	r0, r2
 8004b92:	4619      	mov	r1, r3
 8004b94:	f7fb ffcc 	bl	8000b30 <__aeabi_d2f>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4a3c      	ldr	r2, [pc, #240]	@ (8004c8c <main+0x150c>)
 8004b9c:	6013      	str	r3, [r2, #0]
				//			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
				setvelocity_rev = vel_rev + V_rev_posi_PID;
 8004b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8004c90 <main+0x1510>)
 8004ba0:	ed93 7a00 	vldr	s14, [r3]
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	@ (8004c94 <main+0x1514>)
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bae:	4b3a      	ldr	r3, [pc, #232]	@ (8004c98 <main+0x1518>)
 8004bb0:	edc3 7a00 	vstr	s15, [r3]
				//			delta_velo_rev = setvelocity_rev - velocity_rev;
				delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 8004bb4:	4b38      	ldr	r3, [pc, #224]	@ (8004c98 <main+0x1518>)
 8004bb6:	ed93 7a00 	vldr	s14, [r3]
 8004bba:	4b2b      	ldr	r3, [pc, #172]	@ (8004c68 <main+0x14e8>)
 8004bbc:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 8004bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc4:	4b35      	ldr	r3, [pc, #212]	@ (8004c9c <main+0x151c>)
 8004bc6:	edc3 7a00 	vstr	s15, [r3]
				V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 8004bca:	4b34      	ldr	r3, [pc, #208]	@ (8004c9c <main+0x151c>)
 8004bcc:	edd3 7a00 	vldr	s15, [r3]
 8004bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd4:	f000 fc56 	bl	8005484 <Revolute_velocity_control>
 8004bd8:	eef0 7a40 	vmov.f32	s15, s0
 8004bdc:	4b21      	ldr	r3, [pc, #132]	@ (8004c64 <main+0x14e4>)
 8004bde:	edc3 7a00 	vstr	s15, [r3]
				if (count_Tim2 >= 10) {
 8004be2:	4b24      	ldr	r3, [pc, #144]	@ (8004c74 <main+0x14f4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b09      	cmp	r3, #9
 8004be8:	f340 80fa 	ble.w	8004de0 <main+0x1660>
					// Position Control Prismatic
					position_pris = Encoder_GetPosition_mm(&encoder1);
 8004bec:	4817      	ldr	r0, [pc, #92]	@ (8004c4c <main+0x14cc>)
 8004bee:	f7fd f9fd 	bl	8001fec <Encoder_GetPosition_mm>
 8004bf2:	eef0 7a40 	vmov.f32	s15, s0
 8004bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <main+0x1520>)
 8004bf8:	edc3 7a00 	vstr	s15, [r3]
					//				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
					setposition_pris = pos_pris;
 8004bfc:	4b29      	ldr	r3, [pc, #164]	@ (8004ca4 <main+0x1524>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <main+0x1528>)
 8004c02:	6013      	str	r3, [r2, #0]
					delta_posi_pris = setposition_pris - position_pris;
 8004c04:	4b28      	ldr	r3, [pc, #160]	@ (8004ca8 <main+0x1528>)
 8004c06:	ed93 7a00 	vldr	s14, [r3]
 8004c0a:	4b25      	ldr	r3, [pc, #148]	@ (8004ca0 <main+0x1520>)
 8004c0c:	edd3 7a00 	vldr	s15, [r3]
 8004c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c14:	4b25      	ldr	r3, [pc, #148]	@ (8004cac <main+0x152c>)
 8004c16:	edc3 7a00 	vstr	s15, [r3]
 8004c1a:	e049      	b.n	8004cb0 <main+0x1530>
 8004c1c:	f3af 8000 	nop.w
 8004c20:	aaaaaaab 	.word	0xaaaaaaab
 8004c24:	400aaaaa 	.word	0x400aaaaa
 8004c28:	e5604189 	.word	0xe5604189
 8004c2c:	400922d0 	.word	0x400922d0
 8004c30:	20001aa0 	.word	0x20001aa0
 8004c34:	20000558 	.word	0x20000558
 8004c38:	200006c0 	.word	0x200006c0
 8004c3c:	200006f8 	.word	0x200006f8
 8004c40:	20000d60 	.word	0x20000d60
 8004c44:	200006d4 	.word	0x200006d4
 8004c48:	200016f0 	.word	0x200016f0
 8004c4c:	2000036c 	.word	0x2000036c
 8004c50:	20001548 	.word	0x20001548
 8004c54:	20000df4 	.word	0x20000df4
 8004c58:	20000e8c 	.word	0x20000e8c
 8004c5c:	200003a0 	.word	0x200003a0
 8004c60:	20001558 	.word	0x20001558
 8004c64:	20000e70 	.word	0x20000e70
 8004c68:	200011b0 	.word	0x200011b0
 8004c6c:	40668000 	.word	0x40668000
 8004c70:	200016ec 	.word	0x200016ec
 8004c74:	20000d78 	.word	0x20000d78
 8004c78:	20000dec 	.word	0x20000dec
 8004c7c:	200003e0 	.word	0x200003e0
 8004c80:	20000db4 	.word	0x20000db4
 8004c84:	20000df0 	.word	0x20000df0
 8004c88:	20000e04 	.word	0x20000e04
 8004c8c:	20000e68 	.word	0x20000e68
 8004c90:	200003e8 	.word	0x200003e8
 8004c94:	20000e34 	.word	0x20000e34
 8004c98:	20000e6c 	.word	0x20000e6c
 8004c9c:	20000e80 	.word	0x20000e80
 8004ca0:	20000dac 	.word	0x20000dac
 8004ca4:	200003dc 	.word	0x200003dc
 8004ca8:	20000db0 	.word	0x20000db0
 8004cac:	20000dc4 	.word	0x20000dc4
					if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 8004cb0:	4ba5      	ldr	r3, [pc, #660]	@ (8004f48 <main+0x17c8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fb fc13 	bl	80004e0 <__aeabi_f2d>
 8004cba:	a39d      	add	r3, pc, #628	@ (adr r3, 8004f30 <main+0x17b0>)
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f7fb fee2 	bl	8000a88 <__aeabi_dcmple>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d015      	beq.n	8004cf6 <main+0x1576>
 8004cca:	4b9f      	ldr	r3, [pc, #636]	@ (8004f48 <main+0x17c8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fb fc06 	bl	80004e0 <__aeabi_f2d>
 8004cd4:	a398      	add	r3, pc, #608	@ (adr r3, 8004f38 <main+0x17b8>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fedf 	bl	8000a9c <__aeabi_dcmpge>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d008      	beq.n	8004cf6 <main+0x1576>
						V_pris_posi_PID = 0;
 8004ce4:	4b99      	ldr	r3, [pc, #612]	@ (8004f4c <main+0x17cc>)
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
						V_pris_velo_PID = 0;
 8004cec:	4b98      	ldr	r3, [pc, #608]	@ (8004f50 <main+0x17d0>)
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e00b      	b.n	8004d0e <main+0x158e>
					} else {
						V_pris_posi_PID = Prismatic_position_control(
 8004cf6:	4b94      	ldr	r3, [pc, #592]	@ (8004f48 <main+0x17c8>)
 8004cf8:	edd3 7a00 	vldr	s15, [r3]
 8004cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004d00:	f000 fa22 	bl	8005148 <Prismatic_position_control>
 8004d04:	eef0 7a40 	vmov.f32	s15, s0
 8004d08:	4b90      	ldr	r3, [pc, #576]	@ (8004f4c <main+0x17cc>)
 8004d0a:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_pris);
					}
					//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);

					// Position Control Revolute
					position_rev = (Encoder_GetPosition(&encoder2)
 8004d0e:	4891      	ldr	r0, [pc, #580]	@ (8004f54 <main+0x17d4>)
 8004d10:	f7fd f930 	bl	8001f74 <Encoder_GetPosition>
 8004d14:	ee10 3a10 	vmov	r3, s0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f7fb fbe1 	bl	80004e0 <__aeabi_f2d>
							/ (100.0 / 30.0));
 8004d1e:	a388      	add	r3, pc, #544	@ (adr r3, 8004f40 <main+0x17c0>)
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	f7fb fd5e 	bl	80007e4 <__aeabi_ddiv>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4610      	mov	r0, r2
 8004d2e:	4619      	mov	r1, r3
 8004d30:	f7fb fefe 	bl	8000b30 <__aeabi_d2f>
 8004d34:	4603      	mov	r3, r0
					position_rev = (Encoder_GetPosition(&encoder2)
 8004d36:	4a88      	ldr	r2, [pc, #544]	@ (8004f58 <main+0x17d8>)
 8004d38:	6013      	str	r3, [r2, #0]
					//				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
					setposition_rev = pos_rev; //+ Rev_backlash.backlash_offset;
 8004d3a:	4b88      	ldr	r3, [pc, #544]	@ (8004f5c <main+0x17dc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a88      	ldr	r2, [pc, #544]	@ (8004f60 <main+0x17e0>)
 8004d40:	6013      	str	r3, [r2, #0]
					Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
 8004d42:	4b86      	ldr	r3, [pc, #536]	@ (8004f5c <main+0x17dc>)
 8004d44:	edd3 7a00 	vldr	s15, [r3]
 8004d48:	4b86      	ldr	r3, [pc, #536]	@ (8004f64 <main+0x17e4>)
 8004d4a:	ed93 7a00 	vldr	s14, [r3]
 8004d4e:	4b86      	ldr	r3, [pc, #536]	@ (8004f68 <main+0x17e8>)
 8004d50:	edd3 6a00 	vldr	s13, [r3]
 8004d54:	eeb0 1a66 	vmov.f32	s2, s13
 8004d58:	eef0 0a47 	vmov.f32	s1, s14
 8004d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8004d60:	4882      	ldr	r0, [pc, #520]	@ (8004f6c <main+0x17ec>)
 8004d62:	f7fc f9f8 	bl	8001156 <Backlash_Update>
					delta_posi_rev = setposition_rev - position_rev;
 8004d66:	4b7e      	ldr	r3, [pc, #504]	@ (8004f60 <main+0x17e0>)
 8004d68:	ed93 7a00 	vldr	s14, [r3]
 8004d6c:	4b7a      	ldr	r3, [pc, #488]	@ (8004f58 <main+0x17d8>)
 8004d6e:	edd3 7a00 	vldr	s15, [r3]
 8004d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d76:	4b7e      	ldr	r3, [pc, #504]	@ (8004f70 <main+0x17f0>)
 8004d78:	edc3 7a00 	vstr	s15, [r3]
					if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 8004d7c:	4b7c      	ldr	r3, [pc, #496]	@ (8004f70 <main+0x17f0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fb fbad 	bl	80004e0 <__aeabi_f2d>
 8004d86:	a36a      	add	r3, pc, #424	@ (adr r3, 8004f30 <main+0x17b0>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f7fb fe7c 	bl	8000a88 <__aeabi_dcmple>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d015      	beq.n	8004dc2 <main+0x1642>
 8004d96:	4b76      	ldr	r3, [pc, #472]	@ (8004f70 <main+0x17f0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fb fba0 	bl	80004e0 <__aeabi_f2d>
 8004da0:	a365      	add	r3, pc, #404	@ (adr r3, 8004f38 <main+0x17b8>)
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	f7fb fe79 	bl	8000a9c <__aeabi_dcmpge>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <main+0x1642>
						V_rev_posi_PID = 0;
 8004db0:	4b70      	ldr	r3, [pc, #448]	@ (8004f74 <main+0x17f4>)
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	601a      	str	r2, [r3, #0]
						V_rev_velo_PID = 0;
 8004db8:	4b6f      	ldr	r3, [pc, #444]	@ (8004f78 <main+0x17f8>)
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e00b      	b.n	8004dda <main+0x165a>
					} else {
						V_rev_posi_PID = Revolute_position_control(
 8004dc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004f70 <main+0x17f0>)
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004dcc:	f000 fae2 	bl	8005394 <Revolute_position_control>
 8004dd0:	eef0 7a40 	vmov.f32	s15, s0
 8004dd4:	4b67      	ldr	r3, [pc, #412]	@ (8004f74 <main+0x17f4>)
 8004dd6:	edc3 7a00 	vstr	s15, [r3]
								delta_posi_rev);
					}

					count_Tim2 = 0;
 8004dda:	4b68      	ldr	r3, [pc, #416]	@ (8004f7c <main+0x17fc>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if (state_start == 1 || state_go_to == 1) {
 8004de0:	4b67      	ldr	r3, [pc, #412]	@ (8004f80 <main+0x1800>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d004      	beq.n	8004df2 <main+0x1672>
 8004de8:	4b66      	ldr	r3, [pc, #408]	@ (8004f84 <main+0x1804>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	f47e af35 	bne.w	8003c5c <main+0x4dc>
			if (V_pris_velo_PID < 0) {
 8004df2:	4b57      	ldr	r3, [pc, #348]	@ (8004f50 <main+0x17d0>)
 8004df4:	edd3 7a00 	vldr	s15, [r3]
 8004df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e00:	d50b      	bpl.n	8004e1a <main+0x169a>
				DIR_24V = 0;
 8004e02:	4b61      	ldr	r3, [pc, #388]	@ (8004f88 <main+0x1808>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = fabsf(V_pris_velo_PID);
 8004e08:	4b51      	ldr	r3, [pc, #324]	@ (8004f50 <main+0x17d0>)
 8004e0a:	edd3 7a00 	vldr	s15, [r3]
 8004e0e:	eef0 7ae7 	vabs.f32	s15, s15
 8004e12:	4b5e      	ldr	r3, [pc, #376]	@ (8004f8c <main+0x180c>)
 8004e14:	edc3 7a00 	vstr	s15, [r3]
 8004e18:	e00e      	b.n	8004e38 <main+0x16b8>
			} else if (V_pris_velo_PID > 0) {
 8004e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8004f50 <main+0x17d0>)
 8004e1c:	edd3 7a00 	vldr	s15, [r3]
 8004e20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e28:	dd06      	ble.n	8004e38 <main+0x16b8>
				DIR_24V = 1;
 8004e2a:	4b57      	ldr	r3, [pc, #348]	@ (8004f88 <main+0x1808>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
				V_absoulte_pris = V_pris_velo_PID;
 8004e30:	4b47      	ldr	r3, [pc, #284]	@ (8004f50 <main+0x17d0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a55      	ldr	r2, [pc, #340]	@ (8004f8c <main+0x180c>)
 8004e36:	6013      	str	r3, [r2, #0]
			}
			pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8004e38:	4b54      	ldr	r3, [pc, #336]	@ (8004f8c <main+0x180c>)
 8004e3a:	edd3 7a00 	vldr	s15, [r3]
 8004e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004e42:	f000 fbbd 	bl	80055c0 <voltage_to_pwm>
 8004e46:	eef0 7a40 	vmov.f32	s15, s0
 8004e4a:	4b51      	ldr	r3, [pc, #324]	@ (8004f90 <main+0x1810>)
 8004e4c:	edc3 7a00 	vstr	s15, [r3]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
 8004e50:	4b4d      	ldr	r3, [pc, #308]	@ (8004f88 <main+0x1808>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	2102      	movs	r1, #2
 8004e5a:	484e      	ldr	r0, [pc, #312]	@ (8004f94 <main+0x1814>)
 8004e5c:	f003 fc2a 	bl	80086b4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, pwm_pris_velo);
 8004e60:	4b4b      	ldr	r3, [pc, #300]	@ (8004f90 <main+0x1810>)
 8004e62:	edd3 7a00 	vldr	s15, [r3]
 8004e66:	4b4c      	ldr	r3, [pc, #304]	@ (8004f98 <main+0x1818>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6e:	ee17 2a90 	vmov	r2, s15
 8004e72:	635a      	str	r2, [r3, #52]	@ 0x34

			if (V_rev_velo_PID < 0) {
 8004e74:	4b40      	ldr	r3, [pc, #256]	@ (8004f78 <main+0x17f8>)
 8004e76:	edd3 7a00 	vldr	s15, [r3]
 8004e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e82:	d50b      	bpl.n	8004e9c <main+0x171c>
				DIR_18V = 0;
 8004e84:	4b45      	ldr	r3, [pc, #276]	@ (8004f9c <main+0x181c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
				V_absolute_rev = fabsf(V_rev_velo_PID);
 8004e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f78 <main+0x17f8>)
 8004e8c:	edd3 7a00 	vldr	s15, [r3]
 8004e90:	eef0 7ae7 	vabs.f32	s15, s15
 8004e94:	4b42      	ldr	r3, [pc, #264]	@ (8004fa0 <main+0x1820>)
 8004e96:	edc3 7a00 	vstr	s15, [r3]
 8004e9a:	e00e      	b.n	8004eba <main+0x173a>
			} else if (V_rev_velo_PID > 0) {
 8004e9c:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <main+0x17f8>)
 8004e9e:	edd3 7a00 	vldr	s15, [r3]
 8004ea2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eaa:	dd06      	ble.n	8004eba <main+0x173a>
				DIR_18V = 1;
 8004eac:	4b3b      	ldr	r3, [pc, #236]	@ (8004f9c <main+0x181c>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	601a      	str	r2, [r3, #0]
				V_absolute_rev = V_rev_velo_PID;
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <main+0x17f8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a3a      	ldr	r2, [pc, #232]	@ (8004fa0 <main+0x1820>)
 8004eb8:	6013      	str	r3, [r2, #0]
			}
			V_plant = V_absolute_rev + voltage_dis_rev;
 8004eba:	4b39      	ldr	r3, [pc, #228]	@ (8004fa0 <main+0x1820>)
 8004ebc:	ed93 7a00 	vldr	s14, [r3]
 8004ec0:	4b38      	ldr	r3, [pc, #224]	@ (8004fa4 <main+0x1824>)
 8004ec2:	edd3 7a00 	vldr	s15, [r3]
 8004ec6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eca:	4b37      	ldr	r3, [pc, #220]	@ (8004fa8 <main+0x1828>)
 8004ecc:	edc3 7a00 	vstr	s15, [r3]
			if (V_plant > 18) {
 8004ed0:	4b35      	ldr	r3, [pc, #212]	@ (8004fa8 <main+0x1828>)
 8004ed2:	edd3 7a00 	vldr	s15, [r3]
 8004ed6:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee2:	dd02      	ble.n	8004eea <main+0x176a>
				V_plant = 18;
 8004ee4:	4b30      	ldr	r3, [pc, #192]	@ (8004fa8 <main+0x1828>)
 8004ee6:	4a31      	ldr	r2, [pc, #196]	@ (8004fac <main+0x182c>)
 8004ee8:	601a      	str	r2, [r3, #0]
			}
			pwm_rev_velo = (V_plant / 18) * 65535;
 8004eea:	4b2f      	ldr	r3, [pc, #188]	@ (8004fa8 <main+0x1828>)
 8004eec:	ed93 7a00 	vldr	s14, [r3]
 8004ef0:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8004ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ef8:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004fb0 <main+0x1830>
 8004efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f00:	4b2c      	ldr	r3, [pc, #176]	@ (8004fb4 <main+0x1834>)
 8004f02:	edc3 7a00 	vstr	s15, [r3]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, DIR_18V);
 8004f06:	4b25      	ldr	r3, [pc, #148]	@ (8004f9c <main+0x181c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	2140      	movs	r1, #64	@ 0x40
 8004f10:	4829      	ldr	r0, [pc, #164]	@ (8004fb8 <main+0x1838>)
 8004f12:	f003 fbcf 	bl	80086b4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_3, pwm_rev_velo);
 8004f16:	4b27      	ldr	r3, [pc, #156]	@ (8004fb4 <main+0x1834>)
 8004f18:	edd3 7a00 	vldr	s15, [r3]
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004f98 <main+0x1818>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f24:	ee17 2a90 	vmov	r2, s15
 8004f28:	63da      	str	r2, [r3, #60]	@ 0x3c
	while (1) {
 8004f2a:	f7fe be97 	b.w	8003c5c <main+0x4dc>
 8004f2e:	bf00      	nop
 8004f30:	9999999a 	.word	0x9999999a
 8004f34:	3fb99999 	.word	0x3fb99999
 8004f38:	9999999a 	.word	0x9999999a
 8004f3c:	bfb99999 	.word	0xbfb99999
 8004f40:	aaaaaaab 	.word	0xaaaaaaab
 8004f44:	400aaaaa 	.word	0x400aaaaa
 8004f48:	20000dc4 	.word	0x20000dc4
 8004f4c:	20000db4 	.word	0x20000db4
 8004f50:	20000df4 	.word	0x20000df4
 8004f54:	200003a0 	.word	0x200003a0
 8004f58:	20000e2c 	.word	0x20000e2c
 8004f5c:	200003e4 	.word	0x200003e4
 8004f60:	20000e30 	.word	0x20000e30
 8004f64:	200006e4 	.word	0x200006e4
 8004f68:	200006e8 	.word	0x200006e8
 8004f6c:	20000d7c 	.word	0x20000d7c
 8004f70:	20000e40 	.word	0x20000e40
 8004f74:	20000e34 	.word	0x20000e34
 8004f78:	20000e70 	.word	0x20000e70
 8004f7c:	20000d78 	.word	0x20000d78
 8004f80:	200016ec 	.word	0x200016ec
 8004f84:	200016f0 	.word	0x200016f0
 8004f88:	20000d70 	.word	0x20000d70
 8004f8c:	20000db8 	.word	0x20000db8
 8004f90:	20000df8 	.word	0x20000df8
 8004f94:	48000400 	.word	0x48000400
 8004f98:	20001c38 	.word	0x20001c38
 8004f9c:	20000d6c 	.word	0x20000d6c
 8004fa0:	20000e84 	.word	0x20000e84
 8004fa4:	20000d74 	.word	0x20000d74
 8004fa8:	20000e88 	.word	0x20000e88
 8004fac:	41900000 	.word	0x41900000
 8004fb0:	477fff00 	.word	0x477fff00
 8004fb4:	20000e74 	.word	0x20000e74
 8004fb8:	48000800 	.word	0x48000800

08004fbc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b094      	sub	sp, #80	@ 0x50
 8004fc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004fc2:	f107 0318 	add.w	r3, r7, #24
 8004fc6:	2238      	movs	r2, #56	@ 0x38
 8004fc8:	2100      	movs	r1, #0
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f00a fb26 	bl	800f61c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004fd0:	1d3b      	adds	r3, r7, #4
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	605a      	str	r2, [r3, #4]
 8004fd8:	609a      	str	r2, [r3, #8]
 8004fda:	60da      	str	r2, [r3, #12]
 8004fdc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004fde:	2000      	movs	r0, #0
 8004fe0:	f003 fb98 	bl	8008714 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004fee:	2340      	movs	r3, #64	@ 0x40
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004ffe:	2355      	movs	r3, #85	@ 0x55
 8005000:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005002:	2302      	movs	r3, #2
 8005004:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005006:	2302      	movs	r3, #2
 8005008:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800500a:	2302      	movs	r3, #2
 800500c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800500e:	f107 0318 	add.w	r3, r7, #24
 8005012:	4618      	mov	r0, r3
 8005014:	f003 fc32 	bl	800887c <HAL_RCC_OscConfig>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <SystemClock_Config+0x66>
		Error_Handler();
 800501e:	f000 fb2d 	bl	800567c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005022:	230f      	movs	r3, #15
 8005024:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005026:	2303      	movs	r3, #3
 8005028:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8005036:	1d3b      	adds	r3, r7, #4
 8005038:	2104      	movs	r1, #4
 800503a:	4618      	mov	r0, r3
 800503c:	f003 ff30 	bl	8008ea0 <HAL_RCC_ClockConfig>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <SystemClock_Config+0x8e>
		Error_Handler();
 8005046:	f000 fb19 	bl	800567c <Error_Handler>
	}
}
 800504a:	bf00      	nop
 800504c:	3750      	adds	r7, #80	@ 0x50
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 800505e:	88fb      	ldrh	r3, [r7, #6]
 8005060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005064:	d103      	bne.n	800506e <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8005066:	4b2c      	ldr	r3, [pc, #176]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005068:	2209      	movs	r2, #9
 800506a:	601a      	str	r2, [r3, #0]
		Home_Pris = 1;
		State = 15;
//		set_home_pris = 1;
//		count_pris += 1;
	}
}
 800506c:	e04e      	b.n	800510c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005074:	d103      	bne.n	800507e <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8005076:	4b28      	ldr	r3, [pc, #160]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005078:	220a      	movs	r2, #10
 800507a:	601a      	str	r2, [r3, #0]
}
 800507c:	e046      	b.n	800510c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005084:	d11d      	bne.n	80050c2 <HAL_GPIO_EXTI_Callback+0x6e>
		if (Emer_trick - Emer_last_trick >= 1000) {
 8005086:	4b25      	ldr	r3, [pc, #148]	@ (800511c <HAL_GPIO_EXTI_Callback+0xc8>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	4b25      	ldr	r3, [pc, #148]	@ (8005120 <HAL_GPIO_EXTI_Callback+0xcc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005094:	d311      	bcc.n	80050ba <HAL_GPIO_EXTI_Callback+0x66>
			Emer_count += 1;
 8005096:	4b23      	ldr	r3, [pc, #140]	@ (8005124 <HAL_GPIO_EXTI_Callback+0xd0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3301      	adds	r3, #1
 800509c:	4a21      	ldr	r2, [pc, #132]	@ (8005124 <HAL_GPIO_EXTI_Callback+0xd0>)
 800509e:	6013      	str	r3, [r2, #0]
			Emer_last_trick = Emer_trick;
 80050a0:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_GPIO_EXTI_Callback+0xc8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a1e      	ldr	r2, [pc, #120]	@ (8005120 <HAL_GPIO_EXTI_Callback+0xcc>)
 80050a6:	6013      	str	r3, [r2, #0]
			if (Emer_count % 2 == 1) {
 80050a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005124 <HAL_GPIO_EXTI_Callback+0xd0>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_GPIO_EXTI_Callback+0x66>
				Emer_state = 1;
 80050b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005128 <HAL_GPIO_EXTI_Callback+0xd4>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
		State = 11;
 80050ba:	4b17      	ldr	r3, [pc, #92]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050bc:	220b      	movs	r2, #11
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	e024      	b.n	800510c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 80050c2:	88fb      	ldrh	r3, [r7, #6]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050c8:	d106      	bne.n	80050d8 <HAL_GPIO_EXTI_Callback+0x84>
		Home_Rev = 1;
 80050ca:	4b18      	ldr	r3, [pc, #96]	@ (800512c <HAL_GPIO_EXTI_Callback+0xd8>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	701a      	strb	r2, [r3, #0]
		State = 12;
 80050d0:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050d2:	220c      	movs	r2, #12
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	e019      	b.n	800510c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 80050d8:	88fb      	ldrh	r3, [r7, #6]
 80050da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050de:	d103      	bne.n	80050e8 <HAL_GPIO_EXTI_Callback+0x94>
		State = 13;
 80050e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050e2:	220d      	movs	r2, #13
 80050e4:	601a      	str	r2, [r3, #0]
}
 80050e6:	e011      	b.n	800510c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 80050e8:	88fb      	ldrh	r3, [r7, #6]
 80050ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050ee:	d103      	bne.n	80050f8 <HAL_GPIO_EXTI_Callback+0xa4>
		State = 14;
 80050f0:	4b09      	ldr	r3, [pc, #36]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xc4>)
 80050f2:	220e      	movs	r2, #14
 80050f4:	601a      	str	r2, [r3, #0]
}
 80050f6:	e009      	b.n	800510c <HAL_GPIO_EXTI_Callback+0xb8>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050fe:	d105      	bne.n	800510c <HAL_GPIO_EXTI_Callback+0xb8>
		Home_Pris = 1;
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_GPIO_EXTI_Callback+0xdc>)
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
		State = 15;
 8005106:	4b04      	ldr	r3, [pc, #16]	@ (8005118 <HAL_GPIO_EXTI_Callback+0xc4>)
 8005108:	220f      	movs	r2, #15
 800510a:	601a      	str	r2, [r3, #0]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	200006f0 	.word	0x200006f0
 800511c:	200016f8 	.word	0x200016f8
 8005120:	200016fc 	.word	0x200016fc
 8005124:	20001704 	.word	0x20001704
 8005128:	20001700 	.word	0x20001700
 800512c:	200016f5 	.word	0x200016f5
 8005130:	200016f4 	.word	0x200016f4

08005134 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
//	if (htim == &htim2) {
//		PS2_ReadData();
//	}
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8005152:	4a36      	ldr	r2, [pc, #216]	@ (800522c <Prismatic_position_control+0xe4>)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8005158:	4b34      	ldr	r3, [pc, #208]	@ (800522c <Prismatic_position_control+0xe4>)
 800515a:	edd3 7a00 	vldr	s15, [r3]
 800515e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005166:	d50a      	bpl.n	800517e <Prismatic_position_control+0x36>
 8005168:	4b30      	ldr	r3, [pc, #192]	@ (800522c <Prismatic_position_control+0xe4>)
 800516a:	edd3 7a01 	vldr	s15, [r3, #4]
 800516e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005176:	dd02      	ble.n	800517e <Prismatic_position_control+0x36>
		anti_windup = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	e014      	b.n	80051a8 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 800517e:	4b2b      	ldr	r3, [pc, #172]	@ (800522c <Prismatic_position_control+0xe4>)
 8005180:	edd3 7a00 	vldr	s15, [r3]
 8005184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518c:	dd0a      	ble.n	80051a4 <Prismatic_position_control+0x5c>
 800518e:	4b27      	ldr	r3, [pc, #156]	@ (800522c <Prismatic_position_control+0xe4>)
 8005190:	edd3 7a01 	vldr	s15, [r3, #4]
 8005194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519c:	d502      	bpl.n	80051a4 <Prismatic_position_control+0x5c>
		anti_windup = 0;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
 80051a2:	e001      	b.n	80051a8 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 80051a4:	2301      	movs	r3, #1
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <Prismatic_position_control+0xe8>)
 80051aa:	613b      	str	r3, [r7, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	ed93 7a00 	vldr	s14, [r3]
 80051b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80051ba:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80051ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80051ce:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	edd3 7a04 	vldr	s15, [r3, #16]
 80051de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80051ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f0:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	68da      	ldr	r2, [r3, #12]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8005208:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 800520a:	4a0a      	ldr	r2, [pc, #40]	@ (8005234 <Prismatic_position_control+0xec>)
 800520c:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 800520e:	4b07      	ldr	r3, [pc, #28]	@ (800522c <Prismatic_position_control+0xe4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a06      	ldr	r2, [pc, #24]	@ (800522c <Prismatic_position_control+0xe4>)
 8005214:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8005216:	4b07      	ldr	r3, [pc, #28]	@ (8005234 <Prismatic_position_control+0xec>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	ee07 3a90 	vmov	s15, r3
}
 800521e:	eeb0 0a67 	vmov.f32	s0, s15
 8005222:	371c      	adds	r7, #28
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000dbc 	.word	0x20000dbc
 8005230:	20000d88 	.word	0x20000d88
 8005234:	20000db4 	.word	0x20000db4

08005238 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] = delta_velo;
 8005242:	4a4e      	ldr	r2, [pc, #312]	@ (800537c <Prismatic_velocity_control+0x144>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8005248:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <Prismatic_velocity_control+0x144>)
 800524a:	edd3 7a00 	vldr	s15, [r3]
 800524e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005256:	d50a      	bpl.n	800526e <Prismatic_velocity_control+0x36>
 8005258:	4b48      	ldr	r3, [pc, #288]	@ (800537c <Prismatic_velocity_control+0x144>)
 800525a:	edd3 7a01 	vldr	s15, [r3, #4]
 800525e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005266:	dd02      	ble.n	800526e <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	e014      	b.n	8005298 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 800526e:	4b43      	ldr	r3, [pc, #268]	@ (800537c <Prismatic_velocity_control+0x144>)
 8005270:	edd3 7a00 	vldr	s15, [r3]
 8005274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527c:	dd0a      	ble.n	8005294 <Prismatic_velocity_control+0x5c>
 800527e:	4b3f      	ldr	r3, [pc, #252]	@ (800537c <Prismatic_velocity_control+0x144>)
 8005280:	edd3 7a01 	vldr	s15, [r3, #4]
 8005284:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528c:	d502      	bpl.n	8005294 <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	e001      	b.n	8005298 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8005294:	2301      	movs	r3, #1
 8005296:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8005298:	4b39      	ldr	r3, [pc, #228]	@ (8005380 <Prismatic_velocity_control+0x148>)
 800529a:	edd3 7a00 	vldr	s15, [r3]
 800529e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 80052a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052aa:	db07      	blt.n	80052bc <Prismatic_velocity_control+0x84>
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 80052b2:	4b34      	ldr	r3, [pc, #208]	@ (8005384 <Prismatic_velocity_control+0x14c>)
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	61da      	str	r2, [r3, #28]
 80052ba:	e002      	b.n	80052c2 <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 80052bc:	4b31      	ldr	r3, [pc, #196]	@ (8005384 <Prismatic_velocity_control+0x14c>)
 80052be:	4a32      	ldr	r2, [pc, #200]	@ (8005388 <Prismatic_velocity_control+0x150>)
 80052c0:	61da      	str	r2, [r3, #28]
 80052c2:	4b30      	ldr	r3, [pc, #192]	@ (8005384 <Prismatic_velocity_control+0x14c>)
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	ed93 7a00 	vldr	s14, [r3]
 80052d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80052d4:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	edd3 6a01 	vldr	s13, [r3, #4]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80052e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80052e8:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80052f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8005306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800530a:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	68da      	ldr	r2, [r3, #12]
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	615a      	str	r2, [r3, #20]
    return (out);
 8005322:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8005324:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <Prismatic_velocity_control+0x148>)
 8005326:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8005328:	4b15      	ldr	r3, [pc, #84]	@ (8005380 <Prismatic_velocity_control+0x148>)
 800532a:	edd3 7a00 	vldr	s15, [r3]
 800532e:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8005332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533a:	dd03      	ble.n	8005344 <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 800533c:	4b10      	ldr	r3, [pc, #64]	@ (8005380 <Prismatic_velocity_control+0x148>)
 800533e:	4a13      	ldr	r2, [pc, #76]	@ (800538c <Prismatic_velocity_control+0x154>)
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	e00c      	b.n	800535e <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8005344:	4b0e      	ldr	r3, [pc, #56]	@ (8005380 <Prismatic_velocity_control+0x148>)
 8005346:	edd3 7a00 	vldr	s15, [r3]
 800534a:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 800534e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	d502      	bpl.n	800535e <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8005358:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <Prismatic_velocity_control+0x148>)
 800535a:	4a0d      	ldr	r2, [pc, #52]	@ (8005390 <Prismatic_velocity_control+0x158>)
 800535c:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 800535e:	4b07      	ldr	r3, [pc, #28]	@ (800537c <Prismatic_velocity_control+0x144>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a06      	ldr	r2, [pc, #24]	@ (800537c <Prismatic_velocity_control+0x144>)
 8005364:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8005366:	4b06      	ldr	r3, [pc, #24]	@ (8005380 <Prismatic_velocity_control+0x148>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	ee07 3a90 	vmov	s15, r3
}
 800536e:	eeb0 0a67 	vmov.f32	s0, s15
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	20000dfc 	.word	0x20000dfc
 8005380:	20000df4 	.word	0x20000df4
 8005384:	20000dc8 	.word	0x20000dc8
 8005388:	3a83126f 	.word	0x3a83126f
 800538c:	41c00000 	.word	0x41c00000
 8005390:	c1c00000 	.word	0xc1c00000

08005394 <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 8005394:	b480      	push	{r7}
 8005396:	b087      	sub	sp, #28
 8005398:	af00      	add	r7, sp, #0
 800539a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 800539e:	4a36      	ldr	r2, [pc, #216]	@ (8005478 <Revolute_position_control+0xe4>)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 80053a4:	4b34      	ldr	r3, [pc, #208]	@ (8005478 <Revolute_position_control+0xe4>)
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b2:	d50a      	bpl.n	80053ca <Revolute_position_control+0x36>
 80053b4:	4b30      	ldr	r3, [pc, #192]	@ (8005478 <Revolute_position_control+0xe4>)
 80053b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c2:	dd02      	ble.n	80053ca <Revolute_position_control+0x36>
		anti_windup = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e014      	b.n	80053f4 <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 80053ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <Revolute_position_control+0xe4>)
 80053cc:	edd3 7a00 	vldr	s15, [r3]
 80053d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d8:	dd0a      	ble.n	80053f0 <Revolute_position_control+0x5c>
 80053da:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <Revolute_position_control+0xe4>)
 80053dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80053e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e8:	d502      	bpl.n	80053f0 <Revolute_position_control+0x5c>
		anti_windup = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e001      	b.n	80053f4 <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	4b21      	ldr	r3, [pc, #132]	@ (800547c <Revolute_position_control+0xe8>)
 80053f6:	613b      	str	r3, [r7, #16]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	ed93 7a00 	vldr	s14, [r3]
 8005402:	edd7 7a03 	vldr	s15, [r7, #12]
 8005406:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	edd3 7a03 	vldr	s15, [r3, #12]
 8005416:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800541a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	edd3 6a02 	vldr	s13, [r3, #8]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	edd3 7a04 	vldr	s15, [r3, #16]
 800542a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800542e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8005438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800543c:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	68ba      	ldr	r2, [r7, #8]
 8005452:	615a      	str	r2, [r3, #20]
    return (out);
 8005454:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 8005456:	4a0a      	ldr	r2, [pc, #40]	@ (8005480 <Revolute_position_control+0xec>)
 8005458:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 800545a:	4b07      	ldr	r3, [pc, #28]	@ (8005478 <Revolute_position_control+0xe4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a06      	ldr	r2, [pc, #24]	@ (8005478 <Revolute_position_control+0xe4>)
 8005460:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 8005462:	4b07      	ldr	r3, [pc, #28]	@ (8005480 <Revolute_position_control+0xec>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	ee07 3a90 	vmov	s15, r3
}
 800546a:	eeb0 0a67 	vmov.f32	s0, s15
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	20000e38 	.word	0x20000e38
 800547c:	20000e08 	.word	0x20000e08
 8005480:	20000e34 	.word	0x20000e34

08005484 <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] = delta_velo;
 800548e:	4a47      	ldr	r2, [pc, #284]	@ (80055ac <Revolute_velocity_control+0x128>)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 8005494:	4b45      	ldr	r3, [pc, #276]	@ (80055ac <Revolute_velocity_control+0x128>)
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800549e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054a2:	d50a      	bpl.n	80054ba <Revolute_velocity_control+0x36>
 80054a4:	4b41      	ldr	r3, [pc, #260]	@ (80055ac <Revolute_velocity_control+0x128>)
 80054a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80054aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	dd02      	ble.n	80054ba <Revolute_velocity_control+0x36>
		anti_windup = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	e014      	b.n	80054e4 <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 80054ba:	4b3c      	ldr	r3, [pc, #240]	@ (80055ac <Revolute_velocity_control+0x128>)
 80054bc:	edd3 7a00 	vldr	s15, [r3]
 80054c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c8:	dd0a      	ble.n	80054e0 <Revolute_velocity_control+0x5c>
 80054ca:	4b38      	ldr	r3, [pc, #224]	@ (80055ac <Revolute_velocity_control+0x128>)
 80054cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80054d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d8:	d502      	bpl.n	80054e0 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	e001      	b.n	80054e4 <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 80054e0:	2301      	movs	r3, #1
 80054e2:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 80054e4:	4b32      	ldr	r3, [pc, #200]	@ (80055b0 <Revolute_velocity_control+0x12c>)
 80054e6:	edd3 7a00 	vldr	s15, [r3]
 80054ea:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80054ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f6:	db07      	blt.n	8005508 <Revolute_velocity_control+0x84>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 80054fe:	4b2d      	ldr	r3, [pc, #180]	@ (80055b4 <Revolute_velocity_control+0x130>)
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	61da      	str	r2, [r3, #28]
 8005506:	e002      	b.n	800550e <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 8005508:	4b2a      	ldr	r3, [pc, #168]	@ (80055b4 <Revolute_velocity_control+0x130>)
 800550a:	4a2b      	ldr	r2, [pc, #172]	@ (80055b8 <Revolute_velocity_control+0x134>)
 800550c:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 800550e:	4b28      	ldr	r3, [pc, #160]	@ (80055b0 <Revolute_velocity_control+0x12c>)
 8005510:	edd3 7a00 	vldr	s15, [r3]
 8005514:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8005518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005520:	dd02      	ble.n	8005528 <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 8005522:	4b23      	ldr	r3, [pc, #140]	@ (80055b0 <Revolute_velocity_control+0x12c>)
 8005524:	4a25      	ldr	r2, [pc, #148]	@ (80055bc <Revolute_velocity_control+0x138>)
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	4b22      	ldr	r3, [pc, #136]	@ (80055b4 <Revolute_velocity_control+0x130>)
 800552a:	613b      	str	r3, [r7, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	ed93 7a00 	vldr	s14, [r3]
 8005536:	edd7 7a03 	vldr	s15, [r7, #12]
 800553a:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	edd3 6a01 	vldr	s13, [r3, #4]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	edd3 7a03 	vldr	s15, [r3, #12]
 800554a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800554e:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	edd3 6a02 	vldr	s13, [r3, #8]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	edd3 7a04 	vldr	s15, [r3, #16]
 800555e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005562:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 800556c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005570:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	615a      	str	r2, [r3, #20]
    return (out);
 8005588:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 800558a:	4a09      	ldr	r2, [pc, #36]	@ (80055b0 <Revolute_velocity_control+0x12c>)
 800558c:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 800558e:	4b07      	ldr	r3, [pc, #28]	@ (80055ac <Revolute_velocity_control+0x128>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a06      	ldr	r2, [pc, #24]	@ (80055ac <Revolute_velocity_control+0x128>)
 8005594:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 8005596:	4b06      	ldr	r3, [pc, #24]	@ (80055b0 <Revolute_velocity_control+0x12c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	ee07 3a90 	vmov	s15, r3
}
 800559e:	eeb0 0a67 	vmov.f32	s0, s15
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	20000e78 	.word	0x20000e78
 80055b0:	20000e70 	.word	0x20000e70
 80055b4:	20000e44 	.word	0x20000e44
 80055b8:	3a83126f 	.word	0x3a83126f
 80055bc:	41900000 	.word	0x41900000

080055c0 <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 80055ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80055ce:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80055f8 <voltage_to_pwm+0x38>
 80055d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055d6:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80055da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055de:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	ee07 3a90 	vmov	s15, r3
}
 80055e8:	eeb0 0a67 	vmov.f32	s0, s15
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	477fff00 	.word	0x477fff00
 80055fc:	00000000 	.word	0x00000000

08005600 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 8005600:	b5b0      	push	{r4, r5, r7, lr}
 8005602:	af00      	add	r7, sp, #0
//					* 0.4);
//	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0));
//	encoder = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 8005604:	4b1a      	ldr	r3, [pc, #104]	@ (8005670 <Revolute_dis+0x70>)
 8005606:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800560a:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <Revolute_dis+0x70>)
 800560c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005610:	f7fb f8e8 	bl	80007e4 <__aeabi_ddiv>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4614      	mov	r4, r2
 800561a:	461d      	mov	r5, r3
 800561c:	4b15      	ldr	r3, [pc, #84]	@ (8005674 <Revolute_dis+0x74>)
 800561e:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 8005622:	4618      	mov	r0, r3
 8005624:	f7fa ff5c 	bl	80004e0 <__aeabi_f2d>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
			* 1.0 / 3.3;
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	f7fa ffae 	bl	8000590 <__aeabi_dmul>
 8005634:	4602      	mov	r2, r0
 8005636:	460b      	mov	r3, r1
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	a30a      	add	r3, pc, #40	@ (adr r3, 8005668 <Revolute_dis+0x68>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fb f8cf 	bl	80007e4 <__aeabi_ddiv>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4610      	mov	r0, r2
 800564c:	4619      	mov	r1, r3
 800564e:	f7fb fa6f 	bl	8000b30 <__aeabi_d2f>
 8005652:	4603      	mov	r3, r0
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 8005654:	4a08      	ldr	r2, [pc, #32]	@ (8005678 <Revolute_dis+0x78>)
 8005656:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 8005658:	4b07      	ldr	r3, [pc, #28]	@ (8005678 <Revolute_dis+0x78>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	ee07 3a90 	vmov	s15, r3
}
 8005660:	eeb0 0a67 	vmov.f32	s0, s15
 8005664:	bdb0      	pop	{r4, r5, r7, pc}
 8005666:	bf00      	nop
 8005668:	66666666 	.word	0x66666666
 800566c:	400a6666 	.word	0x400a6666
 8005670:	20001510 	.word	0x20001510
 8005674:	200011b0 	.word	0x200011b0
 8005678:	20000d74 	.word	0x20000d74

0800567c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800567c:	b480      	push	{r7}
 800567e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005680:	b672      	cpsid	i
}
 8005682:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005684:	bf00      	nop
 8005686:	e7fd      	b.n	8005684 <Error_Handler+0x8>

08005688 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800568c:	4b1b      	ldr	r3, [pc, #108]	@ (80056fc <MX_SPI1_Init+0x74>)
 800568e:	4a1c      	ldr	r2, [pc, #112]	@ (8005700 <MX_SPI1_Init+0x78>)
 8005690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005692:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <MX_SPI1_Init+0x74>)
 8005694:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800569a:	4b18      	ldr	r3, [pc, #96]	@ (80056fc <MX_SPI1_Init+0x74>)
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80056a0:	4b16      	ldr	r3, [pc, #88]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80056a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80056a8:	4b14      	ldr	r3, [pc, #80]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056aa:	2202      	movs	r2, #2
 80056ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80056ae:	4b13      	ldr	r3, [pc, #76]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80056b4:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80056bc:	4b0f      	ldr	r3, [pc, #60]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056be:	2238      	movs	r2, #56	@ 0x38
 80056c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80056c2:	4b0e      	ldr	r3, [pc, #56]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056c4:	2280      	movs	r2, #128	@ 0x80
 80056c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056c8:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ce:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80056d4:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056d6:	2207      	movs	r2, #7
 80056d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056da:	4b08      	ldr	r3, [pc, #32]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056dc:	2200      	movs	r2, #0
 80056de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80056e0:	4b06      	ldr	r3, [pc, #24]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056e6:	4805      	ldr	r0, [pc, #20]	@ (80056fc <MX_SPI1_Init+0x74>)
 80056e8:	f004 f844 	bl	8009774 <HAL_SPI_Init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80056f2:	f7ff ffc3 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	2000170c 	.word	0x2000170c
 8005700:	40013000 	.word	0x40013000

08005704 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08a      	sub	sp, #40	@ 0x28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800570c:	f107 0314 	add.w	r3, r7, #20
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	605a      	str	r2, [r3, #4]
 8005716:	609a      	str	r2, [r3, #8]
 8005718:	60da      	str	r2, [r3, #12]
 800571a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a25      	ldr	r2, [pc, #148]	@ (80057b8 <HAL_SPI_MspInit+0xb4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d144      	bne.n	80057b0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005726:	4b25      	ldr	r3, [pc, #148]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 8005728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800572a:	4a24      	ldr	r2, [pc, #144]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 800572c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005730:	6613      	str	r3, [r2, #96]	@ 0x60
 8005732:	4b22      	ldr	r3, [pc, #136]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 8005734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005736:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800573e:	4b1f      	ldr	r3, [pc, #124]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 8005740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005742:	4a1e      	ldr	r2, [pc, #120]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800574a:	4b1c      	ldr	r3, [pc, #112]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 800574c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005756:	4b19      	ldr	r3, [pc, #100]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 8005758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800575a:	4a18      	ldr	r2, [pc, #96]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005762:	4b16      	ldr	r3, [pc, #88]	@ (80057bc <HAL_SPI_MspInit+0xb8>)
 8005764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800576e:	2320      	movs	r3, #32
 8005770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005772:	2302      	movs	r3, #2
 8005774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577a:	2300      	movs	r3, #0
 800577c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800577e:	2305      	movs	r3, #5
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005782:	f107 0314 	add.w	r3, r7, #20
 8005786:	4619      	mov	r1, r3
 8005788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800578c:	f002 fe10 	bl	80083b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005790:	2330      	movs	r3, #48	@ 0x30
 8005792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005794:	2302      	movs	r3, #2
 8005796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005798:	2300      	movs	r3, #0
 800579a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800579c:	2300      	movs	r3, #0
 800579e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80057a0:	2305      	movs	r3, #5
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057a4:	f107 0314 	add.w	r3, r7, #20
 80057a8:	4619      	mov	r1, r3
 80057aa:	4805      	ldr	r0, [pc, #20]	@ (80057c0 <HAL_SPI_MspInit+0xbc>)
 80057ac:	f002 fe00 	bl	80083b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80057b0:	bf00      	nop
 80057b2:	3728      	adds	r7, #40	@ 0x28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40013000 	.word	0x40013000
 80057bc:	40021000 	.word	0x40021000
 80057c0:	48000400 	.word	0x48000400

080057c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005808 <HAL_MspInit+0x44>)
 80057cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057ce:	4a0e      	ldr	r2, [pc, #56]	@ (8005808 <HAL_MspInit+0x44>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80057d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <HAL_MspInit+0x44>)
 80057d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <HAL_MspInit+0x44>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	4a08      	ldr	r2, [pc, #32]	@ (8005808 <HAL_MspInit+0x44>)
 80057e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ee:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_MspInit+0x44>)
 80057f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80057fa:	f003 f82f 	bl	800885c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057fe:	bf00      	nop
 8005800:	3708      	adds	r7, #8
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000

0800580c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <NMI_Handler+0x4>

08005814 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <HardFault_Handler+0x4>

0800581c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <MemManage_Handler+0x4>

08005824 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005828:	bf00      	nop
 800582a:	e7fd      	b.n	8005828 <BusFault_Handler+0x4>

0800582c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <UsageFault_Handler+0x4>

08005834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005838:	bf00      	nop
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005842:	b480      	push	{r7}
 8005844:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005862:	f000 fe7b 	bl	800655c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
	...

0800586c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005870:	4802      	ldr	r0, [pc, #8]	@ (800587c <DMA1_Channel1_IRQHandler+0x10>)
 8005872:	f002 fc42 	bl	80080fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005876:	bf00      	nop
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20001dd0 	.word	0x20001dd0

08005880 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8005884:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005888:	f002 ff2c 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800588c:	bf00      	nop
 800588e:	bd80      	pop	{r7, pc}

08005890 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005894:	4802      	ldr	r0, [pc, #8]	@ (80058a0 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005896:	f005 f90d 	bl	800aab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20001770 	.word	0x20001770

080058a4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80058a8:	4803      	ldr	r0, [pc, #12]	@ (80058b8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80058aa:	f005 f903 	bl	800aab4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80058ae:	4803      	ldr	r0, [pc, #12]	@ (80058bc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80058b0:	f005 f900 	bl	800aab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80058b4:	bf00      	nop
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	20001770 	.word	0x20001770
 80058bc:	20001b6c 	.word	0x20001b6c

080058c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80058c4:	4802      	ldr	r0, [pc, #8]	@ (80058d0 <TIM2_IRQHandler+0x10>)
 80058c6:	f005 f8f5 	bl	800aab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80058ca:	bf00      	nop
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	2000183c 	.word	0x2000183c

080058d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80058d8:	4802      	ldr	r0, [pc, #8]	@ (80058e4 <USART2_IRQHandler+0x10>)
 80058da:	f006 ffef 	bl	800c8bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80058de:	bf00      	nop
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20001d04 	.word	0x20001d04

080058e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80058ec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80058f0:	f002 fef8 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80058f4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80058f8:	f002 fef4 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80058fc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005900:	f002 fef0 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 8005904:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005908:	f002 feec 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 800590c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005910:	f002 fee8 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8005914:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005918:	f002 fee4 	bl	80086e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800591c:	bf00      	nop
 800591e:	bd80      	pop	{r7, pc}

08005920 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <SystemInit+0x20>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800592a:	4a05      	ldr	r2, [pc, #20]	@ (8005940 <SystemInit+0x20>)
 800592c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000ed00 	.word	0xe000ed00

08005944 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800594a:	f107 0310 	add.w	r3, r7, #16
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	605a      	str	r2, [r3, #4]
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005962:	4b20      	ldr	r3, [pc, #128]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 8005964:	4a20      	ldr	r2, [pc, #128]	@ (80059e8 <MX_TIM1_Init+0xa4>)
 8005966:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005968:	4b1e      	ldr	r3, [pc, #120]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800596e:	4b1d      	ldr	r3, [pc, #116]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8005974:	4b1b      	ldr	r3, [pc, #108]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 8005976:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800597a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800597c:	4b19      	ldr	r3, [pc, #100]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005982:	4b18      	ldr	r3, [pc, #96]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 8005984:	2200      	movs	r2, #0
 8005986:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005988:	4b16      	ldr	r3, [pc, #88]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 800598a:	2200      	movs	r2, #0
 800598c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800598e:	4815      	ldr	r0, [pc, #84]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 8005990:	f004 fb1e 	bl	8009fd0 <HAL_TIM_Base_Init>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800599a:	f7ff fe6f 	bl	800567c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800599e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80059a4:	f107 0310 	add.w	r3, r7, #16
 80059a8:	4619      	mov	r1, r3
 80059aa:	480e      	ldr	r0, [pc, #56]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 80059ac:	f005 fb8a 	bl	800b0c4 <HAL_TIM_ConfigClockSource>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80059b6:	f7ff fe61 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80059c6:	1d3b      	adds	r3, r7, #4
 80059c8:	4619      	mov	r1, r3
 80059ca:	4806      	ldr	r0, [pc, #24]	@ (80059e4 <MX_TIM1_Init+0xa0>)
 80059cc:	f006 fb60 	bl	800c090 <HAL_TIMEx_MasterConfigSynchronization>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80059d6:	f7ff fe51 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80059da:	bf00      	nop
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20001770 	.word	0x20001770
 80059e8:	40012c00 	.word	0x40012c00

080059ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059f2:	f107 0310 	add.w	r3, r7, #16
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	609a      	str	r2, [r3, #8]
 80059fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a00:	1d3b      	adds	r3, r7, #4
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	605a      	str	r2, [r3, #4]
 8005a08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005a10:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8005a12:	4b1c      	ldr	r3, [pc, #112]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a14:	22a9      	movs	r2, #169	@ 0xa9
 8005a16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a18:	4b1a      	ldr	r3, [pc, #104]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8005a1e:	4b19      	ldr	r3, [pc, #100]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a26:	4b17      	ldr	r3, [pc, #92]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a2c:	4b15      	ldr	r3, [pc, #84]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005a32:	4814      	ldr	r0, [pc, #80]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a34:	f004 facc 	bl	8009fd0 <HAL_TIM_Base_Init>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005a3e:	f7ff fe1d 	bl	800567c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005a48:	f107 0310 	add.w	r3, r7, #16
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	480d      	ldr	r0, [pc, #52]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a50:	f005 fb38 	bl	800b0c4 <HAL_TIM_ConfigClockSource>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005a5a:	f7ff fe0f 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005a66:	1d3b      	adds	r3, r7, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4806      	ldr	r0, [pc, #24]	@ (8005a84 <MX_TIM2_Init+0x98>)
 8005a6c:	f006 fb10 	bl	800c090 <HAL_TIMEx_MasterConfigSynchronization>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005a76:	f7ff fe01 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005a7a:	bf00      	nop
 8005a7c:	3720      	adds	r7, #32
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	2000183c 	.word	0x2000183c

08005a88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08c      	sub	sp, #48	@ 0x30
 8005a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005a8e:	f107 030c 	add.w	r3, r7, #12
 8005a92:	2224      	movs	r2, #36	@ 0x24
 8005a94:	2100      	movs	r1, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f009 fdc0 	bl	800f61c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a9c:	463b      	mov	r3, r7
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005aa6:	4b21      	ldr	r3, [pc, #132]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005aa8:	4a21      	ldr	r2, [pc, #132]	@ (8005b30 <MX_TIM3_Init+0xa8>)
 8005aaa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005aac:	4b1f      	ldr	r3, [pc, #124]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8005ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005aba:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005abe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ac6:	4b19      	ldr	r3, [pc, #100]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005acc:	2303      	movs	r3, #3
 8005ace:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005af0:	f107 030c 	add.w	r3, r7, #12
 8005af4:	4619      	mov	r1, r3
 8005af6:	480d      	ldr	r0, [pc, #52]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005af8:	f004 fe9a 	bl	800a830 <HAL_TIM_Encoder_Init>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8005b02:	f7ff fdbb 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b06:	2300      	movs	r3, #0
 8005b08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005b0e:	463b      	mov	r3, r7
 8005b10:	4619      	mov	r1, r3
 8005b12:	4806      	ldr	r0, [pc, #24]	@ (8005b2c <MX_TIM3_Init+0xa4>)
 8005b14:	f006 fabc 	bl	800c090 <HAL_TIMEx_MasterConfigSynchronization>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005b1e:	f7ff fdad 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005b22:	bf00      	nop
 8005b24:	3730      	adds	r7, #48	@ 0x30
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20001908 	.word	0x20001908
 8005b30:	40000400 	.word	0x40000400

08005b34 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b08c      	sub	sp, #48	@ 0x30
 8005b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005b3a:	f107 030c 	add.w	r3, r7, #12
 8005b3e:	2224      	movs	r2, #36	@ 0x24
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f009 fd6a 	bl	800f61c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b48:	463b      	mov	r3, r7
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	605a      	str	r2, [r3, #4]
 8005b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005b52:	4b21      	ldr	r3, [pc, #132]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005b54:	4a21      	ldr	r2, [pc, #132]	@ (8005bdc <MX_TIM4_Init+0xa8>)
 8005b56:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005b58:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8005b64:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005b66:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8005b6a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b72:	4b19      	ldr	r3, [pc, #100]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005b80:	2301      	movs	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005b90:	2301      	movs	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005b94:	2300      	movs	r3, #0
 8005b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005b9c:	f107 030c 	add.w	r3, r7, #12
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	480d      	ldr	r0, [pc, #52]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005ba4:	f004 fe44 	bl	800a830 <HAL_TIM_Encoder_Init>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005bae:	f7ff fd65 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005bba:	463b      	mov	r3, r7
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	4806      	ldr	r0, [pc, #24]	@ (8005bd8 <MX_TIM4_Init+0xa4>)
 8005bc0:	f006 fa66 	bl	800c090 <HAL_TIMEx_MasterConfigSynchronization>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005bca:	f7ff fd57 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005bce:	bf00      	nop
 8005bd0:	3730      	adds	r7, #48	@ 0x30
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	200019d4 	.word	0x200019d4
 8005bdc:	40000800 	.word	0x40000800

08005be0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b09c      	sub	sp, #112	@ 0x70
 8005be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005be6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	605a      	str	r2, [r3, #4]
 8005bf0:	609a      	str	r2, [r3, #8]
 8005bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bf4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]
 8005c08:	605a      	str	r2, [r3, #4]
 8005c0a:	609a      	str	r2, [r3, #8]
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	611a      	str	r2, [r3, #16]
 8005c10:	615a      	str	r2, [r3, #20]
 8005c12:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005c14:	1d3b      	adds	r3, r7, #4
 8005c16:	2234      	movs	r2, #52	@ 0x34
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f009 fcfe 	bl	800f61c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005c20:	4b45      	ldr	r3, [pc, #276]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c22:	4a46      	ldr	r2, [pc, #280]	@ (8005d3c <MX_TIM8_Init+0x15c>)
 8005c24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 169;
 8005c26:	4b44      	ldr	r3, [pc, #272]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c28:	22a9      	movs	r2, #169	@ 0xa9
 8005c2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c2c:	4b42      	ldr	r3, [pc, #264]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8005c32:	4b41      	ldr	r3, [pc, #260]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c34:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005c38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c40:	4b3d      	ldr	r3, [pc, #244]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c46:	4b3c      	ldr	r3, [pc, #240]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005c4c:	483a      	ldr	r0, [pc, #232]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c4e:	f004 f9bf 	bl	8009fd0 <HAL_TIM_Base_Init>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005c58:	f7ff fd10 	bl	800567c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005c62:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005c66:	4619      	mov	r1, r3
 8005c68:	4833      	ldr	r0, [pc, #204]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c6a:	f005 fa2b 	bl	800b0c4 <HAL_TIM_ConfigClockSource>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005c74:	f7ff fd02 	bl	800567c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005c78:	482f      	ldr	r0, [pc, #188]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c7a:	f004 fb63 	bl	800a344 <HAL_TIM_PWM_Init>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8005c84:	f7ff fcfa 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c90:	2300      	movs	r3, #0
 8005c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005c94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4827      	ldr	r0, [pc, #156]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005c9c:	f006 f9f8 	bl	800c090 <HAL_TIMEx_MasterConfigSynchronization>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8005ca6:	f7ff fce9 	bl	800567c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005caa:	2360      	movs	r3, #96	@ 0x60
 8005cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005cc6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005cca:	220c      	movs	r2, #12
 8005ccc:	4619      	mov	r1, r3
 8005cce:	481a      	ldr	r0, [pc, #104]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005cd0:	f005 f8e4 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8005cda:	f7ff fccf 	bl	800567c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005cf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005cf6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d12:	2300      	movs	r3, #0
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005d16:	1d3b      	adds	r3, r7, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4807      	ldr	r0, [pc, #28]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005d1c:	f006 fa4e 	bl	800c1bc <HAL_TIMEx_ConfigBreakDeadTime>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8005d26:	f7ff fca9 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005d2a:	4803      	ldr	r0, [pc, #12]	@ (8005d38 <MX_TIM8_Init+0x158>)
 8005d2c:	f000 fa44 	bl	80061b8 <HAL_TIM_MspPostInit>

}
 8005d30:	bf00      	nop
 8005d32:	3770      	adds	r7, #112	@ 0x70
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20001aa0 	.word	0x20001aa0
 8005d3c:	40013400 	.word	0x40013400

08005d40 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b094      	sub	sp, #80	@ 0x50
 8005d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	605a      	str	r2, [r3, #4]
 8005d50:	609a      	str	r2, [r3, #8]
 8005d52:	60da      	str	r2, [r3, #12]
 8005d54:	611a      	str	r2, [r3, #16]
 8005d56:	615a      	str	r2, [r3, #20]
 8005d58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	2234      	movs	r2, #52	@ 0x34
 8005d5e:	2100      	movs	r1, #0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f009 fc5b 	bl	800f61c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005d66:	4b34      	ldr	r3, [pc, #208]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d68:	4a34      	ldr	r2, [pc, #208]	@ (8005e3c <MX_TIM16_Init+0xfc>)
 8005d6a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005d6c:	4b32      	ldr	r3, [pc, #200]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d6e:	22a9      	movs	r2, #169	@ 0xa9
 8005d70:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d72:	4b31      	ldr	r3, [pc, #196]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8005d78:	4b2f      	ldr	r3, [pc, #188]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d7a:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8005d7e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d80:	4b2d      	ldr	r3, [pc, #180]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005d86:	4b2c      	ldr	r3, [pc, #176]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005d92:	4829      	ldr	r0, [pc, #164]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005d94:	f004 f91c 	bl	8009fd0 <HAL_TIM_Base_Init>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d001      	beq.n	8005da2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8005d9e:	f7ff fc6d 	bl	800567c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8005da2:	4825      	ldr	r0, [pc, #148]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005da4:	f004 fa60 	bl	800a268 <HAL_TIM_OC_Init>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8005dae:	f7ff fc65 	bl	800567c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005db2:	2108      	movs	r1, #8
 8005db4:	4820      	ldr	r0, [pc, #128]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005db6:	f004 fc45 	bl	800a644 <HAL_TIM_OnePulse_Init>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8005dc0:	f7ff fc5c 	bl	800567c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005dc4:	2310      	movs	r3, #16
 8005dc6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8005dc8:	f240 5399 	movw	r3, #1433	@ 0x599
 8005dcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dde:	2300      	movs	r3, #0
 8005de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005de2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005de6:	2200      	movs	r2, #0
 8005de8:	4619      	mov	r1, r3
 8005dea:	4813      	ldr	r0, [pc, #76]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005dec:	f004 ffdc 	bl	800ada8 <HAL_TIM_OC_ConfigChannel>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8005df6:	f7ff fc41 	bl	800567c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4805      	ldr	r0, [pc, #20]	@ (8005e38 <MX_TIM16_Init+0xf8>)
 8005e22:	f006 f9cb 	bl	800c1bc <HAL_TIMEx_ConfigBreakDeadTime>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8005e2c:	f7ff fc26 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005e30:	bf00      	nop
 8005e32:	3750      	adds	r7, #80	@ 0x50
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	20001b6c 	.word	0x20001b6c
 8005e3c:	40014400 	.word	0x40014400

08005e40 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b09c      	sub	sp, #112	@ 0x70
 8005e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	605a      	str	r2, [r3, #4]
 8005e50:	609a      	str	r2, [r3, #8]
 8005e52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	605a      	str	r2, [r3, #4]
 8005e5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	609a      	str	r2, [r3, #8]
 8005e6c:	60da      	str	r2, [r3, #12]
 8005e6e:	611a      	str	r2, [r3, #16]
 8005e70:	615a      	str	r2, [r3, #20]
 8005e72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e74:	1d3b      	adds	r3, r7, #4
 8005e76:	2234      	movs	r2, #52	@ 0x34
 8005e78:	2100      	movs	r1, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f009 fbce 	bl	800f61c <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005e80:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005e82:	4a4c      	ldr	r2, [pc, #304]	@ (8005fb4 <MX_TIM20_Init+0x174>)
 8005e84:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8005e86:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e8c:	4b48      	ldr	r3, [pc, #288]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8005e92:	4b47      	ldr	r3, [pc, #284]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e98:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e9a:	4b45      	ldr	r3, [pc, #276]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005ea0:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ea6:	4b42      	ldr	r3, [pc, #264]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005eac:	4840      	ldr	r0, [pc, #256]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005eae:	f004 f88f 	bl	8009fd0 <HAL_TIM_Base_Init>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8005eb8:	f7ff fbe0 	bl	800567c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ebc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ec0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8005ec2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4839      	ldr	r0, [pc, #228]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005eca:	f005 f8fb 	bl	800b0c4 <HAL_TIM_ConfigClockSource>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005ed4:	f7ff fbd2 	bl	800567c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8005ed8:	4835      	ldr	r0, [pc, #212]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005eda:	f004 fa33 	bl	800a344 <HAL_TIM_PWM_Init>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8005ee4:	f7ff fbca 	bl	800567c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005eec:	2300      	movs	r3, #0
 8005eee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005ef4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ef8:	4619      	mov	r1, r3
 8005efa:	482d      	ldr	r0, [pc, #180]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005efc:	f006 f8c8 	bl	800c090 <HAL_TIMEx_MasterConfigSynchronization>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8005f06:	f7ff fbb9 	bl	800567c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005f0a:	2360      	movs	r3, #96	@ 0x60
 8005f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005f12:	2300      	movs	r3, #0
 8005f14:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005f16:	2300      	movs	r3, #0
 8005f18:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005f22:	2300      	movs	r3, #0
 8005f24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005f26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	4820      	ldr	r0, [pc, #128]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005f30:	f004 ffb4 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8005f3a:	f7ff fb9f 	bl	800567c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f42:	2208      	movs	r2, #8
 8005f44:	4619      	mov	r1, r3
 8005f46:	481a      	ldr	r0, [pc, #104]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005f48:	f004 ffa8 	bl	800ae9c <HAL_TIM_PWM_ConfigChannel>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8005f52:	f7ff fb93 	bl	800567c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005f74:	2300      	movs	r3, #0
 8005f76:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005f86:	2300      	movs	r3, #0
 8005f88:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8005f8e:	1d3b      	adds	r3, r7, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4807      	ldr	r0, [pc, #28]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005f94:	f006 f912 	bl	800c1bc <HAL_TIMEx_ConfigBreakDeadTime>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8005f9e:	f7ff fb6d 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8005fa2:	4803      	ldr	r0, [pc, #12]	@ (8005fb0 <MX_TIM20_Init+0x170>)
 8005fa4:	f000 f908 	bl	80061b8 <HAL_TIM_MspPostInit>

}
 8005fa8:	bf00      	nop
 8005faa:	3770      	adds	r7, #112	@ 0x70
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20001c38 	.word	0x20001c38
 8005fb4:	40015000 	.word	0x40015000

08005fb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a3d      	ldr	r2, [pc, #244]	@ (80060bc <HAL_TIM_Base_MspInit+0x104>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d11c      	bne.n	8006004 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fca:	4b3d      	ldr	r3, [pc, #244]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8005fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fce:	4a3c      	ldr	r2, [pc, #240]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8005fd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fd4:	6613      	str	r3, [r2, #96]	@ 0x60
 8005fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	2018      	movs	r0, #24
 8005fe8:	f001 fe6f 	bl	8007cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005fec:	2018      	movs	r0, #24
 8005fee:	f001 fe86 	bl	8007cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	2019      	movs	r0, #25
 8005ff8:	f001 fe67 	bl	8007cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005ffc:	2019      	movs	r0, #25
 8005ffe:	f001 fe7e 	bl	8007cfe <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8006002:	e056      	b.n	80060b2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800600c:	d114      	bne.n	8006038 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800600e:	4b2c      	ldr	r3, [pc, #176]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8006010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006012:	4a2b      	ldr	r2, [pc, #172]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	6593      	str	r3, [r2, #88]	@ 0x58
 800601a:	4b29      	ldr	r3, [pc, #164]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 800601c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006026:	2200      	movs	r2, #0
 8006028:	2100      	movs	r1, #0
 800602a:	201c      	movs	r0, #28
 800602c:	f001 fe4d 	bl	8007cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006030:	201c      	movs	r0, #28
 8006032:	f001 fe64 	bl	8007cfe <HAL_NVIC_EnableIRQ>
}
 8006036:	e03c      	b.n	80060b2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a21      	ldr	r2, [pc, #132]	@ (80060c4 <HAL_TIM_Base_MspInit+0x10c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d10c      	bne.n	800605c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006042:	4b1f      	ldr	r3, [pc, #124]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8006044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006046:	4a1e      	ldr	r2, [pc, #120]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8006048:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800604c:	6613      	str	r3, [r2, #96]	@ 0x60
 800604e:	4b1c      	ldr	r3, [pc, #112]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8006050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006052:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	697b      	ldr	r3, [r7, #20]
}
 800605a:	e02a      	b.n	80060b2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_TIM_Base_MspInit+0x110>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d114      	bne.n	8006090 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006066:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8006068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800606a:	4a15      	ldr	r2, [pc, #84]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 800606c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006070:	6613      	str	r3, [r2, #96]	@ 0x60
 8006072:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 8006074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800607e:	2200      	movs	r2, #0
 8006080:	2100      	movs	r1, #0
 8006082:	2019      	movs	r0, #25
 8006084:	f001 fe21 	bl	8007cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006088:	2019      	movs	r0, #25
 800608a:	f001 fe38 	bl	8007cfe <HAL_NVIC_EnableIRQ>
}
 800608e:	e010      	b.n	80060b2 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a0d      	ldr	r2, [pc, #52]	@ (80060cc <HAL_TIM_Base_MspInit+0x114>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10b      	bne.n	80060b2 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800609a:	4b09      	ldr	r3, [pc, #36]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 800609c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609e:	4a08      	ldr	r2, [pc, #32]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 80060a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80060a6:	4b06      	ldr	r3, [pc, #24]	@ (80060c0 <HAL_TIM_Base_MspInit+0x108>)
 80060a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40012c00 	.word	0x40012c00
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014400 	.word	0x40014400
 80060cc:	40015000 	.word	0x40015000

080060d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060d8:	f107 031c 	add.w	r3, r7, #28
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	60da      	str	r2, [r3, #12]
 80060e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a2f      	ldr	r2, [pc, #188]	@ (80061ac <HAL_TIM_Encoder_MspInit+0xdc>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d129      	bne.n	8006146 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80060f2:	4b2f      	ldr	r3, [pc, #188]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f6:	4a2e      	ldr	r2, [pc, #184]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 80060f8:	f043 0302 	orr.w	r3, r3, #2
 80060fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80060fe:	4b2c      	ldr	r3, [pc, #176]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006100:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	61bb      	str	r3, [r7, #24]
 8006108:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800610a:	4b29      	ldr	r3, [pc, #164]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800610c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800610e:	4a28      	ldr	r2, [pc, #160]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006110:	f043 0301 	orr.w	r3, r3, #1
 8006114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006116:	4b26      	ldr	r3, [pc, #152]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8006122:	23c0      	movs	r3, #192	@ 0xc0
 8006124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006126:	2302      	movs	r3, #2
 8006128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800612e:	2300      	movs	r3, #0
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006132:	2302      	movs	r3, #2
 8006134:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006136:	f107 031c 	add.w	r3, r7, #28
 800613a:	4619      	mov	r1, r3
 800613c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006140:	f002 f936 	bl	80083b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006144:	e02e      	b.n	80061a4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a1a      	ldr	r2, [pc, #104]	@ (80061b4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d129      	bne.n	80061a4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006150:	4b17      	ldr	r3, [pc, #92]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006154:	4a16      	ldr	r2, [pc, #88]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006156:	f043 0304 	orr.w	r3, r3, #4
 800615a:	6593      	str	r3, [r2, #88]	@ 0x58
 800615c:	4b14      	ldr	r3, [pc, #80]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006168:	4b11      	ldr	r3, [pc, #68]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800616a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616c:	4a10      	ldr	r2, [pc, #64]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800616e:	f043 0301 	orr.w	r3, r3, #1
 8006172:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006174:	4b0e      	ldr	r3, [pc, #56]	@ (80061b0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8006176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8006180:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006184:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006186:	2302      	movs	r3, #2
 8006188:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618a:	2300      	movs	r3, #0
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618e:	2300      	movs	r3, #0
 8006190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8006192:	230a      	movs	r3, #10
 8006194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006196:	f107 031c 	add.w	r3, r7, #28
 800619a:	4619      	mov	r1, r3
 800619c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061a0:	f002 f906 	bl	80083b0 <HAL_GPIO_Init>
}
 80061a4:	bf00      	nop
 80061a6:	3730      	adds	r7, #48	@ 0x30
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40021000 	.word	0x40021000
 80061b4:	40000800 	.word	0x40000800

080061b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08a      	sub	sp, #40	@ 0x28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	60da      	str	r2, [r3, #12]
 80061ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a31      	ldr	r2, [pc, #196]	@ (800629c <HAL_TIM_MspPostInit+0xe4>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d11d      	bne.n	8006216 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061da:	4b31      	ldr	r3, [pc, #196]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 80061dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061de:	4a30      	ldr	r2, [pc, #192]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 80061e0:	f043 0304 	orr.w	r3, r3, #4
 80061e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061e6:	4b2e      	ldr	r3, [pc, #184]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 80061e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 80061f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f8:	2302      	movs	r3, #2
 80061fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fc:	2300      	movs	r3, #0
 80061fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006200:	2300      	movs	r3, #0
 8006202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8006204:	2304      	movs	r3, #4
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4619      	mov	r1, r3
 800620e:	4825      	ldr	r0, [pc, #148]	@ (80062a4 <HAL_TIM_MspPostInit+0xec>)
 8006210:	f002 f8ce 	bl	80083b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8006214:	e03d      	b.n	8006292 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a23      	ldr	r2, [pc, #140]	@ (80062a8 <HAL_TIM_MspPostInit+0xf0>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d138      	bne.n	8006292 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006220:	4b1f      	ldr	r3, [pc, #124]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 8006222:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006224:	4a1e      	ldr	r2, [pc, #120]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 8006226:	f043 0302 	orr.w	r3, r3, #2
 800622a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800622c:	4b1c      	ldr	r3, [pc, #112]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 800622e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006238:	4b19      	ldr	r3, [pc, #100]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 800623a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623c:	4a18      	ldr	r2, [pc, #96]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 800623e:	f043 0304 	orr.w	r3, r3, #4
 8006242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006244:	4b16      	ldr	r3, [pc, #88]	@ (80062a0 <HAL_TIM_MspPostInit+0xe8>)
 8006246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8006250:	2304      	movs	r3, #4
 8006252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006254:	2302      	movs	r3, #2
 8006256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625c:	2300      	movs	r3, #0
 800625e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8006260:	2303      	movs	r3, #3
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	4619      	mov	r1, r3
 800626a:	4810      	ldr	r0, [pc, #64]	@ (80062ac <HAL_TIM_MspPostInit+0xf4>)
 800626c:	f002 f8a0 	bl	80083b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8006270:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006276:	2302      	movs	r3, #2
 8006278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800627e:	2300      	movs	r3, #0
 8006280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8006282:	2306      	movs	r3, #6
 8006284:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8006286:	f107 0314 	add.w	r3, r7, #20
 800628a:	4619      	mov	r1, r3
 800628c:	4805      	ldr	r0, [pc, #20]	@ (80062a4 <HAL_TIM_MspPostInit+0xec>)
 800628e:	f002 f88f 	bl	80083b0 <HAL_GPIO_Init>
}
 8006292:	bf00      	nop
 8006294:	3728      	adds	r7, #40	@ 0x28
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40013400 	.word	0x40013400
 80062a0:	40021000 	.word	0x40021000
 80062a4:	48000800 	.word	0x48000800
 80062a8:	40015000 	.word	0x40015000
 80062ac:	48000400 	.word	0x48000400

080062b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80062b4:	4b23      	ldr	r3, [pc, #140]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062b6:	4a24      	ldr	r2, [pc, #144]	@ (8006348 <MX_USART2_UART_Init+0x98>)
 80062b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80062ba:	4b22      	ldr	r3, [pc, #136]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80062c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80062c2:	4b20      	ldr	r3, [pc, #128]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80062c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80062ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80062d0:	4b1c      	ldr	r3, [pc, #112]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80062d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80062d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062da:	220c      	movs	r2, #12
 80062dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062de:	4b19      	ldr	r3, [pc, #100]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80062e4:	4b17      	ldr	r3, [pc, #92]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062ea:	4b16      	ldr	r3, [pc, #88]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062f0:	4b14      	ldr	r3, [pc, #80]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062f6:	4b13      	ldr	r3, [pc, #76]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80062fc:	4811      	ldr	r0, [pc, #68]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 80062fe:	f006 f841 	bl	800c384 <HAL_UART_Init>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8006308:	f7ff f9b8 	bl	800567c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800630c:	2100      	movs	r1, #0
 800630e:	480d      	ldr	r0, [pc, #52]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 8006310:	f008 fbc3 	bl	800ea9a <HAL_UARTEx_SetTxFifoThreshold>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800631a:	f7ff f9af 	bl	800567c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800631e:	2100      	movs	r1, #0
 8006320:	4808      	ldr	r0, [pc, #32]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 8006322:	f008 fbf8 	bl	800eb16 <HAL_UARTEx_SetRxFifoThreshold>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800632c:	f7ff f9a6 	bl	800567c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006330:	4804      	ldr	r0, [pc, #16]	@ (8006344 <MX_USART2_UART_Init+0x94>)
 8006332:	f008 fb79 	bl	800ea28 <HAL_UARTEx_DisableFifoMode>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800633c:	f7ff f99e 	bl	800567c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006340:	bf00      	nop
 8006342:	bd80      	pop	{r7, pc}
 8006344:	20001d04 	.word	0x20001d04
 8006348:	40004400 	.word	0x40004400

0800634c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b09e      	sub	sp, #120	@ 0x78
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006354:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006358:	2200      	movs	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	605a      	str	r2, [r3, #4]
 800635e:	609a      	str	r2, [r3, #8]
 8006360:	60da      	str	r2, [r3, #12]
 8006362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006364:	f107 0310 	add.w	r3, r7, #16
 8006368:	2254      	movs	r2, #84	@ 0x54
 800636a:	2100      	movs	r1, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f009 f955 	bl	800f61c <memset>
  if(uartHandle->Instance==USART2)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a37      	ldr	r2, [pc, #220]	@ (8006454 <HAL_UART_MspInit+0x108>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d167      	bne.n	800644c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800637c:	2302      	movs	r3, #2
 800637e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006380:	2300      	movs	r3, #0
 8006382:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006384:	f107 0310 	add.w	r3, r7, #16
 8006388:	4618      	mov	r0, r3
 800638a:	f002 ffa5 	bl	80092d8 <HAL_RCCEx_PeriphCLKConfig>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006394:	f7ff f972 	bl	800567c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006398:	4b2f      	ldr	r3, [pc, #188]	@ (8006458 <HAL_UART_MspInit+0x10c>)
 800639a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800639c:	4a2e      	ldr	r2, [pc, #184]	@ (8006458 <HAL_UART_MspInit+0x10c>)
 800639e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80063a4:	4b2c      	ldr	r3, [pc, #176]	@ (8006458 <HAL_UART_MspInit+0x10c>)
 80063a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063b0:	4b29      	ldr	r3, [pc, #164]	@ (8006458 <HAL_UART_MspInit+0x10c>)
 80063b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063b4:	4a28      	ldr	r2, [pc, #160]	@ (8006458 <HAL_UART_MspInit+0x10c>)
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80063bc:	4b26      	ldr	r3, [pc, #152]	@ (8006458 <HAL_UART_MspInit+0x10c>)
 80063be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80063c8:	230c      	movs	r3, #12
 80063ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063cc:	2302      	movs	r3, #2
 80063ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063d0:	2300      	movs	r3, #0
 80063d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063d4:	2300      	movs	r3, #0
 80063d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80063d8:	2307      	movs	r3, #7
 80063da:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80063e0:	4619      	mov	r1, r3
 80063e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80063e6:	f001 ffe3 	bl	80083b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80063ea:	4b1c      	ldr	r3, [pc, #112]	@ (800645c <HAL_UART_MspInit+0x110>)
 80063ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006460 <HAL_UART_MspInit+0x114>)
 80063ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80063f0:	4b1a      	ldr	r3, [pc, #104]	@ (800645c <HAL_UART_MspInit+0x110>)
 80063f2:	221b      	movs	r2, #27
 80063f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063f6:	4b19      	ldr	r3, [pc, #100]	@ (800645c <HAL_UART_MspInit+0x110>)
 80063f8:	2210      	movs	r2, #16
 80063fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063fc:	4b17      	ldr	r3, [pc, #92]	@ (800645c <HAL_UART_MspInit+0x110>)
 80063fe:	2200      	movs	r2, #0
 8006400:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006402:	4b16      	ldr	r3, [pc, #88]	@ (800645c <HAL_UART_MspInit+0x110>)
 8006404:	2280      	movs	r2, #128	@ 0x80
 8006406:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006408:	4b14      	ldr	r3, [pc, #80]	@ (800645c <HAL_UART_MspInit+0x110>)
 800640a:	2200      	movs	r2, #0
 800640c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800640e:	4b13      	ldr	r3, [pc, #76]	@ (800645c <HAL_UART_MspInit+0x110>)
 8006410:	2200      	movs	r2, #0
 8006412:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006414:	4b11      	ldr	r3, [pc, #68]	@ (800645c <HAL_UART_MspInit+0x110>)
 8006416:	2200      	movs	r2, #0
 8006418:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800641a:	4b10      	ldr	r3, [pc, #64]	@ (800645c <HAL_UART_MspInit+0x110>)
 800641c:	2200      	movs	r2, #0
 800641e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006420:	480e      	ldr	r0, [pc, #56]	@ (800645c <HAL_UART_MspInit+0x110>)
 8006422:	f001 fc87 	bl	8007d34 <HAL_DMA_Init>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800642c:	f7ff f926 	bl	800567c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <HAL_UART_MspInit+0x110>)
 8006434:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006436:	4a09      	ldr	r2, [pc, #36]	@ (800645c <HAL_UART_MspInit+0x110>)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800643c:	2200      	movs	r2, #0
 800643e:	2100      	movs	r1, #0
 8006440:	2026      	movs	r0, #38	@ 0x26
 8006442:	f001 fc42 	bl	8007cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006446:	2026      	movs	r0, #38	@ 0x26
 8006448:	f001 fc59 	bl	8007cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800644c:	bf00      	nop
 800644e:	3778      	adds	r7, #120	@ 0x78
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40004400 	.word	0x40004400
 8006458:	40021000 	.word	0x40021000
 800645c:	20001dd0 	.word	0x20001dd0
 8006460:	40020008 	.word	0x40020008

08006464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006464:	480d      	ldr	r0, [pc, #52]	@ (800649c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006466:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006468:	f7ff fa5a 	bl	8005920 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800646c:	480c      	ldr	r0, [pc, #48]	@ (80064a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800646e:	490d      	ldr	r1, [pc, #52]	@ (80064a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006470:	4a0d      	ldr	r2, [pc, #52]	@ (80064a8 <LoopForever+0xe>)
  movs r3, #0
 8006472:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006474:	e002      	b.n	800647c <LoopCopyDataInit>

08006476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800647a:	3304      	adds	r3, #4

0800647c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800647c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800647e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006480:	d3f9      	bcc.n	8006476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006482:	4a0a      	ldr	r2, [pc, #40]	@ (80064ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8006484:	4c0a      	ldr	r4, [pc, #40]	@ (80064b0 <LoopForever+0x16>)
  movs r3, #0
 8006486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006488:	e001      	b.n	800648e <LoopFillZerobss>

0800648a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800648a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800648c:	3204      	adds	r2, #4

0800648e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800648e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006490:	d3fb      	bcc.n	800648a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006492:	f009 f8d1 	bl	800f638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006496:	f7fd f973 	bl	8003780 <main>

0800649a <LoopForever>:

LoopForever:
    b LoopForever
 800649a:	e7fe      	b.n	800649a <LoopForever>
  ldr   r0, =_estack
 800649c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80064a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064a4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80064a8:	080117f8 	.word	0x080117f8
  ldr r2, =_sbss
 80064ac:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80064b0:	20001f6c 	.word	0x20001f6c

080064b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80064b4:	e7fe      	b.n	80064b4 <ADC1_2_IRQHandler>

080064b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064c0:	2003      	movs	r0, #3
 80064c2:	f001 fbf7 	bl	8007cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064c6:	2000      	movs	r0, #0
 80064c8:	f000 f80e 	bl	80064e8 <HAL_InitTick>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	71fb      	strb	r3, [r7, #7]
 80064d6:	e001      	b.n	80064dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064d8:	f7ff f974 	bl	80057c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064dc:	79fb      	ldrb	r3, [r7, #7]

}
 80064de:	4618      	mov	r0, r3
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
	...

080064e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80064f4:	4b16      	ldr	r3, [pc, #88]	@ (8006550 <HAL_InitTick+0x68>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d022      	beq.n	8006542 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80064fc:	4b15      	ldr	r3, [pc, #84]	@ (8006554 <HAL_InitTick+0x6c>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b13      	ldr	r3, [pc, #76]	@ (8006550 <HAL_InitTick+0x68>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006508:	fbb1 f3f3 	udiv	r3, r1, r3
 800650c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006510:	4618      	mov	r0, r3
 8006512:	f001 fc02 	bl	8007d1a <HAL_SYSTICK_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10f      	bne.n	800653c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b0f      	cmp	r3, #15
 8006520:	d809      	bhi.n	8006536 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006522:	2200      	movs	r2, #0
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	f04f 30ff 	mov.w	r0, #4294967295
 800652a:	f001 fbce 	bl	8007cca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800652e:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <HAL_InitTick+0x70>)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	e007      	b.n	8006546 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
 800653a:	e004      	b.n	8006546 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	73fb      	strb	r3, [r7, #15]
 8006540:	e001      	b.n	8006546 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006546:	7bfb      	ldrb	r3, [r7, #15]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000214 	.word	0x20000214
 8006554:	2000020c 	.word	0x2000020c
 8006558:	20000210 	.word	0x20000210

0800655c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006560:	4b05      	ldr	r3, [pc, #20]	@ (8006578 <HAL_IncTick+0x1c>)
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	4b05      	ldr	r3, [pc, #20]	@ (800657c <HAL_IncTick+0x20>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4413      	add	r3, r2
 800656a:	4a03      	ldr	r2, [pc, #12]	@ (8006578 <HAL_IncTick+0x1c>)
 800656c:	6013      	str	r3, [r2, #0]
}
 800656e:	bf00      	nop
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	20001e30 	.word	0x20001e30
 800657c:	20000214 	.word	0x20000214

08006580 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
  return uwTick;
 8006584:	4b03      	ldr	r3, [pc, #12]	@ (8006594 <HAL_GetTick+0x14>)
 8006586:	681b      	ldr	r3, [r3, #0]
}
 8006588:	4618      	mov	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20001e30 	.word	0x20001e30

08006598 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
 800660c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3360      	adds	r3, #96	@ 0x60
 8006612:	461a      	mov	r2, r3
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b08      	ldr	r3, [pc, #32]	@ (8006644 <LL_ADC_SetOffset+0x44>)
 8006622:	4013      	ands	r3, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800662a:	683a      	ldr	r2, [r7, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	4313      	orrs	r3, r2
 8006630:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006638:	bf00      	nop
 800663a:	371c      	adds	r7, #28
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	03fff000 	.word	0x03fff000

08006648 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3360      	adds	r3, #96	@ 0x60
 8006656:	461a      	mov	r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006668:	4618      	mov	r0, r3
 800666a:	3714      	adds	r7, #20
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3360      	adds	r3, #96	@ 0x60
 8006684:	461a      	mov	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	4413      	add	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	431a      	orrs	r2, r3
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800669e:	bf00      	nop
 80066a0:	371c      	adds	r7, #28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b087      	sub	sp, #28
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3360      	adds	r3, #96	@ 0x60
 80066ba:	461a      	mov	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3360      	adds	r3, #96	@ 0x60
 80066f0:	461a      	mov	r2, r3
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	431a      	orrs	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800670a:	bf00      	nop
 800670c:	371c      	adds	r7, #28
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695b      	ldr	r3, [r3, #20]
 8006724:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	615a      	str	r2, [r3, #20]
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	3330      	adds	r3, #48	@ 0x30
 800674c:	461a      	mov	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	0a1b      	lsrs	r3, r3, #8
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	f003 030c 	and.w	r3, r3, #12
 8006758:	4413      	add	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	211f      	movs	r1, #31
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	43db      	mvns	r3, r3
 800676e:	401a      	ands	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	0e9b      	lsrs	r3, r3, #26
 8006774:	f003 011f 	and.w	r1, r3, #31
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f003 031f 	and.w	r3, r3, #31
 800677e:	fa01 f303 	lsl.w	r3, r1, r3
 8006782:	431a      	orrs	r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	3314      	adds	r3, #20
 80067a4:	461a      	mov	r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	0e5b      	lsrs	r3, r3, #25
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	4413      	add	r3, r2
 80067b2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	0d1b      	lsrs	r3, r3, #20
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	2107      	movs	r1, #7
 80067c2:	fa01 f303 	lsl.w	r3, r1, r3
 80067c6:	43db      	mvns	r3, r3
 80067c8:	401a      	ands	r2, r3
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	0d1b      	lsrs	r3, r3, #20
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	6879      	ldr	r1, [r7, #4]
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	431a      	orrs	r2, r3
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80067de:	bf00      	nop
 80067e0:	371c      	adds	r7, #28
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006804:	43db      	mvns	r3, r3
 8006806:	401a      	ands	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f003 0318 	and.w	r3, r3, #24
 800680e:	4908      	ldr	r1, [pc, #32]	@ (8006830 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006810:	40d9      	lsrs	r1, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	400b      	ands	r3, r1
 8006816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800681a:	431a      	orrs	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006822:	bf00      	nop
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	0007ffff 	.word	0x0007ffff

08006834 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 031f 	and.w	r3, r3, #31
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006860:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6093      	str	r3, [r2, #8]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006888:	d101      	bne.n	800688e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80068ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068d8:	d101      	bne.n	80068de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80068da:	2301      	movs	r3, #1
 80068dc:	e000      	b.n	80068e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006900:	f043 0201 	orr.w	r2, r3, #1
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f003 0301 	and.w	r3, r3, #1
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <LL_ADC_IsEnabled+0x18>
 8006928:	2301      	movs	r3, #1
 800692a:	e000      	b.n	800692e <LL_ADC_IsEnabled+0x1a>
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800694a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800694e:	f043 0204 	orr.w	r2, r3, #4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b04      	cmp	r3, #4
 8006974:	d101      	bne.n	800697a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b08      	cmp	r3, #8
 800699a:	d101      	bne.n	80069a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b089      	sub	sp, #36	@ 0x24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e1a9      	b.n	8006d1e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d109      	bne.n	80069ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7fc fd47 	bl	800346c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff ff3f 	bl	8006874 <LL_ADC_IsDeepPowerDownEnabled>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d004      	beq.n	8006a06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff ff25 	bl	8006850 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7ff ff5a 	bl	80068c4 <LL_ADC_IsInternalRegulatorEnabled>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d115      	bne.n	8006a42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff ff3e 	bl	800689c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a20:	4b9c      	ldr	r3, [pc, #624]	@ (8006c94 <HAL_ADC_Init+0x2e4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	099b      	lsrs	r3, r3, #6
 8006a26:	4a9c      	ldr	r2, [pc, #624]	@ (8006c98 <HAL_ADC_Init+0x2e8>)
 8006a28:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2c:	099b      	lsrs	r3, r3, #6
 8006a2e:	3301      	adds	r3, #1
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a34:	e002      	b.n	8006a3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1f9      	bne.n	8006a36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff ff3c 	bl	80068c4 <LL_ADC_IsInternalRegulatorEnabled>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10d      	bne.n	8006a6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a56:	f043 0210 	orr.w	r2, r3, #16
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a62:	f043 0201 	orr.w	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff ff75 	bl	8006962 <LL_ADC_REG_IsConversionOngoing>
 8006a78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a7e:	f003 0310 	and.w	r3, r3, #16
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f040 8142 	bne.w	8006d0c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 813e 	bne.w	8006d0c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a94:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006a98:	f043 0202 	orr.w	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff ff35 	bl	8006914 <LL_ADC_IsEnabled>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d141      	bne.n	8006b34 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ab8:	d004      	beq.n	8006ac4 <HAL_ADC_Init+0x114>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a77      	ldr	r2, [pc, #476]	@ (8006c9c <HAL_ADC_Init+0x2ec>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d10f      	bne.n	8006ae4 <HAL_ADC_Init+0x134>
 8006ac4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006ac8:	f7ff ff24 	bl	8006914 <LL_ADC_IsEnabled>
 8006acc:	4604      	mov	r4, r0
 8006ace:	4873      	ldr	r0, [pc, #460]	@ (8006c9c <HAL_ADC_Init+0x2ec>)
 8006ad0:	f7ff ff20 	bl	8006914 <LL_ADC_IsEnabled>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	4323      	orrs	r3, r4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	bf0c      	ite	eq
 8006adc:	2301      	moveq	r3, #1
 8006ade:	2300      	movne	r3, #0
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	e012      	b.n	8006b0a <HAL_ADC_Init+0x15a>
 8006ae4:	486e      	ldr	r0, [pc, #440]	@ (8006ca0 <HAL_ADC_Init+0x2f0>)
 8006ae6:	f7ff ff15 	bl	8006914 <LL_ADC_IsEnabled>
 8006aea:	4604      	mov	r4, r0
 8006aec:	486d      	ldr	r0, [pc, #436]	@ (8006ca4 <HAL_ADC_Init+0x2f4>)
 8006aee:	f7ff ff11 	bl	8006914 <LL_ADC_IsEnabled>
 8006af2:	4603      	mov	r3, r0
 8006af4:	431c      	orrs	r4, r3
 8006af6:	486c      	ldr	r0, [pc, #432]	@ (8006ca8 <HAL_ADC_Init+0x2f8>)
 8006af8:	f7ff ff0c 	bl	8006914 <LL_ADC_IsEnabled>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4323      	orrs	r3, r4
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bf0c      	ite	eq
 8006b04:	2301      	moveq	r3, #1
 8006b06:	2300      	movne	r3, #0
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d012      	beq.n	8006b34 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b16:	d004      	beq.n	8006b22 <HAL_ADC_Init+0x172>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a5f      	ldr	r2, [pc, #380]	@ (8006c9c <HAL_ADC_Init+0x2ec>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d101      	bne.n	8006b26 <HAL_ADC_Init+0x176>
 8006b22:	4a62      	ldr	r2, [pc, #392]	@ (8006cac <HAL_ADC_Init+0x2fc>)
 8006b24:	e000      	b.n	8006b28 <HAL_ADC_Init+0x178>
 8006b26:	4a62      	ldr	r2, [pc, #392]	@ (8006cb0 <HAL_ADC_Init+0x300>)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4610      	mov	r0, r2
 8006b30:	f7ff fd32 	bl	8006598 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7f5b      	ldrb	r3, [r3, #29]
 8006b38:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b3e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006b44:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006b4a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b52:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b54:	4313      	orrs	r3, r2
 8006b56:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d106      	bne.n	8006b70 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	3b01      	subs	r3, #1
 8006b68:	045b      	lsls	r3, r3, #17
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d009      	beq.n	8006b8c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b84:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	4b48      	ldr	r3, [pc, #288]	@ (8006cb4 <HAL_ADC_Init+0x304>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	69b9      	ldr	r1, [r7, #24]
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fee4 	bl	8006988 <LL_ADC_INJ_IsConversionOngoing>
 8006bc0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d17f      	bne.n	8006cc8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d17c      	bne.n	8006cc8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bd2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006bda:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bea:	f023 0302 	bic.w	r3, r3, #2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	69b9      	ldr	r1, [r7, #24]
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006c0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006c1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6911      	ldr	r1, [r2, #16]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006c2e:	e013      	b.n	8006c58 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006c3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006c50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c54:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d12a      	bne.n	8006cb8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c78:	4311      	orrs	r1, r2
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006c7e:	4311      	orrs	r1, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c84:	430a      	orrs	r2, r1
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	611a      	str	r2, [r3, #16]
 8006c92:	e019      	b.n	8006cc8 <HAL_ADC_Init+0x318>
 8006c94:	2000020c 	.word	0x2000020c
 8006c98:	053e2d63 	.word	0x053e2d63
 8006c9c:	50000100 	.word	0x50000100
 8006ca0:	50000400 	.word	0x50000400
 8006ca4:	50000500 	.word	0x50000500
 8006ca8:	50000600 	.word	0x50000600
 8006cac:	50000300 	.word	0x50000300
 8006cb0:	50000700 	.word	0x50000700
 8006cb4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0201 	bic.w	r2, r2, #1
 8006cc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d10c      	bne.n	8006cea <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd6:	f023 010f 	bic.w	r1, r3, #15
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	1e5a      	subs	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ce8:	e007      	b.n	8006cfa <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 020f 	bic.w	r2, r2, #15
 8006cf8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfe:	f023 0303 	bic.w	r3, r3, #3
 8006d02:	f043 0201 	orr.w	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d0a:	e007      	b.n	8006d1c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d10:	f043 0210 	orr.w	r2, r3, #16
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3724      	adds	r7, #36	@ 0x24
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd90      	pop	{r4, r7, pc}
 8006d26:	bf00      	nop

08006d28 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d38:	d004      	beq.n	8006d44 <HAL_ADC_Start+0x1c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a67      	ldr	r2, [pc, #412]	@ (8006edc <HAL_ADC_Start+0x1b4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d101      	bne.n	8006d48 <HAL_ADC_Start+0x20>
 8006d44:	4b66      	ldr	r3, [pc, #408]	@ (8006ee0 <HAL_ADC_Start+0x1b8>)
 8006d46:	e000      	b.n	8006d4a <HAL_ADC_Start+0x22>
 8006d48:	4b66      	ldr	r3, [pc, #408]	@ (8006ee4 <HAL_ADC_Start+0x1bc>)
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fd72 	bl	8006834 <LL_ADC_GetMultimode>
 8006d50:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7ff fe03 	bl	8006962 <LL_ADC_REG_IsConversionOngoing>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 80b4 	bne.w	8006ecc <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_ADC_Start+0x4a>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e0af      	b.n	8006ed2 <HAL_ADC_Start+0x1aa>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fd06 	bl	800778c <ADC_Enable>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 809b 	bne.w	8006ec2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d94:	f023 0301 	bic.w	r3, r3, #1
 8006d98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a4d      	ldr	r2, [pc, #308]	@ (8006edc <HAL_ADC_Start+0x1b4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <HAL_ADC_Start+0x96>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a4e      	ldr	r2, [pc, #312]	@ (8006ee8 <HAL_ADC_Start+0x1c0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d002      	beq.n	8006dba <HAL_ADC_Start+0x92>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	e003      	b.n	8006dc2 <HAL_ADC_Start+0x9a>
 8006dba:	4b4c      	ldr	r3, [pc, #304]	@ (8006eec <HAL_ADC_Start+0x1c4>)
 8006dbc:	e001      	b.n	8006dc2 <HAL_ADC_Start+0x9a>
 8006dbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6812      	ldr	r2, [r2, #0]
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d002      	beq.n	8006dd0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d105      	bne.n	8006ddc <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de8:	d106      	bne.n	8006df8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dee:	f023 0206 	bic.w	r2, r3, #6
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	661a      	str	r2, [r3, #96]	@ 0x60
 8006df6:	e002      	b.n	8006dfe <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	221c      	movs	r2, #28
 8006e04:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a32      	ldr	r2, [pc, #200]	@ (8006edc <HAL_ADC_Start+0x1b4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d009      	beq.n	8006e2c <HAL_ADC_Start+0x104>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a32      	ldr	r2, [pc, #200]	@ (8006ee8 <HAL_ADC_Start+0x1c0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d002      	beq.n	8006e28 <HAL_ADC_Start+0x100>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	e003      	b.n	8006e30 <HAL_ADC_Start+0x108>
 8006e28:	4b30      	ldr	r3, [pc, #192]	@ (8006eec <HAL_ADC_Start+0x1c4>)
 8006e2a:	e001      	b.n	8006e30 <HAL_ADC_Start+0x108>
 8006e2c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6812      	ldr	r2, [r2, #0]
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d008      	beq.n	8006e4a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d005      	beq.n	8006e4a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b05      	cmp	r3, #5
 8006e42:	d002      	beq.n	8006e4a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d114      	bne.n	8006e74 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d007      	beq.n	8006e68 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006e60:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff fd64 	bl	800693a <LL_ADC_REG_StartConversion>
 8006e72:	e02d      	b.n	8006ed0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e78:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a15      	ldr	r2, [pc, #84]	@ (8006edc <HAL_ADC_Start+0x1b4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d009      	beq.n	8006e9e <HAL_ADC_Start+0x176>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a16      	ldr	r2, [pc, #88]	@ (8006ee8 <HAL_ADC_Start+0x1c0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d002      	beq.n	8006e9a <HAL_ADC_Start+0x172>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	e003      	b.n	8006ea2 <HAL_ADC_Start+0x17a>
 8006e9a:	4b14      	ldr	r3, [pc, #80]	@ (8006eec <HAL_ADC_Start+0x1c4>)
 8006e9c:	e001      	b.n	8006ea2 <HAL_ADC_Start+0x17a>
 8006e9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006ea2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00f      	beq.n	8006ed0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006eb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ec0:	e006      	b.n	8006ed0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006eca:	e001      	b.n	8006ed0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3718      	adds	r7, #24
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	50000100 	.word	0x50000100
 8006ee0:	50000300 	.word	0x50000300
 8006ee4:	50000700 	.word	0x50000700
 8006ee8:	50000500 	.word	0x50000500
 8006eec:	50000400 	.word	0x50000400

08006ef0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
	...

08006f0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b0b6      	sub	sp, #216	@ 0xd8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d102      	bne.n	8006f30 <HAL_ADC_ConfigChannel+0x24>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	f000 bc13 	b.w	8007756 <HAL_ADC_ConfigChannel+0x84a>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7ff fd10 	bl	8006962 <LL_ADC_REG_IsConversionOngoing>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f040 83f3 	bne.w	8007730 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	f7ff fbf0 	bl	800673c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7ff fcfe 	bl	8006962 <LL_ADC_REG_IsConversionOngoing>
 8006f66:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f7ff fd0a 	bl	8006988 <LL_ADC_INJ_IsConversionOngoing>
 8006f74:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006f78:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f040 81d9 	bne.w	8007334 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006f82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 81d4 	bne.w	8007334 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f94:	d10f      	bne.n	8006fb6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	f7ff fbf7 	bl	8006794 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fbb1 	bl	8006716 <LL_ADC_SetSamplingTimeCommonConfig>
 8006fb4:	e00e      	b.n	8006fd4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	6819      	ldr	r1, [r3, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	f7ff fbe6 	bl	8006794 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fba1 	bl	8006716 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	695a      	ldr	r2, [r3, #20]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	08db      	lsrs	r3, r3, #3
 8006fe0:	f003 0303 	and.w	r3, r3, #3
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d022      	beq.n	800703c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6818      	ldr	r0, [r3, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6919      	ldr	r1, [r3, #16]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007006:	f7ff fafb 	bl	8006600 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6818      	ldr	r0, [r3, #0]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	6919      	ldr	r1, [r3, #16]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	461a      	mov	r2, r3
 8007018:	f7ff fb47 	bl	80066aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007028:	2b01      	cmp	r3, #1
 800702a:	d102      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x126>
 800702c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007030:	e000      	b.n	8007034 <HAL_ADC_ConfigChannel+0x128>
 8007032:	2300      	movs	r3, #0
 8007034:	461a      	mov	r2, r3
 8007036:	f7ff fb53 	bl	80066e0 <LL_ADC_SetOffsetSaturation>
 800703a:	e17b      	b.n	8007334 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2100      	movs	r1, #0
 8007042:	4618      	mov	r0, r3
 8007044:	f7ff fb00 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007048:	4603      	mov	r3, r0
 800704a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10a      	bne.n	8007068 <HAL_ADC_ConfigChannel+0x15c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff faf5 	bl	8006648 <LL_ADC_GetOffsetChannel>
 800705e:	4603      	mov	r3, r0
 8007060:	0e9b      	lsrs	r3, r3, #26
 8007062:	f003 021f 	and.w	r2, r3, #31
 8007066:	e01e      	b.n	80070a6 <HAL_ADC_ConfigChannel+0x19a>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff faea 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007074:	4603      	mov	r3, r0
 8007076:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800707a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800707e:	fa93 f3a3 	rbit	r3, r3
 8007082:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007086:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800708a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800708e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007096:	2320      	movs	r3, #32
 8007098:	e004      	b.n	80070a4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800709a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800709e:	fab3 f383 	clz	r3, r3
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d105      	bne.n	80070be <HAL_ADC_ConfigChannel+0x1b2>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	0e9b      	lsrs	r3, r3, #26
 80070b8:	f003 031f 	and.w	r3, r3, #31
 80070bc:	e018      	b.n	80070f0 <HAL_ADC_ConfigChannel+0x1e4>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80070ca:	fa93 f3a3 	rbit	r3, r3
 80070ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80070d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80070da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80070e2:	2320      	movs	r3, #32
 80070e4:	e004      	b.n	80070f0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80070e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070ea:	fab3 f383 	clz	r3, r3
 80070ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d106      	bne.n	8007102 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2200      	movs	r2, #0
 80070fa:	2100      	movs	r1, #0
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7ff fab9 	bl	8006674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2101      	movs	r1, #1
 8007108:	4618      	mov	r0, r3
 800710a:	f7ff fa9d 	bl	8006648 <LL_ADC_GetOffsetChannel>
 800710e:	4603      	mov	r3, r0
 8007110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <HAL_ADC_ConfigChannel+0x222>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2101      	movs	r1, #1
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fa92 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007124:	4603      	mov	r3, r0
 8007126:	0e9b      	lsrs	r3, r3, #26
 8007128:	f003 021f 	and.w	r2, r3, #31
 800712c:	e01e      	b.n	800716c <HAL_ADC_ConfigChannel+0x260>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2101      	movs	r1, #1
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fa87 	bl	8006648 <LL_ADC_GetOffsetChannel>
 800713a:	4603      	mov	r3, r0
 800713c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007144:	fa93 f3a3 	rbit	r3, r3
 8007148:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800714c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007150:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800715c:	2320      	movs	r3, #32
 800715e:	e004      	b.n	800716a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007164:	fab3 f383 	clz	r3, r3
 8007168:	b2db      	uxtb	r3, r3
 800716a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007174:	2b00      	cmp	r3, #0
 8007176:	d105      	bne.n	8007184 <HAL_ADC_ConfigChannel+0x278>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	0e9b      	lsrs	r3, r3, #26
 800717e:	f003 031f 	and.w	r3, r3, #31
 8007182:	e018      	b.n	80071b6 <HAL_ADC_ConfigChannel+0x2aa>
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800718c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007190:	fa93 f3a3 	rbit	r3, r3
 8007194:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007198:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800719c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80071a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80071a8:	2320      	movs	r3, #32
 80071aa:	e004      	b.n	80071b6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80071ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80071b0:	fab3 f383 	clz	r3, r3
 80071b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d106      	bne.n	80071c8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2200      	movs	r2, #0
 80071c0:	2101      	movs	r1, #1
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7ff fa56 	bl	8006674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2102      	movs	r1, #2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7ff fa3a 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80071d4:	4603      	mov	r3, r0
 80071d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <HAL_ADC_ConfigChannel+0x2e8>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2102      	movs	r1, #2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7ff fa2f 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80071ea:	4603      	mov	r3, r0
 80071ec:	0e9b      	lsrs	r3, r3, #26
 80071ee:	f003 021f 	and.w	r2, r3, #31
 80071f2:	e01e      	b.n	8007232 <HAL_ADC_ConfigChannel+0x326>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2102      	movs	r1, #2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7ff fa24 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007200:	4603      	mov	r3, r0
 8007202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800720a:	fa93 f3a3 	rbit	r3, r3
 800720e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007212:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007216:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800721a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8007222:	2320      	movs	r3, #32
 8007224:	e004      	b.n	8007230 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8007226:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800722a:	fab3 f383 	clz	r3, r3
 800722e:	b2db      	uxtb	r3, r3
 8007230:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <HAL_ADC_ConfigChannel+0x33e>
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	0e9b      	lsrs	r3, r3, #26
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	e016      	b.n	8007278 <HAL_ADC_ConfigChannel+0x36c>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007252:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007256:	fa93 f3a3 	rbit	r3, r3
 800725a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800725c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800725e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007262:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800726a:	2320      	movs	r3, #32
 800726c:	e004      	b.n	8007278 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800726e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007272:	fab3 f383 	clz	r3, r3
 8007276:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007278:	429a      	cmp	r2, r3
 800727a:	d106      	bne.n	800728a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2200      	movs	r2, #0
 8007282:	2102      	movs	r1, #2
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff f9f5 	bl	8006674 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2103      	movs	r1, #3
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff f9d9 	bl	8006648 <LL_ADC_GetOffsetChannel>
 8007296:	4603      	mov	r3, r0
 8007298:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <HAL_ADC_ConfigChannel+0x3aa>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2103      	movs	r1, #3
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff f9ce 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80072ac:	4603      	mov	r3, r0
 80072ae:	0e9b      	lsrs	r3, r3, #26
 80072b0:	f003 021f 	and.w	r2, r3, #31
 80072b4:	e017      	b.n	80072e6 <HAL_ADC_ConfigChannel+0x3da>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2103      	movs	r1, #3
 80072bc:	4618      	mov	r0, r3
 80072be:	f7ff f9c3 	bl	8006648 <LL_ADC_GetOffsetChannel>
 80072c2:	4603      	mov	r3, r0
 80072c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072c8:	fa93 f3a3 	rbit	r3, r3
 80072cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80072ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072d0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80072d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80072d8:	2320      	movs	r3, #32
 80072da:	e003      	b.n	80072e4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80072dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072de:	fab3 f383 	clz	r3, r3
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d105      	bne.n	80072fe <HAL_ADC_ConfigChannel+0x3f2>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0e9b      	lsrs	r3, r3, #26
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	e011      	b.n	8007322 <HAL_ADC_ConfigChannel+0x416>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007306:	fa93 f3a3 	rbit	r3, r3
 800730a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800730c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800730e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007316:	2320      	movs	r3, #32
 8007318:	e003      	b.n	8007322 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800731a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800731c:	fab3 f383 	clz	r3, r3
 8007320:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007322:	429a      	cmp	r2, r3
 8007324:	d106      	bne.n	8007334 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	2103      	movs	r1, #3
 800732e:	4618      	mov	r0, r3
 8007330:	f7ff f9a0 	bl	8006674 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff faeb 	bl	8006914 <LL_ADC_IsEnabled>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	f040 813d 	bne.w	80075c0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	6819      	ldr	r1, [r3, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	461a      	mov	r2, r3
 8007354:	f7ff fa4a 	bl	80067ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	4aa2      	ldr	r2, [pc, #648]	@ (80075e8 <HAL_ADC_ConfigChannel+0x6dc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	f040 812e 	bne.w	80075c0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10b      	bne.n	800738c <HAL_ADC_ConfigChannel+0x480>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	0e9b      	lsrs	r3, r3, #26
 800737a:	3301      	adds	r3, #1
 800737c:	f003 031f 	and.w	r3, r3, #31
 8007380:	2b09      	cmp	r3, #9
 8007382:	bf94      	ite	ls
 8007384:	2301      	movls	r3, #1
 8007386:	2300      	movhi	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e019      	b.n	80073c0 <HAL_ADC_ConfigChannel+0x4b4>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007392:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007394:	fa93 f3a3 	rbit	r3, r3
 8007398:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800739a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800739c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800739e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80073a4:	2320      	movs	r3, #32
 80073a6:	e003      	b.n	80073b0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80073a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073aa:	fab3 f383 	clz	r3, r3
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	3301      	adds	r3, #1
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2b09      	cmp	r3, #9
 80073b8:	bf94      	ite	ls
 80073ba:	2301      	movls	r3, #1
 80073bc:	2300      	movhi	r3, #0
 80073be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d079      	beq.n	80074b8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d107      	bne.n	80073e0 <HAL_ADC_ConfigChannel+0x4d4>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	0e9b      	lsrs	r3, r3, #26
 80073d6:	3301      	adds	r3, #1
 80073d8:	069b      	lsls	r3, r3, #26
 80073da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073de:	e015      	b.n	800740c <HAL_ADC_ConfigChannel+0x500>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073e8:	fa93 f3a3 	rbit	r3, r3
 80073ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80073ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073f0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80073f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d101      	bne.n	80073fc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80073f8:	2320      	movs	r3, #32
 80073fa:	e003      	b.n	8007404 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80073fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073fe:	fab3 f383 	clz	r3, r3
 8007402:	b2db      	uxtb	r3, r3
 8007404:	3301      	adds	r3, #1
 8007406:	069b      	lsls	r3, r3, #26
 8007408:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007414:	2b00      	cmp	r3, #0
 8007416:	d109      	bne.n	800742c <HAL_ADC_ConfigChannel+0x520>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	0e9b      	lsrs	r3, r3, #26
 800741e:	3301      	adds	r3, #1
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	2101      	movs	r1, #1
 8007426:	fa01 f303 	lsl.w	r3, r1, r3
 800742a:	e017      	b.n	800745c <HAL_ADC_ConfigChannel+0x550>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007434:	fa93 f3a3 	rbit	r3, r3
 8007438:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800743a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800743c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800743e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007444:	2320      	movs	r3, #32
 8007446:	e003      	b.n	8007450 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800744a:	fab3 f383 	clz	r3, r3
 800744e:	b2db      	uxtb	r3, r3
 8007450:	3301      	adds	r3, #1
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	2101      	movs	r1, #1
 8007458:	fa01 f303 	lsl.w	r3, r1, r3
 800745c:	ea42 0103 	orr.w	r1, r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10a      	bne.n	8007482 <HAL_ADC_ConfigChannel+0x576>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	0e9b      	lsrs	r3, r3, #26
 8007472:	3301      	adds	r3, #1
 8007474:	f003 021f 	and.w	r2, r3, #31
 8007478:	4613      	mov	r3, r2
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	4413      	add	r3, r2
 800747e:	051b      	lsls	r3, r3, #20
 8007480:	e018      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x5a8>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748a:	fa93 f3a3 	rbit	r3, r3
 800748e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800749a:	2320      	movs	r3, #32
 800749c:	e003      	b.n	80074a6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800749e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074a0:	fab3 f383 	clz	r3, r3
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	3301      	adds	r3, #1
 80074a8:	f003 021f 	and.w	r2, r3, #31
 80074ac:	4613      	mov	r3, r2
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074b4:	430b      	orrs	r3, r1
 80074b6:	e07e      	b.n	80075b6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d107      	bne.n	80074d4 <HAL_ADC_ConfigChannel+0x5c8>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	0e9b      	lsrs	r3, r3, #26
 80074ca:	3301      	adds	r3, #1
 80074cc:	069b      	lsls	r3, r3, #26
 80074ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80074d2:	e015      	b.n	8007500 <HAL_ADC_ConfigChannel+0x5f4>
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074dc:	fa93 f3a3 	rbit	r3, r3
 80074e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80074ec:	2320      	movs	r3, #32
 80074ee:	e003      	b.n	80074f8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	fab3 f383 	clz	r3, r3
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	3301      	adds	r3, #1
 80074fa:	069b      	lsls	r3, r3, #26
 80074fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007508:	2b00      	cmp	r3, #0
 800750a:	d109      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x614>
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	0e9b      	lsrs	r3, r3, #26
 8007512:	3301      	adds	r3, #1
 8007514:	f003 031f 	and.w	r3, r3, #31
 8007518:	2101      	movs	r1, #1
 800751a:	fa01 f303 	lsl.w	r3, r1, r3
 800751e:	e017      	b.n	8007550 <HAL_ADC_ConfigChannel+0x644>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	fa93 f3a3 	rbit	r3, r3
 800752c:	61fb      	str	r3, [r7, #28]
  return result;
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007538:	2320      	movs	r3, #32
 800753a:	e003      	b.n	8007544 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	fab3 f383 	clz	r3, r3
 8007542:	b2db      	uxtb	r3, r3
 8007544:	3301      	adds	r3, #1
 8007546:	f003 031f 	and.w	r3, r3, #31
 800754a:	2101      	movs	r1, #1
 800754c:	fa01 f303 	lsl.w	r3, r1, r3
 8007550:	ea42 0103 	orr.w	r1, r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10d      	bne.n	800757c <HAL_ADC_ConfigChannel+0x670>
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	0e9b      	lsrs	r3, r3, #26
 8007566:	3301      	adds	r3, #1
 8007568:	f003 021f 	and.w	r2, r3, #31
 800756c:	4613      	mov	r3, r2
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	4413      	add	r3, r2
 8007572:	3b1e      	subs	r3, #30
 8007574:	051b      	lsls	r3, r3, #20
 8007576:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800757a:	e01b      	b.n	80075b4 <HAL_ADC_ConfigChannel+0x6a8>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	fa93 f3a3 	rbit	r3, r3
 8007588:	613b      	str	r3, [r7, #16]
  return result;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007594:	2320      	movs	r3, #32
 8007596:	e003      	b.n	80075a0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	fab3 f383 	clz	r3, r3
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	3301      	adds	r3, #1
 80075a2:	f003 021f 	and.w	r2, r3, #31
 80075a6:	4613      	mov	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	4413      	add	r3, r2
 80075ac:	3b1e      	subs	r3, #30
 80075ae:	051b      	lsls	r3, r3, #20
 80075b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80075ba:	4619      	mov	r1, r3
 80075bc:	f7ff f8ea 	bl	8006794 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <HAL_ADC_ConfigChannel+0x6e0>)
 80075c6:	4013      	ands	r3, r2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 80be 	beq.w	800774a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075d6:	d004      	beq.n	80075e2 <HAL_ADC_ConfigChannel+0x6d6>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a04      	ldr	r2, [pc, #16]	@ (80075f0 <HAL_ADC_ConfigChannel+0x6e4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d10a      	bne.n	80075f8 <HAL_ADC_ConfigChannel+0x6ec>
 80075e2:	4b04      	ldr	r3, [pc, #16]	@ (80075f4 <HAL_ADC_ConfigChannel+0x6e8>)
 80075e4:	e009      	b.n	80075fa <HAL_ADC_ConfigChannel+0x6ee>
 80075e6:	bf00      	nop
 80075e8:	407f0000 	.word	0x407f0000
 80075ec:	80080000 	.word	0x80080000
 80075f0:	50000100 	.word	0x50000100
 80075f4:	50000300 	.word	0x50000300
 80075f8:	4b59      	ldr	r3, [pc, #356]	@ (8007760 <HAL_ADC_ConfigChannel+0x854>)
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fff2 	bl	80065e4 <LL_ADC_GetCommonPathInternalCh>
 8007600:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a56      	ldr	r2, [pc, #344]	@ (8007764 <HAL_ADC_ConfigChannel+0x858>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_ADC_ConfigChannel+0x70c>
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a55      	ldr	r2, [pc, #340]	@ (8007768 <HAL_ADC_ConfigChannel+0x85c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d13a      	bne.n	800768e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007618:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800761c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d134      	bne.n	800768e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800762c:	d005      	beq.n	800763a <HAL_ADC_ConfigChannel+0x72e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a4e      	ldr	r2, [pc, #312]	@ (800776c <HAL_ADC_ConfigChannel+0x860>)
 8007634:	4293      	cmp	r3, r2
 8007636:	f040 8085 	bne.w	8007744 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007642:	d004      	beq.n	800764e <HAL_ADC_ConfigChannel+0x742>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a49      	ldr	r2, [pc, #292]	@ (8007770 <HAL_ADC_ConfigChannel+0x864>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d101      	bne.n	8007652 <HAL_ADC_ConfigChannel+0x746>
 800764e:	4a49      	ldr	r2, [pc, #292]	@ (8007774 <HAL_ADC_ConfigChannel+0x868>)
 8007650:	e000      	b.n	8007654 <HAL_ADC_ConfigChannel+0x748>
 8007652:	4a43      	ldr	r2, [pc, #268]	@ (8007760 <HAL_ADC_ConfigChannel+0x854>)
 8007654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007658:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	f7fe ffad 	bl	80065be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007664:	4b44      	ldr	r3, [pc, #272]	@ (8007778 <HAL_ADC_ConfigChannel+0x86c>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	099b      	lsrs	r3, r3, #6
 800766a:	4a44      	ldr	r2, [pc, #272]	@ (800777c <HAL_ADC_ConfigChannel+0x870>)
 800766c:	fba2 2303 	umull	r2, r3, r2, r3
 8007670:	099b      	lsrs	r3, r3, #6
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800767e:	e002      	b.n	8007686 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	3b01      	subs	r3, #1
 8007684:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1f9      	bne.n	8007680 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800768c:	e05a      	b.n	8007744 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a3b      	ldr	r2, [pc, #236]	@ (8007780 <HAL_ADC_ConfigChannel+0x874>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d125      	bne.n	80076e4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800769c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11f      	bne.n	80076e4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a31      	ldr	r2, [pc, #196]	@ (8007770 <HAL_ADC_ConfigChannel+0x864>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d104      	bne.n	80076b8 <HAL_ADC_ConfigChannel+0x7ac>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a34      	ldr	r2, [pc, #208]	@ (8007784 <HAL_ADC_ConfigChannel+0x878>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d047      	beq.n	8007748 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c0:	d004      	beq.n	80076cc <HAL_ADC_ConfigChannel+0x7c0>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007770 <HAL_ADC_ConfigChannel+0x864>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d101      	bne.n	80076d0 <HAL_ADC_ConfigChannel+0x7c4>
 80076cc:	4a29      	ldr	r2, [pc, #164]	@ (8007774 <HAL_ADC_ConfigChannel+0x868>)
 80076ce:	e000      	b.n	80076d2 <HAL_ADC_ConfigChannel+0x7c6>
 80076d0:	4a23      	ldr	r2, [pc, #140]	@ (8007760 <HAL_ADC_ConfigChannel+0x854>)
 80076d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f7fe ff6e 	bl	80065be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80076e2:	e031      	b.n	8007748 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a27      	ldr	r2, [pc, #156]	@ (8007788 <HAL_ADC_ConfigChannel+0x87c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d12d      	bne.n	800774a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80076ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d127      	bne.n	800774a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007770 <HAL_ADC_ConfigChannel+0x864>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d022      	beq.n	800774a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800770c:	d004      	beq.n	8007718 <HAL_ADC_ConfigChannel+0x80c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a17      	ldr	r2, [pc, #92]	@ (8007770 <HAL_ADC_ConfigChannel+0x864>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d101      	bne.n	800771c <HAL_ADC_ConfigChannel+0x810>
 8007718:	4a16      	ldr	r2, [pc, #88]	@ (8007774 <HAL_ADC_ConfigChannel+0x868>)
 800771a:	e000      	b.n	800771e <HAL_ADC_ConfigChannel+0x812>
 800771c:	4a10      	ldr	r2, [pc, #64]	@ (8007760 <HAL_ADC_ConfigChannel+0x854>)
 800771e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007722:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7fe ff48 	bl	80065be <LL_ADC_SetCommonPathInternalCh>
 800772e:	e00c      	b.n	800774a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007734:	f043 0220 	orr.w	r2, r3, #32
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007742:	e002      	b.n	800774a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007744:	bf00      	nop
 8007746:	e000      	b.n	800774a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007748:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007752:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007756:	4618      	mov	r0, r3
 8007758:	37d8      	adds	r7, #216	@ 0xd8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	50000700 	.word	0x50000700
 8007764:	c3210000 	.word	0xc3210000
 8007768:	90c00010 	.word	0x90c00010
 800776c:	50000600 	.word	0x50000600
 8007770:	50000100 	.word	0x50000100
 8007774:	50000300 	.word	0x50000300
 8007778:	2000020c 	.word	0x2000020c
 800777c:	053e2d63 	.word	0x053e2d63
 8007780:	c7520000 	.word	0xc7520000
 8007784:	50000500 	.word	0x50000500
 8007788:	cb840000 	.word	0xcb840000

0800778c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007794:	2300      	movs	r3, #0
 8007796:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4618      	mov	r0, r3
 800779e:	f7ff f8b9 	bl	8006914 <LL_ADC_IsEnabled>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d176      	bne.n	8007896 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	4b3c      	ldr	r3, [pc, #240]	@ (80078a0 <ADC_Enable+0x114>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00d      	beq.n	80077d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ba:	f043 0210 	orr.w	r2, r3, #16
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c6:	f043 0201 	orr.w	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e062      	b.n	8007898 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff f888 	bl	80068ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80077e4:	d004      	beq.n	80077f0 <ADC_Enable+0x64>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a2e      	ldr	r2, [pc, #184]	@ (80078a4 <ADC_Enable+0x118>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d101      	bne.n	80077f4 <ADC_Enable+0x68>
 80077f0:	4b2d      	ldr	r3, [pc, #180]	@ (80078a8 <ADC_Enable+0x11c>)
 80077f2:	e000      	b.n	80077f6 <ADC_Enable+0x6a>
 80077f4:	4b2d      	ldr	r3, [pc, #180]	@ (80078ac <ADC_Enable+0x120>)
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fef4 	bl	80065e4 <LL_ADC_GetCommonPathInternalCh>
 80077fc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80077fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007802:	2b00      	cmp	r3, #0
 8007804:	d013      	beq.n	800782e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007806:	4b2a      	ldr	r3, [pc, #168]	@ (80078b0 <ADC_Enable+0x124>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	099b      	lsrs	r3, r3, #6
 800780c:	4a29      	ldr	r2, [pc, #164]	@ (80078b4 <ADC_Enable+0x128>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	099b      	lsrs	r3, r3, #6
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	4613      	mov	r3, r2
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007820:	e002      	b.n	8007828 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	3b01      	subs	r3, #1
 8007826:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f9      	bne.n	8007822 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800782e:	f7fe fea7 	bl	8006580 <HAL_GetTick>
 8007832:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007834:	e028      	b.n	8007888 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff f86a 	bl	8006914 <LL_ADC_IsEnabled>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d104      	bne.n	8007850 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff f84e 	bl	80068ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007850:	f7fe fe96 	bl	8006580 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d914      	bls.n	8007888 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b01      	cmp	r3, #1
 800786a:	d00d      	beq.n	8007888 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007870:	f043 0210 	orr.w	r2, r3, #16
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800787c:	f043 0201 	orr.w	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007884:	2301      	movs	r3, #1
 8007886:	e007      	b.n	8007898 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b01      	cmp	r3, #1
 8007894:	d1cf      	bne.n	8007836 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	8000003f 	.word	0x8000003f
 80078a4:	50000100 	.word	0x50000100
 80078a8:	50000300 	.word	0x50000300
 80078ac:	50000700 	.word	0x50000700
 80078b0:	2000020c 	.word	0x2000020c
 80078b4:	053e2d63 	.word	0x053e2d63

080078b8 <LL_ADC_IsEnabled>:
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <LL_ADC_IsEnabled+0x18>
 80078cc:	2301      	movs	r3, #1
 80078ce:	e000      	b.n	80078d2 <LL_ADC_IsEnabled+0x1a>
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <LL_ADC_REG_IsConversionOngoing>:
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d101      	bne.n	80078f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b0a1      	sub	sp, #132	@ 0x84
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800790e:	2300      	movs	r3, #0
 8007910:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800791a:	2b01      	cmp	r3, #1
 800791c:	d101      	bne.n	8007922 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800791e:	2302      	movs	r3, #2
 8007920:	e0e7      	b.n	8007af2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800792a:	2300      	movs	r3, #0
 800792c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800792e:	2300      	movs	r3, #0
 8007930:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800793a:	d102      	bne.n	8007942 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800793c:	4b6f      	ldr	r3, [pc, #444]	@ (8007afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	e009      	b.n	8007956 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a6e      	ldr	r2, [pc, #440]	@ (8007b00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d102      	bne.n	8007952 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800794c:	4b6d      	ldr	r3, [pc, #436]	@ (8007b04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800794e:	60bb      	str	r3, [r7, #8]
 8007950:	e001      	b.n	8007956 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10b      	bne.n	8007974 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007960:	f043 0220 	orr.w	r2, r3, #32
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e0be      	b.n	8007af2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	4618      	mov	r0, r3
 8007978:	f7ff ffb1 	bl	80078de <LL_ADC_REG_IsConversionOngoing>
 800797c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff ffab 	bl	80078de <LL_ADC_REG_IsConversionOngoing>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	f040 80a0 	bne.w	8007ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007992:	2b00      	cmp	r3, #0
 8007994:	f040 809c 	bne.w	8007ad0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079a0:	d004      	beq.n	80079ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a55      	ldr	r2, [pc, #340]	@ (8007afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d101      	bne.n	80079b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80079ac:	4b56      	ldr	r3, [pc, #344]	@ (8007b08 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80079ae:	e000      	b.n	80079b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80079b0:	4b56      	ldr	r3, [pc, #344]	@ (8007b0c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80079b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d04b      	beq.n	8007a54 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80079bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	6859      	ldr	r1, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079ce:	035b      	lsls	r3, r3, #13
 80079d0:	430b      	orrs	r3, r1
 80079d2:	431a      	orrs	r2, r3
 80079d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079e0:	d004      	beq.n	80079ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a45      	ldr	r2, [pc, #276]	@ (8007afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d10f      	bne.n	8007a0c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80079ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80079f0:	f7ff ff62 	bl	80078b8 <LL_ADC_IsEnabled>
 80079f4:	4604      	mov	r4, r0
 80079f6:	4841      	ldr	r0, [pc, #260]	@ (8007afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80079f8:	f7ff ff5e 	bl	80078b8 <LL_ADC_IsEnabled>
 80079fc:	4603      	mov	r3, r0
 80079fe:	4323      	orrs	r3, r4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf0c      	ite	eq
 8007a04:	2301      	moveq	r3, #1
 8007a06:	2300      	movne	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e012      	b.n	8007a32 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007a0c:	483c      	ldr	r0, [pc, #240]	@ (8007b00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007a0e:	f7ff ff53 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a12:	4604      	mov	r4, r0
 8007a14:	483b      	ldr	r0, [pc, #236]	@ (8007b04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007a16:	f7ff ff4f 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	431c      	orrs	r4, r3
 8007a1e:	483c      	ldr	r0, [pc, #240]	@ (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007a20:	f7ff ff4a 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a24:	4603      	mov	r3, r0
 8007a26:	4323      	orrs	r3, r4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf0c      	ite	eq
 8007a2c:	2301      	moveq	r3, #1
 8007a2e:	2300      	movne	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d056      	beq.n	8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007a3e:	f023 030f 	bic.w	r3, r3, #15
 8007a42:	683a      	ldr	r2, [r7, #0]
 8007a44:	6811      	ldr	r1, [r2, #0]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	6892      	ldr	r2, [r2, #8]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a50:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007a52:	e047      	b.n	8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007a54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007a5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a68:	d004      	beq.n	8007a74 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a23      	ldr	r2, [pc, #140]	@ (8007afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d10f      	bne.n	8007a94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007a74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007a78:	f7ff ff1e 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	481f      	ldr	r0, [pc, #124]	@ (8007afc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007a80:	f7ff ff1a 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a84:	4603      	mov	r3, r0
 8007a86:	4323      	orrs	r3, r4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bf0c      	ite	eq
 8007a8c:	2301      	moveq	r3, #1
 8007a8e:	2300      	movne	r3, #0
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	e012      	b.n	8007aba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007a94:	481a      	ldr	r0, [pc, #104]	@ (8007b00 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007a96:	f7ff ff0f 	bl	80078b8 <LL_ADC_IsEnabled>
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4819      	ldr	r0, [pc, #100]	@ (8007b04 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007a9e:	f7ff ff0b 	bl	80078b8 <LL_ADC_IsEnabled>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	431c      	orrs	r4, r3
 8007aa6:	481a      	ldr	r0, [pc, #104]	@ (8007b10 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007aa8:	f7ff ff06 	bl	80078b8 <LL_ADC_IsEnabled>
 8007aac:	4603      	mov	r3, r0
 8007aae:	4323      	orrs	r3, r4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2301      	moveq	r3, #1
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d012      	beq.n	8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007abe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007ac6:	f023 030f 	bic.w	r3, r3, #15
 8007aca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007acc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ace:	e009      	b.n	8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ad4:	f043 0220 	orr.w	r2, r3, #32
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007ae2:	e000      	b.n	8007ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007ae4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007aee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3784      	adds	r7, #132	@ 0x84
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd90      	pop	{r4, r7, pc}
 8007afa:	bf00      	nop
 8007afc:	50000100 	.word	0x50000100
 8007b00:	50000400 	.word	0x50000400
 8007b04:	50000500 	.word	0x50000500
 8007b08:	50000300 	.word	0x50000300
 8007b0c:	50000700 	.word	0x50000700
 8007b10:	50000600 	.word	0x50000600

08007b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b24:	4b0c      	ldr	r3, [pc, #48]	@ (8007b58 <__NVIC_SetPriorityGrouping+0x44>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b30:	4013      	ands	r3, r2
 8007b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b46:	4a04      	ldr	r2, [pc, #16]	@ (8007b58 <__NVIC_SetPriorityGrouping+0x44>)
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	60d3      	str	r3, [r2, #12]
}
 8007b4c:	bf00      	nop
 8007b4e:	3714      	adds	r7, #20
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr
 8007b58:	e000ed00 	.word	0xe000ed00

08007b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b60:	4b04      	ldr	r3, [pc, #16]	@ (8007b74 <__NVIC_GetPriorityGrouping+0x18>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	0a1b      	lsrs	r3, r3, #8
 8007b66:	f003 0307 	and.w	r3, r3, #7
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	e000ed00 	.word	0xe000ed00

08007b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	db0b      	blt.n	8007ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	f003 021f 	and.w	r2, r3, #31
 8007b90:	4907      	ldr	r1, [pc, #28]	@ (8007bb0 <__NVIC_EnableIRQ+0x38>)
 8007b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b96:	095b      	lsrs	r3, r3, #5
 8007b98:	2001      	movs	r0, #1
 8007b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007ba2:	bf00      	nop
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	e000e100 	.word	0xe000e100

08007bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	6039      	str	r1, [r7, #0]
 8007bbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	db0a      	blt.n	8007bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	b2da      	uxtb	r2, r3
 8007bcc:	490c      	ldr	r1, [pc, #48]	@ (8007c00 <__NVIC_SetPriority+0x4c>)
 8007bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd2:	0112      	lsls	r2, r2, #4
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	440b      	add	r3, r1
 8007bd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007bdc:	e00a      	b.n	8007bf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	4908      	ldr	r1, [pc, #32]	@ (8007c04 <__NVIC_SetPriority+0x50>)
 8007be4:	79fb      	ldrb	r3, [r7, #7]
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	3b04      	subs	r3, #4
 8007bec:	0112      	lsls	r2, r2, #4
 8007bee:	b2d2      	uxtb	r2, r2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	761a      	strb	r2, [r3, #24]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr
 8007c00:	e000e100 	.word	0xe000e100
 8007c04:	e000ed00 	.word	0xe000ed00

08007c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b089      	sub	sp, #36	@ 0x24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 0307 	and.w	r3, r3, #7
 8007c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f1c3 0307 	rsb	r3, r3, #7
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	bf28      	it	cs
 8007c26:	2304      	movcs	r3, #4
 8007c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	2b06      	cmp	r3, #6
 8007c30:	d902      	bls.n	8007c38 <NVIC_EncodePriority+0x30>
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	3b03      	subs	r3, #3
 8007c36:	e000      	b.n	8007c3a <NVIC_EncodePriority+0x32>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	43da      	mvns	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	401a      	ands	r2, r3
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c50:	f04f 31ff 	mov.w	r1, #4294967295
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5a:	43d9      	mvns	r1, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c60:	4313      	orrs	r3, r2
         );
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3724      	adds	r7, #36	@ 0x24
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c80:	d301      	bcc.n	8007c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c82:	2301      	movs	r3, #1
 8007c84:	e00f      	b.n	8007ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c86:	4a0a      	ldr	r2, [pc, #40]	@ (8007cb0 <SysTick_Config+0x40>)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c8e:	210f      	movs	r1, #15
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	f7ff ff8e 	bl	8007bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c98:	4b05      	ldr	r3, [pc, #20]	@ (8007cb0 <SysTick_Config+0x40>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c9e:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <SysTick_Config+0x40>)
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	e000e010 	.word	0xe000e010

08007cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff ff29 	bl	8007b14 <__NVIC_SetPriorityGrouping>
}
 8007cc2:	bf00      	nop
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b086      	sub	sp, #24
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
 8007cd6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007cd8:	f7ff ff40 	bl	8007b5c <__NVIC_GetPriorityGrouping>
 8007cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68b9      	ldr	r1, [r7, #8]
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f7ff ff90 	bl	8007c08 <NVIC_EncodePriority>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cee:	4611      	mov	r1, r2
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff ff5f 	bl	8007bb4 <__NVIC_SetPriority>
}
 8007cf6:	bf00      	nop
 8007cf8:	3718      	adds	r7, #24
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b082      	sub	sp, #8
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	4603      	mov	r3, r0
 8007d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff ff33 	bl	8007b78 <__NVIC_EnableIRQ>
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff ffa4 	bl	8007c70 <SysTick_Config>
 8007d28:	4603      	mov	r3, r0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
	...

08007d34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e08d      	b.n	8007e62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	4b47      	ldr	r3, [pc, #284]	@ (8007e6c <HAL_DMA_Init+0x138>)
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d80f      	bhi.n	8007d72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	461a      	mov	r2, r3
 8007d58:	4b45      	ldr	r3, [pc, #276]	@ (8007e70 <HAL_DMA_Init+0x13c>)
 8007d5a:	4413      	add	r3, r2
 8007d5c:	4a45      	ldr	r2, [pc, #276]	@ (8007e74 <HAL_DMA_Init+0x140>)
 8007d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d62:	091b      	lsrs	r3, r3, #4
 8007d64:	009a      	lsls	r2, r3, #2
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a42      	ldr	r2, [pc, #264]	@ (8007e78 <HAL_DMA_Init+0x144>)
 8007d6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007d70:	e00e      	b.n	8007d90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	4b40      	ldr	r3, [pc, #256]	@ (8007e7c <HAL_DMA_Init+0x148>)
 8007d7a:	4413      	add	r3, r2
 8007d7c:	4a3d      	ldr	r2, [pc, #244]	@ (8007e74 <HAL_DMA_Init+0x140>)
 8007d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	009a      	lsls	r2, r3, #2
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a3c      	ldr	r2, [pc, #240]	@ (8007e80 <HAL_DMA_Init+0x14c>)
 8007d8e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007daa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007db4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa82 	bl	80082ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007df0:	d102      	bne.n	8007df8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e00:	b2d2      	uxtb	r2, r2
 8007e02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007e0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d010      	beq.n	8007e38 <HAL_DMA_Init+0x104>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d80c      	bhi.n	8007e38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 faa2 	bl	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007e34:	605a      	str	r2, [r3, #4]
 8007e36:	e008      	b.n	8007e4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	40020407 	.word	0x40020407
 8007e70:	bffdfff8 	.word	0xbffdfff8
 8007e74:	cccccccd 	.word	0xcccccccd
 8007e78:	40020000 	.word	0x40020000
 8007e7c:	bffdfbf8 	.word	0xbffdfbf8
 8007e80:	40020400 	.word	0x40020400

08007e84 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_DMA_Start_IT+0x20>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e066      	b.n	8007f72 <HAL_DMA_Start_IT+0xee>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d155      	bne.n	8007f64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f022 0201 	bic.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	68b9      	ldr	r1, [r7, #8]
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f9c7 	bl	8008270 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f042 020e 	orr.w	r2, r2, #14
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	e00f      	b.n	8007f1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0204 	bic.w	r2, r2, #4
 8007f0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 020a 	orr.w	r2, r2, #10
 8007f1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d007      	beq.n	8007f3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f38:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d007      	beq.n	8007f52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0201 	orr.w	r2, r2, #1
 8007f60:	601a      	str	r2, [r3, #0]
 8007f62:	e005      	b.n	8007f70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b085      	sub	sp, #20
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d005      	beq.n	8007f9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2204      	movs	r2, #4
 8007f96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	e037      	b.n	800800e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 020e 	bic.w	r2, r2, #14
 8007fac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007fbc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 0201 	bic.w	r2, r2, #1
 8007fcc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fd2:	f003 021f 	and.w	r2, r3, #31
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fda:	2101      	movs	r1, #1
 8007fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8007fe0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007fea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008002:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800800c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800801e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008034:	2300      	movs	r3, #0
 8008036:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d00d      	beq.n	8008060 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2204      	movs	r2, #4
 8008048:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	73fb      	strb	r3, [r7, #15]
 800805e:	e047      	b.n	80080f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 020e 	bic.w	r2, r2, #14
 800806e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f022 0201 	bic.w	r2, r2, #1
 800807e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800808a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800808e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008094:	f003 021f 	and.w	r2, r3, #31
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800809c:	2101      	movs	r1, #1
 800809e:	fa01 f202 	lsl.w	r2, r1, r2
 80080a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80080ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00c      	beq.n	80080d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80080ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d003      	beq.n	80080f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
    }
  }
  return status;
 80080f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008116:	f003 031f 	and.w	r3, r3, #31
 800811a:	2204      	movs	r2, #4
 800811c:	409a      	lsls	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4013      	ands	r3, r2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d026      	beq.n	8008174 <HAL_DMA_IRQHandler+0x7a>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d021      	beq.n	8008174 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0320 	and.w	r3, r3, #32
 800813a:	2b00      	cmp	r3, #0
 800813c:	d107      	bne.n	800814e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0204 	bic.w	r2, r2, #4
 800814c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008152:	f003 021f 	and.w	r2, r3, #31
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815a:	2104      	movs	r1, #4
 800815c:	fa01 f202 	lsl.w	r2, r1, r2
 8008160:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008166:	2b00      	cmp	r3, #0
 8008168:	d071      	beq.n	800824e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008172:	e06c      	b.n	800824e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	2202      	movs	r2, #2
 800817e:	409a      	lsls	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4013      	ands	r3, r2
 8008184:	2b00      	cmp	r3, #0
 8008186:	d02e      	beq.n	80081e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b00      	cmp	r3, #0
 8008190:	d029      	beq.n	80081e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0320 	and.w	r3, r3, #32
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10b      	bne.n	80081b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 020a 	bic.w	r2, r2, #10
 80081ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081bc:	f003 021f 	and.w	r2, r3, #31
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c4:	2102      	movs	r1, #2
 80081c6:	fa01 f202 	lsl.w	r2, r1, r2
 80081ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d038      	beq.n	800824e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80081e4:	e033      	b.n	800824e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ea:	f003 031f 	and.w	r3, r3, #31
 80081ee:	2208      	movs	r2, #8
 80081f0:	409a      	lsls	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	4013      	ands	r3, r2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d02a      	beq.n	8008250 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	f003 0308 	and.w	r3, r3, #8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d025      	beq.n	8008250 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 020e 	bic.w	r2, r2, #14
 8008212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008218:	f003 021f 	and.w	r2, r3, #31
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008220:	2101      	movs	r1, #1
 8008222:	fa01 f202 	lsl.w	r2, r1, r2
 8008226:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008242:	2b00      	cmp	r3, #0
 8008244:	d004      	beq.n	8008250 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800824e:	bf00      	nop
 8008250:	bf00      	nop
}
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008286:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800828c:	2b00      	cmp	r3, #0
 800828e:	d004      	beq.n	800829a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008298:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829e:	f003 021f 	and.w	r2, r3, #31
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a6:	2101      	movs	r1, #1
 80082a8:	fa01 f202 	lsl.w	r2, r1, r2
 80082ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d108      	bne.n	80082d0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80082ce:	e007      	b.n	80082e0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	60da      	str	r2, [r3, #12]
}
 80082e0:	bf00      	nop
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b16      	ldr	r3, [pc, #88]	@ (8008354 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d802      	bhi.n	8008306 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008300:	4b15      	ldr	r3, [pc, #84]	@ (8008358 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008302:	617b      	str	r3, [r7, #20]
 8008304:	e001      	b.n	800830a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008306:	4b15      	ldr	r3, [pc, #84]	@ (800835c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008308:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	3b08      	subs	r3, #8
 8008316:	4a12      	ldr	r2, [pc, #72]	@ (8008360 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008318:	fba2 2303 	umull	r2, r3, r2, r3
 800831c:	091b      	lsrs	r3, r3, #4
 800831e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008324:	089b      	lsrs	r3, r3, #2
 8008326:	009a      	lsls	r2, r3, #2
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	4413      	add	r3, r2
 800832c:	461a      	mov	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a0b      	ldr	r2, [pc, #44]	@ (8008364 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008336:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f003 031f 	and.w	r3, r3, #31
 800833e:	2201      	movs	r2, #1
 8008340:	409a      	lsls	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008346:	bf00      	nop
 8008348:	371c      	adds	r7, #28
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40020407 	.word	0x40020407
 8008358:	40020800 	.word	0x40020800
 800835c:	40020820 	.word	0x40020820
 8008360:	cccccccd 	.word	0xcccccccd
 8008364:	40020880 	.word	0x40020880

08008368 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4b0b      	ldr	r3, [pc, #44]	@ (80083a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a08      	ldr	r2, [pc, #32]	@ (80083ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800838a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	3b01      	subs	r3, #1
 8008390:	f003 031f 	and.w	r3, r3, #31
 8008394:	2201      	movs	r2, #1
 8008396:	409a      	lsls	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	1000823f 	.word	0x1000823f
 80083ac:	40020940 	.word	0x40020940

080083b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80083be:	e15a      	b.n	8008676 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	2101      	movs	r1, #1
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	fa01 f303 	lsl.w	r3, r1, r3
 80083cc:	4013      	ands	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f000 814c 	beq.w	8008670 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d005      	beq.n	80083f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	d130      	bne.n	8008452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	2203      	movs	r2, #3
 80083fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008400:	43db      	mvns	r3, r3
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	4013      	ands	r3, r2
 8008406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	68da      	ldr	r2, [r3, #12]
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	4313      	orrs	r3, r2
 8008418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008426:	2201      	movs	r2, #1
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	43db      	mvns	r3, r3
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	4013      	ands	r3, r2
 8008434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	091b      	lsrs	r3, r3, #4
 800843c:	f003 0201 	and.w	r2, r3, #1
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	fa02 f303 	lsl.w	r3, r2, r3
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	4313      	orrs	r3, r2
 800844a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	2b03      	cmp	r3, #3
 800845c:	d017      	beq.n	800848e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	2203      	movs	r2, #3
 800846a:	fa02 f303 	lsl.w	r3, r2, r3
 800846e:	43db      	mvns	r3, r3
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	4013      	ands	r3, r2
 8008474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	689a      	ldr	r2, [r3, #8]
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	4313      	orrs	r3, r2
 8008486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b02      	cmp	r3, #2
 8008498:	d123      	bne.n	80084e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	08da      	lsrs	r2, r3, #3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	3208      	adds	r2, #8
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	220f      	movs	r2, #15
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	43db      	mvns	r3, r3
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4013      	ands	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f003 0307 	and.w	r3, r3, #7
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	fa02 f303 	lsl.w	r3, r2, r3
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	08da      	lsrs	r2, r3, #3
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3208      	adds	r2, #8
 80084dc:	6939      	ldr	r1, [r7, #16]
 80084de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	2203      	movs	r2, #3
 80084ee:	fa02 f303 	lsl.w	r3, r2, r3
 80084f2:	43db      	mvns	r3, r3
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4013      	ands	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	f003 0203 	and.w	r2, r3, #3
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	fa02 f303 	lsl.w	r3, r2, r3
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800851e:	2b00      	cmp	r3, #0
 8008520:	f000 80a6 	beq.w	8008670 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008524:	4b5b      	ldr	r3, [pc, #364]	@ (8008694 <HAL_GPIO_Init+0x2e4>)
 8008526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008528:	4a5a      	ldr	r2, [pc, #360]	@ (8008694 <HAL_GPIO_Init+0x2e4>)
 800852a:	f043 0301 	orr.w	r3, r3, #1
 800852e:	6613      	str	r3, [r2, #96]	@ 0x60
 8008530:	4b58      	ldr	r3, [pc, #352]	@ (8008694 <HAL_GPIO_Init+0x2e4>)
 8008532:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	60bb      	str	r3, [r7, #8]
 800853a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800853c:	4a56      	ldr	r2, [pc, #344]	@ (8008698 <HAL_GPIO_Init+0x2e8>)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	089b      	lsrs	r3, r3, #2
 8008542:	3302      	adds	r3, #2
 8008544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f003 0303 	and.w	r3, r3, #3
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	220f      	movs	r2, #15
 8008554:	fa02 f303 	lsl.w	r3, r2, r3
 8008558:	43db      	mvns	r3, r3
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4013      	ands	r3, r2
 800855e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008566:	d01f      	beq.n	80085a8 <HAL_GPIO_Init+0x1f8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a4c      	ldr	r2, [pc, #304]	@ (800869c <HAL_GPIO_Init+0x2ec>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d019      	beq.n	80085a4 <HAL_GPIO_Init+0x1f4>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a4b      	ldr	r2, [pc, #300]	@ (80086a0 <HAL_GPIO_Init+0x2f0>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d013      	beq.n	80085a0 <HAL_GPIO_Init+0x1f0>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a4a      	ldr	r2, [pc, #296]	@ (80086a4 <HAL_GPIO_Init+0x2f4>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00d      	beq.n	800859c <HAL_GPIO_Init+0x1ec>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a49      	ldr	r2, [pc, #292]	@ (80086a8 <HAL_GPIO_Init+0x2f8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d007      	beq.n	8008598 <HAL_GPIO_Init+0x1e8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a48      	ldr	r2, [pc, #288]	@ (80086ac <HAL_GPIO_Init+0x2fc>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d101      	bne.n	8008594 <HAL_GPIO_Init+0x1e4>
 8008590:	2305      	movs	r3, #5
 8008592:	e00a      	b.n	80085aa <HAL_GPIO_Init+0x1fa>
 8008594:	2306      	movs	r3, #6
 8008596:	e008      	b.n	80085aa <HAL_GPIO_Init+0x1fa>
 8008598:	2304      	movs	r3, #4
 800859a:	e006      	b.n	80085aa <HAL_GPIO_Init+0x1fa>
 800859c:	2303      	movs	r3, #3
 800859e:	e004      	b.n	80085aa <HAL_GPIO_Init+0x1fa>
 80085a0:	2302      	movs	r3, #2
 80085a2:	e002      	b.n	80085aa <HAL_GPIO_Init+0x1fa>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <HAL_GPIO_Init+0x1fa>
 80085a8:	2300      	movs	r3, #0
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	f002 0203 	and.w	r2, r2, #3
 80085b0:	0092      	lsls	r2, r2, #2
 80085b2:	4093      	lsls	r3, r2
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80085ba:	4937      	ldr	r1, [pc, #220]	@ (8008698 <HAL_GPIO_Init+0x2e8>)
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	089b      	lsrs	r3, r3, #2
 80085c0:	3302      	adds	r3, #2
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085c8:	4b39      	ldr	r3, [pc, #228]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	43db      	mvns	r3, r3
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4013      	ands	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80085ec:	4a30      	ldr	r2, [pc, #192]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80085f2:	4b2f      	ldr	r3, [pc, #188]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	43db      	mvns	r3, r3
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	4013      	ands	r3, r2
 8008600:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800860e:	693a      	ldr	r2, [r7, #16]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008616:	4a26      	ldr	r2, [pc, #152]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800861c:	4b24      	ldr	r3, [pc, #144]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	43db      	mvns	r3, r3
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4013      	ands	r3, r2
 800862a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008640:	4a1b      	ldr	r2, [pc, #108]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008646:	4b1a      	ldr	r3, [pc, #104]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	43db      	mvns	r3, r3
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	4013      	ands	r3, r2
 8008654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800866a:	4a11      	ldr	r2, [pc, #68]	@ (80086b0 <HAL_GPIO_Init+0x300>)
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	3301      	adds	r3, #1
 8008674:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	fa22 f303 	lsr.w	r3, r2, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	f47f ae9d 	bne.w	80083c0 <HAL_GPIO_Init+0x10>
  }
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	40021000 	.word	0x40021000
 8008698:	40010000 	.word	0x40010000
 800869c:	48000400 	.word	0x48000400
 80086a0:	48000800 	.word	0x48000800
 80086a4:	48000c00 	.word	0x48000c00
 80086a8:	48001000 	.word	0x48001000
 80086ac:	48001400 	.word	0x48001400
 80086b0:	40010400 	.word	0x40010400

080086b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	807b      	strh	r3, [r7, #2]
 80086c0:	4613      	mov	r3, r2
 80086c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80086c4:	787b      	ldrb	r3, [r7, #1]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80086ca:	887a      	ldrh	r2, [r7, #2]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80086d0:	e002      	b.n	80086d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80086d2:	887a      	ldrh	r2, [r7, #2]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80086ee:	4b08      	ldr	r3, [pc, #32]	@ (8008710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086f0:	695a      	ldr	r2, [r3, #20]
 80086f2:	88fb      	ldrh	r3, [r7, #6]
 80086f4:	4013      	ands	r3, r2
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d006      	beq.n	8008708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80086fa:	4a05      	ldr	r2, [pc, #20]	@ (8008710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80086fc:	88fb      	ldrh	r3, [r7, #6]
 80086fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008700:	88fb      	ldrh	r3, [r7, #6]
 8008702:	4618      	mov	r0, r3
 8008704:	f7fc fca6 	bl	8005054 <HAL_GPIO_EXTI_Callback>
  }
}
 8008708:	bf00      	nop
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	40010400 	.word	0x40010400

08008714 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d141      	bne.n	80087a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008722:	4b4b      	ldr	r3, [pc, #300]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872e:	d131      	bne.n	8008794 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008730:	4b47      	ldr	r3, [pc, #284]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008736:	4a46      	ldr	r2, [pc, #280]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008738:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800873c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008740:	4b43      	ldr	r3, [pc, #268]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008748:	4a41      	ldr	r2, [pc, #260]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800874a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800874e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008750:	4b40      	ldr	r3, [pc, #256]	@ (8008854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2232      	movs	r2, #50	@ 0x32
 8008756:	fb02 f303 	mul.w	r3, r2, r3
 800875a:	4a3f      	ldr	r2, [pc, #252]	@ (8008858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800875c:	fba2 2303 	umull	r2, r3, r2, r3
 8008760:	0c9b      	lsrs	r3, r3, #18
 8008762:	3301      	adds	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008766:	e002      	b.n	800876e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	3b01      	subs	r3, #1
 800876c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800876e:	4b38      	ldr	r3, [pc, #224]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800877a:	d102      	bne.n	8008782 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f2      	bne.n	8008768 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008782:	4b33      	ldr	r3, [pc, #204]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800878a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800878e:	d158      	bne.n	8008842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e057      	b.n	8008844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008794:	4b2e      	ldr	r3, [pc, #184]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800879a:	4a2d      	ldr	r2, [pc, #180]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800879c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80087a4:	e04d      	b.n	8008842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087ac:	d141      	bne.n	8008832 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087ae:	4b28      	ldr	r3, [pc, #160]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087ba:	d131      	bne.n	8008820 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087bc:	4b24      	ldr	r3, [pc, #144]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087c2:	4a23      	ldr	r2, [pc, #140]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087cc:	4b20      	ldr	r3, [pc, #128]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087d4:	4a1e      	ldr	r2, [pc, #120]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008854 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2232      	movs	r2, #50	@ 0x32
 80087e2:	fb02 f303 	mul.w	r3, r2, r3
 80087e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008858 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087e8:	fba2 2303 	umull	r2, r3, r2, r3
 80087ec:	0c9b      	lsrs	r3, r3, #18
 80087ee:	3301      	adds	r3, #1
 80087f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087f2:	e002      	b.n	80087fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087fa:	4b15      	ldr	r3, [pc, #84]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008806:	d102      	bne.n	800880e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1f2      	bne.n	80087f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800880e:	4b10      	ldr	r3, [pc, #64]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008816:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800881a:	d112      	bne.n	8008842 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e011      	b.n	8008844 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008820:	4b0b      	ldr	r3, [pc, #44]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008822:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008826:	4a0a      	ldr	r2, [pc, #40]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800882c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008830:	e007      	b.n	8008842 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008832:	4b07      	ldr	r3, [pc, #28]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800883a:	4a05      	ldr	r2, [pc, #20]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800883c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008840:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr
 8008850:	40007000 	.word	0x40007000
 8008854:	2000020c 	.word	0x2000020c
 8008858:	431bde83 	.word	0x431bde83

0800885c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008860:	4b05      	ldr	r3, [pc, #20]	@ (8008878 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	4a04      	ldr	r2, [pc, #16]	@ (8008878 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800886a:	6093      	str	r3, [r2, #8]
}
 800886c:	bf00      	nop
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	40007000 	.word	0x40007000

0800887c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e2fe      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b00      	cmp	r3, #0
 8008898:	d075      	beq.n	8008986 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800889a:	4b97      	ldr	r3, [pc, #604]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	f003 030c 	and.w	r3, r3, #12
 80088a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088a4:	4b94      	ldr	r3, [pc, #592]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0303 	and.w	r3, r3, #3
 80088ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b0c      	cmp	r3, #12
 80088b2:	d102      	bne.n	80088ba <HAL_RCC_OscConfig+0x3e>
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	2b03      	cmp	r3, #3
 80088b8:	d002      	beq.n	80088c0 <HAL_RCC_OscConfig+0x44>
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d10b      	bne.n	80088d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088c0:	4b8d      	ldr	r3, [pc, #564]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d05b      	beq.n	8008984 <HAL_RCC_OscConfig+0x108>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d157      	bne.n	8008984 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e2d9      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088e0:	d106      	bne.n	80088f0 <HAL_RCC_OscConfig+0x74>
 80088e2:	4b85      	ldr	r3, [pc, #532]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a84      	ldr	r2, [pc, #528]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80088e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	e01d      	b.n	800892c <HAL_RCC_OscConfig+0xb0>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088f8:	d10c      	bne.n	8008914 <HAL_RCC_OscConfig+0x98>
 80088fa:	4b7f      	ldr	r3, [pc, #508]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a7e      	ldr	r2, [pc, #504]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	4b7c      	ldr	r3, [pc, #496]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a7b      	ldr	r2, [pc, #492]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 800890c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	e00b      	b.n	800892c <HAL_RCC_OscConfig+0xb0>
 8008914:	4b78      	ldr	r3, [pc, #480]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a77      	ldr	r2, [pc, #476]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 800891a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	4b75      	ldr	r3, [pc, #468]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a74      	ldr	r2, [pc, #464]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800892a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d013      	beq.n	800895c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008934:	f7fd fe24 	bl	8006580 <HAL_GetTick>
 8008938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800893a:	e008      	b.n	800894e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800893c:	f7fd fe20 	bl	8006580 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	2b64      	cmp	r3, #100	@ 0x64
 8008948:	d901      	bls.n	800894e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e29e      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800894e:	4b6a      	ldr	r3, [pc, #424]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0f0      	beq.n	800893c <HAL_RCC_OscConfig+0xc0>
 800895a:	e014      	b.n	8008986 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895c:	f7fd fe10 	bl	8006580 <HAL_GetTick>
 8008960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008964:	f7fd fe0c 	bl	8006580 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b64      	cmp	r3, #100	@ 0x64
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e28a      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008976:	4b60      	ldr	r3, [pc, #384]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f0      	bne.n	8008964 <HAL_RCC_OscConfig+0xe8>
 8008982:	e000      	b.n	8008986 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0302 	and.w	r3, r3, #2
 800898e:	2b00      	cmp	r3, #0
 8008990:	d075      	beq.n	8008a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008992:	4b59      	ldr	r3, [pc, #356]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f003 030c 	and.w	r3, r3, #12
 800899a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800899c:	4b56      	ldr	r3, [pc, #344]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f003 0303 	and.w	r3, r3, #3
 80089a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80089a6:	69bb      	ldr	r3, [r7, #24]
 80089a8:	2b0c      	cmp	r3, #12
 80089aa:	d102      	bne.n	80089b2 <HAL_RCC_OscConfig+0x136>
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d002      	beq.n	80089b8 <HAL_RCC_OscConfig+0x13c>
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d11f      	bne.n	80089f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089b8:	4b4f      	ldr	r3, [pc, #316]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <HAL_RCC_OscConfig+0x154>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e25d      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089d0:	4b49      	ldr	r3, [pc, #292]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	691b      	ldr	r3, [r3, #16]
 80089dc:	061b      	lsls	r3, r3, #24
 80089de:	4946      	ldr	r1, [pc, #280]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089e4:	4b45      	ldr	r3, [pc, #276]	@ (8008afc <HAL_RCC_OscConfig+0x280>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fd fd7d 	bl	80064e8 <HAL_InitTick>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d043      	beq.n	8008a7c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e249      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d023      	beq.n	8008a48 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a00:	4b3d      	ldr	r3, [pc, #244]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a3c      	ldr	r2, [pc, #240]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0c:	f7fd fdb8 	bl	8006580 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a14:	f7fd fdb4 	bl	8006580 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e232      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a26:	4b34      	ldr	r3, [pc, #208]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d0f0      	beq.n	8008a14 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a32:	4b31      	ldr	r3, [pc, #196]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	061b      	lsls	r3, r3, #24
 8008a40:	492d      	ldr	r1, [pc, #180]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	604b      	str	r3, [r1, #4]
 8008a46:	e01a      	b.n	8008a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a48:	4b2b      	ldr	r3, [pc, #172]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a54:	f7fd fd94 	bl	8006580 <HAL_GetTick>
 8008a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a5a:	e008      	b.n	8008a6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a5c:	f7fd fd90 	bl	8006580 <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e20e      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a6e:	4b22      	ldr	r3, [pc, #136]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1f0      	bne.n	8008a5c <HAL_RCC_OscConfig+0x1e0>
 8008a7a:	e000      	b.n	8008a7e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0308 	and.w	r3, r3, #8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d041      	beq.n	8008b0e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d01c      	beq.n	8008acc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a92:	4b19      	ldr	r3, [pc, #100]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a98:	4a17      	ldr	r2, [pc, #92]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008a9a:	f043 0301 	orr.w	r3, r3, #1
 8008a9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aa2:	f7fd fd6d 	bl	8006580 <HAL_GetTick>
 8008aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008aa8:	e008      	b.n	8008abc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aaa:	f7fd fd69 	bl	8006580 <HAL_GetTick>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	1ad3      	subs	r3, r2, r3
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d901      	bls.n	8008abc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e1e7      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008abc:	4b0e      	ldr	r3, [pc, #56]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0ef      	beq.n	8008aaa <HAL_RCC_OscConfig+0x22e>
 8008aca:	e020      	b.n	8008b0e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008acc:	4b0a      	ldr	r3, [pc, #40]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ad2:	4a09      	ldr	r2, [pc, #36]	@ (8008af8 <HAL_RCC_OscConfig+0x27c>)
 8008ad4:	f023 0301 	bic.w	r3, r3, #1
 8008ad8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008adc:	f7fd fd50 	bl	8006580 <HAL_GetTick>
 8008ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ae2:	e00d      	b.n	8008b00 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ae4:	f7fd fd4c 	bl	8006580 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d906      	bls.n	8008b00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e1ca      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
 8008af6:	bf00      	nop
 8008af8:	40021000 	.word	0x40021000
 8008afc:	20000210 	.word	0x20000210
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008b00:	4b8c      	ldr	r3, [pc, #560]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1ea      	bne.n	8008ae4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80a6 	beq.w	8008c68 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b20:	4b84      	ldr	r3, [pc, #528]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <HAL_RCC_OscConfig+0x2b4>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e000      	b.n	8008b32 <HAL_RCC_OscConfig+0x2b6>
 8008b30:	2300      	movs	r3, #0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00d      	beq.n	8008b52 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b36:	4b7f      	ldr	r3, [pc, #508]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b42:	4b7c      	ldr	r3, [pc, #496]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b52:	4b79      	ldr	r3, [pc, #484]	@ (8008d38 <HAL_RCC_OscConfig+0x4bc>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d118      	bne.n	8008b90 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b5e:	4b76      	ldr	r3, [pc, #472]	@ (8008d38 <HAL_RCC_OscConfig+0x4bc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a75      	ldr	r2, [pc, #468]	@ (8008d38 <HAL_RCC_OscConfig+0x4bc>)
 8008b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b6a:	f7fd fd09 	bl	8006580 <HAL_GetTick>
 8008b6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b70:	e008      	b.n	8008b84 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b72:	f7fd fd05 	bl	8006580 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d901      	bls.n	8008b84 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e183      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b84:	4b6c      	ldr	r3, [pc, #432]	@ (8008d38 <HAL_RCC_OscConfig+0x4bc>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0f0      	beq.n	8008b72 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d108      	bne.n	8008baa <HAL_RCC_OscConfig+0x32e>
 8008b98:	4b66      	ldr	r3, [pc, #408]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b9e:	4a65      	ldr	r2, [pc, #404]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ba8:	e024      	b.n	8008bf4 <HAL_RCC_OscConfig+0x378>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	2b05      	cmp	r3, #5
 8008bb0:	d110      	bne.n	8008bd4 <HAL_RCC_OscConfig+0x358>
 8008bb2:	4b60      	ldr	r3, [pc, #384]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb8:	4a5e      	ldr	r2, [pc, #376]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008bba:	f043 0304 	orr.w	r3, r3, #4
 8008bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008bca:	f043 0301 	orr.w	r3, r3, #1
 8008bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bd2:	e00f      	b.n	8008bf4 <HAL_RCC_OscConfig+0x378>
 8008bd4:	4b57      	ldr	r3, [pc, #348]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bda:	4a56      	ldr	r2, [pc, #344]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008bdc:	f023 0301 	bic.w	r3, r3, #1
 8008be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008be4:	4b53      	ldr	r3, [pc, #332]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bea:	4a52      	ldr	r2, [pc, #328]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008bec:	f023 0304 	bic.w	r3, r3, #4
 8008bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d016      	beq.n	8008c2a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bfc:	f7fd fcc0 	bl	8006580 <HAL_GetTick>
 8008c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c02:	e00a      	b.n	8008c1a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c04:	f7fd fcbc 	bl	8006580 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d901      	bls.n	8008c1a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e138      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c1a:	4b46      	ldr	r3, [pc, #280]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0ed      	beq.n	8008c04 <HAL_RCC_OscConfig+0x388>
 8008c28:	e015      	b.n	8008c56 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2a:	f7fd fca9 	bl	8006580 <HAL_GetTick>
 8008c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c30:	e00a      	b.n	8008c48 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c32:	f7fd fca5 	bl	8006580 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e121      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c48:	4b3a      	ldr	r3, [pc, #232]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1ed      	bne.n	8008c32 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c56:	7ffb      	ldrb	r3, [r7, #31]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d105      	bne.n	8008c68 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c5c:	4b35      	ldr	r3, [pc, #212]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c60:	4a34      	ldr	r2, [pc, #208]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c66:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d03c      	beq.n	8008cee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01c      	beq.n	8008cb6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c82:	4a2c      	ldr	r2, [pc, #176]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8c:	f7fd fc78 	bl	8006580 <HAL_GetTick>
 8008c90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c92:	e008      	b.n	8008ca6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c94:	f7fd fc74 	bl	8006580 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d901      	bls.n	8008ca6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e0f2      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ca6:	4b23      	ldr	r3, [pc, #140]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0ef      	beq.n	8008c94 <HAL_RCC_OscConfig+0x418>
 8008cb4:	e01b      	b.n	8008cee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008cbe:	f023 0301 	bic.w	r3, r3, #1
 8008cc2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc6:	f7fd fc5b 	bl	8006580 <HAL_GetTick>
 8008cca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ccc:	e008      	b.n	8008ce0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cce:	f7fd fc57 	bl	8006580 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d901      	bls.n	8008ce0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e0d5      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ce0:	4b14      	ldr	r3, [pc, #80]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1ef      	bne.n	8008cce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80c9 	beq.w	8008e8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 030c 	and.w	r3, r3, #12
 8008d00:	2b0c      	cmp	r3, #12
 8008d02:	f000 8083 	beq.w	8008e0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d15e      	bne.n	8008dcc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d0e:	4b09      	ldr	r3, [pc, #36]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a08      	ldr	r2, [pc, #32]	@ (8008d34 <HAL_RCC_OscConfig+0x4b8>)
 8008d14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d1a:	f7fd fc31 	bl	8006580 <HAL_GetTick>
 8008d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d20:	e00c      	b.n	8008d3c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d22:	f7fd fc2d 	bl	8006580 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d905      	bls.n	8008d3c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008d30:	2303      	movs	r3, #3
 8008d32:	e0ab      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
 8008d34:	40021000 	.word	0x40021000
 8008d38:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d3c:	4b55      	ldr	r3, [pc, #340]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1ec      	bne.n	8008d22 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d48:	4b52      	ldr	r3, [pc, #328]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008d4a:	68da      	ldr	r2, [r3, #12]
 8008d4c:	4b52      	ldr	r3, [pc, #328]	@ (8008e98 <HAL_RCC_OscConfig+0x61c>)
 8008d4e:	4013      	ands	r3, r2
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	6a11      	ldr	r1, [r2, #32]
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d58:	3a01      	subs	r2, #1
 8008d5a:	0112      	lsls	r2, r2, #4
 8008d5c:	4311      	orrs	r1, r2
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008d62:	0212      	lsls	r2, r2, #8
 8008d64:	4311      	orrs	r1, r2
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d6a:	0852      	lsrs	r2, r2, #1
 8008d6c:	3a01      	subs	r2, #1
 8008d6e:	0552      	lsls	r2, r2, #21
 8008d70:	4311      	orrs	r1, r2
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d76:	0852      	lsrs	r2, r2, #1
 8008d78:	3a01      	subs	r2, #1
 8008d7a:	0652      	lsls	r2, r2, #25
 8008d7c:	4311      	orrs	r1, r2
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008d82:	06d2      	lsls	r2, r2, #27
 8008d84:	430a      	orrs	r2, r1
 8008d86:	4943      	ldr	r1, [pc, #268]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d8c:	4b41      	ldr	r3, [pc, #260]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a40      	ldr	r2, [pc, #256]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d96:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d98:	4b3e      	ldr	r3, [pc, #248]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008d9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008da2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da4:	f7fd fbec 	bl	8006580 <HAL_GetTick>
 8008da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dac:	f7fd fbe8 	bl	8006580 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e066      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dbe:	4b35      	ldr	r3, [pc, #212]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0f0      	beq.n	8008dac <HAL_RCC_OscConfig+0x530>
 8008dca:	e05e      	b.n	8008e8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dcc:	4b31      	ldr	r3, [pc, #196]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a30      	ldr	r2, [pc, #192]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd8:	f7fd fbd2 	bl	8006580 <HAL_GetTick>
 8008ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dde:	e008      	b.n	8008df2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008de0:	f7fd fbce 	bl	8006580 <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e04c      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008df2:	4b28      	ldr	r3, [pc, #160]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1f0      	bne.n	8008de0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008dfe:	4b25      	ldr	r3, [pc, #148]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	4924      	ldr	r1, [pc, #144]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008e04:	4b25      	ldr	r3, [pc, #148]	@ (8008e9c <HAL_RCC_OscConfig+0x620>)
 8008e06:	4013      	ands	r3, r2
 8008e08:	60cb      	str	r3, [r1, #12]
 8008e0a:	e03e      	b.n	8008e8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e039      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e18:	4b1e      	ldr	r3, [pc, #120]	@ (8008e94 <HAL_RCC_OscConfig+0x618>)
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	f003 0203 	and.w	r2, r3, #3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a1b      	ldr	r3, [r3, #32]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d12c      	bne.n	8008e86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e36:	3b01      	subs	r3, #1
 8008e38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d123      	bne.n	8008e86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d11b      	bne.n	8008e86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d113      	bne.n	8008e86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e68:	085b      	lsrs	r3, r3, #1
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d109      	bne.n	8008e86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e7c:	085b      	lsrs	r3, r3, #1
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d001      	beq.n	8008e8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e000      	b.n	8008e8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	40021000 	.word	0x40021000
 8008e98:	019f800c 	.word	0x019f800c
 8008e9c:	feeefffc 	.word	0xfeeefffc

08008ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d101      	bne.n	8008eb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e11e      	b.n	80090f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008eb8:	4b91      	ldr	r3, [pc, #580]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 030f 	and.w	r3, r3, #15
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d910      	bls.n	8008ee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec6:	4b8e      	ldr	r3, [pc, #568]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f023 020f 	bic.w	r2, r3, #15
 8008ece:	498c      	ldr	r1, [pc, #560]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ed6:	4b8a      	ldr	r3, [pc, #552]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d001      	beq.n	8008ee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e106      	b.n	80090f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d073      	beq.n	8008fdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	2b03      	cmp	r3, #3
 8008efa:	d129      	bne.n	8008f50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008efc:	4b81      	ldr	r3, [pc, #516]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e0f4      	b.n	80090f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008f0c:	f000 f99e 	bl	800924c <RCC_GetSysClockFreqFromPLLSource>
 8008f10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4a7c      	ldr	r2, [pc, #496]	@ (8009108 <HAL_RCC_ClockConfig+0x268>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d93f      	bls.n	8008f9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d009      	beq.n	8008f3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d033      	beq.n	8008f9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d12f      	bne.n	8008f9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f3a:	4b72      	ldr	r3, [pc, #456]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f42:	4a70      	ldr	r2, [pc, #448]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f4a:	2380      	movs	r3, #128	@ 0x80
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e024      	b.n	8008f9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d107      	bne.n	8008f68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f58:	4b6a      	ldr	r3, [pc, #424]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	e0c6      	b.n	80090f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f68:	4b66      	ldr	r3, [pc, #408]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e0be      	b.n	80090f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f78:	f000 f8ce 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 8008f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	4a61      	ldr	r2, [pc, #388]	@ (8009108 <HAL_RCC_ClockConfig+0x268>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d909      	bls.n	8008f9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f86:	4b5f      	ldr	r3, [pc, #380]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f8e:	4a5d      	ldr	r2, [pc, #372]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008f96:	2380      	movs	r3, #128	@ 0x80
 8008f98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	f023 0203 	bic.w	r2, r3, #3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	4957      	ldr	r1, [pc, #348]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fac:	f7fd fae8 	bl	8006580 <HAL_GetTick>
 8008fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fb2:	e00a      	b.n	8008fca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fb4:	f7fd fae4 	bl	8006580 <HAL_GetTick>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e095      	b.n	80090f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fca:	4b4e      	ldr	r3, [pc, #312]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f003 020c 	and.w	r2, r3, #12
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d1eb      	bne.n	8008fb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d023      	beq.n	8009030 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ff4:	4b43      	ldr	r3, [pc, #268]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	4a42      	ldr	r2, [pc, #264]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8008ffa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008ffe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0308 	and.w	r3, r3, #8
 8009008:	2b00      	cmp	r3, #0
 800900a:	d007      	beq.n	800901c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800900c:	4b3d      	ldr	r3, [pc, #244]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009014:	4a3b      	ldr	r2, [pc, #236]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8009016:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800901a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800901c:	4b39      	ldr	r3, [pc, #228]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	4936      	ldr	r1, [pc, #216]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 800902a:	4313      	orrs	r3, r2
 800902c:	608b      	str	r3, [r1, #8]
 800902e:	e008      	b.n	8009042 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2b80      	cmp	r3, #128	@ 0x80
 8009034:	d105      	bne.n	8009042 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009036:	4b33      	ldr	r3, [pc, #204]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	4a32      	ldr	r2, [pc, #200]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 800903c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009040:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009042:	4b2f      	ldr	r3, [pc, #188]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	429a      	cmp	r2, r3
 800904e:	d21d      	bcs.n	800908c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009050:	4b2b      	ldr	r3, [pc, #172]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f023 020f 	bic.w	r2, r3, #15
 8009058:	4929      	ldr	r1, [pc, #164]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	4313      	orrs	r3, r2
 800905e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009060:	f7fd fa8e 	bl	8006580 <HAL_GetTick>
 8009064:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009066:	e00a      	b.n	800907e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009068:	f7fd fa8a 	bl	8006580 <HAL_GetTick>
 800906c:	4602      	mov	r2, r0
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	1ad3      	subs	r3, r2, r3
 8009072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009076:	4293      	cmp	r3, r2
 8009078:	d901      	bls.n	800907e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e03b      	b.n	80090f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800907e:	4b20      	ldr	r3, [pc, #128]	@ (8009100 <HAL_RCC_ClockConfig+0x260>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	429a      	cmp	r2, r3
 800908a:	d1ed      	bne.n	8009068 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0304 	and.w	r3, r3, #4
 8009094:	2b00      	cmp	r3, #0
 8009096:	d008      	beq.n	80090aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009098:	4b1a      	ldr	r3, [pc, #104]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	4917      	ldr	r1, [pc, #92]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0308 	and.w	r3, r3, #8
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090b6:	4b13      	ldr	r3, [pc, #76]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	490f      	ldr	r1, [pc, #60]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090ca:	f000 f825 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 80090ce:	4602      	mov	r2, r0
 80090d0:	4b0c      	ldr	r3, [pc, #48]	@ (8009104 <HAL_RCC_ClockConfig+0x264>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	091b      	lsrs	r3, r3, #4
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	490c      	ldr	r1, [pc, #48]	@ (800910c <HAL_RCC_ClockConfig+0x26c>)
 80090dc:	5ccb      	ldrb	r3, [r1, r3]
 80090de:	f003 031f 	and.w	r3, r3, #31
 80090e2:	fa22 f303 	lsr.w	r3, r2, r3
 80090e6:	4a0a      	ldr	r2, [pc, #40]	@ (8009110 <HAL_RCC_ClockConfig+0x270>)
 80090e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80090ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009114 <HAL_RCC_ClockConfig+0x274>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7fd f9fa 	bl	80064e8 <HAL_InitTick>
 80090f4:	4603      	mov	r3, r0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40022000 	.word	0x40022000
 8009104:	40021000 	.word	0x40021000
 8009108:	04c4b400 	.word	0x04c4b400
 800910c:	08011390 	.word	0x08011390
 8009110:	2000020c 	.word	0x2000020c
 8009114:	20000210 	.word	0x20000210

08009118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800911e:	4b2c      	ldr	r3, [pc, #176]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 030c 	and.w	r3, r3, #12
 8009126:	2b04      	cmp	r3, #4
 8009128:	d102      	bne.n	8009130 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800912a:	4b2a      	ldr	r3, [pc, #168]	@ (80091d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800912c:	613b      	str	r3, [r7, #16]
 800912e:	e047      	b.n	80091c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009130:	4b27      	ldr	r3, [pc, #156]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f003 030c 	and.w	r3, r3, #12
 8009138:	2b08      	cmp	r3, #8
 800913a:	d102      	bne.n	8009142 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800913c:	4b26      	ldr	r3, [pc, #152]	@ (80091d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	e03e      	b.n	80091c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009142:	4b23      	ldr	r3, [pc, #140]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f003 030c 	and.w	r3, r3, #12
 800914a:	2b0c      	cmp	r3, #12
 800914c:	d136      	bne.n	80091bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800914e:	4b20      	ldr	r3, [pc, #128]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009158:	4b1d      	ldr	r3, [pc, #116]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	091b      	lsrs	r3, r3, #4
 800915e:	f003 030f 	and.w	r3, r3, #15
 8009162:	3301      	adds	r3, #1
 8009164:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2b03      	cmp	r3, #3
 800916a:	d10c      	bne.n	8009186 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800916c:	4a1a      	ldr	r2, [pc, #104]	@ (80091d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	fbb2 f3f3 	udiv	r3, r2, r3
 8009174:	4a16      	ldr	r2, [pc, #88]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009176:	68d2      	ldr	r2, [r2, #12]
 8009178:	0a12      	lsrs	r2, r2, #8
 800917a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800917e:	fb02 f303 	mul.w	r3, r2, r3
 8009182:	617b      	str	r3, [r7, #20]
      break;
 8009184:	e00c      	b.n	80091a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009186:	4a13      	ldr	r2, [pc, #76]	@ (80091d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	fbb2 f3f3 	udiv	r3, r2, r3
 800918e:	4a10      	ldr	r2, [pc, #64]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009190:	68d2      	ldr	r2, [r2, #12]
 8009192:	0a12      	lsrs	r2, r2, #8
 8009194:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009198:	fb02 f303 	mul.w	r3, r2, r3
 800919c:	617b      	str	r3, [r7, #20]
      break;
 800919e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091a0:	4b0b      	ldr	r3, [pc, #44]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	0e5b      	lsrs	r3, r3, #25
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	3301      	adds	r3, #1
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b8:	613b      	str	r3, [r7, #16]
 80091ba:	e001      	b.n	80091c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80091bc:	2300      	movs	r3, #0
 80091be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80091c0:	693b      	ldr	r3, [r7, #16]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	40021000 	.word	0x40021000
 80091d4:	00f42400 	.word	0x00f42400
 80091d8:	016e3600 	.word	0x016e3600

080091dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091e0:	4b03      	ldr	r3, [pc, #12]	@ (80091f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80091e2:	681b      	ldr	r3, [r3, #0]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	2000020c 	.word	0x2000020c

080091f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80091f8:	f7ff fff0 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 80091fc:	4602      	mov	r2, r0
 80091fe:	4b06      	ldr	r3, [pc, #24]	@ (8009218 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	0a1b      	lsrs	r3, r3, #8
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	4904      	ldr	r1, [pc, #16]	@ (800921c <HAL_RCC_GetPCLK1Freq+0x28>)
 800920a:	5ccb      	ldrb	r3, [r1, r3]
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009214:	4618      	mov	r0, r3
 8009216:	bd80      	pop	{r7, pc}
 8009218:	40021000 	.word	0x40021000
 800921c:	080113a0 	.word	0x080113a0

08009220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009224:	f7ff ffda 	bl	80091dc <HAL_RCC_GetHCLKFreq>
 8009228:	4602      	mov	r2, r0
 800922a:	4b06      	ldr	r3, [pc, #24]	@ (8009244 <HAL_RCC_GetPCLK2Freq+0x24>)
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	0adb      	lsrs	r3, r3, #11
 8009230:	f003 0307 	and.w	r3, r3, #7
 8009234:	4904      	ldr	r1, [pc, #16]	@ (8009248 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009236:	5ccb      	ldrb	r3, [r1, r3]
 8009238:	f003 031f 	and.w	r3, r3, #31
 800923c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009240:	4618      	mov	r0, r3
 8009242:	bd80      	pop	{r7, pc}
 8009244:	40021000 	.word	0x40021000
 8009248:	080113a0 	.word	0x080113a0

0800924c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009252:	4b1e      	ldr	r3, [pc, #120]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800925c:	4b1b      	ldr	r3, [pc, #108]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	091b      	lsrs	r3, r3, #4
 8009262:	f003 030f 	and.w	r3, r3, #15
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	2b03      	cmp	r3, #3
 800926e:	d10c      	bne.n	800928a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009270:	4a17      	ldr	r2, [pc, #92]	@ (80092d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	fbb2 f3f3 	udiv	r3, r2, r3
 8009278:	4a14      	ldr	r2, [pc, #80]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800927a:	68d2      	ldr	r2, [r2, #12]
 800927c:	0a12      	lsrs	r2, r2, #8
 800927e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009282:	fb02 f303 	mul.w	r3, r2, r3
 8009286:	617b      	str	r3, [r7, #20]
    break;
 8009288:	e00c      	b.n	80092a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800928a:	4a12      	ldr	r2, [pc, #72]	@ (80092d4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009292:	4a0e      	ldr	r2, [pc, #56]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009294:	68d2      	ldr	r2, [r2, #12]
 8009296:	0a12      	lsrs	r2, r2, #8
 8009298:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800929c:	fb02 f303 	mul.w	r3, r2, r3
 80092a0:	617b      	str	r3, [r7, #20]
    break;
 80092a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80092a4:	4b09      	ldr	r3, [pc, #36]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	0e5b      	lsrs	r3, r3, #25
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	3301      	adds	r3, #1
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80092bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80092be:	687b      	ldr	r3, [r7, #4]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	40021000 	.word	0x40021000
 80092d0:	016e3600 	.word	0x016e3600
 80092d4:	00f42400 	.word	0x00f42400

080092d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092e0:	2300      	movs	r3, #0
 80092e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092e4:	2300      	movs	r3, #0
 80092e6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	f000 8098 	beq.w	8009426 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092f6:	2300      	movs	r3, #0
 80092f8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092fa:	4b43      	ldr	r3, [pc, #268]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10d      	bne.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009306:	4b40      	ldr	r3, [pc, #256]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800930a:	4a3f      	ldr	r2, [pc, #252]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800930c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009310:	6593      	str	r3, [r2, #88]	@ 0x58
 8009312:	4b3d      	ldr	r3, [pc, #244]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800931e:	2301      	movs	r3, #1
 8009320:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009322:	4b3a      	ldr	r3, [pc, #232]	@ (800940c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a39      	ldr	r2, [pc, #228]	@ (800940c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800932c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800932e:	f7fd f927 	bl	8006580 <HAL_GetTick>
 8009332:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009334:	e009      	b.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009336:	f7fd f923 	bl	8006580 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	2b02      	cmp	r3, #2
 8009342:	d902      	bls.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	74fb      	strb	r3, [r7, #19]
        break;
 8009348:	e005      	b.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800934a:	4b30      	ldr	r3, [pc, #192]	@ (800940c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0ef      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009356:	7cfb      	ldrb	r3, [r7, #19]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d159      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800935c:	4b2a      	ldr	r3, [pc, #168]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800935e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009366:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01e      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	429a      	cmp	r2, r3
 8009376:	d019      	beq.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009378:	4b23      	ldr	r3, [pc, #140]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800937a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009382:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009384:	4b20      	ldr	r3, [pc, #128]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938a:	4a1f      	ldr	r2, [pc, #124]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800938c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009394:	4b1c      	ldr	r3, [pc, #112]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939a:	4a1b      	ldr	r2, [pc, #108]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800939c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093a4:	4a18      	ldr	r2, [pc, #96]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d016      	beq.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b6:	f7fd f8e3 	bl	8006580 <HAL_GetTick>
 80093ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093bc:	e00b      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093be:	f7fd f8df 	bl	8006580 <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d902      	bls.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	74fb      	strb	r3, [r7, #19]
            break;
 80093d4:	e006      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0ec      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80093e4:	7cfb      	ldrb	r3, [r7, #19]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10b      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093ea:	4b07      	ldr	r3, [pc, #28]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f8:	4903      	ldr	r1, [pc, #12]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009400:	e008      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009402:	7cfb      	ldrb	r3, [r7, #19]
 8009404:	74bb      	strb	r3, [r7, #18]
 8009406:	e005      	b.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009408:	40021000 	.word	0x40021000
 800940c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009410:	7cfb      	ldrb	r3, [r7, #19]
 8009412:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009414:	7c7b      	ldrb	r3, [r7, #17]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d105      	bne.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800941a:	4ba7      	ldr	r3, [pc, #668]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800941e:	4aa6      	ldr	r2, [pc, #664]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009424:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f003 0301 	and.w	r3, r3, #1
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009432:	4ba1      	ldr	r3, [pc, #644]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009438:	f023 0203 	bic.w	r2, r3, #3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	499d      	ldr	r1, [pc, #628]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009442:	4313      	orrs	r3, r2
 8009444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009454:	4b98      	ldr	r3, [pc, #608]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800945a:	f023 020c 	bic.w	r2, r3, #12
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	4995      	ldr	r1, [pc, #596]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009464:	4313      	orrs	r3, r2
 8009466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009476:	4b90      	ldr	r3, [pc, #576]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800947c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	498c      	ldr	r1, [pc, #560]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009486:	4313      	orrs	r3, r2
 8009488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00a      	beq.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009498:	4b87      	ldr	r3, [pc, #540]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800949a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800949e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	4984      	ldr	r1, [pc, #528]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a8:	4313      	orrs	r3, r2
 80094aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0310 	and.w	r3, r3, #16
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094ba:	4b7f      	ldr	r3, [pc, #508]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	497b      	ldr	r1, [pc, #492]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0320 	and.w	r3, r3, #32
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00a      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094dc:	4b76      	ldr	r3, [pc, #472]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	4973      	ldr	r1, [pc, #460]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ec:	4313      	orrs	r3, r2
 80094ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00a      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094fe:	4b6e      	ldr	r3, [pc, #440]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009504:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	496a      	ldr	r1, [pc, #424]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800950e:	4313      	orrs	r3, r2
 8009510:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00a      	beq.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009520:	4b65      	ldr	r3, [pc, #404]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009526:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	4962      	ldr	r1, [pc, #392]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009530:	4313      	orrs	r3, r2
 8009532:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009542:	4b5d      	ldr	r3, [pc, #372]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009548:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009550:	4959      	ldr	r1, [pc, #356]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00a      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009564:	4b54      	ldr	r3, [pc, #336]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009566:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800956a:	f023 0203 	bic.w	r2, r3, #3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009572:	4951      	ldr	r1, [pc, #324]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009574:	4313      	orrs	r3, r2
 8009576:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009586:	4b4c      	ldr	r3, [pc, #304]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800958c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009594:	4948      	ldr	r1, [pc, #288]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009596:	4313      	orrs	r3, r2
 8009598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d015      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095a8:	4b43      	ldr	r3, [pc, #268]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b6:	4940      	ldr	r1, [pc, #256]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b8:	4313      	orrs	r3, r2
 80095ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095c6:	d105      	bne.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095c8:	4b3b      	ldr	r3, [pc, #236]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	4a3a      	ldr	r2, [pc, #232]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d015      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80095e0:	4b35      	ldr	r3, [pc, #212]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ee:	4932      	ldr	r1, [pc, #200]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095fe:	d105      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009600:	4b2d      	ldr	r3, [pc, #180]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	4a2c      	ldr	r2, [pc, #176]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800960a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d015      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009618:	4b27      	ldr	r3, [pc, #156]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800961a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009626:	4924      	ldr	r1, [pc, #144]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009628:	4313      	orrs	r3, r2
 800962a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009636:	d105      	bne.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009638:	4b1f      	ldr	r3, [pc, #124]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	4a1e      	ldr	r2, [pc, #120]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009642:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d015      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009650:	4b19      	ldr	r3, [pc, #100]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009656:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965e:	4916      	ldr	r1, [pc, #88]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009660:	4313      	orrs	r3, r2
 8009662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800966a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800966e:	d105      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009670:	4b11      	ldr	r3, [pc, #68]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	4a10      	ldr	r2, [pc, #64]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800967a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d019      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009688:	4b0b      	ldr	r3, [pc, #44]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800968e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009696:	4908      	ldr	r1, [pc, #32]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009698:	4313      	orrs	r3, r2
 800969a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a6:	d109      	bne.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096a8:	4b03      	ldr	r3, [pc, #12]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	4a02      	ldr	r2, [pc, #8]	@ (80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096b2:	60d3      	str	r3, [r2, #12]
 80096b4:	e002      	b.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80096b6:	bf00      	nop
 80096b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d015      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80096c8:	4b29      	ldr	r3, [pc, #164]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d6:	4926      	ldr	r1, [pc, #152]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e6:	d105      	bne.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096e8:	4b21      	ldr	r3, [pc, #132]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	4a20      	ldr	r2, [pc, #128]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d015      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009700:	4b1b      	ldr	r3, [pc, #108]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009706:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800970e:	4918      	ldr	r1, [pc, #96]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009710:	4313      	orrs	r3, r2
 8009712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800971a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971e:	d105      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009720:	4b13      	ldr	r3, [pc, #76]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	4a12      	ldr	r2, [pc, #72]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800972a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d015      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009738:	4b0d      	ldr	r3, [pc, #52]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800973a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800973e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009746:	490a      	ldr	r1, [pc, #40]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009748:	4313      	orrs	r3, r2
 800974a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009752:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009756:	d105      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009758:	4b05      	ldr	r3, [pc, #20]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	4a04      	ldr	r2, [pc, #16]	@ (8009770 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800975e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009762:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009764:	7cbb      	ldrb	r3, [r7, #18]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3718      	adds	r7, #24
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	40021000 	.word	0x40021000

08009774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e09d      	b.n	80098c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	2b00      	cmp	r3, #0
 800978c:	d108      	bne.n	80097a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009796:	d009      	beq.n	80097ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	61da      	str	r2, [r3, #28]
 800979e:	e005      	b.n	80097ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7fb ff9c 	bl	8005704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80097ec:	d902      	bls.n	80097f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	e002      	b.n	80097fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80097f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009802:	d007      	beq.n	8009814 <HAL_SPI_Init+0xa0>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800980c:	d002      	beq.n	8009814 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	431a      	orrs	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	695b      	ldr	r3, [r3, #20]
 8009834:	f003 0301 	and.w	r3, r3, #1
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009842:	431a      	orrs	r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800984c:	431a      	orrs	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009856:	ea42 0103 	orr.w	r1, r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800985e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	430a      	orrs	r2, r1
 8009868:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	0c1b      	lsrs	r3, r3, #16
 8009870:	f003 0204 	and.w	r2, r3, #4
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009878:	f003 0310 	and.w	r3, r3, #16
 800987c:	431a      	orrs	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009882:	f003 0308 	and.w	r3, r3, #8
 8009886:	431a      	orrs	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009890:	ea42 0103 	orr.w	r1, r2, r3
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	69da      	ldr	r2, [r3, #28]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80098b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b08a      	sub	sp, #40	@ 0x28
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098d8:	2301      	movs	r3, #1
 80098da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098dc:	f7fc fe50 	bl	8006580 <HAL_GetTick>
 80098e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80098f0:	887b      	ldrh	r3, [r7, #2]
 80098f2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80098f4:	887b      	ldrh	r3, [r7, #2]
 80098f6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098f8:	7ffb      	ldrb	r3, [r7, #31]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d00c      	beq.n	8009918 <HAL_SPI_TransmitReceive+0x4e>
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009904:	d106      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <HAL_SPI_TransmitReceive+0x4a>
 800990e:	7ffb      	ldrb	r3, [r7, #31]
 8009910:	2b04      	cmp	r3, #4
 8009912:	d001      	beq.n	8009918 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009914:	2302      	movs	r3, #2
 8009916:	e1f3      	b.n	8009d00 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d005      	beq.n	800992a <HAL_SPI_TransmitReceive+0x60>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <HAL_SPI_TransmitReceive+0x60>
 8009924:	887b      	ldrh	r3, [r7, #2]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d101      	bne.n	800992e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	e1e8      	b.n	8009d00 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009934:	2b01      	cmp	r3, #1
 8009936:	d101      	bne.n	800993c <HAL_SPI_TransmitReceive+0x72>
 8009938:	2302      	movs	r3, #2
 800993a:	e1e1      	b.n	8009d00 <HAL_SPI_TransmitReceive+0x436>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2201      	movs	r2, #1
 8009940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b04      	cmp	r3, #4
 800994e:	d003      	beq.n	8009958 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2205      	movs	r2, #5
 8009954:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	887a      	ldrh	r2, [r7, #2]
 8009968:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	887a      	ldrh	r2, [r7, #2]
 8009970:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68ba      	ldr	r2, [r7, #8]
 8009978:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	887a      	ldrh	r2, [r7, #2]
 800997e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	887a      	ldrh	r2, [r7, #2]
 8009984:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800999a:	d802      	bhi.n	80099a2 <HAL_SPI_TransmitReceive+0xd8>
 800999c:	8abb      	ldrh	r3, [r7, #20]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d908      	bls.n	80099b4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	685a      	ldr	r2, [r3, #4]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099b0:	605a      	str	r2, [r3, #4]
 80099b2:	e007      	b.n	80099c4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80099c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ce:	2b40      	cmp	r3, #64	@ 0x40
 80099d0:	d007      	beq.n	80099e2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099ea:	f240 8083 	bls.w	8009af4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <HAL_SPI_TransmitReceive+0x132>
 80099f6:	8afb      	ldrh	r3, [r7, #22]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d16f      	bne.n	8009adc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a00:	881a      	ldrh	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0c:	1c9a      	adds	r2, r3, #2
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a20:	e05c      	b.n	8009adc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f003 0302 	and.w	r3, r3, #2
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d11b      	bne.n	8009a68 <HAL_SPI_TransmitReceive+0x19e>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d016      	beq.n	8009a68 <HAL_SPI_TransmitReceive+0x19e>
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d113      	bne.n	8009a68 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a44:	881a      	ldrh	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a50:	1c9a      	adds	r2, r3, #2
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a64:	2300      	movs	r3, #0
 8009a66:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 0301 	and.w	r3, r3, #1
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d11c      	bne.n	8009ab0 <HAL_SPI_TransmitReceive+0x1e6>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d016      	beq.n	8009ab0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	68da      	ldr	r2, [r3, #12]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a94:	1c9a      	adds	r2, r3, #2
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	b29a      	uxth	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aac:	2301      	movs	r3, #1
 8009aae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009ab0:	f7fc fd66 	bl	8006580 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d80d      	bhi.n	8009adc <HAL_SPI_TransmitReceive+0x212>
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac6:	d009      	beq.n	8009adc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e111      	b.n	8009d00 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d19d      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x158>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d197      	bne.n	8009a22 <HAL_SPI_TransmitReceive+0x158>
 8009af2:	e0e5      	b.n	8009cc0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <HAL_SPI_TransmitReceive+0x23a>
 8009afc:	8afb      	ldrh	r3, [r7, #22]
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	f040 80d1 	bne.w	8009ca6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d912      	bls.n	8009b34 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b12:	881a      	ldrh	r2, [r3, #0]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b1e:	1c9a      	adds	r2, r3, #2
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b02      	subs	r3, #2
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b32:	e0b8      	b.n	8009ca6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	330c      	adds	r3, #12
 8009b3e:	7812      	ldrb	r2, [r2, #0]
 8009b40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b5a:	e0a4      	b.n	8009ca6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	689b      	ldr	r3, [r3, #8]
 8009b62:	f003 0302 	and.w	r3, r3, #2
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d134      	bne.n	8009bd4 <HAL_SPI_TransmitReceive+0x30a>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d02f      	beq.n	8009bd4 <HAL_SPI_TransmitReceive+0x30a>
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d12c      	bne.n	8009bd4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d912      	bls.n	8009baa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b88:	881a      	ldrh	r2, [r3, #0]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b94:	1c9a      	adds	r2, r3, #2
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	3b02      	subs	r3, #2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ba8:	e012      	b.n	8009bd0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	330c      	adds	r3, #12
 8009bb4:	7812      	ldrb	r2, [r2, #0]
 8009bb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	3b01      	subs	r3, #1
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d148      	bne.n	8009c74 <HAL_SPI_TransmitReceive+0x3aa>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d042      	beq.n	8009c74 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d923      	bls.n	8009c42 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c04:	b292      	uxth	r2, r2
 8009c06:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c0c:	1c9a      	adds	r2, r3, #2
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	3b02      	subs	r3, #2
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d81f      	bhi.n	8009c70 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c3e:	605a      	str	r2, [r3, #4]
 8009c40:	e016      	b.n	8009c70 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f103 020c 	add.w	r2, r3, #12
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c4e:	7812      	ldrb	r2, [r2, #0]
 8009c50:	b2d2      	uxtb	r2, r2
 8009c52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	3b01      	subs	r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c70:	2301      	movs	r3, #1
 8009c72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c74:	f7fc fc84 	bl	8006580 <HAL_GetTick>
 8009c78:	4602      	mov	r2, r0
 8009c7a:	6a3b      	ldr	r3, [r7, #32]
 8009c7c:	1ad3      	subs	r3, r2, r3
 8009c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d803      	bhi.n	8009c8c <HAL_SPI_TransmitReceive+0x3c2>
 8009c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8a:	d102      	bne.n	8009c92 <HAL_SPI_TransmitReceive+0x3c8>
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d109      	bne.n	8009ca6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2201      	movs	r2, #1
 8009c96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e02c      	b.n	8009d00 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f47f af55 	bne.w	8009b5c <HAL_SPI_TransmitReceive+0x292>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f47f af4e 	bne.w	8009b5c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cc0:	6a3a      	ldr	r2, [r7, #32]
 8009cc2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cc4:	68f8      	ldr	r0, [r7, #12]
 8009cc6:	f000 f93d 	bl	8009f44 <SPI_EndRxTxTransaction>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d008      	beq.n	8009ce2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2220      	movs	r2, #32
 8009cd4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e00e      	b.n	8009d00 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
  }
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3728      	adds	r7, #40	@ 0x28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d18:	f7fc fc32 	bl	8006580 <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	4413      	add	r3, r2
 8009d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d28:	f7fc fc2a 	bl	8006580 <HAL_GetTick>
 8009d2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d2e:	4b39      	ldr	r3, [pc, #228]	@ (8009e14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	015b      	lsls	r3, r3, #5
 8009d34:	0d1b      	lsrs	r3, r3, #20
 8009d36:	69fa      	ldr	r2, [r7, #28]
 8009d38:	fb02 f303 	mul.w	r3, r2, r3
 8009d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d3e:	e054      	b.n	8009dea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d46:	d050      	beq.n	8009dea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d48:	f7fc fc1a 	bl	8006580 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	69fa      	ldr	r2, [r7, #28]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d902      	bls.n	8009d5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d13d      	bne.n	8009dda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685a      	ldr	r2, [r3, #4]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d76:	d111      	bne.n	8009d9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d80:	d004      	beq.n	8009d8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d8a:	d107      	bne.n	8009d9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	681a      	ldr	r2, [r3, #0]
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009da4:	d10f      	bne.n	8009dc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	e017      	b.n	8009e0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	4013      	ands	r3, r2
 8009df4:	68ba      	ldr	r2, [r7, #8]
 8009df6:	429a      	cmp	r2, r3
 8009df8:	bf0c      	ite	eq
 8009dfa:	2301      	moveq	r3, #1
 8009dfc:	2300      	movne	r3, #0
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	461a      	mov	r2, r3
 8009e02:	79fb      	ldrb	r3, [r7, #7]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d19b      	bne.n	8009d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3720      	adds	r7, #32
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	2000020c 	.word	0x2000020c

08009e18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08a      	sub	sp, #40	@ 0x28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009e2a:	f7fc fba9 	bl	8006580 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e32:	1a9b      	subs	r3, r3, r2
 8009e34:	683a      	ldr	r2, [r7, #0]
 8009e36:	4413      	add	r3, r2
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009e3a:	f7fc fba1 	bl	8006580 <HAL_GetTick>
 8009e3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	330c      	adds	r3, #12
 8009e46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e48:	4b3d      	ldr	r3, [pc, #244]	@ (8009f40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	4613      	mov	r3, r2
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	00da      	lsls	r2, r3, #3
 8009e54:	1ad3      	subs	r3, r2, r3
 8009e56:	0d1b      	lsrs	r3, r3, #20
 8009e58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e5a:	fb02 f303 	mul.w	r3, r2, r3
 8009e5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e60:	e060      	b.n	8009f24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e68:	d107      	bne.n	8009e7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d104      	bne.n	8009e7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e70:	69fb      	ldr	r3, [r7, #28]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d050      	beq.n	8009f24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e82:	f7fc fb7d 	bl	8006580 <HAL_GetTick>
 8009e86:	4602      	mov	r2, r0
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d902      	bls.n	8009e98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d13d      	bne.n	8009f14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009ea6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009eb0:	d111      	bne.n	8009ed6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009eba:	d004      	beq.n	8009ec6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ec4:	d107      	bne.n	8009ed6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ed4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ede:	d10f      	bne.n	8009f00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009efe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009f10:	2303      	movs	r3, #3
 8009f12:	e010      	b.n	8009f36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f14:	69bb      	ldr	r3, [r7, #24]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	3b01      	subs	r3, #1
 8009f22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689a      	ldr	r2, [r3, #8]
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d196      	bne.n	8009e62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3728      	adds	r7, #40	@ 0x28
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	2000020c 	.word	0x2000020c

08009f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af02      	add	r7, sp, #8
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	9300      	str	r3, [sp, #0]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff ff5b 	bl	8009e18 <SPI_WaitFifoStateUntilTimeout>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d007      	beq.n	8009f78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f6c:	f043 0220 	orr.w	r2, r3, #32
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e027      	b.n	8009fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2180      	movs	r1, #128	@ 0x80
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f7ff fec0 	bl	8009d08 <SPI_WaitFlagStateUntilTimeout>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d007      	beq.n	8009f9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f92:	f043 0220 	orr.w	r2, r3, #32
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e014      	b.n	8009fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f7ff ff34 	bl	8009e18 <SPI_WaitFifoStateUntilTimeout>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d007      	beq.n	8009fc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fba:	f043 0220 	orr.w	r2, r3, #32
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e000      	b.n	8009fc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e054      	b.n	800a08c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d111      	bne.n	800a012 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 ffd4 	bl	800bfa4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a000:	2b00      	cmp	r3, #0
 800a002:	d102      	bne.n	800a00a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	4a23      	ldr	r2, [pc, #140]	@ (800a094 <HAL_TIM_Base_Init+0xc4>)
 800a008:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2202      	movs	r2, #2
 800a016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	3304      	adds	r3, #4
 800a022:	4619      	mov	r1, r3
 800a024:	4610      	mov	r0, r2
 800a026:	f001 fb1d 	bl	800b664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2201      	movs	r2, #1
 800a036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3708      	adds	r7, #8
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	08005fb9 	.word	0x08005fb9

0800a098 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d001      	beq.n	800a0b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	e04c      	b.n	800a14a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2202      	movs	r2, #2
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a26      	ldr	r2, [pc, #152]	@ (800a158 <HAL_TIM_Base_Start+0xc0>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d022      	beq.n	800a108 <HAL_TIM_Base_Start+0x70>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ca:	d01d      	beq.n	800a108 <HAL_TIM_Base_Start+0x70>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a22      	ldr	r2, [pc, #136]	@ (800a15c <HAL_TIM_Base_Start+0xc4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d018      	beq.n	800a108 <HAL_TIM_Base_Start+0x70>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a21      	ldr	r2, [pc, #132]	@ (800a160 <HAL_TIM_Base_Start+0xc8>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d013      	beq.n	800a108 <HAL_TIM_Base_Start+0x70>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a1f      	ldr	r2, [pc, #124]	@ (800a164 <HAL_TIM_Base_Start+0xcc>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d00e      	beq.n	800a108 <HAL_TIM_Base_Start+0x70>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a1e      	ldr	r2, [pc, #120]	@ (800a168 <HAL_TIM_Base_Start+0xd0>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d009      	beq.n	800a108 <HAL_TIM_Base_Start+0x70>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a1c      	ldr	r2, [pc, #112]	@ (800a16c <HAL_TIM_Base_Start+0xd4>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d004      	beq.n	800a108 <HAL_TIM_Base_Start+0x70>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a1b      	ldr	r2, [pc, #108]	@ (800a170 <HAL_TIM_Base_Start+0xd8>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d115      	bne.n	800a134 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	689a      	ldr	r2, [r3, #8]
 800a10e:	4b19      	ldr	r3, [pc, #100]	@ (800a174 <HAL_TIM_Base_Start+0xdc>)
 800a110:	4013      	ands	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2b06      	cmp	r3, #6
 800a118:	d015      	beq.n	800a146 <HAL_TIM_Base_Start+0xae>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a120:	d011      	beq.n	800a146 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f042 0201 	orr.w	r2, r2, #1
 800a130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a132:	e008      	b.n	800a146 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	e000      	b.n	800a148 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a146:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	40012c00 	.word	0x40012c00
 800a15c:	40000400 	.word	0x40000400
 800a160:	40000800 	.word	0x40000800
 800a164:	40000c00 	.word	0x40000c00
 800a168:	40013400 	.word	0x40013400
 800a16c:	40014000 	.word	0x40014000
 800a170:	40015000 	.word	0x40015000
 800a174:	00010007 	.word	0x00010007

0800a178 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a186:	b2db      	uxtb	r3, r3
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d001      	beq.n	800a190 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e054      	b.n	800a23a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f042 0201 	orr.w	r2, r2, #1
 800a1a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a26      	ldr	r2, [pc, #152]	@ (800a248 <HAL_TIM_Base_Start_IT+0xd0>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d022      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x80>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ba:	d01d      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x80>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a22      	ldr	r2, [pc, #136]	@ (800a24c <HAL_TIM_Base_Start_IT+0xd4>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d018      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x80>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a21      	ldr	r2, [pc, #132]	@ (800a250 <HAL_TIM_Base_Start_IT+0xd8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d013      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x80>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a254 <HAL_TIM_Base_Start_IT+0xdc>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00e      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x80>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a1e      	ldr	r2, [pc, #120]	@ (800a258 <HAL_TIM_Base_Start_IT+0xe0>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d009      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x80>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a1c      	ldr	r2, [pc, #112]	@ (800a25c <HAL_TIM_Base_Start_IT+0xe4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d004      	beq.n	800a1f8 <HAL_TIM_Base_Start_IT+0x80>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a1b      	ldr	r2, [pc, #108]	@ (800a260 <HAL_TIM_Base_Start_IT+0xe8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d115      	bne.n	800a224 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	689a      	ldr	r2, [r3, #8]
 800a1fe:	4b19      	ldr	r3, [pc, #100]	@ (800a264 <HAL_TIM_Base_Start_IT+0xec>)
 800a200:	4013      	ands	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b06      	cmp	r3, #6
 800a208:	d015      	beq.n	800a236 <HAL_TIM_Base_Start_IT+0xbe>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a210:	d011      	beq.n	800a236 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f042 0201 	orr.w	r2, r2, #1
 800a220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a222:	e008      	b.n	800a236 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f042 0201 	orr.w	r2, r2, #1
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	e000      	b.n	800a238 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	40012c00 	.word	0x40012c00
 800a24c:	40000400 	.word	0x40000400
 800a250:	40000800 	.word	0x40000800
 800a254:	40000c00 	.word	0x40000c00
 800a258:	40013400 	.word	0x40013400
 800a25c:	40014000 	.word	0x40014000
 800a260:	40015000 	.word	0x40015000
 800a264:	00010007 	.word	0x00010007

0800a268 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a276:	2301      	movs	r3, #1
 800a278:	e054      	b.n	800a324 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b00      	cmp	r3, #0
 800a284:	d111      	bne.n	800a2aa <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f001 fe88 	bl	800bfa4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d102      	bne.n	800a2a2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a23      	ldr	r2, [pc, #140]	@ (800a32c <HAL_TIM_OC_Init+0xc4>)
 800a2a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2202      	movs	r2, #2
 800a2ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	4610      	mov	r0, r2
 800a2be:	f001 f9d1 	bl	800b664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2201      	movs	r2, #1
 800a31e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}
 800a32c:	0800a331 	.word	0x0800a331

0800a330 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b082      	sub	sp, #8
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a352:	2301      	movs	r3, #1
 800a354:	e054      	b.n	800a400 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d111      	bne.n	800a386 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f001 fe1a 	bl	800bfa4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a23      	ldr	r2, [pc, #140]	@ (800a408 <HAL_TIM_PWM_Init+0xc4>)
 800a37c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2202      	movs	r2, #2
 800a38a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3304      	adds	r3, #4
 800a396:	4619      	mov	r1, r3
 800a398:	4610      	mov	r0, r2
 800a39a:	f001 f963 	bl	800b664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2201      	movs	r2, #1
 800a3da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2201      	movs	r2, #1
 800a3e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	0800a40d 	.word	0x0800a40d

0800a40c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d109      	bne.n	800a444 <HAL_TIM_PWM_Start+0x24>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b01      	cmp	r3, #1
 800a43a:	bf14      	ite	ne
 800a43c:	2301      	movne	r3, #1
 800a43e:	2300      	moveq	r3, #0
 800a440:	b2db      	uxtb	r3, r3
 800a442:	e03c      	b.n	800a4be <HAL_TIM_PWM_Start+0x9e>
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2b04      	cmp	r3, #4
 800a448:	d109      	bne.n	800a45e <HAL_TIM_PWM_Start+0x3e>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a450:	b2db      	uxtb	r3, r3
 800a452:	2b01      	cmp	r3, #1
 800a454:	bf14      	ite	ne
 800a456:	2301      	movne	r3, #1
 800a458:	2300      	moveq	r3, #0
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	e02f      	b.n	800a4be <HAL_TIM_PWM_Start+0x9e>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	2b08      	cmp	r3, #8
 800a462:	d109      	bne.n	800a478 <HAL_TIM_PWM_Start+0x58>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	bf14      	ite	ne
 800a470:	2301      	movne	r3, #1
 800a472:	2300      	moveq	r3, #0
 800a474:	b2db      	uxtb	r3, r3
 800a476:	e022      	b.n	800a4be <HAL_TIM_PWM_Start+0x9e>
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	2b0c      	cmp	r3, #12
 800a47c:	d109      	bne.n	800a492 <HAL_TIM_PWM_Start+0x72>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b01      	cmp	r3, #1
 800a488:	bf14      	ite	ne
 800a48a:	2301      	movne	r3, #1
 800a48c:	2300      	moveq	r3, #0
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	e015      	b.n	800a4be <HAL_TIM_PWM_Start+0x9e>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	2b10      	cmp	r3, #16
 800a496:	d109      	bne.n	800a4ac <HAL_TIM_PWM_Start+0x8c>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a49e:	b2db      	uxtb	r3, r3
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	bf14      	ite	ne
 800a4a4:	2301      	movne	r3, #1
 800a4a6:	2300      	moveq	r3, #0
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	e008      	b.n	800a4be <HAL_TIM_PWM_Start+0x9e>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	bf14      	ite	ne
 800a4b8:	2301      	movne	r3, #1
 800a4ba:	2300      	moveq	r3, #0
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	e0a6      	b.n	800a614 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d104      	bne.n	800a4d6 <HAL_TIM_PWM_Start+0xb6>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4d4:	e023      	b.n	800a51e <HAL_TIM_PWM_Start+0xfe>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d104      	bne.n	800a4e6 <HAL_TIM_PWM_Start+0xc6>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2202      	movs	r2, #2
 800a4e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4e4:	e01b      	b.n	800a51e <HAL_TIM_PWM_Start+0xfe>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b08      	cmp	r3, #8
 800a4ea:	d104      	bne.n	800a4f6 <HAL_TIM_PWM_Start+0xd6>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a4f4:	e013      	b.n	800a51e <HAL_TIM_PWM_Start+0xfe>
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b0c      	cmp	r3, #12
 800a4fa:	d104      	bne.n	800a506 <HAL_TIM_PWM_Start+0xe6>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2202      	movs	r2, #2
 800a500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a504:	e00b      	b.n	800a51e <HAL_TIM_PWM_Start+0xfe>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b10      	cmp	r3, #16
 800a50a:	d104      	bne.n	800a516 <HAL_TIM_PWM_Start+0xf6>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2202      	movs	r2, #2
 800a510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a514:	e003      	b.n	800a51e <HAL_TIM_PWM_Start+0xfe>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2202      	movs	r2, #2
 800a51a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2201      	movs	r2, #1
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	4618      	mov	r0, r3
 800a528:	f001 fd16 	bl	800bf58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a3a      	ldr	r2, [pc, #232]	@ (800a61c <HAL_TIM_PWM_Start+0x1fc>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d018      	beq.n	800a568 <HAL_TIM_PWM_Start+0x148>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a39      	ldr	r2, [pc, #228]	@ (800a620 <HAL_TIM_PWM_Start+0x200>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d013      	beq.n	800a568 <HAL_TIM_PWM_Start+0x148>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a37      	ldr	r2, [pc, #220]	@ (800a624 <HAL_TIM_PWM_Start+0x204>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d00e      	beq.n	800a568 <HAL_TIM_PWM_Start+0x148>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a36      	ldr	r2, [pc, #216]	@ (800a628 <HAL_TIM_PWM_Start+0x208>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d009      	beq.n	800a568 <HAL_TIM_PWM_Start+0x148>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a34      	ldr	r2, [pc, #208]	@ (800a62c <HAL_TIM_PWM_Start+0x20c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d004      	beq.n	800a568 <HAL_TIM_PWM_Start+0x148>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a33      	ldr	r2, [pc, #204]	@ (800a630 <HAL_TIM_PWM_Start+0x210>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d101      	bne.n	800a56c <HAL_TIM_PWM_Start+0x14c>
 800a568:	2301      	movs	r3, #1
 800a56a:	e000      	b.n	800a56e <HAL_TIM_PWM_Start+0x14e>
 800a56c:	2300      	movs	r3, #0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d007      	beq.n	800a582 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a25      	ldr	r2, [pc, #148]	@ (800a61c <HAL_TIM_PWM_Start+0x1fc>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d022      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1b2>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a594:	d01d      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1b2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a26      	ldr	r2, [pc, #152]	@ (800a634 <HAL_TIM_PWM_Start+0x214>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d018      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1b2>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a24      	ldr	r2, [pc, #144]	@ (800a638 <HAL_TIM_PWM_Start+0x218>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d013      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1b2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a23      	ldr	r2, [pc, #140]	@ (800a63c <HAL_TIM_PWM_Start+0x21c>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d00e      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1b2>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a19      	ldr	r2, [pc, #100]	@ (800a620 <HAL_TIM_PWM_Start+0x200>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d009      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1b2>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a18      	ldr	r2, [pc, #96]	@ (800a624 <HAL_TIM_PWM_Start+0x204>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d004      	beq.n	800a5d2 <HAL_TIM_PWM_Start+0x1b2>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a18      	ldr	r2, [pc, #96]	@ (800a630 <HAL_TIM_PWM_Start+0x210>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d115      	bne.n	800a5fe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	4b19      	ldr	r3, [pc, #100]	@ (800a640 <HAL_TIM_PWM_Start+0x220>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2b06      	cmp	r3, #6
 800a5e2:	d015      	beq.n	800a610 <HAL_TIM_PWM_Start+0x1f0>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5ea:	d011      	beq.n	800a610 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f042 0201 	orr.w	r2, r2, #1
 800a5fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5fc:	e008      	b.n	800a610 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f042 0201 	orr.w	r2, r2, #1
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	e000      	b.n	800a612 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a610:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3710      	adds	r7, #16
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	40012c00 	.word	0x40012c00
 800a620:	40013400 	.word	0x40013400
 800a624:	40014000 	.word	0x40014000
 800a628:	40014400 	.word	0x40014400
 800a62c:	40014800 	.word	0x40014800
 800a630:	40015000 	.word	0x40015000
 800a634:	40000400 	.word	0x40000400
 800a638:	40000800 	.word	0x40000800
 800a63c:	40000c00 	.word	0x40000c00
 800a640:	00010007 	.word	0x00010007

0800a644 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e04c      	b.n	800a6f2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	2b00      	cmp	r3, #0
 800a662:	d111      	bne.n	800a688 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f001 fc99 	bl	800bfa4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d102      	bne.n	800a680 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a1f      	ldr	r2, [pc, #124]	@ (800a6fc <HAL_TIM_OnePulse_Init+0xb8>)
 800a67e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	4619      	mov	r1, r3
 800a69a:	4610      	mov	r0, r2
 800a69c:	f000 ffe2 	bl	800b664 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0208 	bic.w	r2, r2, #8
 800a6ae:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6819      	ldr	r1, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	430a      	orrs	r2, r1
 800a6be:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0800a701 	.word	0x0800a701

0800a700 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a724:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a72c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a734:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a73c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d108      	bne.n	800a756 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a744:	7bbb      	ldrb	r3, [r7, #14]
 800a746:	2b01      	cmp	r3, #1
 800a748:	d105      	bne.n	800a756 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a74a:	7b7b      	ldrb	r3, [r7, #13]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d102      	bne.n	800a756 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a750:	7b3b      	ldrb	r3, [r7, #12]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d001      	beq.n	800a75a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	e059      	b.n	800a80e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2202      	movs	r2, #2
 800a75e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2202      	movs	r2, #2
 800a766:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2202      	movs	r2, #2
 800a76e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2202      	movs	r2, #2
 800a776:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	68da      	ldr	r2, [r3, #12]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f042 0202 	orr.w	r2, r2, #2
 800a788:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f042 0204 	orr.w	r2, r2, #4
 800a798:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f001 fbd8 	bl	800bf58 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	2104      	movs	r1, #4
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f001 fbd1 	bl	800bf58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a17      	ldr	r2, [pc, #92]	@ (800a818 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d018      	beq.n	800a7f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a15      	ldr	r2, [pc, #84]	@ (800a81c <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d013      	beq.n	800a7f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a14      	ldr	r2, [pc, #80]	@ (800a820 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d00e      	beq.n	800a7f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a12      	ldr	r2, [pc, #72]	@ (800a824 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d009      	beq.n	800a7f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a11      	ldr	r2, [pc, #68]	@ (800a828 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d004      	beq.n	800a7f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a0f      	ldr	r2, [pc, #60]	@ (800a82c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d101      	bne.n	800a7f6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e000      	b.n	800a7f8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d007      	beq.n	800a80c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a80a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	40012c00 	.word	0x40012c00
 800a81c:	40013400 	.word	0x40013400
 800a820:	40014000 	.word	0x40014000
 800a824:	40014400 	.word	0x40014400
 800a828:	40014800 	.word	0x40014800
 800a82c:	40015000 	.word	0x40015000

0800a830 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b086      	sub	sp, #24
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e0a2      	b.n	800a98a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d111      	bne.n	800a874 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f001 fba3 	bl	800bfa4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a862:	2b00      	cmp	r3, #0
 800a864:	d102      	bne.n	800a86c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a4a      	ldr	r2, [pc, #296]	@ (800a994 <HAL_TIM_Encoder_Init+0x164>)
 800a86a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2202      	movs	r2, #2
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	6812      	ldr	r2, [r2, #0]
 800a886:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a88a:	f023 0307 	bic.w	r3, r3, #7
 800a88e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	3304      	adds	r3, #4
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f000 fee2 	bl	800b664 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8c8:	f023 0303 	bic.w	r3, r3, #3
 800a8cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	689a      	ldr	r2, [r3, #8]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a8e6:	f023 030c 	bic.w	r3, r3, #12
 800a8ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	68da      	ldr	r2, [r3, #12]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	021b      	lsls	r3, r3, #8
 800a902:	4313      	orrs	r3, r2
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4313      	orrs	r3, r2
 800a908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	691b      	ldr	r3, [r3, #16]
 800a90e:	011a      	lsls	r2, r3, #4
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	031b      	lsls	r3, r3, #12
 800a916:	4313      	orrs	r3, r2
 800a918:	693a      	ldr	r2, [r7, #16]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a924:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a92c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	695b      	ldr	r3, [r3, #20]
 800a936:	011b      	lsls	r3, r3, #4
 800a938:	4313      	orrs	r3, r2
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3718      	adds	r7, #24
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	080060d1 	.word	0x080060d1

0800a998 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a9b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d110      	bne.n	800a9ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9c8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d102      	bne.n	800a9d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9ce:	7b7b      	ldrb	r3, [r7, #13]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d001      	beq.n	800a9d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e069      	b.n	800aaac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2202      	movs	r2, #2
 800a9dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9e8:	e031      	b.n	800aa4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	d110      	bne.n	800aa12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d102      	bne.n	800a9fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a9f6:	7b3b      	ldrb	r3, [r7, #12]
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	d001      	beq.n	800aa00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e055      	b.n	800aaac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2202      	movs	r2, #2
 800aa04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa10:	e01d      	b.n	800aa4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d108      	bne.n	800aa2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	2b01      	cmp	r3, #1
 800aa1c:	d105      	bne.n	800aa2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aa1e:	7b7b      	ldrb	r3, [r7, #13]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d102      	bne.n	800aa2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aa24:	7b3b      	ldrb	r3, [r7, #12]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d001      	beq.n	800aa2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e03e      	b.n	800aaac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2202      	movs	r2, #2
 800aa32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2202      	movs	r2, #2
 800aa3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2202      	movs	r2, #2
 800aa42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2202      	movs	r2, #2
 800aa4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d003      	beq.n	800aa5c <HAL_TIM_Encoder_Start+0xc4>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	d008      	beq.n	800aa6c <HAL_TIM_Encoder_Start+0xd4>
 800aa5a:	e00f      	b.n	800aa7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2201      	movs	r2, #1
 800aa62:	2100      	movs	r1, #0
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 fa77 	bl	800bf58 <TIM_CCxChannelCmd>
      break;
 800aa6a:	e016      	b.n	800aa9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2201      	movs	r2, #1
 800aa72:	2104      	movs	r1, #4
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 fa6f 	bl	800bf58 <TIM_CCxChannelCmd>
      break;
 800aa7a:	e00e      	b.n	800aa9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2201      	movs	r2, #1
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 fa67 	bl	800bf58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	2104      	movs	r1, #4
 800aa92:	4618      	mov	r0, r3
 800aa94:	f001 fa60 	bl	800bf58 <TIM_CCxChannelCmd>
      break;
 800aa98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3710      	adds	r7, #16
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	f003 0302 	and.w	r3, r3, #2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d026      	beq.n	800ab24 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d021      	beq.n	800ab24 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0202 	mvn.w	r2, #2
 800aae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	f003 0303 	and.w	r3, r3, #3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d005      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	4798      	blx	r3
 800ab08:	e009      	b.n	800ab1e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d026      	beq.n	800ab7c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	f003 0304 	and.w	r3, r3, #4
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d021      	beq.n	800ab7c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f06f 0204 	mvn.w	r2, #4
 800ab40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2202      	movs	r2, #2
 800ab46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	699b      	ldr	r3, [r3, #24]
 800ab4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d005      	beq.n	800ab62 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	4798      	blx	r3
 800ab60:	e009      	b.n	800ab76 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	f003 0308 	and.w	r3, r3, #8
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d026      	beq.n	800abd4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d021      	beq.n	800abd4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f06f 0208 	mvn.w	r2, #8
 800ab98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2204      	movs	r2, #4
 800ab9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	f003 0303 	and.w	r3, r3, #3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d005      	beq.n	800abba <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	4798      	blx	r3
 800abb8:	e009      	b.n	800abce <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2200      	movs	r2, #0
 800abd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f003 0310 	and.w	r3, r3, #16
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d026      	beq.n	800ac2c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f003 0310 	and.w	r3, r3, #16
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d021      	beq.n	800ac2c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f06f 0210 	mvn.w	r2, #16
 800abf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2208      	movs	r2, #8
 800abf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d005      	beq.n	800ac12 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
 800ac10:	e009      	b.n	800ac26 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f003 0301 	and.w	r3, r3, #1
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00e      	beq.n	800ac54 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d009      	beq.n	800ac54 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f06f 0201 	mvn.w	r2, #1
 800ac48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d104      	bne.n	800ac68 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00e      	beq.n	800ac86 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d009      	beq.n	800ac86 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ac7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00e      	beq.n	800acae <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00e      	beq.n	800acd6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d009      	beq.n	800acd6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800acca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f003 0320 	and.w	r3, r3, #32
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00e      	beq.n	800acfe <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f003 0320 	and.w	r3, r3, #32
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f06f 0220 	mvn.w	r2, #32
 800acf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00e      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d009      	beq.n	800ad26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ad1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00e      	beq.n	800ad4e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d009      	beq.n	800ad4e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ad42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00e      	beq.n	800ad76 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d009      	beq.n	800ad76 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ad6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d00e      	beq.n	800ad9e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d009      	beq.n	800ad9e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ad92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad9e:	bf00      	nop
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adb4:	2300      	movs	r3, #0
 800adb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800adc2:	2302      	movs	r3, #2
 800adc4:	e066      	b.n	800ae94 <HAL_TIM_OC_ConfigChannel+0xec>
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2b14      	cmp	r3, #20
 800add2:	d857      	bhi.n	800ae84 <HAL_TIM_OC_ConfigChannel+0xdc>
 800add4:	a201      	add	r2, pc, #4	@ (adr r2, 800addc <HAL_TIM_OC_ConfigChannel+0x34>)
 800add6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adda:	bf00      	nop
 800addc:	0800ae31 	.word	0x0800ae31
 800ade0:	0800ae85 	.word	0x0800ae85
 800ade4:	0800ae85 	.word	0x0800ae85
 800ade8:	0800ae85 	.word	0x0800ae85
 800adec:	0800ae3f 	.word	0x0800ae3f
 800adf0:	0800ae85 	.word	0x0800ae85
 800adf4:	0800ae85 	.word	0x0800ae85
 800adf8:	0800ae85 	.word	0x0800ae85
 800adfc:	0800ae4d 	.word	0x0800ae4d
 800ae00:	0800ae85 	.word	0x0800ae85
 800ae04:	0800ae85 	.word	0x0800ae85
 800ae08:	0800ae85 	.word	0x0800ae85
 800ae0c:	0800ae5b 	.word	0x0800ae5b
 800ae10:	0800ae85 	.word	0x0800ae85
 800ae14:	0800ae85 	.word	0x0800ae85
 800ae18:	0800ae85 	.word	0x0800ae85
 800ae1c:	0800ae69 	.word	0x0800ae69
 800ae20:	0800ae85 	.word	0x0800ae85
 800ae24:	0800ae85 	.word	0x0800ae85
 800ae28:	0800ae85 	.word	0x0800ae85
 800ae2c:	0800ae77 	.word	0x0800ae77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68b9      	ldr	r1, [r7, #8]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fcc8 	bl	800b7cc <TIM_OC1_SetConfig>
      break;
 800ae3c:	e025      	b.n	800ae8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68b9      	ldr	r1, [r7, #8]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fd5b 	bl	800b900 <TIM_OC2_SetConfig>
      break;
 800ae4a:	e01e      	b.n	800ae8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68b9      	ldr	r1, [r7, #8]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fde8 	bl	800ba28 <TIM_OC3_SetConfig>
      break;
 800ae58:	e017      	b.n	800ae8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68b9      	ldr	r1, [r7, #8]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f000 fe73 	bl	800bb4c <TIM_OC4_SetConfig>
      break;
 800ae66:	e010      	b.n	800ae8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	68b9      	ldr	r1, [r7, #8]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 ff00 	bl	800bc74 <TIM_OC5_SetConfig>
      break;
 800ae74:	e009      	b.n	800ae8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68b9      	ldr	r1, [r7, #8]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 ff63 	bl	800bd48 <TIM_OC6_SetConfig>
      break;
 800ae82:	e002      	b.n	800ae8a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	75fb      	strb	r3, [r7, #23]
      break;
 800ae88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3718      	adds	r7, #24
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aeb6:	2302      	movs	r3, #2
 800aeb8:	e0ff      	b.n	800b0ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2201      	movs	r2, #1
 800aebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2b14      	cmp	r3, #20
 800aec6:	f200 80f0 	bhi.w	800b0aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aeca:	a201      	add	r2, pc, #4	@ (adr r2, 800aed0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800af25 	.word	0x0800af25
 800aed4:	0800b0ab 	.word	0x0800b0ab
 800aed8:	0800b0ab 	.word	0x0800b0ab
 800aedc:	0800b0ab 	.word	0x0800b0ab
 800aee0:	0800af65 	.word	0x0800af65
 800aee4:	0800b0ab 	.word	0x0800b0ab
 800aee8:	0800b0ab 	.word	0x0800b0ab
 800aeec:	0800b0ab 	.word	0x0800b0ab
 800aef0:	0800afa7 	.word	0x0800afa7
 800aef4:	0800b0ab 	.word	0x0800b0ab
 800aef8:	0800b0ab 	.word	0x0800b0ab
 800aefc:	0800b0ab 	.word	0x0800b0ab
 800af00:	0800afe7 	.word	0x0800afe7
 800af04:	0800b0ab 	.word	0x0800b0ab
 800af08:	0800b0ab 	.word	0x0800b0ab
 800af0c:	0800b0ab 	.word	0x0800b0ab
 800af10:	0800b029 	.word	0x0800b029
 800af14:	0800b0ab 	.word	0x0800b0ab
 800af18:	0800b0ab 	.word	0x0800b0ab
 800af1c:	0800b0ab 	.word	0x0800b0ab
 800af20:	0800b069 	.word	0x0800b069
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fc4e 	bl	800b7cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699a      	ldr	r2, [r3, #24]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f042 0208 	orr.w	r2, r2, #8
 800af3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f022 0204 	bic.w	r2, r2, #4
 800af4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6999      	ldr	r1, [r3, #24]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691a      	ldr	r2, [r3, #16]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	619a      	str	r2, [r3, #24]
      break;
 800af62:	e0a5      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f000 fcc8 	bl	800b900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	699a      	ldr	r2, [r3, #24]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699a      	ldr	r2, [r3, #24]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6999      	ldr	r1, [r3, #24]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	021a      	lsls	r2, r3, #8
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	430a      	orrs	r2, r1
 800afa2:	619a      	str	r2, [r3, #24]
      break;
 800afa4:	e084      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68b9      	ldr	r1, [r7, #8]
 800afac:	4618      	mov	r0, r3
 800afae:	f000 fd3b 	bl	800ba28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f042 0208 	orr.w	r2, r2, #8
 800afc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69da      	ldr	r2, [r3, #28]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f022 0204 	bic.w	r2, r2, #4
 800afd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	69d9      	ldr	r1, [r3, #28]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	691a      	ldr	r2, [r3, #16]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	430a      	orrs	r2, r1
 800afe2:	61da      	str	r2, [r3, #28]
      break;
 800afe4:	e064      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fdad 	bl	800bb4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	69da      	ldr	r2, [r3, #28]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	69da      	ldr	r2, [r3, #28]
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	69d9      	ldr	r1, [r3, #28]
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	021a      	lsls	r2, r3, #8
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	430a      	orrs	r2, r1
 800b024:	61da      	str	r2, [r3, #28]
      break;
 800b026:	e043      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68b9      	ldr	r1, [r7, #8]
 800b02e:	4618      	mov	r0, r3
 800b030:	f000 fe20 	bl	800bc74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f042 0208 	orr.w	r2, r2, #8
 800b042:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f022 0204 	bic.w	r2, r2, #4
 800b052:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	691a      	ldr	r2, [r3, #16]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	430a      	orrs	r2, r1
 800b064:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b066:	e023      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68b9      	ldr	r1, [r7, #8]
 800b06e:	4618      	mov	r0, r3
 800b070:	f000 fe6a 	bl	800bd48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b082:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b092:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	021a      	lsls	r2, r3, #8
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b0a8:	e002      	b.n	800b0b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3718      	adds	r7, #24
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop

0800b0c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d101      	bne.n	800b0e0 <HAL_TIM_ConfigClockSource+0x1c>
 800b0dc:	2302      	movs	r3, #2
 800b0de:	e0f6      	b.n	800b2ce <HAL_TIM_ConfigClockSource+0x20a>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b0fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b102:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b10a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a6f      	ldr	r2, [pc, #444]	@ (800b2d8 <HAL_TIM_ConfigClockSource+0x214>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	f000 80c1 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b120:	4a6d      	ldr	r2, [pc, #436]	@ (800b2d8 <HAL_TIM_ConfigClockSource+0x214>)
 800b122:	4293      	cmp	r3, r2
 800b124:	f200 80c6 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b128:	4a6c      	ldr	r2, [pc, #432]	@ (800b2dc <HAL_TIM_ConfigClockSource+0x218>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	f000 80b9 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b130:	4a6a      	ldr	r2, [pc, #424]	@ (800b2dc <HAL_TIM_ConfigClockSource+0x218>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f200 80be 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b138:	4a69      	ldr	r2, [pc, #420]	@ (800b2e0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	f000 80b1 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b140:	4a67      	ldr	r2, [pc, #412]	@ (800b2e0 <HAL_TIM_ConfigClockSource+0x21c>)
 800b142:	4293      	cmp	r3, r2
 800b144:	f200 80b6 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b148:	4a66      	ldr	r2, [pc, #408]	@ (800b2e4 <HAL_TIM_ConfigClockSource+0x220>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	f000 80a9 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b150:	4a64      	ldr	r2, [pc, #400]	@ (800b2e4 <HAL_TIM_ConfigClockSource+0x220>)
 800b152:	4293      	cmp	r3, r2
 800b154:	f200 80ae 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b158:	4a63      	ldr	r2, [pc, #396]	@ (800b2e8 <HAL_TIM_ConfigClockSource+0x224>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	f000 80a1 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b160:	4a61      	ldr	r2, [pc, #388]	@ (800b2e8 <HAL_TIM_ConfigClockSource+0x224>)
 800b162:	4293      	cmp	r3, r2
 800b164:	f200 80a6 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b168:	4a60      	ldr	r2, [pc, #384]	@ (800b2ec <HAL_TIM_ConfigClockSource+0x228>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	f000 8099 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b170:	4a5e      	ldr	r2, [pc, #376]	@ (800b2ec <HAL_TIM_ConfigClockSource+0x228>)
 800b172:	4293      	cmp	r3, r2
 800b174:	f200 809e 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b178:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b17c:	f000 8091 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b180:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b184:	f200 8096 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b18c:	f000 8089 	beq.w	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b190:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b194:	f200 808e 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b19c:	d03e      	beq.n	800b21c <HAL_TIM_ConfigClockSource+0x158>
 800b19e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b1a2:	f200 8087 	bhi.w	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1aa:	f000 8086 	beq.w	800b2ba <HAL_TIM_ConfigClockSource+0x1f6>
 800b1ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1b2:	d87f      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1b4:	2b70      	cmp	r3, #112	@ 0x70
 800b1b6:	d01a      	beq.n	800b1ee <HAL_TIM_ConfigClockSource+0x12a>
 800b1b8:	2b70      	cmp	r3, #112	@ 0x70
 800b1ba:	d87b      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1bc:	2b60      	cmp	r3, #96	@ 0x60
 800b1be:	d050      	beq.n	800b262 <HAL_TIM_ConfigClockSource+0x19e>
 800b1c0:	2b60      	cmp	r3, #96	@ 0x60
 800b1c2:	d877      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1c4:	2b50      	cmp	r3, #80	@ 0x50
 800b1c6:	d03c      	beq.n	800b242 <HAL_TIM_ConfigClockSource+0x17e>
 800b1c8:	2b50      	cmp	r3, #80	@ 0x50
 800b1ca:	d873      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1cc:	2b40      	cmp	r3, #64	@ 0x40
 800b1ce:	d058      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0x1be>
 800b1d0:	2b40      	cmp	r3, #64	@ 0x40
 800b1d2:	d86f      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1d4:	2b30      	cmp	r3, #48	@ 0x30
 800b1d6:	d064      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1d8:	2b30      	cmp	r3, #48	@ 0x30
 800b1da:	d86b      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1dc:	2b20      	cmp	r3, #32
 800b1de:	d060      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1e0:	2b20      	cmp	r3, #32
 800b1e2:	d867      	bhi.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d05c      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1e8:	2b10      	cmp	r3, #16
 800b1ea:	d05a      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0x1de>
 800b1ec:	e062      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1fe:	f000 fe8b 	bl	800bf18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b210:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68ba      	ldr	r2, [r7, #8]
 800b218:	609a      	str	r2, [r3, #8]
      break;
 800b21a:	e04f      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b22c:	f000 fe74 	bl	800bf18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689a      	ldr	r2, [r3, #8]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b23e:	609a      	str	r2, [r3, #8]
      break;
 800b240:	e03c      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b24e:	461a      	mov	r2, r3
 800b250:	f000 fde6 	bl	800be20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2150      	movs	r1, #80	@ 0x50
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fe3f 	bl	800bede <TIM_ITRx_SetConfig>
      break;
 800b260:	e02c      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b26e:	461a      	mov	r2, r3
 800b270:	f000 fe05 	bl	800be7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2160      	movs	r1, #96	@ 0x60
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fe2f 	bl	800bede <TIM_ITRx_SetConfig>
      break;
 800b280:	e01c      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b28e:	461a      	mov	r2, r3
 800b290:	f000 fdc6 	bl	800be20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2140      	movs	r1, #64	@ 0x40
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 fe1f 	bl	800bede <TIM_ITRx_SetConfig>
      break;
 800b2a0:	e00c      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	f000 fe16 	bl	800bede <TIM_ITRx_SetConfig>
      break;
 800b2b2:	e003      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b8:	e000      	b.n	800b2bc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b2ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
 800b2d6:	bf00      	nop
 800b2d8:	00100070 	.word	0x00100070
 800b2dc:	00100060 	.word	0x00100060
 800b2e0:	00100050 	.word	0x00100050
 800b2e4:	00100040 	.word	0x00100040
 800b2e8:	00100030 	.word	0x00100030
 800b2ec:	00100020 	.word	0x00100020

0800b2f0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b340:	b480      	push	{r7}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b348:	bf00      	nop
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b370:	bf00      	nop
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b083      	sub	sp, #12
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b384:	bf00      	nop
 800b386:	370c      	adds	r7, #12
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b398:	bf00      	nop
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	60f8      	str	r0, [r7, #12]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e14a      	b.n	800b656 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	f040 80dd 	bne.w	800b588 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b3ce:	7afb      	ldrb	r3, [r7, #11]
 800b3d0:	2b1f      	cmp	r3, #31
 800b3d2:	f200 80d6 	bhi.w	800b582 <HAL_TIM_RegisterCallback+0x1de>
 800b3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3dc <HAL_TIM_RegisterCallback+0x38>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b45d 	.word	0x0800b45d
 800b3e0:	0800b465 	.word	0x0800b465
 800b3e4:	0800b46d 	.word	0x0800b46d
 800b3e8:	0800b475 	.word	0x0800b475
 800b3ec:	0800b47d 	.word	0x0800b47d
 800b3f0:	0800b485 	.word	0x0800b485
 800b3f4:	0800b48d 	.word	0x0800b48d
 800b3f8:	0800b495 	.word	0x0800b495
 800b3fc:	0800b49d 	.word	0x0800b49d
 800b400:	0800b4a5 	.word	0x0800b4a5
 800b404:	0800b4ad 	.word	0x0800b4ad
 800b408:	0800b4b5 	.word	0x0800b4b5
 800b40c:	0800b4bd 	.word	0x0800b4bd
 800b410:	0800b4c5 	.word	0x0800b4c5
 800b414:	0800b4cf 	.word	0x0800b4cf
 800b418:	0800b4d9 	.word	0x0800b4d9
 800b41c:	0800b4e3 	.word	0x0800b4e3
 800b420:	0800b4ed 	.word	0x0800b4ed
 800b424:	0800b4f7 	.word	0x0800b4f7
 800b428:	0800b501 	.word	0x0800b501
 800b42c:	0800b50b 	.word	0x0800b50b
 800b430:	0800b515 	.word	0x0800b515
 800b434:	0800b51f 	.word	0x0800b51f
 800b438:	0800b529 	.word	0x0800b529
 800b43c:	0800b533 	.word	0x0800b533
 800b440:	0800b53d 	.word	0x0800b53d
 800b444:	0800b547 	.word	0x0800b547
 800b448:	0800b551 	.word	0x0800b551
 800b44c:	0800b55b 	.word	0x0800b55b
 800b450:	0800b565 	.word	0x0800b565
 800b454:	0800b56f 	.word	0x0800b56f
 800b458:	0800b579 	.word	0x0800b579
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b462:	e0f7      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b46a:	e0f3      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b472:	e0ef      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b47a:	e0eb      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b482:	e0e7      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b48a:	e0e3      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b492:	e0df      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b49a:	e0db      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b4a2:	e0d7      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b4aa:	e0d3      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	687a      	ldr	r2, [r7, #4]
 800b4b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b4b2:	e0cf      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b4ba:	e0cb      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b4c2:	e0c7      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	687a      	ldr	r2, [r7, #4]
 800b4c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b4cc:	e0c2      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b4d6:	e0bd      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b4e0:	e0b8      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b4ea:	e0b3      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b4f4:	e0ae      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	687a      	ldr	r2, [r7, #4]
 800b4fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b4fe:	e0a9      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b508:	e0a4      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b512:	e09f      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b51c:	e09a      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b526:	e095      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b530:	e090      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b53a:	e08b      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b544:	e086      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b54e:	e081      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b558:	e07c      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b562:	e077      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b56c:	e072      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b576:	e06d      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b580:	e068      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	75fb      	strb	r3, [r7, #23]
        break;
 800b586:	e065      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b00      	cmp	r3, #0
 800b592:	d15d      	bne.n	800b650 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b594:	7afb      	ldrb	r3, [r7, #11]
 800b596:	2b0d      	cmp	r3, #13
 800b598:	d857      	bhi.n	800b64a <HAL_TIM_RegisterCallback+0x2a6>
 800b59a:	a201      	add	r2, pc, #4	@ (adr r2, 800b5a0 <HAL_TIM_RegisterCallback+0x1fc>)
 800b59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a0:	0800b5d9 	.word	0x0800b5d9
 800b5a4:	0800b5e1 	.word	0x0800b5e1
 800b5a8:	0800b5e9 	.word	0x0800b5e9
 800b5ac:	0800b5f1 	.word	0x0800b5f1
 800b5b0:	0800b5f9 	.word	0x0800b5f9
 800b5b4:	0800b601 	.word	0x0800b601
 800b5b8:	0800b609 	.word	0x0800b609
 800b5bc:	0800b611 	.word	0x0800b611
 800b5c0:	0800b619 	.word	0x0800b619
 800b5c4:	0800b621 	.word	0x0800b621
 800b5c8:	0800b629 	.word	0x0800b629
 800b5cc:	0800b631 	.word	0x0800b631
 800b5d0:	0800b639 	.word	0x0800b639
 800b5d4:	0800b641 	.word	0x0800b641
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b5de:	e039      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b5e6:	e035      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b5ee:	e031      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b5f6:	e02d      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b5fe:	e029      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b606:	e025      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	687a      	ldr	r2, [r7, #4]
 800b60c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b60e:	e021      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b616:	e01d      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b61e:	e019      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	687a      	ldr	r2, [r7, #4]
 800b624:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b626:	e015      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b62e:	e011      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b636:	e00d      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b63e:	e009      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b648:	e004      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	75fb      	strb	r3, [r7, #23]
        break;
 800b64e:	e001      	b.n	800b654 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b654:	7dfb      	ldrb	r3, [r7, #23]
}
 800b656:	4618      	mov	r0, r3
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop

0800b664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a4c      	ldr	r2, [pc, #304]	@ (800b7a8 <TIM_Base_SetConfig+0x144>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d017      	beq.n	800b6ac <TIM_Base_SetConfig+0x48>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b682:	d013      	beq.n	800b6ac <TIM_Base_SetConfig+0x48>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a49      	ldr	r2, [pc, #292]	@ (800b7ac <TIM_Base_SetConfig+0x148>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d00f      	beq.n	800b6ac <TIM_Base_SetConfig+0x48>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a48      	ldr	r2, [pc, #288]	@ (800b7b0 <TIM_Base_SetConfig+0x14c>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d00b      	beq.n	800b6ac <TIM_Base_SetConfig+0x48>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a47      	ldr	r2, [pc, #284]	@ (800b7b4 <TIM_Base_SetConfig+0x150>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d007      	beq.n	800b6ac <TIM_Base_SetConfig+0x48>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a46      	ldr	r2, [pc, #280]	@ (800b7b8 <TIM_Base_SetConfig+0x154>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d003      	beq.n	800b6ac <TIM_Base_SetConfig+0x48>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	4a45      	ldr	r2, [pc, #276]	@ (800b7bc <TIM_Base_SetConfig+0x158>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d108      	bne.n	800b6be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4a39      	ldr	r2, [pc, #228]	@ (800b7a8 <TIM_Base_SetConfig+0x144>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d023      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6cc:	d01f      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a36      	ldr	r2, [pc, #216]	@ (800b7ac <TIM_Base_SetConfig+0x148>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d01b      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a35      	ldr	r2, [pc, #212]	@ (800b7b0 <TIM_Base_SetConfig+0x14c>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d017      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a34      	ldr	r2, [pc, #208]	@ (800b7b4 <TIM_Base_SetConfig+0x150>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d013      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a33      	ldr	r2, [pc, #204]	@ (800b7b8 <TIM_Base_SetConfig+0x154>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d00f      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a33      	ldr	r2, [pc, #204]	@ (800b7c0 <TIM_Base_SetConfig+0x15c>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d00b      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a32      	ldr	r2, [pc, #200]	@ (800b7c4 <TIM_Base_SetConfig+0x160>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d007      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a31      	ldr	r2, [pc, #196]	@ (800b7c8 <TIM_Base_SetConfig+0x164>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d003      	beq.n	800b70e <TIM_Base_SetConfig+0xaa>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	4a2c      	ldr	r2, [pc, #176]	@ (800b7bc <TIM_Base_SetConfig+0x158>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d108      	bne.n	800b720 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	4313      	orrs	r3, r2
 800b71e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	689a      	ldr	r2, [r3, #8]
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a18      	ldr	r2, [pc, #96]	@ (800b7a8 <TIM_Base_SetConfig+0x144>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d013      	beq.n	800b774 <TIM_Base_SetConfig+0x110>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a1a      	ldr	r2, [pc, #104]	@ (800b7b8 <TIM_Base_SetConfig+0x154>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d00f      	beq.n	800b774 <TIM_Base_SetConfig+0x110>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a1a      	ldr	r2, [pc, #104]	@ (800b7c0 <TIM_Base_SetConfig+0x15c>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d00b      	beq.n	800b774 <TIM_Base_SetConfig+0x110>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a19      	ldr	r2, [pc, #100]	@ (800b7c4 <TIM_Base_SetConfig+0x160>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d007      	beq.n	800b774 <TIM_Base_SetConfig+0x110>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a18      	ldr	r2, [pc, #96]	@ (800b7c8 <TIM_Base_SetConfig+0x164>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d003      	beq.n	800b774 <TIM_Base_SetConfig+0x110>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a13      	ldr	r2, [pc, #76]	@ (800b7bc <TIM_Base_SetConfig+0x158>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d103      	bne.n	800b77c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	691a      	ldr	r2, [r3, #16]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2201      	movs	r2, #1
 800b780:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d105      	bne.n	800b79a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	691b      	ldr	r3, [r3, #16]
 800b792:	f023 0201 	bic.w	r2, r3, #1
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	611a      	str	r2, [r3, #16]
  }
}
 800b79a:	bf00      	nop
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	40012c00 	.word	0x40012c00
 800b7ac:	40000400 	.word	0x40000400
 800b7b0:	40000800 	.word	0x40000800
 800b7b4:	40000c00 	.word	0x40000c00
 800b7b8:	40013400 	.word	0x40013400
 800b7bc:	40015000 	.word	0x40015000
 800b7c0:	40014000 	.word	0x40014000
 800b7c4:	40014400 	.word	0x40014400
 800b7c8:	40014800 	.word	0x40014800

0800b7cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b087      	sub	sp, #28
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	f023 0201 	bic.w	r2, r3, #1
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b7fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f023 0303 	bic.w	r3, r3, #3
 800b806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68fa      	ldr	r2, [r7, #12]
 800b80e:	4313      	orrs	r3, r2
 800b810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f023 0302 	bic.w	r3, r3, #2
 800b818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	689b      	ldr	r3, [r3, #8]
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	4313      	orrs	r3, r2
 800b822:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a30      	ldr	r2, [pc, #192]	@ (800b8e8 <TIM_OC1_SetConfig+0x11c>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d013      	beq.n	800b854 <TIM_OC1_SetConfig+0x88>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a2f      	ldr	r2, [pc, #188]	@ (800b8ec <TIM_OC1_SetConfig+0x120>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d00f      	beq.n	800b854 <TIM_OC1_SetConfig+0x88>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a2e      	ldr	r2, [pc, #184]	@ (800b8f0 <TIM_OC1_SetConfig+0x124>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d00b      	beq.n	800b854 <TIM_OC1_SetConfig+0x88>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a2d      	ldr	r2, [pc, #180]	@ (800b8f4 <TIM_OC1_SetConfig+0x128>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d007      	beq.n	800b854 <TIM_OC1_SetConfig+0x88>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a2c      	ldr	r2, [pc, #176]	@ (800b8f8 <TIM_OC1_SetConfig+0x12c>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d003      	beq.n	800b854 <TIM_OC1_SetConfig+0x88>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a2b      	ldr	r2, [pc, #172]	@ (800b8fc <TIM_OC1_SetConfig+0x130>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d10c      	bne.n	800b86e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	f023 0308 	bic.w	r3, r3, #8
 800b85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	4313      	orrs	r3, r2
 800b864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f023 0304 	bic.w	r3, r3, #4
 800b86c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a1d      	ldr	r2, [pc, #116]	@ (800b8e8 <TIM_OC1_SetConfig+0x11c>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d013      	beq.n	800b89e <TIM_OC1_SetConfig+0xd2>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a1c      	ldr	r2, [pc, #112]	@ (800b8ec <TIM_OC1_SetConfig+0x120>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d00f      	beq.n	800b89e <TIM_OC1_SetConfig+0xd2>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a1b      	ldr	r2, [pc, #108]	@ (800b8f0 <TIM_OC1_SetConfig+0x124>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d00b      	beq.n	800b89e <TIM_OC1_SetConfig+0xd2>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a1a      	ldr	r2, [pc, #104]	@ (800b8f4 <TIM_OC1_SetConfig+0x128>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d007      	beq.n	800b89e <TIM_OC1_SetConfig+0xd2>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a19      	ldr	r2, [pc, #100]	@ (800b8f8 <TIM_OC1_SetConfig+0x12c>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d003      	beq.n	800b89e <TIM_OC1_SetConfig+0xd2>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a18      	ldr	r2, [pc, #96]	@ (800b8fc <TIM_OC1_SetConfig+0x130>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d111      	bne.n	800b8c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	693a      	ldr	r2, [r7, #16]
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	68fa      	ldr	r2, [r7, #12]
 800b8cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	685a      	ldr	r2, [r3, #4]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	621a      	str	r2, [r3, #32]
}
 800b8dc:	bf00      	nop
 800b8de:	371c      	adds	r7, #28
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr
 800b8e8:	40012c00 	.word	0x40012c00
 800b8ec:	40013400 	.word	0x40013400
 800b8f0:	40014000 	.word	0x40014000
 800b8f4:	40014400 	.word	0x40014400
 800b8f8:	40014800 	.word	0x40014800
 800b8fc:	40015000 	.word	0x40015000

0800b900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b900:	b480      	push	{r7}
 800b902:	b087      	sub	sp, #28
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a1b      	ldr	r3, [r3, #32]
 800b90e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6a1b      	ldr	r3, [r3, #32]
 800b914:	f023 0210 	bic.w	r2, r3, #16
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b92e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b93a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	021b      	lsls	r3, r3, #8
 800b942:	68fa      	ldr	r2, [r7, #12]
 800b944:	4313      	orrs	r3, r2
 800b946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	f023 0320 	bic.w	r3, r3, #32
 800b94e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	011b      	lsls	r3, r3, #4
 800b956:	697a      	ldr	r2, [r7, #20]
 800b958:	4313      	orrs	r3, r2
 800b95a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a2c      	ldr	r2, [pc, #176]	@ (800ba10 <TIM_OC2_SetConfig+0x110>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d007      	beq.n	800b974 <TIM_OC2_SetConfig+0x74>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a2b      	ldr	r2, [pc, #172]	@ (800ba14 <TIM_OC2_SetConfig+0x114>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d003      	beq.n	800b974 <TIM_OC2_SetConfig+0x74>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a2a      	ldr	r2, [pc, #168]	@ (800ba18 <TIM_OC2_SetConfig+0x118>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d10d      	bne.n	800b990 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b97a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	68db      	ldr	r3, [r3, #12]
 800b980:	011b      	lsls	r3, r3, #4
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	4313      	orrs	r3, r2
 800b986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b98e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4a1f      	ldr	r2, [pc, #124]	@ (800ba10 <TIM_OC2_SetConfig+0x110>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d013      	beq.n	800b9c0 <TIM_OC2_SetConfig+0xc0>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a1e      	ldr	r2, [pc, #120]	@ (800ba14 <TIM_OC2_SetConfig+0x114>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d00f      	beq.n	800b9c0 <TIM_OC2_SetConfig+0xc0>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba1c <TIM_OC2_SetConfig+0x11c>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d00b      	beq.n	800b9c0 <TIM_OC2_SetConfig+0xc0>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a1d      	ldr	r2, [pc, #116]	@ (800ba20 <TIM_OC2_SetConfig+0x120>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d007      	beq.n	800b9c0 <TIM_OC2_SetConfig+0xc0>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a1c      	ldr	r2, [pc, #112]	@ (800ba24 <TIM_OC2_SetConfig+0x124>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d003      	beq.n	800b9c0 <TIM_OC2_SetConfig+0xc0>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a17      	ldr	r2, [pc, #92]	@ (800ba18 <TIM_OC2_SetConfig+0x118>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d113      	bne.n	800b9e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b9c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b9ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685a      	ldr	r2, [r3, #4]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	621a      	str	r2, [r3, #32]
}
 800ba02:	bf00      	nop
 800ba04:	371c      	adds	r7, #28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	40012c00 	.word	0x40012c00
 800ba14:	40013400 	.word	0x40013400
 800ba18:	40015000 	.word	0x40015000
 800ba1c:	40014000 	.word	0x40014000
 800ba20:	40014400 	.word	0x40014400
 800ba24:	40014800 	.word	0x40014800

0800ba28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	69db      	ldr	r3, [r3, #28]
 800ba4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f023 0303 	bic.w	r3, r3, #3
 800ba62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	697a      	ldr	r2, [r7, #20]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a2b      	ldr	r2, [pc, #172]	@ (800bb34 <TIM_OC3_SetConfig+0x10c>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d007      	beq.n	800ba9a <TIM_OC3_SetConfig+0x72>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	4a2a      	ldr	r2, [pc, #168]	@ (800bb38 <TIM_OC3_SetConfig+0x110>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d003      	beq.n	800ba9a <TIM_OC3_SetConfig+0x72>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4a29      	ldr	r2, [pc, #164]	@ (800bb3c <TIM_OC3_SetConfig+0x114>)
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d10d      	bne.n	800bab6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800baa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	021b      	lsls	r3, r3, #8
 800baa8:	697a      	ldr	r2, [r7, #20]
 800baaa:	4313      	orrs	r3, r2
 800baac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	4a1e      	ldr	r2, [pc, #120]	@ (800bb34 <TIM_OC3_SetConfig+0x10c>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d013      	beq.n	800bae6 <TIM_OC3_SetConfig+0xbe>
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a1d      	ldr	r2, [pc, #116]	@ (800bb38 <TIM_OC3_SetConfig+0x110>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d00f      	beq.n	800bae6 <TIM_OC3_SetConfig+0xbe>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb40 <TIM_OC3_SetConfig+0x118>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d00b      	beq.n	800bae6 <TIM_OC3_SetConfig+0xbe>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	4a1c      	ldr	r2, [pc, #112]	@ (800bb44 <TIM_OC3_SetConfig+0x11c>)
 800bad2:	4293      	cmp	r3, r2
 800bad4:	d007      	beq.n	800bae6 <TIM_OC3_SetConfig+0xbe>
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a1b      	ldr	r2, [pc, #108]	@ (800bb48 <TIM_OC3_SetConfig+0x120>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d003      	beq.n	800bae6 <TIM_OC3_SetConfig+0xbe>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a16      	ldr	r2, [pc, #88]	@ (800bb3c <TIM_OC3_SetConfig+0x114>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d113      	bne.n	800bb0e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800baec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800baf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	011b      	lsls	r3, r3, #4
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	699b      	ldr	r3, [r3, #24]
 800bb06:	011b      	lsls	r3, r3, #4
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	693a      	ldr	r2, [r7, #16]
 800bb12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	685a      	ldr	r2, [r3, #4]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	621a      	str	r2, [r3, #32]
}
 800bb28:	bf00      	nop
 800bb2a:	371c      	adds	r7, #28
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr
 800bb34:	40012c00 	.word	0x40012c00
 800bb38:	40013400 	.word	0x40013400
 800bb3c:	40015000 	.word	0x40015000
 800bb40:	40014000 	.word	0x40014000
 800bb44:	40014400 	.word	0x40014400
 800bb48:	40014800 	.word	0x40014800

0800bb4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6a1b      	ldr	r3, [r3, #32]
 800bb5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	021b      	lsls	r3, r3, #8
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bb9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	031b      	lsls	r3, r3, #12
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4a2c      	ldr	r2, [pc, #176]	@ (800bc5c <TIM_OC4_SetConfig+0x110>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d007      	beq.n	800bbc0 <TIM_OC4_SetConfig+0x74>
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4a2b      	ldr	r2, [pc, #172]	@ (800bc60 <TIM_OC4_SetConfig+0x114>)
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d003      	beq.n	800bbc0 <TIM_OC4_SetConfig+0x74>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a2a      	ldr	r2, [pc, #168]	@ (800bc64 <TIM_OC4_SetConfig+0x118>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d10d      	bne.n	800bbdc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bbc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	031b      	lsls	r3, r3, #12
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1f      	ldr	r2, [pc, #124]	@ (800bc5c <TIM_OC4_SetConfig+0x110>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d013      	beq.n	800bc0c <TIM_OC4_SetConfig+0xc0>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc60 <TIM_OC4_SetConfig+0x114>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d00f      	beq.n	800bc0c <TIM_OC4_SetConfig+0xc0>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a1e      	ldr	r2, [pc, #120]	@ (800bc68 <TIM_OC4_SetConfig+0x11c>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d00b      	beq.n	800bc0c <TIM_OC4_SetConfig+0xc0>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a1d      	ldr	r2, [pc, #116]	@ (800bc6c <TIM_OC4_SetConfig+0x120>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d007      	beq.n	800bc0c <TIM_OC4_SetConfig+0xc0>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a1c      	ldr	r2, [pc, #112]	@ (800bc70 <TIM_OC4_SetConfig+0x124>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d003      	beq.n	800bc0c <TIM_OC4_SetConfig+0xc0>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a17      	ldr	r2, [pc, #92]	@ (800bc64 <TIM_OC4_SetConfig+0x118>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d113      	bne.n	800bc34 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	019b      	lsls	r3, r3, #6
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	019b      	lsls	r3, r3, #6
 800bc2e:	693a      	ldr	r2, [r7, #16]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	685a      	ldr	r2, [r3, #4]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	697a      	ldr	r2, [r7, #20]
 800bc4c:	621a      	str	r2, [r3, #32]
}
 800bc4e:	bf00      	nop
 800bc50:	371c      	adds	r7, #28
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr
 800bc5a:	bf00      	nop
 800bc5c:	40012c00 	.word	0x40012c00
 800bc60:	40013400 	.word	0x40013400
 800bc64:	40015000 	.word	0x40015000
 800bc68:	40014000 	.word	0x40014000
 800bc6c:	40014400 	.word	0x40014400
 800bc70:	40014800 	.word	0x40014800

0800bc74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b087      	sub	sp, #28
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a1b      	ldr	r3, [r3, #32]
 800bc88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bcb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	689b      	ldr	r3, [r3, #8]
 800bcbe:	041b      	lsls	r3, r3, #16
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a19      	ldr	r2, [pc, #100]	@ (800bd30 <TIM_OC5_SetConfig+0xbc>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d013      	beq.n	800bcf6 <TIM_OC5_SetConfig+0x82>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a18      	ldr	r2, [pc, #96]	@ (800bd34 <TIM_OC5_SetConfig+0xc0>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d00f      	beq.n	800bcf6 <TIM_OC5_SetConfig+0x82>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a17      	ldr	r2, [pc, #92]	@ (800bd38 <TIM_OC5_SetConfig+0xc4>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d00b      	beq.n	800bcf6 <TIM_OC5_SetConfig+0x82>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a16      	ldr	r2, [pc, #88]	@ (800bd3c <TIM_OC5_SetConfig+0xc8>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d007      	beq.n	800bcf6 <TIM_OC5_SetConfig+0x82>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a15      	ldr	r2, [pc, #84]	@ (800bd40 <TIM_OC5_SetConfig+0xcc>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d003      	beq.n	800bcf6 <TIM_OC5_SetConfig+0x82>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a14      	ldr	r2, [pc, #80]	@ (800bd44 <TIM_OC5_SetConfig+0xd0>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d109      	bne.n	800bd0a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcfc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	695b      	ldr	r3, [r3, #20]
 800bd02:	021b      	lsls	r3, r3, #8
 800bd04:	697a      	ldr	r2, [r7, #20]
 800bd06:	4313      	orrs	r3, r2
 800bd08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	685a      	ldr	r2, [r3, #4]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	621a      	str	r2, [r3, #32]
}
 800bd24:	bf00      	nop
 800bd26:	371c      	adds	r7, #28
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	40012c00 	.word	0x40012c00
 800bd34:	40013400 	.word	0x40013400
 800bd38:	40014000 	.word	0x40014000
 800bd3c:	40014400 	.word	0x40014400
 800bd40:	40014800 	.word	0x40014800
 800bd44:	40015000 	.word	0x40015000

0800bd48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a1b      	ldr	r3, [r3, #32]
 800bd56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6a1b      	ldr	r3, [r3, #32]
 800bd5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	021b      	lsls	r3, r3, #8
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bd8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	051b      	lsls	r3, r3, #20
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	4a1a      	ldr	r2, [pc, #104]	@ (800be08 <TIM_OC6_SetConfig+0xc0>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d013      	beq.n	800bdcc <TIM_OC6_SetConfig+0x84>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a19      	ldr	r2, [pc, #100]	@ (800be0c <TIM_OC6_SetConfig+0xc4>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d00f      	beq.n	800bdcc <TIM_OC6_SetConfig+0x84>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a18      	ldr	r2, [pc, #96]	@ (800be10 <TIM_OC6_SetConfig+0xc8>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d00b      	beq.n	800bdcc <TIM_OC6_SetConfig+0x84>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a17      	ldr	r2, [pc, #92]	@ (800be14 <TIM_OC6_SetConfig+0xcc>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d007      	beq.n	800bdcc <TIM_OC6_SetConfig+0x84>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a16      	ldr	r2, [pc, #88]	@ (800be18 <TIM_OC6_SetConfig+0xd0>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d003      	beq.n	800bdcc <TIM_OC6_SetConfig+0x84>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a15      	ldr	r2, [pc, #84]	@ (800be1c <TIM_OC6_SetConfig+0xd4>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d109      	bne.n	800bde0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdcc:	697b      	ldr	r3, [r7, #20]
 800bdce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	695b      	ldr	r3, [r3, #20]
 800bdd8:	029b      	lsls	r3, r3, #10
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	621a      	str	r2, [r3, #32]
}
 800bdfa:	bf00      	nop
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40012c00 	.word	0x40012c00
 800be0c:	40013400 	.word	0x40013400
 800be10:	40014000 	.word	0x40014000
 800be14:	40014400 	.word	0x40014400
 800be18:	40014800 	.word	0x40014800
 800be1c:	40015000 	.word	0x40015000

0800be20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be20:	b480      	push	{r7}
 800be22:	b087      	sub	sp, #28
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	f023 0201 	bic.w	r2, r3, #1
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	011b      	lsls	r3, r3, #4
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	4313      	orrs	r3, r2
 800be54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	f023 030a 	bic.w	r3, r3, #10
 800be5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be5e:	697a      	ldr	r2, [r7, #20]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	4313      	orrs	r3, r2
 800be64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	621a      	str	r2, [r3, #32]
}
 800be72:	bf00      	nop
 800be74:	371c      	adds	r7, #28
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be7e:	b480      	push	{r7}
 800be80:	b087      	sub	sp, #28
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6a1b      	ldr	r3, [r3, #32]
 800be94:	f023 0210 	bic.w	r2, r3, #16
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	699b      	ldr	r3, [r3, #24]
 800bea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	031b      	lsls	r3, r3, #12
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800beba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	621a      	str	r2, [r3, #32]
}
 800bed2:	bf00      	nop
 800bed4:	371c      	adds	r7, #28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bede:	b480      	push	{r7}
 800bee0:	b085      	sub	sp, #20
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	4313      	orrs	r3, r2
 800bf00:	f043 0307 	orr.w	r3, r3, #7
 800bf04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	609a      	str	r2, [r3, #8]
}
 800bf0c:	bf00      	nop
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	021a      	lsls	r2, r3, #8
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	697a      	ldr	r2, [r7, #20]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	697a      	ldr	r2, [r7, #20]
 800bf4a:	609a      	str	r2, [r3, #8]
}
 800bf4c:	bf00      	nop
 800bf4e:	371c      	adds	r7, #28
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b087      	sub	sp, #28
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	f003 031f 	and.w	r3, r3, #31
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	6a1a      	ldr	r2, [r3, #32]
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	43db      	mvns	r3, r3
 800bf7a:	401a      	ands	r2, r3
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	6a1a      	ldr	r2, [r3, #32]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	f003 031f 	and.w	r3, r3, #31
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf90:	431a      	orrs	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	621a      	str	r2, [r3, #32]
}
 800bf96:	bf00      	nop
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr
	...

0800bfa4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4a26      	ldr	r2, [pc, #152]	@ (800c048 <TIM_ResetCallback+0xa4>)
 800bfb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a25      	ldr	r2, [pc, #148]	@ (800c04c <TIM_ResetCallback+0xa8>)
 800bfb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	4a24      	ldr	r2, [pc, #144]	@ (800c050 <TIM_ResetCallback+0xac>)
 800bfc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a23      	ldr	r2, [pc, #140]	@ (800c054 <TIM_ResetCallback+0xb0>)
 800bfc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a22      	ldr	r2, [pc, #136]	@ (800c058 <TIM_ResetCallback+0xb4>)
 800bfd0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a21      	ldr	r2, [pc, #132]	@ (800c05c <TIM_ResetCallback+0xb8>)
 800bfd8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a20      	ldr	r2, [pc, #128]	@ (800c060 <TIM_ResetCallback+0xbc>)
 800bfe0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a1f      	ldr	r2, [pc, #124]	@ (800c064 <TIM_ResetCallback+0xc0>)
 800bfe8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a1e      	ldr	r2, [pc, #120]	@ (800c068 <TIM_ResetCallback+0xc4>)
 800bff0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4a1d      	ldr	r2, [pc, #116]	@ (800c06c <TIM_ResetCallback+0xc8>)
 800bff8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a1c      	ldr	r2, [pc, #112]	@ (800c070 <TIM_ResetCallback+0xcc>)
 800c000:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a1b      	ldr	r2, [pc, #108]	@ (800c074 <TIM_ResetCallback+0xd0>)
 800c008:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a1a      	ldr	r2, [pc, #104]	@ (800c078 <TIM_ResetCallback+0xd4>)
 800c010:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a19      	ldr	r2, [pc, #100]	@ (800c07c <TIM_ResetCallback+0xd8>)
 800c018:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a18      	ldr	r2, [pc, #96]	@ (800c080 <TIM_ResetCallback+0xdc>)
 800c020:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a17      	ldr	r2, [pc, #92]	@ (800c084 <TIM_ResetCallback+0xe0>)
 800c028:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a16      	ldr	r2, [pc, #88]	@ (800c088 <TIM_ResetCallback+0xe4>)
 800c030:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a15      	ldr	r2, [pc, #84]	@ (800c08c <TIM_ResetCallback+0xe8>)
 800c038:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800c03c:	bf00      	nop
 800c03e:	370c      	adds	r7, #12
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr
 800c048:	08005135 	.word	0x08005135
 800c04c:	0800b2f1 	.word	0x0800b2f1
 800c050:	0800b369 	.word	0x0800b369
 800c054:	0800b37d 	.word	0x0800b37d
 800c058:	0800b319 	.word	0x0800b319
 800c05c:	0800b32d 	.word	0x0800b32d
 800c060:	0800b305 	.word	0x0800b305
 800c064:	0800b341 	.word	0x0800b341
 800c068:	0800b355 	.word	0x0800b355
 800c06c:	0800b391 	.word	0x0800b391
 800c070:	0800c2e5 	.word	0x0800c2e5
 800c074:	0800c2f9 	.word	0x0800c2f9
 800c078:	0800c30d 	.word	0x0800c30d
 800c07c:	0800c321 	.word	0x0800c321
 800c080:	0800c335 	.word	0x0800c335
 800c084:	0800c349 	.word	0x0800c349
 800c088:	0800c35d 	.word	0x0800c35d
 800c08c:	0800c371 	.word	0x0800c371

0800c090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d101      	bne.n	800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0a4:	2302      	movs	r3, #2
 800c0a6:	e074      	b.n	800c192 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	689b      	ldr	r3, [r3, #8]
 800c0c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a34      	ldr	r2, [pc, #208]	@ (800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d009      	beq.n	800c0e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a33      	ldr	r2, [pc, #204]	@ (800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d004      	beq.n	800c0e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a31      	ldr	r2, [pc, #196]	@ (800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d108      	bne.n	800c0f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c0ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c0fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a21      	ldr	r2, [pc, #132]	@ (800c1a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d022      	beq.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c128:	d01d      	beq.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d018      	beq.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a1d      	ldr	r2, [pc, #116]	@ (800c1b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d013      	beq.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a1c      	ldr	r2, [pc, #112]	@ (800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d00e      	beq.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a15      	ldr	r2, [pc, #84]	@ (800c1a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d009      	beq.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a18      	ldr	r2, [pc, #96]	@ (800c1b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d004      	beq.n	800c166 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a11      	ldr	r2, [pc, #68]	@ (800c1a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d10c      	bne.n	800c180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c16c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	4313      	orrs	r3, r2
 800c176:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2200      	movs	r2, #0
 800c18c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	3714      	adds	r7, #20
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	40012c00 	.word	0x40012c00
 800c1a4:	40013400 	.word	0x40013400
 800c1a8:	40015000 	.word	0x40015000
 800c1ac:	40000400 	.word	0x40000400
 800c1b0:	40000800 	.word	0x40000800
 800c1b4:	40000c00 	.word	0x40000c00
 800c1b8:	40014000 	.word	0x40014000

0800c1bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b085      	sub	sp, #20
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d101      	bne.n	800c1d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c1d4:	2302      	movs	r3, #2
 800c1d6:	e078      	b.n	800c2ca <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	4313      	orrs	r3, r2
 800c208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4313      	orrs	r3, r2
 800c216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	4313      	orrs	r3, r2
 800c232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	041b      	lsls	r3, r3, #16
 800c24e:	4313      	orrs	r3, r2
 800c250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	69db      	ldr	r3, [r3, #28]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a1c      	ldr	r2, [pc, #112]	@ (800c2d8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d009      	beq.n	800c27e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a1b      	ldr	r2, [pc, #108]	@ (800c2dc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a19      	ldr	r2, [pc, #100]	@ (800c2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d11c      	bne.n	800c2b8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c288:	051b      	lsls	r3, r3, #20
 800c28a:	4313      	orrs	r3, r2
 800c28c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	4313      	orrs	r3, r2
 800c29a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3714      	adds	r7, #20
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	40012c00 	.word	0x40012c00
 800c2dc:	40013400 	.word	0x40013400
 800c2e0:	40015000 	.word	0x40015000

0800c2e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c2ec:	bf00      	nop
 800c2ee:	370c      	adds	r7, #12
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c300:	bf00      	nop
 800c302:	370c      	adds	r7, #12
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c314:	bf00      	nop
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c328:	bf00      	nop
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	e050      	b.n	800c438 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d114      	bne.n	800c3ca <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 fe37 	bl	800d01c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a21      	ldr	r2, [pc, #132]	@ (800c440 <HAL_UART_Init+0xbc>)
 800c3bc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2224      	movs	r2, #36	@ 0x24
 800c3ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	681a      	ldr	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 0201 	bic.w	r2, r2, #1
 800c3e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d002      	beq.n	800c3f0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f001 f964 	bl	800d6b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f000 fe65 	bl	800d0c0 <UART_SetConfig>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e01b      	b.n	800c438 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685a      	ldr	r2, [r3, #4]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c40e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	689a      	ldr	r2, [r3, #8]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c41e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f042 0201 	orr.w	r2, r2, #1
 800c42e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f001 f9e3 	bl	800d7fc <UART_CheckIdleState>
 800c436:	4603      	mov	r3, r0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}
 800c440:	0800634d 	.word	0x0800634d

0800c444 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	460b      	mov	r3, r1
 800c44e:	607a      	str	r2, [r7, #4]
 800c450:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d109      	bne.n	800c470 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c462:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e09c      	b.n	800c5aa <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c476:	2b20      	cmp	r3, #32
 800c478:	d16c      	bne.n	800c554 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c47a:	7afb      	ldrb	r3, [r7, #11]
 800c47c:	2b0c      	cmp	r3, #12
 800c47e:	d85e      	bhi.n	800c53e <HAL_UART_RegisterCallback+0xfa>
 800c480:	a201      	add	r2, pc, #4	@ (adr r2, 800c488 <HAL_UART_RegisterCallback+0x44>)
 800c482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c486:	bf00      	nop
 800c488:	0800c4bd 	.word	0x0800c4bd
 800c48c:	0800c4c7 	.word	0x0800c4c7
 800c490:	0800c4d1 	.word	0x0800c4d1
 800c494:	0800c4db 	.word	0x0800c4db
 800c498:	0800c4e5 	.word	0x0800c4e5
 800c49c:	0800c4ef 	.word	0x0800c4ef
 800c4a0:	0800c4f9 	.word	0x0800c4f9
 800c4a4:	0800c503 	.word	0x0800c503
 800c4a8:	0800c50d 	.word	0x0800c50d
 800c4ac:	0800c517 	.word	0x0800c517
 800c4b0:	0800c521 	.word	0x0800c521
 800c4b4:	0800c52b 	.word	0x0800c52b
 800c4b8:	0800c535 	.word	0x0800c535
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c4c4:	e070      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c4ce:	e06b      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c4d8:	e066      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c4e2:	e061      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c4ec:	e05c      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c4f6:	e057      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c500:	e052      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c50a:	e04d      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c514:	e048      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c51e:	e043      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c528:	e03e      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c532:	e039      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c53c:	e034      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c544:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	75fb      	strb	r3, [r7, #23]
        break;
 800c552:	e029      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d11a      	bne.n	800c594 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c55e:	7afb      	ldrb	r3, [r7, #11]
 800c560:	2b0b      	cmp	r3, #11
 800c562:	d002      	beq.n	800c56a <HAL_UART_RegisterCallback+0x126>
 800c564:	2b0c      	cmp	r3, #12
 800c566:	d005      	beq.n	800c574 <HAL_UART_RegisterCallback+0x130>
 800c568:	e009      	b.n	800c57e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c572:	e019      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c57c:	e014      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c584:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	75fb      	strb	r3, [r7, #23]
        break;
 800c592:	e009      	b.n	800c5a8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c59a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr
 800c5b6:	bf00      	nop

0800c5b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08a      	sub	sp, #40	@ 0x28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5cc:	2b20      	cmp	r3, #32
 800c5ce:	d137      	bne.n	800c640 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <HAL_UART_Receive_IT+0x24>
 800c5d6:	88fb      	ldrh	r3, [r7, #6]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e030      	b.n	800c642 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a18      	ldr	r2, [pc, #96]	@ (800c64c <HAL_UART_Receive_IT+0x94>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d01f      	beq.n	800c630 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d018      	beq.n	800c630 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	e853 3f00 	ldrex	r3, [r3]
 800c60a:	613b      	str	r3, [r7, #16]
   return(result);
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c612:	627b      	str	r3, [r7, #36]	@ 0x24
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	461a      	mov	r2, r3
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	623b      	str	r3, [r7, #32]
 800c61e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c620:	69f9      	ldr	r1, [r7, #28]
 800c622:	6a3a      	ldr	r2, [r7, #32]
 800c624:	e841 2300 	strex	r3, r2, [r1]
 800c628:	61bb      	str	r3, [r7, #24]
   return(result);
 800c62a:	69bb      	ldr	r3, [r7, #24]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d1e6      	bne.n	800c5fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c630:	88fb      	ldrh	r3, [r7, #6]
 800c632:	461a      	mov	r2, r3
 800c634:	68b9      	ldr	r1, [r7, #8]
 800c636:	68f8      	ldr	r0, [r7, #12]
 800c638:	f001 f9f8 	bl	800da2c <UART_Start_Receive_IT>
 800c63c:	4603      	mov	r3, r0
 800c63e:	e000      	b.n	800c642 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c640:	2302      	movs	r3, #2
  }
}
 800c642:	4618      	mov	r0, r3
 800c644:	3728      	adds	r7, #40	@ 0x28
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	40008000 	.word	0x40008000

0800c650 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b08a      	sub	sp, #40	@ 0x28
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	4613      	mov	r3, r2
 800c65c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c664:	2b20      	cmp	r3, #32
 800c666:	d167      	bne.n	800c738 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d002      	beq.n	800c674 <HAL_UART_Transmit_DMA+0x24>
 800c66e:	88fb      	ldrh	r3, [r7, #6]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	e060      	b.n	800c73a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	68ba      	ldr	r2, [r7, #8]
 800c67c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	88fa      	ldrh	r2, [r7, #6]
 800c682:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	88fa      	ldrh	r2, [r7, #6]
 800c68a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	2221      	movs	r2, #33	@ 0x21
 800c69a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d028      	beq.n	800c6f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6aa:	4a26      	ldr	r2, [pc, #152]	@ (800c744 <HAL_UART_Transmit_DMA+0xf4>)
 800c6ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6b2:	4a25      	ldr	r2, [pc, #148]	@ (800c748 <HAL_UART_Transmit_DMA+0xf8>)
 800c6b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6ba:	4a24      	ldr	r2, [pc, #144]	@ (800c74c <HAL_UART_Transmit_DMA+0xfc>)
 800c6bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3328      	adds	r3, #40	@ 0x28
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	88fb      	ldrh	r3, [r7, #6]
 800c6da:	f7fb fbd3 	bl	8007e84 <HAL_DMA_Start_IT>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d009      	beq.n	800c6f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2210      	movs	r2, #16
 800c6e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e020      	b.n	800c73a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2240      	movs	r2, #64	@ 0x40
 800c6fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	3308      	adds	r3, #8
 800c706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	e853 3f00 	ldrex	r3, [r3]
 800c70e:	613b      	str	r3, [r7, #16]
   return(result);
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c716:	627b      	str	r3, [r7, #36]	@ 0x24
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	3308      	adds	r3, #8
 800c71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c720:	623a      	str	r2, [r7, #32]
 800c722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c724:	69f9      	ldr	r1, [r7, #28]
 800c726:	6a3a      	ldr	r2, [r7, #32]
 800c728:	e841 2300 	strex	r3, r2, [r1]
 800c72c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d1e5      	bne.n	800c700 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c734:	2300      	movs	r3, #0
 800c736:	e000      	b.n	800c73a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c738:	2302      	movs	r3, #2
  }
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3728      	adds	r7, #40	@ 0x28
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
 800c742:	bf00      	nop
 800c744:	0800ddbf 	.word	0x0800ddbf
 800c748:	0800de5d 	.word	0x0800de5d
 800c74c:	0800de7d 	.word	0x0800de7d

0800c750 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b09a      	sub	sp, #104	@ 0x68
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c76c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	461a      	mov	r2, r3
 800c774:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c776:	657b      	str	r3, [r7, #84]	@ 0x54
 800c778:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c77c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e6      	bne.n	800c758 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3308      	adds	r3, #8
 800c790:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c79c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c7a0:	f023 0301 	bic.w	r3, r3, #1
 800c7a4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3308      	adds	r3, #8
 800c7ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c7ae:	643a      	str	r2, [r7, #64]	@ 0x40
 800c7b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c7b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c7b6:	e841 2300 	strex	r3, r2, [r1]
 800c7ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d1e3      	bne.n	800c78a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d118      	bne.n	800c7fc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	e853 3f00 	ldrex	r3, [r3]
 800c7d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	f023 0310 	bic.w	r3, r3, #16
 800c7de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c7f0:	e841 2300 	strex	r3, r2, [r1]
 800c7f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1e6      	bne.n	800c7ca <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c806:	2b40      	cmp	r3, #64	@ 0x40
 800c808:	d13b      	bne.n	800c882 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	3308      	adds	r3, #8
 800c810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	60bb      	str	r3, [r7, #8]
   return(result);
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c820:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	3308      	adds	r3, #8
 800c828:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c82a:	61ba      	str	r2, [r7, #24]
 800c82c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82e:	6979      	ldr	r1, [r7, #20]
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	613b      	str	r3, [r7, #16]
   return(result);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1e5      	bne.n	800c80a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c844:	2b00      	cmp	r3, #0
 800c846:	d01c      	beq.n	800c882 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c84e:	2200      	movs	r2, #0
 800c850:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fb fb8e 	bl	8007f7a <HAL_DMA_Abort>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00e      	beq.n	800c882 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7fb fcf4 	bl	8008258 <HAL_DMA_GetError>
 800c870:	4603      	mov	r3, r0
 800c872:	2b20      	cmp	r3, #32
 800c874:	d105      	bne.n	800c882 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2210      	movs	r2, #16
 800c87a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e017      	b.n	800c8b2 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	220f      	movs	r2, #15
 800c890:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	699a      	ldr	r2, [r3, #24]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f042 0208 	orr.w	r2, r2, #8
 800c8a0:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3768      	adds	r7, #104	@ 0x68
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
	...

0800c8bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b0ba      	sub	sp, #232	@ 0xe8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	69db      	ldr	r3, [r3, #28]
 800c8ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c8e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c8e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c8ea:	4013      	ands	r3, r2
 800c8ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c8f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d11b      	bne.n	800c930 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8fc:	f003 0320 	and.w	r3, r3, #32
 800c900:	2b00      	cmp	r3, #0
 800c902:	d015      	beq.n	800c930 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c908:	f003 0320 	and.w	r3, r3, #32
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d105      	bne.n	800c91c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d009      	beq.n	800c930 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 8312 	beq.w	800cf4a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	4798      	blx	r3
      }
      return;
 800c92e:	e30c      	b.n	800cf4a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c934:	2b00      	cmp	r3, #0
 800c936:	f000 8129 	beq.w	800cb8c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c93a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c93e:	4b90      	ldr	r3, [pc, #576]	@ (800cb80 <HAL_UART_IRQHandler+0x2c4>)
 800c940:	4013      	ands	r3, r2
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c946:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c94a:	4b8e      	ldr	r3, [pc, #568]	@ (800cb84 <HAL_UART_IRQHandler+0x2c8>)
 800c94c:	4013      	ands	r3, r2
 800c94e:	2b00      	cmp	r3, #0
 800c950:	f000 811c 	beq.w	800cb8c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c958:	f003 0301 	and.w	r3, r3, #1
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d011      	beq.n	800c984 <HAL_UART_IRQHandler+0xc8>
 800c960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d00b      	beq.n	800c984 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2201      	movs	r2, #1
 800c972:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c97a:	f043 0201 	orr.w	r2, r3, #1
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c988:	f003 0302 	and.w	r3, r3, #2
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d011      	beq.n	800c9b4 <HAL_UART_IRQHandler+0xf8>
 800c990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c994:	f003 0301 	and.w	r3, r3, #1
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00b      	beq.n	800c9b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9aa:	f043 0204 	orr.w	r2, r3, #4
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9b8:	f003 0304 	and.w	r3, r3, #4
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d011      	beq.n	800c9e4 <HAL_UART_IRQHandler+0x128>
 800c9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c9c4:	f003 0301 	and.w	r3, r3, #1
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00b      	beq.n	800c9e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	2204      	movs	r2, #4
 800c9d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9da:	f043 0202 	orr.w	r2, r3, #2
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c9e8:	f003 0308 	and.w	r3, r3, #8
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d017      	beq.n	800ca20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9f4:	f003 0320 	and.w	r3, r3, #32
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d105      	bne.n	800ca08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c9fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ca00:	4b5f      	ldr	r3, [pc, #380]	@ (800cb80 <HAL_UART_IRQHandler+0x2c4>)
 800ca02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00b      	beq.n	800ca20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2208      	movs	r2, #8
 800ca0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca16:	f043 0208 	orr.w	r2, r3, #8
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ca20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d012      	beq.n	800ca52 <HAL_UART_IRQHandler+0x196>
 800ca2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d00c      	beq.n	800ca52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ca40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca48:	f043 0220 	orr.w	r2, r3, #32
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 8278 	beq.w	800cf4e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca62:	f003 0320 	and.w	r3, r3, #32
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d013      	beq.n	800ca92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca6e:	f003 0320 	and.w	r3, r3, #32
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d105      	bne.n	800ca82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d007      	beq.n	800ca92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d003      	beq.n	800ca92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caa6:	2b40      	cmp	r3, #64	@ 0x40
 800caa8:	d005      	beq.n	800cab6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800caaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800caae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d058      	beq.n	800cb68 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f001 f91b 	bl	800dcf2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	689b      	ldr	r3, [r3, #8]
 800cac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac6:	2b40      	cmp	r3, #64	@ 0x40
 800cac8:	d148      	bne.n	800cb5c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	3308      	adds	r3, #8
 800cad0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cad8:	e853 3f00 	ldrex	r3, [r3]
 800cadc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cae0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cae8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	3308      	adds	r3, #8
 800caf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800caf6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cafa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cb02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cb06:	e841 2300 	strex	r3, r2, [r1]
 800cb0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cb0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d1d9      	bne.n	800caca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d017      	beq.n	800cb50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb26:	4a18      	ldr	r2, [pc, #96]	@ (800cb88 <HAL_UART_IRQHandler+0x2cc>)
 800cb28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7fb fa7b 	bl	800802c <HAL_DMA_Abort_IT>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d01f      	beq.n	800cb7c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cb42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb4e:	e015      	b.n	800cb7c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb5a:	e00f      	b.n	800cb7c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb66:	e009      	b.n	800cb7c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cb7a:	e1e8      	b.n	800cf4e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb7c:	bf00      	nop
    return;
 800cb7e:	e1e6      	b.n	800cf4e <HAL_UART_IRQHandler+0x692>
 800cb80:	10000001 	.word	0x10000001
 800cb84:	04000120 	.word	0x04000120
 800cb88:	0800df01 	.word	0x0800df01

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	f040 8176 	bne.w	800ce82 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cb96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb9a:	f003 0310 	and.w	r3, r3, #16
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 816f 	beq.w	800ce82 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cba8:	f003 0310 	and.w	r3, r3, #16
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	f000 8168 	beq.w	800ce82 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2210      	movs	r2, #16
 800cbb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	689b      	ldr	r3, [r3, #8]
 800cbc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbc4:	2b40      	cmp	r3, #64	@ 0x40
 800cbc6:	f040 80dc 	bne.w	800cd82 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 80b1 	beq.w	800cd44 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cbe8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbec:	429a      	cmp	r2, r3
 800cbee:	f080 80a9 	bcs.w	800cd44 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cbf8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f003 0320 	and.w	r3, r3, #32
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f040 8087 	bne.w	800cd1e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cc1c:	e853 3f00 	ldrex	r3, [r3]
 800cc20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cc24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	461a      	mov	r2, r3
 800cc36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cc3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cc46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cc4a:	e841 2300 	strex	r3, r2, [r1]
 800cc4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cc52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1da      	bne.n	800cc10 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	3308      	adds	r3, #8
 800cc60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cc64:	e853 3f00 	ldrex	r3, [r3]
 800cc68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cc6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc6c:	f023 0301 	bic.w	r3, r3, #1
 800cc70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cc82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cc86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cc8a:	e841 2300 	strex	r3, r2, [r1]
 800cc8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cc90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1e1      	bne.n	800cc5a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cca0:	e853 3f00 	ldrex	r3, [r3]
 800cca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cca6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ccba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ccbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ccc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ccc2:	e841 2300 	strex	r3, r2, [r1]
 800ccc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ccc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d1e3      	bne.n	800cc96 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2220      	movs	r2, #32
 800ccd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ccea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ccec:	f023 0310 	bic.w	r3, r3, #16
 800ccf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cd04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cd06:	e841 2300 	strex	r3, r2, [r1]
 800cd0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cd0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1e4      	bne.n	800ccdc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fb f92e 	bl	8007f7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2202      	movs	r2, #2
 800cd22:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800cd30:	687a      	ldr	r2, [r7, #4]
 800cd32:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800cd36:	b292      	uxth	r2, r2
 800cd38:	1a8a      	subs	r2, r1, r2
 800cd3a:	b292      	uxth	r2, r2
 800cd3c:	4611      	mov	r1, r2
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800cd42:	e106      	b.n	800cf52 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cd4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	f040 80ff 	bne.w	800cf52 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 0320 	and.w	r3, r3, #32
 800cd62:	2b20      	cmp	r3, #32
 800cd64:	f040 80f5 	bne.w	800cf52 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	4798      	blx	r3
      return;
 800cd80:	e0e7      	b.n	800cf52 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 80d9 	beq.w	800cf56 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800cda4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f000 80d4 	beq.w	800cf56 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	e853 3f00 	ldrex	r3, [r3]
 800cdba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cdbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cdc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cdd0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cdd2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cdd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdd8:	e841 2300 	strex	r3, r2, [r1]
 800cddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cdde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1e4      	bne.n	800cdae <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	3308      	adds	r3, #8
 800cdea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	e853 3f00 	ldrex	r3, [r3]
 800cdf2:	623b      	str	r3, [r7, #32]
   return(result);
 800cdf4:	6a3b      	ldr	r3, [r7, #32]
 800cdf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cdfa:	f023 0301 	bic.w	r3, r3, #1
 800cdfe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	3308      	adds	r3, #8
 800ce08:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ce0c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ce0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce14:	e841 2300 	strex	r3, r2, [r1]
 800ce18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ce1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1e1      	bne.n	800cde4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2220      	movs	r2, #32
 800ce24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	e853 3f00 	ldrex	r3, [r3]
 800ce40:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	f023 0310 	bic.w	r3, r3, #16
 800ce48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	461a      	mov	r2, r3
 800ce52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ce56:	61fb      	str	r3, [r7, #28]
 800ce58:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5a:	69b9      	ldr	r1, [r7, #24]
 800ce5c:	69fa      	ldr	r2, [r7, #28]
 800ce5e:	e841 2300 	strex	r3, r2, [r1]
 800ce62:	617b      	str	r3, [r7, #20]
   return(result);
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d1e4      	bne.n	800ce34 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ce76:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce80:	e069      	b.n	800cf56 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ce82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d010      	beq.n	800ceb0 <HAL_UART_IRQHandler+0x5f4>
 800ce8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00a      	beq.n	800ceb0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cea2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ceae:	e055      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ceb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d014      	beq.n	800cee6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d105      	bne.n	800ced4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cecc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d008      	beq.n	800cee6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d03e      	beq.n	800cf5a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	4798      	blx	r3
    }
    return;
 800cee4:	e039      	b.n	800cf5a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d009      	beq.n	800cf06 <HAL_UART_IRQHandler+0x64a>
 800cef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d003      	beq.n	800cf06 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f001 f812 	bl	800df28 <UART_EndTransmit_IT>
    return;
 800cf04:	e02a      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d00b      	beq.n	800cf2a <HAL_UART_IRQHandler+0x66e>
 800cf12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf28:	e018      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d012      	beq.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
 800cf36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	da0e      	bge.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf48:	e008      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf4a:	bf00      	nop
 800cf4c:	e006      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
    return;
 800cf4e:	bf00      	nop
 800cf50:	e004      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf52:	bf00      	nop
 800cf54:	e002      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cf56:	bf00      	nop
 800cf58:	e000      	b.n	800cf5c <HAL_UART_IRQHandler+0x6a0>
    return;
 800cf5a:	bf00      	nop
  }
}
 800cf5c:	37e8      	adds	r7, #232	@ 0xe8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}
 800cf62:	bf00      	nop

0800cf64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cf94:	bf00      	nop
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800cfe4:	bf00      	nop
 800cfe6:	370c      	adds	r7, #12
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
 800d00c:	460b      	mov	r3, r1
 800d00e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d010:	bf00      	nop
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4a1a      	ldr	r2, [pc, #104]	@ (800d090 <UART_InitCallbacksToDefault+0x74>)
 800d028:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	4a19      	ldr	r2, [pc, #100]	@ (800d094 <UART_InitCallbacksToDefault+0x78>)
 800d030:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a18      	ldr	r2, [pc, #96]	@ (800d098 <UART_InitCallbacksToDefault+0x7c>)
 800d038:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a17      	ldr	r2, [pc, #92]	@ (800d09c <UART_InitCallbacksToDefault+0x80>)
 800d040:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a16      	ldr	r2, [pc, #88]	@ (800d0a0 <UART_InitCallbacksToDefault+0x84>)
 800d048:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	4a15      	ldr	r2, [pc, #84]	@ (800d0a4 <UART_InitCallbacksToDefault+0x88>)
 800d050:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4a14      	ldr	r2, [pc, #80]	@ (800d0a8 <UART_InitCallbacksToDefault+0x8c>)
 800d058:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a13      	ldr	r2, [pc, #76]	@ (800d0ac <UART_InitCallbacksToDefault+0x90>)
 800d060:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a12      	ldr	r2, [pc, #72]	@ (800d0b0 <UART_InitCallbacksToDefault+0x94>)
 800d068:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	4a11      	ldr	r2, [pc, #68]	@ (800d0b4 <UART_InitCallbacksToDefault+0x98>)
 800d070:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4a10      	ldr	r2, [pc, #64]	@ (800d0b8 <UART_InitCallbacksToDefault+0x9c>)
 800d078:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a0f      	ldr	r2, [pc, #60]	@ (800d0bc <UART_InitCallbacksToDefault+0xa0>)
 800d080:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d084:	bf00      	nop
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	0800cf79 	.word	0x0800cf79
 800d094:	0800cf65 	.word	0x0800cf65
 800d098:	0800cfa1 	.word	0x0800cfa1
 800d09c:	0800cf8d 	.word	0x0800cf8d
 800d0a0:	0800cfb5 	.word	0x0800cfb5
 800d0a4:	0800cfc9 	.word	0x0800cfc9
 800d0a8:	0800cfdd 	.word	0x0800cfdd
 800d0ac:	0800cff1 	.word	0x0800cff1
 800d0b0:	0800e9ed 	.word	0x0800e9ed
 800d0b4:	0800ea01 	.word	0x0800ea01
 800d0b8:	0800ea15 	.word	0x0800ea15
 800d0bc:	0800d005 	.word	0x0800d005

0800d0c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0c4:	b08c      	sub	sp, #48	@ 0x30
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	689a      	ldr	r2, [r3, #8]
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	431a      	orrs	r2, r3
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	431a      	orrs	r2, r3
 800d0e0:	697b      	ldr	r3, [r7, #20]
 800d0e2:	69db      	ldr	r3, [r3, #28]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	4baa      	ldr	r3, [pc, #680]	@ (800d398 <UART_SetConfig+0x2d8>)
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	697a      	ldr	r2, [r7, #20]
 800d0f4:	6812      	ldr	r2, [r2, #0]
 800d0f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0f8:	430b      	orrs	r3, r1
 800d0fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	685b      	ldr	r3, [r3, #4]
 800d102:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	68da      	ldr	r2, [r3, #12]
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	430a      	orrs	r2, r1
 800d110:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	699b      	ldr	r3, [r3, #24]
 800d116:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a9f      	ldr	r2, [pc, #636]	@ (800d39c <UART_SetConfig+0x2dc>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d004      	beq.n	800d12c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	6a1b      	ldr	r3, [r3, #32]
 800d126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d128:	4313      	orrs	r3, r2
 800d12a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d136:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	6812      	ldr	r2, [r2, #0]
 800d13e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d140:	430b      	orrs	r3, r1
 800d142:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d14a:	f023 010f 	bic.w	r1, r3, #15
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	430a      	orrs	r2, r1
 800d158:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	4a90      	ldr	r2, [pc, #576]	@ (800d3a0 <UART_SetConfig+0x2e0>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d125      	bne.n	800d1b0 <UART_SetConfig+0xf0>
 800d164:	4b8f      	ldr	r3, [pc, #572]	@ (800d3a4 <UART_SetConfig+0x2e4>)
 800d166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d16a:	f003 0303 	and.w	r3, r3, #3
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d81a      	bhi.n	800d1a8 <UART_SetConfig+0xe8>
 800d172:	a201      	add	r2, pc, #4	@ (adr r2, 800d178 <UART_SetConfig+0xb8>)
 800d174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d178:	0800d189 	.word	0x0800d189
 800d17c:	0800d199 	.word	0x0800d199
 800d180:	0800d191 	.word	0x0800d191
 800d184:	0800d1a1 	.word	0x0800d1a1
 800d188:	2301      	movs	r3, #1
 800d18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d18e:	e116      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d190:	2302      	movs	r3, #2
 800d192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d196:	e112      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d198:	2304      	movs	r3, #4
 800d19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d19e:	e10e      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d1a0:	2308      	movs	r3, #8
 800d1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1a6:	e10a      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d1a8:	2310      	movs	r3, #16
 800d1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d1ae:	e106      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a7c      	ldr	r2, [pc, #496]	@ (800d3a8 <UART_SetConfig+0x2e8>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d138      	bne.n	800d22c <UART_SetConfig+0x16c>
 800d1ba:	4b7a      	ldr	r3, [pc, #488]	@ (800d3a4 <UART_SetConfig+0x2e4>)
 800d1bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1c0:	f003 030c 	and.w	r3, r3, #12
 800d1c4:	2b0c      	cmp	r3, #12
 800d1c6:	d82d      	bhi.n	800d224 <UART_SetConfig+0x164>
 800d1c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d1d0 <UART_SetConfig+0x110>)
 800d1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ce:	bf00      	nop
 800d1d0:	0800d205 	.word	0x0800d205
 800d1d4:	0800d225 	.word	0x0800d225
 800d1d8:	0800d225 	.word	0x0800d225
 800d1dc:	0800d225 	.word	0x0800d225
 800d1e0:	0800d215 	.word	0x0800d215
 800d1e4:	0800d225 	.word	0x0800d225
 800d1e8:	0800d225 	.word	0x0800d225
 800d1ec:	0800d225 	.word	0x0800d225
 800d1f0:	0800d20d 	.word	0x0800d20d
 800d1f4:	0800d225 	.word	0x0800d225
 800d1f8:	0800d225 	.word	0x0800d225
 800d1fc:	0800d225 	.word	0x0800d225
 800d200:	0800d21d 	.word	0x0800d21d
 800d204:	2300      	movs	r3, #0
 800d206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d20a:	e0d8      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d20c:	2302      	movs	r3, #2
 800d20e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d212:	e0d4      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d214:	2304      	movs	r3, #4
 800d216:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d21a:	e0d0      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d21c:	2308      	movs	r3, #8
 800d21e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d222:	e0cc      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d224:	2310      	movs	r3, #16
 800d226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d22a:	e0c8      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a5e      	ldr	r2, [pc, #376]	@ (800d3ac <UART_SetConfig+0x2ec>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d125      	bne.n	800d282 <UART_SetConfig+0x1c2>
 800d236:	4b5b      	ldr	r3, [pc, #364]	@ (800d3a4 <UART_SetConfig+0x2e4>)
 800d238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d23c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d240:	2b30      	cmp	r3, #48	@ 0x30
 800d242:	d016      	beq.n	800d272 <UART_SetConfig+0x1b2>
 800d244:	2b30      	cmp	r3, #48	@ 0x30
 800d246:	d818      	bhi.n	800d27a <UART_SetConfig+0x1ba>
 800d248:	2b20      	cmp	r3, #32
 800d24a:	d00a      	beq.n	800d262 <UART_SetConfig+0x1a2>
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	d814      	bhi.n	800d27a <UART_SetConfig+0x1ba>
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <UART_SetConfig+0x19a>
 800d254:	2b10      	cmp	r3, #16
 800d256:	d008      	beq.n	800d26a <UART_SetConfig+0x1aa>
 800d258:	e00f      	b.n	800d27a <UART_SetConfig+0x1ba>
 800d25a:	2300      	movs	r3, #0
 800d25c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d260:	e0ad      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d262:	2302      	movs	r3, #2
 800d264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d268:	e0a9      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d26a:	2304      	movs	r3, #4
 800d26c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d270:	e0a5      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d272:	2308      	movs	r3, #8
 800d274:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d278:	e0a1      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d27a:	2310      	movs	r3, #16
 800d27c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d280:	e09d      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a4a      	ldr	r2, [pc, #296]	@ (800d3b0 <UART_SetConfig+0x2f0>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d125      	bne.n	800d2d8 <UART_SetConfig+0x218>
 800d28c:	4b45      	ldr	r3, [pc, #276]	@ (800d3a4 <UART_SetConfig+0x2e4>)
 800d28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d292:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d296:	2bc0      	cmp	r3, #192	@ 0xc0
 800d298:	d016      	beq.n	800d2c8 <UART_SetConfig+0x208>
 800d29a:	2bc0      	cmp	r3, #192	@ 0xc0
 800d29c:	d818      	bhi.n	800d2d0 <UART_SetConfig+0x210>
 800d29e:	2b80      	cmp	r3, #128	@ 0x80
 800d2a0:	d00a      	beq.n	800d2b8 <UART_SetConfig+0x1f8>
 800d2a2:	2b80      	cmp	r3, #128	@ 0x80
 800d2a4:	d814      	bhi.n	800d2d0 <UART_SetConfig+0x210>
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d002      	beq.n	800d2b0 <UART_SetConfig+0x1f0>
 800d2aa:	2b40      	cmp	r3, #64	@ 0x40
 800d2ac:	d008      	beq.n	800d2c0 <UART_SetConfig+0x200>
 800d2ae:	e00f      	b.n	800d2d0 <UART_SetConfig+0x210>
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2b6:	e082      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d2b8:	2302      	movs	r3, #2
 800d2ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2be:	e07e      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d2c0:	2304      	movs	r3, #4
 800d2c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2c6:	e07a      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d2c8:	2308      	movs	r3, #8
 800d2ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2ce:	e076      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d2d0:	2310      	movs	r3, #16
 800d2d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2d6:	e072      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a35      	ldr	r2, [pc, #212]	@ (800d3b4 <UART_SetConfig+0x2f4>)
 800d2de:	4293      	cmp	r3, r2
 800d2e0:	d12a      	bne.n	800d338 <UART_SetConfig+0x278>
 800d2e2:	4b30      	ldr	r3, [pc, #192]	@ (800d3a4 <UART_SetConfig+0x2e4>)
 800d2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d2e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d2ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d2f0:	d01a      	beq.n	800d328 <UART_SetConfig+0x268>
 800d2f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d2f6:	d81b      	bhi.n	800d330 <UART_SetConfig+0x270>
 800d2f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2fc:	d00c      	beq.n	800d318 <UART_SetConfig+0x258>
 800d2fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d302:	d815      	bhi.n	800d330 <UART_SetConfig+0x270>
 800d304:	2b00      	cmp	r3, #0
 800d306:	d003      	beq.n	800d310 <UART_SetConfig+0x250>
 800d308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d30c:	d008      	beq.n	800d320 <UART_SetConfig+0x260>
 800d30e:	e00f      	b.n	800d330 <UART_SetConfig+0x270>
 800d310:	2300      	movs	r3, #0
 800d312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d316:	e052      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d318:	2302      	movs	r3, #2
 800d31a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d31e:	e04e      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d320:	2304      	movs	r3, #4
 800d322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d326:	e04a      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d328:	2308      	movs	r3, #8
 800d32a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d32e:	e046      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d330:	2310      	movs	r3, #16
 800d332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d336:	e042      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a17      	ldr	r2, [pc, #92]	@ (800d39c <UART_SetConfig+0x2dc>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d13a      	bne.n	800d3b8 <UART_SetConfig+0x2f8>
 800d342:	4b18      	ldr	r3, [pc, #96]	@ (800d3a4 <UART_SetConfig+0x2e4>)
 800d344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d348:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d34c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d350:	d01a      	beq.n	800d388 <UART_SetConfig+0x2c8>
 800d352:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d356:	d81b      	bhi.n	800d390 <UART_SetConfig+0x2d0>
 800d358:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d35c:	d00c      	beq.n	800d378 <UART_SetConfig+0x2b8>
 800d35e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d362:	d815      	bhi.n	800d390 <UART_SetConfig+0x2d0>
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <UART_SetConfig+0x2b0>
 800d368:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d36c:	d008      	beq.n	800d380 <UART_SetConfig+0x2c0>
 800d36e:	e00f      	b.n	800d390 <UART_SetConfig+0x2d0>
 800d370:	2300      	movs	r3, #0
 800d372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d376:	e022      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d378:	2302      	movs	r3, #2
 800d37a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d37e:	e01e      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d380:	2304      	movs	r3, #4
 800d382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d386:	e01a      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d388:	2308      	movs	r3, #8
 800d38a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d38e:	e016      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d390:	2310      	movs	r3, #16
 800d392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d396:	e012      	b.n	800d3be <UART_SetConfig+0x2fe>
 800d398:	cfff69f3 	.word	0xcfff69f3
 800d39c:	40008000 	.word	0x40008000
 800d3a0:	40013800 	.word	0x40013800
 800d3a4:	40021000 	.word	0x40021000
 800d3a8:	40004400 	.word	0x40004400
 800d3ac:	40004800 	.word	0x40004800
 800d3b0:	40004c00 	.word	0x40004c00
 800d3b4:	40005000 	.word	0x40005000
 800d3b8:	2310      	movs	r3, #16
 800d3ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	4aae      	ldr	r2, [pc, #696]	@ (800d67c <UART_SetConfig+0x5bc>)
 800d3c4:	4293      	cmp	r3, r2
 800d3c6:	f040 8097 	bne.w	800d4f8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d3ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d3ce:	2b08      	cmp	r3, #8
 800d3d0:	d823      	bhi.n	800d41a <UART_SetConfig+0x35a>
 800d3d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d8 <UART_SetConfig+0x318>)
 800d3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d8:	0800d3fd 	.word	0x0800d3fd
 800d3dc:	0800d41b 	.word	0x0800d41b
 800d3e0:	0800d405 	.word	0x0800d405
 800d3e4:	0800d41b 	.word	0x0800d41b
 800d3e8:	0800d40b 	.word	0x0800d40b
 800d3ec:	0800d41b 	.word	0x0800d41b
 800d3f0:	0800d41b 	.word	0x0800d41b
 800d3f4:	0800d41b 	.word	0x0800d41b
 800d3f8:	0800d413 	.word	0x0800d413
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3fc:	f7fb fefa 	bl	80091f4 <HAL_RCC_GetPCLK1Freq>
 800d400:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d402:	e010      	b.n	800d426 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d404:	4b9e      	ldr	r3, [pc, #632]	@ (800d680 <UART_SetConfig+0x5c0>)
 800d406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d408:	e00d      	b.n	800d426 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d40a:	f7fb fe85 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800d40e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d410:	e009      	b.n	800d426 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d416:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d418:	e005      	b.n	800d426 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d41a:	2300      	movs	r3, #0
 800d41c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d41e:	2301      	movs	r3, #1
 800d420:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d424:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f000 8130 	beq.w	800d68e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d432:	4a94      	ldr	r2, [pc, #592]	@ (800d684 <UART_SetConfig+0x5c4>)
 800d434:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d438:	461a      	mov	r2, r3
 800d43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d440:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	685a      	ldr	r2, [r3, #4]
 800d446:	4613      	mov	r3, r2
 800d448:	005b      	lsls	r3, r3, #1
 800d44a:	4413      	add	r3, r2
 800d44c:	69ba      	ldr	r2, [r7, #24]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d305      	bcc.n	800d45e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d458:	69ba      	ldr	r2, [r7, #24]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d903      	bls.n	800d466 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d464:	e113      	b.n	800d68e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d468:	2200      	movs	r2, #0
 800d46a:	60bb      	str	r3, [r7, #8]
 800d46c:	60fa      	str	r2, [r7, #12]
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d472:	4a84      	ldr	r2, [pc, #528]	@ (800d684 <UART_SetConfig+0x5c4>)
 800d474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d478:	b29b      	uxth	r3, r3
 800d47a:	2200      	movs	r2, #0
 800d47c:	603b      	str	r3, [r7, #0]
 800d47e:	607a      	str	r2, [r7, #4]
 800d480:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d484:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d488:	f7f3 fcb0 	bl	8000dec <__aeabi_uldivmod>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	4610      	mov	r0, r2
 800d492:	4619      	mov	r1, r3
 800d494:	f04f 0200 	mov.w	r2, #0
 800d498:	f04f 0300 	mov.w	r3, #0
 800d49c:	020b      	lsls	r3, r1, #8
 800d49e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4a2:	0202      	lsls	r2, r0, #8
 800d4a4:	6979      	ldr	r1, [r7, #20]
 800d4a6:	6849      	ldr	r1, [r1, #4]
 800d4a8:	0849      	lsrs	r1, r1, #1
 800d4aa:	2000      	movs	r0, #0
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	eb12 0804 	adds.w	r8, r2, r4
 800d4b4:	eb43 0905 	adc.w	r9, r3, r5
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	469a      	mov	sl, r3
 800d4c0:	4693      	mov	fp, r2
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	465b      	mov	r3, fp
 800d4c6:	4640      	mov	r0, r8
 800d4c8:	4649      	mov	r1, r9
 800d4ca:	f7f3 fc8f 	bl	8000dec <__aeabi_uldivmod>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	460b      	mov	r3, r1
 800d4d2:	4613      	mov	r3, r2
 800d4d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4d6:	6a3b      	ldr	r3, [r7, #32]
 800d4d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4dc:	d308      	bcc.n	800d4f0 <UART_SetConfig+0x430>
 800d4de:	6a3b      	ldr	r3, [r7, #32]
 800d4e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4e4:	d204      	bcs.n	800d4f0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6a3a      	ldr	r2, [r7, #32]
 800d4ec:	60da      	str	r2, [r3, #12]
 800d4ee:	e0ce      	b.n	800d68e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d4f0:	2301      	movs	r3, #1
 800d4f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d4f6:	e0ca      	b.n	800d68e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	69db      	ldr	r3, [r3, #28]
 800d4fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d500:	d166      	bne.n	800d5d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d502:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d506:	2b08      	cmp	r3, #8
 800d508:	d827      	bhi.n	800d55a <UART_SetConfig+0x49a>
 800d50a:	a201      	add	r2, pc, #4	@ (adr r2, 800d510 <UART_SetConfig+0x450>)
 800d50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d510:	0800d535 	.word	0x0800d535
 800d514:	0800d53d 	.word	0x0800d53d
 800d518:	0800d545 	.word	0x0800d545
 800d51c:	0800d55b 	.word	0x0800d55b
 800d520:	0800d54b 	.word	0x0800d54b
 800d524:	0800d55b 	.word	0x0800d55b
 800d528:	0800d55b 	.word	0x0800d55b
 800d52c:	0800d55b 	.word	0x0800d55b
 800d530:	0800d553 	.word	0x0800d553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d534:	f7fb fe5e 	bl	80091f4 <HAL_RCC_GetPCLK1Freq>
 800d538:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d53a:	e014      	b.n	800d566 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d53c:	f7fb fe70 	bl	8009220 <HAL_RCC_GetPCLK2Freq>
 800d540:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d542:	e010      	b.n	800d566 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d544:	4b4e      	ldr	r3, [pc, #312]	@ (800d680 <UART_SetConfig+0x5c0>)
 800d546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d548:	e00d      	b.n	800d566 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d54a:	f7fb fde5 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800d54e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d550:	e009      	b.n	800d566 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d558:	e005      	b.n	800d566 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d55a:	2300      	movs	r3, #0
 800d55c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d568:	2b00      	cmp	r3, #0
 800d56a:	f000 8090 	beq.w	800d68e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d572:	4a44      	ldr	r2, [pc, #272]	@ (800d684 <UART_SetConfig+0x5c4>)
 800d574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d578:	461a      	mov	r2, r3
 800d57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d57c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d580:	005a      	lsls	r2, r3, #1
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	085b      	lsrs	r3, r3, #1
 800d588:	441a      	add	r2, r3
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d592:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	2b0f      	cmp	r3, #15
 800d598:	d916      	bls.n	800d5c8 <UART_SetConfig+0x508>
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d5a0:	d212      	bcs.n	800d5c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f023 030f 	bic.w	r3, r3, #15
 800d5aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	085b      	lsrs	r3, r3, #1
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	f003 0307 	and.w	r3, r3, #7
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	8bfb      	ldrh	r3, [r7, #30]
 800d5ba:	4313      	orrs	r3, r2
 800d5bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	8bfa      	ldrh	r2, [r7, #30]
 800d5c4:	60da      	str	r2, [r3, #12]
 800d5c6:	e062      	b.n	800d68e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d5ce:	e05e      	b.n	800d68e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d5d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d5d4:	2b08      	cmp	r3, #8
 800d5d6:	d828      	bhi.n	800d62a <UART_SetConfig+0x56a>
 800d5d8:	a201      	add	r2, pc, #4	@ (adr r2, 800d5e0 <UART_SetConfig+0x520>)
 800d5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5de:	bf00      	nop
 800d5e0:	0800d605 	.word	0x0800d605
 800d5e4:	0800d60d 	.word	0x0800d60d
 800d5e8:	0800d615 	.word	0x0800d615
 800d5ec:	0800d62b 	.word	0x0800d62b
 800d5f0:	0800d61b 	.word	0x0800d61b
 800d5f4:	0800d62b 	.word	0x0800d62b
 800d5f8:	0800d62b 	.word	0x0800d62b
 800d5fc:	0800d62b 	.word	0x0800d62b
 800d600:	0800d623 	.word	0x0800d623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d604:	f7fb fdf6 	bl	80091f4 <HAL_RCC_GetPCLK1Freq>
 800d608:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d60a:	e014      	b.n	800d636 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d60c:	f7fb fe08 	bl	8009220 <HAL_RCC_GetPCLK2Freq>
 800d610:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d612:	e010      	b.n	800d636 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d614:	4b1a      	ldr	r3, [pc, #104]	@ (800d680 <UART_SetConfig+0x5c0>)
 800d616:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d618:	e00d      	b.n	800d636 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d61a:	f7fb fd7d 	bl	8009118 <HAL_RCC_GetSysClockFreq>
 800d61e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d620:	e009      	b.n	800d636 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d626:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d628:	e005      	b.n	800d636 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d62a:	2300      	movs	r3, #0
 800d62c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d634:	bf00      	nop
    }

    if (pclk != 0U)
 800d636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d028      	beq.n	800d68e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d640:	4a10      	ldr	r2, [pc, #64]	@ (800d684 <UART_SetConfig+0x5c4>)
 800d642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d646:	461a      	mov	r2, r3
 800d648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	085b      	lsrs	r3, r3, #1
 800d654:	441a      	add	r2, r3
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d65e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d660:	6a3b      	ldr	r3, [r7, #32]
 800d662:	2b0f      	cmp	r3, #15
 800d664:	d910      	bls.n	800d688 <UART_SetConfig+0x5c8>
 800d666:	6a3b      	ldr	r3, [r7, #32]
 800d668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d66c:	d20c      	bcs.n	800d688 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	b29a      	uxth	r2, r3
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	60da      	str	r2, [r3, #12]
 800d678:	e009      	b.n	800d68e <UART_SetConfig+0x5ce>
 800d67a:	bf00      	nop
 800d67c:	40008000 	.word	0x40008000
 800d680:	00f42400 	.word	0x00f42400
 800d684:	080113a8 	.word	0x080113a8
      }
      else
      {
        ret = HAL_ERROR;
 800d688:	2301      	movs	r3, #1
 800d68a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2201      	movs	r2, #1
 800d692:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	2201      	movs	r2, #1
 800d69a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d6aa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3730      	adds	r7, #48	@ 0x30
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d6b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b083      	sub	sp, #12
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6c4:	f003 0308 	and.w	r3, r3, #8
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00a      	beq.n	800d6e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	685b      	ldr	r3, [r3, #4]
 800d6d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	430a      	orrs	r2, r1
 800d6e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e6:	f003 0301 	and.w	r3, r3, #1
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00a      	beq.n	800d704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	430a      	orrs	r2, r1
 800d702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d708:	f003 0302 	and.w	r3, r3, #2
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00a      	beq.n	800d726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	685b      	ldr	r3, [r3, #4]
 800d716:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	430a      	orrs	r2, r1
 800d724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d72a:	f003 0304 	and.w	r3, r3, #4
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d00a      	beq.n	800d748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	430a      	orrs	r2, r1
 800d746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d74c:	f003 0310 	and.w	r3, r3, #16
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00a      	beq.n	800d76a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	430a      	orrs	r2, r1
 800d768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d76e:	f003 0320 	and.w	r3, r3, #32
 800d772:	2b00      	cmp	r3, #0
 800d774:	d00a      	beq.n	800d78c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	430a      	orrs	r2, r1
 800d78a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d794:	2b00      	cmp	r3, #0
 800d796:	d01a      	beq.n	800d7ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	430a      	orrs	r2, r1
 800d7ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7b6:	d10a      	bne.n	800d7ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00a      	beq.n	800d7f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	430a      	orrs	r2, r1
 800d7ee:	605a      	str	r2, [r3, #4]
  }
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b098      	sub	sp, #96	@ 0x60
 800d800:	af02      	add	r7, sp, #8
 800d802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d80c:	f7f8 feb8 	bl	8006580 <HAL_GetTick>
 800d810:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f003 0308 	and.w	r3, r3, #8
 800d81c:	2b08      	cmp	r3, #8
 800d81e:	d12f      	bne.n	800d880 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d820:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d828:	2200      	movs	r2, #0
 800d82a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f88e 	bl	800d950 <UART_WaitOnFlagUntilTimeout>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d022      	beq.n	800d880 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d842:	e853 3f00 	ldrex	r3, [r3]
 800d846:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d84a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d84e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	461a      	mov	r2, r3
 800d856:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d858:	647b      	str	r3, [r7, #68]	@ 0x44
 800d85a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d85e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d860:	e841 2300 	strex	r3, r2, [r1]
 800d864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1e6      	bne.n	800d83a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2220      	movs	r2, #32
 800d870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2200      	movs	r2, #0
 800d878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d87c:	2303      	movs	r3, #3
 800d87e:	e063      	b.n	800d948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 0304 	and.w	r3, r3, #4
 800d88a:	2b04      	cmp	r3, #4
 800d88c:	d149      	bne.n	800d922 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d88e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d892:	9300      	str	r3, [sp, #0]
 800d894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d896:	2200      	movs	r2, #0
 800d898:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 f857 	bl	800d950 <UART_WaitOnFlagUntilTimeout>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d03c      	beq.n	800d922 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b0:	e853 3f00 	ldrex	r3, [r3]
 800d8b4:	623b      	str	r3, [r7, #32]
   return(result);
 800d8b6:	6a3b      	ldr	r3, [r7, #32]
 800d8b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	461a      	mov	r2, r3
 800d8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8ce:	e841 2300 	strex	r3, r2, [r1]
 800d8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d1e6      	bne.n	800d8a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	3308      	adds	r3, #8
 800d8e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	e853 3f00 	ldrex	r3, [r3]
 800d8e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f023 0301 	bic.w	r3, r3, #1
 800d8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3308      	adds	r3, #8
 800d8f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8fa:	61fa      	str	r2, [r7, #28]
 800d8fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8fe:	69b9      	ldr	r1, [r7, #24]
 800d900:	69fa      	ldr	r2, [r7, #28]
 800d902:	e841 2300 	strex	r3, r2, [r1]
 800d906:	617b      	str	r3, [r7, #20]
   return(result);
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1e5      	bne.n	800d8da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2220      	movs	r2, #32
 800d912:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d91e:	2303      	movs	r3, #3
 800d920:	e012      	b.n	800d948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2220      	movs	r2, #32
 800d926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2220      	movs	r2, #32
 800d92e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2200      	movs	r2, #0
 800d936:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3758      	adds	r7, #88	@ 0x58
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	4613      	mov	r3, r2
 800d95e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d960:	e04f      	b.n	800da02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d962:	69bb      	ldr	r3, [r7, #24]
 800d964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d968:	d04b      	beq.n	800da02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d96a:	f7f8 fe09 	bl	8006580 <HAL_GetTick>
 800d96e:	4602      	mov	r2, r0
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	1ad3      	subs	r3, r2, r3
 800d974:	69ba      	ldr	r2, [r7, #24]
 800d976:	429a      	cmp	r2, r3
 800d978:	d302      	bcc.n	800d980 <UART_WaitOnFlagUntilTimeout+0x30>
 800d97a:	69bb      	ldr	r3, [r7, #24]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d101      	bne.n	800d984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d980:	2303      	movs	r3, #3
 800d982:	e04e      	b.n	800da22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f003 0304 	and.w	r3, r3, #4
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d037      	beq.n	800da02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	2b80      	cmp	r3, #128	@ 0x80
 800d996:	d034      	beq.n	800da02 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	2b40      	cmp	r3, #64	@ 0x40
 800d99c:	d031      	beq.n	800da02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	69db      	ldr	r3, [r3, #28]
 800d9a4:	f003 0308 	and.w	r3, r3, #8
 800d9a8:	2b08      	cmp	r3, #8
 800d9aa:	d110      	bne.n	800d9ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2208      	movs	r2, #8
 800d9b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9b4:	68f8      	ldr	r0, [r7, #12]
 800d9b6:	f000 f99c 	bl	800dcf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2208      	movs	r2, #8
 800d9be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e029      	b.n	800da22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	69db      	ldr	r3, [r3, #28]
 800d9d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d9dc:	d111      	bne.n	800da02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d9e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 f982 	bl	800dcf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2220      	movs	r2, #32
 800d9f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d9fe:	2303      	movs	r3, #3
 800da00:	e00f      	b.n	800da22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	69da      	ldr	r2, [r3, #28]
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	4013      	ands	r3, r2
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	429a      	cmp	r2, r3
 800da10:	bf0c      	ite	eq
 800da12:	2301      	moveq	r3, #1
 800da14:	2300      	movne	r3, #0
 800da16:	b2db      	uxtb	r3, r3
 800da18:	461a      	mov	r2, r3
 800da1a:	79fb      	ldrb	r3, [r7, #7]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d0a0      	beq.n	800d962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
	...

0800da2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b0a3      	sub	sp, #140	@ 0x8c
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	4613      	mov	r3, r2
 800da38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	88fa      	ldrh	r2, [r7, #6]
 800da44:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	88fa      	ldrh	r2, [r7, #6]
 800da4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2200      	movs	r2, #0
 800da54:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da5e:	d10e      	bne.n	800da7e <UART_Start_Receive_IT+0x52>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d105      	bne.n	800da74 <UART_Start_Receive_IT+0x48>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800da6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da72:	e02d      	b.n	800dad0 <UART_Start_Receive_IT+0xa4>
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	22ff      	movs	r2, #255	@ 0xff
 800da78:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da7c:	e028      	b.n	800dad0 <UART_Start_Receive_IT+0xa4>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10d      	bne.n	800daa2 <UART_Start_Receive_IT+0x76>
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	691b      	ldr	r3, [r3, #16]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d104      	bne.n	800da98 <UART_Start_Receive_IT+0x6c>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	22ff      	movs	r2, #255	@ 0xff
 800da92:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800da96:	e01b      	b.n	800dad0 <UART_Start_Receive_IT+0xa4>
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	227f      	movs	r2, #127	@ 0x7f
 800da9c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800daa0:	e016      	b.n	800dad0 <UART_Start_Receive_IT+0xa4>
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800daaa:	d10d      	bne.n	800dac8 <UART_Start_Receive_IT+0x9c>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d104      	bne.n	800dabe <UART_Start_Receive_IT+0x92>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	227f      	movs	r2, #127	@ 0x7f
 800dab8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dabc:	e008      	b.n	800dad0 <UART_Start_Receive_IT+0xa4>
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	223f      	movs	r2, #63	@ 0x3f
 800dac2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800dac6:	e003      	b.n	800dad0 <UART_Start_Receive_IT+0xa4>
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2200      	movs	r2, #0
 800dacc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2222      	movs	r2, #34	@ 0x22
 800dadc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3308      	adds	r3, #8
 800dae6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dae8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800daea:	e853 3f00 	ldrex	r3, [r3]
 800daee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800daf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800daf2:	f043 0301 	orr.w	r3, r3, #1
 800daf6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3308      	adds	r3, #8
 800db00:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800db04:	673a      	str	r2, [r7, #112]	@ 0x70
 800db06:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db08:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800db0a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800db0c:	e841 2300 	strex	r3, r2, [r1]
 800db10:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800db12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db14:	2b00      	cmp	r3, #0
 800db16:	d1e3      	bne.n	800dae0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db20:	d14f      	bne.n	800dbc2 <UART_Start_Receive_IT+0x196>
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800db28:	88fa      	ldrh	r2, [r7, #6]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d349      	bcc.n	800dbc2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db36:	d107      	bne.n	800db48 <UART_Start_Receive_IT+0x11c>
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d103      	bne.n	800db48 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	4a47      	ldr	r2, [pc, #284]	@ (800dc60 <UART_Start_Receive_IT+0x234>)
 800db44:	675a      	str	r2, [r3, #116]	@ 0x74
 800db46:	e002      	b.n	800db4e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	4a46      	ldr	r2, [pc, #280]	@ (800dc64 <UART_Start_Receive_IT+0x238>)
 800db4c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d01a      	beq.n	800db8c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db5e:	e853 3f00 	ldrex	r3, [r3]
 800db62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800db64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	461a      	mov	r2, r3
 800db74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800db78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db7a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800db7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800db80:	e841 2300 	strex	r3, r2, [r1]
 800db84:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800db86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d1e4      	bne.n	800db56 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	3308      	adds	r3, #8
 800db92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db96:	e853 3f00 	ldrex	r3, [r3]
 800db9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dba2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	3308      	adds	r3, #8
 800dbaa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800dbac:	64ba      	str	r2, [r7, #72]	@ 0x48
 800dbae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbb0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dbb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbb4:	e841 2300 	strex	r3, r2, [r1]
 800dbb8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800dbba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1e5      	bne.n	800db8c <UART_Start_Receive_IT+0x160>
 800dbc0:	e046      	b.n	800dc50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbca:	d107      	bne.n	800dbdc <UART_Start_Receive_IT+0x1b0>
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	691b      	ldr	r3, [r3, #16]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d103      	bne.n	800dbdc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	4a24      	ldr	r2, [pc, #144]	@ (800dc68 <UART_Start_Receive_IT+0x23c>)
 800dbd8:	675a      	str	r2, [r3, #116]	@ 0x74
 800dbda:	e002      	b.n	800dbe2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	4a23      	ldr	r2, [pc, #140]	@ (800dc6c <UART_Start_Receive_IT+0x240>)
 800dbe0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d019      	beq.n	800dc1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbf2:	e853 3f00 	ldrex	r3, [r3]
 800dbf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800dbfe:	677b      	str	r3, [r7, #116]	@ 0x74
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	461a      	mov	r2, r3
 800dc06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800dc08:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc0a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800dc0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc10:	e841 2300 	strex	r3, r2, [r1]
 800dc14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dc16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1e6      	bne.n	800dbea <UART_Start_Receive_IT+0x1be>
 800dc1c:	e018      	b.n	800dc50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	e853 3f00 	ldrex	r3, [r3]
 800dc2a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	f043 0320 	orr.w	r3, r3, #32
 800dc32:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc3c:	623b      	str	r3, [r7, #32]
 800dc3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc40:	69f9      	ldr	r1, [r7, #28]
 800dc42:	6a3a      	ldr	r2, [r7, #32]
 800dc44:	e841 2300 	strex	r3, r2, [r1]
 800dc48:	61bb      	str	r3, [r7, #24]
   return(result);
 800dc4a:	69bb      	ldr	r3, [r7, #24]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1e6      	bne.n	800dc1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	378c      	adds	r7, #140	@ 0x8c
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	0800e675 	.word	0x0800e675
 800dc64:	0800e305 	.word	0x0800e305
 800dc68:	0800e145 	.word	0x0800e145
 800dc6c:	0800df85 	.word	0x0800df85

0800dc70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b08f      	sub	sp, #60	@ 0x3c
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7e:	6a3b      	ldr	r3, [r7, #32]
 800dc80:	e853 3f00 	ldrex	r3, [r3]
 800dc84:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800dc8c:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	461a      	mov	r2, r3
 800dc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc98:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc9e:	e841 2300 	strex	r3, r2, [r1]
 800dca2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d1e6      	bne.n	800dc78 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	3308      	adds	r3, #8
 800dcb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	e853 3f00 	ldrex	r3, [r3]
 800dcb8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800dcc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3308      	adds	r3, #8
 800dcc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcca:	61ba      	str	r2, [r7, #24]
 800dccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcce:	6979      	ldr	r1, [r7, #20]
 800dcd0:	69ba      	ldr	r2, [r7, #24]
 800dcd2:	e841 2300 	strex	r3, r2, [r1]
 800dcd6:	613b      	str	r3, [r7, #16]
   return(result);
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d1e5      	bne.n	800dcaa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2220      	movs	r2, #32
 800dce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800dce6:	bf00      	nop
 800dce8:	373c      	adds	r7, #60	@ 0x3c
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr

0800dcf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcf2:	b480      	push	{r7}
 800dcf4:	b095      	sub	sp, #84	@ 0x54
 800dcf6:	af00      	add	r7, sp, #0
 800dcf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd02:	e853 3f00 	ldrex	r3, [r3]
 800dd06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	461a      	mov	r2, r3
 800dd16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd18:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dd1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd20:	e841 2300 	strex	r3, r2, [r1]
 800dd24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d1e6      	bne.n	800dcfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	3308      	adds	r3, #8
 800dd32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	e853 3f00 	ldrex	r3, [r3]
 800dd3a:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dd42:	f023 0301 	bic.w	r3, r3, #1
 800dd46:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	3308      	adds	r3, #8
 800dd4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dd52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dd56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd58:	e841 2300 	strex	r3, r2, [r1]
 800dd5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1e3      	bne.n	800dd2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d118      	bne.n	800dd9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	e853 3f00 	ldrex	r3, [r3]
 800dd78:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f023 0310 	bic.w	r3, r3, #16
 800dd80:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	461a      	mov	r2, r3
 800dd88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd8a:	61bb      	str	r3, [r7, #24]
 800dd8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd8e:	6979      	ldr	r1, [r7, #20]
 800dd90:	69ba      	ldr	r2, [r7, #24]
 800dd92:	e841 2300 	strex	r3, r2, [r1]
 800dd96:	613b      	str	r3, [r7, #16]
   return(result);
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d1e6      	bne.n	800dd6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2220      	movs	r2, #32
 800dda2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ddb2:	bf00      	nop
 800ddb4:	3754      	adds	r7, #84	@ 0x54
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b090      	sub	sp, #64	@ 0x40
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f003 0320 	and.w	r3, r3, #32
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d137      	bne.n	800de4a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800ddda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dddc:	2200      	movs	r2, #0
 800ddde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dde2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3308      	adds	r3, #8
 800dde8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddec:	e853 3f00 	ldrex	r3, [r3]
 800ddf0:	623b      	str	r3, [r7, #32]
   return(result);
 800ddf2:	6a3b      	ldr	r3, [r7, #32]
 800ddf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ddf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ddfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3308      	adds	r3, #8
 800de00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de02:	633a      	str	r2, [r7, #48]	@ 0x30
 800de04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de0a:	e841 2300 	strex	r3, r2, [r1]
 800de0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e5      	bne.n	800dde2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800de16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	e853 3f00 	ldrex	r3, [r3]
 800de22:	60fb      	str	r3, [r7, #12]
   return(result);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800de2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	461a      	mov	r2, r3
 800de32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de34:	61fb      	str	r3, [r7, #28]
 800de36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de38:	69b9      	ldr	r1, [r7, #24]
 800de3a:	69fa      	ldr	r2, [r7, #28]
 800de3c:	e841 2300 	strex	r3, r2, [r1]
 800de40:	617b      	str	r3, [r7, #20]
   return(result);
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1e6      	bne.n	800de16 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800de48:	e004      	b.n	800de54 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800de4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800de52:	4798      	blx	r3
}
 800de54:	bf00      	nop
 800de56:	3740      	adds	r7, #64	@ 0x40
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de68:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de74:	bf00      	nop
 800de76:	3710      	adds	r7, #16
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b086      	sub	sp, #24
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de88:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de90:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de98:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800de9a:	697b      	ldr	r3, [r7, #20]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	689b      	ldr	r3, [r3, #8]
 800dea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dea4:	2b80      	cmp	r3, #128	@ 0x80
 800dea6:	d109      	bne.n	800debc <UART_DMAError+0x40>
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	2b21      	cmp	r3, #33	@ 0x21
 800deac:	d106      	bne.n	800debc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800deb6:	6978      	ldr	r0, [r7, #20]
 800deb8:	f7ff feda 	bl	800dc70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dec6:	2b40      	cmp	r3, #64	@ 0x40
 800dec8:	d109      	bne.n	800dede <UART_DMAError+0x62>
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b22      	cmp	r3, #34	@ 0x22
 800dece:	d106      	bne.n	800dede <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2200      	movs	r2, #0
 800ded4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ded8:	6978      	ldr	r0, [r7, #20]
 800deda:	f7ff ff0a 	bl	800dcf2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dee4:	f043 0210 	orr.w	r2, r3, #16
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800def4:	6978      	ldr	r0, [r7, #20]
 800def6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800def8:	bf00      	nop
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df20:	bf00      	nop
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	e853 3f00 	ldrex	r3, [r3]
 800df3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df44:	61fb      	str	r3, [r7, #28]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	461a      	mov	r2, r3
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	61bb      	str	r3, [r7, #24]
 800df50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df52:	6979      	ldr	r1, [r7, #20]
 800df54:	69ba      	ldr	r2, [r7, #24]
 800df56:	e841 2300 	strex	r3, r2, [r1]
 800df5a:	613b      	str	r3, [r7, #16]
   return(result);
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1e6      	bne.n	800df30 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2220      	movs	r2, #32
 800df66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df7a:	bf00      	nop
 800df7c:	3720      	adds	r7, #32
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
	...

0800df84 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800df84:	b580      	push	{r7, lr}
 800df86:	b09c      	sub	sp, #112	@ 0x70
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df92:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800df9c:	2b22      	cmp	r3, #34	@ 0x22
 800df9e:	f040 80c2 	bne.w	800e126 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dfac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dfb0:	b2d9      	uxtb	r1, r3
 800dfb2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfbc:	400a      	ands	r2, r1
 800dfbe:	b2d2      	uxtb	r2, r2
 800dfc0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dfc6:	1c5a      	adds	r2, r3, #1
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfd2:	b29b      	uxth	r3, r3
 800dfd4:	3b01      	subs	r3, #1
 800dfd6:	b29a      	uxth	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	f040 80a5 	bne.w	800e136 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dff4:	e853 3f00 	ldrex	r3, [r3]
 800dff8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e000:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e00a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e00c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e00e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e010:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e012:	e841 2300 	strex	r3, r2, [r1]
 800e016:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e018:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d1e6      	bne.n	800dfec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3308      	adds	r3, #8
 800e024:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e028:	e853 3f00 	ldrex	r3, [r3]
 800e02c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e030:	f023 0301 	bic.w	r3, r3, #1
 800e034:	667b      	str	r3, [r7, #100]	@ 0x64
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3308      	adds	r3, #8
 800e03c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e03e:	647a      	str	r2, [r7, #68]	@ 0x44
 800e040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e046:	e841 2300 	strex	r3, r2, [r1]
 800e04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1e5      	bne.n	800e01e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2220      	movs	r2, #32
 800e056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a35      	ldr	r2, [pc, #212]	@ (800e140 <UART_RxISR_8BIT+0x1bc>)
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d01f      	beq.n	800e0b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d018      	beq.n	800e0b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e086:	e853 3f00 	ldrex	r3, [r3]
 800e08a:	623b      	str	r3, [r7, #32]
   return(result);
 800e08c:	6a3b      	ldr	r3, [r7, #32]
 800e08e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e092:	663b      	str	r3, [r7, #96]	@ 0x60
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	461a      	mov	r2, r3
 800e09a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e09c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e09e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0a4:	e841 2300 	strex	r3, r2, [r1]
 800e0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e6      	bne.n	800e07e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d130      	bne.n	800e11a <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c4:	693b      	ldr	r3, [r7, #16]
 800e0c6:	e853 3f00 	ldrex	r3, [r3]
 800e0ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f023 0310 	bic.w	r3, r3, #16
 800e0d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	461a      	mov	r2, r3
 800e0da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0dc:	61fb      	str	r3, [r7, #28]
 800e0de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e0:	69b9      	ldr	r1, [r7, #24]
 800e0e2:	69fa      	ldr	r2, [r7, #28]
 800e0e4:	e841 2300 	strex	r3, r2, [r1]
 800e0e8:	617b      	str	r3, [r7, #20]
   return(result);
 800e0ea:	697b      	ldr	r3, [r7, #20]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1e6      	bne.n	800e0be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	69db      	ldr	r3, [r3, #28]
 800e0f6:	f003 0310 	and.w	r3, r3, #16
 800e0fa:	2b10      	cmp	r3, #16
 800e0fc:	d103      	bne.n	800e106 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2210      	movs	r2, #16
 800e104:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e10c:	687a      	ldr	r2, [r7, #4]
 800e10e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e112:	4611      	mov	r1, r2
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e118:	e00d      	b.n	800e136 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	4798      	blx	r3
}
 800e124:	e007      	b.n	800e136 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	699a      	ldr	r2, [r3, #24]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f042 0208 	orr.w	r2, r2, #8
 800e134:	619a      	str	r2, [r3, #24]
}
 800e136:	bf00      	nop
 800e138:	3770      	adds	r7, #112	@ 0x70
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	40008000 	.word	0x40008000

0800e144 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b09c      	sub	sp, #112	@ 0x70
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e152:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e15c:	2b22      	cmp	r3, #34	@ 0x22
 800e15e:	f040 80c2 	bne.w	800e2e6 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e168:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e170:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e172:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800e176:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800e17a:	4013      	ands	r3, r2
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e180:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e186:	1c9a      	adds	r2, r3, #2
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e192:	b29b      	uxth	r3, r3
 800e194:	3b01      	subs	r3, #1
 800e196:	b29a      	uxth	r2, r3
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	f040 80a5 	bne.w	800e2f6 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1b4:	e853 3f00 	ldrex	r3, [r3]
 800e1b8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e1c0:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e1ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1cc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e1d2:	e841 2300 	strex	r3, r2, [r1]
 800e1d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d1e6      	bne.n	800e1ac <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3308      	adds	r3, #8
 800e1e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1e8:	e853 3f00 	ldrex	r3, [r3]
 800e1ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f0:	f023 0301 	bic.w	r3, r3, #1
 800e1f4:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	3308      	adds	r3, #8
 800e1fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e1fe:	643a      	str	r2, [r7, #64]	@ 0x40
 800e200:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e202:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e204:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e206:	e841 2300 	strex	r3, r2, [r1]
 800e20a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1e5      	bne.n	800e1de <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2220      	movs	r2, #32
 800e216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2200      	movs	r2, #0
 800e21e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a35      	ldr	r2, [pc, #212]	@ (800e300 <UART_RxISR_16BIT+0x1bc>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d01f      	beq.n	800e270 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	685b      	ldr	r3, [r3, #4]
 800e236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d018      	beq.n	800e270 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e244:	6a3b      	ldr	r3, [r7, #32]
 800e246:	e853 3f00 	ldrex	r3, [r3]
 800e24a:	61fb      	str	r3, [r7, #28]
   return(result);
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	461a      	mov	r2, r3
 800e25a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e25c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e25e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e264:	e841 2300 	strex	r3, r2, [r1]
 800e268:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d1e6      	bne.n	800e23e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e274:	2b01      	cmp	r3, #1
 800e276:	d130      	bne.n	800e2da <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2200      	movs	r2, #0
 800e27c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	e853 3f00 	ldrex	r3, [r3]
 800e28a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	f023 0310 	bic.w	r3, r3, #16
 800e292:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	461a      	mov	r2, r3
 800e29a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e29c:	61bb      	str	r3, [r7, #24]
 800e29e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2a0:	6979      	ldr	r1, [r7, #20]
 800e2a2:	69ba      	ldr	r2, [r7, #24]
 800e2a4:	e841 2300 	strex	r3, r2, [r1]
 800e2a8:	613b      	str	r3, [r7, #16]
   return(result);
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1e6      	bne.n	800e27e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	69db      	ldr	r3, [r3, #28]
 800e2b6:	f003 0310 	and.w	r3, r3, #16
 800e2ba:	2b10      	cmp	r3, #16
 800e2bc:	d103      	bne.n	800e2c6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	2210      	movs	r2, #16
 800e2c4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e2cc:	687a      	ldr	r2, [r7, #4]
 800e2ce:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e2d8:	e00d      	b.n	800e2f6 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	4798      	blx	r3
}
 800e2e4:	e007      	b.n	800e2f6 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	699a      	ldr	r2, [r3, #24]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f042 0208 	orr.w	r2, r2, #8
 800e2f4:	619a      	str	r2, [r3, #24]
}
 800e2f6:	bf00      	nop
 800e2f8:	3770      	adds	r7, #112	@ 0x70
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}
 800e2fe:	bf00      	nop
 800e300:	40008000 	.word	0x40008000

0800e304 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b0ac      	sub	sp, #176	@ 0xb0
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e312:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	69db      	ldr	r3, [r3, #28]
 800e31c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	689b      	ldr	r3, [r3, #8]
 800e330:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e33a:	2b22      	cmp	r3, #34	@ 0x22
 800e33c:	f040 8189 	bne.w	800e652 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e346:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e34a:	e12c      	b.n	800e5a6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e352:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e356:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e35a:	b2d9      	uxtb	r1, r3
 800e35c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e360:	b2da      	uxtb	r2, r3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e366:	400a      	ands	r2, r1
 800e368:	b2d2      	uxtb	r2, r2
 800e36a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e370:	1c5a      	adds	r2, r3, #1
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b01      	subs	r3, #1
 800e380:	b29a      	uxth	r2, r3
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	69db      	ldr	r3, [r3, #28]
 800e38e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e396:	f003 0307 	and.w	r3, r3, #7
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d055      	beq.n	800e44a <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e39e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d011      	beq.n	800e3ce <UART_RxISR_8BIT_FIFOEN+0xca>
 800e3aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e3ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00b      	beq.n	800e3ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3c4:	f043 0201 	orr.w	r2, r3, #1
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e3d2:	f003 0302 	and.w	r3, r3, #2
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d011      	beq.n	800e3fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e3da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3de:	f003 0301 	and.w	r3, r3, #1
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00b      	beq.n	800e3fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2202      	movs	r2, #2
 800e3ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e3f4:	f043 0204 	orr.w	r2, r3, #4
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e3fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e402:	f003 0304 	and.w	r3, r3, #4
 800e406:	2b00      	cmp	r3, #0
 800e408:	d011      	beq.n	800e42e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e40a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e40e:	f003 0301 	and.w	r3, r3, #1
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00b      	beq.n	800e42e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	2204      	movs	r2, #4
 800e41c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e424:	f043 0202 	orr.w	r2, r3, #2
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e434:	2b00      	cmp	r3, #0
 800e436:	d008      	beq.n	800e44a <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2200      	movs	r2, #0
 800e446:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e450:	b29b      	uxth	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	f040 80a7 	bne.w	800e5a6 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e45e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e460:	e853 3f00 	ldrex	r3, [r3]
 800e464:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e46c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	461a      	mov	r2, r3
 800e476:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e47a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e47c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e47e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e480:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e482:	e841 2300 	strex	r3, r2, [r1]
 800e486:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1e4      	bne.n	800e458 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	3308      	adds	r3, #8
 800e494:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e496:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e498:	e853 3f00 	ldrex	r3, [r3]
 800e49c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e49e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e4a4:	f023 0301 	bic.w	r3, r3, #1
 800e4a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	3308      	adds	r3, #8
 800e4b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e4b6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e4b8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e4bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e4be:	e841 2300 	strex	r3, r2, [r1]
 800e4c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e4c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1e1      	bne.n	800e48e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2220      	movs	r2, #32
 800e4ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a62      	ldr	r2, [pc, #392]	@ (800e66c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d021      	beq.n	800e52c <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d01a      	beq.n	800e52c <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e4fe:	e853 3f00 	ldrex	r3, [r3]
 800e502:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e506:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e50a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	461a      	mov	r2, r3
 800e514:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e518:	657b      	str	r3, [r7, #84]	@ 0x54
 800e51a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e51c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e51e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e520:	e841 2300 	strex	r3, r2, [r1]
 800e524:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1e4      	bne.n	800e4f6 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e530:	2b01      	cmp	r3, #1
 800e532:	d132      	bne.n	800e59a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e542:	e853 3f00 	ldrex	r3, [r3]
 800e546:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54a:	f023 0310 	bic.w	r3, r3, #16
 800e54e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	461a      	mov	r2, r3
 800e558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e55c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e55e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e560:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e564:	e841 2300 	strex	r3, r2, [r1]
 800e568:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d1e4      	bne.n	800e53a <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	69db      	ldr	r3, [r3, #28]
 800e576:	f003 0310 	and.w	r3, r3, #16
 800e57a:	2b10      	cmp	r3, #16
 800e57c:	d103      	bne.n	800e586 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2210      	movs	r2, #16
 800e584:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e58c:	687a      	ldr	r2, [r7, #4]
 800e58e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e592:	4611      	mov	r1, r2
 800e594:	6878      	ldr	r0, [r7, #4]
 800e596:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e598:	e010      	b.n	800e5bc <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	4798      	blx	r3
        break;
 800e5a4:	e00a      	b.n	800e5bc <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5a6:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d006      	beq.n	800e5bc <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800e5ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e5b2:	f003 0320 	and.w	r3, r3, #32
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f47f aec8 	bne.w	800e34c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e5c2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e5c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d049      	beq.n	800e662 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e5d4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d242      	bcs.n	800e662 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3308      	adds	r3, #8
 800e5e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	e853 3f00 	ldrex	r3, [r3]
 800e5ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5ec:	69fb      	ldr	r3, [r7, #28]
 800e5ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e5f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	3308      	adds	r3, #8
 800e5fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e600:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e602:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e604:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e606:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e608:	e841 2300 	strex	r3, r2, [r1]
 800e60c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e610:	2b00      	cmp	r3, #0
 800e612:	d1e3      	bne.n	800e5dc <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a16      	ldr	r2, [pc, #88]	@ (800e670 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e618:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	e853 3f00 	ldrex	r3, [r3]
 800e626:	60bb      	str	r3, [r7, #8]
   return(result);
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	f043 0320 	orr.w	r3, r3, #32
 800e62e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e63c:	61bb      	str	r3, [r7, #24]
 800e63e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e640:	6979      	ldr	r1, [r7, #20]
 800e642:	69ba      	ldr	r2, [r7, #24]
 800e644:	e841 2300 	strex	r3, r2, [r1]
 800e648:	613b      	str	r3, [r7, #16]
   return(result);
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1e4      	bne.n	800e61a <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e650:	e007      	b.n	800e662 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	699a      	ldr	r2, [r3, #24]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f042 0208 	orr.w	r2, r2, #8
 800e660:	619a      	str	r2, [r3, #24]
}
 800e662:	bf00      	nop
 800e664:	37b0      	adds	r7, #176	@ 0xb0
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	40008000 	.word	0x40008000
 800e670:	0800df85 	.word	0x0800df85

0800e674 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b0ae      	sub	sp, #184	@ 0xb8
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e682:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e6aa:	2b22      	cmp	r3, #34	@ 0x22
 800e6ac:	f040 818d 	bne.w	800e9ca <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e6b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e6ba:	e130      	b.n	800e91e <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e6ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e6d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e6d6:	4013      	ands	r3, r2
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e6de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6e4:	1c9a      	adds	r2, r3, #2
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	3b01      	subs	r3, #1
 800e6f4:	b29a      	uxth	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	69db      	ldr	r3, [r3, #28]
 800e702:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e706:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e70a:	f003 0307 	and.w	r3, r3, #7
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d055      	beq.n	800e7be <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e712:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d011      	beq.n	800e742 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e71e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e726:	2b00      	cmp	r3, #0
 800e728:	d00b      	beq.n	800e742 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2201      	movs	r2, #1
 800e730:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e738:	f043 0201 	orr.w	r2, r3, #1
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e746:	f003 0302 	and.w	r3, r3, #2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d011      	beq.n	800e772 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e74e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e752:	f003 0301 	and.w	r3, r3, #1
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00b      	beq.n	800e772 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2202      	movs	r2, #2
 800e760:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e768:	f043 0204 	orr.w	r2, r3, #4
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e776:	f003 0304 	and.w	r3, r3, #4
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d011      	beq.n	800e7a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e77e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e782:	f003 0301 	and.w	r3, r3, #1
 800e786:	2b00      	cmp	r3, #0
 800e788:	d00b      	beq.n	800e7a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2204      	movs	r2, #4
 800e790:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e798:	f043 0202 	orr.w	r2, r3, #2
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d008      	beq.n	800e7be <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	f040 80a9 	bne.w	800e91e <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e7d4:	e853 3f00 	ldrex	r3, [r3]
 800e7d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e7da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e7dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e7e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e7ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e7f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e7f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e7fa:	e841 2300 	strex	r3, r2, [r1]
 800e7fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e802:	2b00      	cmp	r3, #0
 800e804:	d1e2      	bne.n	800e7cc <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	3308      	adds	r3, #8
 800e80c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e81c:	f023 0301 	bic.w	r3, r3, #1
 800e820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	3308      	adds	r3, #8
 800e82a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e82e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e830:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e832:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e834:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e836:	e841 2300 	strex	r3, r2, [r1]
 800e83a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e83c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d1e1      	bne.n	800e806 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2220      	movs	r2, #32
 800e846:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a62      	ldr	r2, [pc, #392]	@ (800e9e4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d021      	beq.n	800e8a4 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d01a      	beq.n	800e8a4 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e876:	e853 3f00 	ldrex	r3, [r3]
 800e87a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e87c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e87e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e882:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	461a      	mov	r2, r3
 800e88c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e890:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e892:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e894:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e896:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e898:	e841 2300 	strex	r3, r2, [r1]
 800e89c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e89e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d1e4      	bne.n	800e86e <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d132      	bne.n	800e912 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ba:	e853 3f00 	ldrex	r3, [r3]
 800e8be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8c2:	f023 0310 	bic.w	r3, r3, #16
 800e8c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e8d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e8d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8dc:	e841 2300 	strex	r3, r2, [r1]
 800e8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1e4      	bne.n	800e8b2 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	69db      	ldr	r3, [r3, #28]
 800e8ee:	f003 0310 	and.w	r3, r3, #16
 800e8f2:	2b10      	cmp	r3, #16
 800e8f4:	d103      	bne.n	800e8fe <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	2210      	movs	r2, #16
 800e8fc:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e904:	687a      	ldr	r2, [r7, #4]
 800e906:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e90a:	4611      	mov	r1, r2
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e910:	e010      	b.n	800e934 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	4798      	blx	r3
        break;
 800e91c:	e00a      	b.n	800e934 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e91e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e922:	2b00      	cmp	r3, #0
 800e924:	d006      	beq.n	800e934 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800e926:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e92a:	f003 0320 	and.w	r3, r3, #32
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f47f aec4 	bne.w	800e6bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e93a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e93e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e942:	2b00      	cmp	r3, #0
 800e944:	d049      	beq.n	800e9da <UART_RxISR_16BIT_FIFOEN+0x366>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e94c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e950:	429a      	cmp	r2, r3
 800e952:	d242      	bcs.n	800e9da <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3308      	adds	r3, #8
 800e95a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95e:	e853 3f00 	ldrex	r3, [r3]
 800e962:	623b      	str	r3, [r7, #32]
   return(result);
 800e964:	6a3b      	ldr	r3, [r7, #32]
 800e966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e96a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	3308      	adds	r3, #8
 800e974:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e978:	633a      	str	r2, [r7, #48]	@ 0x30
 800e97a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e97e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e980:	e841 2300 	strex	r3, r2, [r1]
 800e984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1e3      	bne.n	800e954 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	4a16      	ldr	r2, [pc, #88]	@ (800e9e8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e990:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	e853 3f00 	ldrex	r3, [r3]
 800e99e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f043 0320 	orr.w	r3, r3, #32
 800e9a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	461a      	mov	r2, r3
 800e9b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e9b4:	61fb      	str	r3, [r7, #28]
 800e9b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b8:	69b9      	ldr	r1, [r7, #24]
 800e9ba:	69fa      	ldr	r2, [r7, #28]
 800e9bc:	e841 2300 	strex	r3, r2, [r1]
 800e9c0:	617b      	str	r3, [r7, #20]
   return(result);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1e4      	bne.n	800e992 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e9c8:	e007      	b.n	800e9da <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	699a      	ldr	r2, [r3, #24]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f042 0208 	orr.w	r2, r2, #8
 800e9d8:	619a      	str	r2, [r3, #24]
}
 800e9da:	bf00      	nop
 800e9dc:	37b8      	adds	r7, #184	@ 0xb8
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}
 800e9e2:	bf00      	nop
 800e9e4:	40008000 	.word	0x40008000
 800e9e8:	0800e145 	.word	0x0800e145

0800e9ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e9f4:	bf00      	nop
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b085      	sub	sp, #20
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d101      	bne.n	800ea3e <HAL_UARTEx_DisableFifoMode+0x16>
 800ea3a:	2302      	movs	r3, #2
 800ea3c:	e027      	b.n	800ea8e <HAL_UARTEx_DisableFifoMode+0x66>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2201      	movs	r2, #1
 800ea42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2224      	movs	r2, #36	@ 0x24
 800ea4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	681a      	ldr	r2, [r3, #0]
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f022 0201 	bic.w	r2, r2, #1
 800ea64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ea6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2200      	movs	r2, #0
 800ea72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2220      	movs	r2, #32
 800ea80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ea8c:	2300      	movs	r3, #0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3714      	adds	r7, #20
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr

0800ea9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b084      	sub	sp, #16
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	d101      	bne.n	800eab2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eaae:	2302      	movs	r3, #2
 800eab0:	e02d      	b.n	800eb0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2201      	movs	r2, #1
 800eab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2224      	movs	r2, #36	@ 0x24
 800eabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	681a      	ldr	r2, [r3, #0]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f022 0201 	bic.w	r2, r2, #1
 800ead8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	683a      	ldr	r2, [r7, #0]
 800eaea:	430a      	orrs	r2, r1
 800eaec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 f850 	bl	800eb94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2220      	movs	r2, #32
 800eb00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb0c:	2300      	movs	r3, #0
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b084      	sub	sp, #16
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
 800eb1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d101      	bne.n	800eb2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eb2a:	2302      	movs	r3, #2
 800eb2c:	e02d      	b.n	800eb8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	2201      	movs	r2, #1
 800eb32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2224      	movs	r2, #36	@ 0x24
 800eb3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f022 0201 	bic.w	r2, r2, #1
 800eb54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	683a      	ldr	r2, [r7, #0]
 800eb66:	430a      	orrs	r2, r1
 800eb68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f000 f812 	bl	800eb94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2220      	movs	r2, #32
 800eb7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
	...

0800eb94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b085      	sub	sp, #20
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d108      	bne.n	800ebb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2201      	movs	r2, #1
 800eba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ebb4:	e031      	b.n	800ec1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ebb6:	2308      	movs	r3, #8
 800ebb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ebba:	2308      	movs	r3, #8
 800ebbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	689b      	ldr	r3, [r3, #8]
 800ebc4:	0e5b      	lsrs	r3, r3, #25
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	f003 0307 	and.w	r3, r3, #7
 800ebcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	689b      	ldr	r3, [r3, #8]
 800ebd4:	0f5b      	lsrs	r3, r3, #29
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	f003 0307 	and.w	r3, r3, #7
 800ebdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebde:	7bbb      	ldrb	r3, [r7, #14]
 800ebe0:	7b3a      	ldrb	r2, [r7, #12]
 800ebe2:	4911      	ldr	r1, [pc, #68]	@ (800ec28 <UARTEx_SetNbDataToProcess+0x94>)
 800ebe4:	5c8a      	ldrb	r2, [r1, r2]
 800ebe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ebea:	7b3a      	ldrb	r2, [r7, #12]
 800ebec:	490f      	ldr	r1, [pc, #60]	@ (800ec2c <UARTEx_SetNbDataToProcess+0x98>)
 800ebee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ebf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebfc:	7bfb      	ldrb	r3, [r7, #15]
 800ebfe:	7b7a      	ldrb	r2, [r7, #13]
 800ec00:	4909      	ldr	r1, [pc, #36]	@ (800ec28 <UARTEx_SetNbDataToProcess+0x94>)
 800ec02:	5c8a      	ldrb	r2, [r1, r2]
 800ec04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ec08:	7b7a      	ldrb	r2, [r7, #13]
 800ec0a:	4908      	ldr	r1, [pc, #32]	@ (800ec2c <UARTEx_SetNbDataToProcess+0x98>)
 800ec0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ec0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ec1a:	bf00      	nop
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	080113c0 	.word	0x080113c0
 800ec2c:	080113c8 	.word	0x080113c8

0800ec30 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	ed93 7a06 	vldr	s14, [r3, #24]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	edd3 7a07 	vldr	s15, [r3, #28]
 800ec46:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	edd3 7a06 	vldr	s15, [r3, #24]
 800ec60:	eeb1 7a67 	vneg.f32	s14, s15
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	edd3 7a08 	vldr	s15, [r3, #32]
 800ec6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ec6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a1a      	ldr	r2, [r3, #32]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d006      	beq.n	800ec94 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	330c      	adds	r3, #12
 800ec8a:	220c      	movs	r2, #12
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f000 fcc4 	bl	800f61c <memset>
  }

}
 800ec94:	bf00      	nop
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}

0800ec9c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b08b      	sub	sp, #44	@ 0x2c
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	881b      	ldrh	r3, [r3, #0]
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	885b      	ldrh	r3, [r3, #2]
 800ecc4:	fb02 f303 	mul.w	r3, r2, r3
 800ecc8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ecce:	e013      	b.n	800ecf8 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecd2:	1d1a      	adds	r2, r3, #4
 800ecd4:	627a      	str	r2, [r7, #36]	@ 0x24
 800ecd6:	ed93 7a00 	vldr	s14, [r3]
 800ecda:	6a3b      	ldr	r3, [r7, #32]
 800ecdc:	1d1a      	adds	r2, r3, #4
 800ecde:	623a      	str	r2, [r7, #32]
 800ece0:	edd3 7a00 	vldr	s15, [r3]
 800ece4:	69fb      	ldr	r3, [r7, #28]
 800ece6:	1d1a      	adds	r2, r3, #4
 800ece8:	61fa      	str	r2, [r7, #28]
 800ecea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecee:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d1e8      	bne.n	800ecd0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ed02:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	372c      	adds	r7, #44	@ 0x2c
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr

0800ed12 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ed12:	b480      	push	{r7}
 800ed14:	b085      	sub	sp, #20
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	60f8      	str	r0, [r7, #12]
 800ed1a:	607b      	str	r3, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	817b      	strh	r3, [r7, #10]
 800ed20:	4613      	mov	r3, r2
 800ed22:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	897a      	ldrh	r2, [r7, #10]
 800ed28:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	893a      	ldrh	r2, [r7, #8]
 800ed2e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	605a      	str	r2, [r3, #4]
}
 800ed36:	bf00      	nop
 800ed38:	3714      	adds	r7, #20
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ed42:	b480      	push	{r7}
 800ed44:	b0bb      	sub	sp, #236	@ 0xec
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	881b      	ldrh	r3, [r3, #0]
 800ed5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	885b      	ldrh	r3, [r3, #2]
 800ed62:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ed64:	f04f 0300 	mov.w	r3, #0
 800ed68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed6c:	f04f 0300 	mov.w	r3, #0
 800ed70:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ed72:	2300      	movs	r3, #0
 800ed74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ed78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ed7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ed7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ed80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ed84:	e03b      	b.n	800edfe <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ed86:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ed88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ed8c:	1ad3      	subs	r3, r2, r3
 800ed8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ed92:	e00c      	b.n	800edae <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ed94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed98:	1d1a      	adds	r2, r3, #4
 800ed9a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ed9e:	f04f 0200 	mov.w	r2, #0
 800eda2:	601a      	str	r2, [r3, #0]
        j--;
 800eda4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eda8:	3b01      	subs	r3, #1
 800edaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800edae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d1ee      	bne.n	800ed94 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800edb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edba:	1d1a      	adds	r2, r3, #4
 800edbc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800edc0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800edc4:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800edc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800edca:	3b01      	subs	r3, #1
 800edcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800edd0:	e00c      	b.n	800edec <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800edd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edd6:	1d1a      	adds	r2, r3, #4
 800edd8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eddc:	f04f 0200 	mov.w	r2, #0
 800ede0:	601a      	str	r2, [r3, #0]
        j--;
 800ede2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ede6:	3b01      	subs	r3, #1
 800ede8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800edec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1ee      	bne.n	800edd2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800edf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800edf8:	3b01      	subs	r3, #1
 800edfa:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800edfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d1bf      	bne.n	800ed86 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ee06:	2300      	movs	r3, #0
 800ee08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ee0c:	e2c7      	b.n	800f39e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800ee0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee12:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	685a      	ldr	r2, [r3, #4]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	885b      	ldrh	r3, [r3, #2]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ee22:	fb01 f303 	mul.w	r3, r1, r3
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ee2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ee38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ee40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee44:	3301      	adds	r3, #1
 800ee46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ee4a:	e02c      	b.n	800eea6 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	685a      	ldr	r2, [r3, #4]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	885b      	ldrh	r3, [r3, #2]
 800ee54:	4619      	mov	r1, r3
 800ee56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee5a:	fb03 f101 	mul.w	r1, r3, r1
 800ee5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee62:	440b      	add	r3, r1
 800ee64:	009b      	lsls	r3, r3, #2
 800ee66:	4413      	add	r3, r2
 800ee68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800ee6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800ee74:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800ee78:	eeb0 7ae7 	vabs.f32	s14, s15
 800ee7c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee80:	eef0 7ae7 	vabs.f32	s15, s15
 800ee84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee8c:	dd06      	ble.n	800ee9c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800ee8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ee92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800ee96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ee9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eea0:	3301      	adds	r3, #1
 800eea2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eea6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eeaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d3cd      	bcc.n	800ee4c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800eeb0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eeb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eeb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eebc:	f000 809b 	beq.w	800eff6 <arm_mat_inverse_f32+0x2b4>
 800eec0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eec8:	429a      	cmp	r2, r3
 800eeca:	f000 8094 	beq.w	800eff6 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	685b      	ldr	r3, [r3, #4]
 800eeda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	885b      	ldrh	r3, [r3, #2]
 800eee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eee6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eeee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eef0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eef2:	fb03 f202 	mul.w	r2, r3, r2
 800eef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eefa:	4413      	add	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ef02:	4413      	add	r3, r2
 800ef04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ef08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ef0e:	fb03 f202 	mul.w	r2, r3, r2
 800ef12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef16:	4413      	add	r3, r2
 800ef18:	009b      	lsls	r3, r3, #2
 800ef1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef1e:	4413      	add	r3, r2
 800ef20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ef24:	2300      	movs	r3, #0
 800ef26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ef2a:	e018      	b.n	800ef5e <arm_mat_inverse_f32+0x21c>
 800ef2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ef34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ef38:	1d1a      	adds	r2, r3, #4
 800ef3a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ef3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ef42:	6812      	ldr	r2, [r2, #0]
 800ef44:	601a      	str	r2, [r3, #0]
 800ef46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ef4a:	1d1a      	adds	r2, r3, #4
 800ef4c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ef50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ef58:	3301      	adds	r3, #1
 800ef5a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ef5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ef62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef64:	429a      	cmp	r2, r3
 800ef66:	dbe1      	blt.n	800ef2c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	885b      	ldrh	r3, [r3, #2]
 800ef7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef80:	643b      	str	r3, [r7, #64]	@ 0x40
 800ef82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef86:	fb02 f303 	mul.w	r3, r2, r3
 800ef8a:	009b      	lsls	r3, r3, #2
 800ef8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ef90:	4413      	add	r3, r2
 800ef92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ef96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ef98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ef9c:	fb02 f303 	mul.w	r3, r2, r3
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800efa6:	4413      	add	r3, r2
 800efa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800efac:	2300      	movs	r3, #0
 800efae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800efb2:	e018      	b.n	800efe6 <arm_mat_inverse_f32+0x2a4>
 800efb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800efbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800efc0:	1d1a      	adds	r2, r3, #4
 800efc2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800efc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800efca:	6812      	ldr	r2, [r2, #0]
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800efd2:	1d1a      	adds	r2, r3, #4
 800efd4:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800efd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800efda:	601a      	str	r2, [r3, #0]
 800efdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800efe0:	3301      	adds	r3, #1
 800efe2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800efe6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800efea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efec:	429a      	cmp	r2, r3
 800efee:	dbe1      	blt.n	800efb4 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800eff0:	2301      	movs	r3, #1
 800eff2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800eff6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800effa:	2b01      	cmp	r3, #1
 800effc:	d009      	beq.n	800f012 <arm_mat_inverse_f32+0x2d0>
 800effe:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f002:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f00a:	d102      	bne.n	800f012 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800f00c:	f06f 0304 	mvn.w	r3, #4
 800f010:	e208      	b.n	800f424 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800f012:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f016:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800f01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f01e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	885b      	ldrh	r3, [r3, #2]
 800f02e:	637b      	str	r3, [r7, #52]	@ 0x34
 800f030:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f032:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f036:	1ad3      	subs	r3, r2, r3
 800f038:	633b      	str	r3, [r7, #48]	@ 0x30
 800f03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f03c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f03e:	fb03 f202 	mul.w	r2, r3, r2
 800f042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f046:	4413      	add	r3, r2
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800f04e:	4413      	add	r3, r2
 800f050:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f054:	2300      	movs	r3, #0
 800f056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f05a:	e011      	b.n	800f080 <arm_mat_inverse_f32+0x33e>
 800f05c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f060:	1d1a      	adds	r2, r3, #4
 800f062:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800f066:	ed93 7a00 	vldr	s14, [r3]
 800f06a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f072:	edc3 7a00 	vstr	s15, [r3]
 800f076:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f07a:	3301      	adds	r3, #1
 800f07c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f080:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800f084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f086:	429a      	cmp	r2, r3
 800f088:	dbe8      	blt.n	800f05c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	885b      	ldrh	r3, [r3, #2]
 800f096:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f09a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f09e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f0a0:	fb02 f303 	mul.w	r3, r2, r3
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f0aa:	4413      	add	r3, r2
 800f0ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f0b6:	e011      	b.n	800f0dc <arm_mat_inverse_f32+0x39a>
 800f0b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f0bc:	1d1a      	adds	r2, r3, #4
 800f0be:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800f0c2:	ed93 7a00 	vldr	s14, [r3]
 800f0c6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0ce:	edc3 7a00 	vstr	s15, [r3]
 800f0d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f0dc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800f0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	dbe8      	blt.n	800f0b8 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800f0ec:	e0ae      	b.n	800f24c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	685a      	ldr	r2, [r3, #4]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	885b      	ldrh	r3, [r3, #2]
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f0fc:	fb03 f101 	mul.w	r1, r3, r1
 800f100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f104:	440b      	add	r3, r1
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	4413      	add	r3, r2
 800f10a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800f10e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	885b      	ldrh	r3, [r3, #2]
 800f12c:	617b      	str	r3, [r7, #20]
 800f12e:	697a      	ldr	r2, [r7, #20]
 800f130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f134:	1ad3      	subs	r3, r2, r3
 800f136:	613b      	str	r3, [r7, #16]
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f13e:	fb03 f202 	mul.w	r2, r3, r2
 800f142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f146:	4413      	add	r3, r2
 800f148:	009b      	lsls	r3, r3, #2
 800f14a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800f14e:	4413      	add	r3, r2
 800f150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f158:	fb03 f202 	mul.w	r2, r3, r2
 800f15c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f160:	4413      	add	r3, r2
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f168:	4413      	add	r3, r2
 800f16a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f16e:	2300      	movs	r3, #0
 800f170:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f174:	e01a      	b.n	800f1ac <arm_mat_inverse_f32+0x46a>
 800f176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f17a:	1d1a      	adds	r2, r3, #4
 800f17c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f180:	ed93 7a00 	vldr	s14, [r3]
 800f184:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f18c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f190:	1d1a      	adds	r2, r3, #4
 800f192:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800f196:	ed93 7a00 	vldr	s14, [r3]
 800f19a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f19e:	edc3 7a00 	vstr	s15, [r3]
 800f1a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f1ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	dbdf      	blt.n	800f176 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	885b      	ldrh	r3, [r3, #2]
 800f1ca:	60fb      	str	r3, [r7, #12]
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	60bb      	str	r3, [r7, #8]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f1d6:	fb02 f303 	mul.w	r3, r2, r3
 800f1da:	009b      	lsls	r3, r3, #2
 800f1dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f1e0:	4413      	add	r3, r2
 800f1e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1ea:	fb02 f303 	mul.w	r3, r2, r3
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f200:	e01a      	b.n	800f238 <arm_mat_inverse_f32+0x4f6>
 800f202:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f206:	1d1a      	adds	r2, r3, #4
 800f208:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f20c:	ed93 7a00 	vldr	s14, [r3]
 800f210:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f214:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f21c:	1d1a      	adds	r2, r3, #4
 800f21e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800f222:	ed93 7a00 	vldr	s14, [r3]
 800f226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f22a:	edc3 7a00 	vstr	s15, [r3]
 800f22e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f232:	3301      	adds	r3, #1
 800f234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f238:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	429a      	cmp	r2, r3
 800f240:	dbdf      	blt.n	800f202 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800f242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f246:	3301      	adds	r3, #1
 800f248:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f24c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f252:	429a      	cmp	r2, r3
 800f254:	f4ff af4b 	bcc.w	800f0ee <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f25a:	3301      	adds	r3, #1
 800f25c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f260:	e092      	b.n	800f388 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	685a      	ldr	r2, [r3, #4]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	885b      	ldrh	r3, [r3, #2]
 800f26a:	4619      	mov	r1, r3
 800f26c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f270:	fb03 f101 	mul.w	r1, r3, r1
 800f274:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f278:	440b      	add	r3, r1
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	4413      	add	r3, r2
 800f27e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800f282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	677b      	str	r3, [r7, #116]	@ 0x74
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	885b      	ldrh	r3, [r3, #2]
 800f29c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f29e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2a4:	1ad3      	subs	r3, r2, r3
 800f2a6:	623b      	str	r3, [r7, #32]
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f2ae:	fb03 f202 	mul.w	r2, r3, r2
 800f2b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2b6:	4413      	add	r3, r2
 800f2b8:	009b      	lsls	r3, r3, #2
 800f2ba:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f2bc:	4413      	add	r3, r2
 800f2be:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f2c4:	fb03 f202 	mul.w	r2, r3, r2
 800f2c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f2cc:	4413      	add	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800f2d2:	4413      	add	r3, r2
 800f2d4:	677b      	str	r3, [r7, #116]	@ 0x74
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f2da:	e014      	b.n	800f306 <arm_mat_inverse_f32+0x5c4>
 800f2dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f2de:	1d1a      	adds	r2, r3, #4
 800f2e0:	677a      	str	r2, [r7, #116]	@ 0x74
 800f2e2:	ed93 7a00 	vldr	s14, [r3]
 800f2e6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f2f0:	1d1a      	adds	r2, r3, #4
 800f2f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800f2f4:	ed93 7a00 	vldr	s14, [r3]
 800f2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2fc:	edc3 7a00 	vstr	s15, [r3]
 800f300:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f302:	3301      	adds	r3, #1
 800f304:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f306:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f308:	6a3b      	ldr	r3, [r7, #32]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	dbe6      	blt.n	800f2dc <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	885b      	ldrh	r3, [r3, #2]
 800f31e:	61fb      	str	r3, [r7, #28]
 800f320:	69fb      	ldr	r3, [r7, #28]
 800f322:	61bb      	str	r3, [r7, #24]
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f32a:	fb02 f303 	mul.w	r3, r2, r3
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f332:	4413      	add	r3, r2
 800f334:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f33a:	fb02 f303 	mul.w	r3, r2, r3
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f342:	4413      	add	r3, r2
 800f344:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f346:	2300      	movs	r3, #0
 800f348:	673b      	str	r3, [r7, #112]	@ 0x70
 800f34a:	e014      	b.n	800f376 <arm_mat_inverse_f32+0x634>
 800f34c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f34e:	1d1a      	adds	r2, r3, #4
 800f350:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f352:	ed93 7a00 	vldr	s14, [r3]
 800f356:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f35e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f360:	1d1a      	adds	r2, r3, #4
 800f362:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f364:	ed93 7a00 	vldr	s14, [r3]
 800f368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f36c:	edc3 7a00 	vstr	s15, [r3]
 800f370:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f372:	3301      	adds	r3, #1
 800f374:	673b      	str	r3, [r7, #112]	@ 0x70
 800f376:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	dbe6      	blt.n	800f34c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f37e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f382:	3301      	adds	r3, #1
 800f384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f388:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f38c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f38e:	429a      	cmp	r2, r3
 800f390:	f4ff af67 	bcc.w	800f262 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f398:	3301      	adds	r3, #1
 800f39a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f39e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f3a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	f4ff ad32 	bcc.w	800ee0e <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f3b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d033      	beq.n	800f420 <arm_mat_inverse_f32+0x6de>
 800f3b8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f3bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c4:	d12c      	bne.n	800f420 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f3d2:	e010      	b.n	800f3f6 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f3d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3d8:	009b      	lsls	r3, r3, #2
 800f3da:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f3dc:	4413      	add	r3, r2
 800f3de:	edd3 7a00 	vldr	s15, [r3]
 800f3e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ea:	d10d      	bne.n	800f408 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f3ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f3f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f3f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3fa:	fb02 f303 	mul.w	r3, r2, r3
 800f3fe:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f402:	429a      	cmp	r2, r3
 800f404:	d3e6      	bcc.n	800f3d4 <arm_mat_inverse_f32+0x692>
 800f406:	e000      	b.n	800f40a <arm_mat_inverse_f32+0x6c8>
            break;
 800f408:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f40a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f40c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f40e:	fb02 f303 	mul.w	r3, r2, r3
 800f412:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f416:	429a      	cmp	r2, r3
 800f418:	d102      	bne.n	800f420 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f41a:	23fb      	movs	r3, #251	@ 0xfb
 800f41c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f420:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f424:	4618      	mov	r0, r3
 800f426:	37ec      	adds	r7, #236	@ 0xec
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f430:	b480      	push	{r7}
 800f432:	b093      	sub	sp, #76	@ 0x4c
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	881b      	ldrh	r3, [r3, #0]
 800f45e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	885b      	ldrh	r3, [r3, #2]
 800f464:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	885b      	ldrh	r3, [r3, #2]
 800f46a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f46c:	2300      	movs	r3, #0
 800f46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f470:	8b7b      	ldrh	r3, [r7, #26]
 800f472:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f476:	009b      	lsls	r3, r3, #2
 800f478:	69fa      	ldr	r2, [r7, #28]
 800f47a:	4413      	add	r3, r2
 800f47c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f47e:	8b3b      	ldrh	r3, [r7, #24]
 800f480:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f488:	f04f 0300 	mov.w	r3, #0
 800f48c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f490:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f492:	8afb      	ldrh	r3, [r7, #22]
 800f494:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f496:	e017      	b.n	800f4c8 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	647a      	str	r2, [r7, #68]	@ 0x44
 800f49e:	ed93 7a00 	vldr	s14, [r3]
 800f4a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f4a4:	edd3 7a00 	vldr	s15, [r3]
 800f4a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4ac:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f4b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4b4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f4b8:	8b3b      	ldrh	r3, [r7, #24]
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f4be:	4413      	add	r3, r2
 800f4c0:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4c4:	3b01      	subs	r3, #1
 800f4c6:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1e4      	bne.n	800f498 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d0:	1d1a      	adds	r2, r3, #4
 800f4d2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f4d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f4d6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4da:	3b01      	subs	r3, #1
 800f4dc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f4de:	8b3a      	ldrh	r2, [r7, #24]
 800f4e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	6a3a      	ldr	r2, [r7, #32]
 800f4e8:	4413      	add	r3, r2
 800f4ea:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d1ca      	bne.n	800f488 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f4f2:	8b3b      	ldrh	r3, [r7, #24]
 800f4f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4f6:	4413      	add	r3, r2
 800f4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f4fa:	8afb      	ldrh	r3, [r7, #22]
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f500:	4413      	add	r3, r2
 800f502:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f506:	3b01      	subs	r3, #1
 800f508:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1b1      	bne.n	800f474 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f510:	2300      	movs	r3, #0
 800f512:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f514:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f518:	4618      	mov	r0, r3
 800f51a:	374c      	adds	r7, #76	@ 0x4c
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr

0800f524 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f524:	b480      	push	{r7}
 800f526:	b08b      	sub	sp, #44	@ 0x2c
 800f528:	af00      	add	r7, sp, #0
 800f52a:	60f8      	str	r0, [r7, #12]
 800f52c:	60b9      	str	r1, [r7, #8]
 800f52e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	685b      	ldr	r3, [r3, #4]
 800f534:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f536:	68bb      	ldr	r3, [r7, #8]
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	885b      	ldrh	r3, [r3, #2]
 800f54c:	fb02 f303 	mul.w	r3, r2, r3
 800f550:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f556:	e013      	b.n	800f580 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55a:	1d1a      	adds	r2, r3, #4
 800f55c:	627a      	str	r2, [r7, #36]	@ 0x24
 800f55e:	ed93 7a00 	vldr	s14, [r3]
 800f562:	6a3b      	ldr	r3, [r7, #32]
 800f564:	1d1a      	adds	r2, r3, #4
 800f566:	623a      	str	r2, [r7, #32]
 800f568:	edd3 7a00 	vldr	s15, [r3]
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	1d1a      	adds	r2, r3, #4
 800f570:	61fa      	str	r2, [r7, #28]
 800f572:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f576:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	3b01      	subs	r3, #1
 800f57e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d1e8      	bne.n	800f558 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f586:	2300      	movs	r3, #0
 800f588:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f58a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f58e:	4618      	mov	r0, r3
 800f590:	372c      	adds	r7, #44	@ 0x2c
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f59a:	b480      	push	{r7}
 800f59c:	b08b      	sub	sp, #44	@ 0x2c
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	685b      	ldr	r3, [r3, #4]
 800f5a8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	885b      	ldrh	r3, [r3, #2]
 800f5ba:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f5bc:	89fb      	ldrh	r3, [r7, #14]
 800f5be:	61bb      	str	r3, [r7, #24]
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	693a      	ldr	r2, [r7, #16]
 800f5ca:	4413      	add	r3, r2
 800f5cc:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f5ce:	89bb      	ldrh	r3, [r7, #12]
 800f5d0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f5d2:	e00d      	b.n	800f5f0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d6:	1d1a      	adds	r2, r3, #4
 800f5d8:	627a      	str	r2, [r7, #36]	@ 0x24
 800f5da:	681a      	ldr	r2, [r3, #0]
 800f5dc:	6a3b      	ldr	r3, [r7, #32]
 800f5de:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f5e0:	89fb      	ldrh	r3, [r7, #14]
 800f5e2:	009b      	lsls	r3, r3, #2
 800f5e4:	6a3a      	ldr	r2, [r7, #32]
 800f5e6:	4413      	add	r3, r2
 800f5e8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d1ee      	bne.n	800f5d4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	3301      	adds	r3, #1
 800f5fa:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	3b01      	subs	r3, #1
 800f600:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d1dd      	bne.n	800f5c4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f608:	2300      	movs	r3, #0
 800f60a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f60c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f610:	4618      	mov	r0, r3
 800f612:	372c      	adds	r7, #44	@ 0x2c
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <memset>:
 800f61c:	4402      	add	r2, r0
 800f61e:	4603      	mov	r3, r0
 800f620:	4293      	cmp	r3, r2
 800f622:	d100      	bne.n	800f626 <memset+0xa>
 800f624:	4770      	bx	lr
 800f626:	f803 1b01 	strb.w	r1, [r3], #1
 800f62a:	e7f9      	b.n	800f620 <memset+0x4>

0800f62c <__errno>:
 800f62c:	4b01      	ldr	r3, [pc, #4]	@ (800f634 <__errno+0x8>)
 800f62e:	6818      	ldr	r0, [r3, #0]
 800f630:	4770      	bx	lr
 800f632:	bf00      	nop
 800f634:	20000218 	.word	0x20000218

0800f638 <__libc_init_array>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	4d0d      	ldr	r5, [pc, #52]	@ (800f670 <__libc_init_array+0x38>)
 800f63c:	4c0d      	ldr	r4, [pc, #52]	@ (800f674 <__libc_init_array+0x3c>)
 800f63e:	1b64      	subs	r4, r4, r5
 800f640:	10a4      	asrs	r4, r4, #2
 800f642:	2600      	movs	r6, #0
 800f644:	42a6      	cmp	r6, r4
 800f646:	d109      	bne.n	800f65c <__libc_init_array+0x24>
 800f648:	4d0b      	ldr	r5, [pc, #44]	@ (800f678 <__libc_init_array+0x40>)
 800f64a:	4c0c      	ldr	r4, [pc, #48]	@ (800f67c <__libc_init_array+0x44>)
 800f64c:	f001 fe92 	bl	8011374 <_init>
 800f650:	1b64      	subs	r4, r4, r5
 800f652:	10a4      	asrs	r4, r4, #2
 800f654:	2600      	movs	r6, #0
 800f656:	42a6      	cmp	r6, r4
 800f658:	d105      	bne.n	800f666 <__libc_init_array+0x2e>
 800f65a:	bd70      	pop	{r4, r5, r6, pc}
 800f65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f660:	4798      	blx	r3
 800f662:	3601      	adds	r6, #1
 800f664:	e7ee      	b.n	800f644 <__libc_init_array+0xc>
 800f666:	f855 3b04 	ldr.w	r3, [r5], #4
 800f66a:	4798      	blx	r3
 800f66c:	3601      	adds	r6, #1
 800f66e:	e7f2      	b.n	800f656 <__libc_init_array+0x1e>
 800f670:	080117f0 	.word	0x080117f0
 800f674:	080117f0 	.word	0x080117f0
 800f678:	080117f0 	.word	0x080117f0
 800f67c:	080117f4 	.word	0x080117f4

0800f680 <memcpy>:
 800f680:	440a      	add	r2, r1
 800f682:	4291      	cmp	r1, r2
 800f684:	f100 33ff 	add.w	r3, r0, #4294967295
 800f688:	d100      	bne.n	800f68c <memcpy+0xc>
 800f68a:	4770      	bx	lr
 800f68c:	b510      	push	{r4, lr}
 800f68e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f692:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f696:	4291      	cmp	r1, r2
 800f698:	d1f9      	bne.n	800f68e <memcpy+0xe>
 800f69a:	bd10      	pop	{r4, pc}

0800f69c <pow>:
 800f69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f69e:	ed2d 8b02 	vpush	{d8}
 800f6a2:	eeb0 8a40 	vmov.f32	s16, s0
 800f6a6:	eef0 8a60 	vmov.f32	s17, s1
 800f6aa:	ec55 4b11 	vmov	r4, r5, d1
 800f6ae:	f000 fa7f 	bl	800fbb0 <__ieee754_pow>
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	462b      	mov	r3, r5
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	4629      	mov	r1, r5
 800f6ba:	ec57 6b10 	vmov	r6, r7, d0
 800f6be:	f7f1 fa01 	bl	8000ac4 <__aeabi_dcmpun>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d13b      	bne.n	800f73e <pow+0xa2>
 800f6c6:	ec51 0b18 	vmov	r0, r1, d8
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	f7f1 f9c7 	bl	8000a60 <__aeabi_dcmpeq>
 800f6d2:	b1b8      	cbz	r0, 800f704 <pow+0x68>
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	4620      	mov	r0, r4
 800f6da:	4629      	mov	r1, r5
 800f6dc:	f7f1 f9c0 	bl	8000a60 <__aeabi_dcmpeq>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d146      	bne.n	800f772 <pow+0xd6>
 800f6e4:	ec45 4b10 	vmov	d0, r4, r5
 800f6e8:	f000 f950 	bl	800f98c <finite>
 800f6ec:	b338      	cbz	r0, 800f73e <pow+0xa2>
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	f7f1 f9bd 	bl	8000a74 <__aeabi_dcmplt>
 800f6fa:	b300      	cbz	r0, 800f73e <pow+0xa2>
 800f6fc:	f7ff ff96 	bl	800f62c <__errno>
 800f700:	2322      	movs	r3, #34	@ 0x22
 800f702:	e01b      	b.n	800f73c <pow+0xa0>
 800f704:	ec47 6b10 	vmov	d0, r6, r7
 800f708:	f000 f940 	bl	800f98c <finite>
 800f70c:	b9e0      	cbnz	r0, 800f748 <pow+0xac>
 800f70e:	eeb0 0a48 	vmov.f32	s0, s16
 800f712:	eef0 0a68 	vmov.f32	s1, s17
 800f716:	f000 f939 	bl	800f98c <finite>
 800f71a:	b1a8      	cbz	r0, 800f748 <pow+0xac>
 800f71c:	ec45 4b10 	vmov	d0, r4, r5
 800f720:	f000 f934 	bl	800f98c <finite>
 800f724:	b180      	cbz	r0, 800f748 <pow+0xac>
 800f726:	4632      	mov	r2, r6
 800f728:	463b      	mov	r3, r7
 800f72a:	4630      	mov	r0, r6
 800f72c:	4639      	mov	r1, r7
 800f72e:	f7f1 f9c9 	bl	8000ac4 <__aeabi_dcmpun>
 800f732:	2800      	cmp	r0, #0
 800f734:	d0e2      	beq.n	800f6fc <pow+0x60>
 800f736:	f7ff ff79 	bl	800f62c <__errno>
 800f73a:	2321      	movs	r3, #33	@ 0x21
 800f73c:	6003      	str	r3, [r0, #0]
 800f73e:	ecbd 8b02 	vpop	{d8}
 800f742:	ec47 6b10 	vmov	d0, r6, r7
 800f746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f748:	2200      	movs	r2, #0
 800f74a:	2300      	movs	r3, #0
 800f74c:	4630      	mov	r0, r6
 800f74e:	4639      	mov	r1, r7
 800f750:	f7f1 f986 	bl	8000a60 <__aeabi_dcmpeq>
 800f754:	2800      	cmp	r0, #0
 800f756:	d0f2      	beq.n	800f73e <pow+0xa2>
 800f758:	eeb0 0a48 	vmov.f32	s0, s16
 800f75c:	eef0 0a68 	vmov.f32	s1, s17
 800f760:	f000 f914 	bl	800f98c <finite>
 800f764:	2800      	cmp	r0, #0
 800f766:	d0ea      	beq.n	800f73e <pow+0xa2>
 800f768:	ec45 4b10 	vmov	d0, r4, r5
 800f76c:	f000 f90e 	bl	800f98c <finite>
 800f770:	e7c3      	b.n	800f6fa <pow+0x5e>
 800f772:	4f01      	ldr	r7, [pc, #4]	@ (800f778 <pow+0xdc>)
 800f774:	2600      	movs	r6, #0
 800f776:	e7e2      	b.n	800f73e <pow+0xa2>
 800f778:	3ff00000 	.word	0x3ff00000

0800f77c <sqrt>:
 800f77c:	b538      	push	{r3, r4, r5, lr}
 800f77e:	ed2d 8b02 	vpush	{d8}
 800f782:	ec55 4b10 	vmov	r4, r5, d0
 800f786:	f000 f913 	bl	800f9b0 <__ieee754_sqrt>
 800f78a:	4622      	mov	r2, r4
 800f78c:	462b      	mov	r3, r5
 800f78e:	4620      	mov	r0, r4
 800f790:	4629      	mov	r1, r5
 800f792:	eeb0 8a40 	vmov.f32	s16, s0
 800f796:	eef0 8a60 	vmov.f32	s17, s1
 800f79a:	f7f1 f993 	bl	8000ac4 <__aeabi_dcmpun>
 800f79e:	b990      	cbnz	r0, 800f7c6 <sqrt+0x4a>
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	4629      	mov	r1, r5
 800f7a8:	f7f1 f964 	bl	8000a74 <__aeabi_dcmplt>
 800f7ac:	b158      	cbz	r0, 800f7c6 <sqrt+0x4a>
 800f7ae:	f7ff ff3d 	bl	800f62c <__errno>
 800f7b2:	2321      	movs	r3, #33	@ 0x21
 800f7b4:	6003      	str	r3, [r0, #0]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	4610      	mov	r0, r2
 800f7bc:	4619      	mov	r1, r3
 800f7be:	f7f1 f811 	bl	80007e4 <__aeabi_ddiv>
 800f7c2:	ec41 0b18 	vmov	d8, r0, r1
 800f7c6:	eeb0 0a48 	vmov.f32	s0, s16
 800f7ca:	eef0 0a68 	vmov.f32	s1, s17
 800f7ce:	ecbd 8b02 	vpop	{d8}
 800f7d2:	bd38      	pop	{r3, r4, r5, pc}

0800f7d4 <acosf>:
 800f7d4:	b508      	push	{r3, lr}
 800f7d6:	ed2d 8b02 	vpush	{d8}
 800f7da:	eeb0 8a40 	vmov.f32	s16, s0
 800f7de:	f000 ffd9 	bl	8010794 <__ieee754_acosf>
 800f7e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ea:	eef0 8a40 	vmov.f32	s17, s0
 800f7ee:	d615      	bvs.n	800f81c <acosf+0x48>
 800f7f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f7f4:	f000 f87c 	bl	800f8f0 <fabsf>
 800f7f8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f7fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f804:	dd0a      	ble.n	800f81c <acosf+0x48>
 800f806:	f7ff ff11 	bl	800f62c <__errno>
 800f80a:	ecbd 8b02 	vpop	{d8}
 800f80e:	2321      	movs	r3, #33	@ 0x21
 800f810:	6003      	str	r3, [r0, #0]
 800f812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f816:	4804      	ldr	r0, [pc, #16]	@ (800f828 <acosf+0x54>)
 800f818:	f000 b8c4 	b.w	800f9a4 <nanf>
 800f81c:	eeb0 0a68 	vmov.f32	s0, s17
 800f820:	ecbd 8b02 	vpop	{d8}
 800f824:	bd08      	pop	{r3, pc}
 800f826:	bf00      	nop
 800f828:	080113d0 	.word	0x080113d0

0800f82c <sqrtf>:
 800f82c:	b508      	push	{r3, lr}
 800f82e:	ed2d 8b02 	vpush	{d8}
 800f832:	eeb0 8a40 	vmov.f32	s16, s0
 800f836:	f000 f991 	bl	800fb5c <__ieee754_sqrtf>
 800f83a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f842:	d60c      	bvs.n	800f85e <sqrtf+0x32>
 800f844:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f864 <sqrtf+0x38>
 800f848:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f850:	d505      	bpl.n	800f85e <sqrtf+0x32>
 800f852:	f7ff feeb 	bl	800f62c <__errno>
 800f856:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f85a:	2321      	movs	r3, #33	@ 0x21
 800f85c:	6003      	str	r3, [r0, #0]
 800f85e:	ecbd 8b02 	vpop	{d8}
 800f862:	bd08      	pop	{r3, pc}
 800f864:	00000000 	.word	0x00000000

0800f868 <cosf>:
 800f868:	ee10 3a10 	vmov	r3, s0
 800f86c:	b507      	push	{r0, r1, r2, lr}
 800f86e:	4a1e      	ldr	r2, [pc, #120]	@ (800f8e8 <cosf+0x80>)
 800f870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f874:	4293      	cmp	r3, r2
 800f876:	d806      	bhi.n	800f886 <cosf+0x1e>
 800f878:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f8ec <cosf+0x84>
 800f87c:	b003      	add	sp, #12
 800f87e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f882:	f000 bee7 	b.w	8010654 <__kernel_cosf>
 800f886:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f88a:	d304      	bcc.n	800f896 <cosf+0x2e>
 800f88c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f890:	b003      	add	sp, #12
 800f892:	f85d fb04 	ldr.w	pc, [sp], #4
 800f896:	4668      	mov	r0, sp
 800f898:	f001 f872 	bl	8010980 <__ieee754_rem_pio2f>
 800f89c:	f000 0003 	and.w	r0, r0, #3
 800f8a0:	2801      	cmp	r0, #1
 800f8a2:	d009      	beq.n	800f8b8 <cosf+0x50>
 800f8a4:	2802      	cmp	r0, #2
 800f8a6:	d010      	beq.n	800f8ca <cosf+0x62>
 800f8a8:	b9b0      	cbnz	r0, 800f8d8 <cosf+0x70>
 800f8aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8ae:	ed9d 0a00 	vldr	s0, [sp]
 800f8b2:	f000 fecf 	bl	8010654 <__kernel_cosf>
 800f8b6:	e7eb      	b.n	800f890 <cosf+0x28>
 800f8b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8bc:	ed9d 0a00 	vldr	s0, [sp]
 800f8c0:	f000 ff20 	bl	8010704 <__kernel_sinf>
 800f8c4:	eeb1 0a40 	vneg.f32	s0, s0
 800f8c8:	e7e2      	b.n	800f890 <cosf+0x28>
 800f8ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8ce:	ed9d 0a00 	vldr	s0, [sp]
 800f8d2:	f000 febf 	bl	8010654 <__kernel_cosf>
 800f8d6:	e7f5      	b.n	800f8c4 <cosf+0x5c>
 800f8d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f8dc:	ed9d 0a00 	vldr	s0, [sp]
 800f8e0:	2001      	movs	r0, #1
 800f8e2:	f000 ff0f 	bl	8010704 <__kernel_sinf>
 800f8e6:	e7d3      	b.n	800f890 <cosf+0x28>
 800f8e8:	3f490fd8 	.word	0x3f490fd8
 800f8ec:	00000000 	.word	0x00000000

0800f8f0 <fabsf>:
 800f8f0:	ee10 3a10 	vmov	r3, s0
 800f8f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f8f8:	ee00 3a10 	vmov	s0, r3
 800f8fc:	4770      	bx	lr
	...

0800f900 <sinf>:
 800f900:	ee10 3a10 	vmov	r3, s0
 800f904:	b507      	push	{r0, r1, r2, lr}
 800f906:	4a1f      	ldr	r2, [pc, #124]	@ (800f984 <sinf+0x84>)
 800f908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d807      	bhi.n	800f920 <sinf+0x20>
 800f910:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f988 <sinf+0x88>
 800f914:	2000      	movs	r0, #0
 800f916:	b003      	add	sp, #12
 800f918:	f85d eb04 	ldr.w	lr, [sp], #4
 800f91c:	f000 bef2 	b.w	8010704 <__kernel_sinf>
 800f920:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f924:	d304      	bcc.n	800f930 <sinf+0x30>
 800f926:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f92a:	b003      	add	sp, #12
 800f92c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f930:	4668      	mov	r0, sp
 800f932:	f001 f825 	bl	8010980 <__ieee754_rem_pio2f>
 800f936:	f000 0003 	and.w	r0, r0, #3
 800f93a:	2801      	cmp	r0, #1
 800f93c:	d00a      	beq.n	800f954 <sinf+0x54>
 800f93e:	2802      	cmp	r0, #2
 800f940:	d00f      	beq.n	800f962 <sinf+0x62>
 800f942:	b9c0      	cbnz	r0, 800f976 <sinf+0x76>
 800f944:	eddd 0a01 	vldr	s1, [sp, #4]
 800f948:	ed9d 0a00 	vldr	s0, [sp]
 800f94c:	2001      	movs	r0, #1
 800f94e:	f000 fed9 	bl	8010704 <__kernel_sinf>
 800f952:	e7ea      	b.n	800f92a <sinf+0x2a>
 800f954:	eddd 0a01 	vldr	s1, [sp, #4]
 800f958:	ed9d 0a00 	vldr	s0, [sp]
 800f95c:	f000 fe7a 	bl	8010654 <__kernel_cosf>
 800f960:	e7e3      	b.n	800f92a <sinf+0x2a>
 800f962:	eddd 0a01 	vldr	s1, [sp, #4]
 800f966:	ed9d 0a00 	vldr	s0, [sp]
 800f96a:	2001      	movs	r0, #1
 800f96c:	f000 feca 	bl	8010704 <__kernel_sinf>
 800f970:	eeb1 0a40 	vneg.f32	s0, s0
 800f974:	e7d9      	b.n	800f92a <sinf+0x2a>
 800f976:	eddd 0a01 	vldr	s1, [sp, #4]
 800f97a:	ed9d 0a00 	vldr	s0, [sp]
 800f97e:	f000 fe69 	bl	8010654 <__kernel_cosf>
 800f982:	e7f5      	b.n	800f970 <sinf+0x70>
 800f984:	3f490fd8 	.word	0x3f490fd8
 800f988:	00000000 	.word	0x00000000

0800f98c <finite>:
 800f98c:	b082      	sub	sp, #8
 800f98e:	ed8d 0b00 	vstr	d0, [sp]
 800f992:	9801      	ldr	r0, [sp, #4]
 800f994:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f998:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f99c:	0fc0      	lsrs	r0, r0, #31
 800f99e:	b002      	add	sp, #8
 800f9a0:	4770      	bx	lr
	...

0800f9a4 <nanf>:
 800f9a4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f9ac <nanf+0x8>
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	7fc00000 	.word	0x7fc00000

0800f9b0 <__ieee754_sqrt>:
 800f9b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	4a66      	ldr	r2, [pc, #408]	@ (800fb50 <__ieee754_sqrt+0x1a0>)
 800f9b6:	ec55 4b10 	vmov	r4, r5, d0
 800f9ba:	43aa      	bics	r2, r5
 800f9bc:	462b      	mov	r3, r5
 800f9be:	4621      	mov	r1, r4
 800f9c0:	d110      	bne.n	800f9e4 <__ieee754_sqrt+0x34>
 800f9c2:	4622      	mov	r2, r4
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	4629      	mov	r1, r5
 800f9c8:	f7f0 fde2 	bl	8000590 <__aeabi_dmul>
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	f7f0 fc26 	bl	8000224 <__adddf3>
 800f9d8:	4604      	mov	r4, r0
 800f9da:	460d      	mov	r5, r1
 800f9dc:	ec45 4b10 	vmov	d0, r4, r5
 800f9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e4:	2d00      	cmp	r5, #0
 800f9e6:	dc0e      	bgt.n	800fa06 <__ieee754_sqrt+0x56>
 800f9e8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f9ec:	4322      	orrs	r2, r4
 800f9ee:	d0f5      	beq.n	800f9dc <__ieee754_sqrt+0x2c>
 800f9f0:	b19d      	cbz	r5, 800fa1a <__ieee754_sqrt+0x6a>
 800f9f2:	4622      	mov	r2, r4
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	4629      	mov	r1, r5
 800f9f8:	f7f0 fc12 	bl	8000220 <__aeabi_dsub>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	f7f0 fef0 	bl	80007e4 <__aeabi_ddiv>
 800fa04:	e7e8      	b.n	800f9d8 <__ieee754_sqrt+0x28>
 800fa06:	152a      	asrs	r2, r5, #20
 800fa08:	d115      	bne.n	800fa36 <__ieee754_sqrt+0x86>
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	e009      	b.n	800fa22 <__ieee754_sqrt+0x72>
 800fa0e:	0acb      	lsrs	r3, r1, #11
 800fa10:	3a15      	subs	r2, #21
 800fa12:	0549      	lsls	r1, r1, #21
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d0fa      	beq.n	800fa0e <__ieee754_sqrt+0x5e>
 800fa18:	e7f7      	b.n	800fa0a <__ieee754_sqrt+0x5a>
 800fa1a:	462a      	mov	r2, r5
 800fa1c:	e7fa      	b.n	800fa14 <__ieee754_sqrt+0x64>
 800fa1e:	005b      	lsls	r3, r3, #1
 800fa20:	3001      	adds	r0, #1
 800fa22:	02dc      	lsls	r4, r3, #11
 800fa24:	d5fb      	bpl.n	800fa1e <__ieee754_sqrt+0x6e>
 800fa26:	1e44      	subs	r4, r0, #1
 800fa28:	1b12      	subs	r2, r2, r4
 800fa2a:	f1c0 0420 	rsb	r4, r0, #32
 800fa2e:	fa21 f404 	lsr.w	r4, r1, r4
 800fa32:	4323      	orrs	r3, r4
 800fa34:	4081      	lsls	r1, r0
 800fa36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa3a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800fa3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fa42:	07d2      	lsls	r2, r2, #31
 800fa44:	bf5c      	itt	pl
 800fa46:	005b      	lslpl	r3, r3, #1
 800fa48:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fa4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa50:	bf58      	it	pl
 800fa52:	0049      	lslpl	r1, r1, #1
 800fa54:	2600      	movs	r6, #0
 800fa56:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fa5a:	107f      	asrs	r7, r7, #1
 800fa5c:	0049      	lsls	r1, r1, #1
 800fa5e:	2016      	movs	r0, #22
 800fa60:	4632      	mov	r2, r6
 800fa62:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fa66:	1915      	adds	r5, r2, r4
 800fa68:	429d      	cmp	r5, r3
 800fa6a:	bfde      	ittt	le
 800fa6c:	192a      	addle	r2, r5, r4
 800fa6e:	1b5b      	suble	r3, r3, r5
 800fa70:	1936      	addle	r6, r6, r4
 800fa72:	0fcd      	lsrs	r5, r1, #31
 800fa74:	3801      	subs	r0, #1
 800fa76:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800fa7a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fa7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fa82:	d1f0      	bne.n	800fa66 <__ieee754_sqrt+0xb6>
 800fa84:	4605      	mov	r5, r0
 800fa86:	2420      	movs	r4, #32
 800fa88:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	eb0c 0e00 	add.w	lr, ip, r0
 800fa92:	dc02      	bgt.n	800fa9a <__ieee754_sqrt+0xea>
 800fa94:	d113      	bne.n	800fabe <__ieee754_sqrt+0x10e>
 800fa96:	458e      	cmp	lr, r1
 800fa98:	d811      	bhi.n	800fabe <__ieee754_sqrt+0x10e>
 800fa9a:	f1be 0f00 	cmp.w	lr, #0
 800fa9e:	eb0e 000c 	add.w	r0, lr, ip
 800faa2:	da3f      	bge.n	800fb24 <__ieee754_sqrt+0x174>
 800faa4:	2800      	cmp	r0, #0
 800faa6:	db3d      	blt.n	800fb24 <__ieee754_sqrt+0x174>
 800faa8:	f102 0801 	add.w	r8, r2, #1
 800faac:	1a9b      	subs	r3, r3, r2
 800faae:	458e      	cmp	lr, r1
 800fab0:	bf88      	it	hi
 800fab2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fab6:	eba1 010e 	sub.w	r1, r1, lr
 800faba:	4465      	add	r5, ip
 800fabc:	4642      	mov	r2, r8
 800fabe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fac2:	3c01      	subs	r4, #1
 800fac4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fac8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800facc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fad0:	d1dc      	bne.n	800fa8c <__ieee754_sqrt+0xdc>
 800fad2:	4319      	orrs	r1, r3
 800fad4:	d01b      	beq.n	800fb0e <__ieee754_sqrt+0x15e>
 800fad6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800fb54 <__ieee754_sqrt+0x1a4>
 800fada:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800fb58 <__ieee754_sqrt+0x1a8>
 800fade:	e9da 0100 	ldrd	r0, r1, [sl]
 800fae2:	e9db 2300 	ldrd	r2, r3, [fp]
 800fae6:	f7f0 fb9b 	bl	8000220 <__aeabi_dsub>
 800faea:	e9da 8900 	ldrd	r8, r9, [sl]
 800faee:	4602      	mov	r2, r0
 800faf0:	460b      	mov	r3, r1
 800faf2:	4640      	mov	r0, r8
 800faf4:	4649      	mov	r1, r9
 800faf6:	f7f0 ffc7 	bl	8000a88 <__aeabi_dcmple>
 800fafa:	b140      	cbz	r0, 800fb0e <__ieee754_sqrt+0x15e>
 800fafc:	f1b5 3fff 	cmp.w	r5, #4294967295
 800fb00:	e9da 0100 	ldrd	r0, r1, [sl]
 800fb04:	e9db 2300 	ldrd	r2, r3, [fp]
 800fb08:	d10e      	bne.n	800fb28 <__ieee754_sqrt+0x178>
 800fb0a:	3601      	adds	r6, #1
 800fb0c:	4625      	mov	r5, r4
 800fb0e:	1073      	asrs	r3, r6, #1
 800fb10:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb14:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800fb18:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800fb1c:	086b      	lsrs	r3, r5, #1
 800fb1e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800fb22:	e759      	b.n	800f9d8 <__ieee754_sqrt+0x28>
 800fb24:	4690      	mov	r8, r2
 800fb26:	e7c1      	b.n	800faac <__ieee754_sqrt+0xfc>
 800fb28:	f7f0 fb7c 	bl	8000224 <__adddf3>
 800fb2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb30:	4602      	mov	r2, r0
 800fb32:	460b      	mov	r3, r1
 800fb34:	4640      	mov	r0, r8
 800fb36:	4649      	mov	r1, r9
 800fb38:	f7f0 ff9c 	bl	8000a74 <__aeabi_dcmplt>
 800fb3c:	b120      	cbz	r0, 800fb48 <__ieee754_sqrt+0x198>
 800fb3e:	1cab      	adds	r3, r5, #2
 800fb40:	bf08      	it	eq
 800fb42:	3601      	addeq	r6, #1
 800fb44:	3502      	adds	r5, #2
 800fb46:	e7e2      	b.n	800fb0e <__ieee754_sqrt+0x15e>
 800fb48:	1c6b      	adds	r3, r5, #1
 800fb4a:	f023 0501 	bic.w	r5, r3, #1
 800fb4e:	e7de      	b.n	800fb0e <__ieee754_sqrt+0x15e>
 800fb50:	7ff00000 	.word	0x7ff00000
 800fb54:	080113e0 	.word	0x080113e0
 800fb58:	080113d8 	.word	0x080113d8

0800fb5c <__ieee754_sqrtf>:
 800fb5c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fb60:	4770      	bx	lr
	...

0800fb64 <roundf>:
 800fb64:	ee10 0a10 	vmov	r0, s0
 800fb68:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800fb6c:	3a7f      	subs	r2, #127	@ 0x7f
 800fb6e:	2a16      	cmp	r2, #22
 800fb70:	dc15      	bgt.n	800fb9e <roundf+0x3a>
 800fb72:	2a00      	cmp	r2, #0
 800fb74:	da08      	bge.n	800fb88 <roundf+0x24>
 800fb76:	3201      	adds	r2, #1
 800fb78:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800fb7c:	d101      	bne.n	800fb82 <roundf+0x1e>
 800fb7e:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800fb82:	ee00 3a10 	vmov	s0, r3
 800fb86:	4770      	bx	lr
 800fb88:	4907      	ldr	r1, [pc, #28]	@ (800fba8 <roundf+0x44>)
 800fb8a:	4111      	asrs	r1, r2
 800fb8c:	4201      	tst	r1, r0
 800fb8e:	d0fa      	beq.n	800fb86 <roundf+0x22>
 800fb90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800fb94:	4113      	asrs	r3, r2
 800fb96:	4403      	add	r3, r0
 800fb98:	ea23 0301 	bic.w	r3, r3, r1
 800fb9c:	e7f1      	b.n	800fb82 <roundf+0x1e>
 800fb9e:	2a80      	cmp	r2, #128	@ 0x80
 800fba0:	d1f1      	bne.n	800fb86 <roundf+0x22>
 800fba2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fba6:	4770      	bx	lr
 800fba8:	007fffff 	.word	0x007fffff
 800fbac:	00000000 	.word	0x00000000

0800fbb0 <__ieee754_pow>:
 800fbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb4:	b091      	sub	sp, #68	@ 0x44
 800fbb6:	ed8d 1b00 	vstr	d1, [sp]
 800fbba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fbbe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fbc2:	ea5a 0001 	orrs.w	r0, sl, r1
 800fbc6:	ec57 6b10 	vmov	r6, r7, d0
 800fbca:	d113      	bne.n	800fbf4 <__ieee754_pow+0x44>
 800fbcc:	19b3      	adds	r3, r6, r6
 800fbce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fbd2:	4152      	adcs	r2, r2
 800fbd4:	4298      	cmp	r0, r3
 800fbd6:	4b9a      	ldr	r3, [pc, #616]	@ (800fe40 <__ieee754_pow+0x290>)
 800fbd8:	4193      	sbcs	r3, r2
 800fbda:	f080 84ee 	bcs.w	80105ba <__ieee754_pow+0xa0a>
 800fbde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbe2:	4630      	mov	r0, r6
 800fbe4:	4639      	mov	r1, r7
 800fbe6:	f7f0 fb1d 	bl	8000224 <__adddf3>
 800fbea:	ec41 0b10 	vmov	d0, r0, r1
 800fbee:	b011      	add	sp, #68	@ 0x44
 800fbf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf4:	4a93      	ldr	r2, [pc, #588]	@ (800fe44 <__ieee754_pow+0x294>)
 800fbf6:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800fbfa:	4295      	cmp	r5, r2
 800fbfc:	46b8      	mov	r8, r7
 800fbfe:	4633      	mov	r3, r6
 800fc00:	d80a      	bhi.n	800fc18 <__ieee754_pow+0x68>
 800fc02:	d104      	bne.n	800fc0e <__ieee754_pow+0x5e>
 800fc04:	2e00      	cmp	r6, #0
 800fc06:	d1ea      	bne.n	800fbde <__ieee754_pow+0x2e>
 800fc08:	45aa      	cmp	sl, r5
 800fc0a:	d8e8      	bhi.n	800fbde <__ieee754_pow+0x2e>
 800fc0c:	e001      	b.n	800fc12 <__ieee754_pow+0x62>
 800fc0e:	4592      	cmp	sl, r2
 800fc10:	d802      	bhi.n	800fc18 <__ieee754_pow+0x68>
 800fc12:	4592      	cmp	sl, r2
 800fc14:	d10f      	bne.n	800fc36 <__ieee754_pow+0x86>
 800fc16:	b171      	cbz	r1, 800fc36 <__ieee754_pow+0x86>
 800fc18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fc1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fc20:	ea58 0803 	orrs.w	r8, r8, r3
 800fc24:	d1db      	bne.n	800fbde <__ieee754_pow+0x2e>
 800fc26:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fc2a:	18db      	adds	r3, r3, r3
 800fc2c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fc30:	4152      	adcs	r2, r2
 800fc32:	4598      	cmp	r8, r3
 800fc34:	e7cf      	b.n	800fbd6 <__ieee754_pow+0x26>
 800fc36:	f1b8 0f00 	cmp.w	r8, #0
 800fc3a:	46ab      	mov	fp, r5
 800fc3c:	da43      	bge.n	800fcc6 <__ieee754_pow+0x116>
 800fc3e:	4a82      	ldr	r2, [pc, #520]	@ (800fe48 <__ieee754_pow+0x298>)
 800fc40:	4592      	cmp	sl, r2
 800fc42:	d856      	bhi.n	800fcf2 <__ieee754_pow+0x142>
 800fc44:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fc48:	4592      	cmp	sl, r2
 800fc4a:	f240 84c5 	bls.w	80105d8 <__ieee754_pow+0xa28>
 800fc4e:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fc52:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fc56:	2a14      	cmp	r2, #20
 800fc58:	dd18      	ble.n	800fc8c <__ieee754_pow+0xdc>
 800fc5a:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fc5e:	fa21 f402 	lsr.w	r4, r1, r2
 800fc62:	fa04 f202 	lsl.w	r2, r4, r2
 800fc66:	428a      	cmp	r2, r1
 800fc68:	f040 84b6 	bne.w	80105d8 <__ieee754_pow+0xa28>
 800fc6c:	f004 0401 	and.w	r4, r4, #1
 800fc70:	f1c4 0402 	rsb	r4, r4, #2
 800fc74:	2900      	cmp	r1, #0
 800fc76:	d159      	bne.n	800fd2c <__ieee754_pow+0x17c>
 800fc78:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fc7c:	d148      	bne.n	800fd10 <__ieee754_pow+0x160>
 800fc7e:	4632      	mov	r2, r6
 800fc80:	463b      	mov	r3, r7
 800fc82:	4630      	mov	r0, r6
 800fc84:	4639      	mov	r1, r7
 800fc86:	f7f0 fc83 	bl	8000590 <__aeabi_dmul>
 800fc8a:	e7ae      	b.n	800fbea <__ieee754_pow+0x3a>
 800fc8c:	2900      	cmp	r1, #0
 800fc8e:	d14c      	bne.n	800fd2a <__ieee754_pow+0x17a>
 800fc90:	f1c2 0214 	rsb	r2, r2, #20
 800fc94:	fa4a f402 	asr.w	r4, sl, r2
 800fc98:	fa04 f202 	lsl.w	r2, r4, r2
 800fc9c:	4552      	cmp	r2, sl
 800fc9e:	f040 8498 	bne.w	80105d2 <__ieee754_pow+0xa22>
 800fca2:	f004 0401 	and.w	r4, r4, #1
 800fca6:	f1c4 0402 	rsb	r4, r4, #2
 800fcaa:	4a68      	ldr	r2, [pc, #416]	@ (800fe4c <__ieee754_pow+0x29c>)
 800fcac:	4592      	cmp	sl, r2
 800fcae:	d1e3      	bne.n	800fc78 <__ieee754_pow+0xc8>
 800fcb0:	f1b9 0f00 	cmp.w	r9, #0
 800fcb4:	f280 8489 	bge.w	80105ca <__ieee754_pow+0xa1a>
 800fcb8:	4964      	ldr	r1, [pc, #400]	@ (800fe4c <__ieee754_pow+0x29c>)
 800fcba:	4632      	mov	r2, r6
 800fcbc:	463b      	mov	r3, r7
 800fcbe:	2000      	movs	r0, #0
 800fcc0:	f7f0 fd90 	bl	80007e4 <__aeabi_ddiv>
 800fcc4:	e791      	b.n	800fbea <__ieee754_pow+0x3a>
 800fcc6:	2400      	movs	r4, #0
 800fcc8:	bb81      	cbnz	r1, 800fd2c <__ieee754_pow+0x17c>
 800fcca:	4a5e      	ldr	r2, [pc, #376]	@ (800fe44 <__ieee754_pow+0x294>)
 800fccc:	4592      	cmp	sl, r2
 800fcce:	d1ec      	bne.n	800fcaa <__ieee754_pow+0xfa>
 800fcd0:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fcd4:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fcd8:	431a      	orrs	r2, r3
 800fcda:	f000 846e 	beq.w	80105ba <__ieee754_pow+0xa0a>
 800fcde:	4b5c      	ldr	r3, [pc, #368]	@ (800fe50 <__ieee754_pow+0x2a0>)
 800fce0:	429d      	cmp	r5, r3
 800fce2:	d908      	bls.n	800fcf6 <__ieee754_pow+0x146>
 800fce4:	f1b9 0f00 	cmp.w	r9, #0
 800fce8:	f280 846b 	bge.w	80105c2 <__ieee754_pow+0xa12>
 800fcec:	2000      	movs	r0, #0
 800fcee:	2100      	movs	r1, #0
 800fcf0:	e77b      	b.n	800fbea <__ieee754_pow+0x3a>
 800fcf2:	2402      	movs	r4, #2
 800fcf4:	e7e8      	b.n	800fcc8 <__ieee754_pow+0x118>
 800fcf6:	f1b9 0f00 	cmp.w	r9, #0
 800fcfa:	f04f 0000 	mov.w	r0, #0
 800fcfe:	f04f 0100 	mov.w	r1, #0
 800fd02:	f6bf af72 	bge.w	800fbea <__ieee754_pow+0x3a>
 800fd06:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fd0a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fd0e:	e76c      	b.n	800fbea <__ieee754_pow+0x3a>
 800fd10:	4a50      	ldr	r2, [pc, #320]	@ (800fe54 <__ieee754_pow+0x2a4>)
 800fd12:	4591      	cmp	r9, r2
 800fd14:	d10a      	bne.n	800fd2c <__ieee754_pow+0x17c>
 800fd16:	f1b8 0f00 	cmp.w	r8, #0
 800fd1a:	db07      	blt.n	800fd2c <__ieee754_pow+0x17c>
 800fd1c:	ec47 6b10 	vmov	d0, r6, r7
 800fd20:	b011      	add	sp, #68	@ 0x44
 800fd22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd26:	f7ff be43 	b.w	800f9b0 <__ieee754_sqrt>
 800fd2a:	2400      	movs	r4, #0
 800fd2c:	ec47 6b10 	vmov	d0, r6, r7
 800fd30:	9302      	str	r3, [sp, #8]
 800fd32:	f000 fc87 	bl	8010644 <fabs>
 800fd36:	9b02      	ldr	r3, [sp, #8]
 800fd38:	ec51 0b10 	vmov	r0, r1, d0
 800fd3c:	bb43      	cbnz	r3, 800fd90 <__ieee754_pow+0x1e0>
 800fd3e:	4b43      	ldr	r3, [pc, #268]	@ (800fe4c <__ieee754_pow+0x29c>)
 800fd40:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d000      	beq.n	800fd4a <__ieee754_pow+0x19a>
 800fd48:	bb15      	cbnz	r5, 800fd90 <__ieee754_pow+0x1e0>
 800fd4a:	f1b9 0f00 	cmp.w	r9, #0
 800fd4e:	da05      	bge.n	800fd5c <__ieee754_pow+0x1ac>
 800fd50:	4602      	mov	r2, r0
 800fd52:	460b      	mov	r3, r1
 800fd54:	2000      	movs	r0, #0
 800fd56:	493d      	ldr	r1, [pc, #244]	@ (800fe4c <__ieee754_pow+0x29c>)
 800fd58:	f7f0 fd44 	bl	80007e4 <__aeabi_ddiv>
 800fd5c:	f1b8 0f00 	cmp.w	r8, #0
 800fd60:	f6bf af43 	bge.w	800fbea <__ieee754_pow+0x3a>
 800fd64:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fd68:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fd6c:	4325      	orrs	r5, r4
 800fd6e:	d108      	bne.n	800fd82 <__ieee754_pow+0x1d2>
 800fd70:	4602      	mov	r2, r0
 800fd72:	460b      	mov	r3, r1
 800fd74:	4610      	mov	r0, r2
 800fd76:	4619      	mov	r1, r3
 800fd78:	f7f0 fa52 	bl	8000220 <__aeabi_dsub>
 800fd7c:	4602      	mov	r2, r0
 800fd7e:	460b      	mov	r3, r1
 800fd80:	e79e      	b.n	800fcc0 <__ieee754_pow+0x110>
 800fd82:	2c01      	cmp	r4, #1
 800fd84:	f47f af31 	bne.w	800fbea <__ieee754_pow+0x3a>
 800fd88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	e72c      	b.n	800fbea <__ieee754_pow+0x3a>
 800fd90:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800fd94:	3b01      	subs	r3, #1
 800fd96:	ea53 0204 	orrs.w	r2, r3, r4
 800fd9a:	d102      	bne.n	800fda2 <__ieee754_pow+0x1f2>
 800fd9c:	4632      	mov	r2, r6
 800fd9e:	463b      	mov	r3, r7
 800fda0:	e7e8      	b.n	800fd74 <__ieee754_pow+0x1c4>
 800fda2:	3c01      	subs	r4, #1
 800fda4:	431c      	orrs	r4, r3
 800fda6:	d016      	beq.n	800fdd6 <__ieee754_pow+0x226>
 800fda8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800fe30 <__ieee754_pow+0x280>
 800fdac:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800fdb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fdb4:	f240 8110 	bls.w	800ffd8 <__ieee754_pow+0x428>
 800fdb8:	4b27      	ldr	r3, [pc, #156]	@ (800fe58 <__ieee754_pow+0x2a8>)
 800fdba:	459a      	cmp	sl, r3
 800fdbc:	4b24      	ldr	r3, [pc, #144]	@ (800fe50 <__ieee754_pow+0x2a0>)
 800fdbe:	d916      	bls.n	800fdee <__ieee754_pow+0x23e>
 800fdc0:	429d      	cmp	r5, r3
 800fdc2:	d80b      	bhi.n	800fddc <__ieee754_pow+0x22c>
 800fdc4:	f1b9 0f00 	cmp.w	r9, #0
 800fdc8:	da0b      	bge.n	800fde2 <__ieee754_pow+0x232>
 800fdca:	2000      	movs	r0, #0
 800fdcc:	b011      	add	sp, #68	@ 0x44
 800fdce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdd2:	f000 bfb5 	b.w	8010d40 <__math_oflow>
 800fdd6:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800fe38 <__ieee754_pow+0x288>
 800fdda:	e7e7      	b.n	800fdac <__ieee754_pow+0x1fc>
 800fddc:	f1b9 0f00 	cmp.w	r9, #0
 800fde0:	dcf3      	bgt.n	800fdca <__ieee754_pow+0x21a>
 800fde2:	2000      	movs	r0, #0
 800fde4:	b011      	add	sp, #68	@ 0x44
 800fde6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdea:	f000 bfa1 	b.w	8010d30 <__math_uflow>
 800fdee:	429d      	cmp	r5, r3
 800fdf0:	d20c      	bcs.n	800fe0c <__ieee754_pow+0x25c>
 800fdf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	f7f0 fe3b 	bl	8000a74 <__aeabi_dcmplt>
 800fdfe:	3800      	subs	r0, #0
 800fe00:	bf18      	it	ne
 800fe02:	2001      	movne	r0, #1
 800fe04:	f1b9 0f00 	cmp.w	r9, #0
 800fe08:	daec      	bge.n	800fde4 <__ieee754_pow+0x234>
 800fe0a:	e7df      	b.n	800fdcc <__ieee754_pow+0x21c>
 800fe0c:	4b0f      	ldr	r3, [pc, #60]	@ (800fe4c <__ieee754_pow+0x29c>)
 800fe0e:	429d      	cmp	r5, r3
 800fe10:	f04f 0200 	mov.w	r2, #0
 800fe14:	d922      	bls.n	800fe5c <__ieee754_pow+0x2ac>
 800fe16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	f7f0 fe2a 	bl	8000a74 <__aeabi_dcmplt>
 800fe20:	3800      	subs	r0, #0
 800fe22:	bf18      	it	ne
 800fe24:	2001      	movne	r0, #1
 800fe26:	f1b9 0f00 	cmp.w	r9, #0
 800fe2a:	dccf      	bgt.n	800fdcc <__ieee754_pow+0x21c>
 800fe2c:	e7da      	b.n	800fde4 <__ieee754_pow+0x234>
 800fe2e:	bf00      	nop
 800fe30:	00000000 	.word	0x00000000
 800fe34:	3ff00000 	.word	0x3ff00000
 800fe38:	00000000 	.word	0x00000000
 800fe3c:	bff00000 	.word	0xbff00000
 800fe40:	fff00000 	.word	0xfff00000
 800fe44:	7ff00000 	.word	0x7ff00000
 800fe48:	433fffff 	.word	0x433fffff
 800fe4c:	3ff00000 	.word	0x3ff00000
 800fe50:	3fefffff 	.word	0x3fefffff
 800fe54:	3fe00000 	.word	0x3fe00000
 800fe58:	43f00000 	.word	0x43f00000
 800fe5c:	4b5a      	ldr	r3, [pc, #360]	@ (800ffc8 <__ieee754_pow+0x418>)
 800fe5e:	f7f0 f9df 	bl	8000220 <__aeabi_dsub>
 800fe62:	a351      	add	r3, pc, #324	@ (adr r3, 800ffa8 <__ieee754_pow+0x3f8>)
 800fe64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe68:	4604      	mov	r4, r0
 800fe6a:	460d      	mov	r5, r1
 800fe6c:	f7f0 fb90 	bl	8000590 <__aeabi_dmul>
 800fe70:	a34f      	add	r3, pc, #316	@ (adr r3, 800ffb0 <__ieee754_pow+0x400>)
 800fe72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe76:	4606      	mov	r6, r0
 800fe78:	460f      	mov	r7, r1
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	f7f0 fb87 	bl	8000590 <__aeabi_dmul>
 800fe82:	4b52      	ldr	r3, [pc, #328]	@ (800ffcc <__ieee754_pow+0x41c>)
 800fe84:	4682      	mov	sl, r0
 800fe86:	468b      	mov	fp, r1
 800fe88:	2200      	movs	r2, #0
 800fe8a:	4620      	mov	r0, r4
 800fe8c:	4629      	mov	r1, r5
 800fe8e:	f7f0 fb7f 	bl	8000590 <__aeabi_dmul>
 800fe92:	4602      	mov	r2, r0
 800fe94:	460b      	mov	r3, r1
 800fe96:	a148      	add	r1, pc, #288	@ (adr r1, 800ffb8 <__ieee754_pow+0x408>)
 800fe98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe9c:	f7f0 f9c0 	bl	8000220 <__aeabi_dsub>
 800fea0:	4622      	mov	r2, r4
 800fea2:	462b      	mov	r3, r5
 800fea4:	f7f0 fb74 	bl	8000590 <__aeabi_dmul>
 800fea8:	4602      	mov	r2, r0
 800feaa:	460b      	mov	r3, r1
 800feac:	2000      	movs	r0, #0
 800feae:	4948      	ldr	r1, [pc, #288]	@ (800ffd0 <__ieee754_pow+0x420>)
 800feb0:	f7f0 f9b6 	bl	8000220 <__aeabi_dsub>
 800feb4:	4622      	mov	r2, r4
 800feb6:	4680      	mov	r8, r0
 800feb8:	4689      	mov	r9, r1
 800feba:	462b      	mov	r3, r5
 800febc:	4620      	mov	r0, r4
 800febe:	4629      	mov	r1, r5
 800fec0:	f7f0 fb66 	bl	8000590 <__aeabi_dmul>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4640      	mov	r0, r8
 800feca:	4649      	mov	r1, r9
 800fecc:	f7f0 fb60 	bl	8000590 <__aeabi_dmul>
 800fed0:	a33b      	add	r3, pc, #236	@ (adr r3, 800ffc0 <__ieee754_pow+0x410>)
 800fed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed6:	f7f0 fb5b 	bl	8000590 <__aeabi_dmul>
 800feda:	4602      	mov	r2, r0
 800fedc:	460b      	mov	r3, r1
 800fede:	4650      	mov	r0, sl
 800fee0:	4659      	mov	r1, fp
 800fee2:	f7f0 f99d 	bl	8000220 <__aeabi_dsub>
 800fee6:	4602      	mov	r2, r0
 800fee8:	460b      	mov	r3, r1
 800feea:	4680      	mov	r8, r0
 800feec:	4689      	mov	r9, r1
 800feee:	4630      	mov	r0, r6
 800fef0:	4639      	mov	r1, r7
 800fef2:	f7f0 f997 	bl	8000224 <__adddf3>
 800fef6:	2400      	movs	r4, #0
 800fef8:	4632      	mov	r2, r6
 800fefa:	463b      	mov	r3, r7
 800fefc:	4620      	mov	r0, r4
 800fefe:	460d      	mov	r5, r1
 800ff00:	f7f0 f98e 	bl	8000220 <__aeabi_dsub>
 800ff04:	4602      	mov	r2, r0
 800ff06:	460b      	mov	r3, r1
 800ff08:	4640      	mov	r0, r8
 800ff0a:	4649      	mov	r1, r9
 800ff0c:	f7f0 f988 	bl	8000220 <__aeabi_dsub>
 800ff10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff18:	2300      	movs	r3, #0
 800ff1a:	9304      	str	r3, [sp, #16]
 800ff1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ff20:	4606      	mov	r6, r0
 800ff22:	460f      	mov	r7, r1
 800ff24:	465b      	mov	r3, fp
 800ff26:	4652      	mov	r2, sl
 800ff28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff2c:	f7f0 f978 	bl	8000220 <__aeabi_dsub>
 800ff30:	4622      	mov	r2, r4
 800ff32:	462b      	mov	r3, r5
 800ff34:	f7f0 fb2c 	bl	8000590 <__aeabi_dmul>
 800ff38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff3c:	4680      	mov	r8, r0
 800ff3e:	4689      	mov	r9, r1
 800ff40:	4630      	mov	r0, r6
 800ff42:	4639      	mov	r1, r7
 800ff44:	f7f0 fb24 	bl	8000590 <__aeabi_dmul>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	460b      	mov	r3, r1
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	4649      	mov	r1, r9
 800ff50:	f7f0 f968 	bl	8000224 <__adddf3>
 800ff54:	465b      	mov	r3, fp
 800ff56:	4606      	mov	r6, r0
 800ff58:	460f      	mov	r7, r1
 800ff5a:	4652      	mov	r2, sl
 800ff5c:	4620      	mov	r0, r4
 800ff5e:	4629      	mov	r1, r5
 800ff60:	f7f0 fb16 	bl	8000590 <__aeabi_dmul>
 800ff64:	460b      	mov	r3, r1
 800ff66:	4602      	mov	r2, r0
 800ff68:	4680      	mov	r8, r0
 800ff6a:	4689      	mov	r9, r1
 800ff6c:	4630      	mov	r0, r6
 800ff6e:	4639      	mov	r1, r7
 800ff70:	f7f0 f958 	bl	8000224 <__adddf3>
 800ff74:	4b17      	ldr	r3, [pc, #92]	@ (800ffd4 <__ieee754_pow+0x424>)
 800ff76:	4299      	cmp	r1, r3
 800ff78:	4604      	mov	r4, r0
 800ff7a:	460d      	mov	r5, r1
 800ff7c:	468b      	mov	fp, r1
 800ff7e:	f340 820b 	ble.w	8010398 <__ieee754_pow+0x7e8>
 800ff82:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ff86:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ff8a:	4303      	orrs	r3, r0
 800ff8c:	f000 81ea 	beq.w	8010364 <__ieee754_pow+0x7b4>
 800ff90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff94:	2200      	movs	r2, #0
 800ff96:	2300      	movs	r3, #0
 800ff98:	f7f0 fd6c 	bl	8000a74 <__aeabi_dcmplt>
 800ff9c:	3800      	subs	r0, #0
 800ff9e:	bf18      	it	ne
 800ffa0:	2001      	movne	r0, #1
 800ffa2:	e713      	b.n	800fdcc <__ieee754_pow+0x21c>
 800ffa4:	f3af 8000 	nop.w
 800ffa8:	60000000 	.word	0x60000000
 800ffac:	3ff71547 	.word	0x3ff71547
 800ffb0:	f85ddf44 	.word	0xf85ddf44
 800ffb4:	3e54ae0b 	.word	0x3e54ae0b
 800ffb8:	55555555 	.word	0x55555555
 800ffbc:	3fd55555 	.word	0x3fd55555
 800ffc0:	652b82fe 	.word	0x652b82fe
 800ffc4:	3ff71547 	.word	0x3ff71547
 800ffc8:	3ff00000 	.word	0x3ff00000
 800ffcc:	3fd00000 	.word	0x3fd00000
 800ffd0:	3fe00000 	.word	0x3fe00000
 800ffd4:	408fffff 	.word	0x408fffff
 800ffd8:	4bd5      	ldr	r3, [pc, #852]	@ (8010330 <__ieee754_pow+0x780>)
 800ffda:	ea08 0303 	and.w	r3, r8, r3
 800ffde:	2200      	movs	r2, #0
 800ffe0:	b92b      	cbnz	r3, 800ffee <__ieee754_pow+0x43e>
 800ffe2:	4bd4      	ldr	r3, [pc, #848]	@ (8010334 <__ieee754_pow+0x784>)
 800ffe4:	f7f0 fad4 	bl	8000590 <__aeabi_dmul>
 800ffe8:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ffec:	468b      	mov	fp, r1
 800ffee:	ea4f 532b 	mov.w	r3, fp, asr #20
 800fff2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fff6:	4413      	add	r3, r2
 800fff8:	930a      	str	r3, [sp, #40]	@ 0x28
 800fffa:	4bcf      	ldr	r3, [pc, #828]	@ (8010338 <__ieee754_pow+0x788>)
 800fffc:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010000:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010004:	459b      	cmp	fp, r3
 8010006:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801000a:	dd08      	ble.n	801001e <__ieee754_pow+0x46e>
 801000c:	4bcb      	ldr	r3, [pc, #812]	@ (801033c <__ieee754_pow+0x78c>)
 801000e:	459b      	cmp	fp, r3
 8010010:	f340 81a5 	ble.w	801035e <__ieee754_pow+0x7ae>
 8010014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010016:	3301      	adds	r3, #1
 8010018:	930a      	str	r3, [sp, #40]	@ 0x28
 801001a:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801001e:	f04f 0a00 	mov.w	sl, #0
 8010022:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010028:	4bc5      	ldr	r3, [pc, #788]	@ (8010340 <__ieee754_pow+0x790>)
 801002a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801002e:	ed93 7b00 	vldr	d7, [r3]
 8010032:	4629      	mov	r1, r5
 8010034:	ec53 2b17 	vmov	r2, r3, d7
 8010038:	ed8d 7b06 	vstr	d7, [sp, #24]
 801003c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010040:	f7f0 f8ee 	bl	8000220 <__aeabi_dsub>
 8010044:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010048:	4606      	mov	r6, r0
 801004a:	460f      	mov	r7, r1
 801004c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010050:	f7f0 f8e8 	bl	8000224 <__adddf3>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	2000      	movs	r0, #0
 801005a:	49ba      	ldr	r1, [pc, #744]	@ (8010344 <__ieee754_pow+0x794>)
 801005c:	f7f0 fbc2 	bl	80007e4 <__aeabi_ddiv>
 8010060:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010064:	4602      	mov	r2, r0
 8010066:	460b      	mov	r3, r1
 8010068:	4630      	mov	r0, r6
 801006a:	4639      	mov	r1, r7
 801006c:	f7f0 fa90 	bl	8000590 <__aeabi_dmul>
 8010070:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010074:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010078:	106d      	asrs	r5, r5, #1
 801007a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801007e:	f04f 0b00 	mov.w	fp, #0
 8010082:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010086:	4661      	mov	r1, ip
 8010088:	2200      	movs	r2, #0
 801008a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801008e:	4658      	mov	r0, fp
 8010090:	46e1      	mov	r9, ip
 8010092:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010096:	4614      	mov	r4, r2
 8010098:	461d      	mov	r5, r3
 801009a:	f7f0 fa79 	bl	8000590 <__aeabi_dmul>
 801009e:	4602      	mov	r2, r0
 80100a0:	460b      	mov	r3, r1
 80100a2:	4630      	mov	r0, r6
 80100a4:	4639      	mov	r1, r7
 80100a6:	f7f0 f8bb 	bl	8000220 <__aeabi_dsub>
 80100aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80100ae:	4606      	mov	r6, r0
 80100b0:	460f      	mov	r7, r1
 80100b2:	4620      	mov	r0, r4
 80100b4:	4629      	mov	r1, r5
 80100b6:	f7f0 f8b3 	bl	8000220 <__aeabi_dsub>
 80100ba:	4602      	mov	r2, r0
 80100bc:	460b      	mov	r3, r1
 80100be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80100c2:	f7f0 f8ad 	bl	8000220 <__aeabi_dsub>
 80100c6:	465a      	mov	r2, fp
 80100c8:	464b      	mov	r3, r9
 80100ca:	f7f0 fa61 	bl	8000590 <__aeabi_dmul>
 80100ce:	4602      	mov	r2, r0
 80100d0:	460b      	mov	r3, r1
 80100d2:	4630      	mov	r0, r6
 80100d4:	4639      	mov	r1, r7
 80100d6:	f7f0 f8a3 	bl	8000220 <__aeabi_dsub>
 80100da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80100de:	f7f0 fa57 	bl	8000590 <__aeabi_dmul>
 80100e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80100e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80100ea:	4610      	mov	r0, r2
 80100ec:	4619      	mov	r1, r3
 80100ee:	f7f0 fa4f 	bl	8000590 <__aeabi_dmul>
 80100f2:	a37d      	add	r3, pc, #500	@ (adr r3, 80102e8 <__ieee754_pow+0x738>)
 80100f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f8:	4604      	mov	r4, r0
 80100fa:	460d      	mov	r5, r1
 80100fc:	f7f0 fa48 	bl	8000590 <__aeabi_dmul>
 8010100:	a37b      	add	r3, pc, #492	@ (adr r3, 80102f0 <__ieee754_pow+0x740>)
 8010102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010106:	f7f0 f88d 	bl	8000224 <__adddf3>
 801010a:	4622      	mov	r2, r4
 801010c:	462b      	mov	r3, r5
 801010e:	f7f0 fa3f 	bl	8000590 <__aeabi_dmul>
 8010112:	a379      	add	r3, pc, #484	@ (adr r3, 80102f8 <__ieee754_pow+0x748>)
 8010114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010118:	f7f0 f884 	bl	8000224 <__adddf3>
 801011c:	4622      	mov	r2, r4
 801011e:	462b      	mov	r3, r5
 8010120:	f7f0 fa36 	bl	8000590 <__aeabi_dmul>
 8010124:	a376      	add	r3, pc, #472	@ (adr r3, 8010300 <__ieee754_pow+0x750>)
 8010126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012a:	f7f0 f87b 	bl	8000224 <__adddf3>
 801012e:	4622      	mov	r2, r4
 8010130:	462b      	mov	r3, r5
 8010132:	f7f0 fa2d 	bl	8000590 <__aeabi_dmul>
 8010136:	a374      	add	r3, pc, #464	@ (adr r3, 8010308 <__ieee754_pow+0x758>)
 8010138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013c:	f7f0 f872 	bl	8000224 <__adddf3>
 8010140:	4622      	mov	r2, r4
 8010142:	462b      	mov	r3, r5
 8010144:	f7f0 fa24 	bl	8000590 <__aeabi_dmul>
 8010148:	a371      	add	r3, pc, #452	@ (adr r3, 8010310 <__ieee754_pow+0x760>)
 801014a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801014e:	f7f0 f869 	bl	8000224 <__adddf3>
 8010152:	4622      	mov	r2, r4
 8010154:	4606      	mov	r6, r0
 8010156:	460f      	mov	r7, r1
 8010158:	462b      	mov	r3, r5
 801015a:	4620      	mov	r0, r4
 801015c:	4629      	mov	r1, r5
 801015e:	f7f0 fa17 	bl	8000590 <__aeabi_dmul>
 8010162:	4602      	mov	r2, r0
 8010164:	460b      	mov	r3, r1
 8010166:	4630      	mov	r0, r6
 8010168:	4639      	mov	r1, r7
 801016a:	f7f0 fa11 	bl	8000590 <__aeabi_dmul>
 801016e:	465a      	mov	r2, fp
 8010170:	4604      	mov	r4, r0
 8010172:	460d      	mov	r5, r1
 8010174:	464b      	mov	r3, r9
 8010176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801017a:	f7f0 f853 	bl	8000224 <__adddf3>
 801017e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010182:	f7f0 fa05 	bl	8000590 <__aeabi_dmul>
 8010186:	4622      	mov	r2, r4
 8010188:	462b      	mov	r3, r5
 801018a:	f7f0 f84b 	bl	8000224 <__adddf3>
 801018e:	465a      	mov	r2, fp
 8010190:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010194:	464b      	mov	r3, r9
 8010196:	4658      	mov	r0, fp
 8010198:	4649      	mov	r1, r9
 801019a:	f7f0 f9f9 	bl	8000590 <__aeabi_dmul>
 801019e:	4b6a      	ldr	r3, [pc, #424]	@ (8010348 <__ieee754_pow+0x798>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	4606      	mov	r6, r0
 80101a4:	460f      	mov	r7, r1
 80101a6:	f7f0 f83d 	bl	8000224 <__adddf3>
 80101aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101ae:	f7f0 f839 	bl	8000224 <__adddf3>
 80101b2:	46d8      	mov	r8, fp
 80101b4:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80101b8:	460d      	mov	r5, r1
 80101ba:	465a      	mov	r2, fp
 80101bc:	460b      	mov	r3, r1
 80101be:	4640      	mov	r0, r8
 80101c0:	4649      	mov	r1, r9
 80101c2:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80101c6:	f7f0 f9e3 	bl	8000590 <__aeabi_dmul>
 80101ca:	465c      	mov	r4, fp
 80101cc:	4680      	mov	r8, r0
 80101ce:	4689      	mov	r9, r1
 80101d0:	4b5d      	ldr	r3, [pc, #372]	@ (8010348 <__ieee754_pow+0x798>)
 80101d2:	2200      	movs	r2, #0
 80101d4:	4620      	mov	r0, r4
 80101d6:	4629      	mov	r1, r5
 80101d8:	f7f0 f822 	bl	8000220 <__aeabi_dsub>
 80101dc:	4632      	mov	r2, r6
 80101de:	463b      	mov	r3, r7
 80101e0:	f7f0 f81e 	bl	8000220 <__aeabi_dsub>
 80101e4:	4602      	mov	r2, r0
 80101e6:	460b      	mov	r3, r1
 80101e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80101ec:	f7f0 f818 	bl	8000220 <__aeabi_dsub>
 80101f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101f4:	f7f0 f9cc 	bl	8000590 <__aeabi_dmul>
 80101f8:	4622      	mov	r2, r4
 80101fa:	4606      	mov	r6, r0
 80101fc:	460f      	mov	r7, r1
 80101fe:	462b      	mov	r3, r5
 8010200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010204:	f7f0 f9c4 	bl	8000590 <__aeabi_dmul>
 8010208:	4602      	mov	r2, r0
 801020a:	460b      	mov	r3, r1
 801020c:	4630      	mov	r0, r6
 801020e:	4639      	mov	r1, r7
 8010210:	f7f0 f808 	bl	8000224 <__adddf3>
 8010214:	4606      	mov	r6, r0
 8010216:	460f      	mov	r7, r1
 8010218:	4602      	mov	r2, r0
 801021a:	460b      	mov	r3, r1
 801021c:	4640      	mov	r0, r8
 801021e:	4649      	mov	r1, r9
 8010220:	f7f0 f800 	bl	8000224 <__adddf3>
 8010224:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010228:	a33b      	add	r3, pc, #236	@ (adr r3, 8010318 <__ieee754_pow+0x768>)
 801022a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022e:	4658      	mov	r0, fp
 8010230:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010234:	460d      	mov	r5, r1
 8010236:	f7f0 f9ab 	bl	8000590 <__aeabi_dmul>
 801023a:	465c      	mov	r4, fp
 801023c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010240:	4642      	mov	r2, r8
 8010242:	464b      	mov	r3, r9
 8010244:	4620      	mov	r0, r4
 8010246:	4629      	mov	r1, r5
 8010248:	f7ef ffea 	bl	8000220 <__aeabi_dsub>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	4630      	mov	r0, r6
 8010252:	4639      	mov	r1, r7
 8010254:	f7ef ffe4 	bl	8000220 <__aeabi_dsub>
 8010258:	a331      	add	r3, pc, #196	@ (adr r3, 8010320 <__ieee754_pow+0x770>)
 801025a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801025e:	f7f0 f997 	bl	8000590 <__aeabi_dmul>
 8010262:	a331      	add	r3, pc, #196	@ (adr r3, 8010328 <__ieee754_pow+0x778>)
 8010264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010268:	4606      	mov	r6, r0
 801026a:	460f      	mov	r7, r1
 801026c:	4620      	mov	r0, r4
 801026e:	4629      	mov	r1, r5
 8010270:	f7f0 f98e 	bl	8000590 <__aeabi_dmul>
 8010274:	4602      	mov	r2, r0
 8010276:	460b      	mov	r3, r1
 8010278:	4630      	mov	r0, r6
 801027a:	4639      	mov	r1, r7
 801027c:	f7ef ffd2 	bl	8000224 <__adddf3>
 8010280:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010282:	4b32      	ldr	r3, [pc, #200]	@ (801034c <__ieee754_pow+0x79c>)
 8010284:	4413      	add	r3, r2
 8010286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801028a:	f7ef ffcb 	bl	8000224 <__adddf3>
 801028e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010292:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010294:	f7f0 f912 	bl	80004bc <__aeabi_i2d>
 8010298:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801029a:	4b2d      	ldr	r3, [pc, #180]	@ (8010350 <__ieee754_pow+0x7a0>)
 801029c:	4413      	add	r3, r2
 801029e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80102a2:	4606      	mov	r6, r0
 80102a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102a8:	460f      	mov	r7, r1
 80102aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102ae:	f7ef ffb9 	bl	8000224 <__adddf3>
 80102b2:	4642      	mov	r2, r8
 80102b4:	464b      	mov	r3, r9
 80102b6:	f7ef ffb5 	bl	8000224 <__adddf3>
 80102ba:	4632      	mov	r2, r6
 80102bc:	463b      	mov	r3, r7
 80102be:	f7ef ffb1 	bl	8000224 <__adddf3>
 80102c2:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80102c6:	4632      	mov	r2, r6
 80102c8:	463b      	mov	r3, r7
 80102ca:	4658      	mov	r0, fp
 80102cc:	460d      	mov	r5, r1
 80102ce:	f7ef ffa7 	bl	8000220 <__aeabi_dsub>
 80102d2:	4642      	mov	r2, r8
 80102d4:	464b      	mov	r3, r9
 80102d6:	f7ef ffa3 	bl	8000220 <__aeabi_dsub>
 80102da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102de:	f7ef ff9f 	bl	8000220 <__aeabi_dsub>
 80102e2:	465c      	mov	r4, fp
 80102e4:	e036      	b.n	8010354 <__ieee754_pow+0x7a4>
 80102e6:	bf00      	nop
 80102e8:	4a454eef 	.word	0x4a454eef
 80102ec:	3fca7e28 	.word	0x3fca7e28
 80102f0:	93c9db65 	.word	0x93c9db65
 80102f4:	3fcd864a 	.word	0x3fcd864a
 80102f8:	a91d4101 	.word	0xa91d4101
 80102fc:	3fd17460 	.word	0x3fd17460
 8010300:	518f264d 	.word	0x518f264d
 8010304:	3fd55555 	.word	0x3fd55555
 8010308:	db6fabff 	.word	0xdb6fabff
 801030c:	3fdb6db6 	.word	0x3fdb6db6
 8010310:	33333303 	.word	0x33333303
 8010314:	3fe33333 	.word	0x3fe33333
 8010318:	e0000000 	.word	0xe0000000
 801031c:	3feec709 	.word	0x3feec709
 8010320:	dc3a03fd 	.word	0xdc3a03fd
 8010324:	3feec709 	.word	0x3feec709
 8010328:	145b01f5 	.word	0x145b01f5
 801032c:	be3e2fe0 	.word	0xbe3e2fe0
 8010330:	7ff00000 	.word	0x7ff00000
 8010334:	43400000 	.word	0x43400000
 8010338:	0003988e 	.word	0x0003988e
 801033c:	000bb679 	.word	0x000bb679
 8010340:	08011408 	.word	0x08011408
 8010344:	3ff00000 	.word	0x3ff00000
 8010348:	40080000 	.word	0x40080000
 801034c:	080113e8 	.word	0x080113e8
 8010350:	080113f8 	.word	0x080113f8
 8010354:	4602      	mov	r2, r0
 8010356:	460b      	mov	r3, r1
 8010358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801035c:	e5d6      	b.n	800ff0c <__ieee754_pow+0x35c>
 801035e:	f04f 0a01 	mov.w	sl, #1
 8010362:	e65e      	b.n	8010022 <__ieee754_pow+0x472>
 8010364:	a3b5      	add	r3, pc, #724	@ (adr r3, 801063c <__ieee754_pow+0xa8c>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	4630      	mov	r0, r6
 801036c:	4639      	mov	r1, r7
 801036e:	f7ef ff59 	bl	8000224 <__adddf3>
 8010372:	4642      	mov	r2, r8
 8010374:	e9cd 0100 	strd	r0, r1, [sp]
 8010378:	464b      	mov	r3, r9
 801037a:	4620      	mov	r0, r4
 801037c:	4629      	mov	r1, r5
 801037e:	f7ef ff4f 	bl	8000220 <__aeabi_dsub>
 8010382:	4602      	mov	r2, r0
 8010384:	460b      	mov	r3, r1
 8010386:	e9dd 0100 	ldrd	r0, r1, [sp]
 801038a:	f7f0 fb91 	bl	8000ab0 <__aeabi_dcmpgt>
 801038e:	2800      	cmp	r0, #0
 8010390:	f47f adfe 	bne.w	800ff90 <__ieee754_pow+0x3e0>
 8010394:	4ba2      	ldr	r3, [pc, #648]	@ (8010620 <__ieee754_pow+0xa70>)
 8010396:	e022      	b.n	80103de <__ieee754_pow+0x82e>
 8010398:	4ca2      	ldr	r4, [pc, #648]	@ (8010624 <__ieee754_pow+0xa74>)
 801039a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801039e:	42a3      	cmp	r3, r4
 80103a0:	d919      	bls.n	80103d6 <__ieee754_pow+0x826>
 80103a2:	4ba1      	ldr	r3, [pc, #644]	@ (8010628 <__ieee754_pow+0xa78>)
 80103a4:	440b      	add	r3, r1
 80103a6:	4303      	orrs	r3, r0
 80103a8:	d009      	beq.n	80103be <__ieee754_pow+0x80e>
 80103aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80103ae:	2200      	movs	r2, #0
 80103b0:	2300      	movs	r3, #0
 80103b2:	f7f0 fb5f 	bl	8000a74 <__aeabi_dcmplt>
 80103b6:	3800      	subs	r0, #0
 80103b8:	bf18      	it	ne
 80103ba:	2001      	movne	r0, #1
 80103bc:	e512      	b.n	800fde4 <__ieee754_pow+0x234>
 80103be:	4642      	mov	r2, r8
 80103c0:	464b      	mov	r3, r9
 80103c2:	f7ef ff2d 	bl	8000220 <__aeabi_dsub>
 80103c6:	4632      	mov	r2, r6
 80103c8:	463b      	mov	r3, r7
 80103ca:	f7f0 fb67 	bl	8000a9c <__aeabi_dcmpge>
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d1eb      	bne.n	80103aa <__ieee754_pow+0x7fa>
 80103d2:	4b96      	ldr	r3, [pc, #600]	@ (801062c <__ieee754_pow+0xa7c>)
 80103d4:	e003      	b.n	80103de <__ieee754_pow+0x82e>
 80103d6:	4a96      	ldr	r2, [pc, #600]	@ (8010630 <__ieee754_pow+0xa80>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	f240 80e7 	bls.w	80105ac <__ieee754_pow+0x9fc>
 80103de:	151b      	asrs	r3, r3, #20
 80103e0:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80103e4:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80103e8:	fa4a fa03 	asr.w	sl, sl, r3
 80103ec:	44da      	add	sl, fp
 80103ee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80103f2:	4890      	ldr	r0, [pc, #576]	@ (8010634 <__ieee754_pow+0xa84>)
 80103f4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80103f8:	4108      	asrs	r0, r1
 80103fa:	ea00 030a 	and.w	r3, r0, sl
 80103fe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010402:	f1c1 0114 	rsb	r1, r1, #20
 8010406:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 801040a:	fa4a fa01 	asr.w	sl, sl, r1
 801040e:	f1bb 0f00 	cmp.w	fp, #0
 8010412:	4640      	mov	r0, r8
 8010414:	4649      	mov	r1, r9
 8010416:	f04f 0200 	mov.w	r2, #0
 801041a:	bfb8      	it	lt
 801041c:	f1ca 0a00 	rsblt	sl, sl, #0
 8010420:	f7ef fefe 	bl	8000220 <__aeabi_dsub>
 8010424:	4680      	mov	r8, r0
 8010426:	4689      	mov	r9, r1
 8010428:	4632      	mov	r2, r6
 801042a:	463b      	mov	r3, r7
 801042c:	4640      	mov	r0, r8
 801042e:	4649      	mov	r1, r9
 8010430:	f7ef fef8 	bl	8000224 <__adddf3>
 8010434:	2400      	movs	r4, #0
 8010436:	a36a      	add	r3, pc, #424	@ (adr r3, 80105e0 <__ieee754_pow+0xa30>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	4620      	mov	r0, r4
 801043e:	460d      	mov	r5, r1
 8010440:	f7f0 f8a6 	bl	8000590 <__aeabi_dmul>
 8010444:	4642      	mov	r2, r8
 8010446:	e9cd 0100 	strd	r0, r1, [sp]
 801044a:	464b      	mov	r3, r9
 801044c:	4620      	mov	r0, r4
 801044e:	4629      	mov	r1, r5
 8010450:	f7ef fee6 	bl	8000220 <__aeabi_dsub>
 8010454:	4602      	mov	r2, r0
 8010456:	460b      	mov	r3, r1
 8010458:	4630      	mov	r0, r6
 801045a:	4639      	mov	r1, r7
 801045c:	f7ef fee0 	bl	8000220 <__aeabi_dsub>
 8010460:	a361      	add	r3, pc, #388	@ (adr r3, 80105e8 <__ieee754_pow+0xa38>)
 8010462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010466:	f7f0 f893 	bl	8000590 <__aeabi_dmul>
 801046a:	a361      	add	r3, pc, #388	@ (adr r3, 80105f0 <__ieee754_pow+0xa40>)
 801046c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010470:	4680      	mov	r8, r0
 8010472:	4689      	mov	r9, r1
 8010474:	4620      	mov	r0, r4
 8010476:	4629      	mov	r1, r5
 8010478:	f7f0 f88a 	bl	8000590 <__aeabi_dmul>
 801047c:	4602      	mov	r2, r0
 801047e:	460b      	mov	r3, r1
 8010480:	4640      	mov	r0, r8
 8010482:	4649      	mov	r1, r9
 8010484:	f7ef fece 	bl	8000224 <__adddf3>
 8010488:	4604      	mov	r4, r0
 801048a:	460d      	mov	r5, r1
 801048c:	4602      	mov	r2, r0
 801048e:	460b      	mov	r3, r1
 8010490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010494:	f7ef fec6 	bl	8000224 <__adddf3>
 8010498:	e9dd 2300 	ldrd	r2, r3, [sp]
 801049c:	4680      	mov	r8, r0
 801049e:	4689      	mov	r9, r1
 80104a0:	f7ef febe 	bl	8000220 <__aeabi_dsub>
 80104a4:	4602      	mov	r2, r0
 80104a6:	460b      	mov	r3, r1
 80104a8:	4620      	mov	r0, r4
 80104aa:	4629      	mov	r1, r5
 80104ac:	f7ef feb8 	bl	8000220 <__aeabi_dsub>
 80104b0:	4642      	mov	r2, r8
 80104b2:	4606      	mov	r6, r0
 80104b4:	460f      	mov	r7, r1
 80104b6:	464b      	mov	r3, r9
 80104b8:	4640      	mov	r0, r8
 80104ba:	4649      	mov	r1, r9
 80104bc:	f7f0 f868 	bl	8000590 <__aeabi_dmul>
 80104c0:	a34d      	add	r3, pc, #308	@ (adr r3, 80105f8 <__ieee754_pow+0xa48>)
 80104c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c6:	4604      	mov	r4, r0
 80104c8:	460d      	mov	r5, r1
 80104ca:	f7f0 f861 	bl	8000590 <__aeabi_dmul>
 80104ce:	a34c      	add	r3, pc, #304	@ (adr r3, 8010600 <__ieee754_pow+0xa50>)
 80104d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d4:	f7ef fea4 	bl	8000220 <__aeabi_dsub>
 80104d8:	4622      	mov	r2, r4
 80104da:	462b      	mov	r3, r5
 80104dc:	f7f0 f858 	bl	8000590 <__aeabi_dmul>
 80104e0:	a349      	add	r3, pc, #292	@ (adr r3, 8010608 <__ieee754_pow+0xa58>)
 80104e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e6:	f7ef fe9d 	bl	8000224 <__adddf3>
 80104ea:	4622      	mov	r2, r4
 80104ec:	462b      	mov	r3, r5
 80104ee:	f7f0 f84f 	bl	8000590 <__aeabi_dmul>
 80104f2:	a347      	add	r3, pc, #284	@ (adr r3, 8010610 <__ieee754_pow+0xa60>)
 80104f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f8:	f7ef fe92 	bl	8000220 <__aeabi_dsub>
 80104fc:	4622      	mov	r2, r4
 80104fe:	462b      	mov	r3, r5
 8010500:	f7f0 f846 	bl	8000590 <__aeabi_dmul>
 8010504:	a344      	add	r3, pc, #272	@ (adr r3, 8010618 <__ieee754_pow+0xa68>)
 8010506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050a:	f7ef fe8b 	bl	8000224 <__adddf3>
 801050e:	4622      	mov	r2, r4
 8010510:	462b      	mov	r3, r5
 8010512:	f7f0 f83d 	bl	8000590 <__aeabi_dmul>
 8010516:	4602      	mov	r2, r0
 8010518:	460b      	mov	r3, r1
 801051a:	4640      	mov	r0, r8
 801051c:	4649      	mov	r1, r9
 801051e:	f7ef fe7f 	bl	8000220 <__aeabi_dsub>
 8010522:	4604      	mov	r4, r0
 8010524:	460d      	mov	r5, r1
 8010526:	4602      	mov	r2, r0
 8010528:	460b      	mov	r3, r1
 801052a:	4640      	mov	r0, r8
 801052c:	4649      	mov	r1, r9
 801052e:	f7f0 f82f 	bl	8000590 <__aeabi_dmul>
 8010532:	2200      	movs	r2, #0
 8010534:	e9cd 0100 	strd	r0, r1, [sp]
 8010538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801053c:	4620      	mov	r0, r4
 801053e:	4629      	mov	r1, r5
 8010540:	f7ef fe6e 	bl	8000220 <__aeabi_dsub>
 8010544:	4602      	mov	r2, r0
 8010546:	460b      	mov	r3, r1
 8010548:	e9dd 0100 	ldrd	r0, r1, [sp]
 801054c:	f7f0 f94a 	bl	80007e4 <__aeabi_ddiv>
 8010550:	4632      	mov	r2, r6
 8010552:	4604      	mov	r4, r0
 8010554:	460d      	mov	r5, r1
 8010556:	463b      	mov	r3, r7
 8010558:	4640      	mov	r0, r8
 801055a:	4649      	mov	r1, r9
 801055c:	f7f0 f818 	bl	8000590 <__aeabi_dmul>
 8010560:	4632      	mov	r2, r6
 8010562:	463b      	mov	r3, r7
 8010564:	f7ef fe5e 	bl	8000224 <__adddf3>
 8010568:	4602      	mov	r2, r0
 801056a:	460b      	mov	r3, r1
 801056c:	4620      	mov	r0, r4
 801056e:	4629      	mov	r1, r5
 8010570:	f7ef fe56 	bl	8000220 <__aeabi_dsub>
 8010574:	4642      	mov	r2, r8
 8010576:	464b      	mov	r3, r9
 8010578:	f7ef fe52 	bl	8000220 <__aeabi_dsub>
 801057c:	460b      	mov	r3, r1
 801057e:	4602      	mov	r2, r0
 8010580:	492d      	ldr	r1, [pc, #180]	@ (8010638 <__ieee754_pow+0xa88>)
 8010582:	2000      	movs	r0, #0
 8010584:	f7ef fe4c 	bl	8000220 <__aeabi_dsub>
 8010588:	ec41 0b10 	vmov	d0, r0, r1
 801058c:	ee10 3a90 	vmov	r3, s1
 8010590:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010594:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010598:	da0b      	bge.n	80105b2 <__ieee754_pow+0xa02>
 801059a:	4650      	mov	r0, sl
 801059c:	f000 fb20 	bl	8010be0 <scalbn>
 80105a0:	ec51 0b10 	vmov	r0, r1, d0
 80105a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105a8:	f7ff bb6d 	b.w	800fc86 <__ieee754_pow+0xd6>
 80105ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80105b0:	e73a      	b.n	8010428 <__ieee754_pow+0x878>
 80105b2:	ec51 0b10 	vmov	r0, r1, d0
 80105b6:	4619      	mov	r1, r3
 80105b8:	e7f4      	b.n	80105a4 <__ieee754_pow+0x9f4>
 80105ba:	491f      	ldr	r1, [pc, #124]	@ (8010638 <__ieee754_pow+0xa88>)
 80105bc:	2000      	movs	r0, #0
 80105be:	f7ff bb14 	b.w	800fbea <__ieee754_pow+0x3a>
 80105c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105c6:	f7ff bb10 	b.w	800fbea <__ieee754_pow+0x3a>
 80105ca:	4630      	mov	r0, r6
 80105cc:	4639      	mov	r1, r7
 80105ce:	f7ff bb0c 	b.w	800fbea <__ieee754_pow+0x3a>
 80105d2:	460c      	mov	r4, r1
 80105d4:	f7ff bb69 	b.w	800fcaa <__ieee754_pow+0xfa>
 80105d8:	2400      	movs	r4, #0
 80105da:	f7ff bb4b 	b.w	800fc74 <__ieee754_pow+0xc4>
 80105de:	bf00      	nop
 80105e0:	00000000 	.word	0x00000000
 80105e4:	3fe62e43 	.word	0x3fe62e43
 80105e8:	fefa39ef 	.word	0xfefa39ef
 80105ec:	3fe62e42 	.word	0x3fe62e42
 80105f0:	0ca86c39 	.word	0x0ca86c39
 80105f4:	be205c61 	.word	0xbe205c61
 80105f8:	72bea4d0 	.word	0x72bea4d0
 80105fc:	3e663769 	.word	0x3e663769
 8010600:	c5d26bf1 	.word	0xc5d26bf1
 8010604:	3ebbbd41 	.word	0x3ebbbd41
 8010608:	af25de2c 	.word	0xaf25de2c
 801060c:	3f11566a 	.word	0x3f11566a
 8010610:	16bebd93 	.word	0x16bebd93
 8010614:	3f66c16c 	.word	0x3f66c16c
 8010618:	5555553e 	.word	0x5555553e
 801061c:	3fc55555 	.word	0x3fc55555
 8010620:	40900000 	.word	0x40900000
 8010624:	4090cbff 	.word	0x4090cbff
 8010628:	3f6f3400 	.word	0x3f6f3400
 801062c:	4090cc00 	.word	0x4090cc00
 8010630:	3fe00000 	.word	0x3fe00000
 8010634:	fff00000 	.word	0xfff00000
 8010638:	3ff00000 	.word	0x3ff00000
 801063c:	652b82fe 	.word	0x652b82fe
 8010640:	3c971547 	.word	0x3c971547

08010644 <fabs>:
 8010644:	ec51 0b10 	vmov	r0, r1, d0
 8010648:	4602      	mov	r2, r0
 801064a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801064e:	ec43 2b10 	vmov	d0, r2, r3
 8010652:	4770      	bx	lr

08010654 <__kernel_cosf>:
 8010654:	ee10 3a10 	vmov	r3, s0
 8010658:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801065c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010660:	eef0 6a40 	vmov.f32	s13, s0
 8010664:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010668:	d204      	bcs.n	8010674 <__kernel_cosf+0x20>
 801066a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801066e:	ee17 2a90 	vmov	r2, s15
 8010672:	b342      	cbz	r2, 80106c6 <__kernel_cosf+0x72>
 8010674:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8010678:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80106e4 <__kernel_cosf+0x90>
 801067c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80106e8 <__kernel_cosf+0x94>
 8010680:	4a1a      	ldr	r2, [pc, #104]	@ (80106ec <__kernel_cosf+0x98>)
 8010682:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010686:	4293      	cmp	r3, r2
 8010688:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80106f0 <__kernel_cosf+0x9c>
 801068c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010690:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80106f4 <__kernel_cosf+0xa0>
 8010694:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010698:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80106f8 <__kernel_cosf+0xa4>
 801069c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80106a0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80106fc <__kernel_cosf+0xa8>
 80106a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80106a8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80106ac:	ee26 6a07 	vmul.f32	s12, s12, s14
 80106b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80106b4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80106b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106bc:	d804      	bhi.n	80106c8 <__kernel_cosf+0x74>
 80106be:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80106c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80106c6:	4770      	bx	lr
 80106c8:	4a0d      	ldr	r2, [pc, #52]	@ (8010700 <__kernel_cosf+0xac>)
 80106ca:	4293      	cmp	r3, r2
 80106cc:	bf9a      	itte	ls
 80106ce:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80106d2:	ee07 3a10 	vmovls	s14, r3
 80106d6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80106da:	ee30 0a47 	vsub.f32	s0, s0, s14
 80106de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80106e2:	e7ec      	b.n	80106be <__kernel_cosf+0x6a>
 80106e4:	ad47d74e 	.word	0xad47d74e
 80106e8:	310f74f6 	.word	0x310f74f6
 80106ec:	3e999999 	.word	0x3e999999
 80106f0:	b493f27c 	.word	0xb493f27c
 80106f4:	37d00d01 	.word	0x37d00d01
 80106f8:	bab60b61 	.word	0xbab60b61
 80106fc:	3d2aaaab 	.word	0x3d2aaaab
 8010700:	3f480000 	.word	0x3f480000

08010704 <__kernel_sinf>:
 8010704:	ee10 3a10 	vmov	r3, s0
 8010708:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801070c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010710:	d204      	bcs.n	801071c <__kernel_sinf+0x18>
 8010712:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010716:	ee17 3a90 	vmov	r3, s15
 801071a:	b35b      	cbz	r3, 8010774 <__kernel_sinf+0x70>
 801071c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010720:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010778 <__kernel_sinf+0x74>
 8010724:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801077c <__kernel_sinf+0x78>
 8010728:	eea7 6a27 	vfma.f32	s12, s14, s15
 801072c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8010780 <__kernel_sinf+0x7c>
 8010730:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010734:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8010784 <__kernel_sinf+0x80>
 8010738:	eea7 6a87 	vfma.f32	s12, s15, s14
 801073c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8010788 <__kernel_sinf+0x84>
 8010740:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010744:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010748:	b930      	cbnz	r0, 8010758 <__kernel_sinf+0x54>
 801074a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801078c <__kernel_sinf+0x88>
 801074e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010752:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010756:	4770      	bx	lr
 8010758:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801075c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8010760:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010764:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010768:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8010790 <__kernel_sinf+0x8c>
 801076c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010770:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010774:	4770      	bx	lr
 8010776:	bf00      	nop
 8010778:	2f2ec9d3 	.word	0x2f2ec9d3
 801077c:	b2d72f34 	.word	0xb2d72f34
 8010780:	3638ef1b 	.word	0x3638ef1b
 8010784:	b9500d01 	.word	0xb9500d01
 8010788:	3c088889 	.word	0x3c088889
 801078c:	be2aaaab 	.word	0xbe2aaaab
 8010790:	3e2aaaab 	.word	0x3e2aaaab

08010794 <__ieee754_acosf>:
 8010794:	b508      	push	{r3, lr}
 8010796:	ee10 3a10 	vmov	r3, s0
 801079a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801079e:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80107a2:	ed2d 8b0c 	vpush	{d8-d13}
 80107a6:	d10a      	bne.n	80107be <__ieee754_acosf+0x2a>
 80107a8:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 801093c <__ieee754_acosf+0x1a8>
 80107ac:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8010940 <__ieee754_acosf+0x1ac>
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	bfc8      	it	gt
 80107b4:	eeb0 0a67 	vmovgt.f32	s0, s15
 80107b8:	ecbd 8b0c 	vpop	{d8-d13}
 80107bc:	bd08      	pop	{r3, pc}
 80107be:	d904      	bls.n	80107ca <__ieee754_acosf+0x36>
 80107c0:	ee30 8a40 	vsub.f32	s16, s0, s0
 80107c4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80107c8:	e7f6      	b.n	80107b8 <__ieee754_acosf+0x24>
 80107ca:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80107ce:	d23c      	bcs.n	801084a <__ieee754_acosf+0xb6>
 80107d0:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80107d4:	f240 80af 	bls.w	8010936 <__ieee754_acosf+0x1a2>
 80107d8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80107dc:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8010944 <__ieee754_acosf+0x1b0>
 80107e0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8010948 <__ieee754_acosf+0x1b4>
 80107e4:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 801094c <__ieee754_acosf+0x1b8>
 80107e8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80107ec:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8010950 <__ieee754_acosf+0x1bc>
 80107f0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80107f4:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8010954 <__ieee754_acosf+0x1c0>
 80107f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80107fc:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8010958 <__ieee754_acosf+0x1c4>
 8010800:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010804:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801095c <__ieee754_acosf+0x1c8>
 8010808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801080c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8010960 <__ieee754_acosf+0x1cc>
 8010810:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010814:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8010964 <__ieee754_acosf+0x1d0>
 8010818:	eee6 6a27 	vfma.f32	s13, s12, s15
 801081c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8010968 <__ieee754_acosf+0x1d4>
 8010820:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010824:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010828:	eee6 6a27 	vfma.f32	s13, s12, s15
 801082c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010830:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801096c <__ieee754_acosf+0x1d8>
 8010834:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8010838:	eee0 7a46 	vfms.f32	s15, s0, s12
 801083c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010840:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8010970 <__ieee754_acosf+0x1dc>
 8010844:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010848:	e7b6      	b.n	80107b8 <__ieee754_acosf+0x24>
 801084a:	2b00      	cmp	r3, #0
 801084c:	eddf da3d 	vldr	s27, [pc, #244]	@ 8010944 <__ieee754_acosf+0x1b0>
 8010850:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8010948 <__ieee754_acosf+0x1b4>
 8010854:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8010950 <__ieee754_acosf+0x1bc>
 8010858:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8010954 <__ieee754_acosf+0x1c0>
 801085c:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8010958 <__ieee754_acosf+0x1c4>
 8010860:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 801095c <__ieee754_acosf+0x1c8>
 8010864:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8010960 <__ieee754_acosf+0x1cc>
 8010868:	eddf aa38 	vldr	s21, [pc, #224]	@ 801094c <__ieee754_acosf+0x1b8>
 801086c:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8010964 <__ieee754_acosf+0x1d0>
 8010870:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8010968 <__ieee754_acosf+0x1d4>
 8010874:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8010878:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801087c:	da28      	bge.n	80108d0 <__ieee754_acosf+0x13c>
 801087e:	ee30 8a09 	vadd.f32	s16, s0, s18
 8010882:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010886:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801088a:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801088e:	eeac ca80 	vfma.f32	s24, s25, s0
 8010892:	eeaa aa80 	vfma.f32	s20, s21, s0
 8010896:	eeec ba00 	vfma.f32	s23, s24, s0
 801089a:	eeea 9a00 	vfma.f32	s19, s20, s0
 801089e:	eeab ba80 	vfma.f32	s22, s23, s0
 80108a2:	eea9 9a80 	vfma.f32	s18, s19, s0
 80108a6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80108aa:	ee68 8a80 	vmul.f32	s17, s17, s0
 80108ae:	f7ff f955 	bl	800fb5c <__ieee754_sqrtf>
 80108b2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80108b6:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8010974 <__ieee754_acosf+0x1e0>
 80108ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80108be:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80108c2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80108c6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8010978 <__ieee754_acosf+0x1e4>
 80108ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80108ce:	e773      	b.n	80107b8 <__ieee754_acosf+0x24>
 80108d0:	ee39 8a40 	vsub.f32	s16, s18, s0
 80108d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 80108d8:	eeb0 0a48 	vmov.f32	s0, s16
 80108dc:	f7ff f93e 	bl	800fb5c <__ieee754_sqrtf>
 80108e0:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80108e4:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80108e8:	eeac ca88 	vfma.f32	s24, s25, s16
 80108ec:	eeaa aa88 	vfma.f32	s20, s21, s16
 80108f0:	eeec ba08 	vfma.f32	s23, s24, s16
 80108f4:	ee10 3a10 	vmov	r3, s0
 80108f8:	eeab ba88 	vfma.f32	s22, s23, s16
 80108fc:	f36f 030b 	bfc	r3, #0, #12
 8010900:	eeea 9a08 	vfma.f32	s19, s20, s16
 8010904:	ee07 3a90 	vmov	s15, r3
 8010908:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801090c:	eeb0 6a48 	vmov.f32	s12, s16
 8010910:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8010914:	eea9 9a88 	vfma.f32	s18, s19, s16
 8010918:	ee70 6a27 	vadd.f32	s13, s0, s15
 801091c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010920:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010924:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010928:	eea0 7a26 	vfma.f32	s14, s0, s13
 801092c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010930:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010934:	e740      	b.n	80107b8 <__ieee754_acosf+0x24>
 8010936:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801097c <__ieee754_acosf+0x1e8>
 801093a:	e73d      	b.n	80107b8 <__ieee754_acosf+0x24>
 801093c:	40490fdb 	.word	0x40490fdb
 8010940:	00000000 	.word	0x00000000
 8010944:	3811ef08 	.word	0x3811ef08
 8010948:	3a4f7f04 	.word	0x3a4f7f04
 801094c:	bf303361 	.word	0xbf303361
 8010950:	bd241146 	.word	0xbd241146
 8010954:	3e4e0aa8 	.word	0x3e4e0aa8
 8010958:	bea6b090 	.word	0xbea6b090
 801095c:	3e2aaaab 	.word	0x3e2aaaab
 8010960:	3d9dc62e 	.word	0x3d9dc62e
 8010964:	4001572d 	.word	0x4001572d
 8010968:	c019d139 	.word	0xc019d139
 801096c:	33a22168 	.word	0x33a22168
 8010970:	3fc90fda 	.word	0x3fc90fda
 8010974:	b3a22168 	.word	0xb3a22168
 8010978:	40490fda 	.word	0x40490fda
 801097c:	3fc90fdb 	.word	0x3fc90fdb

08010980 <__ieee754_rem_pio2f>:
 8010980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010982:	ee10 6a10 	vmov	r6, s0
 8010986:	4b88      	ldr	r3, [pc, #544]	@ (8010ba8 <__ieee754_rem_pio2f+0x228>)
 8010988:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801098c:	429d      	cmp	r5, r3
 801098e:	b087      	sub	sp, #28
 8010990:	4604      	mov	r4, r0
 8010992:	d805      	bhi.n	80109a0 <__ieee754_rem_pio2f+0x20>
 8010994:	2300      	movs	r3, #0
 8010996:	ed80 0a00 	vstr	s0, [r0]
 801099a:	6043      	str	r3, [r0, #4]
 801099c:	2000      	movs	r0, #0
 801099e:	e022      	b.n	80109e6 <__ieee754_rem_pio2f+0x66>
 80109a0:	4b82      	ldr	r3, [pc, #520]	@ (8010bac <__ieee754_rem_pio2f+0x22c>)
 80109a2:	429d      	cmp	r5, r3
 80109a4:	d83a      	bhi.n	8010a1c <__ieee754_rem_pio2f+0x9c>
 80109a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80109aa:	2e00      	cmp	r6, #0
 80109ac:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010bb0 <__ieee754_rem_pio2f+0x230>
 80109b0:	4a80      	ldr	r2, [pc, #512]	@ (8010bb4 <__ieee754_rem_pio2f+0x234>)
 80109b2:	f023 030f 	bic.w	r3, r3, #15
 80109b6:	dd18      	ble.n	80109ea <__ieee754_rem_pio2f+0x6a>
 80109b8:	4293      	cmp	r3, r2
 80109ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 80109be:	bf09      	itett	eq
 80109c0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010bb8 <__ieee754_rem_pio2f+0x238>
 80109c4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010bbc <__ieee754_rem_pio2f+0x23c>
 80109c8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010bc0 <__ieee754_rem_pio2f+0x240>
 80109cc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80109d0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80109d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109d8:	ed80 7a00 	vstr	s14, [r0]
 80109dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80109e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80109e4:	2001      	movs	r0, #1
 80109e6:	b007      	add	sp, #28
 80109e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ea:	4293      	cmp	r3, r2
 80109ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 80109f0:	bf09      	itett	eq
 80109f2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010bb8 <__ieee754_rem_pio2f+0x238>
 80109f6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010bbc <__ieee754_rem_pio2f+0x23c>
 80109fa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010bc0 <__ieee754_rem_pio2f+0x240>
 80109fe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8010a02:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a0a:	ed80 7a00 	vstr	s14, [r0]
 8010a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a12:	edc0 7a01 	vstr	s15, [r0, #4]
 8010a16:	f04f 30ff 	mov.w	r0, #4294967295
 8010a1a:	e7e4      	b.n	80109e6 <__ieee754_rem_pio2f+0x66>
 8010a1c:	4b69      	ldr	r3, [pc, #420]	@ (8010bc4 <__ieee754_rem_pio2f+0x244>)
 8010a1e:	429d      	cmp	r5, r3
 8010a20:	d873      	bhi.n	8010b0a <__ieee754_rem_pio2f+0x18a>
 8010a22:	f7fe ff65 	bl	800f8f0 <fabsf>
 8010a26:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010bc8 <__ieee754_rem_pio2f+0x248>
 8010a2a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010a2e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010a3a:	ee17 0a90 	vmov	r0, s15
 8010a3e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010bb0 <__ieee754_rem_pio2f+0x230>
 8010a42:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010a46:	281f      	cmp	r0, #31
 8010a48:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010bbc <__ieee754_rem_pio2f+0x23c>
 8010a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a50:	eeb1 6a47 	vneg.f32	s12, s14
 8010a54:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010a58:	ee16 1a90 	vmov	r1, s13
 8010a5c:	dc09      	bgt.n	8010a72 <__ieee754_rem_pio2f+0xf2>
 8010a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8010bcc <__ieee754_rem_pio2f+0x24c>)
 8010a60:	1e47      	subs	r7, r0, #1
 8010a62:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010a66:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8010a6a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d107      	bne.n	8010a82 <__ieee754_rem_pio2f+0x102>
 8010a72:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8010a76:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8010a7a:	2a08      	cmp	r2, #8
 8010a7c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8010a80:	dc14      	bgt.n	8010aac <__ieee754_rem_pio2f+0x12c>
 8010a82:	6021      	str	r1, [r4, #0]
 8010a84:	ed94 7a00 	vldr	s14, [r4]
 8010a88:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010a8c:	2e00      	cmp	r6, #0
 8010a8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010a92:	ed84 0a01 	vstr	s0, [r4, #4]
 8010a96:	daa6      	bge.n	80109e6 <__ieee754_rem_pio2f+0x66>
 8010a98:	eeb1 7a47 	vneg.f32	s14, s14
 8010a9c:	eeb1 0a40 	vneg.f32	s0, s0
 8010aa0:	ed84 7a00 	vstr	s14, [r4]
 8010aa4:	ed84 0a01 	vstr	s0, [r4, #4]
 8010aa8:	4240      	negs	r0, r0
 8010aaa:	e79c      	b.n	80109e6 <__ieee754_rem_pio2f+0x66>
 8010aac:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010bb8 <__ieee754_rem_pio2f+0x238>
 8010ab0:	eef0 6a40 	vmov.f32	s13, s0
 8010ab4:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010ab8:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010abc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010ac0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010bc0 <__ieee754_rem_pio2f+0x240>
 8010ac4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010ac8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010acc:	ee15 2a90 	vmov	r2, s11
 8010ad0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010ad4:	1a5b      	subs	r3, r3, r1
 8010ad6:	2b19      	cmp	r3, #25
 8010ad8:	dc04      	bgt.n	8010ae4 <__ieee754_rem_pio2f+0x164>
 8010ada:	edc4 5a00 	vstr	s11, [r4]
 8010ade:	eeb0 0a66 	vmov.f32	s0, s13
 8010ae2:	e7cf      	b.n	8010a84 <__ieee754_rem_pio2f+0x104>
 8010ae4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010bd0 <__ieee754_rem_pio2f+0x250>
 8010ae8:	eeb0 0a66 	vmov.f32	s0, s13
 8010aec:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010af0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010af4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010bd4 <__ieee754_rem_pio2f+0x254>
 8010af8:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010afc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010b00:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010b04:	ed84 7a00 	vstr	s14, [r4]
 8010b08:	e7bc      	b.n	8010a84 <__ieee754_rem_pio2f+0x104>
 8010b0a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010b0e:	d306      	bcc.n	8010b1e <__ieee754_rem_pio2f+0x19e>
 8010b10:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010b14:	edc0 7a01 	vstr	s15, [r0, #4]
 8010b18:	edc0 7a00 	vstr	s15, [r0]
 8010b1c:	e73e      	b.n	801099c <__ieee754_rem_pio2f+0x1c>
 8010b1e:	15ea      	asrs	r2, r5, #23
 8010b20:	3a86      	subs	r2, #134	@ 0x86
 8010b22:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010b26:	ee07 3a90 	vmov	s15, r3
 8010b2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010b2e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010bd8 <__ieee754_rem_pio2f+0x258>
 8010b32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b3a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010b3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010b46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b4e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010b52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5e:	edcd 7a05 	vstr	s15, [sp, #20]
 8010b62:	d11e      	bne.n	8010ba2 <__ieee754_rem_pio2f+0x222>
 8010b64:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b6c:	bf0c      	ite	eq
 8010b6e:	2301      	moveq	r3, #1
 8010b70:	2302      	movne	r3, #2
 8010b72:	491a      	ldr	r1, [pc, #104]	@ (8010bdc <__ieee754_rem_pio2f+0x25c>)
 8010b74:	9101      	str	r1, [sp, #4]
 8010b76:	2102      	movs	r1, #2
 8010b78:	9100      	str	r1, [sp, #0]
 8010b7a:	a803      	add	r0, sp, #12
 8010b7c:	4621      	mov	r1, r4
 8010b7e:	f000 f94d 	bl	8010e1c <__kernel_rem_pio2f>
 8010b82:	2e00      	cmp	r6, #0
 8010b84:	f6bf af2f 	bge.w	80109e6 <__ieee754_rem_pio2f+0x66>
 8010b88:	edd4 7a00 	vldr	s15, [r4]
 8010b8c:	eef1 7a67 	vneg.f32	s15, s15
 8010b90:	edc4 7a00 	vstr	s15, [r4]
 8010b94:	edd4 7a01 	vldr	s15, [r4, #4]
 8010b98:	eef1 7a67 	vneg.f32	s15, s15
 8010b9c:	edc4 7a01 	vstr	s15, [r4, #4]
 8010ba0:	e782      	b.n	8010aa8 <__ieee754_rem_pio2f+0x128>
 8010ba2:	2303      	movs	r3, #3
 8010ba4:	e7e5      	b.n	8010b72 <__ieee754_rem_pio2f+0x1f2>
 8010ba6:	bf00      	nop
 8010ba8:	3f490fd8 	.word	0x3f490fd8
 8010bac:	4016cbe3 	.word	0x4016cbe3
 8010bb0:	3fc90f80 	.word	0x3fc90f80
 8010bb4:	3fc90fd0 	.word	0x3fc90fd0
 8010bb8:	37354400 	.word	0x37354400
 8010bbc:	37354443 	.word	0x37354443
 8010bc0:	2e85a308 	.word	0x2e85a308
 8010bc4:	43490f80 	.word	0x43490f80
 8010bc8:	3f22f984 	.word	0x3f22f984
 8010bcc:	08011418 	.word	0x08011418
 8010bd0:	2e85a300 	.word	0x2e85a300
 8010bd4:	248d3132 	.word	0x248d3132
 8010bd8:	43800000 	.word	0x43800000
 8010bdc:	08011498 	.word	0x08011498

08010be0 <scalbn>:
 8010be0:	b570      	push	{r4, r5, r6, lr}
 8010be2:	ec55 4b10 	vmov	r4, r5, d0
 8010be6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010bea:	4606      	mov	r6, r0
 8010bec:	462b      	mov	r3, r5
 8010bee:	b991      	cbnz	r1, 8010c16 <scalbn+0x36>
 8010bf0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010bf4:	4323      	orrs	r3, r4
 8010bf6:	d03b      	beq.n	8010c70 <scalbn+0x90>
 8010bf8:	4b33      	ldr	r3, [pc, #204]	@ (8010cc8 <scalbn+0xe8>)
 8010bfa:	4620      	mov	r0, r4
 8010bfc:	4629      	mov	r1, r5
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f7ef fcc6 	bl	8000590 <__aeabi_dmul>
 8010c04:	4b31      	ldr	r3, [pc, #196]	@ (8010ccc <scalbn+0xec>)
 8010c06:	429e      	cmp	r6, r3
 8010c08:	4604      	mov	r4, r0
 8010c0a:	460d      	mov	r5, r1
 8010c0c:	da0f      	bge.n	8010c2e <scalbn+0x4e>
 8010c0e:	a326      	add	r3, pc, #152	@ (adr r3, 8010ca8 <scalbn+0xc8>)
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	e01e      	b.n	8010c54 <scalbn+0x74>
 8010c16:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010c1a:	4291      	cmp	r1, r2
 8010c1c:	d10b      	bne.n	8010c36 <scalbn+0x56>
 8010c1e:	4622      	mov	r2, r4
 8010c20:	4620      	mov	r0, r4
 8010c22:	4629      	mov	r1, r5
 8010c24:	f7ef fafe 	bl	8000224 <__adddf3>
 8010c28:	4604      	mov	r4, r0
 8010c2a:	460d      	mov	r5, r1
 8010c2c:	e020      	b.n	8010c70 <scalbn+0x90>
 8010c2e:	460b      	mov	r3, r1
 8010c30:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010c34:	3936      	subs	r1, #54	@ 0x36
 8010c36:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010c3a:	4296      	cmp	r6, r2
 8010c3c:	dd0d      	ble.n	8010c5a <scalbn+0x7a>
 8010c3e:	2d00      	cmp	r5, #0
 8010c40:	a11b      	add	r1, pc, #108	@ (adr r1, 8010cb0 <scalbn+0xd0>)
 8010c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c46:	da02      	bge.n	8010c4e <scalbn+0x6e>
 8010c48:	a11b      	add	r1, pc, #108	@ (adr r1, 8010cb8 <scalbn+0xd8>)
 8010c4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c4e:	a318      	add	r3, pc, #96	@ (adr r3, 8010cb0 <scalbn+0xd0>)
 8010c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c54:	f7ef fc9c 	bl	8000590 <__aeabi_dmul>
 8010c58:	e7e6      	b.n	8010c28 <scalbn+0x48>
 8010c5a:	1872      	adds	r2, r6, r1
 8010c5c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010c60:	428a      	cmp	r2, r1
 8010c62:	dcec      	bgt.n	8010c3e <scalbn+0x5e>
 8010c64:	2a00      	cmp	r2, #0
 8010c66:	dd06      	ble.n	8010c76 <scalbn+0x96>
 8010c68:	f36f 531e 	bfc	r3, #20, #11
 8010c6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c70:	ec45 4b10 	vmov	d0, r4, r5
 8010c74:	bd70      	pop	{r4, r5, r6, pc}
 8010c76:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010c7a:	da08      	bge.n	8010c8e <scalbn+0xae>
 8010c7c:	2d00      	cmp	r5, #0
 8010c7e:	a10a      	add	r1, pc, #40	@ (adr r1, 8010ca8 <scalbn+0xc8>)
 8010c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c84:	dac3      	bge.n	8010c0e <scalbn+0x2e>
 8010c86:	a10e      	add	r1, pc, #56	@ (adr r1, 8010cc0 <scalbn+0xe0>)
 8010c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c8c:	e7bf      	b.n	8010c0e <scalbn+0x2e>
 8010c8e:	3236      	adds	r2, #54	@ 0x36
 8010c90:	f36f 531e 	bfc	r3, #20, #11
 8010c94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c98:	4620      	mov	r0, r4
 8010c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd0 <scalbn+0xf0>)
 8010c9c:	4629      	mov	r1, r5
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	e7d8      	b.n	8010c54 <scalbn+0x74>
 8010ca2:	bf00      	nop
 8010ca4:	f3af 8000 	nop.w
 8010ca8:	c2f8f359 	.word	0xc2f8f359
 8010cac:	01a56e1f 	.word	0x01a56e1f
 8010cb0:	8800759c 	.word	0x8800759c
 8010cb4:	7e37e43c 	.word	0x7e37e43c
 8010cb8:	8800759c 	.word	0x8800759c
 8010cbc:	fe37e43c 	.word	0xfe37e43c
 8010cc0:	c2f8f359 	.word	0xc2f8f359
 8010cc4:	81a56e1f 	.word	0x81a56e1f
 8010cc8:	43500000 	.word	0x43500000
 8010ccc:	ffff3cb0 	.word	0xffff3cb0
 8010cd0:	3c900000 	.word	0x3c900000

08010cd4 <with_errno>:
 8010cd4:	b510      	push	{r4, lr}
 8010cd6:	ed2d 8b02 	vpush	{d8}
 8010cda:	eeb0 8a40 	vmov.f32	s16, s0
 8010cde:	eef0 8a60 	vmov.f32	s17, s1
 8010ce2:	4604      	mov	r4, r0
 8010ce4:	f7fe fca2 	bl	800f62c <__errno>
 8010ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8010cec:	eef0 0a68 	vmov.f32	s1, s17
 8010cf0:	ecbd 8b02 	vpop	{d8}
 8010cf4:	6004      	str	r4, [r0, #0]
 8010cf6:	bd10      	pop	{r4, pc}

08010cf8 <xflow>:
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	b507      	push	{r0, r1, r2, lr}
 8010cfc:	ec51 0b10 	vmov	r0, r1, d0
 8010d00:	b183      	cbz	r3, 8010d24 <xflow+0x2c>
 8010d02:	4602      	mov	r2, r0
 8010d04:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d08:	e9cd 2300 	strd	r2, r3, [sp]
 8010d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010d10:	f7ef fc3e 	bl	8000590 <__aeabi_dmul>
 8010d14:	ec41 0b10 	vmov	d0, r0, r1
 8010d18:	2022      	movs	r0, #34	@ 0x22
 8010d1a:	b003      	add	sp, #12
 8010d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d20:	f7ff bfd8 	b.w	8010cd4 <with_errno>
 8010d24:	4602      	mov	r2, r0
 8010d26:	460b      	mov	r3, r1
 8010d28:	e7ee      	b.n	8010d08 <xflow+0x10>
 8010d2a:	0000      	movs	r0, r0
 8010d2c:	0000      	movs	r0, r0
	...

08010d30 <__math_uflow>:
 8010d30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d38 <__math_uflow+0x8>
 8010d34:	f7ff bfe0 	b.w	8010cf8 <xflow>
 8010d38:	00000000 	.word	0x00000000
 8010d3c:	10000000 	.word	0x10000000

08010d40 <__math_oflow>:
 8010d40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010d48 <__math_oflow+0x8>
 8010d44:	f7ff bfd8 	b.w	8010cf8 <xflow>
 8010d48:	00000000 	.word	0x00000000
 8010d4c:	70000000 	.word	0x70000000

08010d50 <scalbnf>:
 8010d50:	ee10 3a10 	vmov	r3, s0
 8010d54:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010d58:	d02b      	beq.n	8010db2 <scalbnf+0x62>
 8010d5a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010d5e:	d302      	bcc.n	8010d66 <scalbnf+0x16>
 8010d60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010d64:	4770      	bx	lr
 8010d66:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010d6a:	d123      	bne.n	8010db4 <scalbnf+0x64>
 8010d6c:	4b24      	ldr	r3, [pc, #144]	@ (8010e00 <scalbnf+0xb0>)
 8010d6e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010e04 <scalbnf+0xb4>
 8010d72:	4298      	cmp	r0, r3
 8010d74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010d78:	db17      	blt.n	8010daa <scalbnf+0x5a>
 8010d7a:	ee10 3a10 	vmov	r3, s0
 8010d7e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d82:	3a19      	subs	r2, #25
 8010d84:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010d88:	4288      	cmp	r0, r1
 8010d8a:	dd15      	ble.n	8010db8 <scalbnf+0x68>
 8010d8c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010e08 <scalbnf+0xb8>
 8010d90:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010e0c <scalbnf+0xbc>
 8010d94:	ee10 3a10 	vmov	r3, s0
 8010d98:	eeb0 7a67 	vmov.f32	s14, s15
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	bfb8      	it	lt
 8010da0:	eef0 7a66 	vmovlt.f32	s15, s13
 8010da4:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010da8:	4770      	bx	lr
 8010daa:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010e10 <scalbnf+0xc0>
 8010dae:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010db2:	4770      	bx	lr
 8010db4:	0dd2      	lsrs	r2, r2, #23
 8010db6:	e7e5      	b.n	8010d84 <scalbnf+0x34>
 8010db8:	4410      	add	r0, r2
 8010dba:	28fe      	cmp	r0, #254	@ 0xfe
 8010dbc:	dce6      	bgt.n	8010d8c <scalbnf+0x3c>
 8010dbe:	2800      	cmp	r0, #0
 8010dc0:	dd06      	ble.n	8010dd0 <scalbnf+0x80>
 8010dc2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010dc6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010dca:	ee00 3a10 	vmov	s0, r3
 8010dce:	4770      	bx	lr
 8010dd0:	f110 0f16 	cmn.w	r0, #22
 8010dd4:	da09      	bge.n	8010dea <scalbnf+0x9a>
 8010dd6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010e10 <scalbnf+0xc0>
 8010dda:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010e14 <scalbnf+0xc4>
 8010dde:	ee10 3a10 	vmov	r3, s0
 8010de2:	eeb0 7a67 	vmov.f32	s14, s15
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	e7d9      	b.n	8010d9e <scalbnf+0x4e>
 8010dea:	3019      	adds	r0, #25
 8010dec:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010df0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010df4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010e18 <scalbnf+0xc8>
 8010df8:	ee07 3a90 	vmov	s15, r3
 8010dfc:	e7d7      	b.n	8010dae <scalbnf+0x5e>
 8010dfe:	bf00      	nop
 8010e00:	ffff3cb0 	.word	0xffff3cb0
 8010e04:	4c000000 	.word	0x4c000000
 8010e08:	7149f2ca 	.word	0x7149f2ca
 8010e0c:	f149f2ca 	.word	0xf149f2ca
 8010e10:	0da24260 	.word	0x0da24260
 8010e14:	8da24260 	.word	0x8da24260
 8010e18:	33000000 	.word	0x33000000

08010e1c <__kernel_rem_pio2f>:
 8010e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e20:	ed2d 8b04 	vpush	{d8-d9}
 8010e24:	b0d9      	sub	sp, #356	@ 0x164
 8010e26:	4690      	mov	r8, r2
 8010e28:	9001      	str	r0, [sp, #4]
 8010e2a:	4ab6      	ldr	r2, [pc, #728]	@ (8011104 <__kernel_rem_pio2f+0x2e8>)
 8010e2c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010e2e:	f118 0f04 	cmn.w	r8, #4
 8010e32:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010e36:	460f      	mov	r7, r1
 8010e38:	f103 3bff 	add.w	fp, r3, #4294967295
 8010e3c:	db26      	blt.n	8010e8c <__kernel_rem_pio2f+0x70>
 8010e3e:	f1b8 0203 	subs.w	r2, r8, #3
 8010e42:	bf48      	it	mi
 8010e44:	f108 0204 	addmi.w	r2, r8, #4
 8010e48:	10d2      	asrs	r2, r2, #3
 8010e4a:	1c55      	adds	r5, r2, #1
 8010e4c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e4e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011114 <__kernel_rem_pio2f+0x2f8>
 8010e52:	00e8      	lsls	r0, r5, #3
 8010e54:	eba2 060b 	sub.w	r6, r2, fp
 8010e58:	9002      	str	r0, [sp, #8]
 8010e5a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010e5e:	eb0a 0c0b 	add.w	ip, sl, fp
 8010e62:	ac1c      	add	r4, sp, #112	@ 0x70
 8010e64:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010e68:	2000      	movs	r0, #0
 8010e6a:	4560      	cmp	r0, ip
 8010e6c:	dd10      	ble.n	8010e90 <__kernel_rem_pio2f+0x74>
 8010e6e:	a91c      	add	r1, sp, #112	@ 0x70
 8010e70:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010e74:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010e78:	2600      	movs	r6, #0
 8010e7a:	4556      	cmp	r6, sl
 8010e7c:	dc24      	bgt.n	8010ec8 <__kernel_rem_pio2f+0xac>
 8010e7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010e82:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011114 <__kernel_rem_pio2f+0x2f8>
 8010e86:	4684      	mov	ip, r0
 8010e88:	2400      	movs	r4, #0
 8010e8a:	e016      	b.n	8010eba <__kernel_rem_pio2f+0x9e>
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	e7dc      	b.n	8010e4a <__kernel_rem_pio2f+0x2e>
 8010e90:	42c6      	cmn	r6, r0
 8010e92:	bf5d      	ittte	pl
 8010e94:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010e98:	ee07 1a90 	vmovpl	s15, r1
 8010e9c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010ea0:	eef0 7a47 	vmovmi.f32	s15, s14
 8010ea4:	ece4 7a01 	vstmia	r4!, {s15}
 8010ea8:	3001      	adds	r0, #1
 8010eaa:	e7de      	b.n	8010e6a <__kernel_rem_pio2f+0x4e>
 8010eac:	ecfe 6a01 	vldmia	lr!, {s13}
 8010eb0:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010eb4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010eb8:	3401      	adds	r4, #1
 8010eba:	455c      	cmp	r4, fp
 8010ebc:	ddf6      	ble.n	8010eac <__kernel_rem_pio2f+0x90>
 8010ebe:	ece9 7a01 	vstmia	r9!, {s15}
 8010ec2:	3601      	adds	r6, #1
 8010ec4:	3004      	adds	r0, #4
 8010ec6:	e7d8      	b.n	8010e7a <__kernel_rem_pio2f+0x5e>
 8010ec8:	a908      	add	r1, sp, #32
 8010eca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010ece:	9104      	str	r1, [sp, #16]
 8010ed0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010ed2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011110 <__kernel_rem_pio2f+0x2f4>
 8010ed6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801110c <__kernel_rem_pio2f+0x2f0>
 8010eda:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010ede:	9203      	str	r2, [sp, #12]
 8010ee0:	4654      	mov	r4, sl
 8010ee2:	00a2      	lsls	r2, r4, #2
 8010ee4:	9205      	str	r2, [sp, #20]
 8010ee6:	aa58      	add	r2, sp, #352	@ 0x160
 8010ee8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010eec:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010ef0:	a944      	add	r1, sp, #272	@ 0x110
 8010ef2:	aa08      	add	r2, sp, #32
 8010ef4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010ef8:	4694      	mov	ip, r2
 8010efa:	4626      	mov	r6, r4
 8010efc:	2e00      	cmp	r6, #0
 8010efe:	dc4c      	bgt.n	8010f9a <__kernel_rem_pio2f+0x17e>
 8010f00:	4628      	mov	r0, r5
 8010f02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010f06:	f7ff ff23 	bl	8010d50 <scalbnf>
 8010f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8010f0e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010f12:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010f16:	f000 f9e9 	bl	80112ec <floorf>
 8010f1a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010f1e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010f22:	2d00      	cmp	r5, #0
 8010f24:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010f28:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010f2c:	ee17 9a90 	vmov	r9, s15
 8010f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f34:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010f38:	dd41      	ble.n	8010fbe <__kernel_rem_pio2f+0x1a2>
 8010f3a:	f104 3cff 	add.w	ip, r4, #4294967295
 8010f3e:	a908      	add	r1, sp, #32
 8010f40:	f1c5 0e08 	rsb	lr, r5, #8
 8010f44:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010f48:	fa46 f00e 	asr.w	r0, r6, lr
 8010f4c:	4481      	add	r9, r0
 8010f4e:	fa00 f00e 	lsl.w	r0, r0, lr
 8010f52:	1a36      	subs	r6, r6, r0
 8010f54:	f1c5 0007 	rsb	r0, r5, #7
 8010f58:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010f5c:	4106      	asrs	r6, r0
 8010f5e:	2e00      	cmp	r6, #0
 8010f60:	dd3c      	ble.n	8010fdc <__kernel_rem_pio2f+0x1c0>
 8010f62:	f04f 0e00 	mov.w	lr, #0
 8010f66:	f109 0901 	add.w	r9, r9, #1
 8010f6a:	4670      	mov	r0, lr
 8010f6c:	4574      	cmp	r4, lr
 8010f6e:	dc68      	bgt.n	8011042 <__kernel_rem_pio2f+0x226>
 8010f70:	2d00      	cmp	r5, #0
 8010f72:	dd03      	ble.n	8010f7c <__kernel_rem_pio2f+0x160>
 8010f74:	2d01      	cmp	r5, #1
 8010f76:	d074      	beq.n	8011062 <__kernel_rem_pio2f+0x246>
 8010f78:	2d02      	cmp	r5, #2
 8010f7a:	d07d      	beq.n	8011078 <__kernel_rem_pio2f+0x25c>
 8010f7c:	2e02      	cmp	r6, #2
 8010f7e:	d12d      	bne.n	8010fdc <__kernel_rem_pio2f+0x1c0>
 8010f80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f84:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010f88:	b340      	cbz	r0, 8010fdc <__kernel_rem_pio2f+0x1c0>
 8010f8a:	4628      	mov	r0, r5
 8010f8c:	9306      	str	r3, [sp, #24]
 8010f8e:	f7ff fedf 	bl	8010d50 <scalbnf>
 8010f92:	9b06      	ldr	r3, [sp, #24]
 8010f94:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010f98:	e020      	b.n	8010fdc <__kernel_rem_pio2f+0x1c0>
 8010f9a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010f9e:	3e01      	subs	r6, #1
 8010fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010fa8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010fac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010fb0:	ecac 0a01 	vstmia	ip!, {s0}
 8010fb4:	ed30 0a01 	vldmdb	r0!, {s0}
 8010fb8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010fbc:	e79e      	b.n	8010efc <__kernel_rem_pio2f+0xe0>
 8010fbe:	d105      	bne.n	8010fcc <__kernel_rem_pio2f+0x1b0>
 8010fc0:	1e60      	subs	r0, r4, #1
 8010fc2:	a908      	add	r1, sp, #32
 8010fc4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010fc8:	11f6      	asrs	r6, r6, #7
 8010fca:	e7c8      	b.n	8010f5e <__kernel_rem_pio2f+0x142>
 8010fcc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010fd0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fd8:	da31      	bge.n	801103e <__kernel_rem_pio2f+0x222>
 8010fda:	2600      	movs	r6, #0
 8010fdc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	f040 8098 	bne.w	8011118 <__kernel_rem_pio2f+0x2fc>
 8010fe8:	1e60      	subs	r0, r4, #1
 8010fea:	2200      	movs	r2, #0
 8010fec:	4550      	cmp	r0, sl
 8010fee:	da4b      	bge.n	8011088 <__kernel_rem_pio2f+0x26c>
 8010ff0:	2a00      	cmp	r2, #0
 8010ff2:	d065      	beq.n	80110c0 <__kernel_rem_pio2f+0x2a4>
 8010ff4:	3c01      	subs	r4, #1
 8010ff6:	ab08      	add	r3, sp, #32
 8010ff8:	3d08      	subs	r5, #8
 8010ffa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d0f8      	beq.n	8010ff4 <__kernel_rem_pio2f+0x1d8>
 8011002:	4628      	mov	r0, r5
 8011004:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011008:	f7ff fea2 	bl	8010d50 <scalbnf>
 801100c:	1c63      	adds	r3, r4, #1
 801100e:	aa44      	add	r2, sp, #272	@ 0x110
 8011010:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011110 <__kernel_rem_pio2f+0x2f4>
 8011014:	0099      	lsls	r1, r3, #2
 8011016:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801101a:	4623      	mov	r3, r4
 801101c:	2b00      	cmp	r3, #0
 801101e:	f280 80a9 	bge.w	8011174 <__kernel_rem_pio2f+0x358>
 8011022:	4623      	mov	r3, r4
 8011024:	2b00      	cmp	r3, #0
 8011026:	f2c0 80c7 	blt.w	80111b8 <__kernel_rem_pio2f+0x39c>
 801102a:	aa44      	add	r2, sp, #272	@ 0x110
 801102c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8011030:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011108 <__kernel_rem_pio2f+0x2ec>
 8011034:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011114 <__kernel_rem_pio2f+0x2f8>
 8011038:	2000      	movs	r0, #0
 801103a:	1ae2      	subs	r2, r4, r3
 801103c:	e0b1      	b.n	80111a2 <__kernel_rem_pio2f+0x386>
 801103e:	2602      	movs	r6, #2
 8011040:	e78f      	b.n	8010f62 <__kernel_rem_pio2f+0x146>
 8011042:	f852 1b04 	ldr.w	r1, [r2], #4
 8011046:	b948      	cbnz	r0, 801105c <__kernel_rem_pio2f+0x240>
 8011048:	b121      	cbz	r1, 8011054 <__kernel_rem_pio2f+0x238>
 801104a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801104e:	f842 1c04 	str.w	r1, [r2, #-4]
 8011052:	2101      	movs	r1, #1
 8011054:	f10e 0e01 	add.w	lr, lr, #1
 8011058:	4608      	mov	r0, r1
 801105a:	e787      	b.n	8010f6c <__kernel_rem_pio2f+0x150>
 801105c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8011060:	e7f5      	b.n	801104e <__kernel_rem_pio2f+0x232>
 8011062:	f104 3cff 	add.w	ip, r4, #4294967295
 8011066:	aa08      	add	r2, sp, #32
 8011068:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801106c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011070:	a908      	add	r1, sp, #32
 8011072:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8011076:	e781      	b.n	8010f7c <__kernel_rem_pio2f+0x160>
 8011078:	f104 3cff 	add.w	ip, r4, #4294967295
 801107c:	aa08      	add	r2, sp, #32
 801107e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011082:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011086:	e7f3      	b.n	8011070 <__kernel_rem_pio2f+0x254>
 8011088:	a908      	add	r1, sp, #32
 801108a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801108e:	3801      	subs	r0, #1
 8011090:	430a      	orrs	r2, r1
 8011092:	e7ab      	b.n	8010fec <__kernel_rem_pio2f+0x1d0>
 8011094:	3201      	adds	r2, #1
 8011096:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801109a:	2e00      	cmp	r6, #0
 801109c:	d0fa      	beq.n	8011094 <__kernel_rem_pio2f+0x278>
 801109e:	9905      	ldr	r1, [sp, #20]
 80110a0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80110a4:	eb0d 0001 	add.w	r0, sp, r1
 80110a8:	18e6      	adds	r6, r4, r3
 80110aa:	a91c      	add	r1, sp, #112	@ 0x70
 80110ac:	f104 0c01 	add.w	ip, r4, #1
 80110b0:	384c      	subs	r0, #76	@ 0x4c
 80110b2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80110b6:	4422      	add	r2, r4
 80110b8:	4562      	cmp	r2, ip
 80110ba:	da04      	bge.n	80110c6 <__kernel_rem_pio2f+0x2aa>
 80110bc:	4614      	mov	r4, r2
 80110be:	e710      	b.n	8010ee2 <__kernel_rem_pio2f+0xc6>
 80110c0:	9804      	ldr	r0, [sp, #16]
 80110c2:	2201      	movs	r2, #1
 80110c4:	e7e7      	b.n	8011096 <__kernel_rem_pio2f+0x27a>
 80110c6:	9903      	ldr	r1, [sp, #12]
 80110c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80110cc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80110d0:	9105      	str	r1, [sp, #20]
 80110d2:	ee07 1a90 	vmov	s15, r1
 80110d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110da:	2400      	movs	r4, #0
 80110dc:	ece6 7a01 	vstmia	r6!, {s15}
 80110e0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011114 <__kernel_rem_pio2f+0x2f8>
 80110e4:	46b1      	mov	r9, r6
 80110e6:	455c      	cmp	r4, fp
 80110e8:	dd04      	ble.n	80110f4 <__kernel_rem_pio2f+0x2d8>
 80110ea:	ece0 7a01 	vstmia	r0!, {s15}
 80110ee:	f10c 0c01 	add.w	ip, ip, #1
 80110f2:	e7e1      	b.n	80110b8 <__kernel_rem_pio2f+0x29c>
 80110f4:	ecfe 6a01 	vldmia	lr!, {s13}
 80110f8:	ed39 7a01 	vldmdb	r9!, {s14}
 80110fc:	3401      	adds	r4, #1
 80110fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011102:	e7f0      	b.n	80110e6 <__kernel_rem_pio2f+0x2ca>
 8011104:	080117dc 	.word	0x080117dc
 8011108:	080117b0 	.word	0x080117b0
 801110c:	43800000 	.word	0x43800000
 8011110:	3b800000 	.word	0x3b800000
 8011114:	00000000 	.word	0x00000000
 8011118:	9b02      	ldr	r3, [sp, #8]
 801111a:	eeb0 0a48 	vmov.f32	s0, s16
 801111e:	eba3 0008 	sub.w	r0, r3, r8
 8011122:	f7ff fe15 	bl	8010d50 <scalbnf>
 8011126:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801110c <__kernel_rem_pio2f+0x2f0>
 801112a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801112e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011132:	db19      	blt.n	8011168 <__kernel_rem_pio2f+0x34c>
 8011134:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011110 <__kernel_rem_pio2f+0x2f4>
 8011138:	ee60 7a27 	vmul.f32	s15, s0, s15
 801113c:	aa08      	add	r2, sp, #32
 801113e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011142:	3508      	adds	r5, #8
 8011144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011148:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801114c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011150:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011154:	ee10 3a10 	vmov	r3, s0
 8011158:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801115c:	ee17 3a90 	vmov	r3, s15
 8011160:	3401      	adds	r4, #1
 8011162:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011166:	e74c      	b.n	8011002 <__kernel_rem_pio2f+0x1e6>
 8011168:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801116c:	aa08      	add	r2, sp, #32
 801116e:	ee10 3a10 	vmov	r3, s0
 8011172:	e7f6      	b.n	8011162 <__kernel_rem_pio2f+0x346>
 8011174:	a808      	add	r0, sp, #32
 8011176:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801117a:	9001      	str	r0, [sp, #4]
 801117c:	ee07 0a90 	vmov	s15, r0
 8011180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011184:	3b01      	subs	r3, #1
 8011186:	ee67 7a80 	vmul.f32	s15, s15, s0
 801118a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801118e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011192:	e743      	b.n	801101c <__kernel_rem_pio2f+0x200>
 8011194:	ecfc 6a01 	vldmia	ip!, {s13}
 8011198:	ecb5 7a01 	vldmia	r5!, {s14}
 801119c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80111a0:	3001      	adds	r0, #1
 80111a2:	4550      	cmp	r0, sl
 80111a4:	dc01      	bgt.n	80111aa <__kernel_rem_pio2f+0x38e>
 80111a6:	4290      	cmp	r0, r2
 80111a8:	ddf4      	ble.n	8011194 <__kernel_rem_pio2f+0x378>
 80111aa:	a858      	add	r0, sp, #352	@ 0x160
 80111ac:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80111b0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80111b4:	3b01      	subs	r3, #1
 80111b6:	e735      	b.n	8011024 <__kernel_rem_pio2f+0x208>
 80111b8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80111ba:	2b02      	cmp	r3, #2
 80111bc:	dc09      	bgt.n	80111d2 <__kernel_rem_pio2f+0x3b6>
 80111be:	2b00      	cmp	r3, #0
 80111c0:	dc27      	bgt.n	8011212 <__kernel_rem_pio2f+0x3f6>
 80111c2:	d040      	beq.n	8011246 <__kernel_rem_pio2f+0x42a>
 80111c4:	f009 0007 	and.w	r0, r9, #7
 80111c8:	b059      	add	sp, #356	@ 0x164
 80111ca:	ecbd 8b04 	vpop	{d8-d9}
 80111ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80111d4:	2b03      	cmp	r3, #3
 80111d6:	d1f5      	bne.n	80111c4 <__kernel_rem_pio2f+0x3a8>
 80111d8:	aa30      	add	r2, sp, #192	@ 0xc0
 80111da:	1f0b      	subs	r3, r1, #4
 80111dc:	4413      	add	r3, r2
 80111de:	461a      	mov	r2, r3
 80111e0:	4620      	mov	r0, r4
 80111e2:	2800      	cmp	r0, #0
 80111e4:	dc50      	bgt.n	8011288 <__kernel_rem_pio2f+0x46c>
 80111e6:	4622      	mov	r2, r4
 80111e8:	2a01      	cmp	r2, #1
 80111ea:	dc5d      	bgt.n	80112a8 <__kernel_rem_pio2f+0x48c>
 80111ec:	ab30      	add	r3, sp, #192	@ 0xc0
 80111ee:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011114 <__kernel_rem_pio2f+0x2f8>
 80111f2:	440b      	add	r3, r1
 80111f4:	2c01      	cmp	r4, #1
 80111f6:	dc67      	bgt.n	80112c8 <__kernel_rem_pio2f+0x4ac>
 80111f8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80111fc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011200:	2e00      	cmp	r6, #0
 8011202:	d167      	bne.n	80112d4 <__kernel_rem_pio2f+0x4b8>
 8011204:	edc7 6a00 	vstr	s13, [r7]
 8011208:	ed87 7a01 	vstr	s14, [r7, #4]
 801120c:	edc7 7a02 	vstr	s15, [r7, #8]
 8011210:	e7d8      	b.n	80111c4 <__kernel_rem_pio2f+0x3a8>
 8011212:	ab30      	add	r3, sp, #192	@ 0xc0
 8011214:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011114 <__kernel_rem_pio2f+0x2f8>
 8011218:	440b      	add	r3, r1
 801121a:	4622      	mov	r2, r4
 801121c:	2a00      	cmp	r2, #0
 801121e:	da24      	bge.n	801126a <__kernel_rem_pio2f+0x44e>
 8011220:	b34e      	cbz	r6, 8011276 <__kernel_rem_pio2f+0x45a>
 8011222:	eef1 7a47 	vneg.f32	s15, s14
 8011226:	edc7 7a00 	vstr	s15, [r7]
 801122a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801122e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011232:	aa31      	add	r2, sp, #196	@ 0xc4
 8011234:	2301      	movs	r3, #1
 8011236:	429c      	cmp	r4, r3
 8011238:	da20      	bge.n	801127c <__kernel_rem_pio2f+0x460>
 801123a:	b10e      	cbz	r6, 8011240 <__kernel_rem_pio2f+0x424>
 801123c:	eef1 7a67 	vneg.f32	s15, s15
 8011240:	edc7 7a01 	vstr	s15, [r7, #4]
 8011244:	e7be      	b.n	80111c4 <__kernel_rem_pio2f+0x3a8>
 8011246:	ab30      	add	r3, sp, #192	@ 0xc0
 8011248:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011114 <__kernel_rem_pio2f+0x2f8>
 801124c:	440b      	add	r3, r1
 801124e:	2c00      	cmp	r4, #0
 8011250:	da05      	bge.n	801125e <__kernel_rem_pio2f+0x442>
 8011252:	b10e      	cbz	r6, 8011258 <__kernel_rem_pio2f+0x43c>
 8011254:	eef1 7a67 	vneg.f32	s15, s15
 8011258:	edc7 7a00 	vstr	s15, [r7]
 801125c:	e7b2      	b.n	80111c4 <__kernel_rem_pio2f+0x3a8>
 801125e:	ed33 7a01 	vldmdb	r3!, {s14}
 8011262:	3c01      	subs	r4, #1
 8011264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011268:	e7f1      	b.n	801124e <__kernel_rem_pio2f+0x432>
 801126a:	ed73 7a01 	vldmdb	r3!, {s15}
 801126e:	3a01      	subs	r2, #1
 8011270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011274:	e7d2      	b.n	801121c <__kernel_rem_pio2f+0x400>
 8011276:	eef0 7a47 	vmov.f32	s15, s14
 801127a:	e7d4      	b.n	8011226 <__kernel_rem_pio2f+0x40a>
 801127c:	ecb2 7a01 	vldmia	r2!, {s14}
 8011280:	3301      	adds	r3, #1
 8011282:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011286:	e7d6      	b.n	8011236 <__kernel_rem_pio2f+0x41a>
 8011288:	ed72 7a01 	vldmdb	r2!, {s15}
 801128c:	edd2 6a01 	vldr	s13, [r2, #4]
 8011290:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011294:	3801      	subs	r0, #1
 8011296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801129a:	ed82 7a00 	vstr	s14, [r2]
 801129e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112a2:	edc2 7a01 	vstr	s15, [r2, #4]
 80112a6:	e79c      	b.n	80111e2 <__kernel_rem_pio2f+0x3c6>
 80112a8:	ed73 7a01 	vldmdb	r3!, {s15}
 80112ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80112b0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80112b4:	3a01      	subs	r2, #1
 80112b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80112ba:	ed83 7a00 	vstr	s14, [r3]
 80112be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112c2:	edc3 7a01 	vstr	s15, [r3, #4]
 80112c6:	e78f      	b.n	80111e8 <__kernel_rem_pio2f+0x3cc>
 80112c8:	ed33 7a01 	vldmdb	r3!, {s14}
 80112cc:	3c01      	subs	r4, #1
 80112ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80112d2:	e78f      	b.n	80111f4 <__kernel_rem_pio2f+0x3d8>
 80112d4:	eef1 6a66 	vneg.f32	s13, s13
 80112d8:	eeb1 7a47 	vneg.f32	s14, s14
 80112dc:	edc7 6a00 	vstr	s13, [r7]
 80112e0:	ed87 7a01 	vstr	s14, [r7, #4]
 80112e4:	eef1 7a67 	vneg.f32	s15, s15
 80112e8:	e790      	b.n	801120c <__kernel_rem_pio2f+0x3f0>
 80112ea:	bf00      	nop

080112ec <floorf>:
 80112ec:	ee10 3a10 	vmov	r3, s0
 80112f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80112f4:	3a7f      	subs	r2, #127	@ 0x7f
 80112f6:	2a16      	cmp	r2, #22
 80112f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80112fc:	dc2b      	bgt.n	8011356 <floorf+0x6a>
 80112fe:	2a00      	cmp	r2, #0
 8011300:	da12      	bge.n	8011328 <floorf+0x3c>
 8011302:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011368 <floorf+0x7c>
 8011306:	ee30 0a27 	vadd.f32	s0, s0, s15
 801130a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011312:	dd06      	ble.n	8011322 <floorf+0x36>
 8011314:	2b00      	cmp	r3, #0
 8011316:	da24      	bge.n	8011362 <floorf+0x76>
 8011318:	2900      	cmp	r1, #0
 801131a:	4b14      	ldr	r3, [pc, #80]	@ (801136c <floorf+0x80>)
 801131c:	bf08      	it	eq
 801131e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8011322:	ee00 3a10 	vmov	s0, r3
 8011326:	4770      	bx	lr
 8011328:	4911      	ldr	r1, [pc, #68]	@ (8011370 <floorf+0x84>)
 801132a:	4111      	asrs	r1, r2
 801132c:	420b      	tst	r3, r1
 801132e:	d0fa      	beq.n	8011326 <floorf+0x3a>
 8011330:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8011368 <floorf+0x7c>
 8011334:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011338:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011340:	ddef      	ble.n	8011322 <floorf+0x36>
 8011342:	2b00      	cmp	r3, #0
 8011344:	bfbe      	ittt	lt
 8011346:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801134a:	fa40 f202 	asrlt.w	r2, r0, r2
 801134e:	189b      	addlt	r3, r3, r2
 8011350:	ea23 0301 	bic.w	r3, r3, r1
 8011354:	e7e5      	b.n	8011322 <floorf+0x36>
 8011356:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801135a:	d3e4      	bcc.n	8011326 <floorf+0x3a>
 801135c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011360:	4770      	bx	lr
 8011362:	2300      	movs	r3, #0
 8011364:	e7dd      	b.n	8011322 <floorf+0x36>
 8011366:	bf00      	nop
 8011368:	7149f2ca 	.word	0x7149f2ca
 801136c:	bf800000 	.word	0xbf800000
 8011370:	007fffff 	.word	0x007fffff

08011374 <_init>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	bf00      	nop
 8011378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801137a:	bc08      	pop	{r3}
 801137c:	469e      	mov	lr, r3
 801137e:	4770      	bx	lr

08011380 <_fini>:
 8011380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011382:	bf00      	nop
 8011384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011386:	bc08      	pop	{r3}
 8011388:	469e      	mov	lr, r3
 801138a:	4770      	bx	lr
