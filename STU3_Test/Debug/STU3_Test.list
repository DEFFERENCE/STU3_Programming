
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800818c  0800818c  0000918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081cc  080081cc  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080081cc  080081cc  000091cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d4  080081d4  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d4  080081d4  000091d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081d8  080081d8  000091d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080081dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000014  080081f0  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  080081f0  0000a7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b746  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f58  00000000  00000000  0002578a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001760  00000000  00000000  000286e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000124f  00000000  00000000  00029e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a8c  00000000  00000000  0002b097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a76e  00000000  00000000  0002db23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115839  00000000  00000000  00048291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015daca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  0015db10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001640b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008174 	.word	0x08008174

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08008174 	.word	0x08008174

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <PS2_ReadData>:
uint8_t Position_Revolute[10];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af02      	add	r7, sp, #8
	HAL_Delay(1);
 800054a:	2001      	movs	r0, #1
 800054c:	f001 faf6 	bl	8001b3c <HAL_Delay>
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000556:	4814      	ldr	r0, [pc, #80]	@ (80005a8 <PS2_ReadData+0x64>)
 8000558:	f003 f91e 	bl	8003798 <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	e012      	b.n	8000588 <PS2_ReadData+0x44>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a11      	ldr	r2, [pc, #68]	@ (80005ac <PS2_ReadData+0x68>)
 8000566:	1899      	adds	r1, r3, r2
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a11      	ldr	r2, [pc, #68]	@ (80005b0 <PS2_ReadData+0x6c>)
 800056c:	441a      	add	r2, r3
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	480f      	ldr	r0, [pc, #60]	@ (80005b4 <PS2_ReadData+0x70>)
 8000578:	f004 fa25 	bl	80049c6 <HAL_SPI_TransmitReceive>
		HAL_Delay(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f001 fadd 	bl	8001b3c <HAL_Delay>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3301      	adds	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b07      	cmp	r3, #7
 800058c:	dde9      	ble.n	8000562 <PS2_ReadData+0x1e>
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000594:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <PS2_ReadData+0x64>)
 8000596:	f003 f8ff 	bl	8003798 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800059a:	2005      	movs	r0, #5
 800059c:	f001 face 	bl	8001b3c <HAL_Delay>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	48000800 	.word	0x48000800
 80005ac:	20000000 	.word	0x20000000
 80005b0:	20000030 	.word	0x20000030
 80005b4:	200000a4 	.word	0x200000a4

080005b8 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <PS2_ButtonCircle+0x20>)
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	f003 0320 	and.w	r3, r3, #32
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	bf0c      	ite	eq
 80005c8:	2301      	moveq	r3, #1
 80005ca:	2300      	movne	r3, #0
 80005cc:	b2db      	uxtb	r3, r3
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	20000030 	.word	0x20000030

080005dc <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 80005e0:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <PS2_ButtonSquare+0x1c>)
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	43db      	mvns	r3, r3
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	09db      	lsrs	r3, r3, #7
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	20000030 	.word	0x20000030

080005fc <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 8000600:	4b06      	ldr	r3, [pc, #24]	@ (800061c <PS2_ButtonTriangle+0x20>)
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	f003 0310 	and.w	r3, r3, #16
 8000608:	2b00      	cmp	r3, #0
 800060a:	bf0c      	ite	eq
 800060c:	2301      	moveq	r3, #1
 800060e:	2300      	movne	r3, #0
 8000610:	b2db      	uxtb	r3, r3
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	20000030 	.word	0x20000030

08000620 <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <PS2_ButtonCross+0x20>)
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800062c:	2b00      	cmp	r3, #0
 800062e:	bf0c      	ite	eq
 8000630:	2301      	moveq	r3, #1
 8000632:	2300      	movne	r3, #0
 8000634:	b2db      	uxtb	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	20000030 	.word	0x20000030

08000644 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <PS2_ButtonR1+0x20>)
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	2b00      	cmp	r3, #0
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
}
 800065a:	4618      	mov	r0, r3
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	20000030 	.word	0x20000030

08000668 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <PS2_ButtonR2+0x20>)
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	2b00      	cmp	r3, #0
 8000676:	bf0c      	ite	eq
 8000678:	2301      	moveq	r3, #1
 800067a:	2300      	movne	r3, #0
 800067c:	b2db      	uxtb	r3, r3
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	20000030 	.word	0x20000030

0800068c <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <PS2_ButtonSelect+0x20>)
 8000692:	78db      	ldrb	r3, [r3, #3]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	2b00      	cmp	r3, #0
 800069a:	bf0c      	ite	eq
 800069c:	2301      	moveq	r3, #1
 800069e:	2300      	movne	r3, #0
 80006a0:	b2db      	uxtb	r3, r3
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20000030 	.word	0x20000030

080006b0 <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <PS2_ButtonStart+0x20>)
 80006b6:	78db      	ldrb	r3, [r3, #3]
 80006b8:	f003 0308 	and.w	r3, r3, #8
 80006bc:	2b00      	cmp	r3, #0
 80006be:	bf0c      	ite	eq
 80006c0:	2301      	moveq	r3, #1
 80006c2:	2300      	movne	r3, #0
 80006c4:	b2db      	uxtb	r3, r3
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000030 	.word	0x20000030

080006d4 <PS2_ButtonL1>:

uint8_t PS2_ButtonL1() {
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <PS2_ButtonL1+0x20>)
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf0c      	ite	eq
 80006e4:	2301      	moveq	r3, #1
 80006e6:	2300      	movne	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	20000030 	.word	0x20000030

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fc:	f001 f9ad 	bl	8001a5a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000700:	f000 f868 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000704:	f000 fd1c 	bl	8001140 <MX_GPIO_Init>
  MX_DMA_Init();
 8000708:	f000 fcf0 	bl	80010ec <MX_DMA_Init>
  MX_TIM3_Init();
 800070c:	f000 fa08 	bl	8000b20 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000710:	f000 f8ac 	bl	800086c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000714:	f000 f962 	bl	80009dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000718:	f000 f9b4 	bl	8000a84 <MX_TIM2_Init>
  MX_TIM4_Init();
 800071c:	f000 fa56 	bl	8000bcc <MX_TIM4_Init>
  MX_TIM20_Init();
 8000720:	f000 fbda 	bl	8000ed8 <MX_TIM20_Init>
  MX_TIM8_Init();
 8000724:	f000 faa8 	bl	8000c78 <MX_TIM8_Init>
  MX_TIM16_Init();
 8000728:	f000 fb56 	bl	8000dd8 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800072c:	f000 fc90 	bl	8001050 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000730:	f000 f916 	bl	8000960 <MX_SPI1_Init>
//			if (current_segment < MAX_SEGMENTS - 1) {
//				current_segment++;
//			}
//		}

		PS2_ReadData();
 8000734:	f7ff ff06 	bl	8000544 <PS2_ReadData>
		Circle = PS2_ButtonCircle();
 8000738:	f7ff ff3e 	bl	80005b8 <PS2_ButtonCircle>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <main+0xb8>)
 8000742:	601a      	str	r2, [r3, #0]
		Square = PS2_ButtonSquare();
 8000744:	f7ff ff4a 	bl	80005dc <PS2_ButtonSquare>
 8000748:	4603      	mov	r3, r0
 800074a:	461a      	mov	r2, r3
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <main+0xbc>)
 800074e:	601a      	str	r2, [r3, #0]
		Triangle = PS2_ButtonTriangle();
 8000750:	f7ff ff54 	bl	80005fc <PS2_ButtonTriangle>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
 8000758:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <main+0xc0>)
 800075a:	601a      	str	r2, [r3, #0]
		Cross = PS2_ButtonCross();
 800075c:	f7ff ff60 	bl	8000620 <PS2_ButtonCross>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <main+0xc4>)
 8000766:	601a      	str	r2, [r3, #0]
		R1 = PS2_ButtonR1();
 8000768:	f7ff ff6c 	bl	8000644 <PS2_ButtonR1>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <main+0xc8>)
 8000772:	601a      	str	r2, [r3, #0]
		R2 = PS2_ButtonR2();
 8000774:	f7ff ff78 	bl	8000668 <PS2_ButtonR2>
 8000778:	4603      	mov	r3, r0
 800077a:	461a      	mov	r2, r3
 800077c:	4b11      	ldr	r3, [pc, #68]	@ (80007c4 <main+0xcc>)
 800077e:	601a      	str	r2, [r3, #0]
		Select = PS2_ButtonSelect();
 8000780:	f7ff ff84 	bl	800068c <PS2_ButtonSelect>
 8000784:	4603      	mov	r3, r0
 8000786:	461a      	mov	r2, r3
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <main+0xd0>)
 800078a:	601a      	str	r2, [r3, #0]
		Start = PS2_ButtonStart();
 800078c:	f7ff ff90 	bl	80006b0 <PS2_ButtonStart>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
 8000794:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <main+0xd4>)
 8000796:	601a      	str	r2, [r3, #0]
		L1 = PS2_ButtonL1();
 8000798:	f7ff ff9c 	bl	80006d4 <PS2_ButtonL1>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <main+0xd8>)
 80007a2:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 80007a4:	2064      	movs	r0, #100	@ 0x64
 80007a6:	f001 f9c9 	bl	8001b3c <HAL_Delay>
		PS2_ReadData();
 80007aa:	bf00      	nop
 80007ac:	e7c2      	b.n	8000734 <main+0x3c>
 80007ae:	bf00      	nop
 80007b0:	200007c8 	.word	0x200007c8
 80007b4:	200007cc 	.word	0x200007cc
 80007b8:	200007d0 	.word	0x200007d0
 80007bc:	200007d4 	.word	0x200007d4
 80007c0:	200007d8 	.word	0x200007d8
 80007c4:	200007dc 	.word	0x200007dc
 80007c8:	200007e0 	.word	0x200007e0
 80007cc:	200007e4 	.word	0x200007e4
 80007d0:	200007e8 	.word	0x200007e8

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	@ 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	2238      	movs	r2, #56	@ 0x38
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f007 fc9a 	bl	800811c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f003 f80a 	bl	8003810 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000806:	2340      	movs	r3, #64	@ 0x40
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080a:	2302      	movs	r3, #2
 800080c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800080e:	2302      	movs	r3, #2
 8000810:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000812:	2304      	movs	r3, #4
 8000814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000816:	2355      	movs	r3, #85	@ 0x55
 8000818:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081a:	2302      	movs	r3, #2
 800081c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000822:	2302      	movs	r3, #2
 8000824:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0318 	add.w	r3, r7, #24
 800082a:	4618      	mov	r0, r3
 800082c:	f003 f8a4 	bl	8003978 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000836:	f000 fd3b 	bl	80012b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2303      	movs	r3, #3
 8000840:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2104      	movs	r1, #4
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fba2 	bl	8003f9c <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800085e:	f000 fd27 	bl	80012b0 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	@ 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2220      	movs	r2, #32
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f007 fc49 	bl	800811c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800088a:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <MX_ADC1_Init+0xe8>)
 800088c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000890:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000892:	4b30      	ldr	r3, [pc, #192]	@ (8000954 <MX_ADC1_Init+0xe8>)
 8000894:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000898:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800089a:	4b2e      	ldr	r3, [pc, #184]	@ (8000954 <MX_ADC1_Init+0xe8>)
 800089c:	2200      	movs	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ac:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b2:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008b4:	2204      	movs	r2, #4
 80008b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008be:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008c4:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008ca:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008de:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	4817      	ldr	r0, [pc, #92]	@ (8000954 <MX_ADC1_Init+0xe8>)
 80008f6:	f001 fb19 	bl	8001f2c <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000900:	f000 fcd6 	bl	80012b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000908:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4811      	ldr	r0, [pc, #68]	@ (8000954 <MX_ADC1_Init+0xe8>)
 8000910:	f002 f92e 	bl	8002b70 <HAL_ADCEx_MultiModeConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800091a:	f000 fcc9 	bl	80012b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_ADC1_Init+0xec>)
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2306      	movs	r3, #6
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <MX_ADC1_Init+0xf0>)
 800092c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092e:	2304      	movs	r3, #4
 8000930:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	@ (8000954 <MX_ADC1_Init+0xe8>)
 800093c:	f001 fcb2 	bl	80022a4 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000946:	f000 fcb3 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3730      	adds	r7, #48	@ 0x30
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000038 	.word	0x20000038
 8000958:	04300002 	.word	0x04300002
 800095c:	407f0000 	.word	0x407f0000

08000960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	@ (80009d8 <MX_SPI1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800096c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800097a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800097e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000982:	2202      	movs	r2, #2
 8000984:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098c:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800098e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000992:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI1_Init+0x74>)
 8000996:	2238      	movs	r2, #56	@ 0x38
 8000998:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_SPI1_Init+0x74>)
 800099c:	2280      	movs	r2, #128	@ 0x80
 800099e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <MX_SPI1_Init+0x74>)
 80009c0:	f003 ff56 	bl	8004870 <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 fc71 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200000a4 	.word	0x200000a4
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009fa:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 80009fc:	4a20      	ldr	r2, [pc, #128]	@ (8000a80 <MX_TIM1_Init+0xa4>)
 80009fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a0e:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8000a12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a26:	4815      	ldr	r0, [pc, #84]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a28:	f004 fb50 	bl	80050cc <HAL_TIM_Base_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000a32:	f000 fc3d 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480e      	ldr	r0, [pc, #56]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a44:	f005 f8a6 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000a4e:	f000 fc2f 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_TIM1_Init+0xa0>)
 8000a64:	f005 ff00 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a6e:	f000 fc1f 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000108 	.word	0x20000108
 8000a80:	40012c00 	.word	0x40012c00

08000a84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abe:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aca:	4814      	ldr	r0, [pc, #80]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000acc:	f004 fafe 	bl	80050cc <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ad6:	f000 fbeb 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000ae8:	f005 f854 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000af2:	f000 fbdd 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	@ (8000b1c <MX_TIM2_Init+0x98>)
 8000b04:	f005 feb0 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b0e:	f000 fbcf 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001d4 	.word	0x200001d4

08000b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	@ 0x30
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	2224      	movs	r2, #36	@ 0x24
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f007 faf4 	bl	800811c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000b40:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <MX_TIM3_Init+0xa8>)
 8000b42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000b50:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000b52:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000b56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b64:	2303      	movs	r3, #3
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000b90:	f004 fc44 	bl	800541c <HAL_TIM_Encoder_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b9a:	f000 fb89 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4806      	ldr	r0, [pc, #24]	@ (8000bc4 <MX_TIM3_Init+0xa4>)
 8000bac:	f005 fe5c 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000bb6:	f000 fb7b 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	3730      	adds	r7, #48	@ 0x30
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200002a0 	.word	0x200002a0
 8000bc8:	40000400 	.word	0x40000400

08000bcc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08c      	sub	sp, #48	@ 0x30
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2224      	movs	r2, #36	@ 0x24
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f007 fa9e 	bl	800811c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	463b      	mov	r3, r7
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000bec:	4a21      	ldr	r2, [pc, #132]	@ (8000c74 <MX_TIM4_Init+0xa8>)
 8000bee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8000bfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000bfe:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 8000c02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c10:	2303      	movs	r3, #3
 8000c12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000c3c:	f004 fbee 	bl	800541c <HAL_TIM_Encoder_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c46:	f000 fb33 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <MX_TIM4_Init+0xa4>)
 8000c58:	f005 fe06 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c62:	f000 fb25 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	3730      	adds	r7, #48	@ 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000036c 	.word	0x2000036c
 8000c74:	40000800 	.word	0x40000800

08000c78 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09c      	sub	sp, #112	@ 0x70
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c98:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
 8000ca8:	615a      	str	r2, [r3, #20]
 8000caa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2234      	movs	r2, #52	@ 0x34
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 fa32 	bl	800811c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000cb8:	4b45      	ldr	r3, [pc, #276]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000cba:	4a46      	ldr	r2, [pc, #280]	@ (8000dd4 <MX_TIM8_Init+0x15c>)
 8000cbc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000cbe:	4b44      	ldr	r3, [pc, #272]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc4:	4b42      	ldr	r3, [pc, #264]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000cca:	4b41      	ldr	r3, [pc, #260]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000ccc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cd0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cde:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ce4:	483a      	ldr	r0, [pc, #232]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000ce6:	f004 f9f1 	bl	80050cc <HAL_TIM_Base_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000cf0:	f000 fade 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000cfa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4833      	ldr	r0, [pc, #204]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000d02:	f004 ff47 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000d0c:	f000 fad0 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000d10:	482f      	ldr	r0, [pc, #188]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000d12:	f004 faad 	bl	8005270 <HAL_TIM_PWM_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000d1c:	f000 fac8 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d20:	2300      	movs	r3, #0
 8000d22:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000d2c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d30:	4619      	mov	r1, r3
 8000d32:	4827      	ldr	r0, [pc, #156]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000d34:	f005 fd98 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000d3e:	f000 fab7 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d42:	2360      	movs	r3, #96	@ 0x60
 8000d44:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d62:	220c      	movs	r2, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	481a      	ldr	r0, [pc, #104]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000d68:	f004 fe00 	bl	800596c <HAL_TIM_PWM_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000d72:	f000 fa9d 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000db4:	f005 fdee 	bl	8006994 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8000dbe:	f000 fa77 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000dc2:	4803      	ldr	r0, [pc, #12]	@ (8000dd0 <MX_TIM8_Init+0x158>)
 8000dc4:	f000 fc86 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3770      	adds	r7, #112	@ 0x70
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000438 	.word	0x20000438
 8000dd4:	40013400 	.word	0x40013400

08000dd8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	@ 0x50
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2234      	movs	r2, #52	@ 0x34
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f007 f98f 	bl	800811c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000dfe:	4b34      	ldr	r3, [pc, #208]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e00:	4a34      	ldr	r2, [pc, #208]	@ (8000ed4 <MX_TIM16_Init+0xfc>)
 8000e02:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000e04:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e06:	22a9      	movs	r2, #169	@ 0xa9
 8000e08:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8000e10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e12:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8000e16:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e2a:	4829      	ldr	r0, [pc, #164]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e2c:	f004 f94e 	bl	80050cc <HAL_TIM_Base_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000e36:	f000 fa3b 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000e3a:	4825      	ldr	r0, [pc, #148]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e3c:	f004 f9aa 	bl	8005194 <HAL_TIM_OC_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000e46:	f000 fa33 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000e4a:	2108      	movs	r1, #8
 8000e4c:	4820      	ldr	r0, [pc, #128]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e4e:	f004 fa7d 	bl	800534c <HAL_TIM_OnePulse_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000e58:	f000 fa2a 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000e5c:	2310      	movs	r3, #16
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8000e60:	f240 5399 	movw	r3, #1433	@ 0x599
 8000e64:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	4813      	ldr	r0, [pc, #76]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000e84:	f004 fcf8 	bl	8005878 <HAL_TIM_OC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8000e8e:	f000 fa0f 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_TIM16_Init+0xf8>)
 8000eba:	f005 fd6b 	bl	8006994 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8000ec4:	f000 f9f4 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3750      	adds	r7, #80	@ 0x50
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000504 	.word	0x20000504
 8000ed4:	40014400 	.word	0x40014400

08000ed8 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09c      	sub	sp, #112	@ 0x70
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	2234      	movs	r2, #52	@ 0x34
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f007 f902 	bl	800811c <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8000f18:	4b4b      	ldr	r3, [pc, #300]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f1a:	4a4c      	ldr	r2, [pc, #304]	@ (800104c <MX_TIM20_Init+0x174>)
 8000f1c:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f24:	4b48      	ldr	r3, [pc, #288]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8000f2a:	4b47      	ldr	r3, [pc, #284]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f30:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f32:	4b45      	ldr	r3, [pc, #276]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8000f38:	4b43      	ldr	r3, [pc, #268]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3e:	4b42      	ldr	r3, [pc, #264]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8000f44:	4840      	ldr	r0, [pc, #256]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f46:	f004 f8c1 	bl	80050cc <HAL_TIM_Base_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8000f50:	f000 f9ae 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8000f5a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4839      	ldr	r0, [pc, #228]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f62:	f004 fe17 	bl	8005b94 <HAL_TIM_ConfigClockSource>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8000f6c:	f000 f9a0 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8000f70:	4835      	ldr	r0, [pc, #212]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f72:	f004 f97d 	bl	8005270 <HAL_TIM_PWM_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8000f7c:	f000 f998 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f84:	2300      	movs	r3, #0
 8000f86:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8000f8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f90:	4619      	mov	r1, r3
 8000f92:	482d      	ldr	r0, [pc, #180]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000f94:	f005 fc68 	bl	8006868 <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8000f9e:	f000 f987 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa2:	2360      	movs	r3, #96	@ 0x60
 8000fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000faa:	2300      	movs	r3, #0
 8000fac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4820      	ldr	r0, [pc, #128]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000fc8:	f004 fcd0 	bl	800596c <HAL_TIM_PWM_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8000fd2:	f000 f96d 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fda:	2208      	movs	r2, #8
 8000fdc:	4619      	mov	r1, r3
 8000fde:	481a      	ldr	r0, [pc, #104]	@ (8001048 <MX_TIM20_Init+0x170>)
 8000fe0:	f004 fcc4 	bl	800596c <HAL_TIM_PWM_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8000fea:	f000 f961 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001002:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001006:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001018:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4619      	mov	r1, r3
 800102a:	4807      	ldr	r0, [pc, #28]	@ (8001048 <MX_TIM20_Init+0x170>)
 800102c:	f005 fcb2 	bl	8006994 <HAL_TIMEx_ConfigBreakDeadTime>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8001036:	f000 f93b 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <MX_TIM20_Init+0x170>)
 800103c:	f000 fb4a 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 8001040:	bf00      	nop
 8001042:	3770      	adds	r7, #112	@ 0x70
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200005d0 	.word	0x200005d0
 800104c:	40015000 	.word	0x40015000

08001050 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 8001056:	4a24      	ldr	r2, [pc, #144]	@ (80010e8 <MX_USART2_UART_Init+0x98>)
 8001058:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 800105c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001060:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 8001064:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001068:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 8001072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 800107a:	220c      	movs	r2, #12
 800107c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109c:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 800109e:	f005 fd5d 	bl	8006b5c <HAL_UART_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80010a8:	f000 f902 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ac:	2100      	movs	r1, #0
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 80010b0:	f006 ff69 	bl	8007f86 <HAL_UARTEx_SetTxFifoThreshold>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80010ba:	f000 f8f9 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 80010c2:	f006 ff9e 	bl	8008002 <HAL_UARTEx_SetRxFifoThreshold>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80010cc:	f000 f8f0 	bl	80012b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010d0:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <MX_USART2_UART_Init+0x94>)
 80010d2:	f006 ff1f 	bl	8007f14 <HAL_UARTEx_DisableFifoMode>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80010dc:	f000 f8e8 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	2000069c 	.word	0x2000069c
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <MX_DMA_Init+0x50>)
 80010f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <MX_DMA_Init+0x50>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80010fe:	4b0f      	ldr	r3, [pc, #60]	@ (800113c <MX_DMA_Init+0x50>)
 8001100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800110a:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <MX_DMA_Init+0x50>)
 800110c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110e:	4a0b      	ldr	r2, [pc, #44]	@ (800113c <MX_DMA_Init+0x50>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6493      	str	r3, [r2, #72]	@ 0x48
 8001116:	4b09      	ldr	r3, [pc, #36]	@ (800113c <MX_DMA_Init+0x50>)
 8001118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	200b      	movs	r0, #11
 8001128:	f001 ff05 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800112c:	200b      	movs	r0, #11
 800112e:	f001 ff1c 	bl	8002f6a <HAL_NVIC_EnableIRQ>

}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40021000 	.word	0x40021000

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	@ 0x28
 8001144:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001156:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <MX_GPIO_Init+0x164>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800115a:	4a52      	ldr	r2, [pc, #328]	@ (80012a4 <MX_GPIO_Init+0x164>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001162:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <MX_GPIO_Init+0x164>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b4d      	ldr	r3, [pc, #308]	@ (80012a4 <MX_GPIO_Init+0x164>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	4a4c      	ldr	r2, [pc, #304]	@ (80012a4 <MX_GPIO_Init+0x164>)
 8001174:	f043 0320 	orr.w	r3, r3, #32
 8001178:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800117a:	4b4a      	ldr	r3, [pc, #296]	@ (80012a4 <MX_GPIO_Init+0x164>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	f003 0320 	and.w	r3, r3, #32
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <MX_GPIO_Init+0x164>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	4a46      	ldr	r2, [pc, #280]	@ (80012a4 <MX_GPIO_Init+0x164>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001192:	4b44      	ldr	r3, [pc, #272]	@ (80012a4 <MX_GPIO_Init+0x164>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	4b41      	ldr	r3, [pc, #260]	@ (80012a4 <MX_GPIO_Init+0x164>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	4a40      	ldr	r2, [pc, #256]	@ (80012a4 <MX_GPIO_Init+0x164>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011aa:	4b3e      	ldr	r3, [pc, #248]	@ (80012a4 <MX_GPIO_Init+0x164>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	607b      	str	r3, [r7, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f241 0102 	movw	r1, #4098	@ 0x1002
 80011bc:	483a      	ldr	r0, [pc, #232]	@ (80012a8 <MX_GPIO_Init+0x168>)
 80011be:	f002 faeb 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011c8:	4838      	ldr	r0, [pc, #224]	@ (80012ac <MX_GPIO_Init+0x16c>)
 80011ca:	f002 fae5 	bl	8003798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR_MD20A_24V_Pin DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin|DIR_MD20A_18V_Pin;
 80011ce:	f241 0302 	movw	r3, #4098	@ 0x1002
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4830      	ldr	r0, [pc, #192]	@ (80012a8 <MX_GPIO_Init+0x168>)
 80011e8:	f002 f954 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_Sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_Sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80011ec:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 80011f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4829      	ldr	r0, [pc, #164]	@ (80012a8 <MX_GPIO_Init+0x168>)
 8001204:	f002 f946 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_Prismatic2_Pin;
 8001208:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800120c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001212:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Limit_Switch_Prismatic2_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	4619      	mov	r1, r3
 800121e:	4822      	ldr	r0, [pc, #136]	@ (80012a8 <MX_GPIO_Init+0x168>)
 8001220:	f002 f938 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8001224:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123e:	f002 f929 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Attention_Pin;
 8001242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001246:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001248:	2301      	movs	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PS2_Attention_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	4814      	ldr	r0, [pc, #80]	@ (80012ac <MX_GPIO_Init+0x16c>)
 800125c:	f002 f91a 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8001260:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001264:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001266:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8001270:	f107 0314 	add.w	r3, r7, #20
 8001274:	4619      	mov	r1, r3
 8001276:	480d      	ldr	r0, [pc, #52]	@ (80012ac <MX_GPIO_Init+0x16c>)
 8001278:	f002 f90c 	bl	8003494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	2017      	movs	r0, #23
 8001282:	f001 fe58 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001286:	2017      	movs	r0, #23
 8001288:	f001 fe6f 	bl	8002f6a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2100      	movs	r1, #0
 8001290:	2028      	movs	r0, #40	@ 0x28
 8001292:	f001 fe50 	bl	8002f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001296:	2028      	movs	r0, #40	@ 0x28
 8001298:	f001 fe67 	bl	8002f6a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	@ 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <Error_Handler+0x8>

080012bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <HAL_MspInit+0x44>)
 80012c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_MspInit+0x44>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <HAL_MspInit+0x44>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_MspInit+0x44>)
 80012dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <HAL_MspInit+0x44>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_MspInit+0x44>)
 80012e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012f2:	f002 fb31 	bl	8003958 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09e      	sub	sp, #120	@ 0x78
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2254      	movs	r2, #84	@ 0x54
 8001322:	2100      	movs	r1, #0
 8001324:	4618      	mov	r0, r3
 8001326:	f006 fef9 	bl	800811c <memset>
  if(hadc->Instance==ADC1)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001332:	d134      	bne.n	800139e <HAL_ADC_MspInit+0x9a>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001338:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800133a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800133e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	4618      	mov	r0, r3
 8001346:	f003 f845 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001350:	f7ff ffae 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <HAL_ADC_MspInit+0xa4>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001358:	4a13      	ldr	r2, [pc, #76]	@ (80013a8 <HAL_ADC_MspInit+0xa4>)
 800135a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800135e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001360:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <HAL_ADC_MspInit+0xa4>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001364:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	@ (80013a8 <HAL_ADC_MspInit+0xa4>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001370:	4a0d      	ldr	r2, [pc, #52]	@ (80013a8 <HAL_ADC_MspInit+0xa4>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_ADC_MspInit+0xa4>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8001384:	2303      	movs	r3, #3
 8001386:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001388:	2303      	movs	r3, #3
 800138a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139a:	f002 f87b 	bl	8003494 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800139e:	bf00      	nop
 80013a0:	3778      	adds	r7, #120	@ 0x78
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40021000 	.word	0x40021000

080013ac <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a25      	ldr	r2, [pc, #148]	@ (8001460 <HAL_SPI_MspInit+0xb4>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d144      	bne.n	8001458 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ce:	4b25      	ldr	r3, [pc, #148]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013d2:	4a24      	ldr	r2, [pc, #144]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a18      	ldr	r2, [pc, #96]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <HAL_SPI_MspInit+0xb8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001416:	2320      	movs	r3, #32
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001426:	2305      	movs	r3, #5
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001434:	f002 f82e 	bl	8003494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001438:	2330      	movs	r3, #48	@ 0x30
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001448:	2305      	movs	r3, #5
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <HAL_SPI_MspInit+0xbc>)
 8001454:	f002 f81e 	bl	8003494 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	@ 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013000 	.word	0x40013000
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a39      	ldr	r2, [pc, #228]	@ (8001560 <HAL_TIM_Base_MspInit+0xf4>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d11c      	bne.n	80014b8 <HAL_TIM_Base_MspInit+0x4c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800147e:	4b39      	ldr	r3, [pc, #228]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	4a38      	ldr	r2, [pc, #224]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 8001484:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001488:	6613      	str	r3, [r2, #96]	@ 0x60
 800148a:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2018      	movs	r0, #24
 800149c:	f001 fd4b 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80014a0:	2018      	movs	r0, #24
 80014a2:	f001 fd62 	bl	8002f6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2019      	movs	r0, #25
 80014ac:	f001 fd43 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014b0:	2019      	movs	r0, #25
 80014b2:	f001 fd5a 	bl	8002f6a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 80014b6:	e04e      	b.n	8001556 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014c0:	d10c      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014c2:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a27      	ldr	r2, [pc, #156]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	61bb      	str	r3, [r7, #24]
 80014d8:	69bb      	ldr	r3, [r7, #24]
}
 80014da:	e03c      	b.n	8001556 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM8)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a21      	ldr	r2, [pc, #132]	@ (8001568 <HAL_TIM_Base_MspInit+0xfc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10c      	bne.n	8001500 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 80014e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 80014ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 80014f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	697b      	ldr	r3, [r7, #20]
}
 80014fe:	e02a      	b.n	8001556 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM16)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	@ (800156c <HAL_TIM_Base_MspInit+0x100>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d114      	bne.n	8001534 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150e:	4a15      	ldr	r2, [pc, #84]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	6613      	str	r3, [r2, #96]	@ 0x60
 8001516:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2019      	movs	r0, #25
 8001528:	f001 fd05 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800152c:	2019      	movs	r0, #25
 800152e:	f001 fd1c 	bl	8002f6a <HAL_NVIC_EnableIRQ>
}
 8001532:	e010      	b.n	8001556 <HAL_TIM_Base_MspInit+0xea>
  else if(htim_base->Instance==TIM20)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_TIM_Base_MspInit+0x104>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d10b      	bne.n	8001556 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM20_CLK_ENABLE();
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001542:	4a08      	ldr	r2, [pc, #32]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 8001544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001548:	6613      	str	r3, [r2, #96]	@ 0x60
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_TIM_Base_MspInit+0xf8>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40012c00 	.word	0x40012c00
 8001564:	40021000 	.word	0x40021000
 8001568:	40013400 	.word	0x40013400
 800156c:	40014400 	.word	0x40014400
 8001570:	40015000 	.word	0x40015000

08001574 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	@ 0x38
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a4b      	ldr	r2, [pc, #300]	@ (80016c0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d145      	bne.n	8001622 <HAL_TIM_Encoder_MspInit+0xae>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001596:	4b4b      	ldr	r3, [pc, #300]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159a:	4a4a      	ldr	r2, [pc, #296]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a2:	4b48      	ldr	r3, [pc, #288]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	623b      	str	r3, [r7, #32]
 80015ac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	4b45      	ldr	r3, [pc, #276]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b2:	4a44      	ldr	r2, [pc, #272]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ba:	4b42      	ldr	r3, [pc, #264]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	4b3f      	ldr	r3, [pc, #252]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	4a3e      	ldr	r2, [pc, #248]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d2:	4b3c      	ldr	r3, [pc, #240]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 80015de:	2340      	movs	r3, #64	@ 0x40
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015ee:	2302      	movs	r3, #2
 80015f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015fc:	f001 ff4a 	bl	8003494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001610:	2302      	movs	r3, #2
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	482b      	ldr	r0, [pc, #172]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x154>)
 800161c:	f001 ff3a 	bl	8003494 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001620:	e04a      	b.n	80016b8 <HAL_TIM_Encoder_MspInit+0x144>
  else if(htim_encoder->Instance==TIM4)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a29      	ldr	r2, [pc, #164]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x158>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d145      	bne.n	80016b8 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800162c:	4b25      	ldr	r3, [pc, #148]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	4a24      	ldr	r2, [pc, #144]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6593      	str	r3, [r2, #88]	@ 0x58
 8001638:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800163a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001648:	4a1e      	ldr	r2, [pc, #120]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001650:	4b1c      	ldr	r3, [pc, #112]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001668:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin;
 8001674:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001686:	230a      	movs	r3, #10
 8001688:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f001 fefe 	bl	8003494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Encoder_2B7_Pin;
 8001698:	2380      	movs	r3, #128	@ 0x80
 800169a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80016a8:	2302      	movs	r3, #2
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_2B7_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4807      	ldr	r0, [pc, #28]	@ (80016d0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80016b4:	f001 feee 	bl	8003494 <HAL_GPIO_Init>
}
 80016b8:	bf00      	nop
 80016ba:	3738      	adds	r7, #56	@ 0x38
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40021000 	.word	0x40021000
 80016c8:	48000800 	.word	0x48000800
 80016cc:	40000800 	.word	0x40000800
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a31      	ldr	r2, [pc, #196]	@ (80017b8 <HAL_TIM_MspPostInit+0xe4>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d11d      	bne.n	8001732 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	4b31      	ldr	r3, [pc, #196]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	4a30      	ldr	r2, [pc, #192]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 80016fc:	f043 0304 	orr.w	r3, r3, #4
 8001700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001702:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 800170e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001720:	2304      	movs	r3, #4
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4825      	ldr	r0, [pc, #148]	@ (80017c0 <HAL_TIM_MspPostInit+0xec>)
 800172c:	f001 feb2 	bl	8003494 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8001730:	e03d      	b.n	80017ae <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM20)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <HAL_TIM_MspPostInit+0xf0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d138      	bne.n	80017ae <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a1e      	ldr	r2, [pc, #120]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 8001742:	f043 0302 	orr.w	r3, r3, #2
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4a18      	ldr	r2, [pc, #96]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001760:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <HAL_TIM_MspPostInit+0xe8>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 800176c:	2304      	movs	r3, #4
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 800177c:	2303      	movs	r3, #3
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	4810      	ldr	r0, [pc, #64]	@ (80017c8 <HAL_TIM_MspPostInit+0xf4>)
 8001788:	f001 fe84 	bl	8003494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 800178c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800179e:	2306      	movs	r3, #6
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <HAL_TIM_MspPostInit+0xec>)
 80017aa:	f001 fe73 	bl	8003494 <HAL_GPIO_Init>
}
 80017ae:	bf00      	nop
 80017b0:	3728      	adds	r7, #40	@ 0x28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40013400 	.word	0x40013400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	48000800 	.word	0x48000800
 80017c4:	40015000 	.word	0x40015000
 80017c8:	48000400 	.word	0x48000400

080017cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b09e      	sub	sp, #120	@ 0x78
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	2254      	movs	r2, #84	@ 0x54
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 fc95 	bl	800811c <memset>
  if(huart->Instance==USART2)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a37      	ldr	r2, [pc, #220]	@ (80018d4 <HAL_UART_MspInit+0x108>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d167      	bne.n	80018cc <HAL_UART_MspInit+0x100>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4618      	mov	r0, r3
 800180a:	f002 fde3 	bl	80043d4 <HAL_RCCEx_PeriphCLKConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001814:	f7ff fd4c 	bl	80012b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001818:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <HAL_UART_MspInit+0x10c>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181c:	4a2e      	ldr	r2, [pc, #184]	@ (80018d8 <HAL_UART_MspInit+0x10c>)
 800181e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001822:	6593      	str	r3, [r2, #88]	@ 0x58
 8001824:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <HAL_UART_MspInit+0x10c>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001830:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <HAL_UART_MspInit+0x10c>)
 8001832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001834:	4a28      	ldr	r2, [pc, #160]	@ (80018d8 <HAL_UART_MspInit+0x10c>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800183c:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <HAL_UART_MspInit+0x10c>)
 800183e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001848:	230c      	movs	r3, #12
 800184a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001858:	2307      	movs	r3, #7
 800185a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001866:	f001 fe15 	bl	8003494 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800186a:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <HAL_UART_MspInit+0x110>)
 800186c:	4a1c      	ldr	r2, [pc, #112]	@ (80018e0 <HAL_UART_MspInit+0x114>)
 800186e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_UART_MspInit+0x110>)
 8001872:	221b      	movs	r2, #27
 8001874:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_UART_MspInit+0x110>)
 8001878:	2210      	movs	r2, #16
 800187a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_UART_MspInit+0x110>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001882:	4b16      	ldr	r3, [pc, #88]	@ (80018dc <HAL_UART_MspInit+0x110>)
 8001884:	2280      	movs	r2, #128	@ 0x80
 8001886:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <HAL_UART_MspInit+0x110>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188e:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <HAL_UART_MspInit+0x110>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001894:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <HAL_UART_MspInit+0x110>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_UART_MspInit+0x110>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80018a0:	480e      	ldr	r0, [pc, #56]	@ (80018dc <HAL_UART_MspInit+0x110>)
 80018a2:	f001 fb7d 	bl	8002fa0 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80018ac:	f7ff fd00 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_UART_MspInit+0x110>)
 80018b4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80018b6:	4a09      	ldr	r2, [pc, #36]	@ (80018dc <HAL_UART_MspInit+0x110>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2026      	movs	r0, #38	@ 0x26
 80018c2:	f001 fb38 	bl	8002f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c6:	2026      	movs	r0, #38	@ 0x26
 80018c8:	f001 fb4f 	bl	8002f6a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80018cc:	bf00      	nop
 80018ce:	3778      	adds	r7, #120	@ 0x78
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40004400 	.word	0x40004400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	20000768 	.word	0x20000768
 80018e0:	40020008 	.word	0x40020008

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018e8:	bf00      	nop
 80018ea:	e7fd      	b.n	80018e8 <NMI_Handler+0x4>

080018ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <HardFault_Handler+0x4>

080018f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <UsageFault_Handler+0x4>

0800190c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193a:	f000 f8e1 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <DMA1_Channel1_IRQHandler+0x10>)
 800194a:	f001 fc91 	bl	8003270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000768 	.word	0x20000768

08001958 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 800195c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001960:	f001 ff32 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}

08001968 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800196c:	4802      	ldr	r0, [pc, #8]	@ (8001978 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800196e:	f003 fe09 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000108 	.word	0x20000108

0800197c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001980:	4803      	ldr	r0, [pc, #12]	@ (8001990 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001982:	f003 fdff 	bl	8005584 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001986:	4803      	ldr	r0, [pc, #12]	@ (8001994 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001988:	f003 fdfc 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000108 	.word	0x20000108
 8001994:	20000504 	.word	0x20000504

08001998 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <USART2_IRQHandler+0x10>)
 800199e:	f005 f93d 	bl	8006c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000069c 	.word	0x2000069c

080019ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80019b0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019b4:	f001 ff08 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80019b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80019bc:	f001 ff04 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80019c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80019c4:	f001 ff00 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Sensor_Pin);
 80019c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80019cc:	f001 fefc 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 80019d0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80019d4:	f001 fef8 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 80019d8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80019dc:	f001 fef4 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a08:	480d      	ldr	r0, [pc, #52]	@ (8001a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a0c:	f7ff ffea 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <LoopForever+0xe>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <LoopForever+0x16>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f006 fb79 	bl	800812c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a3a:	f7fe fe5d 	bl	80006f8 <main>

08001a3e <LoopForever>:

LoopForever:
    b LoopForever
 8001a3e:	e7fe      	b.n	8001a3e <LoopForever>
  ldr   r0, =_estack
 8001a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a4c:	080081dc 	.word	0x080081dc
  ldr r2, =_sbss
 8001a50:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001a54:	200007f0 	.word	0x200007f0

08001a58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <ADC1_2_IRQHandler>

08001a5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f001 fa5b 	bl	8002f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f000 f80e 	bl	8001a8c <HAL_InitTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	71fb      	strb	r3, [r7, #7]
 8001a7a:	e001      	b.n	8001a80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a7c:	f7ff fc1e 	bl	80012bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a80:	79fb      	ldrb	r3, [r7, #7]

}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a98:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_InitTick+0x68>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d022      	beq.n	8001ae6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_InitTick+0x6c>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <HAL_InitTick+0x68>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001aac:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 fa66 	bl	8002f86 <HAL_SYSTICK_Config>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10f      	bne.n	8001ae0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b0f      	cmp	r3, #15
 8001ac4:	d809      	bhi.n	8001ada <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	f04f 30ff 	mov.w	r0, #4294967295
 8001ace:	f001 fa32 	bl	8002f36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_InitTick+0x70>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e007      	b.n	8001aea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	73fb      	strb	r3, [r7, #15]
 8001ade:	e004      	b.n	8001aea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000010 	.word	0x20000010
 8001af8:	20000008 	.word	0x20000008
 8001afc:	2000000c 	.word	0x2000000c

08001b00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_IncTick+0x1c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a03      	ldr	r2, [pc, #12]	@ (8001b1c <HAL_IncTick+0x1c>)
 8001b10:	6013      	str	r3, [r2, #0]
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	200007ec 	.word	0x200007ec
 8001b20:	20000010 	.word	0x20000010

08001b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return uwTick;
 8001b28:	4b03      	ldr	r3, [pc, #12]	@ (8001b38 <HAL_GetTick+0x14>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	200007ec 	.word	0x200007ec

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff ffee 	bl	8001b24 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d004      	beq.n	8001b60 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_Delay+0x40>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b60:	bf00      	nop
 8001b62:	f7ff ffdf 	bl	8001b24 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d8f7      	bhi.n	8001b62 <HAL_Delay+0x26>
  {
  }
}
 8001b72:	bf00      	nop
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000010 	.word	0x20000010

08001b80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	609a      	str	r2, [r3, #8]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b087      	sub	sp, #28
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3360      	adds	r3, #96	@ 0x60
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4413      	add	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <LL_ADC_SetOffset+0x44>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	4313      	orrs	r3, r2
 8001c18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c20:	bf00      	nop
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	03fff000 	.word	0x03fff000

08001c30 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3360      	adds	r3, #96	@ 0x60
 8001c3e:	461a      	mov	r2, r3
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3360      	adds	r3, #96	@ 0x60
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b087      	sub	sp, #28
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3360      	adds	r3, #96	@ 0x60
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001cbc:	bf00      	nop
 8001cbe:	371c      	adds	r7, #28
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	3360      	adds	r3, #96	@ 0x60
 8001cd8:	461a      	mov	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001cf2:	bf00      	nop
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	615a      	str	r2, [r3, #20]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	3330      	adds	r3, #48	@ 0x30
 8001d34:	461a      	mov	r2, r3
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	0a1b      	lsrs	r3, r3, #8
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	4413      	add	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	211f      	movs	r1, #31
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	0e9b      	lsrs	r3, r3, #26
 8001d5c:	f003 011f 	and.w	r1, r3, #31
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f003 031f 	and.w	r3, r3, #31
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d70:	bf00      	nop
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	3314      	adds	r3, #20
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	0e5b      	lsrs	r3, r3, #25
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	0d1b      	lsrs	r3, r3, #20
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	2107      	movs	r1, #7
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	401a      	ands	r2, r3
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	0d1b      	lsrs	r3, r3, #20
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	43db      	mvns	r3, r3
 8001dee:	401a      	ands	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0318 	and.w	r3, r3, #24
 8001df6:	4908      	ldr	r1, [pc, #32]	@ (8001e18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001df8:	40d9      	lsrs	r1, r3
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e02:	431a      	orrs	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	0007ffff 	.word	0x0007ffff

08001e1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001e2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6093      	str	r3, [r2, #8]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e54:	d101      	bne.n	8001e5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001e78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e7c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ea0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ea4:	d101      	bne.n	8001eaa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <LL_ADC_IsEnabled+0x18>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <LL_ADC_IsEnabled+0x1a>
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d101      	bne.n	8001ef6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d101      	bne.n	8001f1c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b089      	sub	sp, #36	@ 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1a9      	b.n	800229a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff f9d5 	bl	8001304 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff67 	bl	8001e40 <LL_ADC_IsDeepPowerDownEnabled>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d004      	beq.n	8001f82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff4d 	bl	8001e1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff82 	bl	8001e90 <LL_ADC_IsInternalRegulatorEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff ff66 	bl	8001e68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	@ (8002210 <HAL_ADC_Init+0x2e4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	4a9c      	ldr	r2, [pc, #624]	@ (8002214 <HAL_ADC_Init+0x2e8>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	3301      	adds	r3, #1
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff64 	bl	8001e90 <LL_ADC_IsInternalRegulatorEnabled>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fde:	f043 0201 	orr.w	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff75 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 8001ff4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f040 8142 	bne.w	8002288 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f040 813e 	bne.w	8002288 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002010:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002014:	f043 0202 	orr.w	r2, r3, #2
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff49 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d141      	bne.n	80020b0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002034:	d004      	beq.n	8002040 <HAL_ADC_Init+0x114>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a77      	ldr	r2, [pc, #476]	@ (8002218 <HAL_ADC_Init+0x2ec>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d10f      	bne.n	8002060 <HAL_ADC_Init+0x134>
 8002040:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002044:	f7ff ff38 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002048:	4604      	mov	r4, r0
 800204a:	4873      	ldr	r0, [pc, #460]	@ (8002218 <HAL_ADC_Init+0x2ec>)
 800204c:	f7ff ff34 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002050:	4603      	mov	r3, r0
 8002052:	4323      	orrs	r3, r4
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e012      	b.n	8002086 <HAL_ADC_Init+0x15a>
 8002060:	486e      	ldr	r0, [pc, #440]	@ (800221c <HAL_ADC_Init+0x2f0>)
 8002062:	f7ff ff29 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002066:	4604      	mov	r4, r0
 8002068:	486d      	ldr	r0, [pc, #436]	@ (8002220 <HAL_ADC_Init+0x2f4>)
 800206a:	f7ff ff25 	bl	8001eb8 <LL_ADC_IsEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	431c      	orrs	r4, r3
 8002072:	486c      	ldr	r0, [pc, #432]	@ (8002224 <HAL_ADC_Init+0x2f8>)
 8002074:	f7ff ff20 	bl	8001eb8 <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	4323      	orrs	r3, r4
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d012      	beq.n	80020b0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002092:	d004      	beq.n	800209e <HAL_ADC_Init+0x172>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a5f      	ldr	r2, [pc, #380]	@ (8002218 <HAL_ADC_Init+0x2ec>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_ADC_Init+0x176>
 800209e:	4a62      	ldr	r2, [pc, #392]	@ (8002228 <HAL_ADC_Init+0x2fc>)
 80020a0:	e000      	b.n	80020a4 <HAL_ADC_Init+0x178>
 80020a2:	4a62      	ldr	r2, [pc, #392]	@ (800222c <HAL_ADC_Init+0x300>)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f7ff fd68 	bl	8001b80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	7f5b      	ldrb	r3, [r3, #29]
 80020b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80020c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80020c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d106      	bne.n	80020ec <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e2:	3b01      	subs	r3, #1
 80020e4:	045b      	lsls	r3, r3, #17
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	4b48      	ldr	r3, [pc, #288]	@ (8002230 <HAL_ADC_Init+0x304>)
 8002110:	4013      	ands	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	430b      	orrs	r3, r1
 800211a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fee4 	bl	8001f04 <LL_ADC_INJ_IsConversionOngoing>
 800213c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d17f      	bne.n	8002244 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d17c      	bne.n	8002244 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800214e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002156:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002166:	f023 0302 	bic.w	r3, r3, #2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	430b      	orrs	r3, r1
 8002172:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d017      	beq.n	80021ac <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800218a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002194:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002198:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6911      	ldr	r1, [r2, #16]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	430b      	orrs	r3, r1
 80021a6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80021aa:	e013      	b.n	80021d4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80021ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80021cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021d0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d12a      	bne.n	8002234 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021f4:	4311      	orrs	r1, r2
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002200:	430a      	orrs	r2, r1
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e019      	b.n	8002244 <HAL_ADC_Init+0x318>
 8002210:	20000008 	.word	0x20000008
 8002214:	053e2d63 	.word	0x053e2d63
 8002218:	50000100 	.word	0x50000100
 800221c:	50000400 	.word	0x50000400
 8002220:	50000500 	.word	0x50000500
 8002224:	50000600 	.word	0x50000600
 8002228:	50000300 	.word	0x50000300
 800222c:	50000700 	.word	0x50000700
 8002230:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691a      	ldr	r2, [r3, #16]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0201 	bic.w	r2, r2, #1
 8002242:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10c      	bne.n	8002266 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	f023 010f 	bic.w	r1, r3, #15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	1e5a      	subs	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
 8002264:	e007      	b.n	8002276 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 020f 	bic.w	r2, r2, #15
 8002274:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002286:	e007      	b.n	8002298 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228c:	f043 0210 	orr.w	r2, r3, #16
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002298:	7ffb      	ldrb	r3, [r7, #31]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop

080022a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b0b6      	sub	sp, #216	@ 0xd8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x24>
 80022c2:	2302      	movs	r3, #2
 80022c4:	f000 bc13 	b.w	8002aee <HAL_ADC_ConfigChannel+0x84a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fe02 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 83f3 	bne.w	8002ac8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	6859      	ldr	r1, [r3, #4]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	f7ff fd18 	bl	8001d24 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fdf0 	bl	8001ede <LL_ADC_REG_IsConversionOngoing>
 80022fe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fdfc 	bl	8001f04 <LL_ADC_INJ_IsConversionOngoing>
 800230c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002310:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002314:	2b00      	cmp	r3, #0
 8002316:	f040 81d9 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800231a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 81d4 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800232c:	d10f      	bne.n	800234e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	f7ff fd1f 	bl	8001d7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fcd9 	bl	8001cfe <LL_ADC_SetSamplingTimeCommonConfig>
 800234c:	e00e      	b.n	800236c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	461a      	mov	r2, r3
 800235c:	f7ff fd0e 	bl	8001d7c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff fcc9 	bl	8001cfe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	2b04      	cmp	r3, #4
 800238c:	d022      	beq.n	80023d4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6919      	ldr	r1, [r3, #16]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800239e:	f7ff fc23 	bl	8001be8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6919      	ldr	r1, [r3, #16]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7ff fc6f 	bl	8001c92 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d102      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x126>
 80023c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c8:	e000      	b.n	80023cc <HAL_ADC_ConfigChannel+0x128>
 80023ca:	2300      	movs	r3, #0
 80023cc:	461a      	mov	r2, r3
 80023ce:	f7ff fc7b 	bl	8001cc8 <LL_ADC_SetOffsetSaturation>
 80023d2:	e17b      	b.n	80026cc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2100      	movs	r1, #0
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc28 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10a      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x15c>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fc1d 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	e01e      	b.n	800243e <HAL_ADC_ConfigChannel+0x19a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fc12 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002412:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800241e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002422:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800242e:	2320      	movs	r3, #32
 8002430:	e004      	b.n	800243c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002432:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002446:	2b00      	cmp	r3, #0
 8002448:	d105      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x1b2>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	0e9b      	lsrs	r3, r3, #26
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	e018      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1e4>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800246a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800246e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002472:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e004      	b.n	8002488 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800247e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002488:	429a      	cmp	r2, r3
 800248a:	d106      	bne.n	800249a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fbe1 	bl	8001c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fbc5 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10a      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x222>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fbba 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	0e9b      	lsrs	r3, r3, #26
 80024c0:	f003 021f 	and.w	r2, r3, #31
 80024c4:	e01e      	b.n	8002504 <HAL_ADC_ConfigChannel+0x260>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2101      	movs	r1, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fbaf 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80024e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80024ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e004      	b.n	8002502 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80024f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024fc:	fab3 f383 	clz	r3, r3
 8002500:	b2db      	uxtb	r3, r3
 8002502:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <HAL_ADC_ConfigChannel+0x278>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	e018      	b.n	800254e <HAL_ADC_ConfigChannel+0x2aa>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002528:	fa93 f3a3 	rbit	r3, r3
 800252c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002530:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002534:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002538:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002540:	2320      	movs	r3, #32
 8002542:	e004      	b.n	800254e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800254e:	429a      	cmp	r2, r3
 8002550:	d106      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2200      	movs	r2, #0
 8002558:	2101      	movs	r1, #1
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fb7e 	bl	8001c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2102      	movs	r1, #2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fb62 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10a      	bne.n	800258c <HAL_ADC_ConfigChannel+0x2e8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2102      	movs	r1, #2
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fb57 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	0e9b      	lsrs	r3, r3, #26
 8002586:	f003 021f 	and.w	r2, r3, #31
 800258a:	e01e      	b.n	80025ca <HAL_ADC_ConfigChannel+0x326>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2102      	movs	r1, #2
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fb4c 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80025aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80025b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80025ba:	2320      	movs	r3, #32
 80025bc:	e004      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80025be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025c2:	fab3 f383 	clz	r3, r3
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d105      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x33e>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	0e9b      	lsrs	r3, r3, #26
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	e016      	b.n	8002610 <HAL_ADC_ConfigChannel+0x36c>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80025ee:	fa93 f3a3 	rbit	r3, r3
 80025f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80025f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80025f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80025fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002602:	2320      	movs	r3, #32
 8002604:	e004      	b.n	8002610 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002610:	429a      	cmp	r2, r3
 8002612:	d106      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2200      	movs	r2, #0
 800261a:	2102      	movs	r1, #2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb1d 	bl	8001c5c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2103      	movs	r1, #3
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fb01 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 800262e:	4603      	mov	r3, r0
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <HAL_ADC_ConfigChannel+0x3aa>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2103      	movs	r1, #3
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff faf6 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 8002644:	4603      	mov	r3, r0
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	e017      	b.n	800267e <HAL_ADC_ConfigChannel+0x3da>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2103      	movs	r1, #3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff faeb 	bl	8001c30 <LL_ADC_GetOffsetChannel>
 800265a:	4603      	mov	r3, r0
 800265c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002660:	fa93 f3a3 	rbit	r3, r3
 8002664:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002668:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800266a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e003      	b.n	800267c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002686:	2b00      	cmp	r3, #0
 8002688:	d105      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x3f2>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	0e9b      	lsrs	r3, r3, #26
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	e011      	b.n	80026ba <HAL_ADC_ConfigChannel+0x416>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80026a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80026a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80026ae:	2320      	movs	r3, #32
 80026b0:	e003      	b.n	80026ba <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80026b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d106      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2200      	movs	r2, #0
 80026c4:	2103      	movs	r1, #3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fac8 	bl	8001c5c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fbf1 	bl	8001eb8 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f040 813d 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f7ff fb72 	bl	8001dd4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4aa2      	ldr	r2, [pc, #648]	@ (8002980 <HAL_ADC_ConfigChannel+0x6dc>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f040 812e 	bne.w	8002958 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x480>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	2b09      	cmp	r3, #9
 800271a:	bf94      	ite	ls
 800271c:	2301      	movls	r3, #1
 800271e:	2300      	movhi	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e019      	b.n	8002758 <HAL_ADC_ConfigChannel+0x4b4>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800272c:	fa93 f3a3 	rbit	r3, r3
 8002730:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002732:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002734:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002736:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002738:	2b00      	cmp	r3, #0
 800273a:	d101      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800273c:	2320      	movs	r3, #32
 800273e:	e003      	b.n	8002748 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002740:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2b09      	cmp	r3, #9
 8002750:	bf94      	ite	ls
 8002752:	2301      	movls	r3, #1
 8002754:	2300      	movhi	r3, #0
 8002756:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002758:	2b00      	cmp	r3, #0
 800275a:	d079      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002764:	2b00      	cmp	r3, #0
 8002766:	d107      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x4d4>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0e9b      	lsrs	r3, r3, #26
 800276e:	3301      	adds	r3, #1
 8002770:	069b      	lsls	r3, r3, #26
 8002772:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002776:	e015      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x500>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002780:	fa93 f3a3 	rbit	r3, r3
 8002784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002788:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800278a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002790:	2320      	movs	r3, #32
 8002792:	e003      	b.n	800279c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3301      	adds	r3, #1
 800279e:	069b      	lsls	r3, r3, #26
 80027a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x520>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	0e9b      	lsrs	r3, r3, #26
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f303 	lsl.w	r3, r1, r3
 80027c2:	e017      	b.n	80027f4 <HAL_ADC_ConfigChannel+0x550>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80027d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80027d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e003      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80027e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	ea42 0103 	orr.w	r1, r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <HAL_ADC_ConfigChannel+0x576>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	3301      	adds	r3, #1
 800280c:	f003 021f 	and.w	r2, r3, #31
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	051b      	lsls	r3, r3, #20
 8002818:	e018      	b.n	800284c <HAL_ADC_ConfigChannel+0x5a8>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800282c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002832:	2320      	movs	r3, #32
 8002834:	e003      	b.n	800283e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002838:	fab3 f383 	clz	r3, r3
 800283c:	b2db      	uxtb	r3, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f003 021f 	and.w	r2, r3, #31
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800284c:	430b      	orrs	r3, r1
 800284e:	e07e      	b.n	800294e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_ADC_ConfigChannel+0x5c8>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	0e9b      	lsrs	r3, r3, #26
 8002862:	3301      	adds	r3, #1
 8002864:	069b      	lsls	r3, r3, #26
 8002866:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800286a:	e015      	b.n	8002898 <HAL_ADC_ConfigChannel+0x5f4>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002874:	fa93 f3a3 	rbit	r3, r3
 8002878:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800287e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002884:	2320      	movs	r3, #32
 8002886:	e003      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288a:	fab3 f383 	clz	r3, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3301      	adds	r3, #1
 8002892:	069b      	lsls	r3, r3, #26
 8002894:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x614>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	0e9b      	lsrs	r3, r3, #26
 80028aa:	3301      	adds	r3, #1
 80028ac:	f003 031f 	and.w	r3, r3, #31
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	e017      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x644>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	61fb      	str	r3, [r7, #28]
  return result;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e003      	b.n	80028dc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	3301      	adds	r3, #1
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	ea42 0103 	orr.w	r1, r2, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10d      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x670>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e9b      	lsrs	r3, r3, #26
 80028fe:	3301      	adds	r3, #1
 8002900:	f003 021f 	and.w	r2, r3, #31
 8002904:	4613      	mov	r3, r2
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	4413      	add	r3, r2
 800290a:	3b1e      	subs	r3, #30
 800290c:	051b      	lsls	r3, r3, #20
 800290e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002912:	e01b      	b.n	800294c <HAL_ADC_ConfigChannel+0x6a8>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	fa93 f3a3 	rbit	r3, r3
 8002920:	613b      	str	r3, [r7, #16]
  return result;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800292c:	2320      	movs	r3, #32
 800292e:	e003      	b.n	8002938 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	3301      	adds	r3, #1
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	3b1e      	subs	r3, #30
 8002946:	051b      	lsls	r3, r3, #20
 8002948:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002952:	4619      	mov	r1, r3
 8002954:	f7ff fa12 	bl	8001d7c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <HAL_ADC_ConfigChannel+0x6e0>)
 800295e:	4013      	ands	r3, r2
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80be 	beq.w	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800296e:	d004      	beq.n	800297a <HAL_ADC_ConfigChannel+0x6d6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <HAL_ADC_ConfigChannel+0x6e4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10a      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x6ec>
 800297a:	4b04      	ldr	r3, [pc, #16]	@ (800298c <HAL_ADC_ConfigChannel+0x6e8>)
 800297c:	e009      	b.n	8002992 <HAL_ADC_ConfigChannel+0x6ee>
 800297e:	bf00      	nop
 8002980:	407f0000 	.word	0x407f0000
 8002984:	80080000 	.word	0x80080000
 8002988:	50000100 	.word	0x50000100
 800298c:	50000300 	.word	0x50000300
 8002990:	4b59      	ldr	r3, [pc, #356]	@ (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff f91a 	bl	8001bcc <LL_ADC_GetCommonPathInternalCh>
 8002998:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a56      	ldr	r2, [pc, #344]	@ (8002afc <HAL_ADC_ConfigChannel+0x858>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_ADC_ConfigChannel+0x70c>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a55      	ldr	r2, [pc, #340]	@ (8002b00 <HAL_ADC_ConfigChannel+0x85c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d13a      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d134      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029c4:	d005      	beq.n	80029d2 <HAL_ADC_ConfigChannel+0x72e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002b04 <HAL_ADC_ConfigChannel+0x860>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	f040 8085 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x742>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a49      	ldr	r2, [pc, #292]	@ (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x746>
 80029e6:	4a49      	ldr	r2, [pc, #292]	@ (8002b0c <HAL_ADC_ConfigChannel+0x868>)
 80029e8:	e000      	b.n	80029ec <HAL_ADC_ConfigChannel+0x748>
 80029ea:	4a43      	ldr	r2, [pc, #268]	@ (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 80029ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029f4:	4619      	mov	r1, r3
 80029f6:	4610      	mov	r0, r2
 80029f8:	f7ff f8d5 	bl	8001ba6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029fc:	4b44      	ldr	r3, [pc, #272]	@ (8002b10 <HAL_ADC_ConfigChannel+0x86c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	4a44      	ldr	r2, [pc, #272]	@ (8002b14 <HAL_ADC_ConfigChannel+0x870>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a16:	e002      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f9      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a24:	e05a      	b.n	8002adc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002b18 <HAL_ADC_ConfigChannel+0x874>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d125      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11f      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a31      	ldr	r2, [pc, #196]	@ (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d104      	bne.n	8002a50 <HAL_ADC_ConfigChannel+0x7ac>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a34      	ldr	r2, [pc, #208]	@ (8002b1c <HAL_ADC_ConfigChannel+0x878>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d047      	beq.n	8002ae0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a58:	d004      	beq.n	8002a64 <HAL_ADC_ConfigChannel+0x7c0>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a2a      	ldr	r2, [pc, #168]	@ (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x7c4>
 8002a64:	4a29      	ldr	r2, [pc, #164]	@ (8002b0c <HAL_ADC_ConfigChannel+0x868>)
 8002a66:	e000      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x7c6>
 8002a68:	4a23      	ldr	r2, [pc, #140]	@ (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 8002a6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f7ff f896 	bl	8001ba6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a7a:	e031      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a27      	ldr	r2, [pc, #156]	@ (8002b20 <HAL_ADC_ConfigChannel+0x87c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d12d      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d127      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1c      	ldr	r2, [pc, #112]	@ (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d022      	beq.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002aa4:	d004      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0x80c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <HAL_ADC_ConfigChannel+0x864>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x810>
 8002ab0:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <HAL_ADC_ConfigChannel+0x868>)
 8002ab2:	e000      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x812>
 8002ab4:	4a10      	ldr	r2, [pc, #64]	@ (8002af8 <HAL_ADC_ConfigChannel+0x854>)
 8002ab6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002aba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f7ff f870 	bl	8001ba6 <LL_ADC_SetCommonPathInternalCh>
 8002ac6:	e00c      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ada:	e002      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ae0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aea:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	37d8      	adds	r7, #216	@ 0xd8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	50000700 	.word	0x50000700
 8002afc:	c3210000 	.word	0xc3210000
 8002b00:	90c00010 	.word	0x90c00010
 8002b04:	50000600 	.word	0x50000600
 8002b08:	50000100 	.word	0x50000100
 8002b0c:	50000300 	.word	0x50000300
 8002b10:	20000008 	.word	0x20000008
 8002b14:	053e2d63 	.word	0x053e2d63
 8002b18:	c7520000 	.word	0xc7520000
 8002b1c:	50000500 	.word	0x50000500
 8002b20:	cb840000 	.word	0xcb840000

08002b24 <LL_ADC_IsEnabled>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <LL_ADC_IsEnabled+0x18>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_ADC_IsEnabled+0x1a>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <LL_ADC_REG_IsConversionOngoing>:
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d101      	bne.n	8002b62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b0a1      	sub	sp, #132	@ 0x84
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e0e7      	b.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b96:	2300      	movs	r3, #0
 8002b98:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ba6:	d102      	bne.n	8002bae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	e009      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d102      	bne.n	8002bbe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002bb8:	4b6d      	ldr	r3, [pc, #436]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	e001      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0be      	b.n	8002d5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff ffb1 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002be8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff ffab 	bl	8002b4a <LL_ADC_REG_IsConversionOngoing>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f040 80a0 	bne.w	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f040 809c 	bne.w	8002d3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c0c:	d004      	beq.n	8002c18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a55      	ldr	r2, [pc, #340]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002c18:	4b56      	ldr	r3, [pc, #344]	@ (8002d74 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002c1a:	e000      	b.n	8002c1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002c1c:	4b56      	ldr	r3, [pc, #344]	@ (8002d78 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002c1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d04b      	beq.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002c28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	6859      	ldr	r1, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c3a:	035b      	lsls	r3, r3, #13
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c4c:	d004      	beq.n	8002c58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a45      	ldr	r2, [pc, #276]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d10f      	bne.n	8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002c58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c5c:	f7ff ff62 	bl	8002b24 <LL_ADC_IsEnabled>
 8002c60:	4604      	mov	r4, r0
 8002c62:	4841      	ldr	r0, [pc, #260]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c64:	f7ff ff5e 	bl	8002b24 <LL_ADC_IsEnabled>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4323      	orrs	r3, r4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf0c      	ite	eq
 8002c70:	2301      	moveq	r3, #1
 8002c72:	2300      	movne	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e012      	b.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002c78:	483c      	ldr	r0, [pc, #240]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c7a:	f7ff ff53 	bl	8002b24 <LL_ADC_IsEnabled>
 8002c7e:	4604      	mov	r4, r0
 8002c80:	483b      	ldr	r0, [pc, #236]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c82:	f7ff ff4f 	bl	8002b24 <LL_ADC_IsEnabled>
 8002c86:	4603      	mov	r3, r0
 8002c88:	431c      	orrs	r4, r3
 8002c8a:	483c      	ldr	r0, [pc, #240]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c8c:	f7ff ff4a 	bl	8002b24 <LL_ADC_IsEnabled>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4323      	orrs	r3, r4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d056      	beq.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002ca2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002caa:	f023 030f 	bic.w	r3, r3, #15
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	6811      	ldr	r1, [r2, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6892      	ldr	r2, [r2, #8]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cbc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cbe:	e047      	b.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002cc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cd4:	d004      	beq.n	8002ce0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a23      	ldr	r2, [pc, #140]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10f      	bne.n	8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002ce0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002ce4:	f7ff ff1e 	bl	8002b24 <LL_ADC_IsEnabled>
 8002ce8:	4604      	mov	r4, r0
 8002cea:	481f      	ldr	r0, [pc, #124]	@ (8002d68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002cec:	f7ff ff1a 	bl	8002b24 <LL_ADC_IsEnabled>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	4323      	orrs	r3, r4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e012      	b.n	8002d26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002d00:	481a      	ldr	r0, [pc, #104]	@ (8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d02:	f7ff ff0f 	bl	8002b24 <LL_ADC_IsEnabled>
 8002d06:	4604      	mov	r4, r0
 8002d08:	4819      	ldr	r0, [pc, #100]	@ (8002d70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d0a:	f7ff ff0b 	bl	8002b24 <LL_ADC_IsEnabled>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	431c      	orrs	r4, r3
 8002d12:	481a      	ldr	r0, [pc, #104]	@ (8002d7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002d14:	f7ff ff06 	bl	8002b24 <LL_ADC_IsEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4323      	orrs	r3, r4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d012      	beq.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d32:	f023 030f 	bic.w	r3, r3, #15
 8002d36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d3a:	e009      	b.n	8002d50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	f043 0220 	orr.w	r2, r3, #32
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d4e:	e000      	b.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3784      	adds	r7, #132	@ 0x84
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd90      	pop	{r4, r7, pc}
 8002d66:	bf00      	nop
 8002d68:	50000100 	.word	0x50000100
 8002d6c:	50000400 	.word	0x50000400
 8002d70:	50000500 	.word	0x50000500
 8002d74:	50000300 	.word	0x50000300
 8002d78:	50000700 	.word	0x50000700
 8002d7c:	50000600 	.word	0x50000600

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0b      	blt.n	8002e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4907      	ldr	r1, [pc, #28]	@ (8002e1c <__NVIC_EnableIRQ+0x38>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100

08002e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	6039      	str	r1, [r7, #0]
 8002e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	db0a      	blt.n	8002e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	490c      	ldr	r1, [pc, #48]	@ (8002e6c <__NVIC_SetPriority+0x4c>)
 8002e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3e:	0112      	lsls	r2, r2, #4
 8002e40:	b2d2      	uxtb	r2, r2
 8002e42:	440b      	add	r3, r1
 8002e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e48:	e00a      	b.n	8002e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4908      	ldr	r1, [pc, #32]	@ (8002e70 <__NVIC_SetPriority+0x50>)
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	3b04      	subs	r3, #4
 8002e58:	0112      	lsls	r2, r2, #4
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	761a      	strb	r2, [r3, #24]
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000e100 	.word	0xe000e100
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	@ 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f1c3 0307 	rsb	r3, r3, #7
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	bf28      	it	cs
 8002e92:	2304      	movcs	r3, #4
 8002e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d902      	bls.n	8002ea4 <NVIC_EncodePriority+0x30>
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3b03      	subs	r3, #3
 8002ea2:	e000      	b.n	8002ea6 <NVIC_EncodePriority+0x32>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	401a      	ands	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	43d9      	mvns	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	4313      	orrs	r3, r2
         );
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3724      	adds	r7, #36	@ 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eec:	d301      	bcc.n	8002ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00f      	b.n	8002f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <SysTick_Config+0x40>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efa:	210f      	movs	r1, #15
 8002efc:	f04f 30ff 	mov.w	r0, #4294967295
 8002f00:	f7ff ff8e 	bl	8002e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f04:	4b05      	ldr	r3, [pc, #20]	@ (8002f1c <SysTick_Config+0x40>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0a:	4b04      	ldr	r3, [pc, #16]	@ (8002f1c <SysTick_Config+0x40>)
 8002f0c:	2207      	movs	r2, #7
 8002f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000e010 	.word	0xe000e010

08002f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff ff29 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f44:	f7ff ff40 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	6978      	ldr	r0, [r7, #20]
 8002f50:	f7ff ff90 	bl	8002e74 <NVIC_EncodePriority>
 8002f54:	4602      	mov	r2, r0
 8002f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff5f 	bl	8002e20 <__NVIC_SetPriority>
}
 8002f62:	bf00      	nop
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff33 	bl	8002de4 <__NVIC_EnableIRQ>
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ffa4 	bl	8002edc <SysTick_Config>
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e08d      	b.n	80030ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4b47      	ldr	r3, [pc, #284]	@ (80030d8 <HAL_DMA_Init+0x138>)
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d80f      	bhi.n	8002fde <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b45      	ldr	r3, [pc, #276]	@ (80030dc <HAL_DMA_Init+0x13c>)
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a45      	ldr	r2, [pc, #276]	@ (80030e0 <HAL_DMA_Init+0x140>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	009a      	lsls	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a42      	ldr	r2, [pc, #264]	@ (80030e4 <HAL_DMA_Init+0x144>)
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40
 8002fdc:	e00e      	b.n	8002ffc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b40      	ldr	r3, [pc, #256]	@ (80030e8 <HAL_DMA_Init+0x148>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	4a3d      	ldr	r2, [pc, #244]	@ (80030e0 <HAL_DMA_Init+0x140>)
 8002fea:	fba2 2303 	umull	r2, r3, r2, r3
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	009a      	lsls	r2, r3, #2
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a3c      	ldr	r2, [pc, #240]	@ (80030ec <HAL_DMA_Init+0x14c>)
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003016:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4313      	orrs	r3, r2
 8003044:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f9be 	bl	80033d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800305c:	d102      	bne.n	8003064 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003078:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d010      	beq.n	80030a4 <HAL_DMA_Init+0x104>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b04      	cmp	r3, #4
 8003088:	d80c      	bhi.n	80030a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f9de 	bl	800344c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	e008      	b.n	80030b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40020407 	.word	0x40020407
 80030dc:	bffdfff8 	.word	0xbffdfff8
 80030e0:	cccccccd 	.word	0xcccccccd
 80030e4:	40020000 	.word	0x40020000
 80030e8:	bffdfbf8 	.word	0xbffdfbf8
 80030ec:	40020400 	.word	0x40020400

080030f0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d005      	beq.n	8003114 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2204      	movs	r2, #4
 800310c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	e037      	b.n	8003184 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 020e 	bic.w	r2, r2, #14
 8003122:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003132:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	2101      	movs	r1, #1
 8003152:	fa01 f202 	lsl.w	r2, r1, r2
 8003156:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003160:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00c      	beq.n	8003184 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003178:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003182:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d00d      	beq.n	80031d6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2204      	movs	r2, #4
 80031be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
 80031d4:	e047      	b.n	8003266 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 020e 	bic.w	r2, r2, #14
 80031e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003200:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003204:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	f003 021f 	and.w	r2, r3, #31
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	2101      	movs	r1, #1
 8003214:	fa01 f202 	lsl.w	r2, r1, r2
 8003218:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003222:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00c      	beq.n	8003246 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003236:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800323a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003244:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
    }
  }
  return status;
 8003266:	7bfb      	ldrb	r3, [r7, #15]
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	2204      	movs	r2, #4
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d026      	beq.n	80032ea <HAL_DMA_IRQHandler+0x7a>
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d021      	beq.n	80032ea <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d107      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	2104      	movs	r1, #4
 80032d2:	fa01 f202 	lsl.w	r2, r1, r2
 80032d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d071      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80032e8:	e06c      	b.n	80033c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2202      	movs	r2, #2
 80032f4:	409a      	lsls	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4013      	ands	r3, r2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d02e      	beq.n	800335c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d029      	beq.n	800335c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 020a 	bic.w	r2, r2, #10
 8003324:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f003 021f 	and.w	r2, r3, #31
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2102      	movs	r1, #2
 800333c:	fa01 f202 	lsl.w	r2, r1, r2
 8003340:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d038      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800335a:	e033      	b.n	80033c4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	2208      	movs	r2, #8
 8003366:	409a      	lsls	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d02a      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d025      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 020e 	bic.w	r2, r2, #14
 8003388:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f003 021f 	and.w	r2, r3, #31
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d004      	beq.n	80033c6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
}
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
	...

080033d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d802      	bhi.n	80033ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80033e4:	4b15      	ldr	r3, [pc, #84]	@ (800343c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e001      	b.n	80033ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80033ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3b08      	subs	r3, #8
 80033fa:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80033fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003408:	089b      	lsrs	r3, r3, #2
 800340a:	009a      	lsls	r2, r3, #2
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a0b      	ldr	r2, [pc, #44]	@ (8003448 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800341a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 031f 	and.w	r3, r3, #31
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40020407 	.word	0x40020407
 800343c:	40020800 	.word	0x40020800
 8003440:	40020820 	.word	0x40020820
 8003444:	cccccccd 	.word	0xcccccccd
 8003448:	40020880 	.word	0x40020880

0800344c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800344c:	b480      	push	{r7}
 800344e:	b085      	sub	sp, #20
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	461a      	mov	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800346e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3b01      	subs	r3, #1
 8003474:	f003 031f 	and.w	r3, r3, #31
 8003478:	2201      	movs	r2, #1
 800347a:	409a      	lsls	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	1000823f 	.word	0x1000823f
 8003490:	40020940 	.word	0x40020940

08003494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034a2:	e15a      	b.n	800375a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2101      	movs	r1, #1
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 814c 	beq.w	8003754 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 0303 	and.w	r3, r3, #3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d005      	beq.n	80034d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d130      	bne.n	8003536 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	2203      	movs	r2, #3
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800350a:	2201      	movs	r2, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 0201 	and.w	r2, r3, #1
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 0303 	and.w	r3, r3, #3
 800353e:	2b03      	cmp	r3, #3
 8003540:	d017      	beq.n	8003572 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	2203      	movs	r2, #3
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43db      	mvns	r3, r3
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d123      	bne.n	80035c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	08da      	lsrs	r2, r3, #3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3208      	adds	r2, #8
 8003586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800358a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	220f      	movs	r2, #15
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	08da      	lsrs	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3208      	adds	r2, #8
 80035c0:	6939      	ldr	r1, [r7, #16]
 80035c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	2203      	movs	r2, #3
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	4013      	ands	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0203 	and.w	r2, r3, #3
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80a6 	beq.w	8003754 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003608:	4b5b      	ldr	r3, [pc, #364]	@ (8003778 <HAL_GPIO_Init+0x2e4>)
 800360a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800360c:	4a5a      	ldr	r2, [pc, #360]	@ (8003778 <HAL_GPIO_Init+0x2e4>)
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	6613      	str	r3, [r2, #96]	@ 0x60
 8003614:	4b58      	ldr	r3, [pc, #352]	@ (8003778 <HAL_GPIO_Init+0x2e4>)
 8003616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003620:	4a56      	ldr	r2, [pc, #344]	@ (800377c <HAL_GPIO_Init+0x2e8>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	3302      	adds	r3, #2
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	220f      	movs	r2, #15
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800364a:	d01f      	beq.n	800368c <HAL_GPIO_Init+0x1f8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a4c      	ldr	r2, [pc, #304]	@ (8003780 <HAL_GPIO_Init+0x2ec>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d019      	beq.n	8003688 <HAL_GPIO_Init+0x1f4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a4b      	ldr	r2, [pc, #300]	@ (8003784 <HAL_GPIO_Init+0x2f0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <HAL_GPIO_Init+0x1f0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a4a      	ldr	r2, [pc, #296]	@ (8003788 <HAL_GPIO_Init+0x2f4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00d      	beq.n	8003680 <HAL_GPIO_Init+0x1ec>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a49      	ldr	r2, [pc, #292]	@ (800378c <HAL_GPIO_Init+0x2f8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d007      	beq.n	800367c <HAL_GPIO_Init+0x1e8>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a48      	ldr	r2, [pc, #288]	@ (8003790 <HAL_GPIO_Init+0x2fc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_GPIO_Init+0x1e4>
 8003674:	2305      	movs	r3, #5
 8003676:	e00a      	b.n	800368e <HAL_GPIO_Init+0x1fa>
 8003678:	2306      	movs	r3, #6
 800367a:	e008      	b.n	800368e <HAL_GPIO_Init+0x1fa>
 800367c:	2304      	movs	r3, #4
 800367e:	e006      	b.n	800368e <HAL_GPIO_Init+0x1fa>
 8003680:	2303      	movs	r3, #3
 8003682:	e004      	b.n	800368e <HAL_GPIO_Init+0x1fa>
 8003684:	2302      	movs	r3, #2
 8003686:	e002      	b.n	800368e <HAL_GPIO_Init+0x1fa>
 8003688:	2301      	movs	r3, #1
 800368a:	e000      	b.n	800368e <HAL_GPIO_Init+0x1fa>
 800368c:	2300      	movs	r3, #0
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	f002 0203 	and.w	r2, r2, #3
 8003694:	0092      	lsls	r2, r2, #2
 8003696:	4093      	lsls	r3, r2
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800369e:	4937      	ldr	r1, [pc, #220]	@ (800377c <HAL_GPIO_Init+0x2e8>)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	3302      	adds	r3, #2
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036ac:	4b39      	ldr	r3, [pc, #228]	@ (8003794 <HAL_GPIO_Init+0x300>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036d0:	4a30      	ldr	r2, [pc, #192]	@ (8003794 <HAL_GPIO_Init+0x300>)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003794 <HAL_GPIO_Init+0x300>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036fa:	4a26      	ldr	r2, [pc, #152]	@ (8003794 <HAL_GPIO_Init+0x300>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003700:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <HAL_GPIO_Init+0x300>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003724:	4a1b      	ldr	r2, [pc, #108]	@ (8003794 <HAL_GPIO_Init+0x300>)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800372a:	4b1a      	ldr	r3, [pc, #104]	@ (8003794 <HAL_GPIO_Init+0x300>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800374e:	4a11      	ldr	r2, [pc, #68]	@ (8003794 <HAL_GPIO_Init+0x300>)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	3301      	adds	r3, #1
 8003758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	f47f ae9d 	bne.w	80034a4 <HAL_GPIO_Init+0x10>
  }
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40021000 	.word	0x40021000
 800377c:	40010000 	.word	0x40010000
 8003780:	48000400 	.word	0x48000400
 8003784:	48000800 	.word	0x48000800
 8003788:	48000c00 	.word	0x48000c00
 800378c:	48001000 	.word	0x48001000
 8003790:	48001400 	.word	0x48001400
 8003794:	40010400 	.word	0x40010400

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037de:	4a05      	ldr	r2, [pc, #20]	@ (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f806 	bl	80037f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40010400 	.word	0x40010400

080037f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d141      	bne.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800381e:	4b4b      	ldr	r3, [pc, #300]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800382a:	d131      	bne.n	8003890 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800382c:	4b47      	ldr	r3, [pc, #284]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003832:	4a46      	ldr	r2, [pc, #280]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003838:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800383c:	4b43      	ldr	r3, [pc, #268]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003844:	4a41      	ldr	r2, [pc, #260]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800384a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800384c:	4b40      	ldr	r3, [pc, #256]	@ (8003950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2232      	movs	r2, #50	@ 0x32
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a3f      	ldr	r2, [pc, #252]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	0c9b      	lsrs	r3, r3, #18
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003862:	e002      	b.n	800386a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3b01      	subs	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386a:	4b38      	ldr	r3, [pc, #224]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003876:	d102      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f2      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800387e:	4b33      	ldr	r3, [pc, #204]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800388a:	d158      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e057      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003890:	4b2e      	ldr	r3, [pc, #184]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003892:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003896:	4a2d      	ldr	r2, [pc, #180]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800389c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80038a0:	e04d      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a8:	d141      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038aa:	4b28      	ldr	r3, [pc, #160]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038b6:	d131      	bne.n	800391c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038b8:	4b24      	ldr	r3, [pc, #144]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038be:	4a23      	ldr	r2, [pc, #140]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c8:	4b20      	ldr	r3, [pc, #128]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038d0:	4a1e      	ldr	r2, [pc, #120]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2232      	movs	r2, #50	@ 0x32
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	3301      	adds	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ee:	e002      	b.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003902:	d102      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f2      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003916:	d112      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e011      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800391c:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003922:	4a0a      	ldr	r2, [pc, #40]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003928:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800392c:	e007      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003936:	4a05      	ldr	r2, [pc, #20]	@ (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800393c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40007000 	.word	0x40007000
 8003950:	20000008 	.word	0x20000008
 8003954:	431bde83 	.word	0x431bde83

08003958 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a04      	ldr	r2, [pc, #16]	@ (8003974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003962:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003966:	6093      	str	r3, [r2, #8]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40007000 	.word	0x40007000

08003978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e2fe      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003996:	4b97      	ldr	r3, [pc, #604]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a0:	4b94      	ldr	r3, [pc, #592]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3e>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d002      	beq.n	80039bc <HAL_RCC_OscConfig+0x44>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	4b8d      	ldr	r3, [pc, #564]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x108>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d157      	bne.n	8003a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e2d9      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x74>
 80039de:	4b85      	ldr	r3, [pc, #532]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a84      	ldr	r2, [pc, #528]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4b7f      	ldr	r3, [pc, #508]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7e      	ldr	r2, [pc, #504]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b7c      	ldr	r3, [pc, #496]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7b      	ldr	r2, [pc, #492]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 8003a10:	4b78      	ldr	r3, [pc, #480]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a77      	ldr	r2, [pc, #476]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b75      	ldr	r3, [pc, #468]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a74      	ldr	r2, [pc, #464]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fe f878 	bl	8001b24 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fe f874 	bl	8001b24 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	@ 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e29e      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fe f864 	bl	8001b24 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fe f860 	bl	8001b24 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	@ 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e28a      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a72:	4b60      	ldr	r3, [pc, #384]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0xe8>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8e:	4b59      	ldr	r3, [pc, #356]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a98:	4b56      	ldr	r3, [pc, #344]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_OscConfig+0x136>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x13c>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d11f      	bne.n	8003af4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_OscConfig+0x154>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e25d      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	4b49      	ldr	r3, [pc, #292]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	4946      	ldr	r1, [pc, #280]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ae0:	4b45      	ldr	r3, [pc, #276]	@ (8003bf8 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd ffd1 	bl	8001a8c <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d043      	beq.n	8003b78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e249      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d023      	beq.n	8003b44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afc:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe f80c 	bl	8001b24 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe f808 	bl	8001b24 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e232      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b22:	4b34      	ldr	r3, [pc, #208]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b31      	ldr	r3, [pc, #196]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	492d      	ldr	r1, [pc, #180]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
 8003b42:	e01a      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b44:	4b2b      	ldr	r3, [pc, #172]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fd ffe8 	bl	8001b24 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7fd ffe4 	bl	8001b24 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e20e      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b6a:	4b22      	ldr	r3, [pc, #136]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1e0>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d041      	beq.n	8003c0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b19      	ldr	r3, [pc, #100]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b94:	4a17      	ldr	r2, [pc, #92]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fd ffc1 	bl	8001b24 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fd ffbd 	bl	8001b24 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1e7      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ef      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x22e>
 8003bc6:	e020      	b.n	8003c0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bce:	4a09      	ldr	r2, [pc, #36]	@ (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd ffa4 	bl	8001b24 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bde:	e00d      	b.n	8003bfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fd ffa0 	bl	8001b24 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d906      	bls.n	8003bfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1ca      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ea      	bne.n	8003be0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a6 	beq.w	8003d64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c1c:	4b84      	ldr	r3, [pc, #528]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2b4>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x2b6>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	4b7f      	ldr	r3, [pc, #508]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c36:	4a7e      	ldr	r2, [pc, #504]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4e:	4b79      	ldr	r3, [pc, #484]	@ (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5a:	4b76      	ldr	r3, [pc, #472]	@ (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	@ (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fd ff5d 	bl	8001b24 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fd ff59 	bl	8001b24 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e183      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	4b6c      	ldr	r3, [pc, #432]	@ (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d108      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x32e>
 8003c94:	4b66      	ldr	r3, [pc, #408]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9a:	4a65      	ldr	r2, [pc, #404]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ca4:	e024      	b.n	8003cf0 <HAL_RCC_OscConfig+0x378>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d110      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x358>
 8003cae:	4b60      	ldr	r3, [pc, #384]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb4:	4a5e      	ldr	r2, [pc, #376]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x378>
 8003cd0:	4b57      	ldr	r3, [pc, #348]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd6:	4a56      	ldr	r2, [pc, #344]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ce0:	4b53      	ldr	r3, [pc, #332]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ce6:	4a52      	ldr	r2, [pc, #328]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d016      	beq.n	8003d26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd ff14 	bl	8001b24 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd ff10 	bl	8001b24 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e138      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d16:	4b46      	ldr	r3, [pc, #280]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ed      	beq.n	8003d00 <HAL_RCC_OscConfig+0x388>
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fd fefd 	bl	8001b24 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fd fef9 	bl	8001b24 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e121      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d44:	4b3a      	ldr	r3, [pc, #232]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ed      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b35      	ldr	r3, [pc, #212]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	4a34      	ldr	r2, [pc, #208]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03c      	beq.n	8003dea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d78:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd fecc 	bl	8001b24 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d90:	f7fd fec8 	bl	8001b24 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0f2      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003da2:	4b23      	ldr	r3, [pc, #140]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ef      	beq.n	8003d90 <HAL_RCC_OscConfig+0x418>
 8003db0:	e01b      	b.n	8003dea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003db8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fd feaf 	bl	8001b24 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dca:	f7fd feab 	bl	8001b24 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0d5      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ddc:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ef      	bne.n	8003dca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80c9 	beq.w	8003f86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f000 8083 	beq.w	8003f08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d15e      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a08      	ldr	r2, [pc, #32]	@ (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003e10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fd fe85 	bl	8001b24 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	e00c      	b.n	8003e38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fd fe81 	bl	8001b24 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d905      	bls.n	8003e38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0ab      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e38:	4b55      	ldr	r3, [pc, #340]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ec      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e44:	4b52      	ldr	r3, [pc, #328]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	4b52      	ldr	r3, [pc, #328]	@ (8003f94 <HAL_RCC_OscConfig+0x61c>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6a11      	ldr	r1, [r2, #32]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e54:	3a01      	subs	r2, #1
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003e5e:	0212      	lsls	r2, r2, #8
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003e66:	0852      	lsrs	r2, r2, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0552      	lsls	r2, r2, #21
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003e72:	0852      	lsrs	r2, r2, #1
 8003e74:	3a01      	subs	r2, #1
 8003e76:	0652      	lsls	r2, r2, #25
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e7e:	06d2      	lsls	r2, r2, #27
 8003e80:	430a      	orrs	r2, r1
 8003e82:	4943      	ldr	r1, [pc, #268]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b41      	ldr	r3, [pc, #260]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a40      	ldr	r2, [pc, #256]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e94:	4b3e      	ldr	r3, [pc, #248]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a3d      	ldr	r2, [pc, #244]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fe40 	bl	8001b24 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fd fe3c 	bl	8001b24 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e066      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	4b35      	ldr	r3, [pc, #212]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x530>
 8003ec6:	e05e      	b.n	8003f86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b31      	ldr	r3, [pc, #196]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a30      	ldr	r2, [pc, #192]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fe26 	bl	8001b24 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd fe22 	bl	8001b24 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e04c      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eee:	4b28      	ldr	r3, [pc, #160]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003efa:	4b25      	ldr	r3, [pc, #148]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003efc:	68da      	ldr	r2, [r3, #12]
 8003efe:	4924      	ldr	r1, [pc, #144]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003f00:	4b25      	ldr	r3, [pc, #148]	@ (8003f98 <HAL_RCC_OscConfig+0x620>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	60cb      	str	r3, [r1, #12]
 8003f06:	e03e      	b.n	8003f86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e039      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f14:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <HAL_RCC_OscConfig+0x618>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0203 	and.w	r2, r3, #3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d12c      	bne.n	8003f82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f32:	3b01      	subs	r3, #1
 8003f34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d123      	bne.n	8003f82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11b      	bne.n	8003f82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d113      	bne.n	8003f82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d001      	beq.n	8003f86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40021000 	.word	0x40021000
 8003f94:	019f800c 	.word	0x019f800c
 8003f98:	feeefffc 	.word	0xfeeefffc

08003f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e11e      	b.n	80041f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fb4:	4b91      	ldr	r3, [pc, #580]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 030f 	and.w	r3, r3, #15
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d910      	bls.n	8003fe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fc2:	4b8e      	ldr	r3, [pc, #568]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 020f 	bic.w	r2, r3, #15
 8003fca:	498c      	ldr	r1, [pc, #560]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fd2:	4b8a      	ldr	r3, [pc, #552]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e106      	b.n	80041f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d073      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b03      	cmp	r3, #3
 8003ff6:	d129      	bne.n	800404c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ff8:	4b81      	ldr	r3, [pc, #516]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0f4      	b.n	80041f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004008:	f000 f99e 	bl	8004348 <RCC_GetSysClockFreqFromPLLSource>
 800400c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4a7c      	ldr	r2, [pc, #496]	@ (8004204 <HAL_RCC_ClockConfig+0x268>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d93f      	bls.n	8004096 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004016:	4b7a      	ldr	r3, [pc, #488]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d009      	beq.n	8004036 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800402a:	2b00      	cmp	r3, #0
 800402c:	d033      	beq.n	8004096 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004032:	2b00      	cmp	r3, #0
 8004034:	d12f      	bne.n	8004096 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004036:	4b72      	ldr	r3, [pc, #456]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800403e:	4a70      	ldr	r2, [pc, #448]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004044:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004046:	2380      	movs	r3, #128	@ 0x80
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e024      	b.n	8004096 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d107      	bne.n	8004064 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004054:	4b6a      	ldr	r3, [pc, #424]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0c6      	b.n	80041f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004064:	4b66      	ldr	r3, [pc, #408]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0be      	b.n	80041f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004074:	f000 f8ce 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 8004078:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4a61      	ldr	r2, [pc, #388]	@ (8004204 <HAL_RCC_ClockConfig+0x268>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d909      	bls.n	8004096 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004082:	4b5f      	ldr	r3, [pc, #380]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800408a:	4a5d      	ldr	r2, [pc, #372]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 800408c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004090:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b5a      	ldr	r3, [pc, #360]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4957      	ldr	r1, [pc, #348]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a8:	f7fd fd3c 	bl	8001b24 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fd fd38 	bl	8001b24 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e095      	b.n	80041f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b4e      	ldr	r3, [pc, #312]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d023      	beq.n	800412c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b43      	ldr	r3, [pc, #268]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a42      	ldr	r2, [pc, #264]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80040f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004108:	4b3d      	ldr	r3, [pc, #244]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004110:	4a3b      	ldr	r2, [pc, #236]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004112:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004116:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004118:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4936      	ldr	r1, [pc, #216]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004126:	4313      	orrs	r3, r2
 8004128:	608b      	str	r3, [r1, #8]
 800412a:	e008      	b.n	800413e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b80      	cmp	r3, #128	@ 0x80
 8004130:	d105      	bne.n	800413e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	4a32      	ldr	r2, [pc, #200]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004138:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800413c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800413e:	4b2f      	ldr	r3, [pc, #188]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d21d      	bcs.n	8004188 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f023 020f 	bic.w	r2, r3, #15
 8004154:	4929      	ldr	r1, [pc, #164]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800415c:	f7fd fce2 	bl	8001b24 <HAL_GetTick>
 8004160:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	e00a      	b.n	800417a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004164:	f7fd fcde 	bl	8001b24 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004172:	4293      	cmp	r3, r2
 8004174:	d901      	bls.n	800417a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e03b      	b.n	80041f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_RCC_ClockConfig+0x260>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d1ed      	bne.n	8004164 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004194:	4b1a      	ldr	r3, [pc, #104]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4917      	ldr	r1, [pc, #92]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041b2:	4b13      	ldr	r3, [pc, #76]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	490f      	ldr	r1, [pc, #60]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041c6:	f000 f825 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80041ca:	4602      	mov	r2, r0
 80041cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004200 <HAL_RCC_ClockConfig+0x264>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	091b      	lsrs	r3, r3, #4
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	490c      	ldr	r1, [pc, #48]	@ (8004208 <HAL_RCC_ClockConfig+0x26c>)
 80041d8:	5ccb      	ldrb	r3, [r1, r3]
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a0a      	ldr	r2, [pc, #40]	@ (800420c <HAL_RCC_ClockConfig+0x270>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004210 <HAL_RCC_ClockConfig+0x274>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd fc4e 	bl	8001a8c <HAL_InitTick>
 80041f0:	4603      	mov	r3, r0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40022000 	.word	0x40022000
 8004200:	40021000 	.word	0x40021000
 8004204:	04c4b400 	.word	0x04c4b400
 8004208:	0800818c 	.word	0x0800818c
 800420c:	20000008 	.word	0x20000008
 8004210:	2000000c 	.word	0x2000000c

08004214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800421a:	4b2c      	ldr	r3, [pc, #176]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d102      	bne.n	800422c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004226:	4b2a      	ldr	r3, [pc, #168]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	e047      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800422c:	4b27      	ldr	r3, [pc, #156]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b08      	cmp	r3, #8
 8004236:	d102      	bne.n	800423e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004238:	4b26      	ldr	r3, [pc, #152]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	e03e      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800423e:	4b23      	ldr	r3, [pc, #140]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d136      	bne.n	80042b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800424a:	4b20      	ldr	r3, [pc, #128]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004254:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	3301      	adds	r3, #1
 8004260:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d10c      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004268:	4a1a      	ldr	r2, [pc, #104]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	4a16      	ldr	r2, [pc, #88]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004272:	68d2      	ldr	r2, [r2, #12]
 8004274:	0a12      	lsrs	r2, r2, #8
 8004276:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	617b      	str	r3, [r7, #20]
      break;
 8004280:	e00c      	b.n	800429c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004282:	4a13      	ldr	r2, [pc, #76]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	fbb2 f3f3 	udiv	r3, r2, r3
 800428a:	4a10      	ldr	r2, [pc, #64]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800428c:	68d2      	ldr	r2, [r2, #12]
 800428e:	0a12      	lsrs	r2, r2, #8
 8004290:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
      break;
 800429a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800429c:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	0e5b      	lsrs	r3, r3, #25
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	3301      	adds	r3, #1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	e001      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042bc:	693b      	ldr	r3, [r7, #16]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	371c      	adds	r7, #28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	00f42400 	.word	0x00f42400
 80042d4:	016e3600 	.word	0x016e3600

080042d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042dc:	4b03      	ldr	r3, [pc, #12]	@ (80042ec <HAL_RCC_GetHCLKFreq+0x14>)
 80042de:	681b      	ldr	r3, [r3, #0]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	20000008 	.word	0x20000008

080042f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042f4:	f7ff fff0 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 80042f8:	4602      	mov	r2, r0
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	0a1b      	lsrs	r3, r3, #8
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	4904      	ldr	r1, [pc, #16]	@ (8004318 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004306:	5ccb      	ldrb	r3, [r1, r3]
 8004308:	f003 031f 	and.w	r3, r3, #31
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40021000 	.word	0x40021000
 8004318:	0800819c 	.word	0x0800819c

0800431c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004320:	f7ff ffda 	bl	80042d8 <HAL_RCC_GetHCLKFreq>
 8004324:	4602      	mov	r2, r0
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	0adb      	lsrs	r3, r3, #11
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	4904      	ldr	r1, [pc, #16]	@ (8004344 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004332:	5ccb      	ldrb	r3, [r1, r3]
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	0800819c 	.word	0x0800819c

08004348 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800434e:	4b1e      	ldr	r3, [pc, #120]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004358:	4b1b      	ldr	r3, [pc, #108]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b03      	cmp	r3, #3
 800436a:	d10c      	bne.n	8004386 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800436c:	4a17      	ldr	r2, [pc, #92]	@ (80043cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	fbb2 f3f3 	udiv	r3, r2, r3
 8004374:	4a14      	ldr	r2, [pc, #80]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004376:	68d2      	ldr	r2, [r2, #12]
 8004378:	0a12      	lsrs	r2, r2, #8
 800437a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	617b      	str	r3, [r7, #20]
    break;
 8004384:	e00c      	b.n	80043a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004386:	4a12      	ldr	r2, [pc, #72]	@ (80043d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	4a0e      	ldr	r2, [pc, #56]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	0a12      	lsrs	r2, r2, #8
 8004394:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004398:	fb02 f303 	mul.w	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
    break;
 800439e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043a0:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	0e5b      	lsrs	r3, r3, #25
 80043a6:	f003 0303 	and.w	r3, r3, #3
 80043aa:	3301      	adds	r3, #1
 80043ac:	005b      	lsls	r3, r3, #1
 80043ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043ba:	687b      	ldr	r3, [r7, #4]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40021000 	.word	0x40021000
 80043cc:	016e3600 	.word	0x016e3600
 80043d0:	00f42400 	.word	0x00f42400

080043d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043dc:	2300      	movs	r3, #0
 80043de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8098 	beq.w	8004522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f2:	2300      	movs	r3, #0
 80043f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043f6:	4b43      	ldr	r3, [pc, #268]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10d      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004402:	4b40      	ldr	r3, [pc, #256]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004406:	4a3f      	ldr	r2, [pc, #252]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800440c:	6593      	str	r3, [r2, #88]	@ 0x58
 800440e:	4b3d      	ldr	r3, [pc, #244]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800441a:	2301      	movs	r3, #1
 800441c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800441e:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a39      	ldr	r2, [pc, #228]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004428:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800442a:	f7fd fb7b 	bl	8001b24 <HAL_GetTick>
 800442e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004430:	e009      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004432:	f7fd fb77 	bl	8001b24 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d902      	bls.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	74fb      	strb	r3, [r7, #19]
        break;
 8004444:	e005      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004446:	4b30      	ldr	r3, [pc, #192]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0ef      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004452:	7cfb      	ldrb	r3, [r7, #19]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d159      	bne.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004458:	4b2a      	ldr	r3, [pc, #168]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800445e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004462:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d01e      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	429a      	cmp	r2, r3
 8004472:	d019      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004474:	4b23      	ldr	r3, [pc, #140]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800447a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800447e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004480:	4b20      	ldr	r3, [pc, #128]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004486:	4a1f      	ldr	r2, [pc, #124]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004490:	4b1c      	ldr	r3, [pc, #112]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004498:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800449c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044a0:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d016      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fd fb37 	bl	8001b24 <HAL_GetTick>
 80044b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044b8:	e00b      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ba:	f7fd fb33 	bl	8001b24 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d902      	bls.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	74fb      	strb	r3, [r7, #19]
            break;
 80044d0:	e006      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ec      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044e0:	7cfb      	ldrb	r3, [r7, #19]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044e6:	4b07      	ldr	r3, [pc, #28]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f4:	4903      	ldr	r1, [pc, #12]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80044fc:	e008      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	74bb      	strb	r3, [r7, #18]
 8004502:	e005      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004504:	40021000 	.word	0x40021000
 8004508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450c:	7cfb      	ldrb	r3, [r7, #19]
 800450e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004510:	7c7b      	ldrb	r3, [r7, #17]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4ba7      	ldr	r3, [pc, #668]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	4aa6      	ldr	r2, [pc, #664]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800452e:	4ba1      	ldr	r3, [pc, #644]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004534:	f023 0203 	bic.w	r2, r3, #3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	499d      	ldr	r1, [pc, #628]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004550:	4b98      	ldr	r3, [pc, #608]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004556:	f023 020c 	bic.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4995      	ldr	r1, [pc, #596]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004572:	4b90      	ldr	r3, [pc, #576]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	498c      	ldr	r1, [pc, #560]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004594:	4b87      	ldr	r3, [pc, #540]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	4984      	ldr	r1, [pc, #528]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0310 	and.w	r3, r3, #16
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045b6:	4b7f      	ldr	r3, [pc, #508]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	497b      	ldr	r1, [pc, #492]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045d8:	4b76      	ldr	r3, [pc, #472]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	4973      	ldr	r1, [pc, #460]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045fa:	4b6e      	ldr	r3, [pc, #440]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004600:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	69db      	ldr	r3, [r3, #28]
 8004608:	496a      	ldr	r1, [pc, #424]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800461c:	4b65      	ldr	r3, [pc, #404]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004622:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	4962      	ldr	r1, [pc, #392]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800463e:	4b5d      	ldr	r3, [pc, #372]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004644:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464c:	4959      	ldr	r1, [pc, #356]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004660:	4b54      	ldr	r3, [pc, #336]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004666:	f023 0203 	bic.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466e:	4951      	ldr	r1, [pc, #324]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004682:	4b4c      	ldr	r3, [pc, #304]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004688:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4948      	ldr	r1, [pc, #288]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d015      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046a4:	4b43      	ldr	r3, [pc, #268]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	4940      	ldr	r1, [pc, #256]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046c2:	d105      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a3a      	ldr	r2, [pc, #232]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d015      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046dc:	4b35      	ldr	r3, [pc, #212]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ea:	4932      	ldr	r1, [pc, #200]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046fc:	4b2d      	ldr	r3, [pc, #180]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	4a2c      	ldr	r2, [pc, #176]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004706:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d015      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004714:	4b27      	ldr	r3, [pc, #156]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004722:	4924      	ldr	r1, [pc, #144]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004732:	d105      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004734:	4b1f      	ldr	r3, [pc, #124]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a1e      	ldr	r2, [pc, #120]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800473a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800473e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d015      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800474c:	4b19      	ldr	r3, [pc, #100]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800475a:	4916      	ldr	r1, [pc, #88]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800476a:	d105      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476c:	4b11      	ldr	r3, [pc, #68]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a10      	ldr	r2, [pc, #64]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004776:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d019      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004784:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	4908      	ldr	r1, [pc, #32]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047a2:	d109      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047a4:	4b03      	ldr	r3, [pc, #12]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	4a02      	ldr	r2, [pc, #8]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ae:	60d3      	str	r3, [r2, #12]
 80047b0:	e002      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047b2:	bf00      	nop
 80047b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d015      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047c4:	4b29      	ldr	r3, [pc, #164]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	4926      	ldr	r1, [pc, #152]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047e2:	d105      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047e4:	4b21      	ldr	r3, [pc, #132]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a20      	ldr	r2, [pc, #128]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d015      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80047fc:	4b1b      	ldr	r3, [pc, #108]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004802:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800480a:	4918      	ldr	r1, [pc, #96]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800480c:	4313      	orrs	r3, r2
 800480e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481a:	d105      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800481c:	4b13      	ldr	r3, [pc, #76]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	4a12      	ldr	r2, [pc, #72]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004826:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d015      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004834:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004836:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800483a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004842:	490a      	ldr	r1, [pc, #40]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800484e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004852:	d105      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a04      	ldr	r2, [pc, #16]	@ (800486c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800485a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800485e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004860:	7cbb      	ldrb	r3, [r7, #18]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000

08004870 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e09d      	b.n	80049be <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004892:	d009      	beq.n	80048a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	61da      	str	r2, [r3, #28]
 800489a:	e005      	b.n	80048a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d106      	bne.n	80048c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fc fd72 	bl	80013ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80048e8:	d902      	bls.n	80048f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	e002      	b.n	80048f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80048fe:	d007      	beq.n	8004910 <HAL_SPI_Init+0xa0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004908:	d002      	beq.n	8004910 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f003 0301 	and.w	r3, r3, #1
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004948:	431a      	orrs	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004952:	ea42 0103 	orr.w	r1, r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	0c1b      	lsrs	r3, r3, #16
 800496c:	f003 0204 	and.w	r2, r3, #4
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	f003 0310 	and.w	r3, r3, #16
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	431a      	orrs	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800498c:	ea42 0103 	orr.w	r1, r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69da      	ldr	r2, [r3, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b08a      	sub	sp, #40	@ 0x28
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049d4:	2301      	movs	r3, #1
 80049d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d8:	f7fd f8a4 	bl	8001b24 <HAL_GetTick>
 80049dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80049ec:	887b      	ldrh	r3, [r7, #2]
 80049ee:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049f4:	7ffb      	ldrb	r3, [r7, #31]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d00c      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x4e>
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a00:	d106      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d102      	bne.n	8004a10 <HAL_SPI_TransmitReceive+0x4a>
 8004a0a:	7ffb      	ldrb	r3, [r7, #31]
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d001      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
 8004a12:	e1f3      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d005      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x60>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x60>
 8004a20:	887b      	ldrh	r3, [r7, #2]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e1e8      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_SPI_TransmitReceive+0x72>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e1e1      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x436>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d003      	beq.n	8004a54 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2205      	movs	r2, #5
 8004a50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	887a      	ldrh	r2, [r7, #2]
 8004a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	887a      	ldrh	r2, [r7, #2]
 8004a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a96:	d802      	bhi.n	8004a9e <HAL_SPI_TransmitReceive+0xd8>
 8004a98:	8abb      	ldrh	r3, [r7, #20]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d908      	bls.n	8004ab0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	e007      	b.n	8004ac0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004abe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aca:	2b40      	cmp	r3, #64	@ 0x40
 8004acc:	d007      	beq.n	8004ade <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ae6:	f240 8083 	bls.w	8004bf0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x132>
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d16f      	bne.n	8004bd8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	881a      	ldrh	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	1c9a      	adds	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	3b01      	subs	r3, #1
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1c:	e05c      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d11b      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x19e>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d016      	beq.n	8004b64 <HAL_SPI_TransmitReceive+0x19e>
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d113      	bne.n	8004b64 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	881a      	ldrh	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4c:	1c9a      	adds	r2, r3, #2
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d11c      	bne.n	8004bac <HAL_SPI_TransmitReceive+0x1e6>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	b292      	uxth	r2, r2
 8004b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bac:	f7fc ffba 	bl	8001b24 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d80d      	bhi.n	8004bd8 <HAL_SPI_TransmitReceive+0x212>
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d009      	beq.n	8004bd8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e111      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d19d      	bne.n	8004b1e <HAL_SPI_TransmitReceive+0x158>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d197      	bne.n	8004b1e <HAL_SPI_TransmitReceive+0x158>
 8004bee:	e0e5      	b.n	8004dbc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x23a>
 8004bf8:	8afb      	ldrh	r3, [r7, #22]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	f040 80d1 	bne.w	8004da2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d912      	bls.n	8004c30 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c0e:	881a      	ldrh	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	1c9a      	adds	r2, r3, #2
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	3b02      	subs	r3, #2
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c2e:	e0b8      	b.n	8004da2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c56:	e0a4      	b.n	8004da2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d134      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x30a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d02f      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x30a>
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d12c      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d912      	bls.n	8004ca6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c84:	881a      	ldrh	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c90:	1c9a      	adds	r2, r3, #2
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b02      	subs	r3, #2
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ca4:	e012      	b.n	8004ccc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	330c      	adds	r3, #12
 8004cb0:	7812      	ldrb	r2, [r2, #0]
 8004cb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d148      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x3aa>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d042      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d923      	bls.n	8004d3e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	b292      	uxth	r2, r2
 8004d02:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b02      	subs	r3, #2
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d81f      	bhi.n	8004d6c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d3a:	605a      	str	r2, [r3, #4]
 8004d3c:	e016      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f103 020c 	add.w	r2, r3, #12
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d70:	f7fc fed8 	bl	8001b24 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d803      	bhi.n	8004d88 <HAL_SPI_TransmitReceive+0x3c2>
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d86:	d102      	bne.n	8004d8e <HAL_SPI_TransmitReceive+0x3c8>
 8004d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d109      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e02c      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f47f af55 	bne.w	8004c58 <HAL_SPI_TransmitReceive+0x292>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f47f af4e 	bne.w	8004c58 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dbc:	6a3a      	ldr	r2, [r7, #32]
 8004dbe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f93d 	bl	8005040 <SPI_EndRxTxTransaction>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d008      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e00e      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
  }
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3728      	adds	r7, #40	@ 0x28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e14:	f7fc fe86 	bl	8001b24 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	4413      	add	r3, r2
 8004e22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e24:	f7fc fe7e 	bl	8001b24 <HAL_GetTick>
 8004e28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e2a:	4b39      	ldr	r3, [pc, #228]	@ (8004f10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	015b      	lsls	r3, r3, #5
 8004e30:	0d1b      	lsrs	r3, r3, #20
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	fb02 f303 	mul.w	r3, r2, r3
 8004e38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3a:	e054      	b.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d050      	beq.n	8004ee6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e44:	f7fc fe6e 	bl	8001b24 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d902      	bls.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d13d      	bne.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e72:	d111      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e7c:	d004      	beq.n	8004e88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e86:	d107      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ea0:	d10f      	bne.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ec0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e017      	b.n	8004f06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	bf0c      	ite	eq
 8004ef6:	2301      	moveq	r3, #1
 8004ef8:	2300      	movne	r3, #0
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	461a      	mov	r2, r3
 8004efe:	79fb      	ldrb	r3, [r7, #7]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d19b      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3720      	adds	r7, #32
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000008 	.word	0x20000008

08004f14 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b08a      	sub	sp, #40	@ 0x28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f26:	f7fc fdfd 	bl	8001b24 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	4413      	add	r3, r2
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f36:	f7fc fdf5 	bl	8001b24 <HAL_GetTick>
 8004f3a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f44:	4b3d      	ldr	r3, [pc, #244]	@ (800503c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	00da      	lsls	r2, r3, #3
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	0d1b      	lsrs	r3, r3, #20
 8004f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f56:	fb02 f303 	mul.w	r3, r2, r3
 8004f5a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f5c:	e060      	b.n	8005020 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f64:	d107      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7c:	d050      	beq.n	8005020 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f7e:	f7fc fdd1 	bl	8001b24 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d902      	bls.n	8004f94 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d13d      	bne.n	8005010 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fac:	d111      	bne.n	8004fd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fb6:	d004      	beq.n	8004fc2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc0:	d107      	bne.n	8004fd2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fda:	d10f      	bne.n	8004ffc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ffa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e010      	b.n	8005032 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	3b01      	subs	r3, #1
 800501e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	4013      	ands	r3, r2
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	429a      	cmp	r2, r3
 800502e:	d196      	bne.n	8004f5e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3728      	adds	r7, #40	@ 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000008 	.word	0x20000008

08005040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af02      	add	r7, sp, #8
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2200      	movs	r2, #0
 8005054:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f7ff ff5b 	bl	8004f14 <SPI_WaitFifoStateUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e027      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	2180      	movs	r1, #128	@ 0x80
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff fec0 	bl	8004e04 <SPI_WaitFlagStateUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e014      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff ff34 	bl	8004f14 <SPI_WaitFifoStateUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e000      	b.n	80050c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e054      	b.n	8005188 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d111      	bne.n	800510e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f001 fb42 	bl	800677c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <HAL_TIM_Base_Init+0xc4>)
 8005104:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	3304      	adds	r3, #4
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 feb1 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	0800146d 	.word	0x0800146d

08005194 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e054      	b.n	8005250 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d111      	bne.n	80051d6 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 fade 	bl	800677c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a23      	ldr	r2, [pc, #140]	@ (8005258 <HAL_TIM_OC_Init+0xc4>)
 80051cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2202      	movs	r2, #2
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	4619      	mov	r1, r3
 80051e8:	4610      	mov	r0, r2
 80051ea:	f000 fe4d 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	0800525d 	.word	0x0800525d

0800525c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e054      	b.n	800532c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d111      	bne.n	80052b2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f001 fa70 	bl	800677c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a23      	ldr	r2, [pc, #140]	@ (8005334 <HAL_TIM_PWM_Init+0xc4>)
 80052a8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 fddf 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	08005339 	.word	0x08005339

08005338 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e04c      	b.n	80053fa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d111      	bne.n	8005390 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 fa01 	bl	800677c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a1f      	ldr	r2, [pc, #124]	@ (8005404 <HAL_TIM_OnePulse_Init+0xb8>)
 8005386:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f000 fd70 	bl	8005e88 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0208 	bic.w	r2, r2, #8
 80053b6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6819      	ldr	r1, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	08005409 	.word	0x08005409

08005408 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b086      	sub	sp, #24
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0a2      	b.n	8005576 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d111      	bne.n	8005460 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f001 f999 	bl	800677c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a4a      	ldr	r2, [pc, #296]	@ (8005580 <HAL_TIM_Encoder_Init+0x164>)
 8005456:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2202      	movs	r2, #2
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005476:	f023 0307 	bic.w	r3, r3, #7
 800547a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f000 fcfe 	bl	8005e88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054b4:	f023 0303 	bic.w	r3, r3, #3
 80054b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	4313      	orrs	r3, r2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054d2:	f023 030c 	bic.w	r3, r3, #12
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4313      	orrs	r3, r2
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	011a      	lsls	r2, r3, #4
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	031b      	lsls	r3, r3, #12
 8005502:	4313      	orrs	r3, r2
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005510:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005518:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	011b      	lsls	r3, r3, #4
 8005524:	4313      	orrs	r3, r2
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	08001575 	.word	0x08001575

08005584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d026      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d021      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0202 	mvn.w	r2, #2
 80055b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	4798      	blx	r3
 80055d8:	e009      	b.n	80055ee <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d026      	beq.n	800564c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d021      	beq.n	800564c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0204 	mvn.w	r2, #4
 8005610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005622:	2b00      	cmp	r3, #0
 8005624:	d005      	beq.n	8005632 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	4798      	blx	r3
 8005630:	e009      	b.n	8005646 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d026      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b00      	cmp	r3, #0
 800565e:	d021      	beq.n	80056a4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0208 	mvn.w	r2, #8
 8005668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2204      	movs	r2, #4
 800566e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f003 0303 	and.w	r3, r3, #3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
 8005688:	e009      	b.n	800569e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d026      	beq.n	80056fc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d021      	beq.n	80056fc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0210 	mvn.w	r2, #16
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2208      	movs	r2, #8
 80056c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d005      	beq.n	80056e2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	4798      	blx	r3
 80056e0:	e009      	b.n	80056f6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00e      	beq.n	8005724 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0201 	mvn.w	r2, #1
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00e      	beq.n	8005756 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800574a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00e      	beq.n	800577e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800579a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00e      	beq.n	80057ce <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0220 	mvn.w	r2, #32
 80057c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d009      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00e      	beq.n	800581e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800583a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d009      	beq.n	800586e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800586e:	bf00      	nop
 8005870:	3710      	adds	r7, #16
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800588e:	2b01      	cmp	r3, #1
 8005890:	d101      	bne.n	8005896 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005892:	2302      	movs	r3, #2
 8005894:	e066      	b.n	8005964 <HAL_TIM_OC_ConfigChannel+0xec>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b14      	cmp	r3, #20
 80058a2:	d857      	bhi.n	8005954 <HAL_TIM_OC_ConfigChannel+0xdc>
 80058a4:	a201      	add	r2, pc, #4	@ (adr r2, 80058ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80058a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058aa:	bf00      	nop
 80058ac:	08005901 	.word	0x08005901
 80058b0:	08005955 	.word	0x08005955
 80058b4:	08005955 	.word	0x08005955
 80058b8:	08005955 	.word	0x08005955
 80058bc:	0800590f 	.word	0x0800590f
 80058c0:	08005955 	.word	0x08005955
 80058c4:	08005955 	.word	0x08005955
 80058c8:	08005955 	.word	0x08005955
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	08005955 	.word	0x08005955
 80058d4:	08005955 	.word	0x08005955
 80058d8:	08005955 	.word	0x08005955
 80058dc:	0800592b 	.word	0x0800592b
 80058e0:	08005955 	.word	0x08005955
 80058e4:	08005955 	.word	0x08005955
 80058e8:	08005955 	.word	0x08005955
 80058ec:	08005939 	.word	0x08005939
 80058f0:	08005955 	.word	0x08005955
 80058f4:	08005955 	.word	0x08005955
 80058f8:	08005955 	.word	0x08005955
 80058fc:	08005947 	.word	0x08005947
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fb72 	bl	8005ff0 <TIM_OC1_SetConfig>
      break;
 800590c:	e025      	b.n	800595a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fc05 	bl	8006124 <TIM_OC2_SetConfig>
      break;
 800591a:	e01e      	b.n	800595a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68b9      	ldr	r1, [r7, #8]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fc92 	bl	800624c <TIM_OC3_SetConfig>
      break;
 8005928:	e017      	b.n	800595a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68b9      	ldr	r1, [r7, #8]
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fd1d 	bl	8006370 <TIM_OC4_SetConfig>
      break;
 8005936:	e010      	b.n	800595a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fdaa 	bl	8006498 <TIM_OC5_SetConfig>
      break;
 8005944:	e009      	b.n	800595a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fe0d 	bl	800656c <TIM_OC6_SetConfig>
      break;
 8005952:	e002      	b.n	800595a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	75fb      	strb	r3, [r7, #23]
      break;
 8005958:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005962:	7dfb      	ldrb	r3, [r7, #23]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005982:	2b01      	cmp	r3, #1
 8005984:	d101      	bne.n	800598a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005986:	2302      	movs	r3, #2
 8005988:	e0ff      	b.n	8005b8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b14      	cmp	r3, #20
 8005996:	f200 80f0 	bhi.w	8005b7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059f5 	.word	0x080059f5
 80059a4:	08005b7b 	.word	0x08005b7b
 80059a8:	08005b7b 	.word	0x08005b7b
 80059ac:	08005b7b 	.word	0x08005b7b
 80059b0:	08005a35 	.word	0x08005a35
 80059b4:	08005b7b 	.word	0x08005b7b
 80059b8:	08005b7b 	.word	0x08005b7b
 80059bc:	08005b7b 	.word	0x08005b7b
 80059c0:	08005a77 	.word	0x08005a77
 80059c4:	08005b7b 	.word	0x08005b7b
 80059c8:	08005b7b 	.word	0x08005b7b
 80059cc:	08005b7b 	.word	0x08005b7b
 80059d0:	08005ab7 	.word	0x08005ab7
 80059d4:	08005b7b 	.word	0x08005b7b
 80059d8:	08005b7b 	.word	0x08005b7b
 80059dc:	08005b7b 	.word	0x08005b7b
 80059e0:	08005af9 	.word	0x08005af9
 80059e4:	08005b7b 	.word	0x08005b7b
 80059e8:	08005b7b 	.word	0x08005b7b
 80059ec:	08005b7b 	.word	0x08005b7b
 80059f0:	08005b39 	.word	0x08005b39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 faf8 	bl	8005ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699a      	ldr	r2, [r3, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0208 	orr.w	r2, r2, #8
 8005a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699a      	ldr	r2, [r3, #24]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0204 	bic.w	r2, r2, #4
 8005a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6999      	ldr	r1, [r3, #24]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	619a      	str	r2, [r3, #24]
      break;
 8005a32:	e0a5      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fb72 	bl	8006124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6999      	ldr	r1, [r3, #24]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	021a      	lsls	r2, r3, #8
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	619a      	str	r2, [r3, #24]
      break;
 8005a74:	e084      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f000 fbe5 	bl	800624c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69da      	ldr	r2, [r3, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f042 0208 	orr.w	r2, r2, #8
 8005a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0204 	bic.w	r2, r2, #4
 8005aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69d9      	ldr	r1, [r3, #28]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	61da      	str	r2, [r3, #28]
      break;
 8005ab4:	e064      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f000 fc57 	bl	8006370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69da      	ldr	r2, [r3, #28]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	69d9      	ldr	r1, [r3, #28]
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	021a      	lsls	r2, r3, #8
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	430a      	orrs	r2, r1
 8005af4:	61da      	str	r2, [r3, #28]
      break;
 8005af6:	e043      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 fcca 	bl	8006498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0208 	orr.w	r2, r2, #8
 8005b12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0204 	bic.w	r2, r2, #4
 8005b22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691a      	ldr	r2, [r3, #16]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b36:	e023      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fd14 	bl	800656c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b62:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005b78:	e002      	b.n	8005b80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop

08005b94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e0f6      	b.n	8005d9e <HAL_TIM_ConfigClockSource+0x20a>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005bce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a6f      	ldr	r2, [pc, #444]	@ (8005da8 <HAL_TIM_ConfigClockSource+0x214>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	f000 80c1 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005bf0:	4a6d      	ldr	r2, [pc, #436]	@ (8005da8 <HAL_TIM_ConfigClockSource+0x214>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	f200 80c6 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005bf8:	4a6c      	ldr	r2, [pc, #432]	@ (8005dac <HAL_TIM_ConfigClockSource+0x218>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	f000 80b9 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c00:	4a6a      	ldr	r2, [pc, #424]	@ (8005dac <HAL_TIM_ConfigClockSource+0x218>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	f200 80be 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c08:	4a69      	ldr	r2, [pc, #420]	@ (8005db0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	f000 80b1 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c10:	4a67      	ldr	r2, [pc, #412]	@ (8005db0 <HAL_TIM_ConfigClockSource+0x21c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	f200 80b6 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c18:	4a66      	ldr	r2, [pc, #408]	@ (8005db4 <HAL_TIM_ConfigClockSource+0x220>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	f000 80a9 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c20:	4a64      	ldr	r2, [pc, #400]	@ (8005db4 <HAL_TIM_ConfigClockSource+0x220>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	f200 80ae 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c28:	4a63      	ldr	r2, [pc, #396]	@ (8005db8 <HAL_TIM_ConfigClockSource+0x224>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	f000 80a1 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c30:	4a61      	ldr	r2, [pc, #388]	@ (8005db8 <HAL_TIM_ConfigClockSource+0x224>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	f200 80a6 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c38:	4a60      	ldr	r2, [pc, #384]	@ (8005dbc <HAL_TIM_ConfigClockSource+0x228>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	f000 8099 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c40:	4a5e      	ldr	r2, [pc, #376]	@ (8005dbc <HAL_TIM_ConfigClockSource+0x228>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	f200 809e 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c4c:	f000 8091 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005c54:	f200 8096 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c5c:	f000 8089 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005c60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c64:	f200 808e 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6c:	d03e      	beq.n	8005cec <HAL_TIM_ConfigClockSource+0x158>
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c72:	f200 8087 	bhi.w	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c7a:	f000 8086 	beq.w	8005d8a <HAL_TIM_ConfigClockSource+0x1f6>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c82:	d87f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c84:	2b70      	cmp	r3, #112	@ 0x70
 8005c86:	d01a      	beq.n	8005cbe <HAL_TIM_ConfigClockSource+0x12a>
 8005c88:	2b70      	cmp	r3, #112	@ 0x70
 8005c8a:	d87b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c8c:	2b60      	cmp	r3, #96	@ 0x60
 8005c8e:	d050      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x19e>
 8005c90:	2b60      	cmp	r3, #96	@ 0x60
 8005c92:	d877      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c94:	2b50      	cmp	r3, #80	@ 0x50
 8005c96:	d03c      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0x17e>
 8005c98:	2b50      	cmp	r3, #80	@ 0x50
 8005c9a:	d873      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005c9c:	2b40      	cmp	r3, #64	@ 0x40
 8005c9e:	d058      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x1be>
 8005ca0:	2b40      	cmp	r3, #64	@ 0x40
 8005ca2:	d86f      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ca4:	2b30      	cmp	r3, #48	@ 0x30
 8005ca6:	d064      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005ca8:	2b30      	cmp	r3, #48	@ 0x30
 8005caa:	d86b      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d060      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005cb0:	2b20      	cmp	r3, #32
 8005cb2:	d867      	bhi.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d05c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d05a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0x1de>
 8005cbc:	e062      	b.n	8005d84 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cce:	f000 fd35 	bl	800673c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ce0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	609a      	str	r2, [r3, #8]
      break;
 8005cea:	e04f      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cfc:	f000 fd1e 	bl	800673c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689a      	ldr	r2, [r3, #8]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d0e:	609a      	str	r2, [r3, #8]
      break;
 8005d10:	e03c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 fc90 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2150      	movs	r1, #80	@ 0x50
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fce9 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005d30:	e02c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 fcaf 	bl	80066a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2160      	movs	r1, #96	@ 0x60
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fcd9 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005d50:	e01c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f000 fc70 	bl	8006644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2140      	movs	r1, #64	@ 0x40
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f000 fcc9 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f000 fcc0 	bl	8006702 <TIM_ITRx_SetConfig>
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005d8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	00100070 	.word	0x00100070
 8005dac:	00100060 	.word	0x00100060
 8005db0:	00100050 	.word	0x00100050
 8005db4:	00100040 	.word	0x00100040
 8005db8:	00100030 	.word	0x00100030
 8005dbc:	00100020 	.word	0x00100020

08005dc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a4c      	ldr	r2, [pc, #304]	@ (8005fcc <TIM_Base_SetConfig+0x144>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d017      	beq.n	8005ed0 <TIM_Base_SetConfig+0x48>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea6:	d013      	beq.n	8005ed0 <TIM_Base_SetConfig+0x48>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a49      	ldr	r2, [pc, #292]	@ (8005fd0 <TIM_Base_SetConfig+0x148>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d00f      	beq.n	8005ed0 <TIM_Base_SetConfig+0x48>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a48      	ldr	r2, [pc, #288]	@ (8005fd4 <TIM_Base_SetConfig+0x14c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00b      	beq.n	8005ed0 <TIM_Base_SetConfig+0x48>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a47      	ldr	r2, [pc, #284]	@ (8005fd8 <TIM_Base_SetConfig+0x150>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d007      	beq.n	8005ed0 <TIM_Base_SetConfig+0x48>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	4a46      	ldr	r2, [pc, #280]	@ (8005fdc <TIM_Base_SetConfig+0x154>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d003      	beq.n	8005ed0 <TIM_Base_SetConfig+0x48>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	4a45      	ldr	r2, [pc, #276]	@ (8005fe0 <TIM_Base_SetConfig+0x158>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d108      	bne.n	8005ee2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a39      	ldr	r2, [pc, #228]	@ (8005fcc <TIM_Base_SetConfig+0x144>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d023      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef0:	d01f      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a36      	ldr	r2, [pc, #216]	@ (8005fd0 <TIM_Base_SetConfig+0x148>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01b      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a35      	ldr	r2, [pc, #212]	@ (8005fd4 <TIM_Base_SetConfig+0x14c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d017      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a34      	ldr	r2, [pc, #208]	@ (8005fd8 <TIM_Base_SetConfig+0x150>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a33      	ldr	r2, [pc, #204]	@ (8005fdc <TIM_Base_SetConfig+0x154>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d00f      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a33      	ldr	r2, [pc, #204]	@ (8005fe4 <TIM_Base_SetConfig+0x15c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00b      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a32      	ldr	r2, [pc, #200]	@ (8005fe8 <TIM_Base_SetConfig+0x160>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d007      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a31      	ldr	r2, [pc, #196]	@ (8005fec <TIM_Base_SetConfig+0x164>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d003      	beq.n	8005f32 <TIM_Base_SetConfig+0xaa>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8005fe0 <TIM_Base_SetConfig+0x158>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d108      	bne.n	8005f44 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a18      	ldr	r2, [pc, #96]	@ (8005fcc <TIM_Base_SetConfig+0x144>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <TIM_Base_SetConfig+0x110>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a1a      	ldr	r2, [pc, #104]	@ (8005fdc <TIM_Base_SetConfig+0x154>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00f      	beq.n	8005f98 <TIM_Base_SetConfig+0x110>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005fe4 <TIM_Base_SetConfig+0x15c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <TIM_Base_SetConfig+0x110>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a19      	ldr	r2, [pc, #100]	@ (8005fe8 <TIM_Base_SetConfig+0x160>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d007      	beq.n	8005f98 <TIM_Base_SetConfig+0x110>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a18      	ldr	r2, [pc, #96]	@ (8005fec <TIM_Base_SetConfig+0x164>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d003      	beq.n	8005f98 <TIM_Base_SetConfig+0x110>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a13      	ldr	r2, [pc, #76]	@ (8005fe0 <TIM_Base_SetConfig+0x158>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d103      	bne.n	8005fa0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	691a      	ldr	r2, [r3, #16]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d105      	bne.n	8005fbe <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	611a      	str	r2, [r3, #16]
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40012c00 	.word	0x40012c00
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40015000 	.word	0x40015000
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f023 0201 	bic.w	r2, r3, #1
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f023 0302 	bic.w	r3, r3, #2
 800603c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a30      	ldr	r2, [pc, #192]	@ (800610c <TIM_OC1_SetConfig+0x11c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d013      	beq.n	8006078 <TIM_OC1_SetConfig+0x88>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a2f      	ldr	r2, [pc, #188]	@ (8006110 <TIM_OC1_SetConfig+0x120>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00f      	beq.n	8006078 <TIM_OC1_SetConfig+0x88>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a2e      	ldr	r2, [pc, #184]	@ (8006114 <TIM_OC1_SetConfig+0x124>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d00b      	beq.n	8006078 <TIM_OC1_SetConfig+0x88>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a2d      	ldr	r2, [pc, #180]	@ (8006118 <TIM_OC1_SetConfig+0x128>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_OC1_SetConfig+0x88>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a2c      	ldr	r2, [pc, #176]	@ (800611c <TIM_OC1_SetConfig+0x12c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC1_SetConfig+0x88>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a2b      	ldr	r2, [pc, #172]	@ (8006120 <TIM_OC1_SetConfig+0x130>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d10c      	bne.n	8006092 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0308 	bic.w	r3, r3, #8
 800607e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f023 0304 	bic.w	r3, r3, #4
 8006090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1d      	ldr	r2, [pc, #116]	@ (800610c <TIM_OC1_SetConfig+0x11c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d013      	beq.n	80060c2 <TIM_OC1_SetConfig+0xd2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1c      	ldr	r2, [pc, #112]	@ (8006110 <TIM_OC1_SetConfig+0x120>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00f      	beq.n	80060c2 <TIM_OC1_SetConfig+0xd2>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006114 <TIM_OC1_SetConfig+0x124>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00b      	beq.n	80060c2 <TIM_OC1_SetConfig+0xd2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006118 <TIM_OC1_SetConfig+0x128>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <TIM_OC1_SetConfig+0xd2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a19      	ldr	r2, [pc, #100]	@ (800611c <TIM_OC1_SetConfig+0x12c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_OC1_SetConfig+0xd2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a18      	ldr	r2, [pc, #96]	@ (8006120 <TIM_OC1_SetConfig+0x130>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d111      	bne.n	80060e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	693a      	ldr	r2, [r7, #16]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	621a      	str	r2, [r3, #32]
}
 8006100:	bf00      	nop
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40013400 	.word	0x40013400
 8006114:	40014000 	.word	0x40014000
 8006118:	40014400 	.word	0x40014400
 800611c:	40014800 	.word	0x40014800
 8006120:	40015000 	.word	0x40015000

08006124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0210 	bic.w	r2, r3, #16
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a2c      	ldr	r2, [pc, #176]	@ (8006234 <TIM_OC2_SetConfig+0x110>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d007      	beq.n	8006198 <TIM_OC2_SetConfig+0x74>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a2b      	ldr	r2, [pc, #172]	@ (8006238 <TIM_OC2_SetConfig+0x114>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d003      	beq.n	8006198 <TIM_OC2_SetConfig+0x74>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a2a      	ldr	r2, [pc, #168]	@ (800623c <TIM_OC2_SetConfig+0x118>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d10d      	bne.n	80061b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800619e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006234 <TIM_OC2_SetConfig+0x110>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d013      	beq.n	80061e4 <TIM_OC2_SetConfig+0xc0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1e      	ldr	r2, [pc, #120]	@ (8006238 <TIM_OC2_SetConfig+0x114>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00f      	beq.n	80061e4 <TIM_OC2_SetConfig+0xc0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006240 <TIM_OC2_SetConfig+0x11c>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00b      	beq.n	80061e4 <TIM_OC2_SetConfig+0xc0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006244 <TIM_OC2_SetConfig+0x120>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d007      	beq.n	80061e4 <TIM_OC2_SetConfig+0xc0>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006248 <TIM_OC2_SetConfig+0x124>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_OC2_SetConfig+0xc0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a17      	ldr	r2, [pc, #92]	@ (800623c <TIM_OC2_SetConfig+0x118>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d113      	bne.n	800620c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	695b      	ldr	r3, [r3, #20]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	693a      	ldr	r2, [r7, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40013400 	.word	0x40013400
 800623c:	40015000 	.word	0x40015000
 8006240:	40014000 	.word	0x40014000
 8006244:	40014400 	.word	0x40014400
 8006248:	40014800 	.word	0x40014800

0800624c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800627a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0303 	bic.w	r3, r3, #3
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	021b      	lsls	r3, r3, #8
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2b      	ldr	r2, [pc, #172]	@ (8006358 <TIM_OC3_SetConfig+0x10c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d007      	beq.n	80062be <TIM_OC3_SetConfig+0x72>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2a      	ldr	r2, [pc, #168]	@ (800635c <TIM_OC3_SetConfig+0x110>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_OC3_SetConfig+0x72>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a29      	ldr	r2, [pc, #164]	@ (8006360 <TIM_OC3_SetConfig+0x114>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10d      	bne.n	80062da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a1e      	ldr	r2, [pc, #120]	@ (8006358 <TIM_OC3_SetConfig+0x10c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <TIM_OC3_SetConfig+0xbe>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a1d      	ldr	r2, [pc, #116]	@ (800635c <TIM_OC3_SetConfig+0x110>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00f      	beq.n	800630a <TIM_OC3_SetConfig+0xbe>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006364 <TIM_OC3_SetConfig+0x118>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d00b      	beq.n	800630a <TIM_OC3_SetConfig+0xbe>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006368 <TIM_OC3_SetConfig+0x11c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d007      	beq.n	800630a <TIM_OC3_SetConfig+0xbe>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a1b      	ldr	r2, [pc, #108]	@ (800636c <TIM_OC3_SetConfig+0x120>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d003      	beq.n	800630a <TIM_OC3_SetConfig+0xbe>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a16      	ldr	r2, [pc, #88]	@ (8006360 <TIM_OC3_SetConfig+0x114>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d113      	bne.n	8006332 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40013400 	.word	0x40013400
 8006360:	40015000 	.word	0x40015000
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800

08006370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800639e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	031b      	lsls	r3, r3, #12
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a2c      	ldr	r2, [pc, #176]	@ (8006480 <TIM_OC4_SetConfig+0x110>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d007      	beq.n	80063e4 <TIM_OC4_SetConfig+0x74>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006484 <TIM_OC4_SetConfig+0x114>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d003      	beq.n	80063e4 <TIM_OC4_SetConfig+0x74>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a2a      	ldr	r2, [pc, #168]	@ (8006488 <TIM_OC4_SetConfig+0x118>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d10d      	bne.n	8006400 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80063ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1f      	ldr	r2, [pc, #124]	@ (8006480 <TIM_OC4_SetConfig+0x110>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d013      	beq.n	8006430 <TIM_OC4_SetConfig+0xc0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a1e      	ldr	r2, [pc, #120]	@ (8006484 <TIM_OC4_SetConfig+0x114>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00f      	beq.n	8006430 <TIM_OC4_SetConfig+0xc0>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a1e      	ldr	r2, [pc, #120]	@ (800648c <TIM_OC4_SetConfig+0x11c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00b      	beq.n	8006430 <TIM_OC4_SetConfig+0xc0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a1d      	ldr	r2, [pc, #116]	@ (8006490 <TIM_OC4_SetConfig+0x120>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_OC4_SetConfig+0xc0>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a1c      	ldr	r2, [pc, #112]	@ (8006494 <TIM_OC4_SetConfig+0x124>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC4_SetConfig+0xc0>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a17      	ldr	r2, [pc, #92]	@ (8006488 <TIM_OC4_SetConfig+0x118>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d113      	bne.n	8006458 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006436:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800643e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	019b      	lsls	r3, r3, #6
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4313      	orrs	r3, r2
 800644a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	019b      	lsls	r3, r3, #6
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40015000 	.word	0x40015000
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80064dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a19      	ldr	r2, [pc, #100]	@ (8006554 <TIM_OC5_SetConfig+0xbc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <TIM_OC5_SetConfig+0x82>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a18      	ldr	r2, [pc, #96]	@ (8006558 <TIM_OC5_SetConfig+0xc0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d00f      	beq.n	800651a <TIM_OC5_SetConfig+0x82>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a17      	ldr	r2, [pc, #92]	@ (800655c <TIM_OC5_SetConfig+0xc4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00b      	beq.n	800651a <TIM_OC5_SetConfig+0x82>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a16      	ldr	r2, [pc, #88]	@ (8006560 <TIM_OC5_SetConfig+0xc8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d007      	beq.n	800651a <TIM_OC5_SetConfig+0x82>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a15      	ldr	r2, [pc, #84]	@ (8006564 <TIM_OC5_SetConfig+0xcc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d003      	beq.n	800651a <TIM_OC5_SetConfig+0x82>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a14      	ldr	r2, [pc, #80]	@ (8006568 <TIM_OC5_SetConfig+0xd0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d109      	bne.n	800652e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	695b      	ldr	r3, [r3, #20]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	4313      	orrs	r3, r2
 800652c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800
 8006568:	40015000 	.word	0x40015000

0800656c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800659a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800659e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	021b      	lsls	r3, r3, #8
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80065b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	051b      	lsls	r3, r3, #20
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a1a      	ldr	r2, [pc, #104]	@ (800662c <TIM_OC6_SetConfig+0xc0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <TIM_OC6_SetConfig+0x84>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a19      	ldr	r2, [pc, #100]	@ (8006630 <TIM_OC6_SetConfig+0xc4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00f      	beq.n	80065f0 <TIM_OC6_SetConfig+0x84>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a18      	ldr	r2, [pc, #96]	@ (8006634 <TIM_OC6_SetConfig+0xc8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d00b      	beq.n	80065f0 <TIM_OC6_SetConfig+0x84>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a17      	ldr	r2, [pc, #92]	@ (8006638 <TIM_OC6_SetConfig+0xcc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d007      	beq.n	80065f0 <TIM_OC6_SetConfig+0x84>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a16      	ldr	r2, [pc, #88]	@ (800663c <TIM_OC6_SetConfig+0xd0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_OC6_SetConfig+0x84>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a15      	ldr	r2, [pc, #84]	@ (8006640 <TIM_OC6_SetConfig+0xd4>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d109      	bne.n	8006604 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	4313      	orrs	r3, r2
 8006602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	621a      	str	r2, [r3, #32]
}
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr
 800662a:	bf00      	nop
 800662c:	40012c00 	.word	0x40012c00
 8006630:	40013400 	.word	0x40013400
 8006634:	40014000 	.word	0x40014000
 8006638:	40014400 	.word	0x40014400
 800663c:	40014800 	.word	0x40014800
 8006640:	40015000 	.word	0x40015000

08006644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	f023 0201 	bic.w	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800666e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 030a 	bic.w	r3, r3, #10
 8006680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	621a      	str	r2, [r3, #32]
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b087      	sub	sp, #28
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	60f8      	str	r0, [r7, #12]
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	f023 0210 	bic.w	r2, r3, #16
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	031b      	lsls	r3, r3, #12
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800671c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	f043 0307 	orr.w	r3, r3, #7
 8006728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	609a      	str	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800673c:	b480      	push	{r7}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	021a      	lsls	r2, r3, #8
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	431a      	orrs	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4313      	orrs	r3, r2
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	609a      	str	r2, [r3, #8]
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a26      	ldr	r2, [pc, #152]	@ (8006820 <TIM_ResetCallback+0xa4>)
 8006788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a25      	ldr	r2, [pc, #148]	@ (8006824 <TIM_ResetCallback+0xa8>)
 8006790:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a24      	ldr	r2, [pc, #144]	@ (8006828 <TIM_ResetCallback+0xac>)
 8006798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a23      	ldr	r2, [pc, #140]	@ (800682c <TIM_ResetCallback+0xb0>)
 80067a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a22      	ldr	r2, [pc, #136]	@ (8006830 <TIM_ResetCallback+0xb4>)
 80067a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a21      	ldr	r2, [pc, #132]	@ (8006834 <TIM_ResetCallback+0xb8>)
 80067b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a20      	ldr	r2, [pc, #128]	@ (8006838 <TIM_ResetCallback+0xbc>)
 80067b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <TIM_ResetCallback+0xc0>)
 80067c0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006840 <TIM_ResetCallback+0xc4>)
 80067c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006844 <TIM_ResetCallback+0xc8>)
 80067d0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a1c      	ldr	r2, [pc, #112]	@ (8006848 <TIM_ResetCallback+0xcc>)
 80067d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a1b      	ldr	r2, [pc, #108]	@ (800684c <TIM_ResetCallback+0xd0>)
 80067e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a1a      	ldr	r2, [pc, #104]	@ (8006850 <TIM_ResetCallback+0xd4>)
 80067e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a19      	ldr	r2, [pc, #100]	@ (8006854 <TIM_ResetCallback+0xd8>)
 80067f0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <TIM_ResetCallback+0xdc>)
 80067f8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a17      	ldr	r2, [pc, #92]	@ (800685c <TIM_ResetCallback+0xe0>)
 8006800:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a16      	ldr	r2, [pc, #88]	@ (8006860 <TIM_ResetCallback+0xe4>)
 8006808:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a15      	ldr	r2, [pc, #84]	@ (8006864 <TIM_ResetCallback+0xe8>)
 8006810:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	08005dc1 	.word	0x08005dc1
 8006824:	08005dd5 	.word	0x08005dd5
 8006828:	08005e4d 	.word	0x08005e4d
 800682c:	08005e61 	.word	0x08005e61
 8006830:	08005dfd 	.word	0x08005dfd
 8006834:	08005e11 	.word	0x08005e11
 8006838:	08005de9 	.word	0x08005de9
 800683c:	08005e25 	.word	0x08005e25
 8006840:	08005e39 	.word	0x08005e39
 8006844:	08005e75 	.word	0x08005e75
 8006848:	08006abd 	.word	0x08006abd
 800684c:	08006ad1 	.word	0x08006ad1
 8006850:	08006ae5 	.word	0x08006ae5
 8006854:	08006af9 	.word	0x08006af9
 8006858:	08006b0d 	.word	0x08006b0d
 800685c:	08006b21 	.word	0x08006b21
 8006860:	08006b35 	.word	0x08006b35
 8006864:	08006b49 	.word	0x08006b49

08006868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800687c:	2302      	movs	r3, #2
 800687e:	e074      	b.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2202      	movs	r2, #2
 800688c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a34      	ldr	r2, [pc, #208]	@ (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d009      	beq.n	80068be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a33      	ldr	r2, [pc, #204]	@ (800697c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d004      	beq.n	80068be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a31      	ldr	r2, [pc, #196]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d108      	bne.n	80068d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80068c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80068d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a21      	ldr	r2, [pc, #132]	@ (8006978 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d022      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006900:	d01d      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1f      	ldr	r2, [pc, #124]	@ (8006984 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d018      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1d      	ldr	r2, [pc, #116]	@ (8006988 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d013      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a1c      	ldr	r2, [pc, #112]	@ (800698c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00e      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a15      	ldr	r2, [pc, #84]	@ (800697c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d009      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a18      	ldr	r2, [pc, #96]	@ (8006990 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d004      	beq.n	800693e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a11      	ldr	r2, [pc, #68]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d10c      	bne.n	8006958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006944:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	4313      	orrs	r3, r2
 800694e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	40012c00 	.word	0x40012c00
 800697c:	40013400 	.word	0x40013400
 8006980:	40015000 	.word	0x40015000
 8006984:	40000400 	.word	0x40000400
 8006988:	40000800 	.word	0x40000800
 800698c:	40000c00 	.word	0x40000c00
 8006990:	40014000 	.word	0x40014000

08006994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e078      	b.n	8006aa2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	4313      	orrs	r3, r2
 8006a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ab0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a19      	ldr	r2, [pc, #100]	@ (8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d11c      	bne.n	8006a90 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a60:	051b      	lsls	r3, r3, #20
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40012c00 	.word	0x40012c00
 8006ab4:	40013400 	.word	0x40013400
 8006ab8:	40015000 	.word	0x40015000

08006abc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e050      	b.n	8006c10 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d114      	bne.n	8006ba2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fbfb 	bl	800737c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d103      	bne.n	8006b98 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a21      	ldr	r2, [pc, #132]	@ (8006c18 <HAL_UART_Init+0xbc>)
 8006b94:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2224      	movs	r2, #36	@ 0x24
 8006ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 ff28 	bl	8007a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fc29 	bl	8007420 <UART_SetConfig>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e01b      	b.n	8006c10 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f042 0201 	orr.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 ffa7 	bl	8007b5c <UART_CheckIdleState>
 8006c0e:	4603      	mov	r3, r0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	080017cd 	.word	0x080017cd

08006c1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b0ba      	sub	sp, #232	@ 0xe8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69db      	ldr	r3, [r3, #28]
 8006c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006c46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11b      	bne.n	8006c90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5c:	f003 0320 	and.w	r3, r3, #32
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d015      	beq.n	8006c90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d105      	bne.n	8006c7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8312 	beq.w	80072aa <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	4798      	blx	r3
      }
      return;
 8006c8e:	e30c      	b.n	80072aa <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8129 	beq.w	8006eec <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006c9e:	4b90      	ldr	r3, [pc, #576]	@ (8006ee0 <HAL_UART_IRQHandler+0x2c4>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d106      	bne.n	8006cb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ca6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006caa:	4b8e      	ldr	r3, [pc, #568]	@ (8006ee4 <HAL_UART_IRQHandler+0x2c8>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 811c 	beq.w	8006eec <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d011      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xc8>
 8006cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00b      	beq.n	8006ce4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d011      	beq.n	8006d14 <HAL_UART_IRQHandler+0xf8>
 8006cf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2202      	movs	r2, #2
 8006d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	f043 0204 	orr.w	r2, r3, #4
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d011      	beq.n	8006d44 <HAL_UART_IRQHandler+0x128>
 8006d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2204      	movs	r2, #4
 8006d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3a:	f043 0202 	orr.w	r2, r3, #2
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d017      	beq.n	8006d80 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006d60:	4b5f      	ldr	r3, [pc, #380]	@ (8006ee0 <HAL_UART_IRQHandler+0x2c4>)
 8006d62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00b      	beq.n	8006d80 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2208      	movs	r2, #8
 8006d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d76:	f043 0208 	orr.w	r2, r3, #8
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d012      	beq.n	8006db2 <HAL_UART_IRQHandler+0x196>
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00c      	beq.n	8006db2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006da0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da8:	f043 0220 	orr.w	r2, r3, #32
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8278 	beq.w	80072ae <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006dbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dc2:	f003 0320 	and.w	r3, r3, #32
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d013      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006dca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d105      	bne.n	8006de2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d007      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e06:	2b40      	cmp	r3, #64	@ 0x40
 8006e08:	d005      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e0e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d058      	beq.n	8006ec8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 ffb7 	bl	8007d8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e26:	2b40      	cmp	r3, #64	@ 0x40
 8006e28:	d148      	bne.n	8006ebc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	3308      	adds	r3, #8
 8006e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1d9      	bne.n	8006e2a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d017      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e86:	4a18      	ldr	r2, [pc, #96]	@ (8006ee8 <HAL_UART_IRQHandler+0x2cc>)
 8006e88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fc f986 	bl	80031a2 <HAL_DMA_Abort_IT>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01f      	beq.n	8006edc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006eaa:	4610      	mov	r0, r2
 8006eac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	e015      	b.n	8006edc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eba:	e00f      	b.n	8006edc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec6:	e009      	b.n	8006edc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006eda:	e1e8      	b.n	80072ae <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006edc:	bf00      	nop
    return;
 8006ede:	e1e6      	b.n	80072ae <HAL_UART_IRQHandler+0x692>
 8006ee0:	10000001 	.word	0x10000001
 8006ee4:	04000120 	.word	0x04000120
 8006ee8:	08007e57 	.word	0x08007e57

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	f040 8176 	bne.w	80071e2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 816f 	beq.w	80071e2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 8168 	beq.w	80071e2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2210      	movs	r2, #16
 8006f18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f24:	2b40      	cmp	r3, #64	@ 0x40
 8006f26:	f040 80dc 	bne.w	80070e2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80b1 	beq.w	80070a4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	f080 80a9 	bcs.w	80070a4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006f58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 0320 	and.w	r3, r3, #32
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8087 	bne.w	800707e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006f7c:	e853 3f00 	ldrex	r3, [r3]
 8006f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006f9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1da      	bne.n	8006f70 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	3308      	adds	r3, #8
 8006fc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006fca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fcc:	f023 0301 	bic.w	r3, r3, #1
 8006fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006fde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006fe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006ff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e1      	bne.n	8006fba <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007006:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800700c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800701a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800701c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800701e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007020:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007022:	e841 2300 	strex	r3, r2, [r1]
 8007026:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007028:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800702a:	2b00      	cmp	r3, #0
 800702c:	d1e3      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2220      	movs	r2, #32
 8007032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800704a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800704c:	f023 0310 	bic.w	r3, r3, #16
 8007050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	461a      	mov	r2, r3
 800705a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800705e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007060:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007064:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800706c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e4      	bne.n	800703c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007078:	4618      	mov	r0, r3
 800707a:	f7fc f839 	bl	80030f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2202      	movs	r2, #2
 8007082:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8007096:	b292      	uxth	r2, r2
 8007098:	1a8a      	subs	r2, r1, r2
 800709a:	b292      	uxth	r2, r2
 800709c:	4611      	mov	r1, r2
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80070a2:	e106      	b.n	80072b2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070ae:	429a      	cmp	r2, r3
 80070b0:	f040 80ff 	bne.w	80072b2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b20      	cmp	r3, #32
 80070c4:	f040 80f5 	bne.w	80072b2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80070da:	4611      	mov	r1, r2
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	4798      	blx	r3
      return;
 80070e0:	e0e7      	b.n	80072b2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 80d9 	beq.w	80072b6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8007104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80d4 	beq.w	80072b6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800711c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007122:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007130:	647b      	str	r3, [r7, #68]	@ 0x44
 8007132:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800713e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e4      	bne.n	800710e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	623b      	str	r3, [r7, #32]
   return(result);
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800715a:	f023 0301 	bic.w	r3, r3, #1
 800715e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800716c:	633a      	str	r2, [r7, #48]	@ 0x30
 800716e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800717a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e1      	bne.n	8007144 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2220      	movs	r2, #32
 8007184:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 0310 	bic.w	r3, r3, #16
 80071a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80071b6:	61fb      	str	r3, [r7, #28]
 80071b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ba:	69b9      	ldr	r1, [r7, #24]
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	e841 2300 	strex	r3, r2, [r1]
 80071c2:	617b      	str	r3, [r7, #20]
   return(result);
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1e4      	bne.n	8007194 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071d6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80071da:	4611      	mov	r1, r2
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071e0:	e069      	b.n	80072b6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d010      	beq.n	8007210 <HAL_UART_IRQHandler+0x5f4>
 80071ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007202:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800720e:	e055      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007218:	2b00      	cmp	r3, #0
 800721a:	d014      	beq.n	8007246 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800721c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800722c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007238:	2b00      	cmp	r3, #0
 800723a:	d03e      	beq.n	80072ba <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
    }
    return;
 8007244:	e039      	b.n	80072ba <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800724a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <HAL_UART_IRQHandler+0x64a>
 8007252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fe0d 	bl	8007e7e <UART_EndTransmit_IT>
    return;
 8007264:	e02a      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800726a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00b      	beq.n	800728a <HAL_UART_IRQHandler+0x66e>
 8007272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007276:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007288:	e018      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800728a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800728e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d012      	beq.n	80072bc <HAL_UART_IRQHandler+0x6a0>
 8007296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800729a:	2b00      	cmp	r3, #0
 800729c:	da0e      	bge.n	80072bc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80072a8:	e008      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
      return;
 80072aa:	bf00      	nop
 80072ac:	e006      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
    return;
 80072ae:	bf00      	nop
 80072b0:	e004      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
      return;
 80072b2:	bf00      	nop
 80072b4:	e002      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
      return;
 80072b6:	bf00      	nop
 80072b8:	e000      	b.n	80072bc <HAL_UART_IRQHandler+0x6a0>
    return;
 80072ba:	bf00      	nop
  }
}
 80072bc:	37e8      	adds	r7, #232	@ 0xe8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop

080072c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a1a      	ldr	r2, [pc, #104]	@ (80073f0 <UART_InitCallbacksToDefault+0x74>)
 8007388:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a19      	ldr	r2, [pc, #100]	@ (80073f4 <UART_InitCallbacksToDefault+0x78>)
 8007390:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <UART_InitCallbacksToDefault+0x7c>)
 8007398:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a17      	ldr	r2, [pc, #92]	@ (80073fc <UART_InitCallbacksToDefault+0x80>)
 80073a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a16      	ldr	r2, [pc, #88]	@ (8007400 <UART_InitCallbacksToDefault+0x84>)
 80073a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a15      	ldr	r2, [pc, #84]	@ (8007404 <UART_InitCallbacksToDefault+0x88>)
 80073b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a14      	ldr	r2, [pc, #80]	@ (8007408 <UART_InitCallbacksToDefault+0x8c>)
 80073b8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a13      	ldr	r2, [pc, #76]	@ (800740c <UART_InitCallbacksToDefault+0x90>)
 80073c0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a12      	ldr	r2, [pc, #72]	@ (8007410 <UART_InitCallbacksToDefault+0x94>)
 80073c8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a11      	ldr	r2, [pc, #68]	@ (8007414 <UART_InitCallbacksToDefault+0x98>)
 80073d0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a10      	ldr	r2, [pc, #64]	@ (8007418 <UART_InitCallbacksToDefault+0x9c>)
 80073d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a0f      	ldr	r2, [pc, #60]	@ (800741c <UART_InitCallbacksToDefault+0xa0>)
 80073e0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	080072d9 	.word	0x080072d9
 80073f4:	080072c5 	.word	0x080072c5
 80073f8:	08007301 	.word	0x08007301
 80073fc:	080072ed 	.word	0x080072ed
 8007400:	08007315 	.word	0x08007315
 8007404:	08007329 	.word	0x08007329
 8007408:	0800733d 	.word	0x0800733d
 800740c:	08007351 	.word	0x08007351
 8007410:	08007ed9 	.word	0x08007ed9
 8007414:	08007eed 	.word	0x08007eed
 8007418:	08007f01 	.word	0x08007f01
 800741c:	08007365 	.word	0x08007365

08007420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007424:	b08c      	sub	sp, #48	@ 0x30
 8007426:	af00      	add	r7, sp, #0
 8007428:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800742a:	2300      	movs	r3, #0
 800742c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	431a      	orrs	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	431a      	orrs	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	4313      	orrs	r3, r2
 8007446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	4baa      	ldr	r3, [pc, #680]	@ (80076f8 <UART_SetConfig+0x2d8>)
 8007450:	4013      	ands	r3, r2
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007458:	430b      	orrs	r3, r1
 800745a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	68da      	ldr	r2, [r3, #12]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a9f      	ldr	r2, [pc, #636]	@ (80076fc <UART_SetConfig+0x2dc>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d004      	beq.n	800748c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007488:	4313      	orrs	r3, r2
 800748a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007496:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800749a:	697a      	ldr	r2, [r7, #20]
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a0:	430b      	orrs	r3, r1
 80074a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	f023 010f 	bic.w	r1, r3, #15
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a90      	ldr	r2, [pc, #576]	@ (8007700 <UART_SetConfig+0x2e0>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d125      	bne.n	8007510 <UART_SetConfig+0xf0>
 80074c4:	4b8f      	ldr	r3, [pc, #572]	@ (8007704 <UART_SetConfig+0x2e4>)
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d81a      	bhi.n	8007508 <UART_SetConfig+0xe8>
 80074d2:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <UART_SetConfig+0xb8>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074f9 	.word	0x080074f9
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	08007501 	.word	0x08007501
 80074e8:	2301      	movs	r3, #1
 80074ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ee:	e116      	b.n	800771e <UART_SetConfig+0x2fe>
 80074f0:	2302      	movs	r3, #2
 80074f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074f6:	e112      	b.n	800771e <UART_SetConfig+0x2fe>
 80074f8:	2304      	movs	r3, #4
 80074fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074fe:	e10e      	b.n	800771e <UART_SetConfig+0x2fe>
 8007500:	2308      	movs	r3, #8
 8007502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007506:	e10a      	b.n	800771e <UART_SetConfig+0x2fe>
 8007508:	2310      	movs	r3, #16
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800750e:	e106      	b.n	800771e <UART_SetConfig+0x2fe>
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a7c      	ldr	r2, [pc, #496]	@ (8007708 <UART_SetConfig+0x2e8>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d138      	bne.n	800758c <UART_SetConfig+0x16c>
 800751a:	4b7a      	ldr	r3, [pc, #488]	@ (8007704 <UART_SetConfig+0x2e4>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007520:	f003 030c 	and.w	r3, r3, #12
 8007524:	2b0c      	cmp	r3, #12
 8007526:	d82d      	bhi.n	8007584 <UART_SetConfig+0x164>
 8007528:	a201      	add	r2, pc, #4	@ (adr r2, 8007530 <UART_SetConfig+0x110>)
 800752a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752e:	bf00      	nop
 8007530:	08007565 	.word	0x08007565
 8007534:	08007585 	.word	0x08007585
 8007538:	08007585 	.word	0x08007585
 800753c:	08007585 	.word	0x08007585
 8007540:	08007575 	.word	0x08007575
 8007544:	08007585 	.word	0x08007585
 8007548:	08007585 	.word	0x08007585
 800754c:	08007585 	.word	0x08007585
 8007550:	0800756d 	.word	0x0800756d
 8007554:	08007585 	.word	0x08007585
 8007558:	08007585 	.word	0x08007585
 800755c:	08007585 	.word	0x08007585
 8007560:	0800757d 	.word	0x0800757d
 8007564:	2300      	movs	r3, #0
 8007566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800756a:	e0d8      	b.n	800771e <UART_SetConfig+0x2fe>
 800756c:	2302      	movs	r3, #2
 800756e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007572:	e0d4      	b.n	800771e <UART_SetConfig+0x2fe>
 8007574:	2304      	movs	r3, #4
 8007576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800757a:	e0d0      	b.n	800771e <UART_SetConfig+0x2fe>
 800757c:	2308      	movs	r3, #8
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007582:	e0cc      	b.n	800771e <UART_SetConfig+0x2fe>
 8007584:	2310      	movs	r3, #16
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800758a:	e0c8      	b.n	800771e <UART_SetConfig+0x2fe>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a5e      	ldr	r2, [pc, #376]	@ (800770c <UART_SetConfig+0x2ec>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d125      	bne.n	80075e2 <UART_SetConfig+0x1c2>
 8007596:	4b5b      	ldr	r3, [pc, #364]	@ (8007704 <UART_SetConfig+0x2e4>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80075a0:	2b30      	cmp	r3, #48	@ 0x30
 80075a2:	d016      	beq.n	80075d2 <UART_SetConfig+0x1b2>
 80075a4:	2b30      	cmp	r3, #48	@ 0x30
 80075a6:	d818      	bhi.n	80075da <UART_SetConfig+0x1ba>
 80075a8:	2b20      	cmp	r3, #32
 80075aa:	d00a      	beq.n	80075c2 <UART_SetConfig+0x1a2>
 80075ac:	2b20      	cmp	r3, #32
 80075ae:	d814      	bhi.n	80075da <UART_SetConfig+0x1ba>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <UART_SetConfig+0x19a>
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	d008      	beq.n	80075ca <UART_SetConfig+0x1aa>
 80075b8:	e00f      	b.n	80075da <UART_SetConfig+0x1ba>
 80075ba:	2300      	movs	r3, #0
 80075bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c0:	e0ad      	b.n	800771e <UART_SetConfig+0x2fe>
 80075c2:	2302      	movs	r3, #2
 80075c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075c8:	e0a9      	b.n	800771e <UART_SetConfig+0x2fe>
 80075ca:	2304      	movs	r3, #4
 80075cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d0:	e0a5      	b.n	800771e <UART_SetConfig+0x2fe>
 80075d2:	2308      	movs	r3, #8
 80075d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075d8:	e0a1      	b.n	800771e <UART_SetConfig+0x2fe>
 80075da:	2310      	movs	r3, #16
 80075dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80075e0:	e09d      	b.n	800771e <UART_SetConfig+0x2fe>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007710 <UART_SetConfig+0x2f0>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d125      	bne.n	8007638 <UART_SetConfig+0x218>
 80075ec:	4b45      	ldr	r3, [pc, #276]	@ (8007704 <UART_SetConfig+0x2e4>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80075f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80075f8:	d016      	beq.n	8007628 <UART_SetConfig+0x208>
 80075fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80075fc:	d818      	bhi.n	8007630 <UART_SetConfig+0x210>
 80075fe:	2b80      	cmp	r3, #128	@ 0x80
 8007600:	d00a      	beq.n	8007618 <UART_SetConfig+0x1f8>
 8007602:	2b80      	cmp	r3, #128	@ 0x80
 8007604:	d814      	bhi.n	8007630 <UART_SetConfig+0x210>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d002      	beq.n	8007610 <UART_SetConfig+0x1f0>
 800760a:	2b40      	cmp	r3, #64	@ 0x40
 800760c:	d008      	beq.n	8007620 <UART_SetConfig+0x200>
 800760e:	e00f      	b.n	8007630 <UART_SetConfig+0x210>
 8007610:	2300      	movs	r3, #0
 8007612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007616:	e082      	b.n	800771e <UART_SetConfig+0x2fe>
 8007618:	2302      	movs	r3, #2
 800761a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800761e:	e07e      	b.n	800771e <UART_SetConfig+0x2fe>
 8007620:	2304      	movs	r3, #4
 8007622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007626:	e07a      	b.n	800771e <UART_SetConfig+0x2fe>
 8007628:	2308      	movs	r3, #8
 800762a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800762e:	e076      	b.n	800771e <UART_SetConfig+0x2fe>
 8007630:	2310      	movs	r3, #16
 8007632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007636:	e072      	b.n	800771e <UART_SetConfig+0x2fe>
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a35      	ldr	r2, [pc, #212]	@ (8007714 <UART_SetConfig+0x2f4>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d12a      	bne.n	8007698 <UART_SetConfig+0x278>
 8007642:	4b30      	ldr	r3, [pc, #192]	@ (8007704 <UART_SetConfig+0x2e4>)
 8007644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800764c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007650:	d01a      	beq.n	8007688 <UART_SetConfig+0x268>
 8007652:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007656:	d81b      	bhi.n	8007690 <UART_SetConfig+0x270>
 8007658:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800765c:	d00c      	beq.n	8007678 <UART_SetConfig+0x258>
 800765e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007662:	d815      	bhi.n	8007690 <UART_SetConfig+0x270>
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <UART_SetConfig+0x250>
 8007668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800766c:	d008      	beq.n	8007680 <UART_SetConfig+0x260>
 800766e:	e00f      	b.n	8007690 <UART_SetConfig+0x270>
 8007670:	2300      	movs	r3, #0
 8007672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007676:	e052      	b.n	800771e <UART_SetConfig+0x2fe>
 8007678:	2302      	movs	r3, #2
 800767a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800767e:	e04e      	b.n	800771e <UART_SetConfig+0x2fe>
 8007680:	2304      	movs	r3, #4
 8007682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007686:	e04a      	b.n	800771e <UART_SetConfig+0x2fe>
 8007688:	2308      	movs	r3, #8
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800768e:	e046      	b.n	800771e <UART_SetConfig+0x2fe>
 8007690:	2310      	movs	r3, #16
 8007692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007696:	e042      	b.n	800771e <UART_SetConfig+0x2fe>
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a17      	ldr	r2, [pc, #92]	@ (80076fc <UART_SetConfig+0x2dc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d13a      	bne.n	8007718 <UART_SetConfig+0x2f8>
 80076a2:	4b18      	ldr	r3, [pc, #96]	@ (8007704 <UART_SetConfig+0x2e4>)
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80076ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076b0:	d01a      	beq.n	80076e8 <UART_SetConfig+0x2c8>
 80076b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80076b6:	d81b      	bhi.n	80076f0 <UART_SetConfig+0x2d0>
 80076b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076bc:	d00c      	beq.n	80076d8 <UART_SetConfig+0x2b8>
 80076be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076c2:	d815      	bhi.n	80076f0 <UART_SetConfig+0x2d0>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <UART_SetConfig+0x2b0>
 80076c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076cc:	d008      	beq.n	80076e0 <UART_SetConfig+0x2c0>
 80076ce:	e00f      	b.n	80076f0 <UART_SetConfig+0x2d0>
 80076d0:	2300      	movs	r3, #0
 80076d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076d6:	e022      	b.n	800771e <UART_SetConfig+0x2fe>
 80076d8:	2302      	movs	r3, #2
 80076da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076de:	e01e      	b.n	800771e <UART_SetConfig+0x2fe>
 80076e0:	2304      	movs	r3, #4
 80076e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076e6:	e01a      	b.n	800771e <UART_SetConfig+0x2fe>
 80076e8:	2308      	movs	r3, #8
 80076ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076ee:	e016      	b.n	800771e <UART_SetConfig+0x2fe>
 80076f0:	2310      	movs	r3, #16
 80076f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80076f6:	e012      	b.n	800771e <UART_SetConfig+0x2fe>
 80076f8:	cfff69f3 	.word	0xcfff69f3
 80076fc:	40008000 	.word	0x40008000
 8007700:	40013800 	.word	0x40013800
 8007704:	40021000 	.word	0x40021000
 8007708:	40004400 	.word	0x40004400
 800770c:	40004800 	.word	0x40004800
 8007710:	40004c00 	.word	0x40004c00
 8007714:	40005000 	.word	0x40005000
 8007718:	2310      	movs	r3, #16
 800771a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4aae      	ldr	r2, [pc, #696]	@ (80079dc <UART_SetConfig+0x5bc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	f040 8097 	bne.w	8007858 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800772a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800772e:	2b08      	cmp	r3, #8
 8007730:	d823      	bhi.n	800777a <UART_SetConfig+0x35a>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <UART_SetConfig+0x318>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	0800775d 	.word	0x0800775d
 800773c:	0800777b 	.word	0x0800777b
 8007740:	08007765 	.word	0x08007765
 8007744:	0800777b 	.word	0x0800777b
 8007748:	0800776b 	.word	0x0800776b
 800774c:	0800777b 	.word	0x0800777b
 8007750:	0800777b 	.word	0x0800777b
 8007754:	0800777b 	.word	0x0800777b
 8007758:	08007773 	.word	0x08007773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775c:	f7fc fdc8 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007762:	e010      	b.n	8007786 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007764:	4b9e      	ldr	r3, [pc, #632]	@ (80079e0 <UART_SetConfig+0x5c0>)
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007768:	e00d      	b.n	8007786 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776a:	f7fc fd53 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 800776e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007770:	e009      	b.n	8007786 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007778:	e005      	b.n	8007786 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007784:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 8130 	beq.w	80079ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007792:	4a94      	ldr	r2, [pc, #592]	@ (80079e4 <UART_SetConfig+0x5c4>)
 8007794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007798:	461a      	mov	r2, r3
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	fbb3 f3f2 	udiv	r3, r3, r2
 80077a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	4413      	add	r3, r2
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d305      	bcc.n	80077be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d903      	bls.n	80077c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80077c4:	e113      	b.n	80079ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c8:	2200      	movs	r2, #0
 80077ca:	60bb      	str	r3, [r7, #8]
 80077cc:	60fa      	str	r2, [r7, #12]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d2:	4a84      	ldr	r2, [pc, #528]	@ (80079e4 <UART_SetConfig+0x5c4>)
 80077d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2200      	movs	r2, #0
 80077dc:	603b      	str	r3, [r7, #0]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80077e8:	f7f8 fd16 	bl	8000218 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4610      	mov	r0, r2
 80077f2:	4619      	mov	r1, r3
 80077f4:	f04f 0200 	mov.w	r2, #0
 80077f8:	f04f 0300 	mov.w	r3, #0
 80077fc:	020b      	lsls	r3, r1, #8
 80077fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007802:	0202      	lsls	r2, r0, #8
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	6849      	ldr	r1, [r1, #4]
 8007808:	0849      	lsrs	r1, r1, #1
 800780a:	2000      	movs	r0, #0
 800780c:	460c      	mov	r4, r1
 800780e:	4605      	mov	r5, r0
 8007810:	eb12 0804 	adds.w	r8, r2, r4
 8007814:	eb43 0905 	adc.w	r9, r3, r5
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	469a      	mov	sl, r3
 8007820:	4693      	mov	fp, r2
 8007822:	4652      	mov	r2, sl
 8007824:	465b      	mov	r3, fp
 8007826:	4640      	mov	r0, r8
 8007828:	4649      	mov	r1, r9
 800782a:	f7f8 fcf5 	bl	8000218 <__aeabi_uldivmod>
 800782e:	4602      	mov	r2, r0
 8007830:	460b      	mov	r3, r1
 8007832:	4613      	mov	r3, r2
 8007834:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800783c:	d308      	bcc.n	8007850 <UART_SetConfig+0x430>
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007844:	d204      	bcs.n	8007850 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	6a3a      	ldr	r2, [r7, #32]
 800784c:	60da      	str	r2, [r3, #12]
 800784e:	e0ce      	b.n	80079ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007856:	e0ca      	b.n	80079ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007860:	d166      	bne.n	8007930 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007862:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007866:	2b08      	cmp	r3, #8
 8007868:	d827      	bhi.n	80078ba <UART_SetConfig+0x49a>
 800786a:	a201      	add	r2, pc, #4	@ (adr r2, 8007870 <UART_SetConfig+0x450>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	08007895 	.word	0x08007895
 8007874:	0800789d 	.word	0x0800789d
 8007878:	080078a5 	.word	0x080078a5
 800787c:	080078bb 	.word	0x080078bb
 8007880:	080078ab 	.word	0x080078ab
 8007884:	080078bb 	.word	0x080078bb
 8007888:	080078bb 	.word	0x080078bb
 800788c:	080078bb 	.word	0x080078bb
 8007890:	080078b3 	.word	0x080078b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007894:	f7fc fd2c 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800789a:	e014      	b.n	80078c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800789c:	f7fc fd3e 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 80078a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078a2:	e010      	b.n	80078c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078a4:	4b4e      	ldr	r3, [pc, #312]	@ (80079e0 <UART_SetConfig+0x5c0>)
 80078a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078a8:	e00d      	b.n	80078c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078aa:	f7fc fcb3 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 80078ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80078b0:	e009      	b.n	80078c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80078b8:	e005      	b.n	80078c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80078c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	f000 8090 	beq.w	80079ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d2:	4a44      	ldr	r2, [pc, #272]	@ (80079e4 <UART_SetConfig+0x5c4>)
 80078d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078d8:	461a      	mov	r2, r3
 80078da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e0:	005a      	lsls	r2, r3, #1
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	085b      	lsrs	r3, r3, #1
 80078e8:	441a      	add	r2, r3
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	2b0f      	cmp	r3, #15
 80078f8:	d916      	bls.n	8007928 <UART_SetConfig+0x508>
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007900:	d212      	bcs.n	8007928 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f023 030f 	bic.w	r3, r3, #15
 800790a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800790c:	6a3b      	ldr	r3, [r7, #32]
 800790e:	085b      	lsrs	r3, r3, #1
 8007910:	b29b      	uxth	r3, r3
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	b29a      	uxth	r2, r3
 8007918:	8bfb      	ldrh	r3, [r7, #30]
 800791a:	4313      	orrs	r3, r2
 800791c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	8bfa      	ldrh	r2, [r7, #30]
 8007924:	60da      	str	r2, [r3, #12]
 8007926:	e062      	b.n	80079ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800792e:	e05e      	b.n	80079ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007930:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007934:	2b08      	cmp	r3, #8
 8007936:	d828      	bhi.n	800798a <UART_SetConfig+0x56a>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <UART_SetConfig+0x520>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	08007965 	.word	0x08007965
 8007944:	0800796d 	.word	0x0800796d
 8007948:	08007975 	.word	0x08007975
 800794c:	0800798b 	.word	0x0800798b
 8007950:	0800797b 	.word	0x0800797b
 8007954:	0800798b 	.word	0x0800798b
 8007958:	0800798b 	.word	0x0800798b
 800795c:	0800798b 	.word	0x0800798b
 8007960:	08007983 	.word	0x08007983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007964:	f7fc fcc4 	bl	80042f0 <HAL_RCC_GetPCLK1Freq>
 8007968:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800796a:	e014      	b.n	8007996 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800796c:	f7fc fcd6 	bl	800431c <HAL_RCC_GetPCLK2Freq>
 8007970:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007972:	e010      	b.n	8007996 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007974:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <UART_SetConfig+0x5c0>)
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007978:	e00d      	b.n	8007996 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800797a:	f7fc fc4b 	bl	8004214 <HAL_RCC_GetSysClockFreq>
 800797e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007980:	e009      	b.n	8007996 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007982:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007986:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007988:	e005      	b.n	8007996 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007994:	bf00      	nop
    }

    if (pclk != 0U)
 8007996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007998:	2b00      	cmp	r3, #0
 800799a:	d028      	beq.n	80079ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a0:	4a10      	ldr	r2, [pc, #64]	@ (80079e4 <UART_SetConfig+0x5c4>)
 80079a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a6:	461a      	mov	r2, r3
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	085b      	lsrs	r3, r3, #1
 80079b4:	441a      	add	r2, r3
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80079be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	2b0f      	cmp	r3, #15
 80079c4:	d910      	bls.n	80079e8 <UART_SetConfig+0x5c8>
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079cc:	d20c      	bcs.n	80079e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	60da      	str	r2, [r3, #12]
 80079d8:	e009      	b.n	80079ee <UART_SetConfig+0x5ce>
 80079da:	bf00      	nop
 80079dc:	40008000 	.word	0x40008000
 80079e0:	00f42400 	.word	0x00f42400
 80079e4:	080081a4 	.word	0x080081a4
      }
      else
      {
        ret = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2200      	movs	r2, #0
 8007a02:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	2200      	movs	r2, #0
 8007a08:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007a0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3730      	adds	r7, #48	@ 0x30
 8007a12:	46bd      	mov	sp, r7
 8007a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00a      	beq.n	8007a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00a      	beq.n	8007a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	430a      	orrs	r2, r1
 8007a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00a      	beq.n	8007a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00a      	beq.n	8007aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00a      	beq.n	8007aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	430a      	orrs	r2, r1
 8007aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01a      	beq.n	8007b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b16:	d10a      	bne.n	8007b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	430a      	orrs	r2, r1
 8007b4e:	605a      	str	r2, [r3, #4]
  }
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b098      	sub	sp, #96	@ 0x60
 8007b60:	af02      	add	r7, sp, #8
 8007b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b6c:	f7f9 ffda 	bl	8001b24 <HAL_GetTick>
 8007b70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b08      	cmp	r3, #8
 8007b7e:	d12f      	bne.n	8007be0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f88e 	bl	8007cb0 <UART_WaitOnFlagUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d022      	beq.n	8007be0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ba2:	e853 3f00 	ldrex	r3, [r3]
 8007ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bc0:	e841 2300 	strex	r3, r2, [r1]
 8007bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1e6      	bne.n	8007b9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2220      	movs	r2, #32
 8007bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	e063      	b.n	8007ca8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d149      	bne.n	8007c82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f857 	bl	8007cb0 <UART_WaitOnFlagUntilTimeout>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d03c      	beq.n	8007c82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	623b      	str	r3, [r7, #32]
   return(result);
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c26:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f023 0301 	bic.w	r3, r3, #1
 8007c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3308      	adds	r3, #8
 8007c58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c5a:	61fa      	str	r2, [r7, #28]
 8007c5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	69b9      	ldr	r1, [r7, #24]
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	617b      	str	r3, [r7, #20]
   return(result);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e5      	bne.n	8007c3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e012      	b.n	8007ca8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3758      	adds	r7, #88	@ 0x58
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc0:	e04f      	b.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc8:	d04b      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cca:	f7f9 ff2b 	bl	8001b24 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d302      	bcc.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d101      	bne.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e04e      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d037      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b80      	cmp	r3, #128	@ 0x80
 8007cf6:	d034      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b40      	cmp	r3, #64	@ 0x40
 8007cfc:	d031      	beq.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d110      	bne.n	8007d2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2208      	movs	r2, #8
 8007d12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f838 	bl	8007d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e029      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d3c:	d111      	bne.n	8007d62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f000 f81e 	bl	8007d8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e00f      	b.n	8007d82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	69da      	ldr	r2, [r3, #28]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	bf0c      	ite	eq
 8007d72:	2301      	moveq	r3, #1
 8007d74:	2300      	movne	r3, #0
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	461a      	mov	r2, r3
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d0a0      	beq.n	8007cc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b095      	sub	sp, #84	@ 0x54
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007db2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007db6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e6      	bne.n	8007d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007dda:	f023 0301 	bic.w	r3, r3, #1
 8007dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3308      	adds	r3, #8
 8007de6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007de8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e3      	bne.n	8007dc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d118      	bne.n	8007e36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f023 0310 	bic.w	r3, r3, #16
 8007e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e22:	61bb      	str	r3, [r7, #24]
 8007e24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e26:	6979      	ldr	r1, [r7, #20]
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	e841 2300 	strex	r3, r2, [r1]
 8007e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1e6      	bne.n	8007e04 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2220      	movs	r2, #32
 8007e3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007e4a:	bf00      	nop
 8007e4c:	3754      	adds	r7, #84	@ 0x54
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b088      	sub	sp, #32
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	e853 3f00 	ldrex	r3, [r3]
 8007e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	61bb      	str	r3, [r7, #24]
 8007ea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	6979      	ldr	r1, [r7, #20]
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e6      	bne.n	8007e86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ed0:	bf00      	nop
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ef4:	bf00      	nop
 8007ef6:	370c      	adds	r7, #12
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr

08007f00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d101      	bne.n	8007f2a <HAL_UARTEx_DisableFifoMode+0x16>
 8007f26:	2302      	movs	r3, #2
 8007f28:	e027      	b.n	8007f7a <HAL_UARTEx_DisableFifoMode+0x66>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2224      	movs	r2, #36	@ 0x24
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0201 	bic.w	r2, r2, #1
 8007f50:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007f58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3714      	adds	r7, #20
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d101      	bne.n	8007f9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e02d      	b.n	8007ffa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2224      	movs	r2, #36	@ 0x24
 8007faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0201 	bic.w	r2, r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f850 	bl	8008080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2220      	movs	r2, #32
 8007fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b084      	sub	sp, #16
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008012:	2b01      	cmp	r3, #1
 8008014:	d101      	bne.n	800801a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008016:	2302      	movs	r3, #2
 8008018:	e02d      	b.n	8008076 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2224      	movs	r2, #36	@ 0x24
 8008026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f022 0201 	bic.w	r2, r2, #1
 8008040:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	683a      	ldr	r2, [r7, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 f812 	bl	8008080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800808c:	2b00      	cmp	r3, #0
 800808e:	d108      	bne.n	80080a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080a0:	e031      	b.n	8008106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080a2:	2308      	movs	r3, #8
 80080a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080a6:	2308      	movs	r3, #8
 80080a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	0e5b      	lsrs	r3, r3, #25
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	0f5b      	lsrs	r3, r3, #29
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ca:	7bbb      	ldrb	r3, [r7, #14]
 80080cc:	7b3a      	ldrb	r2, [r7, #12]
 80080ce:	4911      	ldr	r1, [pc, #68]	@ (8008114 <UARTEx_SetNbDataToProcess+0x94>)
 80080d0:	5c8a      	ldrb	r2, [r1, r2]
 80080d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080d6:	7b3a      	ldrb	r2, [r7, #12]
 80080d8:	490f      	ldr	r1, [pc, #60]	@ (8008118 <UARTEx_SetNbDataToProcess+0x98>)
 80080da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080e8:	7bfb      	ldrb	r3, [r7, #15]
 80080ea:	7b7a      	ldrb	r2, [r7, #13]
 80080ec:	4909      	ldr	r1, [pc, #36]	@ (8008114 <UARTEx_SetNbDataToProcess+0x94>)
 80080ee:	5c8a      	ldrb	r2, [r1, r2]
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080f4:	7b7a      	ldrb	r2, [r7, #13]
 80080f6:	4908      	ldr	r1, [pc, #32]	@ (8008118 <UARTEx_SetNbDataToProcess+0x98>)
 80080f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	080081bc 	.word	0x080081bc
 8008118:	080081c4 	.word	0x080081c4

0800811c <memset>:
 800811c:	4402      	add	r2, r0
 800811e:	4603      	mov	r3, r0
 8008120:	4293      	cmp	r3, r2
 8008122:	d100      	bne.n	8008126 <memset+0xa>
 8008124:	4770      	bx	lr
 8008126:	f803 1b01 	strb.w	r1, [r3], #1
 800812a:	e7f9      	b.n	8008120 <memset+0x4>

0800812c <__libc_init_array>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4d0d      	ldr	r5, [pc, #52]	@ (8008164 <__libc_init_array+0x38>)
 8008130:	4c0d      	ldr	r4, [pc, #52]	@ (8008168 <__libc_init_array+0x3c>)
 8008132:	1b64      	subs	r4, r4, r5
 8008134:	10a4      	asrs	r4, r4, #2
 8008136:	2600      	movs	r6, #0
 8008138:	42a6      	cmp	r6, r4
 800813a:	d109      	bne.n	8008150 <__libc_init_array+0x24>
 800813c:	4d0b      	ldr	r5, [pc, #44]	@ (800816c <__libc_init_array+0x40>)
 800813e:	4c0c      	ldr	r4, [pc, #48]	@ (8008170 <__libc_init_array+0x44>)
 8008140:	f000 f818 	bl	8008174 <_init>
 8008144:	1b64      	subs	r4, r4, r5
 8008146:	10a4      	asrs	r4, r4, #2
 8008148:	2600      	movs	r6, #0
 800814a:	42a6      	cmp	r6, r4
 800814c:	d105      	bne.n	800815a <__libc_init_array+0x2e>
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	f855 3b04 	ldr.w	r3, [r5], #4
 8008154:	4798      	blx	r3
 8008156:	3601      	adds	r6, #1
 8008158:	e7ee      	b.n	8008138 <__libc_init_array+0xc>
 800815a:	f855 3b04 	ldr.w	r3, [r5], #4
 800815e:	4798      	blx	r3
 8008160:	3601      	adds	r6, #1
 8008162:	e7f2      	b.n	800814a <__libc_init_array+0x1e>
 8008164:	080081d4 	.word	0x080081d4
 8008168:	080081d4 	.word	0x080081d4
 800816c:	080081d4 	.word	0x080081d4
 8008170:	080081d8 	.word	0x080081d8

08008174 <_init>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr

08008180 <_fini>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr
