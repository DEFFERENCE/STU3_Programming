
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08004bd0  08004bd0  00005bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be0  08004be0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004be0  08004be0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004be0  08004be0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be0  08004be0  00005be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004be4  08004be4  00005be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004be8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000000c  08004bf4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004bf4  00006218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001015d  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002105  00000000  00000000  00016199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  000182a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d18  00000000  00000000  00019398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d48  00000000  00000000  0001a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000119a0  00000000  00000000  00040df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108be6  00000000  00000000  00052798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b37e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004910  00000000  00000000  0015b3c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0015fcd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004bb8 	.word	0x08004bb8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004bb8 	.word	0x08004bb8

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fe89 	bl	8000f32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f81c 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fb3a 	bl	800089c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000228:	f000 f9dc 	bl	80005e4 <MX_TIM3_Init>
  MX_ADC1_Init();
 800022c:	f000 f862 	bl	80002f4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000230:	f000 f8da 	bl	80003e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000234:	f000 f988 	bl	8000548 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000238:	f000 fa2a 	bl	8000690 <MX_TIM4_Init>
  MX_TIM20_Init();
 800023c:	f000 fa7e 	bl	800073c <MX_TIM20_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000240:	213c      	movs	r1, #60	@ 0x3c
 8000242:	4804      	ldr	r0, [pc, #16]	@ (8000254 <main+0x3c>)
 8000244:	f003 fc0a 	bl	8003a5c <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000248:	4b02      	ldr	r3, [pc, #8]	@ (8000254 <main+0x3c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800024e:	4a02      	ldr	r2, [pc, #8]	@ (8000258 <main+0x40>)
 8000250:	6013      	str	r3, [r2, #0]
 8000252:	e7f9      	b.n	8000248 <main+0x30>
 8000254:	2000012c 	.word	0x2000012c
 8000258:	20000210 	.word	0x20000210

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b094      	sub	sp, #80	@ 0x50
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2238      	movs	r2, #56	@ 0x38
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f004 fc78 	bl	8004b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800027e:	2000      	movs	r0, #0
 8000280:	f002 fa96 	bl	80027b0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000284:	2302      	movs	r3, #2
 8000286:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000288:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800028c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2340      	movs	r3, #64	@ 0x40
 8000290:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000296:	2302      	movs	r3, #2
 8000298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800029a:	2304      	movs	r3, #4
 800029c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800029e:	2355      	movs	r3, #85	@ 0x55
 80002a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002a2:	2302      	movs	r3, #2
 80002a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002aa:	2302      	movs	r3, #2
 80002ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fb30 	bl	8002918 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002be:	f000 fbf5 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	2303      	movs	r3, #3
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2104      	movs	r1, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fe2e 	bl	8002f3c <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80002e6:	f000 fbe1 	bl	8000aac <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3750      	adds	r7, #80	@ 0x50
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b08c      	sub	sp, #48	@ 0x30
 80002f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2220      	movs	r2, #32
 800030a:	2100      	movs	r1, #0
 800030c:	4618      	mov	r0, r3
 800030e:	f004 fc27 	bl	8004b60 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000312:	4b32      	ldr	r3, [pc, #200]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000314:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000318:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800031a:	4b30      	ldr	r3, [pc, #192]	@ (80003dc <MX_ADC1_Init+0xe8>)
 800031c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000320:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000322:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000328:	4b2c      	ldr	r3, [pc, #176]	@ (80003dc <MX_ADC1_Init+0xe8>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800032e:	4b2b      	ldr	r3, [pc, #172]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000330:	2200      	movs	r2, #0
 8000332:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000334:	4b29      	ldr	r3, [pc, #164]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000336:	2200      	movs	r2, #0
 8000338:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800033a:	4b28      	ldr	r3, [pc, #160]	@ (80003dc <MX_ADC1_Init+0xe8>)
 800033c:	2204      	movs	r2, #4
 800033e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000340:	4b26      	ldr	r3, [pc, #152]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000346:	4b25      	ldr	r3, [pc, #148]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000348:	2200      	movs	r2, #0
 800034a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800034c:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <MX_ADC1_Init+0xe8>)
 800034e:	2201      	movs	r2, #1
 8000350:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000352:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000354:	2200      	movs	r2, #0
 8000356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <MX_ADC1_Init+0xe8>)
 800035c:	2200      	movs	r2, #0
 800035e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000362:	2200      	movs	r2, #0
 8000364:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000368:	2200      	movs	r2, #0
 800036a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800036e:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000370:	2200      	movs	r2, #0
 8000372:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000374:	4b19      	ldr	r3, [pc, #100]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000376:	2200      	movs	r2, #0
 8000378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800037c:	4817      	ldr	r0, [pc, #92]	@ (80003dc <MX_ADC1_Init+0xe8>)
 800037e:	f001 f81f 	bl	80013c0 <HAL_ADC_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000388:	f000 fb90 	bl	8000aac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800038c:	2300      	movs	r3, #0
 800038e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000394:	4619      	mov	r1, r3
 8000396:	4811      	ldr	r0, [pc, #68]	@ (80003dc <MX_ADC1_Init+0xe8>)
 8000398:	f001 fe34 	bl	8002004 <HAL_ADCEx_MultiModeConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80003a2:	f000 fb83 	bl	8000aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_ADC1_Init+0xec>)
 80003a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003aa:	2306      	movs	r3, #6
 80003ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 80003b2:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_ADC1_Init+0xf0>)
 80003b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003b6:	2304      	movs	r3, #4
 80003b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4619      	mov	r1, r3
 80003c2:	4806      	ldr	r0, [pc, #24]	@ (80003dc <MX_ADC1_Init+0xe8>)
 80003c4:	f001 f9b8 	bl	8001738 <HAL_ADC_ConfigChannel>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80003ce:	f000 fb6d 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	3730      	adds	r7, #48	@ 0x30
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000028 	.word	0x20000028
 80003e0:	04300002 	.word	0x04300002
 80003e4:	407f0000 	.word	0x407f0000

080003e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b09c      	sub	sp, #112	@ 0x70
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000408:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
 8000410:	605a      	str	r2, [r3, #4]
 8000412:	609a      	str	r2, [r3, #8]
 8000414:	60da      	str	r2, [r3, #12]
 8000416:	611a      	str	r2, [r3, #16]
 8000418:	615a      	str	r2, [r3, #20]
 800041a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2234      	movs	r2, #52	@ 0x34
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f004 fb9c 	bl	8004b60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000428:	4b45      	ldr	r3, [pc, #276]	@ (8000540 <MX_TIM1_Init+0x158>)
 800042a:	4a46      	ldr	r2, [pc, #280]	@ (8000544 <MX_TIM1_Init+0x15c>)
 800042c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800042e:	4b44      	ldr	r3, [pc, #272]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000434:	4b42      	ldr	r3, [pc, #264]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800043a:	4b41      	ldr	r3, [pc, #260]	@ (8000540 <MX_TIM1_Init+0x158>)
 800043c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000440:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000442:	4b3f      	ldr	r3, [pc, #252]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000448:	4b3d      	ldr	r3, [pc, #244]	@ (8000540 <MX_TIM1_Init+0x158>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044e:	4b3c      	ldr	r3, [pc, #240]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000454:	483a      	ldr	r0, [pc, #232]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000456:	f003 f9a3 	bl	80037a0 <HAL_TIM_Base_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000460:	f000 fb24 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000464:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000468:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800046a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800046e:	4619      	mov	r1, r3
 8000470:	4833      	ldr	r0, [pc, #204]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000472:	f003 fc95 	bl	8003da0 <HAL_TIM_ConfigClockSource>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800047c:	f000 fb16 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000480:	482f      	ldr	r0, [pc, #188]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000482:	f003 f9e4 	bl	800384e <HAL_TIM_PWM_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800048c:	f000 fb0e 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000494:	2300      	movs	r3, #0
 8000496:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000498:	2300      	movs	r3, #0
 800049a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800049c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80004a0:	4619      	mov	r1, r3
 80004a2:	4827      	ldr	r0, [pc, #156]	@ (8000540 <MX_TIM1_Init+0x158>)
 80004a4:	f004 fa32 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80004ae:	f000 fafd 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004b2:	2360      	movs	r3, #96	@ 0x60
 80004b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ba:	2300      	movs	r3, #0
 80004bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004be:	2300      	movs	r3, #0
 80004c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004c2:	2300      	movs	r3, #0
 80004c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004c6:	2300      	movs	r3, #0
 80004c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004ca:	2300      	movs	r3, #0
 80004cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80004ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80004d2:	2208      	movs	r2, #8
 80004d4:	4619      	mov	r1, r3
 80004d6:	481a      	ldr	r0, [pc, #104]	@ (8000540 <MX_TIM1_Init+0x158>)
 80004d8:	f003 fb4e 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80004e2:	f000 fae3 	bl	8000aac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000500:	2300      	movs	r3, #0
 8000502:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800050c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000510:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000516:	2300      	movs	r3, #0
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800051a:	2300      	movs	r3, #0
 800051c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4807      	ldr	r0, [pc, #28]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000524:	f004 fa88 	bl	8004a38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800052e:	f000 fabd 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <MX_TIM1_Init+0x158>)
 8000534:	f000 fc10 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000538:	bf00      	nop
 800053a:	3770      	adds	r7, #112	@ 0x70
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000094 	.word	0x20000094
 8000544:	40012c00 	.word	0x40012c00

08000548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054e:	f107 0310 	add.w	r3, r7, #16
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000568:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800056c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800056e:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_TIM2_Init+0x98>)
 800057c:	f04f 32ff 	mov.w	r2, #4294967295
 8000580:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000582:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000588:	4b15      	ldr	r3, [pc, #84]	@ (80005e0 <MX_TIM2_Init+0x98>)
 800058a:	2200      	movs	r2, #0
 800058c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800058e:	4814      	ldr	r0, [pc, #80]	@ (80005e0 <MX_TIM2_Init+0x98>)
 8000590:	f003 f906 	bl	80037a0 <HAL_TIM_Base_Init>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800059a:	f000 fa87 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	4619      	mov	r1, r3
 80005aa:	480d      	ldr	r0, [pc, #52]	@ (80005e0 <MX_TIM2_Init+0x98>)
 80005ac:	f003 fbf8 	bl	8003da0 <HAL_TIM_ConfigClockSource>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005b6:	f000 fa79 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <MX_TIM2_Init+0x98>)
 80005c8:	f004 f9a0 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005d2:	f000 fa6b 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	200000e0 	.word	0x200000e0

080005e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	@ 0x30
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	2224      	movs	r2, #36	@ 0x24
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fab4 	bl	8004b60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000602:	4b21      	ldr	r3, [pc, #132]	@ (8000688 <MX_TIM3_Init+0xa4>)
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <MX_TIM3_Init+0xa8>)
 8000606:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000608:	4b1f      	ldr	r3, [pc, #124]	@ (8000688 <MX_TIM3_Init+0xa4>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060e:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_TIM3_Init+0xa4>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3071;
 8000614:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_TIM3_Init+0xa4>)
 8000616:	f640 32ff 	movw	r2, #3071	@ 0xbff
 800061a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <MX_TIM3_Init+0xa4>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000622:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_TIM3_Init+0xa4>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000628:	2303      	movs	r3, #3
 800062a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800063c:	2300      	movs	r3, #0
 800063e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000640:	2301      	movs	r3, #1
 8000642:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	4619      	mov	r1, r3
 8000652:	480d      	ldr	r0, [pc, #52]	@ (8000688 <MX_TIM3_Init+0xa4>)
 8000654:	f003 f95c 	bl	8003910 <HAL_TIM_Encoder_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800065e:	f000 fa25 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000662:	2300      	movs	r3, #0
 8000664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_TIM3_Init+0xa4>)
 8000670:	f004 f94c 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800067a:	f000 fa17 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3730      	adds	r7, #48	@ 0x30
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000012c 	.word	0x2000012c
 800068c:	40000400 	.word	0x40000400

08000690 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	@ 0x30
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2224      	movs	r2, #36	@ 0x24
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f004 fa5e 	bl	8004b60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006ae:	4b21      	ldr	r3, [pc, #132]	@ (8000734 <MX_TIM4_Init+0xa4>)
 80006b0:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <MX_TIM4_Init+0xa8>)
 80006b2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80006b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000734 <MX_TIM4_Init+0xa4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <MX_TIM4_Init+0xa4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80006c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000734 <MX_TIM4_Init+0xa4>)
 80006c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80006c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000734 <MX_TIM4_Init+0xa4>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006ce:	4b19      	ldr	r3, [pc, #100]	@ (8000734 <MX_TIM4_Init+0xa4>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006dc:	2301      	movs	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006ec:	2301      	movs	r3, #1
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4619      	mov	r1, r3
 80006fe:	480d      	ldr	r0, [pc, #52]	@ (8000734 <MX_TIM4_Init+0xa4>)
 8000700:	f003 f906 	bl	8003910 <HAL_TIM_Encoder_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800070a:	f000 f9cf 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000716:	463b      	mov	r3, r7
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	@ (8000734 <MX_TIM4_Init+0xa4>)
 800071c:	f004 f8f6 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000726:	f000 f9c1 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	3730      	adds	r7, #48	@ 0x30
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000178 	.word	0x20000178
 8000738:	40000800 	.word	0x40000800

0800073c <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b09c      	sub	sp, #112	@ 0x70
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2234      	movs	r2, #52	@ 0x34
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f004 f9f2 	bl	8004b60 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 800077c:	4b45      	ldr	r3, [pc, #276]	@ (8000894 <MX_TIM20_Init+0x158>)
 800077e:	4a46      	ldr	r2, [pc, #280]	@ (8000898 <MX_TIM20_Init+0x15c>)
 8000780:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8000782:	4b44      	ldr	r3, [pc, #272]	@ (8000894 <MX_TIM20_Init+0x158>)
 8000784:	2200      	movs	r2, #0
 8000786:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <MX_TIM20_Init+0x158>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 800078e:	4b41      	ldr	r3, [pc, #260]	@ (8000894 <MX_TIM20_Init+0x158>)
 8000790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000794:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b3f      	ldr	r3, [pc, #252]	@ (8000894 <MX_TIM20_Init+0x158>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 800079c:	4b3d      	ldr	r3, [pc, #244]	@ (8000894 <MX_TIM20_Init+0x158>)
 800079e:	2200      	movs	r2, #0
 80007a0:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <MX_TIM20_Init+0x158>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80007a8:	483a      	ldr	r0, [pc, #232]	@ (8000894 <MX_TIM20_Init+0x158>)
 80007aa:	f002 fff9 	bl	80037a0 <HAL_TIM_Base_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 f97a 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 80007be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007c2:	4619      	mov	r1, r3
 80007c4:	4833      	ldr	r0, [pc, #204]	@ (8000894 <MX_TIM20_Init+0x158>)
 80007c6:	f003 faeb 	bl	8003da0 <HAL_TIM_ConfigClockSource>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 80007d0:	f000 f96c 	bl	8000aac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80007d4:	482f      	ldr	r0, [pc, #188]	@ (8000894 <MX_TIM20_Init+0x158>)
 80007d6:	f003 f83a 	bl	800384e <HAL_TIM_PWM_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 80007e0:	f000 f964 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80007f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007f4:	4619      	mov	r1, r3
 80007f6:	4827      	ldr	r0, [pc, #156]	@ (8000894 <MX_TIM20_Init+0x158>)
 80007f8:	f004 f888 	bl	800490c <HAL_TIMEx_MasterConfigSynchronization>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8000802:	f000 f953 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000806:	2360      	movs	r3, #96	@ 0x60
 8000808:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080e:	2300      	movs	r3, #0
 8000810:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000812:	2300      	movs	r3, #0
 8000814:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000822:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000826:	2200      	movs	r2, #0
 8000828:	4619      	mov	r1, r3
 800082a:	481a      	ldr	r0, [pc, #104]	@ (8000894 <MX_TIM20_Init+0x158>)
 800082c:	f003 f9a4 	bl	8003b78 <HAL_TIM_PWM_ConfigChannel>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8000836:	f000 f939 	bl	8000aac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800084e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000852:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000860:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000864:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4807      	ldr	r0, [pc, #28]	@ (8000894 <MX_TIM20_Init+0x158>)
 8000878:	f004 f8de 	bl	8004a38 <HAL_TIMEx_ConfigBreakDeadTime>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM20_Init+0x14a>
  {
    Error_Handler();
 8000882:	f000 f913 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8000886:	4803      	ldr	r0, [pc, #12]	@ (8000894 <MX_TIM20_Init+0x158>)
 8000888:	f000 fa66 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 800088c:	bf00      	nop
 800088e:	3770      	adds	r7, #112	@ 0x70
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001c4 	.word	0x200001c4
 8000898:	40015000 	.word	0x40015000

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	@ 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b7b      	ldr	r3, [pc, #492]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a7a      	ldr	r2, [pc, #488]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b78      	ldr	r3, [pc, #480]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b75      	ldr	r3, [pc, #468]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ce:	4a74      	ldr	r2, [pc, #464]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d6:	4b72      	ldr	r3, [pc, #456]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b6f      	ldr	r3, [pc, #444]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e6:	4a6e      	ldr	r2, [pc, #440]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ee:	4b6c      	ldr	r3, [pc, #432]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b69      	ldr	r3, [pc, #420]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a68      	ldr	r2, [pc, #416]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b66      	ldr	r3, [pc, #408]	@ (8000aa0 <MX_GPIO_Init+0x204>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091a:	f001 ff0d 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2102      	movs	r1, #2
 8000922:	4860      	ldr	r0, [pc, #384]	@ (8000aa4 <MX_GPIO_Init+0x208>)
 8000924:	f001 ff08 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000928:	230c      	movs	r3, #12
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000938:	230c      	movs	r3, #12
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000946:	f001 fd75 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800094a:	2320      	movs	r3, #32
 800094c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800095a:	2305      	movs	r3, #5
 800095c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000968:	f001 fd64 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_18V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin;
 800096c:	2380      	movs	r3, #128	@ 0x80
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000986:	f001 fd55 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800098a:	2330      	movs	r3, #48	@ 0x30
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099a:	2307      	movs	r3, #7
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4840      	ldr	r0, [pc, #256]	@ (8000aa8 <MX_GPIO_Init+0x20c>)
 80009a6:	f001 fd45 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 80009aa:	2302      	movs	r3, #2
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4838      	ldr	r0, [pc, #224]	@ (8000aa4 <MX_GPIO_Init+0x208>)
 80009c2:	f001 fd37 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Proximity_sensor_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Proximity_sensor_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_pen_1_Pin;
 80009c6:	f44f 43cc 	mov.w	r3, #26112	@ 0x6600
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009cc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4831      	ldr	r0, [pc, #196]	@ (8000aa4 <MX_GPIO_Init+0x208>)
 80009de:	f001 fd29 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_Pin */
  GPIO_InitStruct.Pin = Servo_Pin;
 80009e2:	2340      	movs	r3, #64	@ 0x40
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80009f2:	2304      	movs	r3, #4
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	482a      	ldr	r0, [pc, #168]	@ (8000aa8 <MX_GPIO_Init+0x20c>)
 80009fe:	f001 fd19 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_sensorA12_Pin Limit_Switch_Prismatic2_Pin */
  GPIO_InitStruct.Pin = Proximity_sensorA12_Pin|Limit_Switch_Prismatic2_Pin;
 8000a02:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1c:	f001 fd0a 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : PS2_Joy_stick_Attention_Pin */
  GPIO_InitStruct.Pin = PS2_Joy_stick_Attention_Pin;
 8000a20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PS2_Joy_stick_Attention_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	481c      	ldr	r0, [pc, #112]	@ (8000aa8 <MX_GPIO_Init+0x20c>)
 8000a36:	f001 fcfd 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8000a3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4815      	ldr	r0, [pc, #84]	@ (8000aa8 <MX_GPIO_Init+0x20c>)
 8000a52:	f001 fcef 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a56:	2330      	movs	r3, #48	@ 0x30
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a66:	2305      	movs	r3, #5
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_GPIO_Init+0x208>)
 8000a72:	f001 fcdf 	bl	8002434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2017      	movs	r0, #23
 8000a7c:	f001 fca5 	bl	80023ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a80:	2017      	movs	r0, #23
 8000a82:	f001 fcbc 	bl	80023fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2028      	movs	r0, #40	@ 0x28
 8000a8c:	f001 fc9d 	bl	80023ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a90:	2028      	movs	r0, #40	@ 0x28
 8000a92:	f001 fcb4 	bl	80023fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	@ 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000400 	.word	0x48000400
 8000aa8:	48000800 	.word	0x48000800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8000afc <HAL_MspInit+0x44>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aca:	4b0c      	ldr	r3, [pc, #48]	@ (8000afc <HAL_MspInit+0x44>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x44>)
 8000ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x44>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x44>)
 8000ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aee:	f001 ff03 	bl	80028f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09e      	sub	sp, #120	@ 0x78
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b18:	f107 0310 	add.w	r3, r7, #16
 8000b1c:	2254      	movs	r2, #84	@ 0x54
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f004 f81d 	bl	8004b60 <memset>
  if(hadc->Instance==ADC1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000b2e:	d134      	bne.n	8000b9a <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b34:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000b36:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b3a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	4618      	mov	r0, r3
 8000b42:	f002 fbdf 	bl	8003304 <HAL_RCCEx_PeriphCLKConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b4c:	f7ff ffae 	bl	8000aac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <HAL_ADC_MspInit+0xa4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b54:	4a13      	ldr	r2, [pc, #76]	@ (8000ba4 <HAL_ADC_MspInit+0xa4>)
 8000b56:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ba4 <HAL_ADC_MspInit+0xa4>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba4 <HAL_ADC_MspInit+0xa4>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <HAL_ADC_MspInit+0xa4>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <HAL_ADC_MspInit+0xa4>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8000b80:	2303      	movs	r3, #3
 8000b82:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b84:	2303      	movs	r3, #3
 8000b86:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b90:	4619      	mov	r1, r3
 8000b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b96:	f001 fc4d 	bl	8002434 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b9a:	bf00      	nop
 8000b9c:	3778      	adds	r7, #120	@ 0x78
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <HAL_TIM_Base_MspInit+0x80>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10c      	bne.n	8000bd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000bc0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000bc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8000bd2:	e022      	b.n	8000c1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000be2:	4a12      	ldr	r2, [pc, #72]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
}
 8000bf6:	e010      	b.n	8000c1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM20)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c30 <HAL_TIM_Base_MspInit+0x88>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d10b      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c06:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000c08:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <HAL_TIM_Base_MspInit+0x84>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40012c00 	.word	0x40012c00
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40015000 	.word	0x40015000

08000c34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	@ 0x30
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a3c      	ldr	r2, [pc, #240]	@ (8000d44 <HAL_TIM_Encoder_MspInit+0x110>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d145      	bne.n	8000ce2 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c56:	4b3c      	ldr	r3, [pc, #240]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c62:	4b39      	ldr	r3, [pc, #228]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c66:	f003 0302 	and.w	r3, r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	4b36      	ldr	r3, [pc, #216]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c72:	4a35      	ldr	r2, [pc, #212]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7a:	4b33      	ldr	r3, [pc, #204]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c8c:	f043 0304 	orr.w	r3, r3, #4
 8000c90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c92:	4b2d      	ldr	r3, [pc, #180]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c96:	f003 0304 	and.w	r3, r3, #4
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin;
 8000c9e:	2340      	movs	r3, #64	@ 0x40
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cbc:	f001 fbba 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Encoder_1C7_Pin;
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_1C7_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481c      	ldr	r0, [pc, #112]	@ (8000d4c <HAL_TIM_Encoder_MspInit+0x118>)
 8000cdc:	f001 fbaa 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ce0:	e02c      	b.n	8000d3c <HAL_TIM_Encoder_MspInit+0x108>
  else if(htim_encoder->Instance==TIM4)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d50 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d127      	bne.n	8000d3c <HAL_TIM_Encoder_MspInit+0x108>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf0:	4a15      	ldr	r2, [pc, #84]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cf8:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d08:	4a0f      	ldr	r2, [pc, #60]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d0a:	f043 0302 	orr.w	r3, r3, #2
 8000d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d10:	4b0d      	ldr	r3, [pc, #52]	@ (8000d48 <HAL_TIM_Encoder_MspInit+0x114>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2B7_Pin;
 8000d1c:	23c0      	movs	r3, #192	@ 0xc0
 8000d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	4807      	ldr	r0, [pc, #28]	@ (8000d54 <HAL_TIM_Encoder_MspInit+0x120>)
 8000d38:	f001 fb7c 	bl	8002434 <HAL_GPIO_Init>
}
 8000d3c:	bf00      	nop
 8000d3e:	3730      	adds	r7, #48	@ 0x30
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40000400 	.word	0x40000400
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48000800 	.word	0x48000800
 8000d50:	40000800 	.word	0x40000800
 8000d54:	48000400 	.word	0x48000400

08000d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_TIM_MspPostInit+0xa8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d11c      	bne.n	8000db4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b22      	ldr	r3, [pc, #136]	@ (8000e04 <HAL_TIM_MspPostInit+0xac>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <HAL_TIM_MspPostInit+0xac>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <HAL_TIM_MspPostInit+0xac>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8000d92:	2304      	movs	r3, #4
 8000d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000da2:	2302      	movs	r3, #2
 8000da4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4816      	ldr	r0, [pc, #88]	@ (8000e08 <HAL_TIM_MspPostInit+0xb0>)
 8000dae:	f001 fb41 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8000db2:	e020      	b.n	8000df6 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM20)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <HAL_TIM_MspPostInit+0xb4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d11b      	bne.n	8000df6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_TIM_MspPostInit+0xac>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_TIM_MspPostInit+0xac>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_TIM_MspPostInit+0xac>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8000de6:	2303      	movs	r3, #3
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	@ (8000e10 <HAL_TIM_MspPostInit+0xb8>)
 8000df2:	f001 fb1f 	bl	8002434 <HAL_GPIO_Init>
}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	@ 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40012c00 	.word	0x40012c00
 8000e04:	40021000 	.word	0x40021000
 8000e08:	48000800 	.word	0x48000800
 8000e0c:	40015000 	.word	0x40015000
 8000e10:	48000400 	.word	0x48000400

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <NMI_Handler+0x4>

08000e1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <BusFault_Handler+0x4>

08000e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e38:	bf00      	nop
 8000e3a:	e7fd      	b.n	8000e38 <UsageFault_Handler+0x4>

08000e3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6a:	f000 f8b5 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8000e76:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e7a:	f001 fc75 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 8000e86:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000e8a:	f001 fc6d 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 8000e8e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e92:	f001 fc69 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensorA12_Pin);
 8000e96:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e9a:	f001 fc65 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 8000e9e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ea2:	f001 fc61 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 8000ea6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000eaa:	f001 fc5d 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 8000eae:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000eb2:	f001 fc59 	bl	8002768 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ee2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee4:	f7ff ffea 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	@ (8000f20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <LoopForever+0xe>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	@ (8000f2c <LoopForever+0x16>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f003 fe2f 	bl	8004b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f12:	f7ff f981 	bl	8000218 <main>

08000f16 <LoopForever>:

LoopForever:
    b LoopForever
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
  ldr   r0, =_estack
 8000f18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f24:	08004be8 	.word	0x08004be8
  ldr r2, =_sbss
 8000f28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f2c:	20000218 	.word	0x20000218

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>

08000f32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f001 fa39 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f80e 	bl	8000f64 <HAL_InitTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	71fb      	strb	r3, [r7, #7]
 8000f52:	e001      	b.n	8000f58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f54:	f7ff fdb0 	bl	8000ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f58:	79fb      	ldrb	r3, [r7, #7]

}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f70:	4b16      	ldr	r3, [pc, #88]	@ (8000fcc <HAL_InitTick+0x68>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d022      	beq.n	8000fbe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_InitTick+0x6c>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <HAL_InitTick+0x68>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fa44 	bl	800241a <HAL_SYSTICK_Config>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d10f      	bne.n	8000fb8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	d809      	bhi.n	8000fb2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa6:	f001 fa10 	bl	80023ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000faa:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd4 <HAL_InitTick+0x70>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e007      	b.n	8000fc2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e004      	b.n	8000fc2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e001      	b.n	8000fc2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a03      	ldr	r2, [pc, #12]	@ (8000ff4 <HAL_IncTick+0x1c>)
 8000fe8:	6013      	str	r3, [r2, #0]
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	20000214 	.word	0x20000214
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <HAL_GetTick+0x14>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000214 	.word	0x20000214

08001014 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	3360      	adds	r3, #96	@ 0x60
 800108e:	461a      	mov	r2, r3
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <LL_ADC_SetOffset+0x44>)
 800109e:	4013      	ands	r3, r2
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80010a6:	683a      	ldr	r2, [r7, #0]
 80010a8:	430a      	orrs	r2, r1
 80010aa:	4313      	orrs	r3, r2
 80010ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	03fff000 	.word	0x03fff000

080010c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3360      	adds	r3, #96	@ 0x60
 80010d2:	461a      	mov	r2, r3
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3360      	adds	r3, #96	@ 0x60
 8001100:	461a      	mov	r2, r3
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	431a      	orrs	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800111a:	bf00      	nop
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001126:	b480      	push	{r7}
 8001128:	b087      	sub	sp, #28
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3360      	adds	r3, #96	@ 0x60
 8001136:	461a      	mov	r2, r3
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	431a      	orrs	r2, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	3360      	adds	r3, #96	@ 0x60
 800116c:	461a      	mov	r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	431a      	orrs	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001186:	bf00      	nop
 8001188:	371c      	adds	r7, #28
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	615a      	str	r2, [r3, #20]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3330      	adds	r3, #48	@ 0x30
 80011c8:	461a      	mov	r2, r3
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	4413      	add	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	211f      	movs	r1, #31
 80011e4:	fa01 f303 	lsl.w	r3, r1, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	401a      	ands	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	0e9b      	lsrs	r3, r3, #26
 80011f0:	f003 011f 	and.w	r1, r3, #31
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	f003 031f 	and.w	r3, r3, #31
 80011fa:	fa01 f303 	lsl.w	r3, r1, r3
 80011fe:	431a      	orrs	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001204:	bf00      	nop
 8001206:	371c      	adds	r7, #28
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001210:	b480      	push	{r7}
 8001212:	b087      	sub	sp, #28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3314      	adds	r3, #20
 8001220:	461a      	mov	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	0e5b      	lsrs	r3, r3, #25
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	0d1b      	lsrs	r3, r3, #20
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	2107      	movs	r1, #7
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	401a      	ands	r2, r3
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	0d1b      	lsrs	r3, r3, #20
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	431a      	orrs	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0318 	and.w	r3, r3, #24
 800128a:	4908      	ldr	r1, [pc, #32]	@ (80012ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800128c:	40d9      	lsrs	r1, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	400b      	ands	r3, r1
 8001292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001296:	431a      	orrs	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800129e:	bf00      	nop
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	0007ffff 	.word	0x0007ffff

080012b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6093      	str	r3, [r2, #8]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012e8:	d101      	bne.n	80012ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800130c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001310:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001338:	d101      	bne.n	800133e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <LL_ADC_IsEnabled+0x18>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <LL_ADC_IsEnabled+0x1a>
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b04      	cmp	r3, #4
 8001384:	d101      	bne.n	800138a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0308 	and.w	r3, r3, #8
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d101      	bne.n	80013b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	@ 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c8:	2300      	movs	r3, #0
 80013ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1a9      	b.n	800172e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d109      	bne.n	80013fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff fb89 	bl	8000b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff67 	bl	80012d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff4d 	bl	80012b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff ff82 	bl	8001324 <LL_ADC_IsInternalRegulatorEnabled>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d115      	bne.n	8001452 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff66 	bl	80012fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001430:	4b9c      	ldr	r3, [pc, #624]	@ (80016a4 <HAL_ADC_Init+0x2e4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	4a9c      	ldr	r2, [pc, #624]	@ (80016a8 <HAL_ADC_Init+0x2e8>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	3301      	adds	r3, #1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001444:	e002      	b.n	800144c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f9      	bne.n	8001446 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff64 	bl	8001324 <LL_ADC_IsInternalRegulatorEnabled>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10d      	bne.n	800147e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001466:	f043 0210 	orr.w	r2, r3, #16
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff75 	bl	8001372 <LL_ADC_REG_IsConversionOngoing>
 8001488:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 8142 	bne.w	800171c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f040 813e 	bne.w	800171c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014a8:	f043 0202 	orr.w	r2, r3, #2
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff49 	bl	800134c <LL_ADC_IsEnabled>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d141      	bne.n	8001544 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014c8:	d004      	beq.n	80014d4 <HAL_ADC_Init+0x114>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a77      	ldr	r2, [pc, #476]	@ (80016ac <HAL_ADC_Init+0x2ec>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d10f      	bne.n	80014f4 <HAL_ADC_Init+0x134>
 80014d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80014d8:	f7ff ff38 	bl	800134c <LL_ADC_IsEnabled>
 80014dc:	4604      	mov	r4, r0
 80014de:	4873      	ldr	r0, [pc, #460]	@ (80016ac <HAL_ADC_Init+0x2ec>)
 80014e0:	f7ff ff34 	bl	800134c <LL_ADC_IsEnabled>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4323      	orrs	r3, r4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf0c      	ite	eq
 80014ec:	2301      	moveq	r3, #1
 80014ee:	2300      	movne	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	e012      	b.n	800151a <HAL_ADC_Init+0x15a>
 80014f4:	486e      	ldr	r0, [pc, #440]	@ (80016b0 <HAL_ADC_Init+0x2f0>)
 80014f6:	f7ff ff29 	bl	800134c <LL_ADC_IsEnabled>
 80014fa:	4604      	mov	r4, r0
 80014fc:	486d      	ldr	r0, [pc, #436]	@ (80016b4 <HAL_ADC_Init+0x2f4>)
 80014fe:	f7ff ff25 	bl	800134c <LL_ADC_IsEnabled>
 8001502:	4603      	mov	r3, r0
 8001504:	431c      	orrs	r4, r3
 8001506:	486c      	ldr	r0, [pc, #432]	@ (80016b8 <HAL_ADC_Init+0x2f8>)
 8001508:	f7ff ff20 	bl	800134c <LL_ADC_IsEnabled>
 800150c:	4603      	mov	r3, r0
 800150e:	4323      	orrs	r3, r4
 8001510:	2b00      	cmp	r3, #0
 8001512:	bf0c      	ite	eq
 8001514:	2301      	moveq	r3, #1
 8001516:	2300      	movne	r3, #0
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d012      	beq.n	8001544 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001526:	d004      	beq.n	8001532 <HAL_ADC_Init+0x172>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a5f      	ldr	r2, [pc, #380]	@ (80016ac <HAL_ADC_Init+0x2ec>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_ADC_Init+0x176>
 8001532:	4a62      	ldr	r2, [pc, #392]	@ (80016bc <HAL_ADC_Init+0x2fc>)
 8001534:	e000      	b.n	8001538 <HAL_ADC_Init+0x178>
 8001536:	4a62      	ldr	r2, [pc, #392]	@ (80016c0 <HAL_ADC_Init+0x300>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f7ff fd68 	bl	8001014 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7f5b      	ldrb	r3, [r3, #29]
 8001548:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001554:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800155a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001562:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001576:	3b01      	subs	r3, #1
 8001578:	045b      	lsls	r3, r3, #17
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001594:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	4b48      	ldr	r3, [pc, #288]	@ (80016c4 <HAL_ADC_Init+0x304>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	430a      	orrs	r2, r1
 80015c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fee4 	bl	8001398 <LL_ADC_INJ_IsConversionOngoing>
 80015d0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d17f      	bne.n	80016d8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d17c      	bne.n	80016d8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015e2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015fa:	f023 0302 	bic.w	r3, r3, #2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	430b      	orrs	r3, r1
 8001606:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d017      	beq.n	8001640 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800161e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001628:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800162c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6911      	ldr	r1, [r2, #16]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	430b      	orrs	r3, r1
 800163a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800163e:	e013      	b.n	8001668 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691a      	ldr	r2, [r3, #16]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800164e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001660:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001664:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800166e:	2b01      	cmp	r3, #1
 8001670:	d12a      	bne.n	80016c8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001688:	4311      	orrs	r1, r2
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800168e:	4311      	orrs	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001694:	430a      	orrs	r2, r1
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 0201 	orr.w	r2, r2, #1
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	e019      	b.n	80016d8 <HAL_ADC_Init+0x318>
 80016a4:	20000000 	.word	0x20000000
 80016a8:	053e2d63 	.word	0x053e2d63
 80016ac:	50000100 	.word	0x50000100
 80016b0:	50000400 	.word	0x50000400
 80016b4:	50000500 	.word	0x50000500
 80016b8:	50000600 	.word	0x50000600
 80016bc:	50000300 	.word	0x50000300
 80016c0:	50000700 	.word	0x50000700
 80016c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691a      	ldr	r2, [r3, #16]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d10c      	bne.n	80016fa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f023 010f 	bic.w	r1, r3, #15
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	1e5a      	subs	r2, r3, #1
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80016f8:	e007      	b.n	800170a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 020f 	bic.w	r2, r2, #15
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170e:	f023 0303 	bic.w	r3, r3, #3
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	65da      	str	r2, [r3, #92]	@ 0x5c
 800171a:	e007      	b.n	800172c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001720:	f043 0210 	orr.w	r2, r3, #16
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800172c:	7ffb      	ldrb	r3, [r7, #31]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd90      	pop	{r4, r7, pc}
 8001736:	bf00      	nop

08001738 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0b6      	sub	sp, #216	@ 0xd8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001752:	2b01      	cmp	r3, #1
 8001754:	d102      	bne.n	800175c <HAL_ADC_ConfigChannel+0x24>
 8001756:	2302      	movs	r3, #2
 8001758:	f000 bc13 	b.w	8001f82 <HAL_ADC_ConfigChannel+0x84a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fe02 	bl	8001372 <LL_ADC_REG_IsConversionOngoing>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	f040 83f3 	bne.w	8001f5c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	f7ff fd18 	bl	80011b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fdf0 	bl	8001372 <LL_ADC_REG_IsConversionOngoing>
 8001792:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fdfc 	bl	8001398 <LL_ADC_INJ_IsConversionOngoing>
 80017a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	f040 81d9 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 81d4 	bne.w	8001b60 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017c0:	d10f      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6818      	ldr	r0, [r3, #0]
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	f7ff fd1f 	bl	8001210 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fcd9 	bl	8001192 <LL_ADC_SetSamplingTimeCommonConfig>
 80017e0:	e00e      	b.n	8001800 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6818      	ldr	r0, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	6819      	ldr	r1, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	461a      	mov	r2, r3
 80017f0:	f7ff fd0e 	bl	8001210 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fcc9 	bl	8001192 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	08db      	lsrs	r3, r3, #3
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2b04      	cmp	r3, #4
 8001820:	d022      	beq.n	8001868 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6919      	ldr	r1, [r3, #16]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001832:	f7ff fc23 	bl	800107c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6919      	ldr	r1, [r3, #16]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	461a      	mov	r2, r3
 8001844:	f7ff fc6f 	bl	8001126 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001854:	2b01      	cmp	r3, #1
 8001856:	d102      	bne.n	800185e <HAL_ADC_ConfigChannel+0x126>
 8001858:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800185c:	e000      	b.n	8001860 <HAL_ADC_ConfigChannel+0x128>
 800185e:	2300      	movs	r3, #0
 8001860:	461a      	mov	r2, r3
 8001862:	f7ff fc7b 	bl	800115c <LL_ADC_SetOffsetSaturation>
 8001866:	e17b      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fc28 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x15c>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc1d 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	0e9b      	lsrs	r3, r3, #26
 800188e:	f003 021f 	and.w	r2, r3, #31
 8001892:	e01e      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x19a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fc12 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018aa:	fa93 f3a3 	rbit	r3, r3
 80018ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80018c2:	2320      	movs	r3, #32
 80018c4:	e004      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80018c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x1b2>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	0e9b      	lsrs	r3, r3, #26
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	e018      	b.n	800191c <HAL_ADC_ConfigChannel+0x1e4>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80018fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001902:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001906:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800190e:	2320      	movs	r3, #32
 8001910:	e004      	b.n	800191c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001912:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001916:	fab3 f383 	clz	r3, r3
 800191a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fbe1 	bl	80010f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2101      	movs	r1, #1
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fbc5 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10a      	bne.n	800195a <HAL_ADC_ConfigChannel+0x222>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fbba 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	0e9b      	lsrs	r3, r3, #26
 8001954:	f003 021f 	and.w	r2, r3, #31
 8001958:	e01e      	b.n	8001998 <HAL_ADC_ConfigChannel+0x260>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fbaf 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001970:	fa93 f3a3 	rbit	r3, r3
 8001974:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001978:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800197c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001980:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001988:	2320      	movs	r3, #32
 800198a:	e004      	b.n	8001996 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800198c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001990:	fab3 f383 	clz	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x278>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	0e9b      	lsrs	r3, r3, #26
 80019aa:	f003 031f 	and.w	r3, r3, #31
 80019ae:	e018      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x2aa>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019bc:	fa93 f3a3 	rbit	r3, r3
 80019c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80019c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80019cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80019d4:	2320      	movs	r3, #32
 80019d6:	e004      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80019d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019dc:	fab3 f383 	clz	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d106      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	2101      	movs	r1, #1
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb7e 	bl	80010f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2102      	movs	r1, #2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb62 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <HAL_ADC_ConfigChannel+0x2e8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2102      	movs	r1, #2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fb57 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	0e9b      	lsrs	r3, r3, #26
 8001a1a:	f003 021f 	and.w	r2, r3, #31
 8001a1e:	e01e      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x326>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2102      	movs	r1, #2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fb4c 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001a3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001a46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	e004      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a56:	fab3 f383 	clz	r3, r3
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_ADC_ConfigChannel+0x33e>
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0e9b      	lsrs	r3, r3, #26
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	e016      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x36c>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001a88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001a96:	2320      	movs	r3, #32
 8001a98:	e004      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	2102      	movs	r1, #2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb1d 	bl	80010f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2103      	movs	r1, #3
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fb01 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x3aa>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2103      	movs	r1, #3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff faf6 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	0e9b      	lsrs	r3, r3, #26
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	e017      	b.n	8001b12 <HAL_ADC_ConfigChannel+0x3da>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2103      	movs	r1, #3
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff faeb 	bl	80010c4 <LL_ADC_GetOffsetChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001afa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001afc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	e003      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b0a:	fab3 f383 	clz	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d105      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x3f2>
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 031f 	and.w	r3, r3, #31
 8001b28:	e011      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x416>
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001b38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001b42:	2320      	movs	r3, #32
 8001b44:	e003      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d106      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	2103      	movs	r1, #3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fac8 	bl	80010f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fbf1 	bl	800134c <LL_ADC_IsEnabled>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f040 813d 	bne.w	8001dec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6819      	ldr	r1, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f7ff fb72 	bl	8001268 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4aa2      	ldr	r2, [pc, #648]	@ (8001e14 <HAL_ADC_ConfigChannel+0x6dc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	f040 812e 	bne.w	8001dec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10b      	bne.n	8001bb8 <HAL_ADC_ConfigChannel+0x480>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0e9b      	lsrs	r3, r3, #26
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	bf94      	ite	ls
 8001bb0:	2301      	movls	r3, #1
 8001bb2:	2300      	movhi	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e019      	b.n	8001bec <HAL_ADC_ConfigChannel+0x4b4>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bc0:	fa93 f3a3 	rbit	r3, r3
 8001bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bc8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001bd0:	2320      	movs	r3, #32
 8001bd2:	e003      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001bd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3301      	adds	r3, #1
 8001bde:	f003 031f 	and.w	r3, r3, #31
 8001be2:	2b09      	cmp	r3, #9
 8001be4:	bf94      	ite	ls
 8001be6:	2301      	movls	r3, #1
 8001be8:	2300      	movhi	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d079      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d107      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x4d4>
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0e9b      	lsrs	r3, r3, #26
 8001c02:	3301      	adds	r3, #1
 8001c04:	069b      	lsls	r3, r3, #26
 8001c06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c0a:	e015      	b.n	8001c38 <HAL_ADC_ConfigChannel+0x500>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c14:	fa93 f3a3 	rbit	r3, r3
 8001c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c1c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001c24:	2320      	movs	r3, #32
 8001c26:	e003      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3301      	adds	r3, #1
 8001c32:	069b      	lsls	r3, r3, #26
 8001c34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x520>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0e9b      	lsrs	r3, r3, #26
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	e017      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x550>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001c70:	2320      	movs	r3, #32
 8001c72:	e003      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	ea42 0103 	orr.w	r1, r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <HAL_ADC_ConfigChannel+0x576>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	0e9b      	lsrs	r3, r3, #26
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f003 021f 	and.w	r2, r3, #31
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	051b      	lsls	r3, r3, #20
 8001cac:	e018      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x5a8>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	e003      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ccc:	fab3 f383 	clz	r3, r3
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4613      	mov	r3, r2
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	4413      	add	r3, r2
 8001cde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	e07e      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d107      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x5c8>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0e9b      	lsrs	r3, r3, #26
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	069b      	lsls	r3, r3, #26
 8001cfa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cfe:	e015      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x5f4>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e003      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d1e:	fab3 f383 	clz	r3, r3
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	3301      	adds	r3, #1
 8001d26:	069b      	lsls	r3, r3, #26
 8001d28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x614>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0e9b      	lsrs	r3, r3, #26
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	e017      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x644>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	6a3b      	ldr	r3, [r7, #32]
 8001d54:	fa93 f3a3 	rbit	r3, r3
 8001d58:	61fb      	str	r3, [r7, #28]
  return result;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e003      	b.n	8001d70 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	fab3 f383 	clz	r3, r3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	2101      	movs	r1, #1
 8001d78:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7c:	ea42 0103 	orr.w	r1, r2, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x670>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	3301      	adds	r3, #1
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3b1e      	subs	r3, #30
 8001da0:	051b      	lsls	r3, r3, #20
 8001da2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001da6:	e01b      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x6a8>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	613b      	str	r3, [r7, #16]
  return result;
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e003      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b1e      	subs	r3, #30
 8001dda:	051b      	lsls	r3, r3, #20
 8001ddc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7ff fa12 	bl	8001210 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <HAL_ADC_ConfigChannel+0x6e0>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80be 	beq.w	8001f76 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e02:	d004      	beq.n	8001e0e <HAL_ADC_ConfigChannel+0x6d6>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a04      	ldr	r2, [pc, #16]	@ (8001e1c <HAL_ADC_ConfigChannel+0x6e4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10a      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x6ec>
 8001e0e:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <HAL_ADC_ConfigChannel+0x6e8>)
 8001e10:	e009      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x6ee>
 8001e12:	bf00      	nop
 8001e14:	407f0000 	.word	0x407f0000
 8001e18:	80080000 	.word	0x80080000
 8001e1c:	50000100 	.word	0x50000100
 8001e20:	50000300 	.word	0x50000300
 8001e24:	4b59      	ldr	r3, [pc, #356]	@ (8001f8c <HAL_ADC_ConfigChannel+0x854>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f91a 	bl	8001060 <LL_ADC_GetCommonPathInternalCh>
 8001e2c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a56      	ldr	r2, [pc, #344]	@ (8001f90 <HAL_ADC_ConfigChannel+0x858>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d004      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0x70c>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a55      	ldr	r2, [pc, #340]	@ (8001f94 <HAL_ADC_ConfigChannel+0x85c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d13a      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d134      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e58:	d005      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x72e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001f98 <HAL_ADC_ConfigChannel+0x860>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	f040 8085 	bne.w	8001f70 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e6e:	d004      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x742>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a49      	ldr	r2, [pc, #292]	@ (8001f9c <HAL_ADC_ConfigChannel+0x864>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x746>
 8001e7a:	4a49      	ldr	r2, [pc, #292]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x868>)
 8001e7c:	e000      	b.n	8001e80 <HAL_ADC_ConfigChannel+0x748>
 8001e7e:	4a43      	ldr	r2, [pc, #268]	@ (8001f8c <HAL_ADC_ConfigChannel+0x854>)
 8001e80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	f7ff f8d5 	bl	800103a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e90:	4b44      	ldr	r3, [pc, #272]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x86c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	4a44      	ldr	r2, [pc, #272]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x870>)
 8001e98:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001eaa:	e002      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eb8:	e05a      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8001fac <HAL_ADC_ConfigChannel+0x874>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d125      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ec4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d11f      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a31      	ldr	r2, [pc, #196]	@ (8001f9c <HAL_ADC_ConfigChannel+0x864>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d104      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x7ac>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x878>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d047      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eec:	d004      	beq.n	8001ef8 <HAL_ADC_ConfigChannel+0x7c0>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f9c <HAL_ADC_ConfigChannel+0x864>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d101      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x7c4>
 8001ef8:	4a29      	ldr	r2, [pc, #164]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x868>)
 8001efa:	e000      	b.n	8001efe <HAL_ADC_ConfigChannel+0x7c6>
 8001efc:	4a23      	ldr	r2, [pc, #140]	@ (8001f8c <HAL_ADC_ConfigChannel+0x854>)
 8001efe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f06:	4619      	mov	r1, r3
 8001f08:	4610      	mov	r0, r2
 8001f0a:	f7ff f896 	bl	800103a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f0e:	e031      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a27      	ldr	r2, [pc, #156]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x87c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d12d      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d127      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f9c <HAL_ADC_ConfigChannel+0x864>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d022      	beq.n	8001f76 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f38:	d004      	beq.n	8001f44 <HAL_ADC_ConfigChannel+0x80c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a17      	ldr	r2, [pc, #92]	@ (8001f9c <HAL_ADC_ConfigChannel+0x864>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x810>
 8001f44:	4a16      	ldr	r2, [pc, #88]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x868>)
 8001f46:	e000      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x812>
 8001f48:	4a10      	ldr	r2, [pc, #64]	@ (8001f8c <HAL_ADC_ConfigChannel+0x854>)
 8001f4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f7ff f870 	bl	800103a <LL_ADC_SetCommonPathInternalCh>
 8001f5a:	e00c      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f60:	f043 0220 	orr.w	r2, r3, #32
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f6e:	e002      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f70:	bf00      	nop
 8001f72:	e000      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	37d8      	adds	r7, #216	@ 0xd8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	50000700 	.word	0x50000700
 8001f90:	c3210000 	.word	0xc3210000
 8001f94:	90c00010 	.word	0x90c00010
 8001f98:	50000600 	.word	0x50000600
 8001f9c:	50000100 	.word	0x50000100
 8001fa0:	50000300 	.word	0x50000300
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	053e2d63 	.word	0x053e2d63
 8001fac:	c7520000 	.word	0xc7520000
 8001fb0:	50000500 	.word	0x50000500
 8001fb4:	cb840000 	.word	0xcb840000

08001fb8 <LL_ADC_IsEnabled>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <LL_ADC_IsEnabled+0x18>
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e000      	b.n	8001fd2 <LL_ADC_IsEnabled+0x1a>
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_REG_IsConversionOngoing>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d101      	bne.n	8001ff6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e000      	b.n	8001ff8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b0a1      	sub	sp, #132	@ 0x84
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800201e:	2302      	movs	r3, #2
 8002020:	e0e7      	b.n	80021f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800202a:	2300      	movs	r3, #0
 800202c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800202e:	2300      	movs	r3, #0
 8002030:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800203a:	d102      	bne.n	8002042 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800203c:	4b6f      	ldr	r3, [pc, #444]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	e009      	b.n	8002056 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a6e      	ldr	r2, [pc, #440]	@ (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d102      	bne.n	8002052 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800204c:	4b6d      	ldr	r3, [pc, #436]	@ (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800204e:	60bb      	str	r3, [r7, #8]
 8002050:	e001      	b.n	8002056 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10b      	bne.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002060:	f043 0220 	orr.w	r2, r3, #32
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0be      	b.n	80021f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ffb1 	bl	8001fde <LL_ADC_REG_IsConversionOngoing>
 800207c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ffab 	bl	8001fde <LL_ADC_REG_IsConversionOngoing>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 80a0 	bne.w	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002090:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 809c 	bne.w	80021d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020a0:	d004      	beq.n	80020ac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a55      	ldr	r2, [pc, #340]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d101      	bne.n	80020b0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80020ac:	4b56      	ldr	r3, [pc, #344]	@ (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80020ae:	e000      	b.n	80020b2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80020b0:	4b56      	ldr	r3, [pc, #344]	@ (800220c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80020b2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d04b      	beq.n	8002154 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020ce:	035b      	lsls	r3, r3, #13
 80020d0:	430b      	orrs	r3, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020e0:	d004      	beq.n	80020ec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a45      	ldr	r2, [pc, #276]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d10f      	bne.n	800210c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80020ec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020f0:	f7ff ff62 	bl	8001fb8 <LL_ADC_IsEnabled>
 80020f4:	4604      	mov	r4, r0
 80020f6:	4841      	ldr	r0, [pc, #260]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020f8:	f7ff ff5e 	bl	8001fb8 <LL_ADC_IsEnabled>
 80020fc:	4603      	mov	r3, r0
 80020fe:	4323      	orrs	r3, r4
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e012      	b.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800210c:	483c      	ldr	r0, [pc, #240]	@ (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800210e:	f7ff ff53 	bl	8001fb8 <LL_ADC_IsEnabled>
 8002112:	4604      	mov	r4, r0
 8002114:	483b      	ldr	r0, [pc, #236]	@ (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002116:	f7ff ff4f 	bl	8001fb8 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	431c      	orrs	r4, r3
 800211e:	483c      	ldr	r0, [pc, #240]	@ (8002210 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002120:	f7ff ff4a 	bl	8001fb8 <LL_ADC_IsEnabled>
 8002124:	4603      	mov	r3, r0
 8002126:	4323      	orrs	r3, r4
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf0c      	ite	eq
 800212c:	2301      	moveq	r3, #1
 800212e:	2300      	movne	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d056      	beq.n	80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800213e:	f023 030f 	bic.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	6811      	ldr	r1, [r2, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	430a      	orrs	r2, r1
 800214c:	431a      	orrs	r2, r3
 800214e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002150:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002152:	e047      	b.n	80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002154:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800215c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800215e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002168:	d004      	beq.n	8002174 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a23      	ldr	r2, [pc, #140]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d10f      	bne.n	8002194 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002174:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002178:	f7ff ff1e 	bl	8001fb8 <LL_ADC_IsEnabled>
 800217c:	4604      	mov	r4, r0
 800217e:	481f      	ldr	r0, [pc, #124]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002180:	f7ff ff1a 	bl	8001fb8 <LL_ADC_IsEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	4323      	orrs	r3, r4
 8002188:	2b00      	cmp	r3, #0
 800218a:	bf0c      	ite	eq
 800218c:	2301      	moveq	r3, #1
 800218e:	2300      	movne	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	e012      	b.n	80021ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002194:	481a      	ldr	r0, [pc, #104]	@ (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002196:	f7ff ff0f 	bl	8001fb8 <LL_ADC_IsEnabled>
 800219a:	4604      	mov	r4, r0
 800219c:	4819      	ldr	r0, [pc, #100]	@ (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800219e:	f7ff ff0b 	bl	8001fb8 <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	431c      	orrs	r4, r3
 80021a6:	481a      	ldr	r0, [pc, #104]	@ (8002210 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80021a8:	f7ff ff06 	bl	8001fb8 <LL_ADC_IsEnabled>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4323      	orrs	r3, r4
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf0c      	ite	eq
 80021b4:	2301      	moveq	r3, #1
 80021b6:	2300      	movne	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d012      	beq.n	80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021c6:	f023 030f 	bic.w	r3, r3, #15
 80021ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021ce:	e009      	b.n	80021e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80021e2:	e000      	b.n	80021e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3784      	adds	r7, #132	@ 0x84
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd90      	pop	{r4, r7, pc}
 80021fa:	bf00      	nop
 80021fc:	50000100 	.word	0x50000100
 8002200:	50000400 	.word	0x50000400
 8002204:	50000500 	.word	0x50000500
 8002208:	50000300 	.word	0x50000300
 800220c:	50000700 	.word	0x50000700
 8002210:	50000600 	.word	0x50000600

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	@ (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	@ (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	@ (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	@ 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff29 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff40 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff90 	bl	8002308 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5f 	bl	80022b4 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff33 	bl	8002278 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa4 	bl	8002370 <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002442:	e15a      	b.n	80026fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2101      	movs	r1, #1
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 814c 	beq.w	80026f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d005      	beq.n	8002474 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002470:	2b02      	cmp	r3, #2
 8002472:	d130      	bne.n	80024d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4013      	ands	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	68da      	ldr	r2, [r3, #12]
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024aa:	2201      	movs	r2, #1
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4013      	ands	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 0201 	and.w	r2, r3, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d017      	beq.n	8002512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d123      	bne.n	8002566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43db      	mvns	r3, r3
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	08da      	lsrs	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3208      	adds	r2, #8
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	2203      	movs	r2, #3
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0203 	and.w	r2, r3, #3
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80a6 	beq.w	80026f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a8:	4b5b      	ldr	r3, [pc, #364]	@ (8002718 <HAL_GPIO_Init+0x2e4>)
 80025aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002718 <HAL_GPIO_Init+0x2e4>)
 80025ae:	f043 0301 	orr.w	r3, r3, #1
 80025b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80025b4:	4b58      	ldr	r3, [pc, #352]	@ (8002718 <HAL_GPIO_Init+0x2e4>)
 80025b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025c0:	4a56      	ldr	r2, [pc, #344]	@ (800271c <HAL_GPIO_Init+0x2e8>)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80025ea:	d01f      	beq.n	800262c <HAL_GPIO_Init+0x1f8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002720 <HAL_GPIO_Init+0x2ec>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d019      	beq.n	8002628 <HAL_GPIO_Init+0x1f4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a4b      	ldr	r2, [pc, #300]	@ (8002724 <HAL_GPIO_Init+0x2f0>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_GPIO_Init+0x1f0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002728 <HAL_GPIO_Init+0x2f4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_Init+0x1ec>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a49      	ldr	r2, [pc, #292]	@ (800272c <HAL_GPIO_Init+0x2f8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x1e8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a48      	ldr	r2, [pc, #288]	@ (8002730 <HAL_GPIO_Init+0x2fc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_Init+0x1e4>
 8002614:	2305      	movs	r3, #5
 8002616:	e00a      	b.n	800262e <HAL_GPIO_Init+0x1fa>
 8002618:	2306      	movs	r3, #6
 800261a:	e008      	b.n	800262e <HAL_GPIO_Init+0x1fa>
 800261c:	2304      	movs	r3, #4
 800261e:	e006      	b.n	800262e <HAL_GPIO_Init+0x1fa>
 8002620:	2303      	movs	r3, #3
 8002622:	e004      	b.n	800262e <HAL_GPIO_Init+0x1fa>
 8002624:	2302      	movs	r3, #2
 8002626:	e002      	b.n	800262e <HAL_GPIO_Init+0x1fa>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <HAL_GPIO_Init+0x1fa>
 800262c:	2300      	movs	r3, #0
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	f002 0203 	and.w	r2, r2, #3
 8002634:	0092      	lsls	r2, r2, #2
 8002636:	4093      	lsls	r3, r2
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263e:	4937      	ldr	r1, [pc, #220]	@ (800271c <HAL_GPIO_Init+0x2e8>)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800264c:	4b39      	ldr	r3, [pc, #228]	@ (8002734 <HAL_GPIO_Init+0x300>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002670:	4a30      	ldr	r2, [pc, #192]	@ (8002734 <HAL_GPIO_Init+0x300>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002676:	4b2f      	ldr	r3, [pc, #188]	@ (8002734 <HAL_GPIO_Init+0x300>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	43db      	mvns	r3, r3
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4013      	ands	r3, r2
 8002684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800269a:	4a26      	ldr	r2, [pc, #152]	@ (8002734 <HAL_GPIO_Init+0x300>)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80026a0:	4b24      	ldr	r3, [pc, #144]	@ (8002734 <HAL_GPIO_Init+0x300>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002734 <HAL_GPIO_Init+0x300>)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80026ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <HAL_GPIO_Init+0x300>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80026ee:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <HAL_GPIO_Init+0x300>)
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	3301      	adds	r3, #1
 80026f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f ae9d 	bne.w	8002444 <HAL_GPIO_Init+0x10>
  }
}
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	371c      	adds	r7, #28
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	40021000 	.word	0x40021000
 800271c:	40010000 	.word	0x40010000
 8002720:	48000400 	.word	0x48000400
 8002724:	48000800 	.word	0x48000800
 8002728:	48000c00 	.word	0x48000c00
 800272c:	48001000 	.word	0x48001000
 8002730:	48001400 	.word	0x48001400
 8002734:	40010400 	.word	0x40010400

08002738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002754:	e002      	b.n	800275c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002772:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	88fb      	ldrh	r3, [r7, #6]
 8002778:	4013      	ands	r3, r2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d006      	beq.n	800278c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800277e:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f806 	bl	8002798 <HAL_GPIO_EXTI_Callback>
  }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d141      	bne.n	8002842 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027be:	4b4b      	ldr	r3, [pc, #300]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027ca:	d131      	bne.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027cc:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027d2:	4a46      	ldr	r2, [pc, #280]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027dc:	4b43      	ldr	r3, [pc, #268]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027e4:	4a41      	ldr	r2, [pc, #260]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ec:	4b40      	ldr	r3, [pc, #256]	@ (80028f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2232      	movs	r2, #50	@ 0x32
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a3f      	ldr	r2, [pc, #252]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	3301      	adds	r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002802:	e002      	b.n	800280a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3b01      	subs	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800280a:	4b38      	ldr	r3, [pc, #224]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002816:	d102      	bne.n	800281e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f2      	bne.n	8002804 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800281e:	4b33      	ldr	r3, [pc, #204]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002826:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800282a:	d158      	bne.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e057      	b.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002830:	4b2e      	ldr	r3, [pc, #184]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002836:	4a2d      	ldr	r2, [pc, #180]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002838:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800283c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002840:	e04d      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002848:	d141      	bne.n	80028ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800284a:	4b28      	ldr	r3, [pc, #160]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002856:	d131      	bne.n	80028bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002858:	4b24      	ldr	r3, [pc, #144]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800285a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800285e:	4a23      	ldr	r2, [pc, #140]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002864:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002868:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002870:	4a1e      	ldr	r2, [pc, #120]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002872:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002876:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002878:	4b1d      	ldr	r3, [pc, #116]	@ (80028f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2232      	movs	r2, #50	@ 0x32
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	4a1c      	ldr	r2, [pc, #112]	@ (80028f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	0c9b      	lsrs	r3, r3, #18
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800288e:	e002      	b.n	8002896 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3b01      	subs	r3, #1
 8002894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002896:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a2:	d102      	bne.n	80028aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f2      	bne.n	8002890 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028b6:	d112      	bne.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e011      	b.n	80028e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80028cc:	e007      	b.n	80028de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40007000 	.word	0x40007000
 80028f0:	20000000 	.word	0x20000000
 80028f4:	431bde83 	.word	0x431bde83

080028f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a04      	ldr	r2, [pc, #16]	@ (8002914 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002902:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002906:	6093      	str	r3, [r2, #8]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40007000 	.word	0x40007000

08002918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e2fe      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d075      	beq.n	8002a22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002936:	4b97      	ldr	r3, [pc, #604]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002940:	4b94      	ldr	r3, [pc, #592]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	2b0c      	cmp	r3, #12
 800294e:	d102      	bne.n	8002956 <HAL_RCC_OscConfig+0x3e>
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d002      	beq.n	800295c <HAL_RCC_OscConfig+0x44>
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d10b      	bne.n	8002974 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d05b      	beq.n	8002a20 <HAL_RCC_OscConfig+0x108>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d157      	bne.n	8002a20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e2d9      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800297c:	d106      	bne.n	800298c <HAL_RCC_OscConfig+0x74>
 800297e:	4b85      	ldr	r3, [pc, #532]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a84      	ldr	r2, [pc, #528]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002984:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	e01d      	b.n	80029c8 <HAL_RCC_OscConfig+0xb0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002994:	d10c      	bne.n	80029b0 <HAL_RCC_OscConfig+0x98>
 8002996:	4b7f      	ldr	r3, [pc, #508]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a7e      	ldr	r2, [pc, #504]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 800299c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7b      	ldr	r2, [pc, #492]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	e00b      	b.n	80029c8 <HAL_RCC_OscConfig+0xb0>
 80029b0:	4b78      	ldr	r3, [pc, #480]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a77      	ldr	r2, [pc, #476]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ba:	6013      	str	r3, [r2, #0]
 80029bc:	4b75      	ldr	r3, [pc, #468]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a74      	ldr	r2, [pc, #464]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d013      	beq.n	80029f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d0:	f7fe fb14 	bl	8000ffc <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d8:	f7fe fb10 	bl	8000ffc <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	@ 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e29e      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0xc0>
 80029f6:	e014      	b.n	8002a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fb00 	bl	8000ffc <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a00:	f7fe fafc 	bl	8000ffc <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	@ 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e28a      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a12:	4b60      	ldr	r3, [pc, #384]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0xe8>
 8002a1e:	e000      	b.n	8002a22 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d075      	beq.n	8002b1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	4b59      	ldr	r3, [pc, #356]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f003 030c 	and.w	r3, r3, #12
 8002a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a38:	4b56      	ldr	r3, [pc, #344]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_OscConfig+0x136>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_OscConfig+0x13c>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d11f      	bne.n	8002a94 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a54:	4b4f      	ldr	r3, [pc, #316]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_OscConfig+0x154>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e25d      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b49      	ldr	r3, [pc, #292]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4946      	ldr	r1, [pc, #280]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a80:	4b45      	ldr	r3, [pc, #276]	@ (8002b98 <HAL_RCC_OscConfig+0x280>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fe fa6d 	bl	8000f64 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d043      	beq.n	8002b18 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e249      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d023      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a3c      	ldr	r2, [pc, #240]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7fe faa8 	bl	8000ffc <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe faa4 	bl	8000ffc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e232      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac2:	4b34      	ldr	r3, [pc, #208]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ace:	4b31      	ldr	r3, [pc, #196]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	492d      	ldr	r1, [pc, #180]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	604b      	str	r3, [r1, #4]
 8002ae2:	e01a      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002aea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af0:	f7fe fa84 	bl	8000ffc <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af8:	f7fe fa80 	bl	8000ffc <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e20e      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0a:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f0      	bne.n	8002af8 <HAL_RCC_OscConfig+0x1e0>
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b18:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d041      	beq.n	8002baa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d01c      	beq.n	8002b68 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b2e:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b34:	4a17      	ldr	r2, [pc, #92]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7fe fa5d 	bl	8000ffc <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe fa59 	bl	8000ffc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1e7      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b58:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0ef      	beq.n	8002b46 <HAL_RCC_OscConfig+0x22e>
 8002b66:	e020      	b.n	8002baa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b0a      	ldr	r3, [pc, #40]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	4a09      	ldr	r2, [pc, #36]	@ (8002b94 <HAL_RCC_OscConfig+0x27c>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7fe fa40 	bl	8000ffc <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b7e:	e00d      	b.n	8002b9c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b80:	f7fe fa3c 	bl	8000ffc <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d906      	bls.n	8002b9c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e1ca      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ea      	bne.n	8002b80 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0304 	and.w	r3, r3, #4
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 80a6 	beq.w	8002d04 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bbc:	4b84      	ldr	r3, [pc, #528]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_OscConfig+0x2b4>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x2b6>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00d      	beq.n	8002bee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bde:	4b7c      	ldr	r3, [pc, #496]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bee:	4b79      	ldr	r3, [pc, #484]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfa:	4b76      	ldr	r3, [pc, #472]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7fe f9f9 	bl	8000ffc <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7fe f9f5 	bl	8000ffc <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e183      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c20:	4b6c      	ldr	r3, [pc, #432]	@ (8002dd4 <HAL_RCC_OscConfig+0x4bc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d108      	bne.n	8002c46 <HAL_RCC_OscConfig+0x32e>
 8002c34:	4b66      	ldr	r3, [pc, #408]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c3a:	4a65      	ldr	r2, [pc, #404]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c44:	e024      	b.n	8002c90 <HAL_RCC_OscConfig+0x378>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d110      	bne.n	8002c70 <HAL_RCC_OscConfig+0x358>
 8002c4e:	4b60      	ldr	r3, [pc, #384]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c54:	4a5e      	ldr	r2, [pc, #376]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c56:	f043 0304 	orr.w	r3, r3, #4
 8002c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c64:	4a5a      	ldr	r2, [pc, #360]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6e:	e00f      	b.n	8002c90 <HAL_RCC_OscConfig+0x378>
 8002c70:	4b57      	ldr	r3, [pc, #348]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c76:	4a56      	ldr	r2, [pc, #344]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c80:	4b53      	ldr	r3, [pc, #332]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c86:	4a52      	ldr	r2, [pc, #328]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002c88:	f023 0304 	bic.w	r3, r3, #4
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d016      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe f9b0 	bl	8000ffc <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe f9ac 	bl	8000ffc <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e138      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb6:	4b46      	ldr	r3, [pc, #280]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ed      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x388>
 8002cc4:	e015      	b.n	8002cf2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc6:	f7fe f999 	bl	8000ffc <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe f995 	bl	8000ffc <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e121      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ce4:	4b3a      	ldr	r3, [pc, #232]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1ed      	bne.n	8002cce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf8:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	4a34      	ldr	r2, [pc, #208]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002cfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0320 	and.w	r3, r3, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d03c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d18:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f968 	bl	8000ffc <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d30:	f7fe f964 	bl	8000ffc <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0f2      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d42:	4b23      	ldr	r3, [pc, #140]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0ef      	beq.n	8002d30 <HAL_RCC_OscConfig+0x418>
 8002d50:	e01b      	b.n	8002d8a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d52:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d58:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7fe f94b 	bl	8000ffc <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d6a:	f7fe f947 	bl	8000ffc <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e0d5      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1ef      	bne.n	8002d6a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f000 80c9 	beq.w	8002f26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d94:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 030c 	and.w	r3, r3, #12
 8002d9c:	2b0c      	cmp	r3, #12
 8002d9e:	f000 8083 	beq.w	8002ea8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d15e      	bne.n	8002e68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_RCC_OscConfig+0x4b8>)
 8002db0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db6:	f7fe f921 	bl	8000ffc <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	e00c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbe:	f7fe f91d 	bl	8000ffc <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d905      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e0ab      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	4b55      	ldr	r3, [pc, #340]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1ec      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de4:	4b52      	ldr	r3, [pc, #328]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b52      	ldr	r3, [pc, #328]	@ (8002f34 <HAL_RCC_OscConfig+0x61c>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6a11      	ldr	r1, [r2, #32]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002dfe:	0212      	lsls	r2, r2, #8
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e06:	0852      	lsrs	r2, r2, #1
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0552      	lsls	r2, r2, #21
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0652      	lsls	r2, r2, #25
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e1e:	06d2      	lsls	r2, r2, #27
 8002e20:	430a      	orrs	r2, r1
 8002e22:	4943      	ldr	r1, [pc, #268]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b41      	ldr	r3, [pc, #260]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a40      	ldr	r2, [pc, #256]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e34:	4b3e      	ldr	r3, [pc, #248]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a3d      	ldr	r2, [pc, #244]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe f8dc 	bl	8000ffc <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f8d8 	bl	8000ffc <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e066      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	4b35      	ldr	r3, [pc, #212]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x530>
 8002e66:	e05e      	b.n	8002f26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b31      	ldr	r3, [pc, #196]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a30      	ldr	r2, [pc, #192]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7fe f8c2 	bl	8000ffc <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe f8be 	bl	8000ffc <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e04c      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e8e:	4b28      	ldr	r3, [pc, #160]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f0      	bne.n	8002e7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002e9a:	4b25      	ldr	r3, [pc, #148]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	4924      	ldr	r1, [pc, #144]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002ea0:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_RCC_OscConfig+0x620>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	60cb      	str	r3, [r1, #12]
 8002ea6:	e03e      	b.n	8002f26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e039      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_RCC_OscConfig+0x618>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d12c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d123      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11b      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d113      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d109      	bne.n	8002f22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d001      	beq.n	8002f26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3720      	adds	r7, #32
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40021000 	.word	0x40021000
 8002f34:	019f800c 	.word	0x019f800c
 8002f38:	feeefffc 	.word	0xfeeefffc

08002f3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e11e      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f54:	4b91      	ldr	r3, [pc, #580]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d910      	bls.n	8002f84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b8e      	ldr	r3, [pc, #568]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 020f 	bic.w	r2, r3, #15
 8002f6a:	498c      	ldr	r1, [pc, #560]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f72:	4b8a      	ldr	r3, [pc, #552]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e106      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d073      	beq.n	8003078 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d129      	bne.n	8002fec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f98:	4b81      	ldr	r3, [pc, #516]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0f4      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fa8:	f000 f966 	bl	8003278 <RCC_GetSysClockFreqFromPLLSource>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4a7c      	ldr	r2, [pc, #496]	@ (80031a4 <HAL_RCC_ClockConfig+0x268>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d93f      	bls.n	8003036 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fb6:	4b7a      	ldr	r3, [pc, #488]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d033      	beq.n	8003036 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d12f      	bne.n	8003036 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002fd6:	4b72      	ldr	r3, [pc, #456]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fde:	4a70      	ldr	r2, [pc, #448]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fe4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e024      	b.n	8003036 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d107      	bne.n	8003004 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d109      	bne.n	8003014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0c6      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	4b66      	ldr	r3, [pc, #408]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0be      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003014:	f000 f8ce 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 8003018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4a61      	ldr	r2, [pc, #388]	@ (80031a4 <HAL_RCC_ClockConfig+0x268>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d909      	bls.n	8003036 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003022:	4b5f      	ldr	r3, [pc, #380]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800302a:	4a5d      	ldr	r2, [pc, #372]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 800302c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003030:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003032:	2380      	movs	r3, #128	@ 0x80
 8003034:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003036:	4b5a      	ldr	r3, [pc, #360]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f023 0203 	bic.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	4957      	ldr	r1, [pc, #348]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003044:	4313      	orrs	r3, r2
 8003046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003048:	f7fd ffd8 	bl	8000ffc <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	e00a      	b.n	8003066 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003050:	f7fd ffd4 	bl	8000ffc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e095      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003066:	4b4e      	ldr	r3, [pc, #312]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 020c 	and.w	r2, r3, #12
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	429a      	cmp	r2, r3
 8003076:	d1eb      	bne.n	8003050 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d023      	beq.n	80030cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b43      	ldr	r3, [pc, #268]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a42      	ldr	r2, [pc, #264]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003096:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800309a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030a8:	4b3d      	ldr	r3, [pc, #244]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80030b0:	4a3b      	ldr	r2, [pc, #236]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80030b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	4936      	ldr	r1, [pc, #216]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
 80030ca:	e008      	b.n	80030de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b80      	cmp	r3, #128	@ 0x80
 80030d0:	d105      	bne.n	80030de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030d2:	4b33      	ldr	r3, [pc, #204]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	4a32      	ldr	r2, [pc, #200]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 80030d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80030dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030de:	4b2f      	ldr	r3, [pc, #188]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d21d      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ec:	4b2b      	ldr	r3, [pc, #172]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 020f 	bic.w	r2, r3, #15
 80030f4:	4929      	ldr	r1, [pc, #164]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030fc:	f7fd ff7e 	bl	8000ffc <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	e00a      	b.n	800311a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003104:	f7fd ff7a 	bl	8000ffc <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e03b      	b.n	8003192 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_RCC_ClockConfig+0x260>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d1ed      	bne.n	8003104 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4917      	ldr	r1, [pc, #92]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	490f      	ldr	r1, [pc, #60]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003166:	f000 f825 	bl	80031b4 <HAL_RCC_GetSysClockFreq>
 800316a:	4602      	mov	r2, r0
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <HAL_RCC_ClockConfig+0x264>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	490c      	ldr	r1, [pc, #48]	@ (80031a8 <HAL_RCC_ClockConfig+0x26c>)
 8003178:	5ccb      	ldrb	r3, [r1, r3]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <HAL_RCC_ClockConfig+0x270>)
 8003184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003186:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <HAL_RCC_ClockConfig+0x274>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd feea 	bl	8000f64 <HAL_InitTick>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3718      	adds	r7, #24
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40022000 	.word	0x40022000
 80031a0:	40021000 	.word	0x40021000
 80031a4:	04c4b400 	.word	0x04c4b400
 80031a8:	08004bd0 	.word	0x08004bd0
 80031ac:	20000000 	.word	0x20000000
 80031b0:	20000004 	.word	0x20000004

080031b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031ba:	4b2c      	ldr	r3, [pc, #176]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d102      	bne.n	80031cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <HAL_RCC_GetSysClockFreq+0xbc>)
 80031c8:	613b      	str	r3, [r7, #16]
 80031ca:	e047      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80031cc:	4b27      	ldr	r3, [pc, #156]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b08      	cmp	r3, #8
 80031d6:	d102      	bne.n	80031de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031d8:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <HAL_RCC_GetSysClockFreq+0xc0>)
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e03e      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80031de:	4b23      	ldr	r3, [pc, #140]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d136      	bne.n	8003258 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ea:	4b20      	ldr	r3, [pc, #128]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3301      	adds	r3, #1
 8003200:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2b03      	cmp	r3, #3
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003208:	4a1a      	ldr	r2, [pc, #104]	@ (8003274 <HAL_RCC_GetSysClockFreq+0xc0>)
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	4a16      	ldr	r2, [pc, #88]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003212:	68d2      	ldr	r2, [r2, #12]
 8003214:	0a12      	lsrs	r2, r2, #8
 8003216:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	617b      	str	r3, [r7, #20]
      break;
 8003220:	e00c      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003222:	4a13      	ldr	r2, [pc, #76]	@ (8003270 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	4a10      	ldr	r2, [pc, #64]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	0a12      	lsrs	r2, r2, #8
 8003230:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003234:	fb02 f303 	mul.w	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
      break;
 800323a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_GetSysClockFreq+0xb8>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	0e5b      	lsrs	r3, r3, #25
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	3301      	adds	r3, #1
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	fbb2 f3f3 	udiv	r3, r2, r3
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	e001      	b.n	800325c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800325c:	693b      	ldr	r3, [r7, #16]
}
 800325e:	4618      	mov	r0, r3
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	00f42400 	.word	0x00f42400
 8003274:	016e3600 	.word	0x016e3600

08003278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800327e:	4b1e      	ldr	r3, [pc, #120]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003288:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b03      	cmp	r3, #3
 800329a:	d10c      	bne.n	80032b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800329c:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032a6:	68d2      	ldr	r2, [r2, #12]
 80032a8:	0a12      	lsrs	r2, r2, #8
 80032aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032ae:	fb02 f303 	mul.w	r3, r2, r3
 80032b2:	617b      	str	r3, [r7, #20]
    break;
 80032b4:	e00c      	b.n	80032d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032b6:	4a12      	ldr	r2, [pc, #72]	@ (8003300 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80032be:	4a0e      	ldr	r2, [pc, #56]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032c0:	68d2      	ldr	r2, [r2, #12]
 80032c2:	0a12      	lsrs	r2, r2, #8
 80032c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
    break;
 80032ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80032d0:	4b09      	ldr	r3, [pc, #36]	@ (80032f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	0e5b      	lsrs	r3, r3, #25
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	3301      	adds	r3, #1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80032ea:	687b      	ldr	r3, [r7, #4]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	371c      	adds	r7, #28
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40021000 	.word	0x40021000
 80032fc:	016e3600 	.word	0x016e3600
 8003300:	00f42400 	.word	0x00f42400

08003304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800330c:	2300      	movs	r3, #0
 800330e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003310:	2300      	movs	r3, #0
 8003312:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8098 	beq.w	8003452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003326:	4b43      	ldr	r3, [pc, #268]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003332:	4b40      	ldr	r3, [pc, #256]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003336:	4a3f      	ldr	r2, [pc, #252]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333c:	6593      	str	r3, [r2, #88]	@ 0x58
 800333e:	4b3d      	ldr	r3, [pc, #244]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334a:	2301      	movs	r3, #1
 800334c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334e:	4b3a      	ldr	r3, [pc, #232]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a39      	ldr	r2, [pc, #228]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335a:	f7fd fe4f 	bl	8000ffc <HAL_GetTick>
 800335e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003360:	e009      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003362:	f7fd fe4b 	bl	8000ffc <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d902      	bls.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	74fb      	strb	r3, [r7, #19]
        break;
 8003374:	e005      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003376:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0ef      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d159      	bne.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003388:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003392:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01e      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d019      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a4:	4b23      	ldr	r3, [pc, #140]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b0:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d0:	4a18      	ldr	r2, [pc, #96]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fd fe0b 	bl	8000ffc <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e8:	e00b      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ea:	f7fd fe07 	bl	8000ffc <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d902      	bls.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003402:	4b0c      	ldr	r3, [pc, #48]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ec      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003410:	7cfb      	ldrb	r3, [r7, #19]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003416:	4b07      	ldr	r3, [pc, #28]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003424:	4903      	ldr	r1, [pc, #12]	@ (8003434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003426:	4313      	orrs	r3, r2
 8003428:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800342c:	e008      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	74bb      	strb	r3, [r7, #18]
 8003432:	e005      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003434:	40021000 	.word	0x40021000
 8003438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343c:	7cfb      	ldrb	r3, [r7, #19]
 800343e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003440:	7c7b      	ldrb	r3, [r7, #17]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d105      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003446:	4ba7      	ldr	r3, [pc, #668]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	4aa6      	ldr	r2, [pc, #664]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003450:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00a      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800345e:	4ba1      	ldr	r3, [pc, #644]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003464:	f023 0203 	bic.w	r2, r3, #3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	499d      	ldr	r1, [pc, #628]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003480:	4b98      	ldr	r3, [pc, #608]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 020c 	bic.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4995      	ldr	r1, [pc, #596]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034a2:	4b90      	ldr	r3, [pc, #576]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	498c      	ldr	r1, [pc, #560]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034c4:	4b87      	ldr	r3, [pc, #540]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	4984      	ldr	r1, [pc, #528]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034e6:	4b7f      	ldr	r3, [pc, #508]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	497b      	ldr	r1, [pc, #492]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0320 	and.w	r3, r3, #32
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003508:	4b76      	ldr	r3, [pc, #472]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4973      	ldr	r1, [pc, #460]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800352a:	4b6e      	ldr	r3, [pc, #440]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	496a      	ldr	r1, [pc, #424]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800354c:	4b65      	ldr	r3, [pc, #404]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4962      	ldr	r1, [pc, #392]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800356e:	4b5d      	ldr	r3, [pc, #372]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357c:	4959      	ldr	r1, [pc, #356]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003590:	4b54      	ldr	r3, [pc, #336]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003592:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003596:	f023 0203 	bic.w	r2, r3, #3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	4951      	ldr	r1, [pc, #324]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b2:	4b4c      	ldr	r3, [pc, #304]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c0:	4948      	ldr	r1, [pc, #288]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d015      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035d4:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4940      	ldr	r1, [pc, #256]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f2:	d105      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f4:	4b3b      	ldr	r3, [pc, #236]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a3a      	ldr	r2, [pc, #232]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800360c:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003612:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361a:	4932      	ldr	r1, [pc, #200]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800362a:	d105      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a2c      	ldr	r2, [pc, #176]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003632:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003636:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003644:	4b27      	ldr	r3, [pc, #156]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003652:	4924      	ldr	r1, [pc, #144]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003662:	d105      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003664:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	4a1e      	ldr	r2, [pc, #120]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800366e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800367c:	4b19      	ldr	r3, [pc, #100]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003682:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	4916      	ldr	r1, [pc, #88]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800369a:	d105      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800369c:	4b11      	ldr	r3, [pc, #68]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4a10      	ldr	r2, [pc, #64]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d019      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b4:	4b0b      	ldr	r3, [pc, #44]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	4908      	ldr	r1, [pc, #32]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d2:	d109      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d4:	4b03      	ldr	r3, [pc, #12]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	4a02      	ldr	r2, [pc, #8]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036de:	60d3      	str	r3, [r2, #12]
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80036e2:	bf00      	nop
 80036e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d015      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80036f4:	4b29      	ldr	r3, [pc, #164]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	4926      	ldr	r1, [pc, #152]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800370e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003712:	d105      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003714:	4b21      	ldr	r3, [pc, #132]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a20      	ldr	r2, [pc, #128]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800371a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800371e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373a:	4918      	ldr	r1, [pc, #96]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800374a:	d105      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800374c:	4b13      	ldr	r3, [pc, #76]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a12      	ldr	r2, [pc, #72]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003756:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d015      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003764:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003766:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800376a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003772:	490a      	ldr	r1, [pc, #40]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003774:	4313      	orrs	r3, r2
 8003776:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003782:	d105      	bne.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003784:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4a04      	ldr	r2, [pc, #16]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800378e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003790:	7cbb      	ldrb	r3, [r7, #18]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000

080037a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e049      	b.n	8003846 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd f9ee 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3304      	adds	r3, #4
 80037dc:	4619      	mov	r1, r3
 80037de:	4610      	mov	r0, r2
 80037e0:	f000 fbf4 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e049      	b.n	80038f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d106      	bne.n	800387a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f841 	bl	80038fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2202      	movs	r2, #2
 800387e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3304      	adds	r3, #4
 800388a:	4619      	mov	r1, r3
 800388c:	4610      	mov	r0, r2
 800388e:	f000 fb9d 	bl	8003fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e097      	b.n	8003a54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fd f97b 	bl	8000c34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003954:	f023 0307 	bic.w	r3, r3, #7
 8003958:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3304      	adds	r3, #4
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 fb31 	bl	8003fcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6a1b      	ldr	r3, [r3, #32]
 8003980:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	4313      	orrs	r3, r2
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80039b0:	f023 030c 	bic.w	r3, r3, #12
 80039b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	021b      	lsls	r3, r3, #8
 80039cc:	4313      	orrs	r3, r2
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	011a      	lsls	r2, r3, #4
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	4313      	orrs	r3, r2
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80039f6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	4313      	orrs	r3, r2
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d110      	bne.n	8003aae <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a92:	7b7b      	ldrb	r3, [r7, #13]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d001      	beq.n	8003a9c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e069      	b.n	8003b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aac:	e031      	b.n	8003b12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d110      	bne.n	8003ad6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ab4:	7bbb      	ldrb	r3, [r7, #14]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d102      	bne.n	8003ac0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003aba:	7b3b      	ldrb	r3, [r7, #12]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d001      	beq.n	8003ac4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e055      	b.n	8003b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ad4:	e01d      	b.n	8003b12 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d108      	bne.n	8003aee <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003adc:	7bbb      	ldrb	r3, [r7, #14]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ae2:	7b7b      	ldrb	r3, [r7, #13]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d102      	bne.n	8003aee <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ae8:	7b3b      	ldrb	r3, [r7, #12]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d001      	beq.n	8003af2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e03e      	b.n	8003b70 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_TIM_Encoder_Start+0xc4>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d008      	beq.n	8003b30 <HAL_TIM_Encoder_Start+0xd4>
 8003b1e:	e00f      	b.n	8003b40 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fec9 	bl	80048c0 <TIM_CCxChannelCmd>
      break;
 8003b2e:	e016      	b.n	8003b5e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2201      	movs	r2, #1
 8003b36:	2104      	movs	r1, #4
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fec1 	bl	80048c0 <TIM_CCxChannelCmd>
      break;
 8003b3e:	e00e      	b.n	8003b5e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 feb9 	bl	80048c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	2104      	movs	r1, #4
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 feb2 	bl	80048c0 <TIM_CCxChannelCmd>
      break;
 8003b5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e0ff      	b.n	8003d96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b14      	cmp	r3, #20
 8003ba2:	f200 80f0 	bhi.w	8003d86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003c01 	.word	0x08003c01
 8003bb0:	08003d87 	.word	0x08003d87
 8003bb4:	08003d87 	.word	0x08003d87
 8003bb8:	08003d87 	.word	0x08003d87
 8003bbc:	08003c41 	.word	0x08003c41
 8003bc0:	08003d87 	.word	0x08003d87
 8003bc4:	08003d87 	.word	0x08003d87
 8003bc8:	08003d87 	.word	0x08003d87
 8003bcc:	08003c83 	.word	0x08003c83
 8003bd0:	08003d87 	.word	0x08003d87
 8003bd4:	08003d87 	.word	0x08003d87
 8003bd8:	08003d87 	.word	0x08003d87
 8003bdc:	08003cc3 	.word	0x08003cc3
 8003be0:	08003d87 	.word	0x08003d87
 8003be4:	08003d87 	.word	0x08003d87
 8003be8:	08003d87 	.word	0x08003d87
 8003bec:	08003d05 	.word	0x08003d05
 8003bf0:	08003d87 	.word	0x08003d87
 8003bf4:	08003d87 	.word	0x08003d87
 8003bf8:	08003d87 	.word	0x08003d87
 8003bfc:	08003d45 	.word	0x08003d45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fa94 	bl	8004134 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0208 	orr.w	r2, r2, #8
 8003c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0204 	bic.w	r2, r2, #4
 8003c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6999      	ldr	r1, [r3, #24]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]
      break;
 8003c3e:	e0a5      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fb0e 	bl	8004268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6999      	ldr	r1, [r3, #24]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	619a      	str	r2, [r3, #24]
      break;
 8003c80:	e084      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb81 	bl	8004390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0204 	bic.w	r2, r2, #4
 8003cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	61da      	str	r2, [r3, #28]
      break;
 8003cc0:	e064      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fbf3 	bl	80044b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	021a      	lsls	r2, r3, #8
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	61da      	str	r2, [r3, #28]
      break;
 8003d02:	e043      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fc66 	bl	80045dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003d42:	e023      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fcb0 	bl	80046b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8003d84:	e002      	b.n	8003d8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	75fb      	strb	r3, [r7, #23]
      break;
 8003d8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop

08003da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d101      	bne.n	8003dbc <HAL_TIM_ConfigClockSource+0x1c>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e0f6      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x20a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003dda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003de6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a6f      	ldr	r2, [pc, #444]	@ (8003fb4 <HAL_TIM_ConfigClockSource+0x214>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	f000 80c1 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003dfc:	4a6d      	ldr	r2, [pc, #436]	@ (8003fb4 <HAL_TIM_ConfigClockSource+0x214>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	f200 80c6 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e04:	4a6c      	ldr	r2, [pc, #432]	@ (8003fb8 <HAL_TIM_ConfigClockSource+0x218>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	f000 80b9 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003e0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003fb8 <HAL_TIM_ConfigClockSource+0x218>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	f200 80be 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e14:	4a69      	ldr	r2, [pc, #420]	@ (8003fbc <HAL_TIM_ConfigClockSource+0x21c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	f000 80b1 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003e1c:	4a67      	ldr	r2, [pc, #412]	@ (8003fbc <HAL_TIM_ConfigClockSource+0x21c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	f200 80b6 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e24:	4a66      	ldr	r2, [pc, #408]	@ (8003fc0 <HAL_TIM_ConfigClockSource+0x220>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f000 80a9 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003e2c:	4a64      	ldr	r2, [pc, #400]	@ (8003fc0 <HAL_TIM_ConfigClockSource+0x220>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	f200 80ae 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e34:	4a63      	ldr	r2, [pc, #396]	@ (8003fc4 <HAL_TIM_ConfigClockSource+0x224>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	f000 80a1 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003e3c:	4a61      	ldr	r2, [pc, #388]	@ (8003fc4 <HAL_TIM_ConfigClockSource+0x224>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	f200 80a6 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e44:	4a60      	ldr	r2, [pc, #384]	@ (8003fc8 <HAL_TIM_ConfigClockSource+0x228>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	f000 8099 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003e4c:	4a5e      	ldr	r2, [pc, #376]	@ (8003fc8 <HAL_TIM_ConfigClockSource+0x228>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	f200 809e 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e58:	f000 8091 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003e5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003e60:	f200 8096 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e68:	f000 8089 	beq.w	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003e6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e70:	f200 808e 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e78:	d03e      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x158>
 8003e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7e:	f200 8087 	bhi.w	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e86:	f000 8086 	beq.w	8003f96 <HAL_TIM_ConfigClockSource+0x1f6>
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8e:	d87f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e90:	2b70      	cmp	r3, #112	@ 0x70
 8003e92:	d01a      	beq.n	8003eca <HAL_TIM_ConfigClockSource+0x12a>
 8003e94:	2b70      	cmp	r3, #112	@ 0x70
 8003e96:	d87b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003e98:	2b60      	cmp	r3, #96	@ 0x60
 8003e9a:	d050      	beq.n	8003f3e <HAL_TIM_ConfigClockSource+0x19e>
 8003e9c:	2b60      	cmp	r3, #96	@ 0x60
 8003e9e:	d877      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ea0:	2b50      	cmp	r3, #80	@ 0x50
 8003ea2:	d03c      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0x17e>
 8003ea4:	2b50      	cmp	r3, #80	@ 0x50
 8003ea6:	d873      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d058      	beq.n	8003f5e <HAL_TIM_ConfigClockSource+0x1be>
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	d86f      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003eb0:	2b30      	cmp	r3, #48	@ 0x30
 8003eb2:	d064      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003eb4:	2b30      	cmp	r3, #48	@ 0x30
 8003eb6:	d86b      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d060      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d867      	bhi.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d05c      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d05a      	beq.n	8003f7e <HAL_TIM_ConfigClockSource+0x1de>
 8003ec8:	e062      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	f000 fcd1 	bl	8004880 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	609a      	str	r2, [r3, #8]
      break;
 8003ef6:	e04f      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	f000 fcba 	bl	8004880 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689a      	ldr	r2, [r3, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f1a:	609a      	str	r2, [r3, #8]
      break;
 8003f1c:	e03c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f000 fc2c 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2150      	movs	r1, #80	@ 0x50
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fc85 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8003f3c:	e02c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f000 fc4b 	bl	80047e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2160      	movs	r1, #96	@ 0x60
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fc75 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8003f5c:	e01c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f000 fc0c 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2140      	movs	r1, #64	@ 0x40
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fc65 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8003f7c:	e00c      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4619      	mov	r1, r3
 8003f88:	4610      	mov	r0, r2
 8003f8a:	f000 fc5c 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8003f8e:	e003      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	73fb      	strb	r3, [r7, #15]
      break;
 8003f94:	e000      	b.n	8003f98 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	00100070 	.word	0x00100070
 8003fb8:	00100060 	.word	0x00100060
 8003fbc:	00100050 	.word	0x00100050
 8003fc0:	00100040 	.word	0x00100040
 8003fc4:	00100030 	.word	0x00100030
 8003fc8:	00100020 	.word	0x00100020

08003fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a4c      	ldr	r2, [pc, #304]	@ (8004110 <TIM_Base_SetConfig+0x144>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d017      	beq.n	8004014 <TIM_Base_SetConfig+0x48>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fea:	d013      	beq.n	8004014 <TIM_Base_SetConfig+0x48>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a49      	ldr	r2, [pc, #292]	@ (8004114 <TIM_Base_SetConfig+0x148>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d00f      	beq.n	8004014 <TIM_Base_SetConfig+0x48>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a48      	ldr	r2, [pc, #288]	@ (8004118 <TIM_Base_SetConfig+0x14c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <TIM_Base_SetConfig+0x48>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a47      	ldr	r2, [pc, #284]	@ (800411c <TIM_Base_SetConfig+0x150>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d007      	beq.n	8004014 <TIM_Base_SetConfig+0x48>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a46      	ldr	r2, [pc, #280]	@ (8004120 <TIM_Base_SetConfig+0x154>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_Base_SetConfig+0x48>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a45      	ldr	r2, [pc, #276]	@ (8004124 <TIM_Base_SetConfig+0x158>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a39      	ldr	r2, [pc, #228]	@ (8004110 <TIM_Base_SetConfig+0x144>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d023      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004034:	d01f      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a36      	ldr	r2, [pc, #216]	@ (8004114 <TIM_Base_SetConfig+0x148>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01b      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a35      	ldr	r2, [pc, #212]	@ (8004118 <TIM_Base_SetConfig+0x14c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d017      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a34      	ldr	r2, [pc, #208]	@ (800411c <TIM_Base_SetConfig+0x150>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a33      	ldr	r2, [pc, #204]	@ (8004120 <TIM_Base_SetConfig+0x154>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00f      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a33      	ldr	r2, [pc, #204]	@ (8004128 <TIM_Base_SetConfig+0x15c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00b      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a32      	ldr	r2, [pc, #200]	@ (800412c <TIM_Base_SetConfig+0x160>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d007      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a31      	ldr	r2, [pc, #196]	@ (8004130 <TIM_Base_SetConfig+0x164>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d003      	beq.n	8004076 <TIM_Base_SetConfig+0xaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2c      	ldr	r2, [pc, #176]	@ (8004124 <TIM_Base_SetConfig+0x158>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d108      	bne.n	8004088 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a18      	ldr	r2, [pc, #96]	@ (8004110 <TIM_Base_SetConfig+0x144>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <TIM_Base_SetConfig+0x110>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	@ (8004120 <TIM_Base_SetConfig+0x154>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00f      	beq.n	80040dc <TIM_Base_SetConfig+0x110>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a1a      	ldr	r2, [pc, #104]	@ (8004128 <TIM_Base_SetConfig+0x15c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_Base_SetConfig+0x110>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a19      	ldr	r2, [pc, #100]	@ (800412c <TIM_Base_SetConfig+0x160>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_Base_SetConfig+0x110>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a18      	ldr	r2, [pc, #96]	@ (8004130 <TIM_Base_SetConfig+0x164>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0x110>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a13      	ldr	r2, [pc, #76]	@ (8004124 <TIM_Base_SetConfig+0x158>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]
  }
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40013400 	.word	0x40013400
 8004124:	40015000 	.word	0x40015000
 8004128:	40014000 	.word	0x40014000
 800412c:	40014400 	.word	0x40014400
 8004130:	40014800 	.word	0x40014800

08004134 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f023 0201 	bic.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0303 	bic.w	r3, r3, #3
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f023 0302 	bic.w	r3, r3, #2
 8004180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	4313      	orrs	r3, r2
 800418a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a30      	ldr	r2, [pc, #192]	@ (8004250 <TIM_OC1_SetConfig+0x11c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <TIM_OC1_SetConfig+0x88>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a2f      	ldr	r2, [pc, #188]	@ (8004254 <TIM_OC1_SetConfig+0x120>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00f      	beq.n	80041bc <TIM_OC1_SetConfig+0x88>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2e      	ldr	r2, [pc, #184]	@ (8004258 <TIM_OC1_SetConfig+0x124>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d00b      	beq.n	80041bc <TIM_OC1_SetConfig+0x88>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <TIM_OC1_SetConfig+0x128>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d007      	beq.n	80041bc <TIM_OC1_SetConfig+0x88>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <TIM_OC1_SetConfig+0x12c>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_OC1_SetConfig+0x88>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a2b      	ldr	r2, [pc, #172]	@ (8004264 <TIM_OC1_SetConfig+0x130>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10c      	bne.n	80041d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0308 	bic.w	r3, r3, #8
 80041c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004250 <TIM_OC1_SetConfig+0x11c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <TIM_OC1_SetConfig+0xd2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004254 <TIM_OC1_SetConfig+0x120>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00f      	beq.n	8004206 <TIM_OC1_SetConfig+0xd2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004258 <TIM_OC1_SetConfig+0x124>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_OC1_SetConfig+0xd2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a1a      	ldr	r2, [pc, #104]	@ (800425c <TIM_OC1_SetConfig+0x128>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d007      	beq.n	8004206 <TIM_OC1_SetConfig+0xd2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a19      	ldr	r2, [pc, #100]	@ (8004260 <TIM_OC1_SetConfig+0x12c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_OC1_SetConfig+0xd2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <TIM_OC1_SetConfig+0x130>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d111      	bne.n	800422a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800420c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00
 8004254:	40013400 	.word	0x40013400
 8004258:	40014000 	.word	0x40014000
 800425c:	40014400 	.word	0x40014400
 8004260:	40014800 	.word	0x40014800
 8004264:	40015000 	.word	0x40015000

08004268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f023 0210 	bic.w	r2, r3, #16
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	021b      	lsls	r3, r3, #8
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f023 0320 	bic.w	r3, r3, #32
 80042b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004378 <TIM_OC2_SetConfig+0x110>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d007      	beq.n	80042dc <TIM_OC2_SetConfig+0x74>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a2b      	ldr	r2, [pc, #172]	@ (800437c <TIM_OC2_SetConfig+0x114>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d003      	beq.n	80042dc <TIM_OC2_SetConfig+0x74>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004380 <TIM_OC2_SetConfig+0x118>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d10d      	bne.n	80042f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	011b      	lsls	r3, r3, #4
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a1f      	ldr	r2, [pc, #124]	@ (8004378 <TIM_OC2_SetConfig+0x110>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d013      	beq.n	8004328 <TIM_OC2_SetConfig+0xc0>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a1e      	ldr	r2, [pc, #120]	@ (800437c <TIM_OC2_SetConfig+0x114>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00f      	beq.n	8004328 <TIM_OC2_SetConfig+0xc0>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <TIM_OC2_SetConfig+0x11c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d00b      	beq.n	8004328 <TIM_OC2_SetConfig+0xc0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a1d      	ldr	r2, [pc, #116]	@ (8004388 <TIM_OC2_SetConfig+0x120>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d007      	beq.n	8004328 <TIM_OC2_SetConfig+0xc0>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <TIM_OC2_SetConfig+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d003      	beq.n	8004328 <TIM_OC2_SetConfig+0xc0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a17      	ldr	r2, [pc, #92]	@ (8004380 <TIM_OC2_SetConfig+0x118>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d113      	bne.n	8004350 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800432e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004336:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	4313      	orrs	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40013400 	.word	0x40013400
 8004380:	40015000 	.word	0x40015000
 8004384:	40014000 	.word	0x40014000
 8004388:	40014400 	.word	0x40014400
 800438c:	40014800 	.word	0x40014800

08004390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0303 	bic.w	r3, r3, #3
 80043ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a2b      	ldr	r2, [pc, #172]	@ (800449c <TIM_OC3_SetConfig+0x10c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d007      	beq.n	8004402 <TIM_OC3_SetConfig+0x72>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a2a      	ldr	r2, [pc, #168]	@ (80044a0 <TIM_OC3_SetConfig+0x110>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_OC3_SetConfig+0x72>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a29      	ldr	r2, [pc, #164]	@ (80044a4 <TIM_OC3_SetConfig+0x114>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10d      	bne.n	800441e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800441c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1e      	ldr	r2, [pc, #120]	@ (800449c <TIM_OC3_SetConfig+0x10c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <TIM_OC3_SetConfig+0xbe>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a1d      	ldr	r2, [pc, #116]	@ (80044a0 <TIM_OC3_SetConfig+0x110>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00f      	beq.n	800444e <TIM_OC3_SetConfig+0xbe>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a1d      	ldr	r2, [pc, #116]	@ (80044a8 <TIM_OC3_SetConfig+0x118>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_OC3_SetConfig+0xbe>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1c      	ldr	r2, [pc, #112]	@ (80044ac <TIM_OC3_SetConfig+0x11c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_OC3_SetConfig+0xbe>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a1b      	ldr	r2, [pc, #108]	@ (80044b0 <TIM_OC3_SetConfig+0x120>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC3_SetConfig+0xbe>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a16      	ldr	r2, [pc, #88]	@ (80044a4 <TIM_OC3_SetConfig+0x114>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d113      	bne.n	8004476 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685a      	ldr	r2, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	621a      	str	r2, [r3, #32]
}
 8004490:	bf00      	nop
 8004492:	371c      	adds	r7, #28
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40013400 	.word	0x40013400
 80044a4:	40015000 	.word	0x40015000
 80044a8:	40014000 	.word	0x40014000
 80044ac:	40014400 	.word	0x40014400
 80044b0:	40014800 	.word	0x40014800

080044b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	021b      	lsls	r3, r3, #8
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004502:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	031b      	lsls	r3, r3, #12
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a2c      	ldr	r2, [pc, #176]	@ (80045c4 <TIM_OC4_SetConfig+0x110>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_OC4_SetConfig+0x74>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a2b      	ldr	r2, [pc, #172]	@ (80045c8 <TIM_OC4_SetConfig+0x114>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC4_SetConfig+0x74>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a2a      	ldr	r2, [pc, #168]	@ (80045cc <TIM_OC4_SetConfig+0x118>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10d      	bne.n	8004544 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800452e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	031b      	lsls	r3, r3, #12
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <TIM_OC4_SetConfig+0x110>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d013      	beq.n	8004574 <TIM_OC4_SetConfig+0xc0>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a1e      	ldr	r2, [pc, #120]	@ (80045c8 <TIM_OC4_SetConfig+0x114>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00f      	beq.n	8004574 <TIM_OC4_SetConfig+0xc0>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a1e      	ldr	r2, [pc, #120]	@ (80045d0 <TIM_OC4_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00b      	beq.n	8004574 <TIM_OC4_SetConfig+0xc0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a1d      	ldr	r2, [pc, #116]	@ (80045d4 <TIM_OC4_SetConfig+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d007      	beq.n	8004574 <TIM_OC4_SetConfig+0xc0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a1c      	ldr	r2, [pc, #112]	@ (80045d8 <TIM_OC4_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d003      	beq.n	8004574 <TIM_OC4_SetConfig+0xc0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a17      	ldr	r2, [pc, #92]	@ (80045cc <TIM_OC4_SetConfig+0x118>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d113      	bne.n	800459c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800457a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004582:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	019b      	lsls	r3, r3, #6
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40013400 	.word	0x40013400
 80045cc:	40015000 	.word	0x40015000
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	041b      	lsls	r3, r3, #16
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <TIM_OC5_SetConfig+0xbc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <TIM_OC5_SetConfig+0x82>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a18      	ldr	r2, [pc, #96]	@ (800469c <TIM_OC5_SetConfig+0xc0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00f      	beq.n	800465e <TIM_OC5_SetConfig+0x82>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a17      	ldr	r2, [pc, #92]	@ (80046a0 <TIM_OC5_SetConfig+0xc4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00b      	beq.n	800465e <TIM_OC5_SetConfig+0x82>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a16      	ldr	r2, [pc, #88]	@ (80046a4 <TIM_OC5_SetConfig+0xc8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d007      	beq.n	800465e <TIM_OC5_SetConfig+0x82>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a15      	ldr	r2, [pc, #84]	@ (80046a8 <TIM_OC5_SetConfig+0xcc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d003      	beq.n	800465e <TIM_OC5_SetConfig+0x82>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a14      	ldr	r2, [pc, #80]	@ (80046ac <TIM_OC5_SetConfig+0xd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d109      	bne.n	8004672 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004664:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	4313      	orrs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	621a      	str	r2, [r3, #32]
}
 800468c:	bf00      	nop
 800468e:	371c      	adds	r7, #28
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr
 8004698:	40012c00 	.word	0x40012c00
 800469c:	40013400 	.word	0x40013400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400
 80046a8:	40014800 	.word	0x40014800
 80046ac:	40015000 	.word	0x40015000

080046b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	021b      	lsls	r3, r3, #8
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80046f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	051b      	lsls	r3, r3, #20
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a1a      	ldr	r2, [pc, #104]	@ (8004770 <TIM_OC6_SetConfig+0xc0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <TIM_OC6_SetConfig+0x84>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a19      	ldr	r2, [pc, #100]	@ (8004774 <TIM_OC6_SetConfig+0xc4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00f      	beq.n	8004734 <TIM_OC6_SetConfig+0x84>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <TIM_OC6_SetConfig+0xc8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_OC6_SetConfig+0x84>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a17      	ldr	r2, [pc, #92]	@ (800477c <TIM_OC6_SetConfig+0xcc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_OC6_SetConfig+0x84>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a16      	ldr	r2, [pc, #88]	@ (8004780 <TIM_OC6_SetConfig+0xd0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_OC6_SetConfig+0x84>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a15      	ldr	r2, [pc, #84]	@ (8004784 <TIM_OC6_SetConfig+0xd4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d109      	bne.n	8004748 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	029b      	lsls	r3, r3, #10
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	621a      	str	r2, [r3, #32]
}
 8004762:	bf00      	nop
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40013400 	.word	0x40013400
 8004778:	40014000 	.word	0x40014000
 800477c:	40014400 	.word	0x40014400
 8004780:	40014800 	.word	0x40014800
 8004784:	40015000 	.word	0x40015000

08004788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 030a 	bic.w	r3, r3, #10
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	f023 0210 	bic.w	r2, r3, #16
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004810:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	4313      	orrs	r3, r2
 800481a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004822:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	693a      	ldr	r2, [r7, #16]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800485c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	f043 0307 	orr.w	r3, r3, #7
 800486c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	609a      	str	r2, [r3, #8]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800489a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	021a      	lsls	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	609a      	str	r2, [r3, #8]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 031f 	and.w	r3, r3, #31
 80048d2:	2201      	movs	r2, #1
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a1a      	ldr	r2, [r3, #32]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	401a      	ands	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	431a      	orrs	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
	...

0800490c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004920:	2302      	movs	r3, #2
 8004922:	e074      	b.n	8004a0e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a34      	ldr	r2, [pc, #208]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d009      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a33      	ldr	r2, [pc, #204]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d004      	beq.n	8004962 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a31      	ldr	r2, [pc, #196]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d108      	bne.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004968:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800497a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a21      	ldr	r2, [pc, #132]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a4:	d01d      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1c      	ldr	r2, [pc, #112]	@ (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a15      	ldr	r2, [pc, #84]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10c      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40013400 	.word	0x40013400
 8004a24:	40015000 	.word	0x40015000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40014000 	.word	0x40014000

08004a38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e078      	b.n	8004b46 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	@ (8004b58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d11c      	bne.n	8004b34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	051b      	lsls	r3, r3, #20
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40013400 	.word	0x40013400
 8004b5c:	40015000 	.word	0x40015000

08004b60 <memset>:
 8004b60:	4402      	add	r2, r0
 8004b62:	4603      	mov	r3, r0
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d100      	bne.n	8004b6a <memset+0xa>
 8004b68:	4770      	bx	lr
 8004b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b6e:	e7f9      	b.n	8004b64 <memset+0x4>

08004b70 <__libc_init_array>:
 8004b70:	b570      	push	{r4, r5, r6, lr}
 8004b72:	4d0d      	ldr	r5, [pc, #52]	@ (8004ba8 <__libc_init_array+0x38>)
 8004b74:	4c0d      	ldr	r4, [pc, #52]	@ (8004bac <__libc_init_array+0x3c>)
 8004b76:	1b64      	subs	r4, r4, r5
 8004b78:	10a4      	asrs	r4, r4, #2
 8004b7a:	2600      	movs	r6, #0
 8004b7c:	42a6      	cmp	r6, r4
 8004b7e:	d109      	bne.n	8004b94 <__libc_init_array+0x24>
 8004b80:	4d0b      	ldr	r5, [pc, #44]	@ (8004bb0 <__libc_init_array+0x40>)
 8004b82:	4c0c      	ldr	r4, [pc, #48]	@ (8004bb4 <__libc_init_array+0x44>)
 8004b84:	f000 f818 	bl	8004bb8 <_init>
 8004b88:	1b64      	subs	r4, r4, r5
 8004b8a:	10a4      	asrs	r4, r4, #2
 8004b8c:	2600      	movs	r6, #0
 8004b8e:	42a6      	cmp	r6, r4
 8004b90:	d105      	bne.n	8004b9e <__libc_init_array+0x2e>
 8004b92:	bd70      	pop	{r4, r5, r6, pc}
 8004b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b98:	4798      	blx	r3
 8004b9a:	3601      	adds	r6, #1
 8004b9c:	e7ee      	b.n	8004b7c <__libc_init_array+0xc>
 8004b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ba2:	4798      	blx	r3
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7f2      	b.n	8004b8e <__libc_init_array+0x1e>
 8004ba8:	08004be0 	.word	0x08004be0
 8004bac:	08004be0 	.word	0x08004be0
 8004bb0:	08004be0 	.word	0x08004be0
 8004bb4:	08004be4 	.word	0x08004be4

08004bb8 <_init>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	bf00      	nop
 8004bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bbe:	bc08      	pop	{r3}
 8004bc0:	469e      	mov	lr, r3
 8004bc2:	4770      	bx	lr

08004bc4 <_fini>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	bf00      	nop
 8004bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bca:	bc08      	pop	{r3}
 8004bcc:	469e      	mov	lr, r3
 8004bce:	4770      	bx	lr
