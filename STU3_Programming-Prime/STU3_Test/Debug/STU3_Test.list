
STU3_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011134  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08011310  08011310  00012310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011768  08011768  000132c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011768  08011768  00012768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011770  08011770  000132c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011770  08011770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011774  08011774  00012774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c0  20000000  08011778  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c20  200002c0  08011a38  000132c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  08011a38  00013ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029739  00000000  00000000  000132f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d3e  00000000  00000000  0003ca29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce8  00000000  00000000  00041768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001671  00000000  00000000  00043450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b510  00000000  00000000  00044ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000285f6  00000000  00000000  0006ffd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ab07  00000000  00000000  000985c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b30ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084e4  00000000  00000000  001b3114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001bb5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200002c0 	.word	0x200002c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080112f4 	.word	0x080112f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200002c4 	.word	0x200002c4
 8000214:	080112f4 	.word	0x080112f4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_uldivmod>:
 8000dec:	b953      	cbnz	r3, 8000e04 <__aeabi_uldivmod+0x18>
 8000dee:	b94a      	cbnz	r2, 8000e04 <__aeabi_uldivmod+0x18>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bf08      	it	eq
 8000df4:	2800      	cmpeq	r0, #0
 8000df6:	bf1c      	itt	ne
 8000df8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000e00:	f000 b988 	b.w	8001114 <__aeabi_idiv0>
 8000e04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e0c:	f000 f806 	bl	8000e1c <__udivmoddi4>
 8000e10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e18:	b004      	add	sp, #16
 8000e1a:	4770      	bx	lr

08000e1c <__udivmoddi4>:
 8000e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e20:	9d08      	ldr	r5, [sp, #32]
 8000e22:	468e      	mov	lr, r1
 8000e24:	4604      	mov	r4, r0
 8000e26:	4688      	mov	r8, r1
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d14a      	bne.n	8000ec2 <__udivmoddi4+0xa6>
 8000e2c:	428a      	cmp	r2, r1
 8000e2e:	4617      	mov	r7, r2
 8000e30:	d962      	bls.n	8000ef8 <__udivmoddi4+0xdc>
 8000e32:	fab2 f682 	clz	r6, r2
 8000e36:	b14e      	cbz	r6, 8000e4c <__udivmoddi4+0x30>
 8000e38:	f1c6 0320 	rsb	r3, r6, #32
 8000e3c:	fa01 f806 	lsl.w	r8, r1, r6
 8000e40:	fa20 f303 	lsr.w	r3, r0, r3
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	ea43 0808 	orr.w	r8, r3, r8
 8000e4a:	40b4      	lsls	r4, r6
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	fa1f fc87 	uxth.w	ip, r7
 8000e54:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e62:	fb01 f20c 	mul.w	r2, r1, ip
 8000e66:	429a      	cmp	r2, r3
 8000e68:	d909      	bls.n	8000e7e <__udivmoddi4+0x62>
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e70:	f080 80ea 	bcs.w	8001048 <__udivmoddi4+0x22c>
 8000e74:	429a      	cmp	r2, r3
 8000e76:	f240 80e7 	bls.w	8001048 <__udivmoddi4+0x22c>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	1a9a      	subs	r2, r3, r2
 8000e80:	b2a3      	uxth	r3, r4
 8000e82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e92:	459c      	cmp	ip, r3
 8000e94:	d909      	bls.n	8000eaa <__udivmoddi4+0x8e>
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e9c:	f080 80d6 	bcs.w	800104c <__udivmoddi4+0x230>
 8000ea0:	459c      	cmp	ip, r3
 8000ea2:	f240 80d3 	bls.w	800104c <__udivmoddi4+0x230>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000eae:	eba3 030c 	sub.w	r3, r3, ip
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	b11d      	cbz	r5, 8000ebe <__udivmoddi4+0xa2>
 8000eb6:	40f3      	lsrs	r3, r6
 8000eb8:	2200      	movs	r2, #0
 8000eba:	e9c5 3200 	strd	r3, r2, [r5]
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d905      	bls.n	8000ed2 <__udivmoddi4+0xb6>
 8000ec6:	b10d      	cbz	r5, 8000ecc <__udivmoddi4+0xb0>
 8000ec8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4608      	mov	r0, r1
 8000ed0:	e7f5      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ed2:	fab3 f183 	clz	r1, r3
 8000ed6:	2900      	cmp	r1, #0
 8000ed8:	d146      	bne.n	8000f68 <__udivmoddi4+0x14c>
 8000eda:	4573      	cmp	r3, lr
 8000edc:	d302      	bcc.n	8000ee4 <__udivmoddi4+0xc8>
 8000ede:	4282      	cmp	r2, r0
 8000ee0:	f200 8105 	bhi.w	80010ee <__udivmoddi4+0x2d2>
 8000ee4:	1a84      	subs	r4, r0, r2
 8000ee6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000eea:	2001      	movs	r0, #1
 8000eec:	4690      	mov	r8, r2
 8000eee:	2d00      	cmp	r5, #0
 8000ef0:	d0e5      	beq.n	8000ebe <__udivmoddi4+0xa2>
 8000ef2:	e9c5 4800 	strd	r4, r8, [r5]
 8000ef6:	e7e2      	b.n	8000ebe <__udivmoddi4+0xa2>
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	f000 8090 	beq.w	800101e <__udivmoddi4+0x202>
 8000efe:	fab2 f682 	clz	r6, r2
 8000f02:	2e00      	cmp	r6, #0
 8000f04:	f040 80a4 	bne.w	8001050 <__udivmoddi4+0x234>
 8000f08:	1a8a      	subs	r2, r1, r2
 8000f0a:	0c03      	lsrs	r3, r0, #16
 8000f0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f10:	b280      	uxth	r0, r0
 8000f12:	b2bc      	uxth	r4, r7
 8000f14:	2101      	movs	r1, #1
 8000f16:	fbb2 fcfe 	udiv	ip, r2, lr
 8000f1a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f22:	fb04 f20c 	mul.w	r2, r4, ip
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d907      	bls.n	8000f3a <__udivmoddi4+0x11e>
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x11c>
 8000f32:	429a      	cmp	r2, r3
 8000f34:	f200 80e0 	bhi.w	80010f8 <__udivmoddi4+0x2dc>
 8000f38:	46c4      	mov	ip, r8
 8000f3a:	1a9b      	subs	r3, r3, r2
 8000f3c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000f40:	fb0e 3312 	mls	r3, lr, r2, r3
 8000f44:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f48:	fb02 f404 	mul.w	r4, r2, r4
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x144>
 8000f50:	18fb      	adds	r3, r7, r3
 8000f52:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f56:	d202      	bcs.n	8000f5e <__udivmoddi4+0x142>
 8000f58:	429c      	cmp	r4, r3
 8000f5a:	f200 80ca 	bhi.w	80010f2 <__udivmoddi4+0x2d6>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	1b1b      	subs	r3, r3, r4
 8000f62:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f66:	e7a5      	b.n	8000eb4 <__udivmoddi4+0x98>
 8000f68:	f1c1 0620 	rsb	r6, r1, #32
 8000f6c:	408b      	lsls	r3, r1
 8000f6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f72:	431f      	orrs	r7, r3
 8000f74:	fa0e f401 	lsl.w	r4, lr, r1
 8000f78:	fa20 f306 	lsr.w	r3, r0, r6
 8000f7c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f80:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f84:	4323      	orrs	r3, r4
 8000f86:	fa00 f801 	lsl.w	r8, r0, r1
 8000f8a:	fa1f fc87 	uxth.w	ip, r7
 8000f8e:	fbbe f0f9 	udiv	r0, lr, r9
 8000f92:	0c1c      	lsrs	r4, r3, #16
 8000f94:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f98:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f9c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000fa0:	45a6      	cmp	lr, r4
 8000fa2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fa6:	d909      	bls.n	8000fbc <__udivmoddi4+0x1a0>
 8000fa8:	193c      	adds	r4, r7, r4
 8000faa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000fae:	f080 809c 	bcs.w	80010ea <__udivmoddi4+0x2ce>
 8000fb2:	45a6      	cmp	lr, r4
 8000fb4:	f240 8099 	bls.w	80010ea <__udivmoddi4+0x2ce>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	443c      	add	r4, r7
 8000fbc:	eba4 040e 	sub.w	r4, r4, lr
 8000fc0:	fa1f fe83 	uxth.w	lr, r3
 8000fc4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fc8:	fb09 4413 	mls	r4, r9, r3, r4
 8000fcc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000fd0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fd4:	45a4      	cmp	ip, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x1ce>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f103 3eff 	add.w	lr, r3, #4294967295
 8000fde:	f080 8082 	bcs.w	80010e6 <__udivmoddi4+0x2ca>
 8000fe2:	45a4      	cmp	ip, r4
 8000fe4:	d97f      	bls.n	80010e6 <__udivmoddi4+0x2ca>
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	443c      	add	r4, r7
 8000fea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fee:	eba4 040c 	sub.w	r4, r4, ip
 8000ff2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ff6:	4564      	cmp	r4, ip
 8000ff8:	4673      	mov	r3, lr
 8000ffa:	46e1      	mov	r9, ip
 8000ffc:	d362      	bcc.n	80010c4 <__udivmoddi4+0x2a8>
 8000ffe:	d05f      	beq.n	80010c0 <__udivmoddi4+0x2a4>
 8001000:	b15d      	cbz	r5, 800101a <__udivmoddi4+0x1fe>
 8001002:	ebb8 0203 	subs.w	r2, r8, r3
 8001006:	eb64 0409 	sbc.w	r4, r4, r9
 800100a:	fa04 f606 	lsl.w	r6, r4, r6
 800100e:	fa22 f301 	lsr.w	r3, r2, r1
 8001012:	431e      	orrs	r6, r3
 8001014:	40cc      	lsrs	r4, r1
 8001016:	e9c5 6400 	strd	r6, r4, [r5]
 800101a:	2100      	movs	r1, #0
 800101c:	e74f      	b.n	8000ebe <__udivmoddi4+0xa2>
 800101e:	fbb1 fcf2 	udiv	ip, r1, r2
 8001022:	0c01      	lsrs	r1, r0, #16
 8001024:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001028:	b280      	uxth	r0, r0
 800102a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800102e:	463b      	mov	r3, r7
 8001030:	4638      	mov	r0, r7
 8001032:	463c      	mov	r4, r7
 8001034:	46b8      	mov	r8, r7
 8001036:	46be      	mov	lr, r7
 8001038:	2620      	movs	r6, #32
 800103a:	fbb1 f1f7 	udiv	r1, r1, r7
 800103e:	eba2 0208 	sub.w	r2, r2, r8
 8001042:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001046:	e766      	b.n	8000f16 <__udivmoddi4+0xfa>
 8001048:	4601      	mov	r1, r0
 800104a:	e718      	b.n	8000e7e <__udivmoddi4+0x62>
 800104c:	4610      	mov	r0, r2
 800104e:	e72c      	b.n	8000eaa <__udivmoddi4+0x8e>
 8001050:	f1c6 0220 	rsb	r2, r6, #32
 8001054:	fa2e f302 	lsr.w	r3, lr, r2
 8001058:	40b7      	lsls	r7, r6
 800105a:	40b1      	lsls	r1, r6
 800105c:	fa20 f202 	lsr.w	r2, r0, r2
 8001060:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001064:	430a      	orrs	r2, r1
 8001066:	fbb3 f8fe 	udiv	r8, r3, lr
 800106a:	b2bc      	uxth	r4, r7
 800106c:	fb0e 3318 	mls	r3, lr, r8, r3
 8001070:	0c11      	lsrs	r1, r2, #16
 8001072:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001076:	fb08 f904 	mul.w	r9, r8, r4
 800107a:	40b0      	lsls	r0, r6
 800107c:	4589      	cmp	r9, r1
 800107e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001082:	b280      	uxth	r0, r0
 8001084:	d93e      	bls.n	8001104 <__udivmoddi4+0x2e8>
 8001086:	1879      	adds	r1, r7, r1
 8001088:	f108 3cff 	add.w	ip, r8, #4294967295
 800108c:	d201      	bcs.n	8001092 <__udivmoddi4+0x276>
 800108e:	4589      	cmp	r9, r1
 8001090:	d81f      	bhi.n	80010d2 <__udivmoddi4+0x2b6>
 8001092:	eba1 0109 	sub.w	r1, r1, r9
 8001096:	fbb1 f9fe 	udiv	r9, r1, lr
 800109a:	fb09 f804 	mul.w	r8, r9, r4
 800109e:	fb0e 1119 	mls	r1, lr, r9, r1
 80010a2:	b292      	uxth	r2, r2
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	4542      	cmp	r2, r8
 80010aa:	d229      	bcs.n	8001100 <__udivmoddi4+0x2e4>
 80010ac:	18ba      	adds	r2, r7, r2
 80010ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80010b2:	d2c4      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b4:	4542      	cmp	r2, r8
 80010b6:	d2c2      	bcs.n	800103e <__udivmoddi4+0x222>
 80010b8:	f1a9 0102 	sub.w	r1, r9, #2
 80010bc:	443a      	add	r2, r7
 80010be:	e7be      	b.n	800103e <__udivmoddi4+0x222>
 80010c0:	45f0      	cmp	r8, lr
 80010c2:	d29d      	bcs.n	8001000 <__udivmoddi4+0x1e4>
 80010c4:	ebbe 0302 	subs.w	r3, lr, r2
 80010c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80010cc:	3801      	subs	r0, #1
 80010ce:	46e1      	mov	r9, ip
 80010d0:	e796      	b.n	8001000 <__udivmoddi4+0x1e4>
 80010d2:	eba7 0909 	sub.w	r9, r7, r9
 80010d6:	4449      	add	r1, r9
 80010d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80010dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80010e0:	fb09 f804 	mul.w	r8, r9, r4
 80010e4:	e7db      	b.n	800109e <__udivmoddi4+0x282>
 80010e6:	4673      	mov	r3, lr
 80010e8:	e77f      	b.n	8000fea <__udivmoddi4+0x1ce>
 80010ea:	4650      	mov	r0, sl
 80010ec:	e766      	b.n	8000fbc <__udivmoddi4+0x1a0>
 80010ee:	4608      	mov	r0, r1
 80010f0:	e6fd      	b.n	8000eee <__udivmoddi4+0xd2>
 80010f2:	443b      	add	r3, r7
 80010f4:	3a02      	subs	r2, #2
 80010f6:	e733      	b.n	8000f60 <__udivmoddi4+0x144>
 80010f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010fc:	443b      	add	r3, r7
 80010fe:	e71c      	b.n	8000f3a <__udivmoddi4+0x11e>
 8001100:	4649      	mov	r1, r9
 8001102:	e79c      	b.n	800103e <__udivmoddi4+0x222>
 8001104:	eba1 0109 	sub.w	r1, r1, r9
 8001108:	46c4      	mov	ip, r8
 800110a:	fbb1 f9fe 	udiv	r9, r1, lr
 800110e:	fb09 f804 	mul.w	r8, r9, r4
 8001112:	e7c4      	b.n	800109e <__udivmoddi4+0x282>

08001114 <__aeabi_idiv0>:
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <sign>:
#include <math.h>

/**
 * @brief Sign function: returns +1, -1, or 0 based on input value.
 */
int8_t sign(float32_t x) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0.0f) {
 8001122:	edd7 7a01 	vldr	s15, [r7, #4]
 8001126:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd01      	ble.n	8001134 <sign+0x1c>
        return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e00a      	b.n	800114a <sign+0x32>
    } else if (x < 0.0f) {
 8001134:	edd7 7a01 	vldr	s15, [r7, #4]
 8001138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001140:	d502      	bpl.n	8001148 <sign+0x30>
        return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	e000      	b.n	800114a <sign+0x32>
    } else {
        return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <Backlash_Init>:
/**
 * @brief Initialize the backlash controller.
 * @param ctrl Pointer to controller structure.
 * @param backlash_width Estimated or measured backlash gap.
 */
void Backlash_Init(BacklashController *ctrl, float32_t backlash_width) {
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	ed87 0a00 	vstr	s0, [r7]
    ctrl->backlash_width = backlash_width;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
    ctrl->backlash_offset = 0.0f;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f04f 0200 	mov.w	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
    ctrl->direction_prev = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	721a      	strb	r2, [r3, #8]
    ctrl->state = TRANSITION;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	725a      	strb	r2, [r3, #9]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <Backlash_Update>:
 * @param pos_ref Desired reference position.
 * @param pos_act Actual measured position.
 * @param vel Measured or estimated velocity.
 * @return Compensated position to use in control.
 */
float32_t Backlash_Update(BacklashController *ctrl, float32_t pos_ref, float32_t pos_act, float32_t vel) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	ed87 0a02 	vstr	s0, [r7, #8]
 8001194:	edc7 0a01 	vstr	s1, [r7, #4]
 8001198:	ed87 1a00 	vstr	s2, [r7]
    int8_t direction_now = sign(vel);
 800119c:	ed97 0a00 	vldr	s0, [r7]
 80011a0:	f7ff ffba 	bl	8001118 <sign>
 80011a4:	4603      	mov	r3, r0
 80011a6:	75fb      	strb	r3, [r7, #23]

    // Detect direction change
    if (direction_now != ctrl->direction_prev && direction_now != 0) {
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80011ae:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d01a      	beq.n	80011ec <Backlash_Update+0x64>
 80011b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d016      	beq.n	80011ec <Backlash_Update+0x64>
        ctrl->direction_prev = direction_now;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	7dfa      	ldrb	r2, [r7, #23]
 80011c2:	721a      	strb	r2, [r3, #8]
        ctrl->state = TRANSITION;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	2200      	movs	r2, #0
 80011c8:	725a      	strb	r2, [r3, #9]

        if (direction_now > 0) {
 80011ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	dd04      	ble.n	80011dc <Backlash_Update+0x54>
            ctrl->backlash_offset = ctrl->backlash_width;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	e007      	b.n	80011ec <Backlash_Update+0x64>
        } else {
            ctrl->backlash_offset = -ctrl->backlash_width;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	edc3 7a01 	vstr	s15, [r3, #4]
        }
    }

    // Apply backlash offset to reference
    float32_t pos_ref_compensated = pos_ref + ctrl->backlash_offset;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	edc7 7a04 	vstr	s15, [r7, #16]

    // Check if backlash has been taken up
    if (ctrl->state == TRANSITION) {
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11e      	bne.n	8001246 <Backlash_Update+0xbe>
        if (fabsf(pos_ref - pos_act) >= ctrl->backlash_width) {
 8001208:	ed97 7a02 	vldr	s14, [r7, #8]
 800120c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001210:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001214:	eeb0 7ae7 	vabs.f32	s14, s15
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	db0e      	blt.n	8001246 <Backlash_Update+0xbe>
            if (direction_now > 0) {
 8001228:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800122c:	2b00      	cmp	r3, #0
 800122e:	dd03      	ble.n	8001238 <Backlash_Update+0xb0>
                ctrl->state = ENGAGED_POS;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2201      	movs	r2, #1
 8001234:	725a      	strb	r2, [r3, #9]
 8001236:	e002      	b.n	800123e <Backlash_Update+0xb6>
            } else {
                ctrl->state = ENGAGED_NEG;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	22ff      	movs	r2, #255	@ 0xff
 800123c:	725a      	strb	r2, [r3, #9]
            }
            ctrl->backlash_offset = 0.0f;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
        }
    }

    return pos_ref_compensated;
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	ee07 3a90 	vmov	s15, r3
}
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <modbus_heartbeat>:

void modbus_heartbeat_init(ModbusHandleTypedef *hmodbus) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
}

void modbus_heartbeat(ModbusHandleTypedef *hmodbus) {
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
	//if (hmodbus->RegisterAddress[0x00].U16 == 18537) {
	hmodbus->RegisterAddress[0x00].U16 = 22881;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001266:	801a      	strh	r2, [r3, #0]
	//}
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <modbus_Base_System_Status>:

uint8_t modbus_Base_System_Status(ModbusHandleTypedef *hmodbus) {
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	uint8_t status = hmodbus->RegisterAddress[0x01].U16;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	3302      	adds	r3, #2
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	73fb      	strb	r3, [r7, #15]
	return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <R_Theta_moving_Status>:
//
//	}
	return status;
}

void R_Theta_moving_Status(ModbusHandleTypedef *hmodbus, uint8_t Moving_Status) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	460b      	mov	r3, r1
 800129e:	70fb      	strb	r3, [r7, #3]
	hmodbus->RegisterAddress[0x10].U16 = Moving_Status;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	3320      	adds	r3, #32
 80012a6:	78fa      	ldrb	r2, [r7, #3]
 80012a8:	b292      	uxth	r2, r2
 80012aa:	801a      	strh	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <modbus_Update_All>:
void modbus_theta_acceleration(ModbusHandleTypedef *hmodbus, float theta_accel) {
	hmodbus->RegisterAddress[0x16].U16 = theta_accel * 10.0;
}
void modbus_Update_All(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, float r_Velo, float theta_Velo, float r_accel,
		float theta_accel) {
 80012b8:	b480      	push	{r7}
 80012ba:	b089      	sub	sp, #36	@ 0x24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	61f8      	str	r0, [r7, #28]
 80012c0:	ed87 0a06 	vstr	s0, [r7, #24]
 80012c4:	edc7 0a05 	vstr	s1, [r7, #20]
 80012c8:	ed87 1a04 	vstr	s2, [r7, #16]
 80012cc:	edc7 1a03 	vstr	s3, [r7, #12]
 80012d0:	ed87 2a02 	vstr	s4, [r7, #8]
 80012d4:	edc7 2a01 	vstr	s5, [r7, #4]
	hmodbus->RegisterAddress[0x11].U16 = r_pos;
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	3322      	adds	r3, #34	@ 0x22
 80012de:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e6:	ee17 2a90 	vmov	r2, s15
 80012ea:	b292      	uxth	r2, r2
 80012ec:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x12].U16 = theta_pos;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	3324      	adds	r3, #36	@ 0x24
 80012f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fc:	ee17 2a90 	vmov	r2, s15
 8001300:	b292      	uxth	r2, r2
 8001302:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x13].U16 = r_Velo;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	3326      	adds	r3, #38	@ 0x26
 800130a:	edd7 7a04 	vldr	s15, [r7, #16]
 800130e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001312:	ee17 2a90 	vmov	r2, s15
 8001316:	b292      	uxth	r2, r2
 8001318:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x14].U16 = theta_Velo;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	3328      	adds	r3, #40	@ 0x28
 8001320:	edd7 7a03 	vldr	s15, [r7, #12]
 8001324:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001328:	ee17 2a90 	vmov	r2, s15
 800132c:	b292      	uxth	r2, r2
 800132e:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x15].U16 = r_accel;
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	332a      	adds	r3, #42	@ 0x2a
 8001336:	edd7 7a02 	vldr	s15, [r7, #8]
 800133a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133e:	ee17 2a90 	vmov	r2, s15
 8001342:	b292      	uxth	r2, r2
 8001344:	801a      	strh	r2, [r3, #0]
	hmodbus->RegisterAddress[0x16].U16 = theta_accel;
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	332c      	adds	r3, #44	@ 0x2c
 800134c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001354:	ee17 2a90 	vmov	r2, s15
 8001358:	b292      	uxth	r2, r2
 800135a:	801a      	strh	r2, [r3, #0]
}
 800135c:	bf00      	nop
 800135e:	3724      	adds	r7, #36	@ 0x24
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <set_Target_Position_ten_points>:

void set_Target_Position_ten_points(ModbusHandleTypedef *hmodbus, float r_pos,
		float theta_pos, uint8_t index) //
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	ed87 0a02 	vstr	s0, [r7, #8]
 8001374:	edc7 0a01 	vstr	s1, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	70fb      	strb	r3, [r7, #3]
	if (index >= 0 && index <= 9) {
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	2b09      	cmp	r3, #9
 8001380:	d81c      	bhi.n	80013bc <set_Target_Position_ten_points+0x54>
		hmodbus->RegisterAddress[0x20 + index * 2].U16 = r_pos;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	3310      	adds	r3, #16
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001396:	ee17 2a90 	vmov	r2, s15
 800139a:	b292      	uxth	r2, r2
 800139c:	801a      	strh	r2, [r3, #0]
		hmodbus->RegisterAddress[0x20 + (index * 2) + 1].U16 = theta_pos;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	3321      	adds	r3, #33	@ 0x21
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b4:	ee17 2a90 	vmov	r2, s15
 80013b8:	b292      	uxth	r2, r2
 80013ba:	801a      	strh	r2, [r3, #0]
	}
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <modbus_set_goal_r_position>:
uint16_t modbus_set_goal_r_position(ModbusHandleTypedef *hmodbus) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	uint16_t goal_r_position = hmodbus->RegisterAddress[0x40].U16;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	3380      	adds	r3, #128	@ 0x80
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	81fb      	strh	r3, [r7, #14]
	return goal_r_position / 10.0;
 80013da:	89fb      	ldrh	r3, [r7, #14]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f86d 	bl	80004bc <__aeabi_i2d>
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <modbus_set_goal_r_position+0x3c>)
 80013e8:	f7ff f9fc 	bl	80007e4 <__aeabi_ddiv>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4610      	mov	r0, r2
 80013f2:	4619      	mov	r1, r3
 80013f4:	f7ff fb7c 	bl	8000af0 <__aeabi_d2uiz>
 80013f8:	4603      	mov	r3, r0
 80013fa:	b29b      	uxth	r3, r3
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40240000 	.word	0x40240000

08001408 <modbus_set_goal_theta_position>:
uint16_t modbus_set_goal_theta_position(ModbusHandleTypedef *hmodbus) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	uint16_t goal_theta_position = hmodbus->RegisterAddress[0x41].U16;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	3382      	adds	r3, #130	@ 0x82
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	81fb      	strh	r3, [r7, #14]
	return goal_theta_position / 10.0;
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f84d 	bl	80004bc <__aeabi_i2d>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <modbus_set_goal_theta_position+0x3c>)
 8001428:	f7ff f9dc 	bl	80007e4 <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f7ff fb5c 	bl	8000af0 <__aeabi_d2uiz>
 8001438:	4603      	mov	r3, r0
 800143a:	b29b      	uxth	r3, r3
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40240000 	.word	0x40240000

08001448 <Coordinate_Base_to_Robot>:

Robot_goal_point Coordinate_Base_to_Robot(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b08c      	sub	sp, #48	@ 0x30
 800144c:	af00      	add	r7, sp, #0
 800144e:	6178      	str	r0, [r7, #20]
 8001450:	ed87 0a04 	vstr	s0, [r7, #16]
 8001454:	edc7 0a03 	vstr	s1, [r7, #12]

	Goal_point->r_goal_position = 0;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	605a      	str	r2, [r3, #4]

	float prismatic_pos;
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001468:	6938      	ldr	r0, [r7, #16]
 800146a:	f7ff f839 	bl	80004e0 <__aeabi_f2d>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	ed9f 1bc9 	vldr	d1, [pc, #804]	@ 8001798 <Coordinate_Base_to_Robot+0x350>
 8001476:	ec43 2b10 	vmov	d0, r2, r3
 800147a:	f00d ffb3 	bl	800f3e4 <pow>
 800147e:	ec51 0b10 	vmov	r0, r1, d0
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4bc6      	ldr	r3, [pc, #792]	@ (80017a0 <Coordinate_Base_to_Robot+0x358>)
 8001488:	f7fe fecc 	bl	8000224 <__adddf3>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb4c 	bl	8000b30 <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
	float gamma = -2 * r_position * Offet;
 800149c:	edd7 7a04 	vldr	s15, [r7, #16]
 80014a0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80014a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a8:	ed9f 7abe 	vldr	s14, [pc, #760]	@ 80017a4 <Coordinate_Base_to_Robot+0x35c>
 80014ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 80014b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c0:	db2f      	blt.n	8001522 <Coordinate_Base_to_Robot+0xda>
 80014c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c6:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 80014ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d826      	bhi.n	8001522 <Coordinate_Base_to_Robot+0xda>
			{
		//Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position + 90));
 80014d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d8:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 80014dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f00e f840 	bl	800f568 <cosf>
 80014e8:	eeb0 7a40 	vmov.f32	s14, s0
 80014ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80014f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80014f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014fc:	ee17 0a90 	vmov	r0, s15
 8001500:	f7fe ffee 	bl	80004e0 <__aeabi_f2d>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	ec43 2b10 	vmov	d0, r2, r3
 800150c:	f00d ffda 	bl	800f4c4 <sqrt>
 8001510:	ec53 2b10 	vmov	r2, r3, d0
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb0a 	bl	8000b30 <__aeabi_d2f>
 800151c:	4603      	mov	r3, r0
 800151e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001520:	e0a7      	b.n	8001672 <Coordinate_Base_to_Robot+0x22a>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position + 90));
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
 8001526:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	db2f      	blt.n	8001594 <Coordinate_Base_to_Robot+0x14c>
 8001534:	edd7 7a03 	vldr	s15, [r7, #12]
 8001538:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 80017a8 <Coordinate_Base_to_Robot+0x360>
 800153c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d826      	bhi.n	8001594 <Coordinate_Base_to_Robot+0x14c>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(180 - theta_position));
 8001546:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 80017a8 <Coordinate_Base_to_Robot+0x360>
 800154a:	edd7 7a03 	vldr	s15, [r7, #12]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	f00e f807 	bl	800f568 <cosf>
 800155a:	eeb0 7a40 	vmov.f32	s14, s0
 800155e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001566:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800156a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156e:	ee17 0a90 	vmov	r0, s15
 8001572:	f7fe ffb5 	bl	80004e0 <__aeabi_f2d>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	ec43 2b10 	vmov	d0, r2, r3
 800157e:	f00d ffa1 	bl	800f4c4 <sqrt>
 8001582:	ec53 2b10 	vmov	r2, r3, d0
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fad1 	bl	8000b30 <__aeabi_d2f>
 800158e:	4603      	mov	r3, r0
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001592:	e06e      	b.n	8001672 <Coordinate_Base_to_Robot+0x22a>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(180 - theta_position));
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 8001594:	edd7 7a03 	vldr	s15, [r7, #12]
 8001598:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d82f      	bhi.n	8001602 <Coordinate_Base_to_Robot+0x1ba>
 80015a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015a6:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80017ac <Coordinate_Base_to_Robot+0x364>
 80015aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	db26      	blt.n	8001602 <Coordinate_Base_to_Robot+0x1ba>
			{
		//Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position - 90));
 80015b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015b8:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 80015bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015c0:	eeb0 0a67 	vmov.f32	s0, s15
 80015c4:	f00d ffd0 	bl	800f568 <cosf>
 80015c8:	eeb0 7a40 	vmov.f32	s14, s0
 80015cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80015d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015dc:	ee17 0a90 	vmov	r0, s15
 80015e0:	f7fe ff7e 	bl	80004e0 <__aeabi_f2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	ec43 2b10 	vmov	d0, r2, r3
 80015ec:	f00d ff6a 	bl	800f4c4 <sqrt>
 80015f0:	ec53 2b10 	vmov	r2, r3, d0
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff fa9a 	bl	8000b30 <__aeabi_d2f>
 80015fc:	4603      	mov	r3, r0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001600:	e037      	b.n	8001672 <Coordinate_Base_to_Robot+0x22a>
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(theta_position - 90));
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 8001602:	edd7 7a03 	vldr	s15, [r7, #12]
 8001606:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80017ac <Coordinate_Base_to_Robot+0x364>
 800160a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	d82e      	bhi.n	8001672 <Coordinate_Base_to_Robot+0x22a>
 8001614:	edd7 7a03 	vldr	s15, [r7, #12]
 8001618:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80017b0 <Coordinate_Base_to_Robot+0x368>
 800161c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001624:	db25      	blt.n	8001672 <Coordinate_Base_to_Robot+0x22a>
			{
//		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
//		Goal_point->r_goal_position = sqrt(
//				beta - gamma * cosf(90 - theta_position));
		prismatic_pos = sqrt(beta - gamma * cosf(90 - theta_position));
 8001626:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 800162a:	edd7 7a03 	vldr	s15, [r7, #12]
 800162e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001632:	eeb0 0a67 	vmov.f32	s0, s15
 8001636:	f00d ff97 	bl	800f568 <cosf>
 800163a:	eeb0 7a40 	vmov.f32	s14, s0
 800163e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001646:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164e:	ee17 0a90 	vmov	r0, s15
 8001652:	f7fe ff45 	bl	80004e0 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	ec43 2b10 	vmov	d0, r2, r3
 800165e:	f00d ff31 	bl	800f4c4 <sqrt>
 8001662:	ec53 2b10 	vmov	r2, r3, d0
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa61 	bl	8000b30 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	float alpha = acos(
			pow(r_position, 2) - pow(prismatic_pos, 2)
 8001672:	6938      	ldr	r0, [r7, #16]
 8001674:	f7fe ff34 	bl	80004e0 <__aeabi_f2d>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001798 <Coordinate_Base_to_Robot+0x350>
 8001680:	ec43 2b10 	vmov	d0, r2, r3
 8001684:	f00d feae 	bl	800f3e4 <pow>
 8001688:	ec55 4b10 	vmov	r4, r5, d0
 800168c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800168e:	f7fe ff27 	bl	80004e0 <__aeabi_f2d>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 8001798 <Coordinate_Base_to_Robot+0x350>
 800169a:	ec43 2b10 	vmov	d0, r2, r3
 800169e:	f00d fea1 	bl	800f3e4 <pow>
 80016a2:	ec53 2b10 	vmov	r2, r3, d0
 80016a6:	4620      	mov	r0, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	f7fe fdb9 	bl	8000220 <__aeabi_dsub>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4614      	mov	r4, r2
 80016b4:	461d      	mov	r5, r3
					- pow(Offet, 2) / (-2 * prismatic_pos * Offet));
 80016b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016be:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80017a4 <Coordinate_Base_to_Robot+0x35c>
 80016c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016c6:	ee17 0a90 	vmov	r0, s15
 80016ca:	f7fe ff09 	bl	80004e0 <__aeabi_f2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	4932      	ldr	r1, [pc, #200]	@ (80017a0 <Coordinate_Base_to_Robot+0x358>)
 80016d8:	f7ff f884 	bl	80007e4 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
	float alpha = acos(
 80016e0:	4620      	mov	r0, r4
 80016e2:	4629      	mov	r1, r5
 80016e4:	f7fe fd9e 	bl	8000224 <__adddf3>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	ec43 2b17 	vmov	d7, r2, r3
 80016f0:	eeb0 0a47 	vmov.f32	s0, s14
 80016f4:	eef0 0a67 	vmov.f32	s1, s15
 80016f8:	f00d fe40 	bl	800f37c <acos>
 80016fc:	ec53 2b10 	vmov	r2, r3, d0
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa14 	bl	8000b30 <__aeabi_d2f>
 8001708:	4603      	mov	r3, r0
 800170a:	623b      	str	r3, [r7, #32]

	if (theta_position >= 0 && theta_position <= 90) // quadrant 1
 800170c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001710:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	db4e      	blt.n	80017b8 <Coordinate_Base_to_Robot+0x370>
 800171a:	edd7 7a03 	vldr	s15, [r7, #12]
 800171e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 8001722:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172a:	d845      	bhi.n	80017b8 <Coordinate_Base_to_Robot+0x370>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 800172c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 8001730:	edd7 7a08 	vldr	s15, [r7, #32]
 8001734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001738:	eeb0 0a67 	vmov.f32	s0, s15
 800173c:	f000 fb4c 	bl	8001dd8 <degree_to_rad>
 8001740:	eef0 7a40 	vmov.f32	s15, s0
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position + 90));
 800174a:	edd7 7a03 	vldr	s15, [r7, #12]
 800174e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 8001752:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001756:	eeb0 0a67 	vmov.f32	s0, s15
 800175a:	f00d ff05 	bl	800f568 <cosf>
 800175e:	eeb0 7a40 	vmov.f32	s14, s0
 8001762:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800176a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800176e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe feb3 	bl	80004e0 <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	ec43 2b10 	vmov	d0, r2, r3
 8001782:	f00d fe9f 	bl	800f4c4 <sqrt>
 8001786:	ec53 2b10 	vmov	r2, r3, d0
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff f9cf 	bl	8000b30 <__aeabi_d2f>
 8001792:	4603      	mov	r3, r0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001796:	e0e4      	b.n	8001962 <Coordinate_Base_to_Robot+0x51a>
 8001798:	00000000 	.word	0x00000000
 800179c:	40000000 	.word	0x40000000
 80017a0:	410c2000 	.word	0x410c2000
 80017a4:	43f00000 	.word	0x43f00000
 80017a8:	43340000 	.word	0x43340000
 80017ac:	c2b40000 	.word	0xc2b40000
 80017b0:	c3340000 	.word	0xc3340000
 80017b4:	42b40000 	.word	0x42b40000
	} else if (theta_position >= 90 && theta_position <= 180) // quadrant 2
 80017b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017bc:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 80017c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	db3e      	blt.n	8001848 <Coordinate_Base_to_Robot+0x400>
 80017ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ce:	ed1f 7a0a 	vldr	s14, [pc, #-40]	@ 80017a8 <Coordinate_Base_to_Robot+0x360>
 80017d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d835      	bhi.n	8001848 <Coordinate_Base_to_Robot+0x400>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 80017dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80017e0:	ed1f 7a0c 	vldr	s14, [pc, #-48]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 80017e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ec:	f000 faf4 	bl	8001dd8 <degree_to_rad>
 80017f0:	eef0 7a40 	vmov.f32	s15, s0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(180 - theta_position));
 80017fa:	ed1f 7a15 	vldr	s14, [pc, #-84]	@ 80017a8 <Coordinate_Base_to_Robot+0x360>
 80017fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	f00d fead 	bl	800f568 <cosf>
 800180e:	eeb0 7a40 	vmov.f32	s14, s0
 8001812:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800181e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001822:	ee17 0a90 	vmov	r0, s15
 8001826:	f7fe fe5b 	bl	80004e0 <__aeabi_f2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	ec43 2b10 	vmov	d0, r2, r3
 8001832:	f00d fe47 	bl	800f4c4 <sqrt>
 8001836:	ec53 2b10 	vmov	r2, r3, d0
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f977 	bl	8000b30 <__aeabi_d2f>
 8001842:	4603      	mov	r3, r0
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001846:	e08c      	b.n	8001962 <Coordinate_Base_to_Robot+0x51a>
	} else if (theta_position <= 0 && theta_position >= -90) // quadrant 3
 8001848:	edd7 7a03 	vldr	s15, [r7, #12]
 800184c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001854:	d83e      	bhi.n	80018d4 <Coordinate_Base_to_Robot+0x48c>
 8001856:	edd7 7a03 	vldr	s15, [r7, #12]
 800185a:	ed1f 7a2c 	vldr	s14, [pc, #-176]	@ 80017ac <Coordinate_Base_to_Robot+0x364>
 800185e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	db35      	blt.n	80018d4 <Coordinate_Base_to_Robot+0x48c>
			{
		Goal_point->theta_goal_position = degree_to_rad(alpha + 90);
 8001868:	edd7 7a08 	vldr	s15, [r7, #32]
 800186c:	ed1f 7a2f 	vldr	s14, [pc, #-188]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 8001870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	f000 faae 	bl	8001dd8 <degree_to_rad>
 800187c:	eef0 7a40 	vmov.f32	s15, s0
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(theta_position - 90));
 8001886:	edd7 7a03 	vldr	s15, [r7, #12]
 800188a:	ed1f 7a36 	vldr	s14, [pc, #-216]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 800188e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001892:	eeb0 0a67 	vmov.f32	s0, s15
 8001896:	f00d fe67 	bl	800f568 <cosf>
 800189a:	eeb0 7a40 	vmov.f32	s14, s0
 800189e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80018aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ae:	ee17 0a90 	vmov	r0, s15
 80018b2:	f7fe fe15 	bl	80004e0 <__aeabi_f2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	ec43 2b10 	vmov	d0, r2, r3
 80018be:	f00d fe01 	bl	800f4c4 <sqrt>
 80018c2:	ec53 2b10 	vmov	r2, r3, d0
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f931 	bl	8000b30 <__aeabi_d2f>
 80018ce:	4603      	mov	r3, r0
 80018d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018d2:	e046      	b.n	8001962 <Coordinate_Base_to_Robot+0x51a>
	} else if (theta_position <= -90 && theta_position >= -180) // quadrant 4
 80018d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d8:	ed1f 7a4c 	vldr	s14, [pc, #-304]	@ 80017ac <Coordinate_Base_to_Robot+0x364>
 80018dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	d83d      	bhi.n	8001962 <Coordinate_Base_to_Robot+0x51a>
 80018e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ea:	ed1f 7a4f 	vldr	s14, [pc, #-316]	@ 80017b0 <Coordinate_Base_to_Robot+0x368>
 80018ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	db34      	blt.n	8001962 <Coordinate_Base_to_Robot+0x51a>
			{
		Goal_point->theta_goal_position = degree_to_rad(90 - alpha);
 80018f8:	ed1f 7a52 	vldr	s14, [pc, #-328]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 80018fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	eeb0 0a67 	vmov.f32	s0, s15
 8001908:	f000 fa66 	bl	8001dd8 <degree_to_rad>
 800190c:	eef0 7a40 	vmov.f32	s15, s0
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	edc3 7a01 	vstr	s15, [r3, #4]
		prismatic_pos = sqrt(beta - gamma * cosf(90 - theta_position));
 8001916:	ed1f 7a59 	vldr	s14, [pc, #-356]	@ 80017b4 <Coordinate_Base_to_Robot+0x36c>
 800191a:	edd7 7a03 	vldr	s15, [r7, #12]
 800191e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001922:	eeb0 0a67 	vmov.f32	s0, s15
 8001926:	f00d fe1f 	bl	800f568 <cosf>
 800192a:	eeb0 7a40 	vmov.f32	s14, s0
 800192e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001936:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800193a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193e:	ee17 0a90 	vmov	r0, s15
 8001942:	f7fe fdcd 	bl	80004e0 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	ec43 2b10 	vmov	d0, r2, r3
 800194e:	f00d fdb9 	bl	800f4c4 <sqrt>
 8001952:	ec53 2b10 	vmov	r2, r3, d0
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	f7ff f8e9 	bl	8000b30 <__aeabi_d2f>
 800195e:	4603      	mov	r3, r0
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	Goal_point->r_goal_position = prismatic_pos;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001966:	601a      	str	r2, [r3, #0]

	return *Goal_point;
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001972:	e883 0003 	stmia.w	r3, {r0, r1}
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	ee07 2a10 	vmov	s14, r2
 800197e:	ee07 3a90 	vmov	s15, r3
}
 8001982:	eeb0 0a47 	vmov.f32	s0, s14
 8001986:	eef0 0a67 	vmov.f32	s1, s15
 800198a:	3730      	adds	r7, #48	@ 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	bdb0      	pop	{r4, r5, r7, pc}

08001990 <Coordinate_Robot_to_Base>:

Robot_goal_point Coordinate_Robot_to_Base(Robot_goal_point *Goal_point,
		float r_position, float theta_position) {
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b090      	sub	sp, #64	@ 0x40
 8001994:	af00      	add	r7, sp, #0
 8001996:	6178      	str	r0, [r7, #20]
 8001998:	ed87 0a04 	vstr	s0, [r7, #16]
 800199c:	edc7 0a03 	vstr	s1, [r7, #12]

	float theta_position_deg = rad_to_degree(theta_position);
 80019a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80019a4:	f000 f9ec 	bl	8001d80 <rad_to_degree>
 80019a8:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	Goal_point->r_goal_position = 0;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = 0;
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	605a      	str	r2, [r3, #4]

	int quadrant = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (theta_position_deg >= 0 && theta_position_deg <= 90) {
 80019c0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019cc:	db1f      	blt.n	8001a0e <Coordinate_Robot_to_Base+0x7e>
 80019ce:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80019d2:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8001d2c <Coordinate_Robot_to_Base+0x39c>
 80019d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	d816      	bhi.n	8001a0e <Coordinate_Robot_to_Base+0x7e>
		if (sinf(theta_position) * r_position >= Offet) {
 80019e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80019e4:	f00d fe04 	bl	800f5f0 <sinf>
 80019e8:	eeb0 7a40 	vmov.f32	s14, s0
 80019ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f4:	ed9f 7ac8 	vldr	s14, [pc, #800]	@ 8001d18 <Coordinate_Robot_to_Base+0x388>
 80019f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a00:	db02      	blt.n	8001a08 <Coordinate_Robot_to_Base+0x78>
			quadrant = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (sinf(theta_position) * r_position >= Offet) {
 8001a06:	e022      	b.n	8001a4e <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 4;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (sinf(theta_position) * r_position >= Offet) {
 8001a0c:	e01f      	b.n	8001a4e <Coordinate_Robot_to_Base+0xbe>
		}
	} else {
		if (cosf(theta_position - degree_to_rad(90.0)) * r_position >= Offet) {
 8001a0e:	ed9f 0ac7 	vldr	s0, [pc, #796]	@ 8001d2c <Coordinate_Robot_to_Base+0x39c>
 8001a12:	f000 f9e1 	bl	8001dd8 <degree_to_rad>
 8001a16:	eeb0 7a40 	vmov.f32	s14, s0
 8001a1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a22:	eeb0 0a67 	vmov.f32	s0, s15
 8001a26:	f00d fd9f 	bl	800f568 <cosf>
 8001a2a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a2e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a36:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8001d18 <Coordinate_Robot_to_Base+0x388>
 8001a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	db02      	blt.n	8001a4a <Coordinate_Robot_to_Base+0xba>
			quadrant = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a48:	e001      	b.n	8001a4e <Coordinate_Robot_to_Base+0xbe>
		} else {
			quadrant = 3;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}
	}
	float beta = pow(r_position, 2) + pow(Offet, 2);
 8001a4e:	6938      	ldr	r0, [r7, #16]
 8001a50:	f7fe fd46 	bl	80004e0 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ed9f 1bad 	vldr	d1, [pc, #692]	@ 8001d10 <Coordinate_Robot_to_Base+0x380>
 8001a5c:	ec43 2b10 	vmov	d0, r2, r3
 8001a60:	f00d fcc0 	bl	800f3e4 <pow>
 8001a64:	ec51 0b10 	vmov	r0, r1, d0
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4bab      	ldr	r3, [pc, #684]	@ (8001d1c <Coordinate_Robot_to_Base+0x38c>)
 8001a6e:	f7fe fbd9 	bl	8000224 <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f859 	bl	8000b30 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	float gamma = -2 * r_position * Offet;
 8001a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a86:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001a8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a8e:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8001d18 <Coordinate_Robot_to_Base+0x388>
 8001a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a96:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float Prismatic_pos;
	float theta;
	if (quadrant == 1) // quadrant 1
 8001a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d12a      	bne.n	8001af6 <Coordinate_Robot_to_Base+0x166>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001aa0:	ed9f 0aa2 	vldr	s0, [pc, #648]	@ 8001d2c <Coordinate_Robot_to_Base+0x39c>
 8001aa4:	f000 f998 	bl	8001dd8 <degree_to_rad>
 8001aa8:	eeb0 7a40 	vmov.f32	s14, s0
 8001aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab8:	f00d fd56 	bl	800f568 <cosf>
 8001abc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001acc:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001ad0:	ee17 0a90 	vmov	r0, s15
 8001ad4:	f7fe fd04 	bl	80004e0 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	ec43 2b10 	vmov	d0, r2, r3
 8001ae0:	f00d fcf0 	bl	800f4c4 <sqrt>
 8001ae4:	ec53 2b10 	vmov	r2, r3, d0
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f820 	bl	8000b30 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001af4:	e085      	b.n	8001c02 <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 2) // quadrant 2
 8001af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d12a      	bne.n	8001b52 <Coordinate_Robot_to_Base+0x1c2>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001afc:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8001d2c <Coordinate_Robot_to_Base+0x39c>
 8001b00:	f000 f96a 	bl	8001dd8 <degree_to_rad>
 8001b04:	eeb0 7a40 	vmov.f32	s14, s0
 8001b08:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b10:	eeb0 0a67 	vmov.f32	s0, s15
 8001b14:	f00d fd28 	bl	800f568 <cosf>
 8001b18:	eeb0 7a40 	vmov.f32	s14, s0
 8001b1c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b24:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001b2c:	ee17 0a90 	vmov	r0, s15
 8001b30:	f7fe fcd6 	bl	80004e0 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	ec43 2b10 	vmov	d0, r2, r3
 8001b3c:	f00d fcc2 	bl	800f4c4 <sqrt>
 8001b40:	ec53 2b10 	vmov	r2, r3, d0
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe fff2 	bl	8000b30 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b50:	e057      	b.n	8001c02 <Coordinate_Robot_to_Base+0x272>

	} else if (quadrant == 3) // quadrant 3
 8001b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d12a      	bne.n	8001bae <Coordinate_Robot_to_Base+0x21e>
			{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(theta_position - degree_to_rad(90.0)));
 8001b58:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8001d2c <Coordinate_Robot_to_Base+0x39c>
 8001b5c:	f000 f93c 	bl	8001dd8 <degree_to_rad>
 8001b60:	eeb0 7a40 	vmov.f32	s14, s0
 8001b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b70:	f00d fcfa 	bl	800f568 <cosf>
 8001b74:	eeb0 7a40 	vmov.f32	s14, s0
 8001b78:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b80:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b84:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001b88:	ee17 0a90 	vmov	r0, s15
 8001b8c:	f7fe fca8 	bl	80004e0 <__aeabi_f2d>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	ec43 2b10 	vmov	d0, r2, r3
 8001b98:	f00d fc94 	bl	800f4c4 <sqrt>
 8001b9c:	ec53 2b10 	vmov	r2, r3, d0
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7fe ffc4 	bl	8000b30 <__aeabi_d2f>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001bac:	e029      	b.n	8001c02 <Coordinate_Robot_to_Base+0x272>
	} else  // quadrant 4
	{
		Prismatic_pos = sqrt(
				beta + gamma * cosf(degree_to_rad(90.0) - theta_position));
 8001bae:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8001d2c <Coordinate_Robot_to_Base+0x39c>
 8001bb2:	f000 f911 	bl	8001dd8 <degree_to_rad>
 8001bb6:	eeb0 7a40 	vmov.f32	s14, s0
 8001bba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	f00d fccf 	bl	800f568 <cosf>
 8001bca:	eeb0 7a40 	vmov.f32	s14, s0
 8001bce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bda:	ee77 7a27 	vadd.f32	s15, s14, s15
		Prismatic_pos = sqrt(
 8001bde:	ee17 0a90 	vmov	r0, s15
 8001be2:	f7fe fc7d 	bl	80004e0 <__aeabi_f2d>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	ec43 2b10 	vmov	d0, r2, r3
 8001bee:	f00d fc69 	bl	800f4c4 <sqrt>
 8001bf2:	ec53 2b10 	vmov	r2, r3, d0
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7fe ff99 	bl	8000b30 <__aeabi_d2f>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	63bb      	str	r3, [r7, #56]	@ 0x38
	}
	float alpha = acos(
			pow(r_position, 2) - pow(Prismatic_pos, 2)
 8001c02:	6938      	ldr	r0, [r7, #16]
 8001c04:	f7fe fc6c 	bl	80004e0 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	ed9f 1b40 	vldr	d1, [pc, #256]	@ 8001d10 <Coordinate_Robot_to_Base+0x380>
 8001c10:	ec43 2b10 	vmov	d0, r2, r3
 8001c14:	f00d fbe6 	bl	800f3e4 <pow>
 8001c18:	ec55 4b10 	vmov	r4, r5, d0
 8001c1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c1e:	f7fe fc5f 	bl	80004e0 <__aeabi_f2d>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001d10 <Coordinate_Robot_to_Base+0x380>
 8001c2a:	ec43 2b10 	vmov	d0, r2, r3
 8001c2e:	f00d fbd9 	bl	800f3e4 <pow>
 8001c32:	ec53 2b10 	vmov	r2, r3, d0
 8001c36:	4620      	mov	r0, r4
 8001c38:	4629      	mov	r1, r5
 8001c3a:	f7fe faf1 	bl	8000220 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4614      	mov	r4, r2
 8001c44:	461d      	mov	r5, r3
					- pow(Offet, 2) / (-2 * Prismatic_pos * Offet));
 8001c46:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c4e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001d18 <Coordinate_Robot_to_Base+0x388>
 8001c52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c56:	ee17 0a90 	vmov	r0, s15
 8001c5a:	f7fe fc41 	bl	80004e0 <__aeabi_f2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	f04f 0000 	mov.w	r0, #0
 8001c66:	492d      	ldr	r1, [pc, #180]	@ (8001d1c <Coordinate_Robot_to_Base+0x38c>)
 8001c68:	f7fe fdbc 	bl	80007e4 <__aeabi_ddiv>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
	float alpha = acos(
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fad6 	bl	8000224 <__adddf3>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	ec43 2b17 	vmov	d7, r2, r3
 8001c80:	eeb0 0a47 	vmov.f32	s0, s14
 8001c84:	eef0 0a67 	vmov.f32	s1, s15
 8001c88:	f00d fb78 	bl	800f37c <acos>
 8001c8c:	ec53 2b10 	vmov	r2, r3, d0
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe ff4c 	bl	8000b30 <__aeabi_d2f>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24

	if (quadrant == 1) // quadrant 1
 8001c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d116      	bne.n	8001cd0 <Coordinate_Robot_to_Base+0x340>
			{
		theta = rad_to_degree(alpha) - 90.0;
 8001ca2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001ca6:	f000 f86b 	bl	8001d80 <rad_to_degree>
 8001caa:	ee10 3a10 	vmov	r3, s0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fc16 	bl	80004e0 <__aeabi_f2d>
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <Coordinate_Robot_to_Base+0x390>)
 8001cba:	f7fe fab1 	bl	8000220 <__aeabi_dsub>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe ff33 	bl	8000b30 <__aeabi_d2f>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cce:	e03d      	b.n	8001d4c <Coordinate_Robot_to_Base+0x3bc>

	} else if (quadrant == 2) // quadrant 2
 8001cd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d10c      	bne.n	8001cf0 <Coordinate_Robot_to_Base+0x360>
			{
		theta = 270 - rad_to_degree(alpha);
 8001cd6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001cda:	f000 f851 	bl	8001d80 <rad_to_degree>
 8001cde:	eef0 7a40 	vmov.f32	s15, s0
 8001ce2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001d24 <Coordinate_Robot_to_Base+0x394>
 8001ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001cee:	e02d      	b.n	8001d4c <Coordinate_Robot_to_Base+0x3bc>

	} else if (quadrant == 3) // quadrant 3
 8001cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d11c      	bne.n	8001d30 <Coordinate_Robot_to_Base+0x3a0>
			{
		theta = -90 - rad_to_degree(alpha);
 8001cf6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001cfa:	f000 f841 	bl	8001d80 <rad_to_degree>
 8001cfe:	eef0 7a40 	vmov.f32	s15, s0
 8001d02:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001d28 <Coordinate_Robot_to_Base+0x398>
 8001d06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8001d0e:	e01d      	b.n	8001d4c <Coordinate_Robot_to_Base+0x3bc>
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40000000 	.word	0x40000000
 8001d18:	43f00000 	.word	0x43f00000
 8001d1c:	410c2000 	.word	0x410c2000
 8001d20:	40568000 	.word	0x40568000
 8001d24:	43870000 	.word	0x43870000
 8001d28:	c2b40000 	.word	0xc2b40000
 8001d2c:	42b40000 	.word	0x42b40000
	} else  // quadrant 4
	{
		theta = -1 * (90 - rad_to_degree(alpha));
 8001d30:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001d34:	f000 f824 	bl	8001d80 <rad_to_degree>
 8001d38:	eef0 7a40 	vmov.f32	s15, s0
 8001d3c:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8001d2c <Coordinate_Robot_to_Base+0x39c>
 8001d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d44:	eef1 7a67 	vneg.f32	s15, s15
 8001d48:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	}
	Goal_point->r_goal_position = Prismatic_pos;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d50:	601a      	str	r2, [r3, #0]
	Goal_point->theta_goal_position = theta;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d56:	605a      	str	r2, [r3, #4]
	return *Goal_point;
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d62:	e883 0003 	stmia.w	r3, {r0, r1}
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	6a3b      	ldr	r3, [r7, #32]
 8001d6a:	ee07 2a10 	vmov	s14, r2
 8001d6e:	ee07 3a90 	vmov	s15, r3
}
 8001d72:	eeb0 0a47 	vmov.f32	s0, s14
 8001d76:	eef0 0a67 	vmov.f32	s1, s15
 8001d7a:	3740      	adds	r7, #64	@ 0x40
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdb0      	pop	{r4, r5, r7, pc}

08001d80 <rad_to_degree>:

float rad_to_degree(float rad) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	ed87 0a01 	vstr	s0, [r7, #4]
	return (rad * 180.0) / 3.142;
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7fe fba8 	bl	80004e0 <__aeabi_f2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd0 <rad_to_degree+0x50>)
 8001d96:	f7fe fbfb 	bl	8000590 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	a309      	add	r3, pc, #36	@ (adr r3, 8001dc8 <rad_to_degree+0x48>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fd1c 	bl	80007e4 <__aeabi_ddiv>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f7fe febc 	bl	8000b30 <__aeabi_d2f>
 8001db8:	4603      	mov	r3, r0
 8001dba:	ee07 3a90 	vmov	s15, r3
}
 8001dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	e5604189 	.word	0xe5604189
 8001dcc:	400922d0 	.word	0x400922d0
 8001dd0:	40668000 	.word	0x40668000
 8001dd4:	00000000 	.word	0x00000000

08001dd8 <degree_to_rad>:
float degree_to_rad(float degree) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	ed87 0a01 	vstr	s0, [r7, #4]
	return (degree * 3.142) / 180.0;
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7fe fb7c 	bl	80004e0 <__aeabi_f2d>
 8001de8:	a30e      	add	r3, pc, #56	@ (adr r3, 8001e24 <degree_to_rad+0x4c>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fbcf 	bl	8000590 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <degree_to_rad+0x48>)
 8001e00:	f7fe fcf0 	bl	80007e4 <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fe90 	bl	8000b30 <__aeabi_d2f>
 8001e10:	4603      	mov	r3, r0
 8001e12:	ee07 3a90 	vmov	s15, r3
}
 8001e16:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40668000 	.word	0x40668000
 8001e24:	e5604189 	.word	0xe5604189
 8001e28:	400922d0 	.word	0x400922d0

08001e2c <Encoder_Init>:
#define Count_PER_REV 12000.0f
#define TWO_PI 6.283185f
#define PI 3.14286f
#define Lead 11.0f

void Encoder_Init(Encoder *enc, TIM_HandleTypeDef *htim) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
    enc->htim = htim;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	601a      	str	r2, [r3, #0]
    HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_ALL);
 8001e3c:	213c      	movs	r1, #60	@ 0x3c
 8001e3e:	6838      	ldr	r0, [r7, #0]
 8001e40:	f008 fc1a 	bl	800a678 <HAL_TIM_Encoder_Start>

    enc->lastRawPosition = __HAL_TIM_GET_COUNTER(htim);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	605a      	str	r2, [r3, #4]
    enc->position = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
    enc->velocity = 0;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	60da      	str	r2, [r3, #12]
    enc->acceleration = 0;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
    enc->lastPosition = 0;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = 0;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	61da      	str	r2, [r3, #28]
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <Encoder_Update>:

void Encoder_Update(Encoder *enc, float dt) {
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	ed87 0a00 	vstr	s0, [r7]
    int32_t rawPosition = __HAL_TIM_GET_COUNTER(enc->htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	60bb      	str	r3, [r7, #8]
    int32_t deltaRaw = rawPosition - enc->lastRawPosition;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	60fb      	str	r3, [r7, #12]

    // Handle 16-bit counter wrap-around
    if (deltaRaw > 30000) {
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	dd05      	ble.n	8001eb6 <Encoder_Update+0x36>
        deltaRaw -= 60000;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 8001eb0:	3b60      	subs	r3, #96	@ 0x60
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	e008      	b.n	8001ec8 <Encoder_Update+0x48>
    } else if (deltaRaw < -30000) {
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4a48      	ldr	r2, [pc, #288]	@ (8001fdc <Encoder_Update+0x15c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	da04      	bge.n	8001ec8 <Encoder_Update+0x48>
        deltaRaw += 60000;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001ec4:	3360      	adds	r3, #96	@ 0x60
 8001ec6:	60fb      	str	r3, [r7, #12]
    }

    enc->position += ((float)deltaRaw * TWO_PI) / Count_PER_REV;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed8:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8001fe0 <Encoder_Update+0x160>
 8001edc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001ee0:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8001fe4 <Encoder_Update+0x164>
 8001ee4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edc3 7a02 	vstr	s15, [r3, #8]
    enc->velocity = (enc->position - enc->lastPosition) / dt;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	edd3 7a06 	vldr	s15, [r3, #24]
 8001efe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f02:	ed97 7a00 	vldr	s14, [r7]
 8001f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	edc3 7a03 	vstr	s15, [r3, #12]
    enc->acceleration = (enc->velocity - enc->lastVelocity) / dt;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f1c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f20:	ed97 7a00 	vldr	s14, [r7]
 8001f24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	edc3 7a04 	vstr	s15, [r3, #16]
    enc->position_degree = enc->position * (180.0f / PI);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f34:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001fe8 <Encoder_Update+0x168>
 8001f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	edc3 7a05 	vstr	s15, [r3, #20]

    enc->lastRawPosition = rawPosition;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	605a      	str	r2, [r3, #4]
    enc->lastPosition = enc->position;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
    enc->lastVelocity = enc->velocity;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	61da      	str	r2, [r3, #28]

    enc->position_mm += ((float)deltaRaw / Count_PER_REV) * Lead;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f68:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8001fe4 <Encoder_Update+0x164>
 8001f6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f70:	eef2 6a06 	vmov.f32	s13, #38	@ 0x41300000  11.0
 8001f74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	edc3 7a08 	vstr	s15, [r3, #32]
    enc->velocity_mm = (enc->position_mm - enc->lastPosition_mm) / dt;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	ed93 7a08 	vldr	s14, [r3, #32]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001f8e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f92:	ed97 7a00 	vldr	s14, [r7]
 8001f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    enc->acceleration_mm = (enc->velocity_mm - enc->lastVelocity_mm) / dt;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001fac:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fb0:	ed97 7a00 	vldr	s14, [r7]
 8001fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    enc->lastPosition_mm = enc->position_mm;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
    enc->lastVelocity_mm = enc->velocity_mm;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	ffff8ad0 	.word	0xffff8ad0
 8001fe0:	40c90fda 	.word	0x40c90fda
 8001fe4:	463b8000 	.word	0x463b8000
 8001fe8:	42651738 	.word	0x42651738

08001fec <Encoder_GetPosition>:

void Encoder_setLimit(Encoder *enc, float limit) {
		enc->position = limit;
}

float Encoder_GetPosition(Encoder *enc) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
    return enc->position;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	ee07 3a90 	vmov	s15, r3
}
 8001ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <Encoder_GetVelocity>:

float Encoder_GetVelocity(Encoder *enc) {
 800200a:	b480      	push	{r7}
 800200c:	b083      	sub	sp, #12
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
    return enc->velocity;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	ee07 3a90 	vmov	s15, r3
}
 800201a:	eeb0 0a67 	vmov.f32	s0, s15
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <Encoder_GetAcceleration>:

float Encoder_GetAcceleration(Encoder *enc) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    return enc->acceleration;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	ee07 3a90 	vmov	s15, r3
}
 8002038:	eeb0 0a67 	vmov.f32	s0, s15
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <Encoder_GetDegree>:

float Encoder_GetDegree(Encoder *enc) {
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	return enc->position_degree;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	ee07 3a90 	vmov	s15, r3
}
 8002056:	eeb0 0a67 	vmov.f32	s0, s15
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <Encoder_GetPosition_mm>:

float Encoder_GetPosition_mm(Encoder *enc) {
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
    return enc->position_mm;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	ee07 3a90 	vmov	s15, r3
}
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <Encoder_GetVelocity_mm>:

float Encoder_GetVelocity_mm(Encoder *enc) {
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
    return enc->velocity_mm;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	ee07 3a90 	vmov	s15, r3
}
 8002092:	eeb0 0a67 	vmov.f32	s0, s15
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <Encoder_GetAcceleration_mm>:

float Encoder_GetAcceleration_mm(Encoder *enc) {
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
    return enc->acceleration_mm;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	ee07 3a90 	vmov	s15, r3
}
 80020b0:	eeb0 0a67 	vmov.f32	s0, s15
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
	...

080020c0 <PS2_ReadData>:
uint8_t SPIRx[PS2_DATA_LENGTH];

#define PS2_CS_PORT GPIOC
#define PS2_CS_PIN  GPIO_PIN_10

void PS2_ReadData() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af02      	add	r7, sp, #8
//	HAL_Delay(1);
	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_RESET);
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80020cc:	4811      	ldr	r0, [pc, #68]	@ (8002114 <PS2_ReadData+0x54>)
 80020ce:	f006 f961 	bl	8008394 <HAL_GPIO_WritePin>

	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	e00f      	b.n	80020f8 <PS2_ReadData+0x38>
		HAL_SPI_TransmitReceive(&hspi1, &SPITx[i], &SPIRx[i], 1, HAL_MAX_DELAY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a0f      	ldr	r2, [pc, #60]	@ (8002118 <PS2_ReadData+0x58>)
 80020dc:	1899      	adds	r1, r3, r2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	@ (800211c <PS2_ReadData+0x5c>)
 80020e2:	441a      	add	r2, r3
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <PS2_ReadData+0x60>)
 80020ee:	f007 fa5c 	bl	80095aa <HAL_SPI_TransmitReceive>
	for (int i = 0; i < PS2_DATA_LENGTH; i++) {
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3301      	adds	r3, #1
 80020f6:	607b      	str	r3, [r7, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2b07      	cmp	r3, #7
 80020fc:	ddec      	ble.n	80020d8 <PS2_ReadData+0x18>
//		HAL_Delay(5);
	}

	HAL_GPIO_WritePin(PS2_CS_PORT, PS2_CS_PIN, GPIO_PIN_SET);
 80020fe:	2201      	movs	r2, #1
 8002100:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002104:	4803      	ldr	r0, [pc, #12]	@ (8002114 <PS2_ReadData+0x54>)
 8002106:	f006 f945 	bl	8008394 <HAL_GPIO_WritePin>
//	HAL_Delay(5);
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	48000800 	.word	0x48000800
 8002118:	20000000 	.word	0x20000000
 800211c:	200002dc 	.word	0x200002dc
 8002120:	20001680 	.word	0x20001680

08002124 <PS2_ButtonCircle>:

uint8_t PS2_ButtonCircle() {
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x20);
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <PS2_ButtonCircle+0x20>)
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	f003 0320 	and.w	r3, r3, #32
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf0c      	ite	eq
 8002134:	2301      	moveq	r3, #1
 8002136:	2300      	movne	r3, #0
 8002138:	b2db      	uxtb	r3, r3
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	200002dc 	.word	0x200002dc

08002148 <PS2_ButtonSquare>:

uint8_t PS2_ButtonSquare() {
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x80);
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <PS2_ButtonSquare+0x1c>)
 800214e:	791b      	ldrb	r3, [r3, #4]
 8002150:	b25b      	sxtb	r3, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	b2db      	uxtb	r3, r3
 8002156:	09db      	lsrs	r3, r3, #7
 8002158:	b2db      	uxtb	r3, r3
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	200002dc 	.word	0x200002dc

08002168 <PS2_ButtonTriangle>:

uint8_t PS2_ButtonTriangle() {
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x10);
 800216c:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <PS2_ButtonTriangle+0x20>)
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	f003 0310 	and.w	r3, r3, #16
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	200002dc 	.word	0x200002dc

0800218c <PS2_ButtonCross>:

uint8_t PS2_ButtonCross() {
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x40);
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <PS2_ButtonCross+0x20>)
 8002192:	791b      	ldrb	r3, [r3, #4]
 8002194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf0c      	ite	eq
 800219c:	2301      	moveq	r3, #1
 800219e:	2300      	movne	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	200002dc 	.word	0x200002dc

080021b0 <PS2_ButtonR1>:

uint8_t PS2_ButtonR1() {
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x08);
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <PS2_ButtonR1+0x20>)
 80021b6:	791b      	ldrb	r3, [r3, #4]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	200002dc 	.word	0x200002dc

080021d4 <PS2_ButtonR2>:

uint8_t PS2_ButtonR2() {
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
	return !(SPIRx[4] & 0x02);
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <PS2_ButtonR2+0x20>)
 80021da:	791b      	ldrb	r3, [r3, #4]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	200002dc 	.word	0x200002dc

080021f8 <PS2_ButtonSelect>:

uint8_t PS2_ButtonSelect() {
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x01);
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <PS2_ButtonSelect+0x20>)
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	bf0c      	ite	eq
 8002208:	2301      	moveq	r3, #1
 800220a:	2300      	movne	r3, #0
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	200002dc 	.word	0x200002dc

0800221c <PS2_ButtonStart>:

uint8_t PS2_ButtonStart() {
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
	return !(SPIRx[3] & 0x08);
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <PS2_ButtonStart+0x20>)
 8002222:	78db      	ldrb	r3, [r3, #3]
 8002224:	f003 0308 	and.w	r3, r3, #8
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	200002dc 	.word	0x200002dc

08002240 <PS2_ButtonL2>:

uint8_t PS2_ButtonL2() {
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	 return !(SPIRx[4] & 0x01);
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <PS2_ButtonL2+0x20>)
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf0c      	ite	eq
 8002250:	2301      	moveq	r3, #1
 8002252:	2300      	movne	r3, #0
 8002254:	b2db      	uxtb	r3, r3
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	200002dc 	.word	0x200002dc

08002264 <Kalman_Init>:
#include "Kalman_Filter.h"

void Kalman_Init(KalmanFilter *kf) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
    arm_mat_init_f32(&kf->A, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->A_data);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3370      	adds	r3, #112	@ 0x70
 8002272:	2204      	movs	r2, #4
 8002274:	2104      	movs	r1, #4
 8002276:	f00c fbbc 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->B, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->B_data);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f103 0008 	add.w	r0, r3, #8
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	33b0      	adds	r3, #176	@ 0xb0
 8002284:	2204      	movs	r2, #4
 8002286:	2104      	movs	r1, #4
 8002288:	f00c fbb3 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->H, KALMAN_MEAS_DIM, KALMAN_STATE_DIM, kf->H_data);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f103 0010 	add.w	r0, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	33f0      	adds	r3, #240	@ 0xf0
 8002296:	2204      	movs	r2, #4
 8002298:	2104      	movs	r1, #4
 800229a:	f00c fbaa 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Q, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->Q_data);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f103 0018 	add.w	r0, r3, #24
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 80022aa:	2204      	movs	r2, #4
 80022ac:	2104      	movs	r1, #4
 80022ae:	f00c fba0 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->R, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->R_data);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f103 0020 	add.w	r0, r3, #32
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80022be:	2204      	movs	r2, #4
 80022c0:	2104      	movs	r1, #4
 80022c2:	f00c fb96 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->P, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->P_data);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 80022d2:	2204      	movs	r2, #4
 80022d4:	2104      	movs	r1, #4
 80022d6:	f00c fb8c 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->K, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->K_data);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80022e6:	2204      	movs	r2, #4
 80022e8:	2104      	movs	r1, #4
 80022ea:	f00c fb82 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->Input, KALMAN_STATE_DIM, 1, kf->Input_data);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80022fa:	2201      	movs	r2, #1
 80022fc:	2104      	movs	r1, #4
 80022fe:	f00c fb78 	bl	800e9f2 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->x, KALMAN_STATE_DIM, 1, kf->x_data);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f503 730d 	add.w	r3, r3, #564	@ 0x234
 800230e:	2201      	movs	r2, #1
 8002310:	2104      	movs	r1, #4
 8002312:	f00c fb6e 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->u, KALMAN_MEAS_DIM, 1, kf->u_data);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002322:	2201      	movs	r2, #1
 8002324:	2104      	movs	r1, #4
 8002326:	f00c fb64 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->z, KALMAN_MEAS_DIM, 1, kf->z_data);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002336:	2201      	movs	r2, #1
 8002338:	2104      	movs	r1, #4
 800233a:	f00c fb5a 	bl	800e9f2 <arm_mat_init_f32>

    arm_mat_init_f32(&kf->temp1, KALMAN_STATE_DIM, KALMAN_STATE_DIM, kf->temp1_data);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800234a:	2204      	movs	r2, #4
 800234c:	2104      	movs	r1, #4
 800234e:	f00c fb50 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp2, KALMAN_STATE_DIM, KALMAN_MEAS_DIM, kf->temp2_data);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800235e:	2204      	movs	r2, #4
 8002360:	2104      	movs	r1, #4
 8002362:	f00c fb46 	bl	800e9f2 <arm_mat_init_f32>
    arm_mat_init_f32(&kf->temp3, KALMAN_MEAS_DIM, KALMAN_MEAS_DIM, kf->temp3_data);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8002372:	2204      	movs	r2, #4
 8002374:	2104      	movs	r1, #4
 8002376:	f00c fb3c 	bl	800e9f2 <arm_mat_init_f32>

    // Clear state
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e00b      	b.n	8002398 <Kalman_Init+0x134>
        kf->x_data[i] = 0.0f;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	338c      	adds	r3, #140	@ 0x8c
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3304      	adds	r3, #4
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3301      	adds	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b03      	cmp	r3, #3
 800239c:	ddf0      	ble.n	8002380 <Kalman_Init+0x11c>
    }
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <Kalman_SetProcessNoise>:

void Kalman_SetProcessNoise(KalmanFilter *kf, float value) {
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	e01c      	b.n	80023f4 <Kalman_SetProcessNoise+0x4c>
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80023ba:	2300      	movs	r3, #0
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	e013      	b.n	80023e8 <Kalman_SetProcessNoise+0x40>
            kf->Q_data[i * KALMAN_STATE_DIM + j] = (i == j) ? value : 0.0f;
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d101      	bne.n	80023cc <Kalman_SetProcessNoise+0x24>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	e001      	b.n	80023d0 <Kalman_SetProcessNoise+0x28>
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	0091      	lsls	r1, r2, #2
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	440a      	add	r2, r1
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	324c      	adds	r2, #76	@ 0x4c
 80023dc:	0092      	lsls	r2, r2, #2
 80023de:	440a      	add	r2, r1
 80023e0:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	3301      	adds	r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	dde8      	ble.n	80023c0 <Kalman_SetProcessNoise+0x18>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3301      	adds	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	dddf      	ble.n	80023ba <Kalman_SetProcessNoise+0x12>
        }
    }
}
 80023fa:	bf00      	nop
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <Kalman_SetMeasurementNoise>:

void Kalman_SetMeasurementNoise(KalmanFilter *kf, float value) {
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e01c      	b.n	8002454 <Kalman_SetMeasurementNoise+0x4c>
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	e013      	b.n	8002448 <Kalman_SetMeasurementNoise+0x40>
            kf->R_data[i * KALMAN_MEAS_DIM + j] = (i == j) ? value : 0.0f;
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	429a      	cmp	r2, r3
 8002426:	d101      	bne.n	800242c <Kalman_SetMeasurementNoise+0x24>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	e001      	b.n	8002430 <Kalman_SetMeasurementNoise+0x28>
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	0091      	lsls	r1, r2, #2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	440a      	add	r2, r1
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	325c      	adds	r2, #92	@ 0x5c
 800243c:	0092      	lsls	r2, r2, #2
 800243e:	440a      	add	r2, r1
 8002440:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < KALMAN_MEAS_DIM; j++) {
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b03      	cmp	r3, #3
 800244c:	dde8      	ble.n	8002420 <Kalman_SetMeasurementNoise+0x18>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3301      	adds	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2b03      	cmp	r3, #3
 8002458:	dddf      	ble.n	800241a <Kalman_SetMeasurementNoise+0x12>
        }
    }
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <Kalman_SetInput>:

void Kalman_SetInput(KalmanFilter *kf, float value)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	ed87 0a00 	vstr	s0, [r7]
	kf->Input_data[0] = value;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <Kalman_Predict>:
void Kalman_Predict(KalmanFilter *kf) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	// x = A * x + B * u
	arm_mat_mult_f32(&kf->A, &kf->x, &kf->temp1);   // temp1 = A * x
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3358      	adds	r3, #88	@ 0x58
 800249c:	461a      	mov	r2, r3
 800249e:	f00c fe37 	bl	800f110 <arm_mat_mult_f32>
	arm_mat_mult_f32(&kf->B, &kf->Input, &kf->temp2);   // temp2 = B * u
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f103 0008 	add.w	r0, r3, #8
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3360      	adds	r3, #96	@ 0x60
 80024b2:	461a      	mov	r2, r3
 80024b4:	f00c fe2c 	bl	800f110 <arm_mat_mult_f32>
	arm_mat_add_f32(&kf->temp1, &kf->temp2, &kf->x); // x = temp1 + temp2
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3340      	adds	r3, #64	@ 0x40
 80024c8:	461a      	mov	r2, r3
 80024ca:	f00c fa57 	bl	800e97c <arm_mat_add_f32>

    // P = A * P * A' + Q
    arm_mat_mult_f32(&kf->A, &kf->P, &kf->temp1);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	3358      	adds	r3, #88	@ 0x58
 80024da:	461a      	mov	r2, r3
 80024dc:	f00c fe18 	bl	800f110 <arm_mat_mult_f32>
    arm_mat_trans_f32(&kf->A, &kf->temp2);  // reuse temp2
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3360      	adds	r3, #96	@ 0x60
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f00c fec6 	bl	800f27a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp2, &kf->P);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3328      	adds	r3, #40	@ 0x28
 80024fe:	461a      	mov	r2, r3
 8002500:	f00c fe06 	bl	800f110 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->P, &kf->Q, &kf->P);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f103 0118 	add.w	r1, r3, #24
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3328      	adds	r3, #40	@ 0x28
 8002514:	461a      	mov	r2, r3
 8002516:	f00c fa31 	bl	800e97c <arm_mat_add_f32>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <Kalman_Update>:

void Kalman_Update(KalmanFilter *kf, float32_t *measurement) {
 8002522:	b580      	push	{r7, lr}
 8002524:	b088      	sub	sp, #32
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800252c:	2300      	movs	r3, #0
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	e00e      	b.n	8002550 <Kalman_Update+0x2e>
        kf->z_data[i] = measurement[i];
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	4413      	add	r3, r2
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3394      	adds	r3, #148	@ 0x94
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3304      	adds	r3, #4
 8002548:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b03      	cmp	r3, #3
 8002554:	dded      	ble.n	8002532 <Kalman_Update+0x10>
    }

    // K = P * H' * (H * P * H' + R)^-1
    arm_mat_trans_f32(&kf->H, &kf->temp2);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f103 0210 	add.w	r2, r3, #16
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3360      	adds	r3, #96	@ 0x60
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f00c fe89 	bl	800f27a <arm_mat_trans_f32>
    arm_mat_mult_f32(&kf->P, &kf->temp2, &kf->temp1);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3358      	adds	r3, #88	@ 0x58
 8002578:	461a      	mov	r2, r3
 800257a:	f00c fdc9 	bl	800f110 <arm_mat_mult_f32>
    arm_mat_mult_f32(&kf->H, &kf->temp1, &kf->temp3);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f103 0010 	add.w	r0, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3368      	adds	r3, #104	@ 0x68
 800258e:	461a      	mov	r2, r3
 8002590:	f00c fdbe 	bl	800f110 <arm_mat_mult_f32>
    arm_mat_add_f32(&kf->temp3, &kf->R, &kf->temp3);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f103 0120 	add.w	r1, r3, #32
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3368      	adds	r3, #104	@ 0x68
 80025a4:	461a      	mov	r2, r3
 80025a6:	f00c f9e9 	bl	800e97c <arm_mat_add_f32>
    arm_mat_inverse_f32(&kf->temp3, &kf->temp3);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3368      	adds	r3, #104	@ 0x68
 80025b4:	4619      	mov	r1, r3
 80025b6:	4610      	mov	r0, r2
 80025b8:	f00c fa33 	bl	800ea22 <arm_mat_inverse_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->temp3, &kf->K);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3330      	adds	r3, #48	@ 0x30
 80025cc:	461a      	mov	r2, r3
 80025ce:	f00c fd9f 	bl	800f110 <arm_mat_mult_f32>

    // x = x + K * (z - H * x)
    arm_mat_mult_f32(&kf->H, &kf->x, &kf->u);         // reuse u for Hx
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f103 0010 	add.w	r0, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3348      	adds	r3, #72	@ 0x48
 80025e2:	461a      	mov	r2, r3
 80025e4:	f00c fd94 	bl	800f110 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 80025e8:	2300      	movs	r3, #0
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	e01c      	b.n	8002628 <Kalman_Update+0x106>
        kf->u_data[i] = kf->z_data[i] - kf->u_data[i]; // z - Hx
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	3394      	adds	r3, #148	@ 0x94
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	3304      	adds	r3, #4
 80025fa:	ed93 7a00 	vldr	s14, [r3]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	3390      	adds	r3, #144	@ 0x90
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	3304      	adds	r3, #4
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	3390      	adds	r3, #144	@ 0x90
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	3304      	adds	r3, #4
 800261e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3301      	adds	r3, #1
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b03      	cmp	r3, #3
 800262c:	dddf      	ble.n	80025ee <Kalman_Update+0xcc>
    }
    arm_mat_mult_f32(&kf->K, &kf->u, &kf->u);         // reuse u for K*(z-Hx)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3348      	adds	r3, #72	@ 0x48
 800263e:	461a      	mov	r2, r3
 8002640:	f00c fd66 	bl	800f110 <arm_mat_mult_f32>
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e01c      	b.n	8002684 <Kalman_Update+0x162>
        kf->x_data[i] += kf->u_data[i];
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	338c      	adds	r3, #140	@ 0x8c
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3304      	adds	r3, #4
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3390      	adds	r3, #144	@ 0x90
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	3304      	adds	r3, #4
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	338c      	adds	r3, #140	@ 0x8c
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3301      	adds	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b03      	cmp	r3, #3
 8002688:	dddf      	ble.n	800264a <Kalman_Update+0x128>
    }

    // P = (I - K * H) * P
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e00b      	b.n	80026a8 <Kalman_Update+0x186>
        kf->temp1_data[i] = 0.0f;
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3398      	adds	r3, #152	@ 0x98
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3304      	adds	r3, #4
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM * KALMAN_STATE_DIM; i++) {
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	3301      	adds	r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	ddf0      	ble.n	8002690 <Kalman_Update+0x16e>
    }
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e00e      	b.n	80026d2 <Kalman_Update+0x1b0>
        kf->temp1_data[i * KALMAN_STATE_DIM + i] = 1.0f;
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	3398      	adds	r3, #152	@ 0x98
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	3304      	adds	r3, #4
 80026c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80026ca:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KALMAN_STATE_DIM; i++) {
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3301      	adds	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	dded      	ble.n	80026b4 <Kalman_Update+0x192>
    }
    arm_mat_mult_f32(&kf->K, &kf->H, &kf->temp2);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f103 0110 	add.w	r1, r3, #16
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3360      	adds	r3, #96	@ 0x60
 80026e8:	461a      	mov	r2, r3
 80026ea:	f00c fd11 	bl	800f110 <arm_mat_mult_f32>
    arm_mat_sub_f32(&kf->temp1, &kf->temp2, &kf->temp1);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3358      	adds	r3, #88	@ 0x58
 80026fe:	461a      	mov	r2, r3
 8002700:	f00c fd80 	bl	800f204 <arm_mat_sub_f32>
    arm_mat_mult_f32(&kf->temp1, &kf->P, &kf->P);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3328      	adds	r3, #40	@ 0x28
 8002714:	461a      	mov	r2, r3
 8002716:	f00c fcfb 	bl	800f110 <arm_mat_mult_f32>
}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800272c:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <modbus_1t5_Timeout+0x1c>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2201      	movs	r2, #1
 8002732:	751a      	strb	r2, [r3, #20]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	200002e4 	.word	0x200002e4

08002744 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <modbus_3t5_Timeout+0x1c>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	755a      	strb	r2, [r3, #21]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	200002e4 	.word	0x200002e4

08002764 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <modbus_UART_Recived+0x60>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8002776:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <modbus_UART_Recived+0x60>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	@ 0x3a2
 800277e:	1c59      	adds	r1, r3, #1
 8002780:	b289      	uxth	r1, r1
 8002782:	f8a2 13a2 	strh.w	r1, [r2, #930]	@ 0x3a2
 8002786:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800278a:	d210      	bcs.n	80027ae <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800278c:	4b0d      	ldr	r3, [pc, #52]	@ (80027c4 <modbus_UART_Recived+0x60>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68d8      	ldr	r0, [r3, #12]
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <modbus_UART_Recived+0x60>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <modbus_UART_Recived+0x60>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800279e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80027a2:	4413      	add	r3, r2
 80027a4:	3302      	adds	r3, #2
 80027a6:	2201      	movs	r2, #1
 80027a8:	4619      	mov	r1, r3
 80027aa:	f009 fd75 	bl	800c298 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <modbus_UART_Recived+0x60>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2200      	movs	r2, #0
 80027b8:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80027ba:	bf00      	nop
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200002e4 	.word	0x200002e4

080027c8 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80027d2:	4a24      	ldr	r2, [pc, #144]	@ (8002864 <Modbus_init+0x9c>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80027d8:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <Modbus_init+0x9c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80027e0:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <Modbus_init+0x9c>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4a20      	ldr	r2, [pc, #128]	@ (8002868 <Modbus_init+0xa0>)
 80027e8:	2114      	movs	r1, #20
 80027ea:	4618      	mov	r0, r3
 80027ec:	f008 fc4a 	bl	800b084 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80027f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002864 <Modbus_init+0x9c>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	4a1d      	ldr	r2, [pc, #116]	@ (800286c <Modbus_init+0xa4>)
 80027f8:	210e      	movs	r1, #14
 80027fa:	4618      	mov	r0, r3
 80027fc:	f008 fc42 	bl	800b084 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8002800:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <Modbus_init+0x9c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4a1a      	ldr	r2, [pc, #104]	@ (8002870 <Modbus_init+0xa8>)
 8002808:	2103      	movs	r1, #3
 800280a:	4618      	mov	r0, r3
 800280c:	f009 fc8a 	bl	800c124 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8002810:	4b14      	ldr	r3, [pc, #80]	@ (8002864 <Modbus_init+0x9c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68d8      	ldr	r0, [r3, #12]
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <Modbus_init+0x9c>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <Modbus_init+0x9c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002822:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002826:	4413      	add	r3, r2
 8002828:	3302      	adds	r3, #2
 800282a:	2201      	movs	r2, #1
 800282c:	4619      	mov	r1, r3
 800282e:	f009 fd33 	bl	800c298 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <Modbus_init+0x9c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10c      	bne.n	800285c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8002842:	4b08      	ldr	r3, [pc, #32]	@ (8002864 <Modbus_init+0x9c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	4618      	mov	r0, r3
 800284a:	f007 fb05 	bl	8009e58 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <Modbus_init+0x9c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f007 fdcc 	bl	800a3f4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200002e4 	.word	0x200002e4
 8002868:	08002725 	.word	0x08002725
 800286c:	08002745 	.word	0x08002745
 8002870:	08002765 	.word	0x08002765

08002874 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002880:	23ff      	movs	r3, #255	@ 0xff
 8002882:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8002884:	23ff      	movs	r3, #255	@ 0xff
 8002886:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8002888:	e013      	b.n	80028b2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	7bbb      	ldrb	r3, [r7, #14]
 8002894:	4053      	eors	r3, r2
 8002896:	b2db      	uxtb	r3, r3
 8002898:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800289a:	4a10      	ldr	r2, [pc, #64]	@ (80028dc <CRC16+0x68>)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	4413      	add	r3, r2
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	4053      	eors	r3, r2
 80028a6:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <CRC16+0x6c>)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80028b2:	883b      	ldrh	r3, [r7, #0]
 80028b4:	1e5a      	subs	r2, r3, #1
 80028b6:	803a      	strh	r2, [r7, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1e6      	bne.n	800288a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	b21b      	sxth	r3, r3
 80028c0:	021b      	lsls	r3, r3, #8
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	7bbb      	ldrb	r3, [r7, #14]
 80028c6:	b21b      	sxth	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b21b      	sxth	r3, r3
 80028cc:	b29b      	uxth	r3, r3
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000108 	.word	0x20000108
 80028e0:	20000008 	.word	0x20000008

080028e4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80028ea:	4b80      	ldr	r3, [pc, #512]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	7e1b      	ldrb	r3, [r3, #24]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d80a      	bhi.n	800290c <Modbus_Protocal_Worker+0x28>
 80028f6:	a201      	add	r2, pc, #4	@ (adr r2, 80028fc <Modbus_Protocal_Worker+0x18>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002917 	.word	0x08002917
 8002900:	08002ab5 	.word	0x08002ab5
 8002904:	080029a1 	.word	0x080029a1
 8002908:	080029c7 	.word	0x080029c7
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 800290c:	4b77      	ldr	r3, [pc, #476]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2201      	movs	r2, #1
 8002912:	761a      	strb	r2, [r3, #24]
		break;
 8002914:	e0e6      	b.n	8002ae4 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002916:	4b75      	ldr	r3, [pc, #468]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8002922:	f000 f9d5 	bl	8002cd0 <Modbus_Emission>
 8002926:	e01c      	b.n	8002962 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8002928:	4b70      	ldr	r3, [pc, #448]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	7d9b      	ldrb	r3, [r3, #22]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d017      	beq.n	8002962 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8002932:	4b6e      	ldr	r3, [pc, #440]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800293a:	4b6c      	ldr	r3, [pc, #432]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2200      	movs	r2, #0
 8002940:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8002942:	4b6a      	ldr	r3, [pc, #424]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b67      	ldr	r3, [pc, #412]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800295a:	4b64      	ldr	r3, [pc, #400]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2203      	movs	r2, #3
 8002960:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002962:	4b62      	ldr	r3, [pc, #392]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800296c:	2b20      	cmp	r3, #32
 800296e:	f040 80b2 	bne.w	8002ad6 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002972:	4b5e      	ldr	r3, [pc, #376]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800297c:	4b5b      	ldr	r3, [pc, #364]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68d8      	ldr	r0, [r3, #12]
 8002982:	4b5a      	ldr	r3, [pc, #360]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b59      	ldr	r3, [pc, #356]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800298e:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002992:	4413      	add	r3, r2
 8002994:	3302      	adds	r3, #2
 8002996:	2201      	movs	r2, #1
 8002998:	4619      	mov	r1, r3
 800299a:	f009 fc7d 	bl	800c298 <HAL_UART_Receive_IT>
		}
		break;
 800299e:	e09a      	b.n	8002ad6 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80029a0:	4b52      	ldr	r3, [pc, #328]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	7d1b      	ldrb	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8097 	beq.w	8002ada <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 80029ac:	4b4f      	ldr	r3, [pc, #316]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2200      	movs	r2, #0
 80029b2:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80029b4:	4b4d      	ldr	r3, [pc, #308]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	22fe      	movs	r2, #254	@ 0xfe
 80029ba:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80029bc:	4b4b      	ldr	r3, [pc, #300]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2204      	movs	r2, #4
 80029c2:	761a      	strb	r2, [r3, #24]
		}
		break;
 80029c4:	e089      	b.n	8002ada <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80029c6:	4b49      	ldr	r3, [pc, #292]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	7d9b      	ldrb	r3, [r3, #22]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 80029d0:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80029dc:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	22ff      	movs	r2, #255	@ 0xff
 80029e2:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80029e4:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80029ec:	f113 0f02 	cmn.w	r3, #2
 80029f0:	d150      	bne.n	8002a94 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80029f2:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2200      	movs	r2, #0
 80029f8:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80029fa:	4b3c      	ldr	r3, [pc, #240]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8002a02:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a0a:	3b02      	subs	r3, #2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f7ff ff30 	bl	8002874 <CRC16>
 8002a14:	4603      	mov	r3, r0
 8002a16:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002a18:	793a      	ldrb	r2, [r7, #4]
 8002a1a:	4b34      	ldr	r3, [pc, #208]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	4b33      	ldr	r3, [pc, #204]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a26:	3b02      	subs	r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d10c      	bne.n	8002a4c <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8002a32:	797a      	ldrb	r2, [r7, #5]
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a36:	6819      	ldr	r1, [r3, #0]
 8002a38:	4b2c      	ldr	r3, [pc, #176]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a40:	3b01      	subs	r3, #1
 8002a42:	440b      	add	r3, r1
 8002a44:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d004      	beq.n	8002a56 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002a4c:	4b27      	ldr	r3, [pc, #156]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	22ff      	movs	r2, #255	@ 0xff
 8002a52:	75da      	strb	r2, [r3, #23]
				break;
 8002a54:	e046      	b.n	8002ae4 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8002a56:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002a5e:	4b23      	ldr	r3, [pc, #140]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d113      	bne.n	8002a90 <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8002a68:	4b20      	ldr	r3, [pc, #128]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002a70:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8002a78:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002a82:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8002a84:	461a      	mov	r2, r3
 8002a86:	f00c fc6b 	bl	800f360 <memcpy>

			//execute command
			Modbus_frame_response();
 8002a8a:	f000 f909 	bl	8002ca0 <Modbus_frame_response>
 8002a8e:	e001      	b.n	8002a94 <Modbus_Protocal_Worker+0x1b0>
				break;
 8002a90:	bf00      	nop
					}
		break;


	}
}
 8002a92:	e027      	b.n	8002ae4 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8002a94:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	7d5b      	ldrb	r3, [r3, #21]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01f      	beq.n	8002ade <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 8002a9e:	4b13      	ldr	r3, [pc, #76]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8002aa6:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f009 fcbf 	bl	800c430 <HAL_UART_AbortReceive>
		break;
 8002ab2:	e014      	b.n	8002ade <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d10f      	bne.n	8002ae2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8002acc:	4b07      	ldr	r3, [pc, #28]	@ (8002aec <Modbus_Protocal_Worker+0x208>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	761a      	strb	r2, [r3, #24]
		break;
 8002ad4:	e005      	b.n	8002ae2 <Modbus_Protocal_Worker+0x1fe>
		break;
 8002ad6:	bf00      	nop
 8002ad8:	e004      	b.n	8002ae4 <Modbus_Protocal_Worker+0x200>
		break;
 8002ada:	bf00      	nop
 8002adc:	e002      	b.n	8002ae4 <Modbus_Protocal_Worker+0x200>
		break;
 8002ade:	bf00      	nop
 8002ae0:	e000      	b.n	8002ae4 <Modbus_Protocal_Worker+0x200>
		break;
 8002ae2:	bf00      	nop
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	200002e4 	.word	0x200002e4

08002af0 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8002af6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	7e9b      	ldrb	r3, [r3, #26]
 8002afc:	021b      	lsls	r3, r3, #8
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	4a1a      	ldr	r2, [pc, #104]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	7ed2      	ldrb	r2, [r2, #27]
 8002b06:	4413      	add	r3, r2
 8002b08:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8002b0a:	88fa      	ldrh	r2, [r7, #6]
 8002b0c:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d903      	bls.n	8002b1e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002b16:	2002      	movs	r0, #2
 8002b18:	f000 f8a0 	bl	8002c5c <ModbusErrorReply>
			 return;
 8002b1c:	e023      	b.n	8002b66 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002b1e:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	440b      	add	r3, r1
 8002b2e:	7f12      	ldrb	r2, [r2, #28]
 8002b30:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	440b      	add	r3, r1
 8002b42:	7f52      	ldrb	r2, [r2, #29]
 8002b44:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f203 1045 	addw	r0, r3, #325	@ 0x145
			hModbus->Rxframe,
 8002b4e:	4b07      	ldr	r3, [pc, #28]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8002b54:	2208      	movs	r2, #8
 8002b56:	4619      	mov	r1, r3
 8002b58:	f00c fc02 	bl	800f360 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002b5c:	4b03      	ldr	r3, [pc, #12]	@ (8002b6c <modbusWrite1Register+0x7c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2205      	movs	r2, #5
 8002b62:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271



}
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	200002e4 	.word	0x200002e4

08002b70 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002b76:	4b38      	ldr	r3, [pc, #224]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	7f1b      	ldrb	r3, [r3, #28]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4a35      	ldr	r2, [pc, #212]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	7f52      	ldrb	r2, [r2, #29]
 8002b86:	4413      	add	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002b8a:	4b33      	ldr	r3, [pc, #204]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	7e9b      	ldrb	r3, [r3, #26]
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	4a30      	ldr	r2, [pc, #192]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002b96:	6812      	ldr	r2, [r2, #0]
 8002b98:	7ed2      	ldrb	r2, [r2, #27]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002b9e:	88fb      	ldrh	r3, [r7, #6]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <modbusRead1Register+0x3a>
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	2b7d      	cmp	r3, #125	@ 0x7d
 8002ba8:	d903      	bls.n	8002bb2 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002baa:	2003      	movs	r0, #3
 8002bac:	f000 f856 	bl	8002c5c <ModbusErrorReply>
		 return;
 8002bb0:	e04e      	b.n	8002c50 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002bb2:	88ba      	ldrh	r2, [r7, #4]
 8002bb4:	4b28      	ldr	r3, [pc, #160]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d808      	bhi.n	8002bd0 <modbusRead1Register+0x60>
 8002bbe:	88ba      	ldrh	r2, [r7, #4]
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b24      	ldr	r3, [pc, #144]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d903      	bls.n	8002bd8 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f000 f843 	bl	8002c5c <ModbusErrorReply>
		 return;
 8002bd6:	e03b      	b.n	8002c50 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002bd8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0052      	lsls	r2, r2, #1
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002bf2:	2400      	movs	r4, #0
 8002bf4:	e020      	b.n	8002c38 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8002bf6:	4b18      	ldr	r3, [pc, #96]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	88bb      	ldrh	r3, [r7, #4]
 8002bfe:	4423      	add	r3, r4
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	18d1      	adds	r1, r2, r3
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	1c63      	adds	r3, r4, #1
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	7849      	ldrb	r1, [r1, #1]
 8002c0e:	4413      	add	r3, r2
 8002c10:	460a      	mov	r2, r1
 8002c12:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	88bb      	ldrh	r3, [r7, #4]
 8002c1e:	4423      	add	r3, r4
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	18d1      	adds	r1, r2, r3
 8002c24:	4b0c      	ldr	r3, [pc, #48]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	0063      	lsls	r3, r4, #1
 8002c2a:	3303      	adds	r3, #3
 8002c2c:	7809      	ldrb	r1, [r1, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	460a      	mov	r2, r1
 8002c32:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8002c36:	3401      	adds	r4, #1
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	429c      	cmp	r4, r3
 8002c3c:	dbdb      	blt.n	8002bf6 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8002c3e:	88fb      	ldrh	r3, [r7, #6]
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b04      	ldr	r3, [pc, #16]	@ (8002c58 <modbusRead1Register+0xe8>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	0052      	lsls	r2, r2, #1
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271

}
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd90      	pop	{r4, r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200002e4 	.word	0x200002e4

08002c5c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <ModbusErrorReply+0x40>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	7e5a      	ldrb	r2, [r3, #25]
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c9c <ModbusErrorReply+0x40>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->Txframe[1] = Errorcode;
 8002c7a:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <ModbusErrorReply+0x40>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
	hModbus->TxCount = 2;
 8002c84:	4b05      	ldr	r3, [pc, #20]	@ (8002c9c <ModbusErrorReply+0x40>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2202      	movs	r2, #2
 8002c8a:	f883 2271 	strb.w	r2, [r3, #625]	@ 0x271
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	200002e4 	.word	0x200002e4

08002ca0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002ca4:	4b09      	ldr	r3, [pc, #36]	@ (8002ccc <Modbus_frame_response+0x2c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	7e5b      	ldrb	r3, [r3, #25]
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d004      	beq.n	8002cb8 <Modbus_frame_response+0x18>
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d105      	bne.n	8002cbe <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002cb2:	f7ff ff1d 	bl	8002af0 <modbusWrite1Register>
		break;
 8002cb6:	e006      	b.n	8002cc6 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002cb8:	f7ff ff5a 	bl	8002b70 <modbusRead1Register>
		break;
 8002cbc:	e003      	b.n	8002cc6 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7ff ffcc 	bl	8002c5c <ModbusErrorReply>
		break;
 8002cc4:	bf00      	nop

	}
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200002e4 	.word	0x200002e4

08002cd0 <Modbus_Emission>:

void Modbus_Emission()
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d15d      	bne.n	8002da0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002ce4:	4b38      	ldr	r3, [pc, #224]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4b37      	ldr	r3, [pc, #220]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002cf2:	4b35      	ldr	r3, [pc, #212]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8002cfa:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002cfc:	4b32      	ldr	r3, [pc, #200]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f203 1145 	addw	r1, r3, #325	@ 0x145
				hModbus->TxCount
 8002d04:	4b30      	ldr	r3, [pc, #192]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
		memcpy
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f00c fb27 	bl	800f360 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002d12:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f893 3271 	ldrb.w	r3, [r3, #625]	@ 0x271
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3203      	adds	r2, #3
 8002d22:	b292      	uxth	r2, r2
 8002d24:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8002d38:	3b02      	subs	r3, #2
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f7ff fd99 	bl	8002874 <CRC16>
 8002d42:	4603      	mov	r3, r0
 8002d44:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d52:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002d54:	7939      	ldrb	r1, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	460a      	mov	r2, r1
 8002d5a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b19      	ldr	r3, [pc, #100]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d6a:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002d6c:	7979      	ldrb	r1, [r7, #5]
 8002d6e:	4413      	add	r3, r2
 8002d70:	460a      	mov	r2, r1
 8002d72:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002d76:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d80:	2b20      	cmp	r3, #32
 8002d82:	d10d      	bne.n	8002da0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d84:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002d96:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f009 fac8 	bl	800c330 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002da8:	4b07      	ldr	r3, [pc, #28]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8002db8:	4b03      	ldr	r3, [pc, #12]	@ (8002dc8 <Modbus_Emission+0xf8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200002e4 	.word	0x200002e4

08002dcc <create_prismatic_motor>:

float v_pris_dis[2] = {0, 0};
float v_pris_ref[3] = {0, 0, 0};

PrismaticMotor create_prismatic_motor(double J, double B, double Eff, double Ke,
		double Kt, double R, double L) {
 8002dcc:	b4b0      	push	{r4, r5, r7}
 8002dce:	b09f      	sub	sp, #124	@ 0x7c
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002dd4:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002dd8:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002ddc:	ed87 2b08 	vstr	d2, [r7, #32]
 8002de0:	ed87 3b06 	vstr	d3, [r7, #24]
 8002de4:	ed87 4b04 	vstr	d4, [r7, #16]
 8002de8:	ed87 5b02 	vstr	d5, [r7, #8]
 8002dec:	ed87 6b00 	vstr	d6, [r7]
	PrismaticMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002df0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002df4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dfc:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002e00:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e04:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e0c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002e10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e14:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e1c:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002e20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e24:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	return motor;
 8002e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002e30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e40:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002e44:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002e46:	377c      	adds	r7, #124	@ 0x7c
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bcb0      	pop	{r4, r5, r7}
 8002e4c:	4770      	bx	lr

08002e4e <create_motor>:
#include "revolute.h"

float v_rev_dis[2] = {0, 0};
float v_rev_ref[3] = {0, 0, 0};

RevoluteMotor create_motor(double J, double B, double Eff, double Ke, double Kt, double R, double L) {
 8002e4e:	b4b0      	push	{r4, r5, r7}
 8002e50:	b09f      	sub	sp, #124	@ 0x7c
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002e56:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30
 8002e5a:	ed87 1b0a 	vstr	d1, [r7, #40]	@ 0x28
 8002e5e:	ed87 2b08 	vstr	d2, [r7, #32]
 8002e62:	ed87 3b06 	vstr	d3, [r7, #24]
 8002e66:	ed87 4b04 	vstr	d4, [r7, #16]
 8002e6a:	ed87 5b02 	vstr	d5, [r7, #8]
 8002e6e:	ed87 6b00 	vstr	d6, [r7]
    RevoluteMotor motor = { J, B, Eff, Ke, Kt, R, L };
 8002e72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e76:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8002e7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e7e:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8002e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e86:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8002e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8002e92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e96:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8002e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e9e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
 8002ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ea6:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
    return motor;
 8002eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eac:	461d      	mov	r5, r3
 8002eae:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002eb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002ec6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002ec8:	377c      	adds	r7, #124	@ 0x7c
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bcb0      	pop	{r4, r5, r7}
 8002ece:	4770      	bx	lr

08002ed0 <InitTrajectorySegment>:
#include "Trajectory.h"
#include <math.h>

void InitTrajectorySegment(TrajectorySegment *seg, float start, float end, float v_max, float a_max, float t_start) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08c      	sub	sp, #48	@ 0x30
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6178      	str	r0, [r7, #20]
 8002ed8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002edc:	edc7 0a03 	vstr	s1, [r7, #12]
 8002ee0:	ed87 1a02 	vstr	s2, [r7, #8]
 8002ee4:	edc7 1a01 	vstr	s3, [r7, #4]
 8002ee8:	ed87 2a00 	vstr	s4, [r7]
    float D = end - start;
 8002eec:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ef0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ef8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float dir = (D >= 0) ? 1.0f : -1.0f;
 8002efc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f08:	db02      	blt.n	8002f10 <InitTrajectorySegment+0x40>
 8002f0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f0e:	e000      	b.n	8002f12 <InitTrajectorySegment+0x42>
 8002f10:	4b49      	ldr	r3, [pc, #292]	@ (8003038 <InitTrajectorySegment+0x168>)
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
    D = fabsf(D);
 8002f14:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f18:	eef0 7ae7 	vabs.f32	s15, s15
 8002f1c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    float t_accel = v_max / a_max;
 8002f20:	edd7 6a02 	vldr	s13, [r7, #8]
 8002f24:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f2c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d_accel = 0.5f * a_max * t_accel * t_accel;
 8002f30:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f34:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002f38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f3c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f44:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4c:	edc7 7a08 	vstr	s15, [r7, #32]

    if (2 * d_accel > D) {
 8002f50:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f58:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f64:	d524      	bpl.n	8002fb0 <InitTrajectorySegment+0xe0>
        // Triangular profile
        t_accel = sqrtf(D / a_max);
 8002f66:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002f6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f72:	eeb0 0a66 	vmov.f32	s0, s13
 8002f76:	f00c fad9 	bl	800f52c <sqrtf>
 8002f7a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        seg->t_const = 0;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	615a      	str	r2, [r3, #20]
        seg->t_total = 2 * t_accel;
 8002f86:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = a_max * t_accel * dir;
 8002f94:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f98:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fa0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	edc3 7a02 	vstr	s15, [r3, #8]
 8002fae:	e027      	b.n	8003000 <InitTrajectorySegment+0x130>
    } else {
        // Trapezoidal profile
        float d_const = D - 2 * d_accel;
 8002fb0:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fb8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        seg->t_const = d_const / v_max;
 8002fc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	edc3 7a05 	vstr	s15, [r3, #20]
        seg->t_total = 2 * t_accel + seg->t_const;
 8002fd6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002fda:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	edc3 7a07 	vstr	s15, [r3, #28]
        seg->v_max = v_max * dir;
 8002fee:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ff2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    seg->start_pos = start;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	601a      	str	r2, [r3, #0]
    seg->end_pos = end;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
//    seg->v_max = v_max * dir;
    seg->a_max = a_max * dir;
 800300c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003010:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	edc3 7a03 	vstr	s15, [r3, #12]
    seg->t_accel = t_accel;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003022:	611a      	str	r2, [r3, #16]
    seg->t_decel = t_accel;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003028:	619a      	str	r2, [r3, #24]
    seg->t_start = t_start;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	621a      	str	r2, [r3, #32]
}
 8003030:	bf00      	nop
 8003032:	3730      	adds	r7, #48	@ 0x30
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	bf800000 	.word	0xbf800000

0800303c <GetTrajectoryPosition>:

float GetTrajectoryPosition(const TrajectorySegment *seg, float t_global) {
 800303c:	b480      	push	{r7}
 800303e:	b08f      	sub	sp, #60	@ 0x3c
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	edd3 7a08 	vldr	s15, [r3, #32]
 800304e:	ed97 7a00 	vldr	s14, [r7]
 8003052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003056:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    if (t < 0) return seg->start_pos;
 800305a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800305e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	d503      	bpl.n	8003070 <GetTrajectoryPosition+0x34>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	edd3 7a00 	vldr	s15, [r3]
 800306e:	e0b4      	b.n	80031da <GetTrajectoryPosition+0x19e>
    if (t >= seg->t_total) return seg->end_pos;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	edd3 7a07 	vldr	s15, [r3, #28]
 8003076:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800307a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800307e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003082:	db03      	blt.n	800308c <GetTrajectoryPosition+0x50>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	edd3 7a01 	vldr	s15, [r3, #4]
 800308a:	e0a6      	b.n	80031da <GetTrajectoryPosition+0x19e>

    float a = seg->a_max;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	633b      	str	r3, [r7, #48]	@ 0x30
    float v = seg->v_max;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float p0 = seg->start_pos;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (t < seg->t_accel) {
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80030a4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b0:	d512      	bpl.n	80030d8 <GetTrajectoryPosition+0x9c>
        return p0 + 0.5f * a * t * t;
 80030b2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80030b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80030ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80030be:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80030ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80030d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030d6:	e080      	b.n	80031da <GetTrajectoryPosition+0x19e>
    } else if (t < seg->t_accel + seg->t_const) {
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	ed93 7a04 	vldr	s14, [r3, #16]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80030e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80030ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f4:	d525      	bpl.n	8003142 <GetTrajectoryPosition+0x106>
        float t1 = seg->t_accel;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	613b      	str	r3, [r7, #16]
        float p1 = p0 + 0.5f * a * t1 * t1;
 80030fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003100:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003104:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003108:	edd7 7a04 	vldr	s15, [r7, #16]
 800310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003110:	edd7 7a04 	vldr	s15, [r7, #16]
 8003114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003118:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800311c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003120:	edc7 7a03 	vstr	s15, [r7, #12]
        return p1 + v * (t - t1);
 8003124:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003128:	edd7 7a04 	vldr	s15, [r7, #16]
 800312c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003130:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003134:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003138:	edd7 7a03 	vldr	s15, [r7, #12]
 800313c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003140:	e04b      	b.n	80031da <GetTrajectoryPosition+0x19e>
    } else {
        float t1 = seg->t_accel;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24
        float t2 = seg->t_const;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	623b      	str	r3, [r7, #32]
        float p1 = p0 + 0.5f * a * t1 * t1;
 800314e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003152:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003156:	ee27 7a87 	vmul.f32	s14, s15, s14
 800315a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800315e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003162:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800316e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
        float p2 = p1 + v * t2;
 8003176:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800317a:	edd7 7a08 	vldr	s15, [r7, #32]
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	ed97 7a07 	vldr	s14, [r7, #28]
 8003186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318a:	edc7 7a06 	vstr	s15, [r7, #24]
        float td = t - t1 - t2;
 800318e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003192:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003196:	ee37 7a67 	vsub.f32	s14, s14, s15
 800319a:	edd7 7a08 	vldr	s15, [r7, #32]
 800319e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a2:	edc7 7a05 	vstr	s15, [r7, #20]
        return p2 + v * td - 0.5f * a * td * td;
 80031a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80031aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80031b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ba:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80031be:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80031c2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80031c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80031ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80031d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031d6:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80031da:	eeb0 0a67 	vmov.f32	s0, s15
 80031de:	373c      	adds	r7, #60	@ 0x3c
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <GetTrajectoryVelocity>:

float GetTrajectoryVelocity(const TrajectorySegment *seg, float t_global) {
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	ed87 0a00 	vstr	s0, [r7]
    float t = t_global - seg->t_start;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80031fa:	ed97 7a00 	vldr	s14, [r7]
 80031fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003202:	edc7 7a05 	vstr	s15, [r7, #20]
    if (t < 0) return 0;
 8003206:	edd7 7a05 	vldr	s15, [r7, #20]
 800320a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003212:	d502      	bpl.n	800321a <GetTrajectoryVelocity+0x32>
 8003214:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80032c4 <GetTrajectoryVelocity+0xdc>
 8003218:	e04d      	b.n	80032b6 <GetTrajectoryVelocity+0xce>
    if (t >= seg->t_total) return 0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003220:	ed97 7a05 	vldr	s14, [r7, #20]
 8003224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	db02      	blt.n	8003234 <GetTrajectoryVelocity+0x4c>
 800322e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80032c4 <GetTrajectoryVelocity+0xdc>
 8003232:	e040      	b.n	80032b6 <GetTrajectoryVelocity+0xce>

    float a = seg->a_max;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	613b      	str	r3, [r7, #16]
    float v = seg->v_max;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	60fb      	str	r3, [r7, #12]

    if (t < seg->t_accel) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	edd3 7a04 	vldr	s15, [r3, #16]
 8003246:	ed97 7a05 	vldr	s14, [r7, #20]
 800324a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800324e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003252:	d506      	bpl.n	8003262 <GetTrajectoryVelocity+0x7a>
        return a * t;
 8003254:	ed97 7a04 	vldr	s14, [r7, #16]
 8003258:	edd7 7a05 	vldr	s15, [r7, #20]
 800325c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003260:	e029      	b.n	80032b6 <GetTrajectoryVelocity+0xce>
    } else if (t < seg->t_accel + seg->t_const) {
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	ed93 7a04 	vldr	s14, [r3, #16]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	edd3 7a05 	vldr	s15, [r3, #20]
 800326e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003272:	ed97 7a05 	vldr	s14, [r7, #20]
 8003276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800327a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327e:	d502      	bpl.n	8003286 <GetTrajectoryVelocity+0x9e>
        return v;
 8003280:	edd7 7a03 	vldr	s15, [r7, #12]
 8003284:	e017      	b.n	80032b6 <GetTrajectoryVelocity+0xce>
    } else {
        float td = t - seg->t_accel - seg->t_const;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a04 	vldr	s15, [r3, #16]
 800328c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003290:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	edd3 7a05 	vldr	s15, [r3, #20]
 800329a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329e:	edc7 7a02 	vstr	s15, [r7, #8]
        return v - a * td;
 80032a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80032a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80032b2:	ee77 7a67 	vsub.f32	s15, s14, s15
    }
}
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	371c      	adds	r7, #28
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	00000000 	.word	0x00000000

080032c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	@ 0x30
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80032ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2220      	movs	r2, #32
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f00c f80b 	bl	800f2fc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80032e6:	4b32      	ldr	r3, [pc, #200]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 80032e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80032ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80032ee:	4b30      	ldr	r3, [pc, #192]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 80032f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80032f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80032f6:	4b2e      	ldr	r3, [pc, #184]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032fc:	4b2c      	ldr	r3, [pc, #176]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 80032fe:	2200      	movs	r2, #0
 8003300:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003302:	4b2b      	ldr	r3, [pc, #172]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003308:	4b29      	ldr	r3, [pc, #164]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 800330a:	2200      	movs	r2, #0
 800330c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800330e:	4b28      	ldr	r3, [pc, #160]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003310:	2204      	movs	r2, #4
 8003312:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003314:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003316:	2200      	movs	r2, #0
 8003318:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800331a:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 800331c:	2200      	movs	r2, #0
 800331e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003320:	4b23      	ldr	r3, [pc, #140]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003322:	2201      	movs	r2, #1
 8003324:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003326:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003330:	2200      	movs	r2, #0
 8003332:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003334:	4b1e      	ldr	r3, [pc, #120]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800333a:	4b1d      	ldr	r3, [pc, #116]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003342:	4b1b      	ldr	r3, [pc, #108]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003344:	2200      	movs	r2, #0
 8003346:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003348:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003350:	4817      	ldr	r0, [pc, #92]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003352:	f003 f99d 	bl	8006690 <HAL_ADC_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800335c:	f001 fffe 	bl	800535c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003364:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003368:	4619      	mov	r1, r3
 800336a:	4811      	ldr	r0, [pc, #68]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 800336c:	f004 f93a 	bl	80075e4 <HAL_ADCEx_MultiModeConfigChannel>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003376:	f001 fff1 	bl	800535c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <MX_ADC1_Init+0xec>)
 800337c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800337e:	2306      	movs	r3, #6
 8003380:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003386:	237f      	movs	r3, #127	@ 0x7f
 8003388:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800338a:	2304      	movs	r3, #4
 800338c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003392:	1d3b      	adds	r3, r7, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4806      	ldr	r0, [pc, #24]	@ (80033b0 <MX_ADC1_Init+0xe8>)
 8003398:	f003 fc28 	bl	8006bec <HAL_ADC_ConfigChannel>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80033a2:	f001 ffdb 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033a6:	bf00      	nop
 80033a8:	3730      	adds	r7, #48	@ 0x30
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200002e8 	.word	0x200002e8
 80033b4:	04300002 	.word	0x04300002

080033b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80033be:	463b      	mov	r3, r7
 80033c0:	2220      	movs	r2, #32
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f00b ff99 	bl	800f2fc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80033ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033cc:	4a2b      	ldr	r2, [pc, #172]	@ (800347c <MX_ADC2_Init+0xc4>)
 80033ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033d0:	4b29      	ldr	r3, [pc, #164]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033d2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80033d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80033d8:	4b27      	ldr	r3, [pc, #156]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033de:	4b26      	ldr	r3, [pc, #152]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80033ea:	4b23      	ldr	r3, [pc, #140]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033f2:	2204      	movs	r2, #4
 80033f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80033fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <MX_ADC2_Init+0xc0>)
 80033fe:	2200      	movs	r2, #0
 8003400:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8003402:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <MX_ADC2_Init+0xc0>)
 8003404:	2201      	movs	r2, #1
 8003406:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003408:	4b1b      	ldr	r3, [pc, #108]	@ (8003478 <MX_ADC2_Init+0xc0>)
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003410:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <MX_ADC2_Init+0xc0>)
 8003412:	2200      	movs	r2, #0
 8003414:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003416:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <MX_ADC2_Init+0xc0>)
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800341c:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <MX_ADC2_Init+0xc0>)
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003424:	4b14      	ldr	r3, [pc, #80]	@ (8003478 <MX_ADC2_Init+0xc0>)
 8003426:	2200      	movs	r2, #0
 8003428:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800342a:	4b13      	ldr	r3, [pc, #76]	@ (8003478 <MX_ADC2_Init+0xc0>)
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003432:	4811      	ldr	r0, [pc, #68]	@ (8003478 <MX_ADC2_Init+0xc0>)
 8003434:	f003 f92c 	bl	8006690 <HAL_ADC_Init>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800343e:	f001 ff8d 	bl	800535c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003442:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <MX_ADC2_Init+0xc8>)
 8003444:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003446:	2306      	movs	r3, #6
 8003448:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800344e:	237f      	movs	r3, #127	@ 0x7f
 8003450:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003452:	2304      	movs	r3, #4
 8003454:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800345a:	463b      	mov	r3, r7
 800345c:	4619      	mov	r1, r3
 800345e:	4806      	ldr	r0, [pc, #24]	@ (8003478 <MX_ADC2_Init+0xc0>)
 8003460:	f003 fbc4 	bl	8006bec <HAL_ADC_ConfigChannel>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800346a:	f001 ff77 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000354 	.word	0x20000354
 800347c:	50000100 	.word	0x50000100
 8003480:	08600004 	.word	0x08600004

08003484 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0a0      	sub	sp, #128	@ 0x80
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800349c:	f107 0318 	add.w	r3, r7, #24
 80034a0:	2254      	movs	r2, #84	@ 0x54
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f00b ff29 	bl	800f2fc <memset>
  if(adcHandle->Instance==ADC1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034b2:	d13e      	bne.n	8003532 <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80034ba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80034be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034c0:	f107 0318 	add.w	r3, r7, #24
 80034c4:	4618      	mov	r0, r3
 80034c6:	f005 fd77 	bl	8008fb8 <HAL_RCCEx_PeriphCLKConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80034d0:	f001 ff44 	bl	800535c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034d4:	4b3a      	ldr	r3, [pc, #232]	@ (80035c0 <HAL_ADC_MspInit+0x13c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	4a39      	ldr	r2, [pc, #228]	@ (80035c0 <HAL_ADC_MspInit+0x13c>)
 80034dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80034de:	4b38      	ldr	r3, [pc, #224]	@ (80035c0 <HAL_ADC_MspInit+0x13c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10b      	bne.n	80034fe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034e6:	4b37      	ldr	r3, [pc, #220]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ea:	4a36      	ldr	r2, [pc, #216]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 80034ec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f2:	4b34      	ldr	r3, [pc, #208]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 80034f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fe:	4b31      	ldr	r3, [pc, #196]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	4a30      	ldr	r2, [pc, #192]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800350a:	4b2e      	ldr	r3, [pc, #184]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 800350c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Current_Sensor_Pin|Current_SensorA1_Pin;
 8003516:	2303      	movs	r3, #3
 8003518:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800351a:	2303      	movs	r3, #3
 800351c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003522:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003526:	4619      	mov	r1, r3
 8003528:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800352c:	f004 fdb0 	bl	8008090 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003530:	e042      	b.n	80035b8 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a24      	ldr	r2, [pc, #144]	@ (80035c8 <HAL_ADC_MspInit+0x144>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d13d      	bne.n	80035b8 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800353c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003540:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003542:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003546:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003548:	f107 0318 	add.w	r3, r7, #24
 800354c:	4618      	mov	r0, r3
 800354e:	f005 fd33 	bl	8008fb8 <HAL_RCCEx_PeriphCLKConfig>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <HAL_ADC_MspInit+0xd8>
      Error_Handler();
 8003558:	f001 ff00 	bl	800535c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800355c:	4b18      	ldr	r3, [pc, #96]	@ (80035c0 <HAL_ADC_MspInit+0x13c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	4a17      	ldr	r2, [pc, #92]	@ (80035c0 <HAL_ADC_MspInit+0x13c>)
 8003564:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003566:	4b16      	ldr	r3, [pc, #88]	@ (80035c0 <HAL_ADC_MspInit+0x13c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d10b      	bne.n	8003586 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800356e:	4b15      	ldr	r3, [pc, #84]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 8003570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003572:	4a14      	ldr	r2, [pc, #80]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 8003574:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 800357c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800357e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003586:	4b0f      	ldr	r3, [pc, #60]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 8003588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358a:	4a0e      	ldr	r2, [pc, #56]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003592:	4b0c      	ldr	r3, [pc, #48]	@ (80035c4 <HAL_ADC_MspInit+0x140>)
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Current_SensorA1_Pin;
 800359e:	2302      	movs	r3, #2
 80035a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035a2:	2303      	movs	r3, #3
 80035a4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(Current_SensorA1_GPIO_Port, &GPIO_InitStruct);
 80035aa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80035ae:	4619      	mov	r1, r3
 80035b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035b4:	f004 fd6c 	bl	8008090 <HAL_GPIO_Init>
}
 80035b8:	bf00      	nop
 80035ba:	3780      	adds	r7, #128	@ 0x80
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	200003c0 	.word	0x200003c0
 80035c4:	40021000 	.word	0x40021000
 80035c8:	50000100 	.word	0x50000100

080035cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80035d2:	4b12      	ldr	r3, [pc, #72]	@ (800361c <MX_DMA_Init+0x50>)
 80035d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d6:	4a11      	ldr	r2, [pc, #68]	@ (800361c <MX_DMA_Init+0x50>)
 80035d8:	f043 0304 	orr.w	r3, r3, #4
 80035dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80035de:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <MX_DMA_Init+0x50>)
 80035e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e2:	f003 0304 	and.w	r3, r3, #4
 80035e6:	607b      	str	r3, [r7, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80035ea:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <MX_DMA_Init+0x50>)
 80035ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ee:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <MX_DMA_Init+0x50>)
 80035f0:	f043 0301 	orr.w	r3, r3, #1
 80035f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80035f6:	4b09      	ldr	r3, [pc, #36]	@ (800361c <MX_DMA_Init+0x50>)
 80035f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003602:	2200      	movs	r2, #0
 8003604:	2100      	movs	r1, #0
 8003606:	200b      	movs	r0, #11
 8003608:	f004 f9cf 	bl	80079aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800360c:	200b      	movs	r0, #11
 800360e:	f004 f9e6 	bl	80079de <HAL_NVIC_EnableIRQ>

}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000

08003620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	@ 0x28
 8003624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003636:	4b54      	ldr	r3, [pc, #336]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	4a53      	ldr	r2, [pc, #332]	@ (8003788 <MX_GPIO_Init+0x168>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003642:	4b51      	ldr	r3, [pc, #324]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800364e:	4b4e      	ldr	r3, [pc, #312]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003652:	4a4d      	ldr	r2, [pc, #308]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003654:	f043 0320 	orr.w	r3, r3, #32
 8003658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800365a:	4b4b      	ldr	r3, [pc, #300]	@ (8003788 <MX_GPIO_Init+0x168>)
 800365c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	4b48      	ldr	r3, [pc, #288]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a47      	ldr	r2, [pc, #284]	@ (8003788 <MX_GPIO_Init+0x168>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003672:	4b45      	ldr	r3, [pc, #276]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	4b42      	ldr	r3, [pc, #264]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003682:	4a41      	ldr	r2, [pc, #260]	@ (8003788 <MX_GPIO_Init+0x168>)
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800368a:	4b3f      	ldr	r3, [pc, #252]	@ (8003788 <MX_GPIO_Init+0x168>)
 800368c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_24V_GPIO_Port, DIR_MD20A_24V_Pin, GPIO_PIN_RESET);
 8003696:	2200      	movs	r2, #0
 8003698:	2102      	movs	r1, #2
 800369a:	483c      	ldr	r0, [pc, #240]	@ (800378c <MX_GPIO_Init+0x16c>)
 800369c:	f004 fe7a 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_MD20A_18V_GPIO_Port, DIR_MD20A_18V_Pin, GPIO_PIN_RESET);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2140      	movs	r1, #64	@ 0x40
 80036a4:	483a      	ldr	r0, [pc, #232]	@ (8003790 <MX_GPIO_Init+0x170>)
 80036a6:	f004 fe75 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS2_Attention_GPIO_Port, PS2_Attention_Pin, GPIO_PIN_SET);
 80036aa:	2201      	movs	r2, #1
 80036ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80036b0:	4837      	ldr	r0, [pc, #220]	@ (8003790 <MX_GPIO_Init+0x170>)
 80036b2:	f004 fe6f 	bl	8008394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIR_MD20A_24V_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_24V_Pin;
 80036b6:	2302      	movs	r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ba:	2301      	movs	r3, #1
 80036bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c2:	2300      	movs	r3, #0
 80036c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4619      	mov	r1, r3
 80036cc:	482f      	ldr	r0, [pc, #188]	@ (800378c <MX_GPIO_Init+0x16c>)
 80036ce:	f004 fcdf 	bl	8008090 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit_Switch_pen_2_Pin Limit_Switch_Prismatic1_Pin Limit_Switch_Prismatic2_Pin Limit_Switch_pen_1_Pin */
  GPIO_InitStruct.Pin = Limit_Switch_pen_2_Pin|Limit_Switch_Prismatic1_Pin|Limit_Switch_Prismatic2_Pin|Limit_Switch_pen_1_Pin;
 80036d2:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80036d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80036d8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80036dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e2:	f107 0314 	add.w	r3, r7, #20
 80036e6:	4619      	mov	r1, r3
 80036e8:	4828      	ldr	r0, [pc, #160]	@ (800378c <MX_GPIO_Init+0x16c>)
 80036ea:	f004 fcd1 	bl	8008090 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Left_Pin */
  GPIO_InitStruct.Pin = Proximity_Left_Pin;
 80036ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036f4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_Left_GPIO_Port, &GPIO_InitStruct);
 80036fe:	f107 0314 	add.w	r3, r7, #20
 8003702:	4619      	mov	r1, r3
 8003704:	4821      	ldr	r0, [pc, #132]	@ (800378c <MX_GPIO_Init+0x16c>)
 8003706:	f004 fcc3 	bl	8008090 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_MD20A_18V_Pin PS2_Attention_Pin */
  GPIO_InitStruct.Pin = DIR_MD20A_18V_Pin|PS2_Attention_Pin;
 800370a:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 800370e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003710:	2301      	movs	r3, #1
 8003712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003718:	2300      	movs	r3, #0
 800371a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371c:	f107 0314 	add.w	r3, r7, #20
 8003720:	4619      	mov	r1, r3
 8003722:	481b      	ldr	r0, [pc, #108]	@ (8003790 <MX_GPIO_Init+0x170>)
 8003724:	f004 fcb4 	bl	8008090 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Pin */
  GPIO_InitStruct.Pin = Emergency_Pin;
 8003728:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800372c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800372e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003734:	2300      	movs	r3, #0
 8003736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_GPIO_Port, &GPIO_InitStruct);
 8003738:	f107 0314 	add.w	r3, r7, #20
 800373c:	4619      	mov	r1, r3
 800373e:	4814      	ldr	r0, [pc, #80]	@ (8003790 <MX_GPIO_Init+0x170>)
 8003740:	f004 fca6 	bl	8008090 <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_sensor_Pin */
  GPIO_InitStruct.Pin = Proximity_sensor_Pin;
 8003744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800374a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800374e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_sensor_GPIO_Port, &GPIO_InitStruct);
 8003754:	f107 0314 	add.w	r3, r7, #20
 8003758:	4619      	mov	r1, r3
 800375a:	480d      	ldr	r0, [pc, #52]	@ (8003790 <MX_GPIO_Init+0x170>)
 800375c:	f004 fc98 	bl	8008090 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	2100      	movs	r1, #0
 8003764:	2017      	movs	r0, #23
 8003766:	f004 f920 	bl	80079aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800376a:	2017      	movs	r0, #23
 800376c:	f004 f937 	bl	80079de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2028      	movs	r0, #40	@ 0x28
 8003776:	f004 f918 	bl	80079aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800377a:	2028      	movs	r0, #40	@ 0x28
 800377c:	f004 f92f 	bl	80079de <HAL_NVIC_EnableIRQ>

}
 8003780:	bf00      	nop
 8003782:	3728      	adds	r7, #40	@ 0x28
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	48000400 	.word	0x48000400
 8003790:	48000800 	.word	0x48000800
 8003794:	00000000 	.word	0x00000000

08003798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	ed2d 8b04 	vpush	{d8-d9}
 80037a0:	b0a0      	sub	sp, #128	@ 0x80
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037a4:	f002 fcf7 	bl	8006196 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037a8:	f001 f9f2 	bl	8004b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ac:	f7ff ff38 	bl	8003620 <MX_GPIO_Init>
  MX_DMA_Init();
 80037b0:	f7ff ff0c 	bl	80035cc <MX_DMA_Init>
  MX_TIM3_Init();
 80037b4:	f001 ffd8 	bl	8005768 <MX_TIM3_Init>
  MX_ADC1_Init();
 80037b8:	f7ff fd86 	bl	80032c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 80037bc:	f001 ff32 	bl	8005624 <MX_TIM1_Init>
  MX_TIM2_Init();
 80037c0:	f001 ff84 	bl	80056cc <MX_TIM2_Init>
  MX_TIM4_Init();
 80037c4:	f002 f826 	bl	8005814 <MX_TIM4_Init>
  MX_TIM20_Init();
 80037c8:	f002 f9aa 	bl	8005b20 <MX_TIM20_Init>
  MX_TIM8_Init();
 80037cc:	f002 f878 	bl	80058c0 <MX_TIM8_Init>
  MX_TIM16_Init();
 80037d0:	f002 f926 	bl	8005a20 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80037d4:	f002 fbdc 	bl	8005f90 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80037d8:	f7ff fdee 	bl	80033b8 <MX_ADC2_Init>
  MX_SPI1_Init();
 80037dc:	f001 fdc4 	bl	8005368 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim20);
 80037e0:	48a1      	ldr	r0, [pc, #644]	@ (8003a68 <main+0x2d0>)
 80037e2:	f006 fac9 	bl	8009d78 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim8);
 80037e6:	48a1      	ldr	r0, [pc, #644]	@ (8003a6c <main+0x2d4>)
 80037e8:	f006 fac6 	bl	8009d78 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80037ec:	210c      	movs	r1, #12
 80037ee:	489f      	ldr	r0, [pc, #636]	@ (8003a6c <main+0x2d4>)
 80037f0:	f006 fc86 	bl	800a100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80037f4:	2100      	movs	r1, #0
 80037f6:	489c      	ldr	r0, [pc, #624]	@ (8003a68 <main+0x2d0>)
 80037f8:	f006 fc82 	bl	800a100 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_3);
 80037fc:	2108      	movs	r1, #8
 80037fe:	489a      	ldr	r0, [pc, #616]	@ (8003a68 <main+0x2d0>)
 8003800:	f006 fc7e 	bl	800a100 <HAL_TIM_PWM_Start>
	Encoder_Init(&encoder1, &htim4);
 8003804:	499a      	ldr	r1, [pc, #616]	@ (8003a70 <main+0x2d8>)
 8003806:	489b      	ldr	r0, [pc, #620]	@ (8003a74 <main+0x2dc>)
 8003808:	f7fe fb10 	bl	8001e2c <Encoder_Init>
	Encoder_Init(&encoder2, &htim3);
 800380c:	499a      	ldr	r1, [pc, #616]	@ (8003a78 <main+0x2e0>)
 800380e:	489b      	ldr	r0, [pc, #620]	@ (8003a7c <main+0x2e4>)
 8003810:	f7fe fb0c 	bl	8001e2c <Encoder_Init>
	HAL_ADC_Start(&hadc1);
 8003814:	489a      	ldr	r0, [pc, #616]	@ (8003a80 <main+0x2e8>)
 8003816:	f003 f8f7 	bl	8006a08 <HAL_ADC_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800381a:	489a      	ldr	r0, [pc, #616]	@ (8003a84 <main+0x2ec>)
 800381c:	f006 fb1c 	bl	8009e58 <HAL_TIM_Base_Start_IT>

	uint64_t lastTick = 0;
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800382c:	213c      	movs	r1, #60	@ 0x3c
 800382e:	4892      	ldr	r0, [pc, #584]	@ (8003a78 <main+0x2e0>)
 8003830:	f006 ff22 	bl	800a678 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8003834:	213c      	movs	r1, #60	@ 0x3c
 8003836:	488e      	ldr	r0, [pc, #568]	@ (8003a70 <main+0x2d8>)
 8003838:	f006 ff1e 	bl	800a678 <HAL_TIM_Encoder_Start>

	hmodbus.huart = &huart2;
 800383c:	4b92      	ldr	r3, [pc, #584]	@ (8003a88 <main+0x2f0>)
 800383e:	4a93      	ldr	r2, [pc, #588]	@ (8003a8c <main+0x2f4>)
 8003840:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 8003842:	4b91      	ldr	r3, [pc, #580]	@ (8003a88 <main+0x2f0>)
 8003844:	4a92      	ldr	r2, [pc, #584]	@ (8003a90 <main+0x2f8>)
 8003846:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8003848:	4b8f      	ldr	r3, [pc, #572]	@ (8003a88 <main+0x2f0>)
 800384a:	2215      	movs	r2, #21
 800384c:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize = 200;
 800384e:	4b8e      	ldr	r3, [pc, #568]	@ (8003a88 <main+0x2f0>)
 8003850:	22c8      	movs	r2, #200	@ 0xc8
 8003852:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8003854:	498f      	ldr	r1, [pc, #572]	@ (8003a94 <main+0x2fc>)
 8003856:	488c      	ldr	r0, [pc, #560]	@ (8003a88 <main+0x2f0>)
 8003858:	f7fe ffb6 	bl	80027c8 <Modbus_init>

	Kalman_Init(&kf_pris);
 800385c:	488e      	ldr	r0, [pc, #568]	@ (8003a98 <main+0x300>)
 800385e:	f7fe fd01 	bl	8002264 <Kalman_Init>

	kf_pris.A_data[0] = 1;
 8003862:	4b8d      	ldr	r3, [pc, #564]	@ (8003a98 <main+0x300>)
 8003864:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003868:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_pris.A_data[1] = 0.0008395;
 800386a:	4b8b      	ldr	r3, [pc, #556]	@ (8003a98 <main+0x300>)
 800386c:	4a8b      	ldr	r2, [pc, #556]	@ (8003a9c <main+0x304>)
 800386e:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_pris.A_data[2] = -4.198e-07;
 8003870:	4b89      	ldr	r3, [pc, #548]	@ (8003a98 <main+0x300>)
 8003872:	4a8b      	ldr	r2, [pc, #556]	@ (8003aa0 <main+0x308>)
 8003874:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_pris.A_data[3] = 1.282e-05;
 8003876:	4b88      	ldr	r3, [pc, #544]	@ (8003a98 <main+0x300>)
 8003878:	4a8a      	ldr	r2, [pc, #552]	@ (8003aa4 <main+0x30c>)
 800387a:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_pris.A_data[4] = 0;
 800387c:	4b86      	ldr	r3, [pc, #536]	@ (8003a98 <main+0x300>)
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_pris.A_data[5] = 0.6791;
 8003886:	4b84      	ldr	r3, [pc, #528]	@ (8003a98 <main+0x300>)
 8003888:	4a87      	ldr	r2, [pc, #540]	@ (8003aa8 <main+0x310>)
 800388a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_pris.A_data[6] = -0.0008395;
 800388e:	4b82      	ldr	r3, [pc, #520]	@ (8003a98 <main+0x300>)
 8003890:	4a86      	ldr	r2, [pc, #536]	@ (8003aac <main+0x314>)
 8003892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_pris.A_data[7] = 0.02564;
 8003896:	4b80      	ldr	r3, [pc, #512]	@ (8003a98 <main+0x300>)
 8003898:	4a85      	ldr	r2, [pc, #532]	@ (8003ab0 <main+0x318>)
 800389a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_pris.A_data[8] = 0;
 800389e:	4b7e      	ldr	r3, [pc, #504]	@ (8003a98 <main+0x300>)
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_pris.A_data[9] = 0;
 80038a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003a98 <main+0x300>)
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_pris.A_data[10] = 1;
 80038b2:	4b79      	ldr	r3, [pc, #484]	@ (8003a98 <main+0x300>)
 80038b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80038b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_pris.A_data[11] = 0;
 80038bc:	4b76      	ldr	r3, [pc, #472]	@ (8003a98 <main+0x300>)
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_pris.A_data[12] = 0;
 80038c6:	4b74      	ldr	r3, [pc, #464]	@ (8003a98 <main+0x300>)
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_pris.A_data[13] = -0.04203;
 80038d0:	4b71      	ldr	r3, [pc, #452]	@ (8003a98 <main+0x300>)
 80038d2:	4a78      	ldr	r2, [pc, #480]	@ (8003ab4 <main+0x31c>)
 80038d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_pris.A_data[14] = 2.101e-05;
 80038d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003a98 <main+0x300>)
 80038da:	4a77      	ldr	r2, [pc, #476]	@ (8003ab8 <main+0x320>)
 80038dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_pris.A_data[15] = -0.09565;
 80038e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003a98 <main+0x300>)
 80038e2:	4a76      	ldr	r2, [pc, #472]	@ (8003abc <main+0x324>)
 80038e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_pris.B_data[0] = 4.006e-06;
 80038e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a98 <main+0x300>)
 80038ea:	4a75      	ldr	r2, [pc, #468]	@ (8003ac0 <main+0x328>)
 80038ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_pris.B_data[1] = 0.008011;
 80038f0:	4b69      	ldr	r3, [pc, #420]	@ (8003a98 <main+0x300>)
 80038f2:	4a74      	ldr	r2, [pc, #464]	@ (8003ac4 <main+0x32c>)
 80038f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_pris.B_data[2] = 0;
 80038f8:	4b67      	ldr	r3, [pc, #412]	@ (8003a98 <main+0x300>)
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_pris.B_data[3] = 0.2826;
 8003902:	4b65      	ldr	r3, [pc, #404]	@ (8003a98 <main+0x300>)
 8003904:	4a70      	ldr	r2, [pc, #448]	@ (8003ac8 <main+0x330>)
 8003906:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 800390a:	2300      	movs	r3, #0
 800390c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800390e:	e01d      	b.n	800394c <main+0x1b4>
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 8003910:	2300      	movs	r3, #0
 8003912:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003914:	e014      	b.n	8003940 <main+0x1a8>
			kf_pris.H_data[i * KALMAN_STATE_DIM + j] = (i == j) ? 1.0f : 0.0f;
 8003916:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800391a:	429a      	cmp	r2, r3
 800391c:	d102      	bne.n	8003924 <main+0x18c>
 800391e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003922:	e001      	b.n	8003928 <main+0x190>
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800392a:	0099      	lsls	r1, r3, #2
 800392c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800392e:	440b      	add	r3, r1
 8003930:	4959      	ldr	r1, [pc, #356]	@ (8003a98 <main+0x300>)
 8003932:	333c      	adds	r3, #60	@ 0x3c
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < KALMAN_STATE_DIM; j++) {
 800393a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800393c:	3301      	adds	r3, #1
 800393e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003942:	2b03      	cmp	r3, #3
 8003944:	dde7      	ble.n	8003916 <main+0x17e>
	for (int i = 0; i < KALMAN_MEAS_DIM; i++) {
 8003946:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003948:	3301      	adds	r3, #1
 800394a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800394c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800394e:	2b03      	cmp	r3, #3
 8003950:	ddde      	ble.n	8003910 <main+0x178>
		}
	}

	// Prismatic
	kf_pris.x_data[0] = 0;
 8003952:	4b51      	ldr	r3, [pc, #324]	@ (8003a98 <main+0x300>)
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_pris.x_data[1] = 0;
 800395c:	4b4e      	ldr	r3, [pc, #312]	@ (8003a98 <main+0x300>)
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_pris.x_data[2] = 0;
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <main+0x300>)
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_pris.x_data[3] = 0;
 8003970:	4b49      	ldr	r3, [pc, #292]	@ (8003a98 <main+0x300>)
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_pris, 0.01f);
 800397a:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003acc <main+0x334>
 800397e:	4846      	ldr	r0, [pc, #280]	@ (8003a98 <main+0x300>)
 8003980:	f7fe fd42 	bl	8002408 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_pris, 0.9f);
 8003984:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8003ad0 <main+0x338>
 8003988:	4843      	ldr	r0, [pc, #268]	@ (8003a98 <main+0x300>)
 800398a:	f7fe fd0d 	bl	80023a8 <Kalman_SetProcessNoise>

	Kalman_Init(&kf_rev);
 800398e:	4851      	ldr	r0, [pc, #324]	@ (8003ad4 <main+0x33c>)
 8003990:	f7fe fc68 	bl	8002264 <Kalman_Init>

	kf_rev.A_data[0] = 1;
 8003994:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad4 <main+0x33c>)
 8003996:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800399a:	671a      	str	r2, [r3, #112]	@ 0x70
	kf_rev.A_data[1] = 0.0009998;
 800399c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad4 <main+0x33c>)
 800399e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ad8 <main+0x340>)
 80039a0:	675a      	str	r2, [r3, #116]	@ 0x74
	kf_rev.A_data[2] = -2.659e-06;
 80039a2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <main+0x33c>)
 80039a4:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <main+0x344>)
 80039a6:	679a      	str	r2, [r3, #120]	@ 0x78
	kf_rev.A_data[3] = 8.108e-08;
 80039a8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <main+0x33c>)
 80039aa:	4a4d      	ldr	r2, [pc, #308]	@ (8003ae0 <main+0x348>)
 80039ac:	67da      	str	r2, [r3, #124]	@ 0x7c
	kf_rev.A_data[4] = 0;
 80039ae:	4b49      	ldr	r3, [pc, #292]	@ (8003ad4 <main+0x33c>)
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	kf_rev.A_data[5] = 0.9996;
 80039b8:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <main+0x33c>)
 80039ba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae4 <main+0x34c>)
 80039bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	kf_rev.A_data[6] = -0.005318;
 80039c0:	4b44      	ldr	r3, [pc, #272]	@ (8003ad4 <main+0x33c>)
 80039c2:	4a49      	ldr	r2, [pc, #292]	@ (8003ae8 <main+0x350>)
 80039c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	kf_rev.A_data[7] = 0.0001622;
 80039c8:	4b42      	ldr	r3, [pc, #264]	@ (8003ad4 <main+0x33c>)
 80039ca:	4a48      	ldr	r2, [pc, #288]	@ (8003aec <main+0x354>)
 80039cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	kf_rev.A_data[8] = 0;
 80039d0:	4b40      	ldr	r3, [pc, #256]	@ (8003ad4 <main+0x33c>)
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
	kf_rev.A_data[9] = 0;
 80039da:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad4 <main+0x33c>)
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	kf_rev.A_data[10] = 1;
 80039e4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad4 <main+0x33c>)
 80039e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80039ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	kf_rev.A_data[11] = 0;
 80039ee:	4b39      	ldr	r3, [pc, #228]	@ (8003ad4 <main+0x33c>)
 80039f0:	f04f 0200 	mov.w	r2, #0
 80039f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	kf_rev.A_data[12] = 0;
 80039f8:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <main+0x33c>)
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	kf_rev.A_data[13] = -2.746;
 8003a02:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <main+0x33c>)
 8003a04:	4a3a      	ldr	r2, [pc, #232]	@ (8003af0 <main+0x358>)
 8003a06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	kf_rev.A_data[14] = 0.007303;
 8003a0a:	4b32      	ldr	r3, [pc, #200]	@ (8003ad4 <main+0x33c>)
 8003a0c:	4a39      	ldr	r2, [pc, #228]	@ (8003af4 <main+0x35c>)
 8003a0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	kf_rev.A_data[15] = 0.1354;
 8003a12:	4b30      	ldr	r3, [pc, #192]	@ (8003ad4 <main+0x33c>)
 8003a14:	4a38      	ldr	r2, [pc, #224]	@ (8003af8 <main+0x360>)
 8003a16:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac

	kf_rev.B_data[0] = 1.203e-07;
 8003a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <main+0x33c>)
 8003a1c:	4a37      	ldr	r2, [pc, #220]	@ (8003afc <main+0x364>)
 8003a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	kf_rev.B_data[1] = 0.0002406;
 8003a22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad4 <main+0x33c>)
 8003a24:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <main+0x368>)
 8003a26:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	kf_rev.B_data[2] = 0;
 8003a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <main+0x33c>)
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
	kf_rev.B_data[3] = 1.685;
 8003a34:	4b27      	ldr	r3, [pc, #156]	@ (8003ad4 <main+0x33c>)
 8003a36:	4a33      	ldr	r2, [pc, #204]	@ (8003b04 <main+0x36c>)
 8003a38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc

	// Identity H
	for (int i = 0; i < 2; i++) {
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a40:	e076      	b.n	8003b30 <main+0x398>
		for (int j = 0; j < 4; j++) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a46:	e06d      	b.n	8003b24 <main+0x38c>
			if (i == j) {
 8003a48:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d15b      	bne.n	8003b08 <main+0x370>
				kf_rev.H_data[i * 4 + j] = 1.0f;
 8003a50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a52:	009a      	lsls	r2, r3, #2
 8003a54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a56:	4413      	add	r3, r2
 8003a58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <main+0x33c>)
 8003a5a:	333c      	adds	r3, #60	@ 0x3c
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e05a      	b.n	8003b1e <main+0x386>
 8003a68:	20001bac 	.word	0x20001bac
 8003a6c:	20001a14 	.word	0x20001a14
 8003a70:	20001948 	.word	0x20001948
 8003a74:	200003c4 	.word	0x200003c4
 8003a78:	2000187c 	.word	0x2000187c
 8003a7c:	200003f8 	.word	0x200003f8
 8003a80:	200002e8 	.word	0x200002e8
 8003a84:	200017b0 	.word	0x200017b0
 8003a88:	2000073c 	.word	0x2000073c
 8003a8c:	20001c78 	.word	0x20001c78
 8003a90:	20001ae0 	.word	0x20001ae0
 8003a94:	20000c14 	.word	0x20000c14
 8003a98:	20000ed0 	.word	0x20000ed0
 8003a9c:	3a5c11e4 	.word	0x3a5c11e4
 8003aa0:	b4e160df 	.word	0xb4e160df
 8003aa4:	3757157b 	.word	0x3757157b
 8003aa8:	3f2dd97f 	.word	0x3f2dd97f
 8003aac:	ba5c11e4 	.word	0xba5c11e4
 8003ab0:	3cd20afa 	.word	0x3cd20afa
 8003ab4:	bd2c27a6 	.word	0xbd2c27a6
 8003ab8:	37b03ea2 	.word	0x37b03ea2
 8003abc:	bdc3e426 	.word	0xbdc3e426
 8003ac0:	36866b47 	.word	0x36866b47
 8003ac4:	3c034092 	.word	0x3c034092
 8003ac8:	3e90b0f2 	.word	0x3e90b0f2
 8003acc:	3c23d70a 	.word	0x3c23d70a
 8003ad0:	3f666666 	.word	0x3f666666
 8003ad4:	200011f4 	.word	0x200011f4
 8003ad8:	3a830bb9 	.word	0x3a830bb9
 8003adc:	b6327146 	.word	0xb6327146
 8003ae0:	33ae1e34 	.word	0x33ae1e34
 8003ae4:	3f7fe5c9 	.word	0x3f7fe5c9
 8003ae8:	bbae429e 	.word	0xbbae429e
 8003aec:	392a143b 	.word	0x392a143b
 8003af0:	c02fbe77 	.word	0xc02fbe77
 8003af4:	3bef4e01 	.word	0x3bef4e01
 8003af8:	3e0aa64c 	.word	0x3e0aa64c
 8003afc:	34012bd0 	.word	0x34012bd0
 8003b00:	397c4992 	.word	0x397c4992
 8003b04:	3fd7ae14 	.word	0x3fd7ae14
			} else {
				kf_rev.H_data[i * 4 + j] = 0.0f;
 8003b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b0a:	009a      	lsls	r2, r3, #2
 8003b0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b0e:	4413      	add	r3, r2
 8003b10:	4abf      	ldr	r2, [pc, #764]	@ (8003e10 <main+0x678>)
 8003b12:	333c      	adds	r3, #60	@ 0x3c
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8003b1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b20:	3301      	adds	r3, #1
 8003b22:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	dd8e      	ble.n	8003a48 <main+0x2b0>
	for (int i = 0; i < 2; i++) {
 8003b2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	dd85      	ble.n	8003a42 <main+0x2aa>
			}
		}
	}

	// Revolute
	kf_rev.x_data[0] = 0;
 8003b36:	4bb6      	ldr	r3, [pc, #728]	@ (8003e10 <main+0x678>)
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
	kf_rev.x_data[1] = 0;
 8003b40:	4bb3      	ldr	r3, [pc, #716]	@ (8003e10 <main+0x678>)
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f8c3 2238 	str.w	r2, [r3, #568]	@ 0x238
	kf_rev.x_data[2] = 0;
 8003b4a:	4bb1      	ldr	r3, [pc, #708]	@ (8003e10 <main+0x678>)
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f8c3 223c 	str.w	r2, [r3, #572]	@ 0x23c
	kf_rev.x_data[3] = 0;
 8003b54:	4bae      	ldr	r3, [pc, #696]	@ (8003e10 <main+0x678>)
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240

	Kalman_SetMeasurementNoise(&kf_rev, 0.08f);
 8003b5e:	ed9f 0aad 	vldr	s0, [pc, #692]	@ 8003e14 <main+0x67c>
 8003b62:	48ab      	ldr	r0, [pc, #684]	@ (8003e10 <main+0x678>)
 8003b64:	f7fe fc50 	bl	8002408 <Kalman_SetMeasurementNoise>
	Kalman_SetProcessNoise(&kf_rev, 0.12f);
 8003b68:	ed9f 0aab 	vldr	s0, [pc, #684]	@ 8003e18 <main+0x680>
 8003b6c:	48a8      	ldr	r0, [pc, #672]	@ (8003e10 <main+0x678>)
 8003b6e:	f7fe fc1b 	bl	80023a8 <Kalman_SetProcessNoise>

	Pris_motor = create_prismatic_motor(2.29e-04, 4.82e-04, 8.75e-01, 1.77e-01,
 8003b72:	4caa      	ldr	r4, [pc, #680]	@ (8003e1c <main+0x684>)
 8003b74:	463b      	mov	r3, r7
 8003b76:	ed9f 6b8c 	vldr	d6, [pc, #560]	@ 8003da8 <main+0x610>
 8003b7a:	ed9f 5b8d 	vldr	d5, [pc, #564]	@ 8003db0 <main+0x618>
 8003b7e:	ed9f 4b8e 	vldr	d4, [pc, #568]	@ 8003db8 <main+0x620>
 8003b82:	ed9f 3b8d 	vldr	d3, [pc, #564]	@ 8003db8 <main+0x620>
 8003b86:	ed9f 2b8e 	vldr	d2, [pc, #568]	@ 8003dc0 <main+0x628>
 8003b8a:	ed9f 1b8f 	vldr	d1, [pc, #572]	@ 8003dc8 <main+0x630>
 8003b8e:	ed9f 0b90 	vldr	d0, [pc, #576]	@ 8003dd0 <main+0x638>
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f91a 	bl	8002dcc <create_prismatic_motor>
 8003b98:	4625      	mov	r5, r4
 8003b9a:	463c      	mov	r4, r7
 8003b9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bac:	e885 0003 	stmia.w	r5, {r0, r1}
			1.77e-01, 3.8719, 0.0016);
	Rev_motor = create_motor(1.88E-01, 6.91E-03, 7.36E-01, 1.63E+00,
 8003bb0:	4c9b      	ldr	r4, [pc, #620]	@ (8003e20 <main+0x688>)
 8003bb2:	463b      	mov	r3, r7
 8003bb4:	ed9f 6b88 	vldr	d6, [pc, #544]	@ 8003dd8 <main+0x640>
 8003bb8:	ed9f 5b89 	vldr	d5, [pc, #548]	@ 8003de0 <main+0x648>
 8003bbc:	ed9f 4b8a 	vldr	d4, [pc, #552]	@ 8003de8 <main+0x650>
 8003bc0:	ed9f 3b8b 	vldr	d3, [pc, #556]	@ 8003df0 <main+0x658>
 8003bc4:	ed9f 2b8c 	vldr	d2, [pc, #560]	@ 8003df8 <main+0x660>
 8003bc8:	ed9f 1b8d 	vldr	d1, [pc, #564]	@ 8003e00 <main+0x668>
 8003bcc:	ed9f 0b8e 	vldr	d0, [pc, #568]	@ 8003e08 <main+0x670>
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f93c 	bl	8002e4e <create_motor>
 8003bd6:	4625      	mov	r5, r4
 8003bd8:	463c      	mov	r4, r7
 8003bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bea:	e885 0003 	stmia.w	r5, {r0, r1}
			1.63E+00 * 7.36E-01, 5.13E-01, 3.37E-04);

	// Prismatic Position
	Pris_posi_PID.Kp = 0.3;
 8003bee:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <main+0x68c>)
 8003bf0:	4a8d      	ldr	r2, [pc, #564]	@ (8003e28 <main+0x690>)
 8003bf2:	619a      	str	r2, [r3, #24]
	Pris_posi_PID.Ki = 0.01;
 8003bf4:	4b8b      	ldr	r3, [pc, #556]	@ (8003e24 <main+0x68c>)
 8003bf6:	4a8d      	ldr	r2, [pc, #564]	@ (8003e2c <main+0x694>)
 8003bf8:	61da      	str	r2, [r3, #28]
	Pris_posi_PID.Kd = 0.3;
 8003bfa:	4b8a      	ldr	r3, [pc, #552]	@ (8003e24 <main+0x68c>)
 8003bfc:	4a8a      	ldr	r2, [pc, #552]	@ (8003e28 <main+0x690>)
 8003bfe:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_posi_PID, 0);
 8003c00:	2100      	movs	r1, #0
 8003c02:	4888      	ldr	r0, [pc, #544]	@ (8003e24 <main+0x68c>)
 8003c04:	f00a fe84 	bl	800e910 <arm_pid_init_f32>

	// Prismatic Velocity
	Pris_velo_PID.Kp = 0.08;
 8003c08:	4b89      	ldr	r3, [pc, #548]	@ (8003e30 <main+0x698>)
 8003c0a:	4a8a      	ldr	r2, [pc, #552]	@ (8003e34 <main+0x69c>)
 8003c0c:	619a      	str	r2, [r3, #24]
	Pris_velo_PID.Ki = 0.01;
 8003c0e:	4b88      	ldr	r3, [pc, #544]	@ (8003e30 <main+0x698>)
 8003c10:	4a86      	ldr	r2, [pc, #536]	@ (8003e2c <main+0x694>)
 8003c12:	61da      	str	r2, [r3, #28]
	Pris_velo_PID.Kd = 0;
 8003c14:	4b86      	ldr	r3, [pc, #536]	@ (8003e30 <main+0x698>)
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Pris_velo_PID, 0);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4884      	ldr	r0, [pc, #528]	@ (8003e30 <main+0x698>)
 8003c20:	f00a fe76 	bl	800e910 <arm_pid_init_f32>

	// Revolute Position
	Rev_posi_PID.Kp = 100.0;
 8003c24:	4b84      	ldr	r3, [pc, #528]	@ (8003e38 <main+0x6a0>)
 8003c26:	4a85      	ldr	r2, [pc, #532]	@ (8003e3c <main+0x6a4>)
 8003c28:	619a      	str	r2, [r3, #24]
	Rev_posi_PID.Ki = 40.0;
 8003c2a:	4b83      	ldr	r3, [pc, #524]	@ (8003e38 <main+0x6a0>)
 8003c2c:	4a84      	ldr	r2, [pc, #528]	@ (8003e40 <main+0x6a8>)
 8003c2e:	61da      	str	r2, [r3, #28]
	Rev_posi_PID.Kd = 4.0;
 8003c30:	4b81      	ldr	r3, [pc, #516]	@ (8003e38 <main+0x6a0>)
 8003c32:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003c36:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_posi_PID, 0);
 8003c38:	2100      	movs	r1, #0
 8003c3a:	487f      	ldr	r0, [pc, #508]	@ (8003e38 <main+0x6a0>)
 8003c3c:	f00a fe68 	bl	800e910 <arm_pid_init_f32>

	// Revolute Velocity
	Rev_velo_PID.Kp = 3.0;
 8003c40:	4b80      	ldr	r3, [pc, #512]	@ (8003e44 <main+0x6ac>)
 8003c42:	4a81      	ldr	r2, [pc, #516]	@ (8003e48 <main+0x6b0>)
 8003c44:	619a      	str	r2, [r3, #24]
	Rev_velo_PID.Ki = 0.1;
 8003c46:	4b7f      	ldr	r3, [pc, #508]	@ (8003e44 <main+0x6ac>)
 8003c48:	4a80      	ldr	r2, [pc, #512]	@ (8003e4c <main+0x6b4>)
 8003c4a:	61da      	str	r2, [r3, #28]
	Rev_velo_PID.Kd = 0;
 8003c4c:	4b7d      	ldr	r3, [pc, #500]	@ (8003e44 <main+0x6ac>)
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	621a      	str	r2, [r3, #32]
	arm_pid_init_f32(&Rev_velo_PID, 0);
 8003c54:	2100      	movs	r1, #0
 8003c56:	487b      	ldr	r0, [pc, #492]	@ (8003e44 <main+0x6ac>)
 8003c58:	f00a fe5a 	bl	800e910 <arm_pid_init_f32>

	Backlash_Init(&Rev_backlash, 0.0349066);
 8003c5c:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 8003e50 <main+0x6b8>
 8003c60:	487c      	ldr	r0, [pc, #496]	@ (8003e54 <main+0x6bc>)
 8003c62:	f7fd fa78 	bl	8001156 <Backlash_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint64_t currentTick = HAL_GetTick();
 8003c66:	f002 fafb 	bl	8006260 <HAL_GetTick>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	469a      	mov	sl, r3
 8003c70:	4693      	mov	fp, r2
 8003c72:	e9c7 ab16 	strd	sl, fp, [r7, #88]	@ 0x58
		float dt = (currentTick - lastTick) / 1000.0f;
 8003c76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003c7a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003c7e:	ebb0 0802 	subs.w	r8, r0, r2
 8003c82:	eb61 0903 	sbc.w	r9, r1, r3
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fd f869 	bl	8000d60 <__aeabi_ul2f>
 8003c8e:	ee06 0a90 	vmov	s13, r0
 8003c92:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8003e58 <main+0x6c0>
 8003c96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		Modbus_Protocal_Worker();
 8003c9e:	f7fe fe21 	bl	80028e4 <Modbus_Protocal_Worker>
		modbus_heartbeat(&hmodbus);
 8003ca2:	486e      	ldr	r0, [pc, #440]	@ (8003e5c <main+0x6c4>)
 8003ca4:	f7fd fad7 	bl	8001256 <modbus_heartbeat>
		Base_Sysytem_status = modbus_Base_System_Status(&hmodbus);
 8003ca8:	486c      	ldr	r0, [pc, #432]	@ (8003e5c <main+0x6c4>)
 8003caa:	f7fd fae3 	bl	8001274 <modbus_Base_System_Status>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8003e60 <main+0x6c8>)
 8003cb4:	701a      	strb	r2, [r3, #0]

		t_global = HAL_GetTick() / 1000.0f;
 8003cb6:	f002 fad3 	bl	8006260 <HAL_GetTick>
 8003cba:	ee07 0a90 	vmov	s15, r0
 8003cbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cc2:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8003e58 <main+0x6c0>
 8003cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003cca:	4b66      	ldr	r3, [pc, #408]	@ (8003e64 <main+0x6cc>)
 8003ccc:	edc3 7a00 	vstr	s15, [r3]

		if (dt >= 0.001f) {
 8003cd0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003cd4:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003e68 <main+0x6d0>
 8003cd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce0:	f2c0 8686 	blt.w	80049f0 <main+0x1258>

			HAL_ADC_Start(&hadc1);
 8003ce4:	4861      	ldr	r0, [pc, #388]	@ (8003e6c <main+0x6d4>)
 8003ce6:	f002 fe8f 	bl	8006a08 <HAL_ADC_Start>
			HAL_ADC_Start(&hadc2);
 8003cea:	4861      	ldr	r0, [pc, #388]	@ (8003e70 <main+0x6d8>)
 8003cec:	f002 fe8c 	bl	8006a08 <HAL_ADC_Start>
			adc_1 = HAL_ADC_GetValue(&hadc1);
 8003cf0:	485e      	ldr	r0, [pc, #376]	@ (8003e6c <main+0x6d4>)
 8003cf2:	f002 ff6d 	bl	8006bd0 <HAL_ADC_GetValue>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8003e74 <main+0x6dc>)
 8003cfc:	801a      	strh	r2, [r3, #0]
			adc_2 = HAL_ADC_GetValue(&hadc2);
 8003cfe:	485c      	ldr	r0, [pc, #368]	@ (8003e70 <main+0x6d8>)
 8003d00:	f002 ff66 	bl	8006bd0 <HAL_ADC_GetValue>
 8003d04:	4603      	mov	r3, r0
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	4b5b      	ldr	r3, [pc, #364]	@ (8003e78 <main+0x6e0>)
 8003d0a:	801a      	strh	r2, [r3, #0]

			Encoder_Update(&encoder1, dt);
 8003d0c:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8003d10:	485a      	ldr	r0, [pc, #360]	@ (8003e7c <main+0x6e4>)
 8003d12:	f7fe f8b5 	bl	8001e80 <Encoder_Update>
			Encoder_Update(&encoder2, dt);
 8003d16:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 8003d1a:	4859      	ldr	r0, [pc, #356]	@ (8003e80 <main+0x6e8>)
 8003d1c:	f7fe f8b0 	bl	8001e80 <Encoder_Update>
			QEIReadRaw3 = __HAL_TIM_GET_COUNTER(&htim3);
 8003d20:	4b58      	ldr	r3, [pc, #352]	@ (8003e84 <main+0x6ec>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d26:	4a58      	ldr	r2, [pc, #352]	@ (8003e88 <main+0x6f0>)
 8003d28:	6013      	str	r3, [r2, #0]
			QEIReadRaw4 = __HAL_TIM_GET_COUNTER(&htim4);
 8003d2a:	4b58      	ldr	r3, [pc, #352]	@ (8003e8c <main+0x6f4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	4a57      	ldr	r2, [pc, #348]	@ (8003e90 <main+0x6f8>)
 8003d32:	6013      	str	r3, [r2, #0]

			p1 = Encoder_GetPosition(&encoder1);
 8003d34:	4851      	ldr	r0, [pc, #324]	@ (8003e7c <main+0x6e4>)
 8003d36:	f7fe f959 	bl	8001fec <Encoder_GetPosition>
 8003d3a:	eef0 7a40 	vmov.f32	s15, s0
 8003d3e:	4b55      	ldr	r3, [pc, #340]	@ (8003e94 <main+0x6fc>)
 8003d40:	edc3 7a00 	vstr	s15, [r3]
			v1 = Encoder_GetVelocity(&encoder1);
 8003d44:	484d      	ldr	r0, [pc, #308]	@ (8003e7c <main+0x6e4>)
 8003d46:	f7fe f960 	bl	800200a <Encoder_GetVelocity>
 8003d4a:	eef0 7a40 	vmov.f32	s15, s0
 8003d4e:	4b52      	ldr	r3, [pc, #328]	@ (8003e98 <main+0x700>)
 8003d50:	edc3 7a00 	vstr	s15, [r3]
			a1 = Encoder_GetAcceleration(&encoder1);
 8003d54:	4849      	ldr	r0, [pc, #292]	@ (8003e7c <main+0x6e4>)
 8003d56:	f7fe f967 	bl	8002028 <Encoder_GetAcceleration>
 8003d5a:	eef0 7a40 	vmov.f32	s15, s0
 8003d5e:	4b4f      	ldr	r3, [pc, #316]	@ (8003e9c <main+0x704>)
 8003d60:	edc3 7a00 	vstr	s15, [r3]

			p2 = Encoder_GetPosition(&encoder2);
 8003d64:	4846      	ldr	r0, [pc, #280]	@ (8003e80 <main+0x6e8>)
 8003d66:	f7fe f941 	bl	8001fec <Encoder_GetPosition>
 8003d6a:	eef0 7a40 	vmov.f32	s15, s0
 8003d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea0 <main+0x708>)
 8003d70:	edc3 7a00 	vstr	s15, [r3]
			v2 = Encoder_GetVelocity(&encoder2);
 8003d74:	4842      	ldr	r0, [pc, #264]	@ (8003e80 <main+0x6e8>)
 8003d76:	f7fe f948 	bl	800200a <Encoder_GetVelocity>
 8003d7a:	eef0 7a40 	vmov.f32	s15, s0
 8003d7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ea4 <main+0x70c>)
 8003d80:	edc3 7a00 	vstr	s15, [r3]
			a2 = Encoder_GetAcceleration(&encoder2);
 8003d84:	483e      	ldr	r0, [pc, #248]	@ (8003e80 <main+0x6e8>)
 8003d86:	f7fe f94f 	bl	8002028 <Encoder_GetAcceleration>
 8003d8a:	eef0 7a40 	vmov.f32	s15, s0
 8003d8e:	4b46      	ldr	r3, [pc, #280]	@ (8003ea8 <main+0x710>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]

			if (Base_Sysytem_status == Base_Home) {
 8003d94:	4b32      	ldr	r3, [pc, #200]	@ (8003e60 <main+0x6c8>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	f040 8087 	bne.w	8003eac <main+0x714>

				R_Theta_moving_Status(&hmodbus, Home);
 8003d9e:	2101      	movs	r1, #1
 8003da0:	482e      	ldr	r0, [pc, #184]	@ (8003e5c <main+0x6c4>)
 8003da2:	f7fd fa77 	bl	8001294 <R_Theta_moving_Status>
 8003da6:	e3a2      	b.n	80044ee <main+0xd56>
 8003da8:	eb1c432d 	.word	0xeb1c432d
 8003dac:	3f5a36e2 	.word	0x3f5a36e2
 8003db0:	b50b0f28 	.word	0xb50b0f28
 8003db4:	400ef9a6 	.word	0x400ef9a6
 8003db8:	9db22d0e 	.word	0x9db22d0e
 8003dbc:	3fc6a7ef 	.word	0x3fc6a7ef
 8003dc0:	00000000 	.word	0x00000000
 8003dc4:	3fec0000 	.word	0x3fec0000
 8003dc8:	3c968944 	.word	0x3c968944
 8003dcc:	3f3f969e 	.word	0x3f3f969e
 8003dd0:	05857aff 	.word	0x05857aff
 8003dd4:	3f2e03f7 	.word	0x3f2e03f7
 8003dd8:	fa8f7db7 	.word	0xfa8f7db7
 8003ddc:	3f3615eb 	.word	0x3f3615eb
 8003de0:	f9db22d1 	.word	0xf9db22d1
 8003de4:	3fe06a7e 	.word	0x3fe06a7e
 8003de8:	a7daa4fc 	.word	0xa7daa4fc
 8003dec:	3ff331e3 	.word	0x3ff331e3
 8003df0:	e147ae14 	.word	0xe147ae14
 8003df4:	3ffa147a 	.word	0x3ffa147a
 8003df8:	df3b645a 	.word	0xdf3b645a
 8003dfc:	3fe78d4f 	.word	0x3fe78d4f
 8003e00:	003eea21 	.word	0x003eea21
 8003e04:	3f7c4da9 	.word	0x3f7c4da9
 8003e08:	4dd2f1aa 	.word	0x4dd2f1aa
 8003e0c:	3fc81062 	.word	0x3fc81062
 8003e10:	200011f4 	.word	0x200011f4
 8003e14:	3da3d70a 	.word	0x3da3d70a
 8003e18:	3df5c28f 	.word	0x3df5c28f
 8003e1c:	20001518 	.word	0x20001518
 8003e20:	20001550 	.word	0x20001550
 8003e24:	20000dcc 	.word	0x20000dcc
 8003e28:	3e99999a 	.word	0x3e99999a
 8003e2c:	3c23d70a 	.word	0x3c23d70a
 8003e30:	20000e0c 	.word	0x20000e0c
 8003e34:	3da3d70a 	.word	0x3da3d70a
 8003e38:	20000e4c 	.word	0x20000e4c
 8003e3c:	42c80000 	.word	0x42c80000
 8003e40:	42200000 	.word	0x42200000
 8003e44:	20000e88 	.word	0x20000e88
 8003e48:	40400000 	.word	0x40400000
 8003e4c:	3dcccccd 	.word	0x3dcccccd
 8003e50:	3d0efa39 	.word	0x3d0efa39
 8003e54:	20000dc0 	.word	0x20000dc0
 8003e58:	447a0000 	.word	0x447a0000
 8003e5c:	2000073c 	.word	0x2000073c
 8003e60:	20000da4 	.word	0x20000da4
 8003e64:	20000718 	.word	0x20000718
 8003e68:	3a83126f 	.word	0x3a83126f
 8003e6c:	200002e8 	.word	0x200002e8
 8003e70:	20000354 	.word	0x20000354
 8003e74:	20000738 	.word	0x20000738
 8003e78:	2000073a 	.word	0x2000073a
 8003e7c:	200003c4 	.word	0x200003c4
 8003e80:	200003f8 	.word	0x200003f8
 8003e84:	2000187c 	.word	0x2000187c
 8003e88:	2000042c 	.word	0x2000042c
 8003e8c:	20001948 	.word	0x20001948
 8003e90:	20000430 	.word	0x20000430
 8003e94:	2000071c 	.word	0x2000071c
 8003e98:	20000720 	.word	0x20000720
 8003e9c:	20000724 	.word	0x20000724
 8003ea0:	20000728 	.word	0x20000728
 8003ea4:	2000072c 	.word	0x2000072c
 8003ea8:	20000730 	.word	0x20000730

			} else if (Base_Sysytem_status == Base_Run_Jog_mode) {
 8003eac:	4b86      	ldr	r3, [pc, #536]	@ (80040c8 <main+0x930>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	f040 8265 	bne.w	8004380 <main+0xbe8>

				R_Theta_moving_Status(&hmodbus, Run_Jog_mode);
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4884      	ldr	r0, [pc, #528]	@ (80040cc <main+0x934>)
 8003eba:	f7fd f9eb 	bl	8001294 <R_Theta_moving_Status>

				Circle = PS2_ButtonCircle();
 8003ebe:	f7fe f931 	bl	8002124 <PS2_ButtonCircle>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b82      	ldr	r3, [pc, #520]	@ (80040d0 <main+0x938>)
 8003ec8:	601a      	str	r2, [r3, #0]
				Square = PS2_ButtonSquare();
 8003eca:	f7fe f93d 	bl	8002148 <PS2_ButtonSquare>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b80      	ldr	r3, [pc, #512]	@ (80040d4 <main+0x93c>)
 8003ed4:	601a      	str	r2, [r3, #0]
				Triangle = PS2_ButtonTriangle();
 8003ed6:	f7fe f947 	bl	8002168 <PS2_ButtonTriangle>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	4b7e      	ldr	r3, [pc, #504]	@ (80040d8 <main+0x940>)
 8003ee0:	601a      	str	r2, [r3, #0]
				Cross = PS2_ButtonCross();
 8003ee2:	f7fe f953 	bl	800218c <PS2_ButtonCross>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b7c      	ldr	r3, [pc, #496]	@ (80040dc <main+0x944>)
 8003eec:	601a      	str	r2, [r3, #0]
				R1 = PS2_ButtonR1();
 8003eee:	f7fe f95f 	bl	80021b0 <PS2_ButtonR1>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4b7a      	ldr	r3, [pc, #488]	@ (80040e0 <main+0x948>)
 8003ef8:	601a      	str	r2, [r3, #0]
				R2 = PS2_ButtonR2();
 8003efa:	f7fe f96b 	bl	80021d4 <PS2_ButtonR2>
 8003efe:	4603      	mov	r3, r0
 8003f00:	461a      	mov	r2, r3
 8003f02:	4b78      	ldr	r3, [pc, #480]	@ (80040e4 <main+0x94c>)
 8003f04:	601a      	str	r2, [r3, #0]
				Select = PS2_ButtonSelect();
 8003f06:	f7fe f977 	bl	80021f8 <PS2_ButtonSelect>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4b76      	ldr	r3, [pc, #472]	@ (80040e8 <main+0x950>)
 8003f10:	601a      	str	r2, [r3, #0]
				Start = PS2_ButtonStart();
 8003f12:	f7fe f983 	bl	800221c <PS2_ButtonStart>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b74      	ldr	r3, [pc, #464]	@ (80040ec <main+0x954>)
 8003f1c:	601a      	str	r2, [r3, #0]
				L2 = PS2_ButtonL2();
 8003f1e:	f7fe f98f 	bl	8002240 <PS2_ButtonL2>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	4b72      	ldr	r3, [pc, #456]	@ (80040f0 <main+0x958>)
 8003f28:	601a      	str	r2, [r3, #0]
//				} else if (PS2_ButtonR2()) {
//					// Servo/Pen Move Down
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
//				}

				uint8_t selectPressed = PS2_ButtonL2();
 8003f2a:	f7fe f989 	bl	8002240 <PS2_ButtonL2>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
				static uint8_t prevSelect = 0;
				if (selectPressed && !prevSelect) {
 8003f34:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d026      	beq.n	8003f8a <main+0x7f2>
 8003f3c:	4b6d      	ldr	r3, [pc, #436]	@ (80040f4 <main+0x95c>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d122      	bne.n	8003f8a <main+0x7f2>
					if (count < 11) {
 8003f44:	4b6c      	ldr	r3, [pc, #432]	@ (80040f8 <main+0x960>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2b0a      	cmp	r3, #10
 8003f4a:	dc1e      	bgt.n	8003f8a <main+0x7f2>
//						PrismaticTenPoints[count] = roundf(Encoder_GetPosition_mm(&encoder1) * 10.0f);
//						RevoluteTenPoints[count] = roundf(Encoder_GetDegree(&encoder2) * 10.0f);
						PrismaticTenPoints[count] = count;
 8003f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80040f8 <main+0x960>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b69      	ldr	r3, [pc, #420]	@ (80040f8 <main+0x960>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	ee07 2a90 	vmov	s15, r2
 8003f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f5c:	4a67      	ldr	r2, [pc, #412]	@ (80040fc <main+0x964>)
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	edc3 7a00 	vstr	s15, [r3]
						RevoluteTenPoints[count] = count;
 8003f66:	4b64      	ldr	r3, [pc, #400]	@ (80040f8 <main+0x960>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b63      	ldr	r3, [pc, #396]	@ (80040f8 <main+0x960>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	ee07 2a90 	vmov	s15, r2
 8003f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f76:	4a62      	ldr	r2, [pc, #392]	@ (8004100 <main+0x968>)
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	edc3 7a00 	vstr	s15, [r3]
						count += 1;
 8003f80:	4b5d      	ldr	r3, [pc, #372]	@ (80040f8 <main+0x960>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	4a5c      	ldr	r2, [pc, #368]	@ (80040f8 <main+0x960>)
 8003f88:	6013      	str	r3, [r2, #0]
					}
				}
				prevSelect = selectPressed;
 8003f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80040f4 <main+0x95c>)
 8003f8c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003f90:	7013      	strb	r3, [r2, #0]

				if (PS2_ButtonStart()) { // Auto Mode
 8003f92:	f7fe f943 	bl	800221c <PS2_ButtonStart>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 811c 	beq.w	80041d6 <main+0xa3e>
					for (int i = 0; i < 10; i++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fa2:	e111      	b.n	80041c8 <main+0xa30>
						float start_pris = PrismaticTenPoints[i];
 8003fa4:	4a55      	ldr	r2, [pc, #340]	@ (80040fc <main+0x964>)
 8003fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
						float end_pris = PrismaticTenPoints[i + 1];
 8003fb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	4a51      	ldr	r2, [pc, #324]	@ (80040fc <main+0x964>)
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
						float start_rev = RevoluteTenPoints[i];
 8003fbe:	4a50      	ldr	r2, [pc, #320]	@ (8004100 <main+0x968>)
 8003fc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	647b      	str	r3, [r7, #68]	@ 0x44
						float end_rev = RevoluteTenPoints[i + 1];
 8003fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fcc:	3301      	adds	r3, #1
 8003fce:	4a4c      	ldr	r2, [pc, #304]	@ (8004100 <main+0x968>)
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	643b      	str	r3, [r7, #64]	@ 0x40
						// กำหนดเวลาเริ่มต้นของ segment นี้
						float t_start_pris = (i == 0) ? t_global : Prismatic[i - 1].t_start +
 8003fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d021      	beq.n	8004022 <main+0x88a>
 8003fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe0:	1e5a      	subs	r2, r3, #1
 8003fe2:	4948      	ldr	r1, [pc, #288]	@ (8004104 <main+0x96c>)
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	3320      	adds	r3, #32
 8003ff0:	ed93 7a00 	vldr	s14, [r3]
								Prismatic[i - 1].t_total + delay_pris[i - 1];
 8003ff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff6:	1e5a      	subs	r2, r3, #1
 8003ff8:	4942      	ldr	r1, [pc, #264]	@ (8004104 <main+0x96c>)
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	331c      	adds	r3, #28
 8004006:	edd3 7a00 	vldr	s15, [r3]
						float t_start_pris = (i == 0) ? t_global : Prismatic[i - 1].t_start +
 800400a:	ee37 7a27 	vadd.f32	s14, s14, s15
								Prismatic[i - 1].t_total + delay_pris[i - 1];
 800400e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004010:	3b01      	subs	r3, #1
 8004012:	4a3d      	ldr	r2, [pc, #244]	@ (8004108 <main+0x970>)
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	edd3 7a00 	vldr	s15, [r3]
						float t_start_pris = (i == 0) ? t_global : Prismatic[i - 1].t_start +
 800401c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004020:	e002      	b.n	8004028 <main+0x890>
 8004022:	4b3a      	ldr	r3, [pc, #232]	@ (800410c <main+0x974>)
 8004024:	edd3 7a00 	vldr	s15, [r3]
 8004028:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
						InitTrajectorySegment(&Prismatic[i], start_pris, end_pris, v_max_pris, a_max_pris, t_start_pris);
 800402c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800402e:	4613      	mov	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4413      	add	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4a33      	ldr	r2, [pc, #204]	@ (8004104 <main+0x96c>)
 8004038:	4413      	add	r3, r2
 800403a:	ed97 2a0f 	vldr	s4, [r7, #60]	@ 0x3c
 800403e:	eddf 1a34 	vldr	s3, [pc, #208]	@ 8004110 <main+0x978>
 8004042:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8004114 <main+0x97c>
 8004046:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 800404a:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe ff3e 	bl	8002ed0 <InitTrajectorySegment>
						delay_pris[i] = 5.5f - Prismatic[i].t_total;
 8004054:	492b      	ldr	r1, [pc, #172]	@ (8004104 <main+0x96c>)
 8004056:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	331c      	adds	r3, #28
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 800406c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004070:	4a25      	ldr	r2, [pc, #148]	@ (8004108 <main+0x970>)
 8004072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	edc3 7a00 	vstr	s15, [r3]
						float t_start_rev = (i == 0) ? t_global : Revolute[i - 1].t_start +
 800407c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d04e      	beq.n	8004120 <main+0x988>
 8004082:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004084:	1e5a      	subs	r2, r3, #1
 8004086:	4924      	ldr	r1, [pc, #144]	@ (8004118 <main+0x980>)
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	3320      	adds	r3, #32
 8004094:	ed93 7a00 	vldr	s14, [r3]
								Revolute[i - 1].t_total + delay_rev[i - 1];
 8004098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800409a:	1e5a      	subs	r2, r3, #1
 800409c:	491e      	ldr	r1, [pc, #120]	@ (8004118 <main+0x980>)
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	331c      	adds	r3, #28
 80040aa:	edd3 7a00 	vldr	s15, [r3]
						float t_start_rev = (i == 0) ? t_global : Revolute[i - 1].t_start +
 80040ae:	ee37 7a27 	vadd.f32	s14, s14, s15
								Revolute[i - 1].t_total + delay_rev[i - 1];
 80040b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b4:	3b01      	subs	r3, #1
 80040b6:	4a19      	ldr	r2, [pc, #100]	@ (800411c <main+0x984>)
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	edd3 7a00 	vldr	s15, [r3]
						float t_start_rev = (i == 0) ? t_global : Revolute[i - 1].t_start +
 80040c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c4:	e02f      	b.n	8004126 <main+0x98e>
 80040c6:	bf00      	nop
 80040c8:	20000da4 	.word	0x20000da4
 80040cc:	2000073c 	.word	0x2000073c
 80040d0:	200015b4 	.word	0x200015b4
 80040d4:	200015b8 	.word	0x200015b8
 80040d8:	200015bc 	.word	0x200015bc
 80040dc:	200015c0 	.word	0x200015c0
 80040e0:	200015c4 	.word	0x200015c4
 80040e4:	200015c8 	.word	0x200015c8
 80040e8:	200015cc 	.word	0x200015cc
 80040ec:	200015d0 	.word	0x200015d0
 80040f0:	200015d4 	.word	0x200015d4
 80040f4:	2000167c 	.word	0x2000167c
 80040f8:	20000260 	.word	0x20000260
 80040fc:	20000208 	.word	0x20000208
 8004100:	20000234 	.word	0x20000234
 8004104:	20000448 	.word	0x20000448
 8004108:	200015d8 	.word	0x200015d8
 800410c:	20000718 	.word	0x20000718
 8004110:	437a0000 	.word	0x437a0000
 8004114:	43fa0000 	.word	0x43fa0000
 8004118:	200005b0 	.word	0x200005b0
 800411c:	20001600 	.word	0x20001600
 8004120:	4ba7      	ldr	r3, [pc, #668]	@ (80043c0 <main+0xc28>)
 8004122:	edd3 7a00 	vldr	s15, [r3]
 8004126:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
						InitTrajectorySegment(&Revolute[i], start_rev, end_rev, v_max_rev, a_max_rev, t_start_rev);
 800412a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4aa3      	ldr	r2, [pc, #652]	@ (80043c4 <main+0xc2c>)
 8004136:	4413      	add	r3, r2
 8004138:	ed97 2a0e 	vldr	s4, [r7, #56]	@ 0x38
 800413c:	eddf 1aa2 	vldr	s3, [pc, #648]	@ 80043c8 <main+0xc30>
 8004140:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004144:	edd7 0a10 	vldr	s1, [r7, #64]	@ 0x40
 8004148:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe febf 	bl	8002ed0 <InitTrajectorySegment>
						delay_rev[i] = 5.5f - Revolute[i].t_total;
 8004152:	499c      	ldr	r1, [pc, #624]	@ (80043c4 <main+0xc2c>)
 8004154:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	331c      	adds	r3, #28
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 800416a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800416e:	4a97      	ldr	r2, [pc, #604]	@ (80043cc <main+0xc34>)
 8004170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	edc3 7a00 	vstr	s15, [r3]
						// ป้องกันกรณีเคลื่อนที่ช้ามากจน delay < 0
						if (delay_pris[i] < 0.0f) {
 800417a:	4a95      	ldr	r2, [pc, #596]	@ (80043d0 <main+0xc38>)
 800417c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	edd3 7a00 	vldr	s15, [r3]
 8004186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800418a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418e:	d506      	bpl.n	800419e <main+0xa06>
							delay_pris[i] = 0.0f;
 8004190:	4a8f      	ldr	r2, [pc, #572]	@ (80043d0 <main+0xc38>)
 8004192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
						}
						if (delay_rev[i] < 0.0f) {
 800419e:	4a8b      	ldr	r2, [pc, #556]	@ (80043cc <main+0xc34>)
 80041a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	edd3 7a00 	vldr	s15, [r3]
 80041aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b2:	d506      	bpl.n	80041c2 <main+0xa2a>
							delay_rev[i] = 0.0f;
 80041b4:	4a85      	ldr	r2, [pc, #532]	@ (80043cc <main+0xc34>)
 80041b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 10; i++) {
 80041c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041c4:	3301      	adds	r3, #1
 80041c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	f77f aeea 	ble.w	8003fa4 <main+0x80c>
						}
					}
					current_segment = 0;
 80041d0:	4b80      	ldr	r3, [pc, #512]	@ (80043d4 <main+0xc3c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	601a      	str	r2, [r3, #0]
				}

				if (current_segment < 10) {
 80041d6:	4b7f      	ldr	r3, [pc, #508]	@ (80043d4 <main+0xc3c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b09      	cmp	r3, #9
 80041dc:	dc54      	bgt.n	8004288 <main+0xaf0>
					pos_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
 80041de:	4b7d      	ldr	r3, [pc, #500]	@ (80043d4 <main+0xc3c>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4613      	mov	r3, r2
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4a7b      	ldr	r2, [pc, #492]	@ (80043d8 <main+0xc40>)
 80041ec:	4413      	add	r3, r2
 80041ee:	4a74      	ldr	r2, [pc, #464]	@ (80043c0 <main+0xc28>)
 80041f0:	edd2 7a00 	vldr	s15, [r2]
 80041f4:	eeb0 0a67 	vmov.f32	s0, s15
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe ff1f 	bl	800303c <GetTrajectoryPosition>
 80041fe:	eef0 7a40 	vmov.f32	s15, s0
 8004202:	4b76      	ldr	r3, [pc, #472]	@ (80043dc <main+0xc44>)
 8004204:	edc3 7a00 	vstr	s15, [r3]
					vel_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global);
 8004208:	4b72      	ldr	r3, [pc, #456]	@ (80043d4 <main+0xc3c>)
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4413      	add	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4a70      	ldr	r2, [pc, #448]	@ (80043d8 <main+0xc40>)
 8004216:	4413      	add	r3, r2
 8004218:	4a69      	ldr	r2, [pc, #420]	@ (80043c0 <main+0xc28>)
 800421a:	edd2 7a00 	vldr	s15, [r2]
 800421e:	eeb0 0a67 	vmov.f32	s0, s15
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe ffe0 	bl	80031e8 <GetTrajectoryVelocity>
 8004228:	eef0 7a40 	vmov.f32	s15, s0
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <main+0xc48>)
 800422e:	edc3 7a00 	vstr	s15, [r3]
					pos_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global);
 8004232:	4b68      	ldr	r3, [pc, #416]	@ (80043d4 <main+0xc3c>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4a61      	ldr	r2, [pc, #388]	@ (80043c4 <main+0xc2c>)
 8004240:	4413      	add	r3, r2
 8004242:	4a5f      	ldr	r2, [pc, #380]	@ (80043c0 <main+0xc28>)
 8004244:	edd2 7a00 	vldr	s15, [r2]
 8004248:	eeb0 0a67 	vmov.f32	s0, s15
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe fef5 	bl	800303c <GetTrajectoryPosition>
 8004252:	eef0 7a40 	vmov.f32	s15, s0
 8004256:	4b63      	ldr	r3, [pc, #396]	@ (80043e4 <main+0xc4c>)
 8004258:	edc3 7a00 	vstr	s15, [r3]
					vel_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global);
 800425c:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <main+0xc3c>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4613      	mov	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4a56      	ldr	r2, [pc, #344]	@ (80043c4 <main+0xc2c>)
 800426a:	4413      	add	r3, r2
 800426c:	4a54      	ldr	r2, [pc, #336]	@ (80043c0 <main+0xc28>)
 800426e:	edd2 7a00 	vldr	s15, [r2]
 8004272:	eeb0 0a67 	vmov.f32	s0, s15
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe ffb6 	bl	80031e8 <GetTrajectoryVelocity>
 800427c:	eef0 7a40 	vmov.f32	s15, s0
 8004280:	4b59      	ldr	r3, [pc, #356]	@ (80043e8 <main+0xc50>)
 8004282:	edc3 7a00 	vstr	s15, [r3]
 8004286:	e011      	b.n	80042ac <main+0xb14>
				} else {
					pos_pris = Prismatic[9].end_pos;
 8004288:	4b53      	ldr	r3, [pc, #332]	@ (80043d8 <main+0xc40>)
 800428a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800428e:	4a53      	ldr	r2, [pc, #332]	@ (80043dc <main+0xc44>)
 8004290:	6013      	str	r3, [r2, #0]
					vel_pris = 0.0f;
 8004292:	4b53      	ldr	r3, [pc, #332]	@ (80043e0 <main+0xc48>)
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
					pos_rev = Revolute[9].end_pos;
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <main+0xc2c>)
 800429c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80042a0:	4a50      	ldr	r2, [pc, #320]	@ (80043e4 <main+0xc4c>)
 80042a2:	6013      	str	r3, [r2, #0]
					vel_rev = 0.0f;
 80042a4:	4b50      	ldr	r3, [pc, #320]	@ (80043e8 <main+0xc50>)
 80042a6:	f04f 0200 	mov.w	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
				}

				if (t_global > Prismatic[current_segment].t_start + Prismatic[current_segment].t_total) {
 80042ac:	4b49      	ldr	r3, [pc, #292]	@ (80043d4 <main+0xc3c>)
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	4949      	ldr	r1, [pc, #292]	@ (80043d8 <main+0xc40>)
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	3320      	adds	r3, #32
 80042be:	ed93 7a00 	vldr	s14, [r3]
 80042c2:	4b44      	ldr	r3, [pc, #272]	@ (80043d4 <main+0xc3c>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4944      	ldr	r1, [pc, #272]	@ (80043d8 <main+0xc40>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	331c      	adds	r3, #28
 80042d4:	edd3 7a00 	vldr	s15, [r3]
 80042d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042dc:	4b38      	ldr	r3, [pc, #224]	@ (80043c0 <main+0xc28>)
 80042de:	edd3 7a00 	vldr	s15, [r3]
 80042e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d508      	bpl.n	80042fe <main+0xb66>
					if (current_segment < 9) {
 80042ec:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <main+0xc3c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	dc04      	bgt.n	80042fe <main+0xb66>
						current_segment++;
 80042f4:	4b37      	ldr	r3, [pc, #220]	@ (80043d4 <main+0xc3c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	4a36      	ldr	r2, [pc, #216]	@ (80043d4 <main+0xc3c>)
 80042fc:	6013      	str	r3, [r2, #0]
//				{
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
//					modbus_servo_Status(&hmodbus, Limit_Down);
//				}

				if (count == 10) {  /// Set_Target 10 points
 80042fe:	4b3b      	ldr	r3, [pc, #236]	@ (80043ec <main+0xc54>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2b0a      	cmp	r3, #10
 8004304:	f040 80f3 	bne.w	80044ee <main+0xd56>
					Coordinate_Robot_to_Base(&Goal_point[Num_point], PrismaticTenPoints[Num_point + 1],
 8004308:	4b39      	ldr	r3, [pc, #228]	@ (80043f0 <main+0xc58>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4a39      	ldr	r2, [pc, #228]	@ (80043f4 <main+0xc5c>)
 8004310:	441a      	add	r2, r3
 8004312:	4b37      	ldr	r3, [pc, #220]	@ (80043f0 <main+0xc58>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	4937      	ldr	r1, [pc, #220]	@ (80043f8 <main+0xc60>)
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	edd3 7a00 	vldr	s15, [r3]
							RevoluteTenPoints[Num_point + 1]);
 8004322:	4b33      	ldr	r3, [pc, #204]	@ (80043f0 <main+0xc58>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	3301      	adds	r3, #1
					Coordinate_Robot_to_Base(&Goal_point[Num_point], PrismaticTenPoints[Num_point + 1],
 8004328:	4934      	ldr	r1, [pc, #208]	@ (80043fc <main+0xc64>)
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	ed93 7a00 	vldr	s14, [r3]
 8004332:	eef0 0a47 	vmov.f32	s1, s14
 8004336:	eeb0 0a67 	vmov.f32	s0, s15
 800433a:	4610      	mov	r0, r2
 800433c:	f7fd fb28 	bl	8001990 <Coordinate_Robot_to_Base>
					set_Target_Position_ten_points(&hmodbus, Goal_point[Num_point].r_goal_position,
 8004340:	4b2b      	ldr	r3, [pc, #172]	@ (80043f0 <main+0xc58>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	4a2b      	ldr	r2, [pc, #172]	@ (80043f4 <main+0xc5c>)
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	edd3 7a00 	vldr	s15, [r3]
 800434e:	4b28      	ldr	r3, [pc, #160]	@ (80043f0 <main+0xc58>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	4a28      	ldr	r2, [pc, #160]	@ (80043f4 <main+0xc5c>)
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	3304      	adds	r3, #4
 800435a:	ed93 7a00 	vldr	s14, [r3]
 800435e:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <main+0xc58>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	4619      	mov	r1, r3
 8004364:	eef0 0a47 	vmov.f32	s1, s14
 8004368:	eeb0 0a67 	vmov.f32	s0, s15
 800436c:	4824      	ldr	r0, [pc, #144]	@ (8004400 <main+0xc68>)
 800436e:	f7fc fffb 	bl	8001368 <set_Target_Position_ten_points>
							Goal_point[Num_point].theta_goal_position, Num_point);
					Num_point += 1;
 8004372:	4b1f      	ldr	r3, [pc, #124]	@ (80043f0 <main+0xc58>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	3301      	adds	r3, #1
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4b1d      	ldr	r3, [pc, #116]	@ (80043f0 <main+0xc58>)
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e0b6      	b.n	80044ee <main+0xd56>
//				} else {
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 2000);
//					modbus_servo_Status(&hmodbus, Limit_Up);
//				}

			} else if (Base_Sysytem_status == Base_Run_Point_mode) {
 8004380:	4b20      	ldr	r3, [pc, #128]	@ (8004404 <main+0xc6c>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b04      	cmp	r3, #4
 8004386:	d143      	bne.n	8004410 <main+0xc78>

				Goal_r_position = modbus_set_goal_r_position(&hmodbus);
 8004388:	481d      	ldr	r0, [pc, #116]	@ (8004400 <main+0xc68>)
 800438a:	f7fd f81d 	bl	80013c8 <modbus_set_goal_r_position>
 800438e:	4603      	mov	r3, r0
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004398:	4b1b      	ldr	r3, [pc, #108]	@ (8004408 <main+0xc70>)
 800439a:	edc3 7a00 	vstr	s15, [r3]
				Goal_theta_position = modbus_set_goal_theta_position(&hmodbus);
 800439e:	4818      	ldr	r0, [pc, #96]	@ (8004400 <main+0xc68>)
 80043a0:	f7fd f832 	bl	8001408 <modbus_set_goal_theta_position>
 80043a4:	4603      	mov	r3, r0
 80043a6:	ee07 3a90 	vmov	s15, r3
 80043aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ae:	4b17      	ldr	r3, [pc, #92]	@ (800440c <main+0xc74>)
 80043b0:	edc3 7a00 	vstr	s15, [r3]
				R_Theta_moving_Status(&hmodbus, Run_Point_mode);
 80043b4:	2104      	movs	r1, #4
 80043b6:	4812      	ldr	r0, [pc, #72]	@ (8004400 <main+0xc68>)
 80043b8:	f7fc ff6c 	bl	8001294 <R_Theta_moving_Status>
 80043bc:	e097      	b.n	80044ee <main+0xd56>
 80043be:	bf00      	nop
 80043c0:	20000718 	.word	0x20000718
 80043c4:	200005b0 	.word	0x200005b0
 80043c8:	3ecccccd 	.word	0x3ecccccd
 80043cc:	20001600 	.word	0x20001600
 80043d0:	200015d8 	.word	0x200015d8
 80043d4:	20000444 	.word	0x20000444
 80043d8:	20000448 	.word	0x20000448
 80043dc:	20000434 	.word	0x20000434
 80043e0:	20000438 	.word	0x20000438
 80043e4:	2000043c 	.word	0x2000043c
 80043e8:	20000440 	.word	0x20000440
 80043ec:	20000260 	.word	0x20000260
 80043f0:	20001628 	.word	0x20001628
 80043f4:	2000162c 	.word	0x2000162c
 80043f8:	20000208 	.word	0x20000208
 80043fc:	20000234 	.word	0x20000234
 8004400:	2000073c 	.word	0x2000073c
 8004404:	20000da4 	.word	0x20000da4
 8004408:	20000da8 	.word	0x20000da8
 800440c:	20000dac 	.word	0x20000dac

			}

			else if (Base_Sysytem_status == Base_Go_to_Target) {
 8004410:	4bcb      	ldr	r3, [pc, #812]	@ (8004740 <main+0xfa8>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d16a      	bne.n	80044ee <main+0xd56>

				R_Theta_moving_Status(&hmodbus, Go_to_Target);
 8004418:	2108      	movs	r1, #8
 800441a:	48ca      	ldr	r0, [pc, #808]	@ (8004744 <main+0xfac>)
 800441c:	f7fc ff3a 	bl	8001294 <R_Theta_moving_Status>

				Coordinate_Base_to_Robot(&Goal_point[0], Goal_r_position, Goal_theta_position);
 8004420:	4bc9      	ldr	r3, [pc, #804]	@ (8004748 <main+0xfb0>)
 8004422:	edd3 7a00 	vldr	s15, [r3]
 8004426:	4bc9      	ldr	r3, [pc, #804]	@ (800474c <main+0xfb4>)
 8004428:	ed93 7a00 	vldr	s14, [r3]
 800442c:	eef0 0a47 	vmov.f32	s1, s14
 8004430:	eeb0 0a67 	vmov.f32	s0, s15
 8004434:	48c6      	ldr	r0, [pc, #792]	@ (8004750 <main+0xfb8>)
 8004436:	f7fd f807 	bl	8001448 <Coordinate_Base_to_Robot>

				// Trajectory Target
				InitTrajectorySegment(&Prismatic[0], 0.0f, Goal_point[0].r_goal_position, v_max_pris, a_max_pris, t_global);
 800443a:	4bc5      	ldr	r3, [pc, #788]	@ (8004750 <main+0xfb8>)
 800443c:	edd3 7a00 	vldr	s15, [r3]
 8004440:	4bc4      	ldr	r3, [pc, #784]	@ (8004754 <main+0xfbc>)
 8004442:	ed93 7a00 	vldr	s14, [r3]
 8004446:	eeb0 2a47 	vmov.f32	s4, s14
 800444a:	eddf 1ac3 	vldr	s3, [pc, #780]	@ 8004758 <main+0xfc0>
 800444e:	ed9f 1ac3 	vldr	s2, [pc, #780]	@ 800475c <main+0xfc4>
 8004452:	eef0 0a67 	vmov.f32	s1, s15
 8004456:	ed9f 0ac2 	vldr	s0, [pc, #776]	@ 8004760 <main+0xfc8>
 800445a:	48c2      	ldr	r0, [pc, #776]	@ (8004764 <main+0xfcc>)
 800445c:	f7fe fd38 	bl	8002ed0 <InitTrajectorySegment>
				InitTrajectorySegment(&Revolute[0], 0.0f, Goal_point[0].theta_goal_position, v_max_rev, a_max_rev, t_global);
 8004460:	4bbb      	ldr	r3, [pc, #748]	@ (8004750 <main+0xfb8>)
 8004462:	edd3 7a01 	vldr	s15, [r3, #4]
 8004466:	4bbb      	ldr	r3, [pc, #748]	@ (8004754 <main+0xfbc>)
 8004468:	ed93 7a00 	vldr	s14, [r3]
 800446c:	eeb0 2a47 	vmov.f32	s4, s14
 8004470:	eddf 1abd 	vldr	s3, [pc, #756]	@ 8004768 <main+0xfd0>
 8004474:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8004478:	eef0 0a67 	vmov.f32	s1, s15
 800447c:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8004760 <main+0xfc8>
 8004480:	48ba      	ldr	r0, [pc, #744]	@ (800476c <main+0xfd4>)
 8004482:	f7fe fd25 	bl	8002ed0 <InitTrajectorySegment>

				pos_pris = GetTrajectoryPosition(&Prismatic[0], t_global);
 8004486:	4bb3      	ldr	r3, [pc, #716]	@ (8004754 <main+0xfbc>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	eeb0 0a67 	vmov.f32	s0, s15
 8004490:	48b4      	ldr	r0, [pc, #720]	@ (8004764 <main+0xfcc>)
 8004492:	f7fe fdd3 	bl	800303c <GetTrajectoryPosition>
 8004496:	eef0 7a40 	vmov.f32	s15, s0
 800449a:	4bb5      	ldr	r3, [pc, #724]	@ (8004770 <main+0xfd8>)
 800449c:	edc3 7a00 	vstr	s15, [r3]
				vel_pris = GetTrajectoryVelocity(&Prismatic[0], t_global);
 80044a0:	4bac      	ldr	r3, [pc, #688]	@ (8004754 <main+0xfbc>)
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	eeb0 0a67 	vmov.f32	s0, s15
 80044aa:	48ae      	ldr	r0, [pc, #696]	@ (8004764 <main+0xfcc>)
 80044ac:	f7fe fe9c 	bl	80031e8 <GetTrajectoryVelocity>
 80044b0:	eef0 7a40 	vmov.f32	s15, s0
 80044b4:	4baf      	ldr	r3, [pc, #700]	@ (8004774 <main+0xfdc>)
 80044b6:	edc3 7a00 	vstr	s15, [r3]
				pos_rev = GetTrajectoryPosition(&Revolute[0], t_global);
 80044ba:	4ba6      	ldr	r3, [pc, #664]	@ (8004754 <main+0xfbc>)
 80044bc:	edd3 7a00 	vldr	s15, [r3]
 80044c0:	eeb0 0a67 	vmov.f32	s0, s15
 80044c4:	48a9      	ldr	r0, [pc, #676]	@ (800476c <main+0xfd4>)
 80044c6:	f7fe fdb9 	bl	800303c <GetTrajectoryPosition>
 80044ca:	eef0 7a40 	vmov.f32	s15, s0
 80044ce:	4baa      	ldr	r3, [pc, #680]	@ (8004778 <main+0xfe0>)
 80044d0:	edc3 7a00 	vstr	s15, [r3]
				vel_rev = GetTrajectoryVelocity(&Revolute[0], t_global);
 80044d4:	4b9f      	ldr	r3, [pc, #636]	@ (8004754 <main+0xfbc>)
 80044d6:	edd3 7a00 	vldr	s15, [r3]
 80044da:	eeb0 0a67 	vmov.f32	s0, s15
 80044de:	48a3      	ldr	r0, [pc, #652]	@ (800476c <main+0xfd4>)
 80044e0:	f7fe fe82 	bl	80031e8 <GetTrajectoryVelocity>
 80044e4:	eef0 7a40 	vmov.f32	s15, s0
 80044e8:	4ba4      	ldr	r3, [pc, #656]	@ (800477c <main+0xfe4>)
 80044ea:	edc3 7a00 	vstr	s15, [r3]
//					__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, 0);
//					modbus_servo_Status(&hmodbus, Limit_Down);
//				}
			}

			Measurement_Pris[0] = Encoder_GetPosition_mm(&encoder1);
 80044ee:	48a4      	ldr	r0, [pc, #656]	@ (8004780 <main+0xfe8>)
 80044f0:	f7fd fdb8 	bl	8002064 <Encoder_GetPosition_mm>
 80044f4:	eef0 7a40 	vmov.f32	s15, s0
 80044f8:	4ba2      	ldr	r3, [pc, #648]	@ (8004784 <main+0xfec>)
 80044fa:	edc3 7a00 	vstr	s15, [r3]
			Measurement_Pris[1] = Encoder_GetVelocity_mm(&encoder1);
 80044fe:	48a0      	ldr	r0, [pc, #640]	@ (8004780 <main+0xfe8>)
 8004500:	f7fd fdbf 	bl	8002082 <Encoder_GetVelocity_mm>
 8004504:	eef0 7a40 	vmov.f32	s15, s0
 8004508:	4b9e      	ldr	r3, [pc, #632]	@ (8004784 <main+0xfec>)
 800450a:	edc3 7a01 	vstr	s15, [r3, #4]
			Measurement_Pris[2] = 0;
 800450e:	4b9d      	ldr	r3, [pc, #628]	@ (8004784 <main+0xfec>)
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
			Measurement_Pris[3] = 0;
 8004516:	4b9b      	ldr	r3, [pc, #620]	@ (8004784 <main+0xfec>)
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_pris, V_pris_velo_PID);
 800451e:	4b9a      	ldr	r3, [pc, #616]	@ (8004788 <main+0xff0>)
 8004520:	edd3 7a00 	vldr	s15, [r3]
 8004524:	eeb0 0a67 	vmov.f32	s0, s15
 8004528:	4898      	ldr	r0, [pc, #608]	@ (800478c <main+0xff4>)
 800452a:	f7fd ff9d 	bl	8002468 <Kalman_SetInput>
			Kalman_Predict(&kf_pris);
 800452e:	4897      	ldr	r0, [pc, #604]	@ (800478c <main+0xff4>)
 8004530:	f7fd ffaa 	bl	8002488 <Kalman_Predict>
			Kalman_Update(&kf_pris, Measurement_Pris);
 8004534:	4993      	ldr	r1, [pc, #588]	@ (8004784 <main+0xfec>)
 8004536:	4895      	ldr	r0, [pc, #596]	@ (800478c <main+0xff4>)
 8004538:	f7fd fff3 	bl	8002522 <Kalman_Update>

			Measurement_Rev[0] = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 800453c:	4894      	ldr	r0, [pc, #592]	@ (8004790 <main+0xff8>)
 800453e:	f7fd fd55 	bl	8001fec <Encoder_GetPosition>
 8004542:	ee10 3a10 	vmov	r3, s0
 8004546:	4618      	mov	r0, r3
 8004548:	f7fb ffca 	bl	80004e0 <__aeabi_f2d>
 800454c:	a378      	add	r3, pc, #480	@ (adr r3, 8004730 <main+0xf98>)
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f7fc f947 	bl	80007e4 <__aeabi_ddiv>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	f7fc fae7 	bl	8000b30 <__aeabi_d2f>
 8004562:	4603      	mov	r3, r0
 8004564:	4a8b      	ldr	r2, [pc, #556]	@ (8004794 <main+0xffc>)
 8004566:	6013      	str	r3, [r2, #0]
			Measurement_Rev[1] = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 8004568:	4889      	ldr	r0, [pc, #548]	@ (8004790 <main+0xff8>)
 800456a:	f7fd fd4e 	bl	800200a <Encoder_GetVelocity>
 800456e:	ee10 3a10 	vmov	r3, s0
 8004572:	4618      	mov	r0, r3
 8004574:	f7fb ffb4 	bl	80004e0 <__aeabi_f2d>
 8004578:	a36d      	add	r3, pc, #436	@ (adr r3, 8004730 <main+0xf98>)
 800457a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457e:	f7fc f931 	bl	80007e4 <__aeabi_ddiv>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f7fc fad1 	bl	8000b30 <__aeabi_d2f>
 800458e:	4603      	mov	r3, r0
 8004590:	4a80      	ldr	r2, [pc, #512]	@ (8004794 <main+0xffc>)
 8004592:	6053      	str	r3, [r2, #4]
			Measurement_Rev[2] = 0;
 8004594:	4b7f      	ldr	r3, [pc, #508]	@ (8004794 <main+0xffc>)
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	609a      	str	r2, [r3, #8]
			Measurement_Rev[3] = 0;
 800459c:	4b7d      	ldr	r3, [pc, #500]	@ (8004794 <main+0xffc>)
 800459e:	f04f 0200 	mov.w	r2, #0
 80045a2:	60da      	str	r2, [r3, #12]

			Kalman_SetInput(&kf_rev, V_rev_velo_PID);
 80045a4:	4b7c      	ldr	r3, [pc, #496]	@ (8004798 <main+0x1000>)
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	eeb0 0a67 	vmov.f32	s0, s15
 80045ae:	487b      	ldr	r0, [pc, #492]	@ (800479c <main+0x1004>)
 80045b0:	f7fd ff5a 	bl	8002468 <Kalman_SetInput>
			Kalman_Predict(&kf_rev);
 80045b4:	4879      	ldr	r0, [pc, #484]	@ (800479c <main+0x1004>)
 80045b6:	f7fd ff67 	bl	8002488 <Kalman_Predict>
			Kalman_Update(&kf_rev, Measurement_Rev);
 80045ba:	4976      	ldr	r1, [pc, #472]	@ (8004794 <main+0xffc>)
 80045bc:	4877      	ldr	r0, [pc, #476]	@ (800479c <main+0x1004>)
 80045be:	f7fd ffb0 	bl	8002522 <Kalman_Update>

			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 80045c2:	486f      	ldr	r0, [pc, #444]	@ (8004780 <main+0xfe8>)
 80045c4:	f7fd fd4e 	bl	8002064 <Encoder_GetPosition_mm>
 80045c8:	eeb0 8a40 	vmov.f32	s16, s0
 80045cc:	4870      	ldr	r0, [pc, #448]	@ (8004790 <main+0xff8>)
 80045ce:	f7fd fd3a 	bl	8002046 <Encoder_GetDegree>
 80045d2:	eef0 8a40 	vmov.f32	s17, s0
 80045d6:	486a      	ldr	r0, [pc, #424]	@ (8004780 <main+0xfe8>)
 80045d8:	f7fd fd53 	bl	8002082 <Encoder_GetVelocity_mm>
 80045dc:	eeb0 9a40 	vmov.f32	s18, s0
			Encoder_GetDegree(&encoder2), // theta_pos
			Encoder_GetVelocity_mm(&encoder1), // r_velo
			Encoder_GetVelocity(&encoder2) * 180.0 / 3.142, // theta_velo
 80045e0:	486b      	ldr	r0, [pc, #428]	@ (8004790 <main+0xff8>)
 80045e2:	f7fd fd12 	bl	800200a <Encoder_GetVelocity>
 80045e6:	ee10 3a10 	vmov	r3, s0
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fb ff78 	bl	80004e0 <__aeabi_f2d>
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	4b6a      	ldr	r3, [pc, #424]	@ (80047a0 <main+0x1008>)
 80045f6:	f7fb ffcb 	bl	8000590 <__aeabi_dmul>
 80045fa:	4602      	mov	r2, r0
 80045fc:	460b      	mov	r3, r1
 80045fe:	4610      	mov	r0, r2
 8004600:	4619      	mov	r1, r3
 8004602:	a34d      	add	r3, pc, #308	@ (adr r3, 8004738 <main+0xfa0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fc f8ec 	bl	80007e4 <__aeabi_ddiv>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	f7fc fa8c 	bl	8000b30 <__aeabi_d2f>
 8004618:	4604      	mov	r4, r0
 800461a:	4859      	ldr	r0, [pc, #356]	@ (8004780 <main+0xfe8>)
 800461c:	f7fd fd40 	bl	80020a0 <Encoder_GetAcceleration_mm>
 8004620:	eef0 9a40 	vmov.f32	s19, s0
			Encoder_GetAcceleration_mm(&encoder1), // r_accel
			Encoder_GetAcceleration(&encoder2) * 180.0 / 3.142); // theta_accel
 8004624:	485a      	ldr	r0, [pc, #360]	@ (8004790 <main+0xff8>)
 8004626:	f7fd fcff 	bl	8002028 <Encoder_GetAcceleration>
 800462a:	ee10 3a10 	vmov	r3, s0
 800462e:	4618      	mov	r0, r3
 8004630:	f7fb ff56 	bl	80004e0 <__aeabi_f2d>
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	4b59      	ldr	r3, [pc, #356]	@ (80047a0 <main+0x1008>)
 800463a:	f7fb ffa9 	bl	8000590 <__aeabi_dmul>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4610      	mov	r0, r2
 8004644:	4619      	mov	r1, r3
 8004646:	a33c      	add	r3, pc, #240	@ (adr r3, 8004738 <main+0xfa0>)
 8004648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464c:	f7fc f8ca 	bl	80007e4 <__aeabi_ddiv>
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
			modbus_Update_All(&hmodbus, Encoder_GetPosition_mm(&encoder1), // r_pos
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	f7fc fa6a 	bl	8000b30 <__aeabi_d2f>
 800465c:	4603      	mov	r3, r0
 800465e:	ee02 3a90 	vmov	s5, r3
 8004662:	eeb0 2a69 	vmov.f32	s4, s19
 8004666:	ee01 4a90 	vmov	s3, r4
 800466a:	eeb0 1a49 	vmov.f32	s2, s18
 800466e:	eef0 0a68 	vmov.f32	s1, s17
 8004672:	eeb0 0a48 	vmov.f32	s0, s16
 8004676:	4833      	ldr	r0, [pc, #204]	@ (8004744 <main+0xfac>)
 8004678:	f7fc fe1e 	bl	80012b8 <modbus_Update_All>

			count_Tim2 += 1;
 800467c:	4b49      	ldr	r3, [pc, #292]	@ (80047a4 <main+0x100c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	4a48      	ldr	r2, [pc, #288]	@ (80047a4 <main+0x100c>)
 8004684:	6013      	str	r3, [r2, #0]
			// Velocity Control
			velocity_pris = Encoder_GetVelocity_mm(&encoder1);
 8004686:	483e      	ldr	r0, [pc, #248]	@ (8004780 <main+0xfe8>)
 8004688:	f7fd fcfb 	bl	8002082 <Encoder_GetVelocity_mm>
 800468c:	eef0 7a40 	vmov.f32	s15, s0
 8004690:	4b45      	ldr	r3, [pc, #276]	@ (80047a8 <main+0x1010>)
 8004692:	edc3 7a00 	vstr	s15, [r3]
			setvelocity_pris = GetTrajectoryVelocity(&Prismatic[current_segment], t_global) + V_pris_posi_PID;
 8004696:	4b45      	ldr	r3, [pc, #276]	@ (80047ac <main+0x1014>)
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a30      	ldr	r2, [pc, #192]	@ (8004764 <main+0xfcc>)
 80046a4:	4413      	add	r3, r2
 80046a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004754 <main+0xfbc>)
 80046a8:	edd2 7a00 	vldr	s15, [r2]
 80046ac:	eeb0 0a67 	vmov.f32	s0, s15
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fe fd99 	bl	80031e8 <GetTrajectoryVelocity>
 80046b6:	eeb0 7a40 	vmov.f32	s14, s0
 80046ba:	4b3d      	ldr	r3, [pc, #244]	@ (80047b0 <main+0x1018>)
 80046bc:	edd3 7a00 	vldr	s15, [r3]
 80046c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046c4:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <main+0x101c>)
 80046c6:	edc3 7a00 	vstr	s15, [r3]
//			setvelocity_pris = vel_pris + V_pris_posi_PID;
			delta_velo_pris = setvelocity_pris - velocity_pris;
 80046ca:	4b3a      	ldr	r3, [pc, #232]	@ (80047b4 <main+0x101c>)
 80046cc:	ed93 7a00 	vldr	s14, [r3]
 80046d0:	4b35      	ldr	r3, [pc, #212]	@ (80047a8 <main+0x1010>)
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046da:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <main+0x1020>)
 80046dc:	edc3 7a00 	vstr	s15, [r3]
//			delta_velo_pris = setvelocity_pris - kf_pris.x_data[1];
			V_pris_velo_PID = Prismatic_velocity_control(delta_velo_pris);
 80046e0:	4b35      	ldr	r3, [pc, #212]	@ (80047b8 <main+0x1020>)
 80046e2:	edd3 7a00 	vldr	s15, [r3]
 80046e6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ea:	f000 fb69 	bl	8004dc0 <Prismatic_velocity_control>
 80046ee:	eef0 7a40 	vmov.f32	s15, s0
 80046f2:	4b25      	ldr	r3, [pc, #148]	@ (8004788 <main+0xff0>)
 80046f4:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 80046f8:	4b2a      	ldr	r3, [pc, #168]	@ (80047a4 <main+0x100c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b09      	cmp	r3, #9
 80046fe:	f340 80a6 	ble.w	800484e <main+0x10b6>
				// Position Control
				position_pris = Encoder_GetPosition_mm(&encoder1);
 8004702:	481f      	ldr	r0, [pc, #124]	@ (8004780 <main+0xfe8>)
 8004704:	f7fd fcae 	bl	8002064 <Encoder_GetPosition_mm>
 8004708:	eef0 7a40 	vmov.f32	s15, s0
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <main+0x1024>)
 800470e:	edc3 7a00 	vstr	s15, [r3]
				setposition_pris = GetTrajectoryPosition(&Prismatic[current_segment], t_global);
 8004712:	4b26      	ldr	r3, [pc, #152]	@ (80047ac <main+0x1014>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4a11      	ldr	r2, [pc, #68]	@ (8004764 <main+0xfcc>)
 8004720:	4413      	add	r3, r2
 8004722:	4a0c      	ldr	r2, [pc, #48]	@ (8004754 <main+0xfbc>)
 8004724:	edd2 7a00 	vldr	s15, [r2]
 8004728:	e04a      	b.n	80047c0 <main+0x1028>
 800472a:	bf00      	nop
 800472c:	f3af 8000 	nop.w
 8004730:	aaaaaaab 	.word	0xaaaaaaab
 8004734:	400aaaaa 	.word	0x400aaaaa
 8004738:	e5604189 	.word	0xe5604189
 800473c:	400922d0 	.word	0x400922d0
 8004740:	20000da4 	.word	0x20000da4
 8004744:	2000073c 	.word	0x2000073c
 8004748:	20000da8 	.word	0x20000da8
 800474c:	20000dac 	.word	0x20000dac
 8004750:	2000162c 	.word	0x2000162c
 8004754:	20000718 	.word	0x20000718
 8004758:	437a0000 	.word	0x437a0000
 800475c:	43fa0000 	.word	0x43fa0000
 8004760:	00000000 	.word	0x00000000
 8004764:	20000448 	.word	0x20000448
 8004768:	3ecccccd 	.word	0x3ecccccd
 800476c:	200005b0 	.word	0x200005b0
 8004770:	20000434 	.word	0x20000434
 8004774:	20000438 	.word	0x20000438
 8004778:	2000043c 	.word	0x2000043c
 800477c:	20000440 	.word	0x20000440
 8004780:	200003c4 	.word	0x200003c4
 8004784:	20001588 	.word	0x20001588
 8004788:	20000e38 	.word	0x20000e38
 800478c:	20000ed0 	.word	0x20000ed0
 8004790:	200003f8 	.word	0x200003f8
 8004794:	20001598 	.word	0x20001598
 8004798:	20000eb4 	.word	0x20000eb4
 800479c:	200011f4 	.word	0x200011f4
 80047a0:	40668000 	.word	0x40668000
 80047a4:	20000dbc 	.word	0x20000dbc
 80047a8:	20000e30 	.word	0x20000e30
 80047ac:	20000444 	.word	0x20000444
 80047b0:	20000df8 	.word	0x20000df8
 80047b4:	20000e34 	.word	0x20000e34
 80047b8:	20000e48 	.word	0x20000e48
 80047bc:	20000df0 	.word	0x20000df0
 80047c0:	eeb0 0a67 	vmov.f32	s0, s15
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fe fc39 	bl	800303c <GetTrajectoryPosition>
 80047ca:	eef0 7a40 	vmov.f32	s15, s0
 80047ce:	4bb0      	ldr	r3, [pc, #704]	@ (8004a90 <main+0x12f8>)
 80047d0:	edc3 7a00 	vstr	s15, [r3]
//				setposition_pris = pos_pris;
				delta_posi_pris = setposition_pris - position_pris;
 80047d4:	4bae      	ldr	r3, [pc, #696]	@ (8004a90 <main+0x12f8>)
 80047d6:	ed93 7a00 	vldr	s14, [r3]
 80047da:	4bae      	ldr	r3, [pc, #696]	@ (8004a94 <main+0x12fc>)
 80047dc:	edd3 7a00 	vldr	s15, [r3]
 80047e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e4:	4bac      	ldr	r3, [pc, #688]	@ (8004a98 <main+0x1300>)
 80047e6:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_pris <= 0.1 && delta_posi_pris >= -0.1) {
 80047ea:	4bab      	ldr	r3, [pc, #684]	@ (8004a98 <main+0x1300>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fb fe76 	bl	80004e0 <__aeabi_f2d>
 80047f4:	a3a0      	add	r3, pc, #640	@ (adr r3, 8004a78 <main+0x12e0>)
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	f7fc f945 	bl	8000a88 <__aeabi_dcmple>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d015      	beq.n	8004830 <main+0x1098>
 8004804:	4ba4      	ldr	r3, [pc, #656]	@ (8004a98 <main+0x1300>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fb fe69 	bl	80004e0 <__aeabi_f2d>
 800480e:	a39c      	add	r3, pc, #624	@ (adr r3, 8004a80 <main+0x12e8>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fc f942 	bl	8000a9c <__aeabi_dcmpge>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d008      	beq.n	8004830 <main+0x1098>
					V_pris_posi_PID = 0;
 800481e:	4b9f      	ldr	r3, [pc, #636]	@ (8004a9c <main+0x1304>)
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
					V_pris_velo_PID = 0;
 8004826:	4b9e      	ldr	r3, [pc, #632]	@ (8004aa0 <main+0x1308>)
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e00b      	b.n	8004848 <main+0x10b0>
				} else {
					V_pris_posi_PID = Prismatic_position_control(
 8004830:	4b99      	ldr	r3, [pc, #612]	@ (8004a98 <main+0x1300>)
 8004832:	edd3 7a00 	vldr	s15, [r3]
 8004836:	eeb0 0a67 	vmov.f32	s0, s15
 800483a:	f000 fa49 	bl	8004cd0 <Prismatic_position_control>
 800483e:	eef0 7a40 	vmov.f32	s15, s0
 8004842:	4b96      	ldr	r3, [pc, #600]	@ (8004a9c <main+0x1304>)
 8004844:	edc3 7a00 	vstr	s15, [r3]
							delta_posi_pris);
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
				count_Tim2 = 0;
 8004848:	4b96      	ldr	r3, [pc, #600]	@ (8004aa4 <main+0x130c>)
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
			}

			Revolute_dis();
 800484e:	f000 fc9b 	bl	8005188 <Revolute_dis>
			count_Tim2 += 1;
 8004852:	4b94      	ldr	r3, [pc, #592]	@ (8004aa4 <main+0x130c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	4a92      	ldr	r2, [pc, #584]	@ (8004aa4 <main+0x130c>)
 800485a:	6013      	str	r3, [r2, #0]
			// Velocity Control
			velocity_rev = Encoder_GetVelocity(&encoder2) / (100.0 / 30.0);
 800485c:	4892      	ldr	r0, [pc, #584]	@ (8004aa8 <main+0x1310>)
 800485e:	f7fd fbd4 	bl	800200a <Encoder_GetVelocity>
 8004862:	ee10 3a10 	vmov	r3, s0
 8004866:	4618      	mov	r0, r3
 8004868:	f7fb fe3a 	bl	80004e0 <__aeabi_f2d>
 800486c:	a386      	add	r3, pc, #536	@ (adr r3, 8004a88 <main+0x12f0>)
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	f7fb ffb7 	bl	80007e4 <__aeabi_ddiv>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	f7fc f957 	bl	8000b30 <__aeabi_d2f>
 8004882:	4603      	mov	r3, r0
 8004884:	4a89      	ldr	r2, [pc, #548]	@ (8004aac <main+0x1314>)
 8004886:	6013      	str	r3, [r2, #0]
			setvelocity_rev = GetTrajectoryVelocity(&Revolute[current_segment], t_global) + V_rev_posi_PID;
 8004888:	4b89      	ldr	r3, [pc, #548]	@ (8004ab0 <main+0x1318>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4a87      	ldr	r2, [pc, #540]	@ (8004ab4 <main+0x131c>)
 8004896:	4413      	add	r3, r2
 8004898:	4a87      	ldr	r2, [pc, #540]	@ (8004ab8 <main+0x1320>)
 800489a:	edd2 7a00 	vldr	s15, [r2]
 800489e:	eeb0 0a67 	vmov.f32	s0, s15
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fe fca0 	bl	80031e8 <GetTrajectoryVelocity>
 80048a8:	eeb0 7a40 	vmov.f32	s14, s0
 80048ac:	4b83      	ldr	r3, [pc, #524]	@ (8004abc <main+0x1324>)
 80048ae:	edd3 7a00 	vldr	s15, [r3]
 80048b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048b6:	4b82      	ldr	r3, [pc, #520]	@ (8004ac0 <main+0x1328>)
 80048b8:	edc3 7a00 	vstr	s15, [r3]
//			setvelocity_rev = vel_rev + V_rev_posi_PID;
//			delta_velo_rev = setvelocity_rev - velocity_rev;
			delta_velo_rev = setvelocity_rev - kf_rev.x_data[1];
 80048bc:	4b80      	ldr	r3, [pc, #512]	@ (8004ac0 <main+0x1328>)
 80048be:	ed93 7a00 	vldr	s14, [r3]
 80048c2:	4b80      	ldr	r3, [pc, #512]	@ (8004ac4 <main+0x132c>)
 80048c4:	edd3 7a8e 	vldr	s15, [r3, #568]	@ 0x238
 80048c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048cc:	4b7e      	ldr	r3, [pc, #504]	@ (8004ac8 <main+0x1330>)
 80048ce:	edc3 7a00 	vstr	s15, [r3]
			V_rev_velo_PID = Revolute_velocity_control(delta_velo_rev);
 80048d2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ac8 <main+0x1330>)
 80048d4:	edd3 7a00 	vldr	s15, [r3]
 80048d8:	eeb0 0a67 	vmov.f32	s0, s15
 80048dc:	f000 fb96 	bl	800500c <Revolute_velocity_control>
 80048e0:	eef0 7a40 	vmov.f32	s15, s0
 80048e4:	4b79      	ldr	r3, [pc, #484]	@ (8004acc <main+0x1334>)
 80048e6:	edc3 7a00 	vstr	s15, [r3]
			if (count_Tim2 >= 10) {
 80048ea:	4b6e      	ldr	r3, [pc, #440]	@ (8004aa4 <main+0x130c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b09      	cmp	r3, #9
 80048f0:	dd7e      	ble.n	80049f0 <main+0x1258>
				// Position Control
				position_rev = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 80048f2:	486d      	ldr	r0, [pc, #436]	@ (8004aa8 <main+0x1310>)
 80048f4:	f7fd fb7a 	bl	8001fec <Encoder_GetPosition>
 80048f8:	ee10 3a10 	vmov	r3, s0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fb fdef 	bl	80004e0 <__aeabi_f2d>
 8004902:	a361      	add	r3, pc, #388	@ (adr r3, 8004a88 <main+0x12f0>)
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f7fb ff6c 	bl	80007e4 <__aeabi_ddiv>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4610      	mov	r0, r2
 8004912:	4619      	mov	r1, r3
 8004914:	f7fc f90c 	bl	8000b30 <__aeabi_d2f>
 8004918:	4603      	mov	r3, r0
 800491a:	4a6d      	ldr	r2, [pc, #436]	@ (8004ad0 <main+0x1338>)
 800491c:	6013      	str	r3, [r2, #0]
				setposition_rev = GetTrajectoryPosition(&Revolute[current_segment], t_global) + Rev_backlash.backlash_offset;
 800491e:	4b64      	ldr	r3, [pc, #400]	@ (8004ab0 <main+0x1318>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4a62      	ldr	r2, [pc, #392]	@ (8004ab4 <main+0x131c>)
 800492c:	4413      	add	r3, r2
 800492e:	4a62      	ldr	r2, [pc, #392]	@ (8004ab8 <main+0x1320>)
 8004930:	edd2 7a00 	vldr	s15, [r2]
 8004934:	eeb0 0a67 	vmov.f32	s0, s15
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe fb7f 	bl	800303c <GetTrajectoryPosition>
 800493e:	eeb0 7a40 	vmov.f32	s14, s0
 8004942:	4b64      	ldr	r3, [pc, #400]	@ (8004ad4 <main+0x133c>)
 8004944:	edd3 7a01 	vldr	s15, [r3, #4]
 8004948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800494c:	4b62      	ldr	r3, [pc, #392]	@ (8004ad8 <main+0x1340>)
 800494e:	edc3 7a00 	vstr	s15, [r3]
//				setposition_rev = pos_rev;
				Backlash_Update(&Rev_backlash, pos_rev, p2, v2);
 8004952:	4b62      	ldr	r3, [pc, #392]	@ (8004adc <main+0x1344>)
 8004954:	edd3 7a00 	vldr	s15, [r3]
 8004958:	4b61      	ldr	r3, [pc, #388]	@ (8004ae0 <main+0x1348>)
 800495a:	ed93 7a00 	vldr	s14, [r3]
 800495e:	4b61      	ldr	r3, [pc, #388]	@ (8004ae4 <main+0x134c>)
 8004960:	edd3 6a00 	vldr	s13, [r3]
 8004964:	eeb0 1a66 	vmov.f32	s2, s13
 8004968:	eef0 0a47 	vmov.f32	s1, s14
 800496c:	eeb0 0a67 	vmov.f32	s0, s15
 8004970:	4858      	ldr	r0, [pc, #352]	@ (8004ad4 <main+0x133c>)
 8004972:	f7fc fc09 	bl	8001188 <Backlash_Update>
				delta_posi_rev = setposition_rev - position_rev;
 8004976:	4b58      	ldr	r3, [pc, #352]	@ (8004ad8 <main+0x1340>)
 8004978:	ed93 7a00 	vldr	s14, [r3]
 800497c:	4b54      	ldr	r3, [pc, #336]	@ (8004ad0 <main+0x1338>)
 800497e:	edd3 7a00 	vldr	s15, [r3]
 8004982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004986:	4b58      	ldr	r3, [pc, #352]	@ (8004ae8 <main+0x1350>)
 8004988:	edc3 7a00 	vstr	s15, [r3]
				if (delta_posi_rev <= 0.1 && delta_posi_rev >= -0.1) {
 800498c:	4b56      	ldr	r3, [pc, #344]	@ (8004ae8 <main+0x1350>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f7fb fda5 	bl	80004e0 <__aeabi_f2d>
 8004996:	a338      	add	r3, pc, #224	@ (adr r3, 8004a78 <main+0x12e0>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fc f874 	bl	8000a88 <__aeabi_dcmple>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d015      	beq.n	80049d2 <main+0x123a>
 80049a6:	4b50      	ldr	r3, [pc, #320]	@ (8004ae8 <main+0x1350>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fd98 	bl	80004e0 <__aeabi_f2d>
 80049b0:	a333      	add	r3, pc, #204	@ (adr r3, 8004a80 <main+0x12e8>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	f7fc f871 	bl	8000a9c <__aeabi_dcmpge>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d008      	beq.n	80049d2 <main+0x123a>
					V_rev_posi_PID = 0;
 80049c0:	4b3e      	ldr	r3, [pc, #248]	@ (8004abc <main+0x1324>)
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
					V_rev_velo_PID = 0;
 80049c8:	4b40      	ldr	r3, [pc, #256]	@ (8004acc <main+0x1334>)
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e00b      	b.n	80049ea <main+0x1252>
				} else {
					V_rev_posi_PID = Revolute_position_control(delta_posi_rev);
 80049d2:	4b45      	ldr	r3, [pc, #276]	@ (8004ae8 <main+0x1350>)
 80049d4:	edd3 7a00 	vldr	s15, [r3]
 80049d8:	eeb0 0a67 	vmov.f32	s0, s15
 80049dc:	f000 fa9e 	bl	8004f1c <Revolute_position_control>
 80049e0:	eef0 7a40 	vmov.f32	s15, s0
 80049e4:	4b35      	ldr	r3, [pc, #212]	@ (8004abc <main+0x1324>)
 80049e6:	edc3 7a00 	vstr	s15, [r3]
				}
//				V_pris_posi_PID = Prismatic_position_control(delta_posi_pris);
				count_Tim2 = 0;
 80049ea:	4b2e      	ldr	r3, [pc, #184]	@ (8004aa4 <main+0x130c>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
			}
		}

		if (V_pris_velo_PID < 0) {
 80049f0:	4b2b      	ldr	r3, [pc, #172]	@ (8004aa0 <main+0x1308>)
 80049f2:	edd3 7a00 	vldr	s15, [r3]
 80049f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fe:	d50b      	bpl.n	8004a18 <main+0x1280>
			DIR_24V = 0;
 8004a00:	4b3a      	ldr	r3, [pc, #232]	@ (8004aec <main+0x1354>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = fabsf(V_pris_velo_PID);
 8004a06:	4b26      	ldr	r3, [pc, #152]	@ (8004aa0 <main+0x1308>)
 8004a08:	edd3 7a00 	vldr	s15, [r3]
 8004a0c:	eef0 7ae7 	vabs.f32	s15, s15
 8004a10:	4b37      	ldr	r3, [pc, #220]	@ (8004af0 <main+0x1358>)
 8004a12:	edc3 7a00 	vstr	s15, [r3]
 8004a16:	e00e      	b.n	8004a36 <main+0x129e>
		} else if (V_pris_velo_PID > 0) {
 8004a18:	4b21      	ldr	r3, [pc, #132]	@ (8004aa0 <main+0x1308>)
 8004a1a:	edd3 7a00 	vldr	s15, [r3]
 8004a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	dd06      	ble.n	8004a36 <main+0x129e>
			DIR_24V = 1;
 8004a28:	4b30      	ldr	r3, [pc, #192]	@ (8004aec <main+0x1354>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
			V_absoulte_pris = V_pris_velo_PID;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <main+0x1308>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a2f      	ldr	r2, [pc, #188]	@ (8004af0 <main+0x1358>)
 8004a34:	6013      	str	r3, [r2, #0]
		}
		pwm_pris_velo = voltage_to_pwm(V_absoulte_pris);
 8004a36:	4b2e      	ldr	r3, [pc, #184]	@ (8004af0 <main+0x1358>)
 8004a38:	edd3 7a00 	vldr	s15, [r3]
 8004a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a40:	f000 fb82 	bl	8005148 <voltage_to_pwm>
 8004a44:	eef0 7a40 	vmov.f32	s15, s0
 8004a48:	4b2a      	ldr	r3, [pc, #168]	@ (8004af4 <main+0x135c>)
 8004a4a:	edc3 7a00 	vstr	s15, [r3]
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, DIR_24V);
//		__HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, pwm_pris_velo);

		if (V_rev_velo_PID < 0) {
 8004a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004acc <main+0x1334>)
 8004a50:	edd3 7a00 	vldr	s15, [r3]
 8004a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	d550      	bpl.n	8004b00 <main+0x1368>
			DIR_18V = 0;
 8004a5e:	4b26      	ldr	r3, [pc, #152]	@ (8004af8 <main+0x1360>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
			V_absolute_rev = fabsf(V_rev_velo_PID);
 8004a64:	4b19      	ldr	r3, [pc, #100]	@ (8004acc <main+0x1334>)
 8004a66:	edd3 7a00 	vldr	s15, [r3]
 8004a6a:	eef0 7ae7 	vabs.f32	s15, s15
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <main+0x1364>)
 8004a70:	edc3 7a00 	vstr	s15, [r3]
 8004a74:	e053      	b.n	8004b1e <main+0x1386>
 8004a76:	bf00      	nop
 8004a78:	9999999a 	.word	0x9999999a
 8004a7c:	3fb99999 	.word	0x3fb99999
 8004a80:	9999999a 	.word	0x9999999a
 8004a84:	bfb99999 	.word	0xbfb99999
 8004a88:	aaaaaaab 	.word	0xaaaaaaab
 8004a8c:	400aaaaa 	.word	0x400aaaaa
 8004a90:	20000df4 	.word	0x20000df4
 8004a94:	20000df0 	.word	0x20000df0
 8004a98:	20000e08 	.word	0x20000e08
 8004a9c:	20000df8 	.word	0x20000df8
 8004aa0:	20000e38 	.word	0x20000e38
 8004aa4:	20000dbc 	.word	0x20000dbc
 8004aa8:	200003f8 	.word	0x200003f8
 8004aac:	20000eac 	.word	0x20000eac
 8004ab0:	20000444 	.word	0x20000444
 8004ab4:	200005b0 	.word	0x200005b0
 8004ab8:	20000718 	.word	0x20000718
 8004abc:	20000e78 	.word	0x20000e78
 8004ac0:	20000eb0 	.word	0x20000eb0
 8004ac4:	200011f4 	.word	0x200011f4
 8004ac8:	20000ec4 	.word	0x20000ec4
 8004acc:	20000eb4 	.word	0x20000eb4
 8004ad0:	20000e70 	.word	0x20000e70
 8004ad4:	20000dc0 	.word	0x20000dc0
 8004ad8:	20000e74 	.word	0x20000e74
 8004adc:	2000043c 	.word	0x2000043c
 8004ae0:	20000728 	.word	0x20000728
 8004ae4:	2000072c 	.word	0x2000072c
 8004ae8:	20000e84 	.word	0x20000e84
 8004aec:	20000db4 	.word	0x20000db4
 8004af0:	20000dfc 	.word	0x20000dfc
 8004af4:	20000e3c 	.word	0x20000e3c
 8004af8:	20000db0 	.word	0x20000db0
 8004afc:	20000ec8 	.word	0x20000ec8
		} else if (V_rev_velo_PID > 0) {
 8004b00:	4b1b      	ldr	r3, [pc, #108]	@ (8004b70 <main+0x13d8>)
 8004b02:	edd3 7a00 	vldr	s15, [r3]
 8004b06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b0e:	dd06      	ble.n	8004b1e <main+0x1386>
			DIR_18V = 1;
 8004b10:	4b18      	ldr	r3, [pc, #96]	@ (8004b74 <main+0x13dc>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
			V_absolute_rev = V_rev_velo_PID;
 8004b16:	4b16      	ldr	r3, [pc, #88]	@ (8004b70 <main+0x13d8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <main+0x13e0>)
 8004b1c:	6013      	str	r3, [r2, #0]
		}
		V_plant = V_absolute_rev + voltage_dis_rev;
 8004b1e:	4b16      	ldr	r3, [pc, #88]	@ (8004b78 <main+0x13e0>)
 8004b20:	ed93 7a00 	vldr	s14, [r3]
 8004b24:	4b15      	ldr	r3, [pc, #84]	@ (8004b7c <main+0x13e4>)
 8004b26:	edd3 7a00 	vldr	s15, [r3]
 8004b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b2e:	4b14      	ldr	r3, [pc, #80]	@ (8004b80 <main+0x13e8>)
 8004b30:	edc3 7a00 	vstr	s15, [r3]
		if (V_plant > 18) {
 8004b34:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <main+0x13e8>)
 8004b36:	edd3 7a00 	vldr	s15, [r3]
 8004b3a:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8004b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	dd02      	ble.n	8004b4e <main+0x13b6>
			V_plant = 18;
 8004b48:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <main+0x13e8>)
 8004b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b84 <main+0x13ec>)
 8004b4c:	601a      	str	r2, [r3, #0]
		}
		pwm_rev_velo = (V_plant / 18) * 65535;
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <main+0x13e8>)
 8004b50:	ed93 7a00 	vldr	s14, [r3]
 8004b54:	eef3 6a02 	vmov.f32	s13, #50	@ 0x41900000  18.0
 8004b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b5c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004b88 <main+0x13f0>
 8004b60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b64:	4b09      	ldr	r3, [pc, #36]	@ (8004b8c <main+0x13f4>)
 8004b66:	edc3 7a00 	vstr	s15, [r3]
	while (1) {
 8004b6a:	f7ff b87c 	b.w	8003c66 <main+0x4ce>
 8004b6e:	bf00      	nop
 8004b70:	20000eb4 	.word	0x20000eb4
 8004b74:	20000db0 	.word	0x20000db0
 8004b78:	20000ec8 	.word	0x20000ec8
 8004b7c:	20000db8 	.word	0x20000db8
 8004b80:	20000ecc 	.word	0x20000ecc
 8004b84:	41900000 	.word	0x41900000
 8004b88:	477fff00 	.word	0x477fff00
 8004b8c:	20000eb8 	.word	0x20000eb8

08004b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b094      	sub	sp, #80	@ 0x50
 8004b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b96:	f107 0318 	add.w	r3, r7, #24
 8004b9a:	2238      	movs	r2, #56	@ 0x38
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f00a fbac 	bl	800f2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ba4:	1d3b      	adds	r3, r7, #4
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
 8004baa:	605a      	str	r2, [r3, #4]
 8004bac:	609a      	str	r2, [r3, #8]
 8004bae:	60da      	str	r2, [r3, #12]
 8004bb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	f003 fc1e 	bl	80083f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bc2:	2340      	movs	r3, #64	@ 0x40
 8004bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004bce:	2304      	movs	r3, #4
 8004bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004bd2:	2355      	movs	r3, #85	@ 0x55
 8004bd4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004bde:	2302      	movs	r3, #2
 8004be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004be2:	f107 0318 	add.w	r3, r7, #24
 8004be6:	4618      	mov	r0, r3
 8004be8:	f003 fcb8 	bl	800855c <HAL_RCC_OscConfig>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004bf2:	f000 fbb3 	bl	800535c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004bf6:	230f      	movs	r3, #15
 8004bf8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	2104      	movs	r1, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f003 ffb6 	bl	8008b80 <HAL_RCC_ClockConfig>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004c1a:	f000 fb9f 	bl	800535c <Error_Handler>
  }
}
 8004c1e:	bf00      	nop
 8004c20:	3750      	adds	r7, #80	@ 0x50
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
	...

08004c28 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_9) { // Back Limit
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c38:	d103      	bne.n	8004c42 <HAL_GPIO_EXTI_Callback+0x1a>
		State = 9;
 8004c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8004cac <HAL_GPIO_EXTI_Callback+0x84>)
 8004c3c:	2209      	movs	r2, #9
 8004c3e:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
		State = 14;
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
		State = 15;
	}
}
 8004c40:	e02e      	b.n	8004ca0 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_10) { // Front Limit
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c48:	d103      	bne.n	8004c52 <HAL_GPIO_EXTI_Callback+0x2a>
		State = 10;
 8004c4a:	4b18      	ldr	r3, [pc, #96]	@ (8004cac <HAL_GPIO_EXTI_Callback+0x84>)
 8004c4c:	220a      	movs	r2, #10
 8004c4e:	601a      	str	r2, [r3, #0]
}
 8004c50:	e026      	b.n	8004ca0 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_11) { // Emergency
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c58:	d103      	bne.n	8004c62 <HAL_GPIO_EXTI_Callback+0x3a>
		State = 11;
 8004c5a:	4b14      	ldr	r3, [pc, #80]	@ (8004cac <HAL_GPIO_EXTI_Callback+0x84>)
 8004c5c:	220b      	movs	r2, #11
 8004c5e:	601a      	str	r2, [r3, #0]
}
 8004c60:	e01e      	b.n	8004ca0 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_12) { // Right Proximity
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c68:	d103      	bne.n	8004c72 <HAL_GPIO_EXTI_Callback+0x4a>
		State = 12;
 8004c6a:	4b10      	ldr	r3, [pc, #64]	@ (8004cac <HAL_GPIO_EXTI_Callback+0x84>)
 8004c6c:	220c      	movs	r2, #12
 8004c6e:	601a      	str	r2, [r3, #0]
}
 8004c70:	e016      	b.n	8004ca0 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_13) { // Left Proximity
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c78:	d103      	bne.n	8004c82 <HAL_GPIO_EXTI_Callback+0x5a>
		State = 13;
 8004c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cac <HAL_GPIO_EXTI_Callback+0x84>)
 8004c7c:	220d      	movs	r2, #13
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	e00e      	b.n	8004ca0 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_14) { // Upper Limit
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c88:	d103      	bne.n	8004c92 <HAL_GPIO_EXTI_Callback+0x6a>
		State = 14;
 8004c8a:	4b08      	ldr	r3, [pc, #32]	@ (8004cac <HAL_GPIO_EXTI_Callback+0x84>)
 8004c8c:	220e      	movs	r2, #14
 8004c8e:	601a      	str	r2, [r3, #0]
}
 8004c90:	e006      	b.n	8004ca0 <HAL_GPIO_EXTI_Callback+0x78>
	} else if (GPIO_Pin == GPIO_PIN_15) { // Bottom Limit
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c98:	d102      	bne.n	8004ca0 <HAL_GPIO_EXTI_Callback+0x78>
		State = 15;
 8004c9a:	4b04      	ldr	r3, [pc, #16]	@ (8004cac <HAL_GPIO_EXTI_Callback+0x84>)
 8004c9c:	220f      	movs	r2, #15
 8004c9e:	601a      	str	r2, [r3, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000734 	.word	0x20000734

08004cb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a04      	ldr	r2, [pc, #16]	@ (8004ccc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIM_PeriodElapsedCallback+0x14>
		PS2_ReadData();
 8004cc0:	f7fd f9fe 	bl	80020c0 <PS2_ReadData>
	}
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	200017b0 	.word	0x200017b0

08004cd0 <Prismatic_position_control>:

float Prismatic_position_control(float delta_posi) {
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_pris[0] = delta_posi;
 8004cda:	4a36      	ldr	r2, [pc, #216]	@ (8004db4 <Prismatic_position_control+0xe4>)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6013      	str	r3, [r2, #0]
//	Pris_posi_PID.Kp = 1;
//	Pris_posi_PID.Kd = 1;

	if (error_posi_pris[0] < 0 && error_posi_pris[1] > 0) {
 8004ce0:	4b34      	ldr	r3, [pc, #208]	@ (8004db4 <Prismatic_position_control+0xe4>)
 8004ce2:	edd3 7a00 	vldr	s15, [r3]
 8004ce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cee:	d50a      	bpl.n	8004d06 <Prismatic_position_control+0x36>
 8004cf0:	4b30      	ldr	r3, [pc, #192]	@ (8004db4 <Prismatic_position_control+0xe4>)
 8004cf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cf6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cfe:	dd02      	ble.n	8004d06 <Prismatic_position_control+0x36>
		anti_windup = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e014      	b.n	8004d30 <Prismatic_position_control+0x60>
	} else if (error_posi_pris[0] > 0 && error_posi_pris[1] < 0) {
 8004d06:	4b2b      	ldr	r3, [pc, #172]	@ (8004db4 <Prismatic_position_control+0xe4>)
 8004d08:	edd3 7a00 	vldr	s15, [r3]
 8004d0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	dd0a      	ble.n	8004d2c <Prismatic_position_control+0x5c>
 8004d16:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <Prismatic_position_control+0xe4>)
 8004d18:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d24:	d502      	bpl.n	8004d2c <Prismatic_position_control+0x5c>
		anti_windup = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e001      	b.n	8004d30 <Prismatic_position_control+0x60>
	} else {
		anti_windup = 1;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	4b21      	ldr	r3, [pc, #132]	@ (8004db8 <Prismatic_position_control+0xe8>)
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	ed93 7a00 	vldr	s14, [r3]
 8004d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004d42:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	edd3 6a01 	vldr	s13, [r3, #4]
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d52:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004d56:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d78:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8004d90:	68bb      	ldr	r3, [r7, #8]
//		Pris_posi_PID.Ki = 0;
//	} else {
//		Pris_posi_PID.Ki = 1;
//	}

	V_pris_posi_PID = arm_pid_f32(&Pris_posi_PID, delta_posi);
 8004d92:	4a0a      	ldr	r2, [pc, #40]	@ (8004dbc <Prismatic_position_control+0xec>)
 8004d94:	6013      	str	r3, [r2, #0]

//	if (V_pris_posi_PID > 24) {
//		V_pris_posi_PID = 24;
//	}

	error_posi_pris[1] = error_posi_pris[0];
 8004d96:	4b07      	ldr	r3, [pc, #28]	@ (8004db4 <Prismatic_position_control+0xe4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a06      	ldr	r2, [pc, #24]	@ (8004db4 <Prismatic_position_control+0xe4>)
 8004d9c:	6053      	str	r3, [r2, #4]
	return V_pris_posi_PID;
 8004d9e:	4b07      	ldr	r3, [pc, #28]	@ (8004dbc <Prismatic_position_control+0xec>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	ee07 3a90 	vmov	s15, r3
}
 8004da6:	eeb0 0a67 	vmov.f32	s0, s15
 8004daa:	371c      	adds	r7, #28
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000e00 	.word	0x20000e00
 8004db8:	20000dcc 	.word	0x20000dcc
 8004dbc:	20000df8 	.word	0x20000df8

08004dc0 <Prismatic_velocity_control>:

float Prismatic_velocity_control(float delta_velo) {
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_pris[0] = delta_velo;
 8004dca:	4a4e      	ldr	r2, [pc, #312]	@ (8004f04 <Prismatic_velocity_control+0x144>)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6013      	str	r3, [r2, #0]
//	Pris_velo_PID.Kp = 0.01;

	if (error_velo_pris[0] < 0 && error_velo_pris[1] > 0) {
 8004dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8004f04 <Prismatic_velocity_control+0x144>)
 8004dd2:	edd3 7a00 	vldr	s15, [r3]
 8004dd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	d50a      	bpl.n	8004df6 <Prismatic_velocity_control+0x36>
 8004de0:	4b48      	ldr	r3, [pc, #288]	@ (8004f04 <Prismatic_velocity_control+0x144>)
 8004de2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004de6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dee:	dd02      	ble.n	8004df6 <Prismatic_velocity_control+0x36>
		anti_windup = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
 8004df4:	e014      	b.n	8004e20 <Prismatic_velocity_control+0x60>
	} else if (error_velo_pris[0] > 0 && error_velo_pris[1] < 0) {
 8004df6:	4b43      	ldr	r3, [pc, #268]	@ (8004f04 <Prismatic_velocity_control+0x144>)
 8004df8:	edd3 7a00 	vldr	s15, [r3]
 8004dfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e04:	dd0a      	ble.n	8004e1c <Prismatic_velocity_control+0x5c>
 8004e06:	4b3f      	ldr	r3, [pc, #252]	@ (8004f04 <Prismatic_velocity_control+0x144>)
 8004e08:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e14:	d502      	bpl.n	8004e1c <Prismatic_velocity_control+0x5c>
		anti_windup = 0;
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e001      	b.n	8004e20 <Prismatic_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	617b      	str	r3, [r7, #20]
	}

	if (V_pris_velo_PID >= 24 && anti_windup == 0) {
 8004e20:	4b39      	ldr	r3, [pc, #228]	@ (8004f08 <Prismatic_velocity_control+0x148>)
 8004e22:	edd3 7a00 	vldr	s15, [r3]
 8004e26:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8004e2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e32:	db07      	blt.n	8004e44 <Prismatic_velocity_control+0x84>
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <Prismatic_velocity_control+0x84>
		Pris_velo_PID.Ki = 0;
 8004e3a:	4b34      	ldr	r3, [pc, #208]	@ (8004f0c <Prismatic_velocity_control+0x14c>)
 8004e3c:	f04f 0200 	mov.w	r2, #0
 8004e40:	61da      	str	r2, [r3, #28]
 8004e42:	e002      	b.n	8004e4a <Prismatic_velocity_control+0x8a>
	} else {
		Pris_velo_PID.Ki = 0.001;
 8004e44:	4b31      	ldr	r3, [pc, #196]	@ (8004f0c <Prismatic_velocity_control+0x14c>)
 8004e46:	4a32      	ldr	r2, [pc, #200]	@ (8004f10 <Prismatic_velocity_control+0x150>)
 8004e48:	61da      	str	r2, [r3, #28]
 8004e4a:	4b30      	ldr	r3, [pc, #192]	@ (8004f0c <Prismatic_velocity_control+0x14c>)
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	ed93 7a00 	vldr	s14, [r3]
 8004e58:	edd7 7a03 	vldr	s15, [r7, #12]
 8004e5c:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	edd3 6a01 	vldr	s13, [r3, #4]
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	edd3 7a03 	vldr	s15, [r3, #12]
 8004e6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004e70:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	edd3 6a02 	vldr	s13, [r3, #8]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8004e80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e92:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	615a      	str	r2, [r3, #20]
    return (out);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
	}

	V_pris_velo_PID = arm_pid_f32(&Pris_velo_PID, delta_velo);
 8004eac:	4a16      	ldr	r2, [pc, #88]	@ (8004f08 <Prismatic_velocity_control+0x148>)
 8004eae:	6013      	str	r3, [r2, #0]

	if (V_pris_velo_PID > 24) {
 8004eb0:	4b15      	ldr	r3, [pc, #84]	@ (8004f08 <Prismatic_velocity_control+0x148>)
 8004eb2:	edd3 7a00 	vldr	s15, [r3]
 8004eb6:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8004eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec2:	dd03      	ble.n	8004ecc <Prismatic_velocity_control+0x10c>
		V_pris_velo_PID = 24;
 8004ec4:	4b10      	ldr	r3, [pc, #64]	@ (8004f08 <Prismatic_velocity_control+0x148>)
 8004ec6:	4a13      	ldr	r2, [pc, #76]	@ (8004f14 <Prismatic_velocity_control+0x154>)
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e00c      	b.n	8004ee6 <Prismatic_velocity_control+0x126>
	} else if (V_pris_velo_PID < -24) {
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <Prismatic_velocity_control+0x148>)
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	eebb 7a08 	vmov.f32	s14, #184	@ 0xc1c00000 -24.0
 8004ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ede:	d502      	bpl.n	8004ee6 <Prismatic_velocity_control+0x126>
		V_pris_velo_PID = -24;
 8004ee0:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <Prismatic_velocity_control+0x148>)
 8004ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8004f18 <Prismatic_velocity_control+0x158>)
 8004ee4:	601a      	str	r2, [r3, #0]
	}

	error_velo_pris[1] = error_velo_pris[0];
 8004ee6:	4b07      	ldr	r3, [pc, #28]	@ (8004f04 <Prismatic_velocity_control+0x144>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a06      	ldr	r2, [pc, #24]	@ (8004f04 <Prismatic_velocity_control+0x144>)
 8004eec:	6053      	str	r3, [r2, #4]
	return V_pris_velo_PID;
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <Prismatic_velocity_control+0x148>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	ee07 3a90 	vmov	s15, r3
}
 8004ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8004efa:	371c      	adds	r7, #28
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	20000e40 	.word	0x20000e40
 8004f08:	20000e38 	.word	0x20000e38
 8004f0c:	20000e0c 	.word	0x20000e0c
 8004f10:	3a83126f 	.word	0x3a83126f
 8004f14:	41c00000 	.word	0x41c00000
 8004f18:	c1c00000 	.word	0xc1c00000

08004f1c <Revolute_position_control>:

float Revolute_position_control(float delta_posi) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_posi_rev[0] = delta_posi;
 8004f26:	4a36      	ldr	r2, [pc, #216]	@ (8005000 <Revolute_position_control+0xe4>)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6013      	str	r3, [r2, #0]
//	Rev_posi_PID.Kp = 1;
//	Rev_posi_PID.Kd = 1;

	if (error_posi_rev[0] < 0 && error_posi_rev[1] > 0) {
 8004f2c:	4b34      	ldr	r3, [pc, #208]	@ (8005000 <Revolute_position_control+0xe4>)
 8004f2e:	edd3 7a00 	vldr	s15, [r3]
 8004f32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f3a:	d50a      	bpl.n	8004f52 <Revolute_position_control+0x36>
 8004f3c:	4b30      	ldr	r3, [pc, #192]	@ (8005000 <Revolute_position_control+0xe4>)
 8004f3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	dd02      	ble.n	8004f52 <Revolute_position_control+0x36>
		anti_windup = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e014      	b.n	8004f7c <Revolute_position_control+0x60>
	} else if (error_posi_rev[0] > 0 && error_posi_rev[1] < 0) {
 8004f52:	4b2b      	ldr	r3, [pc, #172]	@ (8005000 <Revolute_position_control+0xe4>)
 8004f54:	edd3 7a00 	vldr	s15, [r3]
 8004f58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	dd0a      	ble.n	8004f78 <Revolute_position_control+0x5c>
 8004f62:	4b27      	ldr	r3, [pc, #156]	@ (8005000 <Revolute_position_control+0xe4>)
 8004f64:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f70:	d502      	bpl.n	8004f78 <Revolute_position_control+0x5c>
		anti_windup = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e001      	b.n	8004f7c <Revolute_position_control+0x60>
	} else {
		anti_windup = 1;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	4b21      	ldr	r3, [pc, #132]	@ (8005004 <Revolute_position_control+0xe8>)
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	ed93 7a00 	vldr	s14, [r3]
 8004f8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f8e:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	edd3 6a01 	vldr	s13, [r3, #4]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8004fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	edd3 7a04 	vldr	s15, [r3, #16]
 8004fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004fb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8004fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc4:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	68ba      	ldr	r2, [r7, #8]
 8004fda:	615a      	str	r2, [r3, #20]
    return (out);
 8004fdc:	68bb      	ldr	r3, [r7, #8]
//		Rev_posi_PID.Ki = 0;
//	} else {
//		Rev_posi_PID.Ki = 1;
//	}

	V_rev_posi_PID = arm_pid_f32(&Rev_posi_PID, delta_posi);
 8004fde:	4a0a      	ldr	r2, [pc, #40]	@ (8005008 <Revolute_position_control+0xec>)
 8004fe0:	6013      	str	r3, [r2, #0]

//	if (V_rev_posi_PID > 24) {
//		V_rev_posi_PID = 24;
//	}

	error_posi_rev[1] = error_posi_rev[0];
 8004fe2:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <Revolute_position_control+0xe4>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a06      	ldr	r2, [pc, #24]	@ (8005000 <Revolute_position_control+0xe4>)
 8004fe8:	6053      	str	r3, [r2, #4]
	return V_rev_posi_PID;
 8004fea:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <Revolute_position_control+0xec>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	ee07 3a90 	vmov	s15, r3
}
 8004ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff6:	371c      	adds	r7, #28
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	20000e7c 	.word	0x20000e7c
 8005004:	20000e4c 	.word	0x20000e4c
 8005008:	20000e78 	.word	0x20000e78

0800500c <Revolute_velocity_control>:

float Revolute_velocity_control(float delta_velo) {
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	ed87 0a01 	vstr	s0, [r7, #4]
	int anti_windup;
	error_velo_rev[0] = delta_velo;
 8005016:	4a47      	ldr	r2, [pc, #284]	@ (8005134 <Revolute_velocity_control+0x128>)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6013      	str	r3, [r2, #0]
//	Rev_velo_PID.Kp = 0.01;

	if (error_velo_rev[0] < 0 && error_velo_rev[1] > 0) {
 800501c:	4b45      	ldr	r3, [pc, #276]	@ (8005134 <Revolute_velocity_control+0x128>)
 800501e:	edd3 7a00 	vldr	s15, [r3]
 8005022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800502a:	d50a      	bpl.n	8005042 <Revolute_velocity_control+0x36>
 800502c:	4b41      	ldr	r3, [pc, #260]	@ (8005134 <Revolute_velocity_control+0x128>)
 800502e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503a:	dd02      	ble.n	8005042 <Revolute_velocity_control+0x36>
		anti_windup = 0;
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e014      	b.n	800506c <Revolute_velocity_control+0x60>
	} else if (error_velo_rev[0] > 0 && error_velo_rev[1] < 0) {
 8005042:	4b3c      	ldr	r3, [pc, #240]	@ (8005134 <Revolute_velocity_control+0x128>)
 8005044:	edd3 7a00 	vldr	s15, [r3]
 8005048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800504c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005050:	dd0a      	ble.n	8005068 <Revolute_velocity_control+0x5c>
 8005052:	4b38      	ldr	r3, [pc, #224]	@ (8005134 <Revolute_velocity_control+0x128>)
 8005054:	edd3 7a01 	vldr	s15, [r3, #4]
 8005058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	d502      	bpl.n	8005068 <Revolute_velocity_control+0x5c>
		anti_windup = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	e001      	b.n	800506c <Revolute_velocity_control+0x60>
	} else {
		anti_windup = 1;
 8005068:	2301      	movs	r3, #1
 800506a:	617b      	str	r3, [r7, #20]
	}

	if (V_rev_velo_PID >= 18 && anti_windup == 0) {
 800506c:	4b32      	ldr	r3, [pc, #200]	@ (8005138 <Revolute_velocity_control+0x12c>)
 800506e:	edd3 7a00 	vldr	s15, [r3]
 8005072:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 8005076:	eef4 7ac7 	vcmpe.f32	s15, s14
 800507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507e:	db07      	blt.n	8005090 <Revolute_velocity_control+0x84>
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d104      	bne.n	8005090 <Revolute_velocity_control+0x84>
		Rev_velo_PID.Ki = 0;
 8005086:	4b2d      	ldr	r3, [pc, #180]	@ (800513c <Revolute_velocity_control+0x130>)
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	61da      	str	r2, [r3, #28]
 800508e:	e002      	b.n	8005096 <Revolute_velocity_control+0x8a>
	} else {
		Rev_velo_PID.Ki = 0.001;
 8005090:	4b2a      	ldr	r3, [pc, #168]	@ (800513c <Revolute_velocity_control+0x130>)
 8005092:	4a2b      	ldr	r2, [pc, #172]	@ (8005140 <Revolute_velocity_control+0x134>)
 8005094:	61da      	str	r2, [r3, #28]
	}

	if (V_rev_velo_PID > 18) {
 8005096:	4b28      	ldr	r3, [pc, #160]	@ (8005138 <Revolute_velocity_control+0x12c>)
 8005098:	edd3 7a00 	vldr	s15, [r3]
 800509c:	eeb3 7a02 	vmov.f32	s14, #50	@ 0x41900000  18.0
 80050a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a8:	dd02      	ble.n	80050b0 <Revolute_velocity_control+0xa4>
		V_rev_velo_PID = 18;
 80050aa:	4b23      	ldr	r3, [pc, #140]	@ (8005138 <Revolute_velocity_control+0x12c>)
 80050ac:	4a25      	ldr	r2, [pc, #148]	@ (8005144 <Revolute_velocity_control+0x138>)
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	4b22      	ldr	r3, [pc, #136]	@ (800513c <Revolute_velocity_control+0x130>)
 80050b2:	613b      	str	r3, [r7, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
    out = (S->A0 * in) +
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	ed93 7a00 	vldr	s14, [r3]
 80050be:	edd7 7a03 	vldr	s15, [r7, #12]
 80050c2:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80050d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80050d6:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	edd3 7a04 	vldr	s15, [r3, #16]
 80050e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80050f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f8:	edc7 7a02 	vstr	s15, [r7, #8]
    S->state[1] = S->state[0];
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	615a      	str	r2, [r3, #20]
    return (out);
 8005110:	68bb      	ldr	r3, [r7, #8]
	}

	V_rev_velo_PID = arm_pid_f32(&Rev_velo_PID, delta_velo);
 8005112:	4a09      	ldr	r2, [pc, #36]	@ (8005138 <Revolute_velocity_control+0x12c>)
 8005114:	6013      	str	r3, [r2, #0]
	error_velo_rev[1] = error_velo_rev[0];
 8005116:	4b07      	ldr	r3, [pc, #28]	@ (8005134 <Revolute_velocity_control+0x128>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a06      	ldr	r2, [pc, #24]	@ (8005134 <Revolute_velocity_control+0x128>)
 800511c:	6053      	str	r3, [r2, #4]
	return V_rev_velo_PID;
 800511e:	4b06      	ldr	r3, [pc, #24]	@ (8005138 <Revolute_velocity_control+0x12c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	ee07 3a90 	vmov	s15, r3
}
 8005126:	eeb0 0a67 	vmov.f32	s0, s15
 800512a:	371c      	adds	r7, #28
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	20000ebc 	.word	0x20000ebc
 8005138:	20000eb4 	.word	0x20000eb4
 800513c:	20000e88 	.word	0x20000e88
 8005140:	3a83126f 	.word	0x3a83126f
 8005144:	41900000 	.word	0x41900000

08005148 <voltage_to_pwm>:

float voltage_to_pwm(float voltage) {
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwm = (voltage * 65535) / 24;
 8005152:	edd7 7a01 	vldr	s15, [r7, #4]
 8005156:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005180 <voltage_to_pwm+0x38>
 800515a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800515e:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8005162:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005166:	edc7 7a03 	vstr	s15, [r7, #12]
	return pwm;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	ee07 3a90 	vmov	s15, r3
}
 8005170:	eeb0 0a67 	vmov.f32	s0, s15
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	477fff00 	.word	0x477fff00
 8005184:	00000000 	.word	0x00000000

08005188 <Revolute_dis>:
//	float load = 0.01 / (2.0 * (22.0/7.0) * 4.0 * motor.Kt_Pri);
//	voltage_dis = (disturbance_feedforward_pri(&motor, load)) * (0.3*9.81) * gain_disturbance; // อย่าลืมคูณ sin(theta)
//	return voltage_dis;
//}

float Revolute_dis() {
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	af00      	add	r7, sp, #0
	load = (8.2 * 9.81 * 0.45
			* sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0)))
 800518c:	486c      	ldr	r0, [pc, #432]	@ (8005340 <Revolute_dis+0x1b8>)
 800518e:	f7fc ff2d 	bl	8001fec <Encoder_GetPosition>
 8005192:	ee10 3a10 	vmov	r3, s0
 8005196:	4618      	mov	r0, r3
 8005198:	f7fb f9a2 	bl	80004e0 <__aeabi_f2d>
 800519c:	a35e      	add	r3, pc, #376	@ (adr r3, 8005318 <Revolute_dis+0x190>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb fb1f 	bl	80007e4 <__aeabi_ddiv>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f7fb fcbf 	bl	8000b30 <__aeabi_d2f>
 80051b2:	4603      	mov	r3, r0
 80051b4:	ee00 3a10 	vmov	s0, r3
 80051b8:	f00a fa1a 	bl	800f5f0 <sinf>
 80051bc:	ee10 3a10 	vmov	r3, s0
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fb f98d 	bl	80004e0 <__aeabi_f2d>
 80051c6:	a356      	add	r3, pc, #344	@ (adr r3, 8005320 <Revolute_dis+0x198>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb f9e0 	bl	8000590 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
			+ (0.3 * 9.81
					* sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0))
 80051d8:	4859      	ldr	r0, [pc, #356]	@ (8005340 <Revolute_dis+0x1b8>)
 80051da:	f7fc ff07 	bl	8001fec <Encoder_GetPosition>
 80051de:	ee10 3a10 	vmov	r3, s0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f97c 	bl	80004e0 <__aeabi_f2d>
 80051e8:	a34b      	add	r3, pc, #300	@ (adr r3, 8005318 <Revolute_dis+0x190>)
 80051ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ee:	f7fb faf9 	bl	80007e4 <__aeabi_ddiv>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4610      	mov	r0, r2
 80051f8:	4619      	mov	r1, r3
 80051fa:	f7fb fc99 	bl	8000b30 <__aeabi_d2f>
 80051fe:	4603      	mov	r3, r0
 8005200:	ee00 3a10 	vmov	s0, r3
 8005204:	f00a f9f4 	bl	800f5f0 <sinf>
 8005208:	ee10 3a10 	vmov	r3, s0
 800520c:	4618      	mov	r0, r3
 800520e:	f7fb f967 	bl	80004e0 <__aeabi_f2d>
 8005212:	a345      	add	r3, pc, #276	@ (adr r3, 8005328 <Revolute_dis+0x1a0>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb f9ba 	bl	8000590 <__aeabi_dmul>
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4610      	mov	r0, r2
 8005222:	4619      	mov	r1, r3
					* 0.4);
 8005224:	a342      	add	r3, pc, #264	@ (adr r3, 8005330 <Revolute_dis+0x1a8>)
 8005226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522a:	f7fb f9b1 	bl	8000590 <__aeabi_dmul>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
			+ (0.3 * 9.81
 8005232:	4620      	mov	r0, r4
 8005234:	4629      	mov	r1, r5
 8005236:	f7fa fff5 	bl	8000224 <__adddf3>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	f7fb fc75 	bl	8000b30 <__aeabi_d2f>
 8005246:	4603      	mov	r3, r0
	load = (8.2 * 9.81 * 0.45
 8005248:	4a3e      	ldr	r2, [pc, #248]	@ (8005344 <Revolute_dis+0x1bc>)
 800524a:	6013      	str	r3, [r2, #0]
	sine = sinf(Encoder_GetPosition(&encoder2) / (100.0 / 30.0));
 800524c:	483c      	ldr	r0, [pc, #240]	@ (8005340 <Revolute_dis+0x1b8>)
 800524e:	f7fc fecd 	bl	8001fec <Encoder_GetPosition>
 8005252:	ee10 3a10 	vmov	r3, s0
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb f942 	bl	80004e0 <__aeabi_f2d>
 800525c:	a32e      	add	r3, pc, #184	@ (adr r3, 8005318 <Revolute_dis+0x190>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb fabf 	bl	80007e4 <__aeabi_ddiv>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4610      	mov	r0, r2
 800526c:	4619      	mov	r1, r3
 800526e:	f7fb fc5f 	bl	8000b30 <__aeabi_d2f>
 8005272:	4603      	mov	r3, r0
 8005274:	ee00 3a10 	vmov	s0, r3
 8005278:	f00a f9ba 	bl	800f5f0 <sinf>
 800527c:	eef0 7a40 	vmov.f32	s15, s0
 8005280:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <Revolute_dis+0x1c0>)
 8005282:	edc3 7a00 	vstr	s15, [r3]
	encoder = Encoder_GetPosition(&encoder2) / (100.0 / 30.0);
 8005286:	482e      	ldr	r0, [pc, #184]	@ (8005340 <Revolute_dis+0x1b8>)
 8005288:	f7fc feb0 	bl	8001fec <Encoder_GetPosition>
 800528c:	ee10 3a10 	vmov	r3, s0
 8005290:	4618      	mov	r0, r3
 8005292:	f7fb f925 	bl	80004e0 <__aeabi_f2d>
 8005296:	a320      	add	r3, pc, #128	@ (adr r3, 8005318 <Revolute_dis+0x190>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	f7fb faa2 	bl	80007e4 <__aeabi_ddiv>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4610      	mov	r0, r2
 80052a6:	4619      	mov	r1, r3
 80052a8:	f7fb fc42 	bl	8000b30 <__aeabi_d2f>
 80052ac:	4603      	mov	r3, r0
 80052ae:	4a27      	ldr	r2, [pc, #156]	@ (800534c <Revolute_dis+0x1c4>)
 80052b0:	6013      	str	r3, [r2, #0]
//	load = (8.2 * 9.81 * 0.45 * cosf(1.57)) + (0.3 * 9.81 * cosf(1.57) * 0.4);
//	voltage_dis_rev = (disturbance_feedforward(&Rev_motor, load)) * gain_disturbance_rev;
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 80052b2:	4b27      	ldr	r3, [pc, #156]	@ (8005350 <Revolute_dis+0x1c8>)
 80052b4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80052b8:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <Revolute_dis+0x1c8>)
 80052ba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80052be:	f7fb fa91 	bl	80007e4 <__aeabi_ddiv>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4614      	mov	r4, r2
 80052c8:	461d      	mov	r5, r3
 80052ca:	4b22      	ldr	r3, [pc, #136]	@ (8005354 <Revolute_dis+0x1cc>)
 80052cc:	f8d3 323c 	ldr.w	r3, [r3, #572]	@ 0x23c
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb f905 	bl	80004e0 <__aeabi_f2d>
 80052d6:	4602      	mov	r2, r0
 80052d8:	460b      	mov	r3, r1
			* 1.0 / 3.3;
 80052da:	4620      	mov	r0, r4
 80052dc:	4629      	mov	r1, r5
 80052de:	f7fb f957 	bl	8000590 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4610      	mov	r0, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	a313      	add	r3, pc, #76	@ (adr r3, 8005338 <Revolute_dis+0x1b0>)
 80052ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f0:	f7fb fa78 	bl	80007e4 <__aeabi_ddiv>
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4610      	mov	r0, r2
 80052fa:	4619      	mov	r1, r3
 80052fc:	f7fb fc18 	bl	8000b30 <__aeabi_d2f>
 8005300:	4603      	mov	r3, r0
	voltage_dis_rev = (Rev_motor.R_Rev / Rev_motor.Ke_Rev) * kf_rev.x_data[2]
 8005302:	4a15      	ldr	r2, [pc, #84]	@ (8005358 <Revolute_dis+0x1d0>)
 8005304:	6013      	str	r3, [r2, #0]
	return voltage_dis_rev;
 8005306:	4b14      	ldr	r3, [pc, #80]	@ (8005358 <Revolute_dis+0x1d0>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	ee07 3a90 	vmov	s15, r3
}
 800530e:	eeb0 0a67 	vmov.f32	s0, s15
 8005312:	bdb0      	pop	{r4, r5, r7, pc}
 8005314:	f3af 8000 	nop.w
 8005318:	aaaaaaab 	.word	0xaaaaaaab
 800531c:	400aaaaa 	.word	0x400aaaaa
 8005320:	8e219652 	.word	0x8e219652
 8005324:	40421975 	.word	0x40421975
 8005328:	95810625 	.word	0x95810625
 800532c:	40078b43 	.word	0x40078b43
 8005330:	9999999a 	.word	0x9999999a
 8005334:	3fd99999 	.word	0x3fd99999
 8005338:	66666666 	.word	0x66666666
 800533c:	400a6666 	.word	0x400a6666
 8005340:	200003f8 	.word	0x200003f8
 8005344:	200015a8 	.word	0x200015a8
 8005348:	200015ac 	.word	0x200015ac
 800534c:	200015b0 	.word	0x200015b0
 8005350:	20001550 	.word	0x20001550
 8005354:	200011f4 	.word	0x200011f4
 8005358:	20000db8 	.word	0x20000db8

0800535c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005360:	b672      	cpsid	i
}
 8005362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <Error_Handler+0x8>

08005368 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800536c:	4b1b      	ldr	r3, [pc, #108]	@ (80053dc <MX_SPI1_Init+0x74>)
 800536e:	4a1c      	ldr	r2, [pc, #112]	@ (80053e0 <MX_SPI1_Init+0x78>)
 8005370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005372:	4b1a      	ldr	r3, [pc, #104]	@ (80053dc <MX_SPI1_Init+0x74>)
 8005374:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800537a:	4b18      	ldr	r3, [pc, #96]	@ (80053dc <MX_SPI1_Init+0x74>)
 800537c:	2200      	movs	r2, #0
 800537e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005380:	4b16      	ldr	r3, [pc, #88]	@ (80053dc <MX_SPI1_Init+0x74>)
 8005382:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8005386:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005388:	4b14      	ldr	r3, [pc, #80]	@ (80053dc <MX_SPI1_Init+0x74>)
 800538a:	2202      	movs	r2, #2
 800538c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800538e:	4b13      	ldr	r3, [pc, #76]	@ (80053dc <MX_SPI1_Init+0x74>)
 8005390:	2201      	movs	r2, #1
 8005392:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005394:	4b11      	ldr	r3, [pc, #68]	@ (80053dc <MX_SPI1_Init+0x74>)
 8005396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800539a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800539c:	4b0f      	ldr	r3, [pc, #60]	@ (80053dc <MX_SPI1_Init+0x74>)
 800539e:	2238      	movs	r2, #56	@ 0x38
 80053a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80053a2:	4b0e      	ldr	r3, [pc, #56]	@ (80053dc <MX_SPI1_Init+0x74>)
 80053a4:	2280      	movs	r2, #128	@ 0x80
 80053a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80053a8:	4b0c      	ldr	r3, [pc, #48]	@ (80053dc <MX_SPI1_Init+0x74>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053ae:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <MX_SPI1_Init+0x74>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80053b4:	4b09      	ldr	r3, [pc, #36]	@ (80053dc <MX_SPI1_Init+0x74>)
 80053b6:	2207      	movs	r2, #7
 80053b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80053ba:	4b08      	ldr	r3, [pc, #32]	@ (80053dc <MX_SPI1_Init+0x74>)
 80053bc:	2200      	movs	r2, #0
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80053c0:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <MX_SPI1_Init+0x74>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80053c6:	4805      	ldr	r0, [pc, #20]	@ (80053dc <MX_SPI1_Init+0x74>)
 80053c8:	f004 f844 	bl	8009454 <HAL_SPI_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80053d2:	f7ff ffc3 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20001680 	.word	0x20001680
 80053e0:	40013000 	.word	0x40013000

080053e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08a      	sub	sp, #40	@ 0x28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f107 0314 	add.w	r3, r7, #20
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	609a      	str	r2, [r3, #8]
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a25      	ldr	r2, [pc, #148]	@ (8005498 <HAL_SPI_MspInit+0xb4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d144      	bne.n	8005490 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005406:	4b25      	ldr	r3, [pc, #148]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 8005408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540a:	4a24      	ldr	r2, [pc, #144]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 800540c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005410:	6613      	str	r3, [r2, #96]	@ 0x60
 8005412:	4b22      	ldr	r3, [pc, #136]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 8005414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800541e:	4b1f      	ldr	r3, [pc, #124]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 8005420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005422:	4a1e      	ldr	r2, [pc, #120]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 8005424:	f043 0301 	orr.w	r3, r3, #1
 8005428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800542a:	4b1c      	ldr	r3, [pc, #112]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 800542c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005436:	4b19      	ldr	r3, [pc, #100]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 8005438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800543a:	4a18      	ldr	r2, [pc, #96]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 800543c:	f043 0302 	orr.w	r3, r3, #2
 8005440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005442:	4b16      	ldr	r3, [pc, #88]	@ (800549c <HAL_SPI_MspInit+0xb8>)
 8005444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800544e:	2320      	movs	r3, #32
 8005450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005452:	2302      	movs	r3, #2
 8005454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545a:	2300      	movs	r3, #0
 800545c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800545e:	2305      	movs	r3, #5
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005462:	f107 0314 	add.w	r3, r7, #20
 8005466:	4619      	mov	r1, r3
 8005468:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800546c:	f002 fe10 	bl	8008090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005470:	2330      	movs	r3, #48	@ 0x30
 8005472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005474:	2302      	movs	r3, #2
 8005476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005478:	2300      	movs	r3, #0
 800547a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547c:	2300      	movs	r3, #0
 800547e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005480:	2305      	movs	r3, #5
 8005482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	4619      	mov	r1, r3
 800548a:	4805      	ldr	r0, [pc, #20]	@ (80054a0 <HAL_SPI_MspInit+0xbc>)
 800548c:	f002 fe00 	bl	8008090 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8005490:	bf00      	nop
 8005492:	3728      	adds	r7, #40	@ 0x28
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40013000 	.word	0x40013000
 800549c:	40021000 	.word	0x40021000
 80054a0:	48000400 	.word	0x48000400

080054a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054aa:	4b0f      	ldr	r3, [pc, #60]	@ (80054e8 <HAL_MspInit+0x44>)
 80054ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ae:	4a0e      	ldr	r2, [pc, #56]	@ (80054e8 <HAL_MspInit+0x44>)
 80054b0:	f043 0301 	orr.w	r3, r3, #1
 80054b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80054b6:	4b0c      	ldr	r3, [pc, #48]	@ (80054e8 <HAL_MspInit+0x44>)
 80054b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054c2:	4b09      	ldr	r3, [pc, #36]	@ (80054e8 <HAL_MspInit+0x44>)
 80054c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c6:	4a08      	ldr	r2, [pc, #32]	@ (80054e8 <HAL_MspInit+0x44>)
 80054c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80054ce:	4b06      	ldr	r3, [pc, #24]	@ (80054e8 <HAL_MspInit+0x44>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80054da:	f003 f82f 	bl	800853c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000

080054ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054f0:	bf00      	nop
 80054f2:	e7fd      	b.n	80054f0 <NMI_Handler+0x4>

080054f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054f8:	bf00      	nop
 80054fa:	e7fd      	b.n	80054f8 <HardFault_Handler+0x4>

080054fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005500:	bf00      	nop
 8005502:	e7fd      	b.n	8005500 <MemManage_Handler+0x4>

08005504 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <BusFault_Handler+0x4>

0800550c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800550c:	b480      	push	{r7}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005510:	bf00      	nop
 8005512:	e7fd      	b.n	8005510 <UsageFault_Handler+0x4>

08005514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005514:	b480      	push	{r7}
 8005516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005518:	bf00      	nop
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005526:	bf00      	nop
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005530:	b480      	push	{r7}
 8005532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005534:	bf00      	nop
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005542:	f000 fe7b 	bl	800623c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005546:	bf00      	nop
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005550:	4802      	ldr	r0, [pc, #8]	@ (800555c <DMA1_Channel1_IRQHandler+0x10>)
 8005552:	f002 fc42 	bl	8007dda <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20001d44 	.word	0x20001d44

08005560 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_1_Pin);
 8005564:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8005568:	f002 ff2c 	bl	80083c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800556c:	bf00      	nop
 800556e:	bd80      	pop	{r7, pc}

08005570 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005574:	4802      	ldr	r0, [pc, #8]	@ (8005580 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8005576:	f005 f90d 	bl	800a794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800557a:	bf00      	nop
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	200016e4 	.word	0x200016e4

08005584 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005588:	4803      	ldr	r0, [pc, #12]	@ (8005598 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800558a:	f005 f903 	bl	800a794 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800558e:	4803      	ldr	r0, [pc, #12]	@ (800559c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005590:	f005 f900 	bl	800a794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005594:	bf00      	nop
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200016e4 	.word	0x200016e4
 800559c:	20001ae0 	.word	0x20001ae0

080055a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055a4:	4802      	ldr	r0, [pc, #8]	@ (80055b0 <TIM2_IRQHandler+0x10>)
 80055a6:	f005 f8f5 	bl	800a794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80055aa:	bf00      	nop
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200017b0 	.word	0x200017b0

080055b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055b8:	4802      	ldr	r0, [pc, #8]	@ (80055c4 <USART2_IRQHandler+0x10>)
 80055ba:	f006 ffef 	bl	800c59c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055be:	bf00      	nop
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20001c78 	.word	0x20001c78

080055c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_pen_2_Pin);
 80055cc:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80055d0:	f002 fef8 	bl	80083c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_Pin);
 80055d4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80055d8:	f002 fef4 	bl	80083c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_sensor_Pin);
 80055dc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80055e0:	f002 fef0 	bl	80083c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Proximity_Left_Pin);
 80055e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80055e8:	f002 feec 	bl	80083c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic1_Pin);
 80055ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80055f0:	f002 fee8 	bl	80083c4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Limit_Switch_Prismatic2_Pin);
 80055f4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80055f8:	f002 fee4 	bl	80083c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055fc:	bf00      	nop
 80055fe:	bd80      	pop	{r7, pc}

08005600 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005604:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <SystemInit+0x20>)
 8005606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800560a:	4a05      	ldr	r2, [pc, #20]	@ (8005620 <SystemInit+0x20>)
 800560c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005614:	bf00      	nop
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	e000ed00 	.word	0xe000ed00

08005624 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim20;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800562a:	f107 0310 	add.w	r3, r7, #16
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	605a      	str	r2, [r3, #4]
 8005634:	609a      	str	r2, [r3, #8]
 8005636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005638:	1d3b      	adds	r3, r7, #4
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]
 800563e:	605a      	str	r2, [r3, #4]
 8005640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005642:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 8005644:	4a20      	ldr	r2, [pc, #128]	@ (80056c8 <MX_TIM1_Init+0xa4>)
 8005646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005648:	4b1e      	ldr	r3, [pc, #120]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 800564a:	2200      	movs	r2, #0
 800564c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800564e:	4b1d      	ldr	r3, [pc, #116]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 8005650:	2200      	movs	r2, #0
 8005652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 8005654:	4b1b      	ldr	r3, [pc, #108]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 8005656:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800565a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800565c:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 800565e:	2200      	movs	r2, #0
 8005660:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005662:	4b18      	ldr	r3, [pc, #96]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 8005664:	2200      	movs	r2, #0
 8005666:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005668:	4b16      	ldr	r3, [pc, #88]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 800566a:	2200      	movs	r2, #0
 800566c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800566e:	4815      	ldr	r0, [pc, #84]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 8005670:	f004 fb1e 	bl	8009cb0 <HAL_TIM_Base_Init>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800567a:	f7ff fe6f 	bl	800535c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800567e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005682:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005684:	f107 0310 	add.w	r3, r7, #16
 8005688:	4619      	mov	r1, r3
 800568a:	480e      	ldr	r0, [pc, #56]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 800568c:	f005 fb8a 	bl	800ada4 <HAL_TIM_ConfigClockSource>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8005696:	f7ff fe61 	bl	800535c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800569a:	2300      	movs	r3, #0
 800569c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800569e:	2300      	movs	r3, #0
 80056a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056a6:	1d3b      	adds	r3, r7, #4
 80056a8:	4619      	mov	r1, r3
 80056aa:	4806      	ldr	r0, [pc, #24]	@ (80056c4 <MX_TIM1_Init+0xa0>)
 80056ac:	f006 fb60 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80056b6:	f7ff fe51 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80056ba:	bf00      	nop
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	200016e4 	.word	0x200016e4
 80056c8:	40012c00 	.word	0x40012c00

080056cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056d2:	f107 0310 	add.w	r3, r7, #16
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	605a      	str	r2, [r3, #4]
 80056dc:	609a      	str	r2, [r3, #8]
 80056de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005764 <MX_TIM2_Init+0x98>)
 80056ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80056f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80056f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005764 <MX_TIM2_Init+0x98>)
 80056f4:	22a9      	movs	r2, #169	@ 0xa9
 80056f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005764 <MX_TIM2_Init+0x98>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80056fe:	4b19      	ldr	r3, [pc, #100]	@ (8005764 <MX_TIM2_Init+0x98>)
 8005700:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005704:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005706:	4b17      	ldr	r3, [pc, #92]	@ (8005764 <MX_TIM2_Init+0x98>)
 8005708:	2200      	movs	r2, #0
 800570a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800570c:	4b15      	ldr	r3, [pc, #84]	@ (8005764 <MX_TIM2_Init+0x98>)
 800570e:	2200      	movs	r2, #0
 8005710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005712:	4814      	ldr	r0, [pc, #80]	@ (8005764 <MX_TIM2_Init+0x98>)
 8005714:	f004 facc 	bl	8009cb0 <HAL_TIM_Base_Init>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800571e:	f7ff fe1d 	bl	800535c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005728:	f107 0310 	add.w	r3, r7, #16
 800572c:	4619      	mov	r1, r3
 800572e:	480d      	ldr	r0, [pc, #52]	@ (8005764 <MX_TIM2_Init+0x98>)
 8005730:	f005 fb38 	bl	800ada4 <HAL_TIM_ConfigClockSource>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800573a:	f7ff fe0f 	bl	800535c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800573e:	2300      	movs	r3, #0
 8005740:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005746:	1d3b      	adds	r3, r7, #4
 8005748:	4619      	mov	r1, r3
 800574a:	4806      	ldr	r0, [pc, #24]	@ (8005764 <MX_TIM2_Init+0x98>)
 800574c:	f006 fb10 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005756:	f7ff fe01 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800575a:	bf00      	nop
 800575c:	3720      	adds	r7, #32
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200017b0 	.word	0x200017b0

08005768 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b08c      	sub	sp, #48	@ 0x30
 800576c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800576e:	f107 030c 	add.w	r3, r7, #12
 8005772:	2224      	movs	r2, #36	@ 0x24
 8005774:	2100      	movs	r1, #0
 8005776:	4618      	mov	r0, r3
 8005778:	f009 fdc0 	bl	800f2fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800577c:	463b      	mov	r3, r7
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005786:	4b21      	ldr	r3, [pc, #132]	@ (800580c <MX_TIM3_Init+0xa4>)
 8005788:	4a21      	ldr	r2, [pc, #132]	@ (8005810 <MX_TIM3_Init+0xa8>)
 800578a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800578c:	4b1f      	ldr	r3, [pc, #124]	@ (800580c <MX_TIM3_Init+0xa4>)
 800578e:	2200      	movs	r2, #0
 8005790:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005792:	4b1e      	ldr	r3, [pc, #120]	@ (800580c <MX_TIM3_Init+0xa4>)
 8005794:	2200      	movs	r2, #0
 8005796:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8005798:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <MX_TIM3_Init+0xa4>)
 800579a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800579e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057a0:	4b1a      	ldr	r3, [pc, #104]	@ (800580c <MX_TIM3_Init+0xa4>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057a6:	4b19      	ldr	r3, [pc, #100]	@ (800580c <MX_TIM3_Init+0xa4>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80057ac:	2303      	movs	r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057b0:	2300      	movs	r3, #0
 80057b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057b4:	2301      	movs	r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057c0:	2300      	movs	r3, #0
 80057c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057c4:	2301      	movs	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80057cc:	2300      	movs	r3, #0
 80057ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80057d0:	f107 030c 	add.w	r3, r7, #12
 80057d4:	4619      	mov	r1, r3
 80057d6:	480d      	ldr	r0, [pc, #52]	@ (800580c <MX_TIM3_Init+0xa4>)
 80057d8:	f004 fe9a 	bl	800a510 <HAL_TIM_Encoder_Init>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80057e2:	f7ff fdbb 	bl	800535c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057e6:	2300      	movs	r3, #0
 80057e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80057ee:	463b      	mov	r3, r7
 80057f0:	4619      	mov	r1, r3
 80057f2:	4806      	ldr	r0, [pc, #24]	@ (800580c <MX_TIM3_Init+0xa4>)
 80057f4:	f006 fabc 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80057fe:	f7ff fdad 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005802:	bf00      	nop
 8005804:	3730      	adds	r7, #48	@ 0x30
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	2000187c 	.word	0x2000187c
 8005810:	40000400 	.word	0x40000400

08005814 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08c      	sub	sp, #48	@ 0x30
 8005818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	2224      	movs	r2, #36	@ 0x24
 8005820:	2100      	movs	r1, #0
 8005822:	4618      	mov	r0, r3
 8005824:	f009 fd6a 	bl	800f2fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005828:	463b      	mov	r3, r7
 800582a:	2200      	movs	r2, #0
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	605a      	str	r2, [r3, #4]
 8005830:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005832:	4b21      	ldr	r3, [pc, #132]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 8005834:	4a21      	ldr	r2, [pc, #132]	@ (80058bc <MX_TIM4_Init+0xa8>)
 8005836:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005838:	4b1f      	ldr	r3, [pc, #124]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800583e:	4b1e      	ldr	r3, [pc, #120]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59999;
 8005844:	4b1c      	ldr	r3, [pc, #112]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 8005846:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800584a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800584c:	4b1a      	ldr	r3, [pc, #104]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 800584e:	2200      	movs	r2, #0
 8005850:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005852:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 8005854:	2200      	movs	r2, #0
 8005856:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005858:	2303      	movs	r3, #3
 800585a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005860:	2301      	movs	r3, #1
 8005862:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005864:	2300      	movs	r3, #0
 8005866:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005868:	2300      	movs	r3, #0
 800586a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800586c:	2300      	movs	r3, #0
 800586e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005870:	2301      	movs	r3, #1
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005874:	2300      	movs	r3, #0
 8005876:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800587c:	f107 030c 	add.w	r3, r7, #12
 8005880:	4619      	mov	r1, r3
 8005882:	480d      	ldr	r0, [pc, #52]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 8005884:	f004 fe44 	bl	800a510 <HAL_TIM_Encoder_Init>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800588e:	f7ff fd65 	bl	800535c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005892:	2300      	movs	r3, #0
 8005894:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005896:	2300      	movs	r3, #0
 8005898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800589a:	463b      	mov	r3, r7
 800589c:	4619      	mov	r1, r3
 800589e:	4806      	ldr	r0, [pc, #24]	@ (80058b8 <MX_TIM4_Init+0xa4>)
 80058a0:	f006 fa66 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80058aa:	f7ff fd57 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80058ae:	bf00      	nop
 80058b0:	3730      	adds	r7, #48	@ 0x30
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20001948 	.word	0x20001948
 80058bc:	40000800 	.word	0x40000800

080058c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b09c      	sub	sp, #112	@ 0x70
 80058c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80058c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	605a      	str	r2, [r3, #4]
 80058d0:	609a      	str	r2, [r3, #8]
 80058d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80058e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	609a      	str	r2, [r3, #8]
 80058ec:	60da      	str	r2, [r3, #12]
 80058ee:	611a      	str	r2, [r3, #16]
 80058f0:	615a      	str	r2, [r3, #20]
 80058f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80058f4:	1d3b      	adds	r3, r7, #4
 80058f6:	2234      	movs	r2, #52	@ 0x34
 80058f8:	2100      	movs	r1, #0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f009 fcfe 	bl	800f2fc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005900:	4b45      	ldr	r3, [pc, #276]	@ (8005a18 <MX_TIM8_Init+0x158>)
 8005902:	4a46      	ldr	r2, [pc, #280]	@ (8005a1c <MX_TIM8_Init+0x15c>)
 8005904:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005906:	4b44      	ldr	r3, [pc, #272]	@ (8005a18 <MX_TIM8_Init+0x158>)
 8005908:	2200      	movs	r2, #0
 800590a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800590c:	4b42      	ldr	r3, [pc, #264]	@ (8005a18 <MX_TIM8_Init+0x158>)
 800590e:	2200      	movs	r2, #0
 8005910:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005912:	4b41      	ldr	r3, [pc, #260]	@ (8005a18 <MX_TIM8_Init+0x158>)
 8005914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005918:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800591a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a18 <MX_TIM8_Init+0x158>)
 800591c:	2200      	movs	r2, #0
 800591e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005920:	4b3d      	ldr	r3, [pc, #244]	@ (8005a18 <MX_TIM8_Init+0x158>)
 8005922:	2200      	movs	r2, #0
 8005924:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005926:	4b3c      	ldr	r3, [pc, #240]	@ (8005a18 <MX_TIM8_Init+0x158>)
 8005928:	2200      	movs	r2, #0
 800592a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800592c:	483a      	ldr	r0, [pc, #232]	@ (8005a18 <MX_TIM8_Init+0x158>)
 800592e:	f004 f9bf 	bl	8009cb0 <HAL_TIM_Base_Init>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005938:	f7ff fd10 	bl	800535c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800593c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005940:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005942:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005946:	4619      	mov	r1, r3
 8005948:	4833      	ldr	r0, [pc, #204]	@ (8005a18 <MX_TIM8_Init+0x158>)
 800594a:	f005 fa2b 	bl	800ada4 <HAL_TIM_ConfigClockSource>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005954:	f7ff fd02 	bl	800535c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005958:	482f      	ldr	r0, [pc, #188]	@ (8005a18 <MX_TIM8_Init+0x158>)
 800595a:	f004 fb63 	bl	800a024 <HAL_TIM_PWM_Init>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8005964:	f7ff fcfa 	bl	800535c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005968:	2300      	movs	r3, #0
 800596a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800596c:	2300      	movs	r3, #0
 800596e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005970:	2300      	movs	r3, #0
 8005972:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005974:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005978:	4619      	mov	r1, r3
 800597a:	4827      	ldr	r0, [pc, #156]	@ (8005a18 <MX_TIM8_Init+0x158>)
 800597c:	f006 f9f8 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8005986:	f7ff fce9 	bl	800535c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800598a:	2360      	movs	r3, #96	@ 0x60
 800598c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005992:	2300      	movs	r3, #0
 8005994:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005996:	2300      	movs	r3, #0
 8005998:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800599a:	2300      	movs	r3, #0
 800599c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800599e:	2300      	movs	r3, #0
 80059a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80059a2:	2300      	movs	r3, #0
 80059a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80059a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80059aa:	220c      	movs	r2, #12
 80059ac:	4619      	mov	r1, r3
 80059ae:	481a      	ldr	r0, [pc, #104]	@ (8005a18 <MX_TIM8_Init+0x158>)
 80059b0:	f005 f8e4 	bl	800ab7c <HAL_TIM_PWM_ConfigChannel>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80059ba:	f7ff fccf 	bl	800535c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80059d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80059dc:	2300      	movs	r3, #0
 80059de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80059e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80059ee:	2300      	movs	r3, #0
 80059f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80059f6:	1d3b      	adds	r3, r7, #4
 80059f8:	4619      	mov	r1, r3
 80059fa:	4807      	ldr	r0, [pc, #28]	@ (8005a18 <MX_TIM8_Init+0x158>)
 80059fc:	f006 fa4e 	bl	800be9c <HAL_TIMEx_ConfigBreakDeadTime>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 8005a06:	f7ff fca9 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005a0a:	4803      	ldr	r0, [pc, #12]	@ (8005a18 <MX_TIM8_Init+0x158>)
 8005a0c:	f000 fa44 	bl	8005e98 <HAL_TIM_MspPostInit>

}
 8005a10:	bf00      	nop
 8005a12:	3770      	adds	r7, #112	@ 0x70
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20001a14 	.word	0x20001a14
 8005a1c:	40013400 	.word	0x40013400

08005a20 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b094      	sub	sp, #80	@ 0x50
 8005a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a26:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
 8005a30:	609a      	str	r2, [r3, #8]
 8005a32:	60da      	str	r2, [r3, #12]
 8005a34:	611a      	str	r2, [r3, #16]
 8005a36:	615a      	str	r2, [r3, #20]
 8005a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	2234      	movs	r2, #52	@ 0x34
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f009 fc5b 	bl	800f2fc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005a46:	4b34      	ldr	r3, [pc, #208]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a48:	4a34      	ldr	r2, [pc, #208]	@ (8005b1c <MX_TIM16_Init+0xfc>)
 8005a4a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005a4c:	4b32      	ldr	r3, [pc, #200]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a4e:	22a9      	movs	r2, #169	@ 0xa9
 8005a50:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a52:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8005a58:	4b2f      	ldr	r3, [pc, #188]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a5a:	f240 72d5 	movw	r2, #2005	@ 0x7d5
 8005a5e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a60:	4b2d      	ldr	r3, [pc, #180]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005a66:	4b2c      	ldr	r3, [pc, #176]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005a72:	4829      	ldr	r0, [pc, #164]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a74:	f004 f91c 	bl	8009cb0 <HAL_TIM_Base_Init>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8005a7e:	f7ff fc6d 	bl	800535c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8005a82:	4825      	ldr	r0, [pc, #148]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a84:	f004 fa60 	bl	8009f48 <HAL_TIM_OC_Init>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8005a8e:	f7ff fc65 	bl	800535c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005a92:	2108      	movs	r1, #8
 8005a94:	4820      	ldr	r0, [pc, #128]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005a96:	f004 fc45 	bl	800a324 <HAL_TIM_OnePulse_Init>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8005aa0:	f7ff fc5c 	bl	800535c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 1433;
 8005aa8:	f240 5399 	movw	r3, #1433	@ 0x599
 8005aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005aba:	2300      	movs	r3, #0
 8005abc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ac2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4813      	ldr	r0, [pc, #76]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005acc:	f004 ffdc 	bl	800aa88 <HAL_TIM_OC_ConfigChannel>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8005ad6:	f7ff fc41 	bl	800535c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ada:	2300      	movs	r3, #0
 8005adc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005af2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005afc:	463b      	mov	r3, r7
 8005afe:	4619      	mov	r1, r3
 8005b00:	4805      	ldr	r0, [pc, #20]	@ (8005b18 <MX_TIM16_Init+0xf8>)
 8005b02:	f006 f9cb 	bl	800be9c <HAL_TIMEx_ConfigBreakDeadTime>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8005b0c:	f7ff fc26 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005b10:	bf00      	nop
 8005b12:	3750      	adds	r7, #80	@ 0x50
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20001ae0 	.word	0x20001ae0
 8005b1c:	40014400 	.word	0x40014400

08005b20 <MX_TIM20_Init>:
/* TIM20 init function */
void MX_TIM20_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b09c      	sub	sp, #112	@ 0x70
 8005b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b26:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	605a      	str	r2, [r3, #4]
 8005b30:	609a      	str	r2, [r3, #8]
 8005b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005b38:	2200      	movs	r2, #0
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	605a      	str	r2, [r3, #4]
 8005b3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
 8005b4c:	60da      	str	r2, [r3, #12]
 8005b4e:	611a      	str	r2, [r3, #16]
 8005b50:	615a      	str	r2, [r3, #20]
 8005b52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	2234      	movs	r2, #52	@ 0x34
 8005b58:	2100      	movs	r1, #0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f009 fbce 	bl	800f2fc <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8005b60:	4b4b      	ldr	r3, [pc, #300]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b62:	4a4c      	ldr	r2, [pc, #304]	@ (8005c94 <MX_TIM20_Init+0x174>)
 8005b64:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8005b66:	4b4a      	ldr	r3, [pc, #296]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b6c:	4b48      	ldr	r3, [pc, #288]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8005b72:	4b47      	ldr	r3, [pc, #284]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b78:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b7a:	4b45      	ldr	r3, [pc, #276]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8005b80:	4b43      	ldr	r3, [pc, #268]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b86:	4b42      	ldr	r3, [pc, #264]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8005b8c:	4840      	ldr	r0, [pc, #256]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005b8e:	f004 f88f 	bl	8009cb0 <HAL_TIM_Base_Init>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8005b98:	f7ff fbe0 	bl	800535c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005ba0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8005ba2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	4839      	ldr	r0, [pc, #228]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005baa:	f005 f8fb 	bl	800ada4 <HAL_TIM_ConfigClockSource>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8005bb4:	f7ff fbd2 	bl	800535c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8005bb8:	4835      	ldr	r0, [pc, #212]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005bba:	f004 fa33 	bl	800a024 <HAL_TIM_PWM_Init>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8005bc4:	f7ff fbca 	bl	800535c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8005bd4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005bd8:	4619      	mov	r1, r3
 8005bda:	482d      	ldr	r0, [pc, #180]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005bdc:	f006 f8c8 	bl	800bd70 <HAL_TIMEx_MasterConfigSynchronization>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8005be6:	f7ff fbb9 	bl	800535c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005bea:	2360      	movs	r3, #96	@ 0x60
 8005bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c02:	2300      	movs	r3, #0
 8005c04:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4820      	ldr	r0, [pc, #128]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005c10:	f004 ffb4 	bl	800ab7c <HAL_TIM_PWM_ConfigChannel>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8005c1a:	f7ff fb9f 	bl	800535c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005c1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c22:	2208      	movs	r2, #8
 8005c24:	4619      	mov	r1, r3
 8005c26:	481a      	ldr	r0, [pc, #104]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005c28:	f004 ffa8 	bl	800ab7c <HAL_TIM_PWM_ConfigChannel>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8005c32:	f7ff fb93 	bl	800535c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005c54:	2300      	movs	r3, #0
 8005c56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005c5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005c66:	2300      	movs	r3, #0
 8005c68:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8005c6e:	1d3b      	adds	r3, r7, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4807      	ldr	r0, [pc, #28]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005c74:	f006 f912 	bl	800be9c <HAL_TIMEx_ConfigBreakDeadTime>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_TIM20_Init+0x162>
  {
    Error_Handler();
 8005c7e:	f7ff fb6d 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8005c82:	4803      	ldr	r0, [pc, #12]	@ (8005c90 <MX_TIM20_Init+0x170>)
 8005c84:	f000 f908 	bl	8005e98 <HAL_TIM_MspPostInit>

}
 8005c88:	bf00      	nop
 8005c8a:	3770      	adds	r7, #112	@ 0x70
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20001bac 	.word	0x20001bac
 8005c94:	40015000 	.word	0x40015000

08005c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a3d      	ldr	r2, [pc, #244]	@ (8005d9c <HAL_TIM_Base_MspInit+0x104>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d11c      	bne.n	8005ce4 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005caa:	4b3d      	ldr	r3, [pc, #244]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cae:	4a3c      	ldr	r2, [pc, #240]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005cb0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005cb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8005cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	2018      	movs	r0, #24
 8005cc8:	f001 fe6f 	bl	80079aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005ccc:	2018      	movs	r0, #24
 8005cce:	f001 fe86 	bl	80079de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	2019      	movs	r0, #25
 8005cd8:	f001 fe67 	bl	80079aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005cdc:	2019      	movs	r0, #25
 8005cde:	f001 fe7e 	bl	80079de <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM20_CLK_ENABLE();
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }
}
 8005ce2:	e056      	b.n	8005d92 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM2)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cec:	d114      	bne.n	8005d18 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005cee:	4b2c      	ldr	r3, [pc, #176]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf2:	4a2b      	ldr	r2, [pc, #172]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfa:	4b29      	ldr	r3, [pc, #164]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005d06:	2200      	movs	r2, #0
 8005d08:	2100      	movs	r1, #0
 8005d0a:	201c      	movs	r0, #28
 8005d0c:	f001 fe4d 	bl	80079aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005d10:	201c      	movs	r0, #28
 8005d12:	f001 fe64 	bl	80079de <HAL_NVIC_EnableIRQ>
}
 8005d16:	e03c      	b.n	8005d92 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM8)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a21      	ldr	r2, [pc, #132]	@ (8005da4 <HAL_TIM_Base_MspInit+0x10c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10c      	bne.n	8005d3c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005d22:	4b1f      	ldr	r3, [pc, #124]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d26:	4a1e      	ldr	r2, [pc, #120]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005d2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	697b      	ldr	r3, [r7, #20]
}
 8005d3a:	e02a      	b.n	8005d92 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM16)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a19      	ldr	r2, [pc, #100]	@ (8005da8 <HAL_TIM_Base_MspInit+0x110>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d114      	bne.n	8005d70 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005d46:	4b16      	ldr	r3, [pc, #88]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d4a:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d50:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d52:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d5a:	613b      	str	r3, [r7, #16]
 8005d5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2100      	movs	r1, #0
 8005d62:	2019      	movs	r0, #25
 8005d64:	f001 fe21 	bl	80079aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005d68:	2019      	movs	r0, #25
 8005d6a:	f001 fe38 	bl	80079de <HAL_NVIC_EnableIRQ>
}
 8005d6e:	e010      	b.n	8005d92 <HAL_TIM_Base_MspInit+0xfa>
  else if(tim_baseHandle->Instance==TIM20)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0d      	ldr	r2, [pc, #52]	@ (8005dac <HAL_TIM_Base_MspInit+0x114>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10b      	bne.n	8005d92 <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8005d7a:	4b09      	ldr	r3, [pc, #36]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7e:	4a08      	ldr	r2, [pc, #32]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d84:	6613      	str	r3, [r2, #96]	@ 0x60
 8005d86:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <HAL_TIM_Base_MspInit+0x108>)
 8005d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d8e:	60fb      	str	r3, [r7, #12]
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	3720      	adds	r7, #32
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	40012c00 	.word	0x40012c00
 8005da0:	40021000 	.word	0x40021000
 8005da4:	40013400 	.word	0x40013400
 8005da8:	40014400 	.word	0x40014400
 8005dac:	40015000 	.word	0x40015000

08005db0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08c      	sub	sp, #48	@ 0x30
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005db8:	f107 031c 	add.w	r3, r7, #28
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	605a      	str	r2, [r3, #4]
 8005dc2:	609a      	str	r2, [r3, #8]
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8005e8c <HAL_TIM_Encoder_MspInit+0xdc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d129      	bne.n	8005e26 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005dd8:	f043 0302 	orr.w	r3, r3, #2
 8005ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dde:	4b2c      	ldr	r3, [pc, #176]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	61bb      	str	r3, [r7, #24]
 8005de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dea:	4b29      	ldr	r3, [pc, #164]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dee:	4a28      	ldr	r2, [pc, #160]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005df6:	4b26      	ldr	r3, [pc, #152]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Encoder_1_Pin|Encoder_1A7_Pin;
 8005e02:	23c0      	movs	r3, #192	@ 0xc0
 8005e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e06:	2302      	movs	r3, #2
 8005e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e12:	2302      	movs	r3, #2
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e16:	f107 031c 	add.w	r3, r7, #28
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e20:	f002 f936 	bl	8008090 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8005e24:	e02e      	b.n	8005e84 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e94 <HAL_TIM_Encoder_MspInit+0xe4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d129      	bne.n	8005e84 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005e30:	4b17      	ldr	r3, [pc, #92]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e34:	4a16      	ldr	r2, [pc, #88]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e36:	f043 0304 	orr.w	r3, r3, #4
 8005e3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e3c:	4b14      	ldr	r3, [pc, #80]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	613b      	str	r3, [r7, #16]
 8005e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e48:	4b11      	ldr	r3, [pc, #68]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e4c:	4a10      	ldr	r2, [pc, #64]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e4e:	f043 0301 	orr.w	r3, r3, #1
 8005e52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e54:	4b0e      	ldr	r3, [pc, #56]	@ (8005e90 <HAL_TIM_Encoder_MspInit+0xe0>)
 8005e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_2_Pin|Encoder_2A12_Pin;
 8005e60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e66:	2302      	movs	r3, #2
 8005e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005e72:	230a      	movs	r3, #10
 8005e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e76:	f107 031c 	add.w	r3, r7, #28
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e80:	f002 f906 	bl	8008090 <HAL_GPIO_Init>
}
 8005e84:	bf00      	nop
 8005e86:	3730      	adds	r7, #48	@ 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	40000400 	.word	0x40000400
 8005e90:	40021000 	.word	0x40021000
 8005e94:	40000800 	.word	0x40000800

08005e98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08a      	sub	sp, #40	@ 0x28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ea0:	f107 0314 	add.w	r3, r7, #20
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	605a      	str	r2, [r3, #4]
 8005eaa:	609a      	str	r2, [r3, #8]
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a31      	ldr	r2, [pc, #196]	@ (8005f7c <HAL_TIM_MspPostInit+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d11d      	bne.n	8005ef6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eba:	4b31      	ldr	r3, [pc, #196]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ebe:	4a30      	ldr	r2, [pc, #192]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ec6:	4b2e      	ldr	r3, [pc, #184]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	613b      	str	r3, [r7, #16]
 8005ed0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = PWM_Servo_Pin;
 8005ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005edc:	2300      	movs	r3, #0
 8005ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005ee4:	2304      	movs	r3, #4
 8005ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_Servo_GPIO_Port, &GPIO_InitStruct);
 8005ee8:	f107 0314 	add.w	r3, r7, #20
 8005eec:	4619      	mov	r1, r3
 8005eee:	4825      	ldr	r0, [pc, #148]	@ (8005f84 <HAL_TIM_MspPostInit+0xec>)
 8005ef0:	f002 f8ce 	bl	8008090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8005ef4:	e03d      	b.n	8005f72 <HAL_TIM_MspPostInit+0xda>
  else if(timHandle->Instance==TIM20)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a23      	ldr	r2, [pc, #140]	@ (8005f88 <HAL_TIM_MspPostInit+0xf0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d138      	bne.n	8005f72 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f00:	4b1f      	ldr	r3, [pc, #124]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f04:	4a1e      	ldr	r2, [pc, #120]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005f06:	f043 0302 	orr.w	r3, r3, #2
 8005f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f18:	4b19      	ldr	r3, [pc, #100]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f1c:	4a18      	ldr	r2, [pc, #96]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f24:	4b16      	ldr	r3, [pc, #88]	@ (8005f80 <HAL_TIM_MspPostInit+0xe8>)
 8005f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	60bb      	str	r3, [r7, #8]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_MD20A_24V_Pin;
 8005f30:	2304      	movs	r3, #4
 8005f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f34:	2302      	movs	r3, #2
 8005f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8005f40:	2303      	movs	r3, #3
 8005f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_24V_GPIO_Port, &GPIO_InitStruct);
 8005f44:	f107 0314 	add.w	r3, r7, #20
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4810      	ldr	r0, [pc, #64]	@ (8005f8c <HAL_TIM_MspPostInit+0xf4>)
 8005f4c:	f002 f8a0 	bl	8008090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_MD20A_18V_Pin;
 8005f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f56:	2302      	movs	r3, #2
 8005f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8005f62:	2306      	movs	r3, #6
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_MD20A_18V_GPIO_Port, &GPIO_InitStruct);
 8005f66:	f107 0314 	add.w	r3, r7, #20
 8005f6a:	4619      	mov	r1, r3
 8005f6c:	4805      	ldr	r0, [pc, #20]	@ (8005f84 <HAL_TIM_MspPostInit+0xec>)
 8005f6e:	f002 f88f 	bl	8008090 <HAL_GPIO_Init>
}
 8005f72:	bf00      	nop
 8005f74:	3728      	adds	r7, #40	@ 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40013400 	.word	0x40013400
 8005f80:	40021000 	.word	0x40021000
 8005f84:	48000800 	.word	0x48000800
 8005f88:	40015000 	.word	0x40015000
 8005f8c:	48000400 	.word	0x48000400

08005f90 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005f94:	4b23      	ldr	r3, [pc, #140]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005f96:	4a24      	ldr	r2, [pc, #144]	@ (8006028 <MX_USART2_UART_Init+0x98>)
 8005f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005f9a:	4b22      	ldr	r3, [pc, #136]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005f9c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005fa2:	4b20      	ldr	r3, [pc, #128]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fa4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005fa8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005faa:	4b1e      	ldr	r3, [pc, #120]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fba:	220c      	movs	r2, #12
 8005fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fbe:	4b19      	ldr	r3, [pc, #100]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fc4:	4b17      	ldr	r3, [pc, #92]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fca:	4b16      	ldr	r3, [pc, #88]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005fd0:	4b14      	ldr	r3, [pc, #80]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fd6:	4b13      	ldr	r3, [pc, #76]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fdc:	4811      	ldr	r0, [pc, #68]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005fde:	f006 f841 	bl	800c064 <HAL_UART_Init>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8005fe8:	f7ff f9b8 	bl	800535c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005fec:	2100      	movs	r1, #0
 8005fee:	480d      	ldr	r0, [pc, #52]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8005ff0:	f008 fbc3 	bl	800e77a <HAL_UARTEx_SetTxFifoThreshold>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8005ffa:	f7ff f9af 	bl	800535c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ffe:	2100      	movs	r1, #0
 8006000:	4808      	ldr	r0, [pc, #32]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8006002:	f008 fbf8 	bl	800e7f6 <HAL_UARTEx_SetRxFifoThreshold>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800600c:	f7ff f9a6 	bl	800535c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006010:	4804      	ldr	r0, [pc, #16]	@ (8006024 <MX_USART2_UART_Init+0x94>)
 8006012:	f008 fb79 	bl	800e708 <HAL_UARTEx_DisableFifoMode>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800601c:	f7ff f99e 	bl	800535c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006020:	bf00      	nop
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20001c78 	.word	0x20001c78
 8006028:	40004400 	.word	0x40004400

0800602c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b09e      	sub	sp, #120	@ 0x78
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006034:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	60da      	str	r2, [r3, #12]
 8006042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006044:	f107 0310 	add.w	r3, r7, #16
 8006048:	2254      	movs	r2, #84	@ 0x54
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f009 f955 	bl	800f2fc <memset>
  if(uartHandle->Instance==USART2)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a37      	ldr	r2, [pc, #220]	@ (8006134 <HAL_UART_MspInit+0x108>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d167      	bne.n	800612c <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800605c:	2302      	movs	r3, #2
 800605e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006060:	2300      	movs	r3, #0
 8006062:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006064:	f107 0310 	add.w	r3, r7, #16
 8006068:	4618      	mov	r0, r3
 800606a:	f002 ffa5 	bl	8008fb8 <HAL_RCCEx_PeriphCLKConfig>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006074:	f7ff f972 	bl	800535c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006078:	4b2f      	ldr	r3, [pc, #188]	@ (8006138 <HAL_UART_MspInit+0x10c>)
 800607a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607c:	4a2e      	ldr	r2, [pc, #184]	@ (8006138 <HAL_UART_MspInit+0x10c>)
 800607e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006082:	6593      	str	r3, [r2, #88]	@ 0x58
 8006084:	4b2c      	ldr	r3, [pc, #176]	@ (8006138 <HAL_UART_MspInit+0x10c>)
 8006086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006090:	4b29      	ldr	r3, [pc, #164]	@ (8006138 <HAL_UART_MspInit+0x10c>)
 8006092:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006094:	4a28      	ldr	r2, [pc, #160]	@ (8006138 <HAL_UART_MspInit+0x10c>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800609c:	4b26      	ldr	r3, [pc, #152]	@ (8006138 <HAL_UART_MspInit+0x10c>)
 800609e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	60bb      	str	r3, [r7, #8]
 80060a6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060a8:	230c      	movs	r3, #12
 80060aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ac:	2302      	movs	r3, #2
 80060ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b0:	2300      	movs	r3, #0
 80060b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060b4:	2300      	movs	r3, #0
 80060b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80060b8:	2307      	movs	r3, #7
 80060ba:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80060c0:	4619      	mov	r1, r3
 80060c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80060c6:	f001 ffe3 	bl	8008090 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80060ca:	4b1c      	ldr	r3, [pc, #112]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006140 <HAL_UART_MspInit+0x114>)
 80060ce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80060d0:	4b1a      	ldr	r3, [pc, #104]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060d2:	221b      	movs	r2, #27
 80060d4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060d6:	4b19      	ldr	r3, [pc, #100]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060d8:	2210      	movs	r2, #16
 80060da:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060dc:	4b17      	ldr	r3, [pc, #92]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060de:	2200      	movs	r2, #0
 80060e0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80060e2:	4b16      	ldr	r3, [pc, #88]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060e4:	2280      	movs	r2, #128	@ 0x80
 80060e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060e8:	4b14      	ldr	r3, [pc, #80]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060ee:	4b13      	ldr	r3, [pc, #76]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80060f4:	4b11      	ldr	r3, [pc, #68]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80060fa:	4b10      	ldr	r3, [pc, #64]	@ (800613c <HAL_UART_MspInit+0x110>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006100:	480e      	ldr	r0, [pc, #56]	@ (800613c <HAL_UART_MspInit+0x110>)
 8006102:	f001 fc87 	bl	8007a14 <HAL_DMA_Init>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 800610c:	f7ff f926 	bl	800535c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	4a0a      	ldr	r2, [pc, #40]	@ (800613c <HAL_UART_MspInit+0x110>)
 8006114:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006116:	4a09      	ldr	r2, [pc, #36]	@ (800613c <HAL_UART_MspInit+0x110>)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800611c:	2200      	movs	r2, #0
 800611e:	2100      	movs	r1, #0
 8006120:	2026      	movs	r0, #38	@ 0x26
 8006122:	f001 fc42 	bl	80079aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006126:	2026      	movs	r0, #38	@ 0x26
 8006128:	f001 fc59 	bl	80079de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800612c:	bf00      	nop
 800612e:	3778      	adds	r7, #120	@ 0x78
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40004400 	.word	0x40004400
 8006138:	40021000 	.word	0x40021000
 800613c:	20001d44 	.word	0x20001d44
 8006140:	40020008 	.word	0x40020008

08006144 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006144:	480d      	ldr	r0, [pc, #52]	@ (800617c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006146:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006148:	f7ff fa5a 	bl	8005600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800614c:	480c      	ldr	r0, [pc, #48]	@ (8006180 <LoopForever+0x6>)
  ldr r1, =_edata
 800614e:	490d      	ldr	r1, [pc, #52]	@ (8006184 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006150:	4a0d      	ldr	r2, [pc, #52]	@ (8006188 <LoopForever+0xe>)
  movs r3, #0
 8006152:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006154:	e002      	b.n	800615c <LoopCopyDataInit>

08006156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800615a:	3304      	adds	r3, #4

0800615c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800615c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800615e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006160:	d3f9      	bcc.n	8006156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006162:	4a0a      	ldr	r2, [pc, #40]	@ (800618c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006164:	4c0a      	ldr	r4, [pc, #40]	@ (8006190 <LoopForever+0x16>)
  movs r3, #0
 8006166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006168:	e001      	b.n	800616e <LoopFillZerobss>

0800616a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800616a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800616c:	3204      	adds	r2, #4

0800616e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800616e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006170:	d3fb      	bcc.n	800616a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006172:	f009 f8d1 	bl	800f318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006176:	f7fd fb0f 	bl	8003798 <main>

0800617a <LoopForever>:

LoopForever:
    b LoopForever
 800617a:	e7fe      	b.n	800617a <LoopForever>
  ldr   r0, =_estack
 800617c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006184:	200002c0 	.word	0x200002c0
  ldr r2, =_sidata
 8006188:	08011778 	.word	0x08011778
  ldr r2, =_sbss
 800618c:	200002c0 	.word	0x200002c0
  ldr r4, =_ebss
 8006190:	20001ee0 	.word	0x20001ee0

08006194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006194:	e7fe      	b.n	8006194 <ADC1_2_IRQHandler>

08006196 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800619c:	2300      	movs	r3, #0
 800619e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061a0:	2003      	movs	r0, #3
 80061a2:	f001 fbf7 	bl	8007994 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80061a6:	2000      	movs	r0, #0
 80061a8:	f000 f80e 	bl	80061c8 <HAL_InitTick>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	71fb      	strb	r3, [r7, #7]
 80061b6:	e001      	b.n	80061bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80061b8:	f7ff f974 	bl	80054a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80061bc:	79fb      	ldrb	r3, [r7, #7]

}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80061d4:	4b16      	ldr	r3, [pc, #88]	@ (8006230 <HAL_InitTick+0x68>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d022      	beq.n	8006222 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80061dc:	4b15      	ldr	r3, [pc, #84]	@ (8006234 <HAL_InitTick+0x6c>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <HAL_InitTick+0x68>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80061e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	4618      	mov	r0, r3
 80061f2:	f001 fc02 	bl	80079fa <HAL_SYSTICK_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10f      	bne.n	800621c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2b0f      	cmp	r3, #15
 8006200:	d809      	bhi.n	8006216 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006202:	2200      	movs	r2, #0
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	f001 fbce 	bl	80079aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800620e:	4a0a      	ldr	r2, [pc, #40]	@ (8006238 <HAL_InitTick+0x70>)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	e007      	b.n	8006226 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
 800621a:	e004      	b.n	8006226 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
 8006220:	e001      	b.n	8006226 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006226:	7bfb      	ldrb	r3, [r7, #15]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	2000026c 	.word	0x2000026c
 8006234:	20000264 	.word	0x20000264
 8006238:	20000268 	.word	0x20000268

0800623c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006240:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_IncTick+0x1c>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	4b05      	ldr	r3, [pc, #20]	@ (800625c <HAL_IncTick+0x20>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4413      	add	r3, r2
 800624a:	4a03      	ldr	r2, [pc, #12]	@ (8006258 <HAL_IncTick+0x1c>)
 800624c:	6013      	str	r3, [r2, #0]
}
 800624e:	bf00      	nop
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	20001da4 	.word	0x20001da4
 800625c:	2000026c 	.word	0x2000026c

08006260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  return uwTick;
 8006264:	4b03      	ldr	r3, [pc, #12]	@ (8006274 <HAL_GetTick+0x14>)
 8006266:	681b      	ldr	r3, [r3, #0]
}
 8006268:	4618      	mov	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	20001da4 	.word	0x20001da4

08006278 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	609a      	str	r2, [r3, #8]
}
 8006292:	bf00      	nop
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
 80062ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3360      	adds	r3, #96	@ 0x60
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <LL_ADC_SetOffset+0x44>)
 8006302:	4013      	ands	r3, r2
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	4313      	orrs	r3, r2
 8006310:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006318:	bf00      	nop
 800631a:	371c      	adds	r7, #28
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	03fff000 	.word	0x03fff000

08006328 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3360      	adds	r3, #96	@ 0x60
 8006336:	461a      	mov	r2, r3
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3360      	adds	r3, #96	@ 0x60
 8006364:	461a      	mov	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	431a      	orrs	r2, r3
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800637e:	bf00      	nop
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800638a:	b480      	push	{r7}
 800638c:	b087      	sub	sp, #28
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3360      	adds	r3, #96	@ 0x60
 800639a:	461a      	mov	r2, r3
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80063b4:	bf00      	nop
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b087      	sub	sp, #28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3360      	adds	r3, #96	@ 0x60
 80063d0:	461a      	mov	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	431a      	orrs	r2, r3
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80063ea:	bf00      	nop
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	615a      	str	r2, [r3, #20]
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	3330      	adds	r3, #48	@ 0x30
 800642c:	461a      	mov	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	0a1b      	lsrs	r3, r3, #8
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	f003 030c 	and.w	r3, r3, #12
 8006438:	4413      	add	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f003 031f 	and.w	r3, r3, #31
 8006446:	211f      	movs	r1, #31
 8006448:	fa01 f303 	lsl.w	r3, r1, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	401a      	ands	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	0e9b      	lsrs	r3, r3, #26
 8006454:	f003 011f 	and.w	r1, r3, #31
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	431a      	orrs	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3314      	adds	r3, #20
 8006484:	461a      	mov	r2, r3
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	0e5b      	lsrs	r3, r3, #25
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	4413      	add	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	0d1b      	lsrs	r3, r3, #20
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2107      	movs	r1, #7
 80064a2:	fa01 f303 	lsl.w	r3, r1, r3
 80064a6:	43db      	mvns	r3, r3
 80064a8:	401a      	ands	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	0d1b      	lsrs	r3, r3, #20
 80064ae:	f003 031f 	and.w	r3, r3, #31
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	431a      	orrs	r2, r3
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e4:	43db      	mvns	r3, r3
 80064e6:	401a      	ands	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f003 0318 	and.w	r3, r3, #24
 80064ee:	4908      	ldr	r1, [pc, #32]	@ (8006510 <LL_ADC_SetChannelSingleDiff+0x44>)
 80064f0:	40d9      	lsrs	r1, r3
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	400b      	ands	r3, r1
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fa:	431a      	orrs	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006502:	bf00      	nop
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	0007ffff 	.word	0x0007ffff

08006514 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f003 031f 	and.w	r3, r3, #31
}
 8006524:	4618      	mov	r0, r3
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6093      	str	r3, [r2, #8]
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006568:	d101      	bne.n	800656e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800658c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006590:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065b8:	d101      	bne.n	80065be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80065ba:	2301      	movs	r3, #1
 80065bc:	e000      	b.n	80065c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80065e0:	f043 0201 	orr.w	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0301 	and.w	r3, r3, #1
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <LL_ADC_IsEnabled+0x18>
 8006608:	2301      	movs	r3, #1
 800660a:	e000      	b.n	800660e <LL_ADC_IsEnabled+0x1a>
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800661a:	b480      	push	{r7}
 800661c:	b083      	sub	sp, #12
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800662a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800662e:	f043 0204 	orr.w	r2, r3, #4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b04      	cmp	r3, #4
 8006654:	d101      	bne.n	800665a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006656:	2301      	movs	r3, #1
 8006658:	e000      	b.n	800665c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0308 	and.w	r3, r3, #8
 8006678:	2b08      	cmp	r3, #8
 800667a:	d101      	bne.n	8006680 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b089      	sub	sp, #36	@ 0x24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800669c:	2300      	movs	r3, #0
 800669e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e1a9      	b.n	80069fe <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fc fee3 	bl	8003484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff ff3f 	bl	8006554 <LL_ADC_IsDeepPowerDownEnabled>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff ff25 	bl	8006530 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff ff5a 	bl	80065a4 <LL_ADC_IsInternalRegulatorEnabled>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d115      	bne.n	8006722 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff ff3e 	bl	800657c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006700:	4b9c      	ldr	r3, [pc, #624]	@ (8006974 <HAL_ADC_Init+0x2e4>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	099b      	lsrs	r3, r3, #6
 8006706:	4a9c      	ldr	r2, [pc, #624]	@ (8006978 <HAL_ADC_Init+0x2e8>)
 8006708:	fba2 2303 	umull	r2, r3, r2, r3
 800670c:	099b      	lsrs	r3, r3, #6
 800670e:	3301      	adds	r3, #1
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006714:	e002      	b.n	800671c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3b01      	subs	r3, #1
 800671a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f9      	bne.n	8006716 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4618      	mov	r0, r3
 8006728:	f7ff ff3c 	bl	80065a4 <LL_ADC_IsInternalRegulatorEnabled>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10d      	bne.n	800674e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006736:	f043 0210 	orr.w	r2, r3, #16
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006742:	f043 0201 	orr.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7ff ff75 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 8006758:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	f040 8142 	bne.w	80069ec <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	f040 813e 	bne.w	80069ec <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006774:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006778:	f043 0202 	orr.w	r2, r3, #2
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff ff35 	bl	80065f4 <LL_ADC_IsEnabled>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d141      	bne.n	8006814 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006798:	d004      	beq.n	80067a4 <HAL_ADC_Init+0x114>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a77      	ldr	r2, [pc, #476]	@ (800697c <HAL_ADC_Init+0x2ec>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d10f      	bne.n	80067c4 <HAL_ADC_Init+0x134>
 80067a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80067a8:	f7ff ff24 	bl	80065f4 <LL_ADC_IsEnabled>
 80067ac:	4604      	mov	r4, r0
 80067ae:	4873      	ldr	r0, [pc, #460]	@ (800697c <HAL_ADC_Init+0x2ec>)
 80067b0:	f7ff ff20 	bl	80065f4 <LL_ADC_IsEnabled>
 80067b4:	4603      	mov	r3, r0
 80067b6:	4323      	orrs	r3, r4
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	e012      	b.n	80067ea <HAL_ADC_Init+0x15a>
 80067c4:	486e      	ldr	r0, [pc, #440]	@ (8006980 <HAL_ADC_Init+0x2f0>)
 80067c6:	f7ff ff15 	bl	80065f4 <LL_ADC_IsEnabled>
 80067ca:	4604      	mov	r4, r0
 80067cc:	486d      	ldr	r0, [pc, #436]	@ (8006984 <HAL_ADC_Init+0x2f4>)
 80067ce:	f7ff ff11 	bl	80065f4 <LL_ADC_IsEnabled>
 80067d2:	4603      	mov	r3, r0
 80067d4:	431c      	orrs	r4, r3
 80067d6:	486c      	ldr	r0, [pc, #432]	@ (8006988 <HAL_ADC_Init+0x2f8>)
 80067d8:	f7ff ff0c 	bl	80065f4 <LL_ADC_IsEnabled>
 80067dc:	4603      	mov	r3, r0
 80067de:	4323      	orrs	r3, r4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d012      	beq.n	8006814 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067f6:	d004      	beq.n	8006802 <HAL_ADC_Init+0x172>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5f      	ldr	r2, [pc, #380]	@ (800697c <HAL_ADC_Init+0x2ec>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_ADC_Init+0x176>
 8006802:	4a62      	ldr	r2, [pc, #392]	@ (800698c <HAL_ADC_Init+0x2fc>)
 8006804:	e000      	b.n	8006808 <HAL_ADC_Init+0x178>
 8006806:	4a62      	ldr	r2, [pc, #392]	@ (8006990 <HAL_ADC_Init+0x300>)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7ff fd32 	bl	8006278 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	7f5b      	ldrb	r3, [r3, #29]
 8006818:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800681e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006824:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800682a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006832:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006834:	4313      	orrs	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800683e:	2b01      	cmp	r3, #1
 8006840:	d106      	bne.n	8006850 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	3b01      	subs	r3, #1
 8006848:	045b      	lsls	r3, r3, #17
 800684a:	69ba      	ldr	r2, [r7, #24]
 800684c:	4313      	orrs	r3, r2
 800684e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d009      	beq.n	800686c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006864:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	4313      	orrs	r3, r2
 800686a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	4b48      	ldr	r3, [pc, #288]	@ (8006994 <HAL_ADC_Init+0x304>)
 8006874:	4013      	ands	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6812      	ldr	r2, [r2, #0]
 800687a:	69b9      	ldr	r1, [r7, #24]
 800687c:	430b      	orrs	r3, r1
 800687e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	430a      	orrs	r2, r1
 8006894:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fee4 	bl	8006668 <LL_ADC_INJ_IsConversionOngoing>
 80068a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d17f      	bne.n	80069a8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d17c      	bne.n	80069a8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80068bc:	4313      	orrs	r3, r2
 80068be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ca:	f023 0302 	bic.w	r3, r3, #2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	69b9      	ldr	r1, [r7, #24]
 80068d4:	430b      	orrs	r3, r1
 80068d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d017      	beq.n	8006910 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	691a      	ldr	r2, [r3, #16]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80068ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80068f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80068fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6911      	ldr	r1, [r2, #16]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6812      	ldr	r2, [r2, #0]
 8006908:	430b      	orrs	r3, r1
 800690a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800690e:	e013      	b.n	8006938 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800691e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006930:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006934:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800693e:	2b01      	cmp	r3, #1
 8006940:	d12a      	bne.n	8006998 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800694c:	f023 0304 	bic.w	r3, r3, #4
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006958:	4311      	orrs	r1, r2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800695e:	4311      	orrs	r1, r2
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006964:	430a      	orrs	r2, r1
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0201 	orr.w	r2, r2, #1
 8006970:	611a      	str	r2, [r3, #16]
 8006972:	e019      	b.n	80069a8 <HAL_ADC_Init+0x318>
 8006974:	20000264 	.word	0x20000264
 8006978:	053e2d63 	.word	0x053e2d63
 800697c:	50000100 	.word	0x50000100
 8006980:	50000400 	.word	0x50000400
 8006984:	50000500 	.word	0x50000500
 8006988:	50000600 	.word	0x50000600
 800698c:	50000300 	.word	0x50000300
 8006990:	50000700 	.word	0x50000700
 8006994:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	691a      	ldr	r2, [r3, #16]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0201 	bic.w	r2, r2, #1
 80069a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10c      	bne.n	80069ca <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b6:	f023 010f 	bic.w	r1, r3, #15
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	1e5a      	subs	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80069c8:	e007      	b.n	80069da <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 020f 	bic.w	r2, r2, #15
 80069d8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069de:	f023 0303 	bic.w	r3, r3, #3
 80069e2:	f043 0201 	orr.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80069ea:	e007      	b.n	80069fc <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f0:	f043 0210 	orr.w	r2, r3, #16
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80069fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3724      	adds	r7, #36	@ 0x24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd90      	pop	{r4, r7, pc}
 8006a06:	bf00      	nop

08006a08 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a18:	d004      	beq.n	8006a24 <HAL_ADC_Start+0x1c>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a67      	ldr	r2, [pc, #412]	@ (8006bbc <HAL_ADC_Start+0x1b4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d101      	bne.n	8006a28 <HAL_ADC_Start+0x20>
 8006a24:	4b66      	ldr	r3, [pc, #408]	@ (8006bc0 <HAL_ADC_Start+0x1b8>)
 8006a26:	e000      	b.n	8006a2a <HAL_ADC_Start+0x22>
 8006a28:	4b66      	ldr	r3, [pc, #408]	@ (8006bc4 <HAL_ADC_Start+0x1bc>)
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fd72 	bl	8006514 <LL_ADC_GetMultimode>
 8006a30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7ff fe03 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 80b4 	bne.w	8006bac <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_ADC_Start+0x4a>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e0af      	b.n	8006bb2 <HAL_ADC_Start+0x1aa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fd06 	bl	800746c <ADC_Enable>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 809b 	bne.w	8006ba2 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a70:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a4d      	ldr	r2, [pc, #308]	@ (8006bbc <HAL_ADC_Start+0x1b4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d009      	beq.n	8006a9e <HAL_ADC_Start+0x96>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a4e      	ldr	r2, [pc, #312]	@ (8006bc8 <HAL_ADC_Start+0x1c0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d002      	beq.n	8006a9a <HAL_ADC_Start+0x92>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	e003      	b.n	8006aa2 <HAL_ADC_Start+0x9a>
 8006a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8006bcc <HAL_ADC_Start+0x1c4>)
 8006a9c:	e001      	b.n	8006aa2 <HAL_ADC_Start+0x9a>
 8006a9e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d002      	beq.n	8006ab0 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac8:	d106      	bne.n	8006ad8 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ace:	f023 0206 	bic.w	r2, r3, #6
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	661a      	str	r2, [r3, #96]	@ 0x60
 8006ad6:	e002      	b.n	8006ade <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	221c      	movs	r2, #28
 8006ae4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a32      	ldr	r2, [pc, #200]	@ (8006bbc <HAL_ADC_Start+0x1b4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d009      	beq.n	8006b0c <HAL_ADC_Start+0x104>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a32      	ldr	r2, [pc, #200]	@ (8006bc8 <HAL_ADC_Start+0x1c0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d002      	beq.n	8006b08 <HAL_ADC_Start+0x100>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	e003      	b.n	8006b10 <HAL_ADC_Start+0x108>
 8006b08:	4b30      	ldr	r3, [pc, #192]	@ (8006bcc <HAL_ADC_Start+0x1c4>)
 8006b0a:	e001      	b.n	8006b10 <HAL_ADC_Start+0x108>
 8006b0c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	6812      	ldr	r2, [r2, #0]
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d008      	beq.n	8006b2a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b05      	cmp	r3, #5
 8006b22:	d002      	beq.n	8006b2a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	2b09      	cmp	r3, #9
 8006b28:	d114      	bne.n	8006b54 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d007      	beq.n	8006b48 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006b40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff fd64 	bl	800661a <LL_ADC_REG_StartConversion>
 8006b52:	e02d      	b.n	8006bb0 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a15      	ldr	r2, [pc, #84]	@ (8006bbc <HAL_ADC_Start+0x1b4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_ADC_Start+0x176>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a16      	ldr	r2, [pc, #88]	@ (8006bc8 <HAL_ADC_Start+0x1c0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d002      	beq.n	8006b7a <HAL_ADC_Start+0x172>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	e003      	b.n	8006b82 <HAL_ADC_Start+0x17a>
 8006b7a:	4b14      	ldr	r3, [pc, #80]	@ (8006bcc <HAL_ADC_Start+0x1c4>)
 8006b7c:	e001      	b.n	8006b82 <HAL_ADC_Start+0x17a>
 8006b7e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006b82:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00f      	beq.n	8006bb0 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006b98:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006ba0:	e006      	b.n	8006bb0 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006baa:	e001      	b.n	8006bb0 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
 8006bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3718      	adds	r7, #24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	50000100 	.word	0x50000100
 8006bc0:	50000300 	.word	0x50000300
 8006bc4:	50000700 	.word	0x50000700
 8006bc8:	50000500 	.word	0x50000500
 8006bcc:	50000400 	.word	0x50000400

08006bd0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b0b6      	sub	sp, #216	@ 0xd8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d102      	bne.n	8006c10 <HAL_ADC_ConfigChannel+0x24>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	f000 bc13 	b.w	8007436 <HAL_ADC_ConfigChannel+0x84a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f7ff fd10 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 83f3 	bne.w	8007410 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6859      	ldr	r1, [r3, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	f7ff fbf0 	bl	800641c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fcfe 	bl	8006642 <LL_ADC_REG_IsConversionOngoing>
 8006c46:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7ff fd0a 	bl	8006668 <LL_ADC_INJ_IsConversionOngoing>
 8006c54:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f040 81d9 	bne.w	8007014 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f040 81d4 	bne.w	8007014 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c74:	d10f      	bne.n	8006c96 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	4619      	mov	r1, r3
 8006c82:	f7ff fbf7 	bl	8006474 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fbb1 	bl	80063f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8006c94:	e00e      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6818      	ldr	r0, [r3, #0]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	6819      	ldr	r1, [r3, #0]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f7ff fbe6 	bl	8006474 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2100      	movs	r1, #0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fba1 	bl	80063f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	695a      	ldr	r2, [r3, #20]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	f003 0303 	and.w	r3, r3, #3
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b04      	cmp	r3, #4
 8006cd4:	d022      	beq.n	8006d1c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6818      	ldr	r0, [r3, #0]
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	6919      	ldr	r1, [r3, #16]
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ce6:	f7ff fafb 	bl	80062e0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6818      	ldr	r0, [r3, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6919      	ldr	r1, [r3, #16]
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f7ff fb47 	bl	800638a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6818      	ldr	r0, [r3, #0]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d102      	bne.n	8006d12 <HAL_ADC_ConfigChannel+0x126>
 8006d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d10:	e000      	b.n	8006d14 <HAL_ADC_ConfigChannel+0x128>
 8006d12:	2300      	movs	r3, #0
 8006d14:	461a      	mov	r2, r3
 8006d16:	f7ff fb53 	bl	80063c0 <LL_ADC_SetOffsetSaturation>
 8006d1a:	e17b      	b.n	8007014 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2100      	movs	r1, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7ff fb00 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <HAL_ADC_ConfigChannel+0x15c>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7ff faf5 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	0e9b      	lsrs	r3, r3, #26
 8006d42:	f003 021f 	and.w	r2, r3, #31
 8006d46:	e01e      	b.n	8006d86 <HAL_ADC_ConfigChannel+0x19a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff faea 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006d5e:	fa93 f3a3 	rbit	r3, r3
 8006d62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006d6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006d76:	2320      	movs	r3, #32
 8006d78:	e004      	b.n	8006d84 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006d7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d7e:	fab3 f383 	clz	r3, r3
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d105      	bne.n	8006d9e <HAL_ADC_ConfigChannel+0x1b2>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	0e9b      	lsrs	r3, r3, #26
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	e018      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x1e4>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006da6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006daa:	fa93 f3a3 	rbit	r3, r3
 8006dae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006dba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	e004      	b.n	8006dd0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006dca:	fab3 f383 	clz	r3, r3
 8006dce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d106      	bne.n	8006de2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2100      	movs	r1, #0
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fab9 	bl	8006354 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2101      	movs	r1, #1
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7ff fa9d 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <HAL_ADC_ConfigChannel+0x222>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff fa92 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006e04:	4603      	mov	r3, r0
 8006e06:	0e9b      	lsrs	r3, r3, #26
 8006e08:	f003 021f 	and.w	r2, r3, #31
 8006e0c:	e01e      	b.n	8006e4c <HAL_ADC_ConfigChannel+0x260>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2101      	movs	r1, #1
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fa87 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006e24:	fa93 f3a3 	rbit	r3, r3
 8006e28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006e2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006e30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d101      	bne.n	8006e40 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006e3c:	2320      	movs	r3, #32
 8006e3e:	e004      	b.n	8006e4a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006e40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d105      	bne.n	8006e64 <HAL_ADC_ConfigChannel+0x278>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	0e9b      	lsrs	r3, r3, #26
 8006e5e:	f003 031f 	and.w	r3, r3, #31
 8006e62:	e018      	b.n	8006e96 <HAL_ADC_ConfigChannel+0x2aa>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e70:	fa93 f3a3 	rbit	r3, r3
 8006e74:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006e78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006e7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006e88:	2320      	movs	r3, #32
 8006e8a:	e004      	b.n	8006e96 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006e8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006e90:	fab3 f383 	clz	r3, r3
 8006e94:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d106      	bne.n	8006ea8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7ff fa56 	bl	8006354 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2102      	movs	r1, #2
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7ff fa3a 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x2e8>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2102      	movs	r1, #2
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7ff fa2f 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	0e9b      	lsrs	r3, r3, #26
 8006ece:	f003 021f 	and.w	r2, r3, #31
 8006ed2:	e01e      	b.n	8006f12 <HAL_ADC_ConfigChannel+0x326>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2102      	movs	r1, #2
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff fa24 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eea:	fa93 f3a3 	rbit	r3, r3
 8006eee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006ef2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006efa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006f02:	2320      	movs	r3, #32
 8006f04:	e004      	b.n	8006f10 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006f0a:	fab3 f383 	clz	r3, r3
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d105      	bne.n	8006f2a <HAL_ADC_ConfigChannel+0x33e>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	0e9b      	lsrs	r3, r3, #26
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	e016      	b.n	8006f58 <HAL_ADC_ConfigChannel+0x36c>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f36:	fa93 f3a3 	rbit	r3, r3
 8006f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006f3c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006f4a:	2320      	movs	r3, #32
 8006f4c:	e004      	b.n	8006f58 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006f52:	fab3 f383 	clz	r3, r3
 8006f56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d106      	bne.n	8006f6a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2102      	movs	r1, #2
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff f9f5 	bl	8006354 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2103      	movs	r1, #3
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff f9d9 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <HAL_ADC_ConfigChannel+0x3aa>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2103      	movs	r1, #3
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff f9ce 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	0e9b      	lsrs	r3, r3, #26
 8006f90:	f003 021f 	and.w	r2, r3, #31
 8006f94:	e017      	b.n	8006fc6 <HAL_ADC_ConfigChannel+0x3da>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2103      	movs	r1, #3
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f7ff f9c3 	bl	8006328 <LL_ADC_GetOffsetChannel>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fa8:	fa93 f3a3 	rbit	r3, r3
 8006fac:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006fae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006fb0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006fb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006fb8:	2320      	movs	r3, #32
 8006fba:	e003      	b.n	8006fc4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006fbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fbe:	fab3 f383 	clz	r3, r3
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <HAL_ADC_ConfigChannel+0x3f2>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	0e9b      	lsrs	r3, r3, #26
 8006fd8:	f003 031f 	and.w	r3, r3, #31
 8006fdc:	e011      	b.n	8007002 <HAL_ADC_ConfigChannel+0x416>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fe4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fe6:	fa93 f3a3 	rbit	r3, r3
 8006fea:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	e003      	b.n	8007002 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006ffa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ffc:	fab3 f383 	clz	r3, r3
 8007000:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007002:	429a      	cmp	r2, r3
 8007004:	d106      	bne.n	8007014 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2200      	movs	r2, #0
 800700c:	2103      	movs	r1, #3
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff f9a0 	bl	8006354 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff faeb 	bl	80065f4 <LL_ADC_IsEnabled>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	f040 813d 	bne.w	80072a0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6819      	ldr	r1, [r3, #0]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	461a      	mov	r2, r3
 8007034:	f7ff fa4a 	bl	80064cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	4aa2      	ldr	r2, [pc, #648]	@ (80072c8 <HAL_ADC_ConfigChannel+0x6dc>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f040 812e 	bne.w	80072a0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <HAL_ADC_ConfigChannel+0x480>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0e9b      	lsrs	r3, r3, #26
 800705a:	3301      	adds	r3, #1
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	2b09      	cmp	r3, #9
 8007062:	bf94      	ite	ls
 8007064:	2301      	movls	r3, #1
 8007066:	2300      	movhi	r3, #0
 8007068:	b2db      	uxtb	r3, r3
 800706a:	e019      	b.n	80070a0 <HAL_ADC_ConfigChannel+0x4b4>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007074:	fa93 f3a3 	rbit	r3, r3
 8007078:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800707a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800707c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800707e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8007084:	2320      	movs	r3, #32
 8007086:	e003      	b.n	8007090 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8007088:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800708a:	fab3 f383 	clz	r3, r3
 800708e:	b2db      	uxtb	r3, r3
 8007090:	3301      	adds	r3, #1
 8007092:	f003 031f 	and.w	r3, r3, #31
 8007096:	2b09      	cmp	r3, #9
 8007098:	bf94      	ite	ls
 800709a:	2301      	movls	r3, #1
 800709c:	2300      	movhi	r3, #0
 800709e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d079      	beq.n	8007198 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d107      	bne.n	80070c0 <HAL_ADC_ConfigChannel+0x4d4>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	0e9b      	lsrs	r3, r3, #26
 80070b6:	3301      	adds	r3, #1
 80070b8:	069b      	lsls	r3, r3, #26
 80070ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80070be:	e015      	b.n	80070ec <HAL_ADC_ConfigChannel+0x500>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070c8:	fa93 f3a3 	rbit	r3, r3
 80070cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80070ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80070d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80070d8:	2320      	movs	r3, #32
 80070da:	e003      	b.n	80070e4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80070dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070de:	fab3 f383 	clz	r3, r3
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	3301      	adds	r3, #1
 80070e6:	069b      	lsls	r3, r3, #26
 80070e8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <HAL_ADC_ConfigChannel+0x520>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	0e9b      	lsrs	r3, r3, #26
 80070fe:	3301      	adds	r3, #1
 8007100:	f003 031f 	and.w	r3, r3, #31
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	e017      	b.n	800713c <HAL_ADC_ConfigChannel+0x550>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007114:	fa93 f3a3 	rbit	r3, r3
 8007118:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800711a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800711c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800711e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007124:	2320      	movs	r3, #32
 8007126:	e003      	b.n	8007130 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800712a:	fab3 f383 	clz	r3, r3
 800712e:	b2db      	uxtb	r3, r3
 8007130:	3301      	adds	r3, #1
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	2101      	movs	r1, #1
 8007138:	fa01 f303 	lsl.w	r3, r1, r3
 800713c:	ea42 0103 	orr.w	r1, r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <HAL_ADC_ConfigChannel+0x576>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	0e9b      	lsrs	r3, r3, #26
 8007152:	3301      	adds	r3, #1
 8007154:	f003 021f 	and.w	r2, r3, #31
 8007158:	4613      	mov	r3, r2
 800715a:	005b      	lsls	r3, r3, #1
 800715c:	4413      	add	r3, r2
 800715e:	051b      	lsls	r3, r3, #20
 8007160:	e018      	b.n	8007194 <HAL_ADC_ConfigChannel+0x5a8>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	fa93 f3a3 	rbit	r3, r3
 800716e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800717a:	2320      	movs	r3, #32
 800717c:	e003      	b.n	8007186 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800717e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007180:	fab3 f383 	clz	r3, r3
 8007184:	b2db      	uxtb	r3, r3
 8007186:	3301      	adds	r3, #1
 8007188:	f003 021f 	and.w	r2, r3, #31
 800718c:	4613      	mov	r3, r2
 800718e:	005b      	lsls	r3, r3, #1
 8007190:	4413      	add	r3, r2
 8007192:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007194:	430b      	orrs	r3, r1
 8007196:	e07e      	b.n	8007296 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d107      	bne.n	80071b4 <HAL_ADC_ConfigChannel+0x5c8>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	0e9b      	lsrs	r3, r3, #26
 80071aa:	3301      	adds	r3, #1
 80071ac:	069b      	lsls	r3, r3, #26
 80071ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80071b2:	e015      	b.n	80071e0 <HAL_ADC_ConfigChannel+0x5f4>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071bc:	fa93 f3a3 	rbit	r3, r3
 80071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80071c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80071cc:	2320      	movs	r3, #32
 80071ce:	e003      	b.n	80071d8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	fab3 f383 	clz	r3, r3
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	3301      	adds	r3, #1
 80071da:	069b      	lsls	r3, r3, #26
 80071dc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d109      	bne.n	8007200 <HAL_ADC_ConfigChannel+0x614>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	0e9b      	lsrs	r3, r3, #26
 80071f2:	3301      	adds	r3, #1
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	2101      	movs	r1, #1
 80071fa:	fa01 f303 	lsl.w	r3, r1, r3
 80071fe:	e017      	b.n	8007230 <HAL_ADC_ConfigChannel+0x644>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	fa93 f3a3 	rbit	r3, r3
 800720c:	61fb      	str	r3, [r7, #28]
  return result;
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007218:	2320      	movs	r3, #32
 800721a:	e003      	b.n	8007224 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800721c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721e:	fab3 f383 	clz	r3, r3
 8007222:	b2db      	uxtb	r3, r3
 8007224:	3301      	adds	r3, #1
 8007226:	f003 031f 	and.w	r3, r3, #31
 800722a:	2101      	movs	r1, #1
 800722c:	fa01 f303 	lsl.w	r3, r1, r3
 8007230:	ea42 0103 	orr.w	r1, r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10d      	bne.n	800725c <HAL_ADC_ConfigChannel+0x670>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	0e9b      	lsrs	r3, r3, #26
 8007246:	3301      	adds	r3, #1
 8007248:	f003 021f 	and.w	r2, r3, #31
 800724c:	4613      	mov	r3, r2
 800724e:	005b      	lsls	r3, r3, #1
 8007250:	4413      	add	r3, r2
 8007252:	3b1e      	subs	r3, #30
 8007254:	051b      	lsls	r3, r3, #20
 8007256:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800725a:	e01b      	b.n	8007294 <HAL_ADC_ConfigChannel+0x6a8>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	fa93 f3a3 	rbit	r3, r3
 8007268:	613b      	str	r3, [r7, #16]
  return result;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007274:	2320      	movs	r3, #32
 8007276:	e003      	b.n	8007280 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	b2db      	uxtb	r3, r3
 8007280:	3301      	adds	r3, #1
 8007282:	f003 021f 	and.w	r2, r3, #31
 8007286:	4613      	mov	r3, r2
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	4413      	add	r3, r2
 800728c:	3b1e      	subs	r3, #30
 800728e:	051b      	lsls	r3, r3, #20
 8007290:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007294:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800729a:	4619      	mov	r1, r3
 800729c:	f7ff f8ea 	bl	8006474 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	4b09      	ldr	r3, [pc, #36]	@ (80072cc <HAL_ADC_ConfigChannel+0x6e0>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 80be 	beq.w	800742a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072b6:	d004      	beq.n	80072c2 <HAL_ADC_ConfigChannel+0x6d6>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a04      	ldr	r2, [pc, #16]	@ (80072d0 <HAL_ADC_ConfigChannel+0x6e4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d10a      	bne.n	80072d8 <HAL_ADC_ConfigChannel+0x6ec>
 80072c2:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <HAL_ADC_ConfigChannel+0x6e8>)
 80072c4:	e009      	b.n	80072da <HAL_ADC_ConfigChannel+0x6ee>
 80072c6:	bf00      	nop
 80072c8:	407f0000 	.word	0x407f0000
 80072cc:	80080000 	.word	0x80080000
 80072d0:	50000100 	.word	0x50000100
 80072d4:	50000300 	.word	0x50000300
 80072d8:	4b59      	ldr	r3, [pc, #356]	@ (8007440 <HAL_ADC_ConfigChannel+0x854>)
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fff2 	bl	80062c4 <LL_ADC_GetCommonPathInternalCh>
 80072e0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a56      	ldr	r2, [pc, #344]	@ (8007444 <HAL_ADC_ConfigChannel+0x858>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d004      	beq.n	80072f8 <HAL_ADC_ConfigChannel+0x70c>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a55      	ldr	r2, [pc, #340]	@ (8007448 <HAL_ADC_ConfigChannel+0x85c>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d13a      	bne.n	800736e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80072f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80072fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d134      	bne.n	800736e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800730c:	d005      	beq.n	800731a <HAL_ADC_ConfigChannel+0x72e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a4e      	ldr	r2, [pc, #312]	@ (800744c <HAL_ADC_ConfigChannel+0x860>)
 8007314:	4293      	cmp	r3, r2
 8007316:	f040 8085 	bne.w	8007424 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007322:	d004      	beq.n	800732e <HAL_ADC_ConfigChannel+0x742>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a49      	ldr	r2, [pc, #292]	@ (8007450 <HAL_ADC_ConfigChannel+0x864>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d101      	bne.n	8007332 <HAL_ADC_ConfigChannel+0x746>
 800732e:	4a49      	ldr	r2, [pc, #292]	@ (8007454 <HAL_ADC_ConfigChannel+0x868>)
 8007330:	e000      	b.n	8007334 <HAL_ADC_ConfigChannel+0x748>
 8007332:	4a43      	ldr	r2, [pc, #268]	@ (8007440 <HAL_ADC_ConfigChannel+0x854>)
 8007334:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007338:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f7fe ffad 	bl	800629e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007344:	4b44      	ldr	r3, [pc, #272]	@ (8007458 <HAL_ADC_ConfigChannel+0x86c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	099b      	lsrs	r3, r3, #6
 800734a:	4a44      	ldr	r2, [pc, #272]	@ (800745c <HAL_ADC_ConfigChannel+0x870>)
 800734c:	fba2 2303 	umull	r2, r3, r2, r3
 8007350:	099b      	lsrs	r3, r3, #6
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	4613      	mov	r3, r2
 8007356:	005b      	lsls	r3, r3, #1
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800735e:	e002      	b.n	8007366 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	3b01      	subs	r3, #1
 8007364:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f9      	bne.n	8007360 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800736c:	e05a      	b.n	8007424 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a3b      	ldr	r2, [pc, #236]	@ (8007460 <HAL_ADC_ConfigChannel+0x874>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d125      	bne.n	80073c4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800737c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11f      	bne.n	80073c4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a31      	ldr	r2, [pc, #196]	@ (8007450 <HAL_ADC_ConfigChannel+0x864>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d104      	bne.n	8007398 <HAL_ADC_ConfigChannel+0x7ac>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a34      	ldr	r2, [pc, #208]	@ (8007464 <HAL_ADC_ConfigChannel+0x878>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d047      	beq.n	8007428 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073a0:	d004      	beq.n	80073ac <HAL_ADC_ConfigChannel+0x7c0>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007450 <HAL_ADC_ConfigChannel+0x864>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d101      	bne.n	80073b0 <HAL_ADC_ConfigChannel+0x7c4>
 80073ac:	4a29      	ldr	r2, [pc, #164]	@ (8007454 <HAL_ADC_ConfigChannel+0x868>)
 80073ae:	e000      	b.n	80073b2 <HAL_ADC_ConfigChannel+0x7c6>
 80073b0:	4a23      	ldr	r2, [pc, #140]	@ (8007440 <HAL_ADC_ConfigChannel+0x854>)
 80073b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f7fe ff6e 	bl	800629e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073c2:	e031      	b.n	8007428 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a27      	ldr	r2, [pc, #156]	@ (8007468 <HAL_ADC_ConfigChannel+0x87c>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d12d      	bne.n	800742a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80073ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80073d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d127      	bne.n	800742a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1c      	ldr	r2, [pc, #112]	@ (8007450 <HAL_ADC_ConfigChannel+0x864>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d022      	beq.n	800742a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073ec:	d004      	beq.n	80073f8 <HAL_ADC_ConfigChannel+0x80c>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a17      	ldr	r2, [pc, #92]	@ (8007450 <HAL_ADC_ConfigChannel+0x864>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d101      	bne.n	80073fc <HAL_ADC_ConfigChannel+0x810>
 80073f8:	4a16      	ldr	r2, [pc, #88]	@ (8007454 <HAL_ADC_ConfigChannel+0x868>)
 80073fa:	e000      	b.n	80073fe <HAL_ADC_ConfigChannel+0x812>
 80073fc:	4a10      	ldr	r2, [pc, #64]	@ (8007440 <HAL_ADC_ConfigChannel+0x854>)
 80073fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007402:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f7fe ff48 	bl	800629e <LL_ADC_SetCommonPathInternalCh>
 800740e:	e00c      	b.n	800742a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007414:	f043 0220 	orr.w	r2, r3, #32
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007422:	e002      	b.n	800742a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007424:	bf00      	nop
 8007426:	e000      	b.n	800742a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007428:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007432:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007436:	4618      	mov	r0, r3
 8007438:	37d8      	adds	r7, #216	@ 0xd8
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	50000700 	.word	0x50000700
 8007444:	c3210000 	.word	0xc3210000
 8007448:	90c00010 	.word	0x90c00010
 800744c:	50000600 	.word	0x50000600
 8007450:	50000100 	.word	0x50000100
 8007454:	50000300 	.word	0x50000300
 8007458:	20000264 	.word	0x20000264
 800745c:	053e2d63 	.word	0x053e2d63
 8007460:	c7520000 	.word	0xc7520000
 8007464:	50000500 	.word	0x50000500
 8007468:	cb840000 	.word	0xcb840000

0800746c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007474:	2300      	movs	r3, #0
 8007476:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff f8b9 	bl	80065f4 <LL_ADC_IsEnabled>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d176      	bne.n	8007576 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	4b3c      	ldr	r3, [pc, #240]	@ (8007580 <ADC_Enable+0x114>)
 8007490:	4013      	ands	r3, r2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00d      	beq.n	80074b2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800749a:	f043 0210 	orr.w	r2, r3, #16
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a6:	f043 0201 	orr.w	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e062      	b.n	8007578 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7ff f888 	bl	80065cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074c4:	d004      	beq.n	80074d0 <ADC_Enable+0x64>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007584 <ADC_Enable+0x118>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d101      	bne.n	80074d4 <ADC_Enable+0x68>
 80074d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007588 <ADC_Enable+0x11c>)
 80074d2:	e000      	b.n	80074d6 <ADC_Enable+0x6a>
 80074d4:	4b2d      	ldr	r3, [pc, #180]	@ (800758c <ADC_Enable+0x120>)
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fef4 	bl	80062c4 <LL_ADC_GetCommonPathInternalCh>
 80074dc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80074de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d013      	beq.n	800750e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074e6:	4b2a      	ldr	r3, [pc, #168]	@ (8007590 <ADC_Enable+0x124>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	099b      	lsrs	r3, r3, #6
 80074ec:	4a29      	ldr	r2, [pc, #164]	@ (8007594 <ADC_Enable+0x128>)
 80074ee:	fba2 2303 	umull	r2, r3, r2, r3
 80074f2:	099b      	lsrs	r3, r3, #6
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	4613      	mov	r3, r2
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	4413      	add	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007500:	e002      	b.n	8007508 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	3b01      	subs	r3, #1
 8007506:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f9      	bne.n	8007502 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800750e:	f7fe fea7 	bl	8006260 <HAL_GetTick>
 8007512:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007514:	e028      	b.n	8007568 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4618      	mov	r0, r3
 800751c:	f7ff f86a 	bl	80065f4 <LL_ADC_IsEnabled>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d104      	bne.n	8007530 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4618      	mov	r0, r3
 800752c:	f7ff f84e 	bl	80065cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007530:	f7fe fe96 	bl	8006260 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b02      	cmp	r3, #2
 800753c:	d914      	bls.n	8007568 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d00d      	beq.n	8007568 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007550:	f043 0210 	orr.w	r2, r3, #16
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800755c:	f043 0201 	orr.w	r2, r3, #1
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e007      	b.n	8007578 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 0301 	and.w	r3, r3, #1
 8007572:	2b01      	cmp	r3, #1
 8007574:	d1cf      	bne.n	8007516 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	8000003f 	.word	0x8000003f
 8007584:	50000100 	.word	0x50000100
 8007588:	50000300 	.word	0x50000300
 800758c:	50000700 	.word	0x50000700
 8007590:	20000264 	.word	0x20000264
 8007594:	053e2d63 	.word	0x053e2d63

08007598 <LL_ADC_IsEnabled>:
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <LL_ADC_IsEnabled+0x18>
 80075ac:	2301      	movs	r3, #1
 80075ae:	e000      	b.n	80075b2 <LL_ADC_IsEnabled+0x1a>
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	370c      	adds	r7, #12
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <LL_ADC_REG_IsConversionOngoing>:
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d101      	bne.n	80075d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b0a1      	sub	sp, #132	@ 0x84
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80075fe:	2302      	movs	r3, #2
 8007600:	e0e7      	b.n	80077d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800760a:	2300      	movs	r3, #0
 800760c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800760e:	2300      	movs	r3, #0
 8007610:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800761a:	d102      	bne.n	8007622 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800761c:	4b6f      	ldr	r3, [pc, #444]	@ (80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800761e:	60bb      	str	r3, [r7, #8]
 8007620:	e009      	b.n	8007636 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a6e      	ldr	r2, [pc, #440]	@ (80077e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d102      	bne.n	8007632 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800762c:	4b6d      	ldr	r3, [pc, #436]	@ (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800762e:	60bb      	str	r3, [r7, #8]
 8007630:	e001      	b.n	8007636 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0be      	b.n	80077d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff ffb1 	bl	80075be <LL_ADC_REG_IsConversionOngoing>
 800765c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff ffab 	bl	80075be <LL_ADC_REG_IsConversionOngoing>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	f040 80a0 	bne.w	80077b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007672:	2b00      	cmp	r3, #0
 8007674:	f040 809c 	bne.w	80077b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007680:	d004      	beq.n	800768c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a55      	ldr	r2, [pc, #340]	@ (80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d101      	bne.n	8007690 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800768c:	4b56      	ldr	r3, [pc, #344]	@ (80077e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800768e:	e000      	b.n	8007692 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007690:	4b56      	ldr	r3, [pc, #344]	@ (80077ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007692:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d04b      	beq.n	8007734 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800769c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	6859      	ldr	r1, [r3, #4]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076ae:	035b      	lsls	r3, r3, #13
 80076b0:	430b      	orrs	r3, r1
 80076b2:	431a      	orrs	r2, r3
 80076b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076c0:	d004      	beq.n	80076cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a45      	ldr	r2, [pc, #276]	@ (80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d10f      	bne.n	80076ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80076cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80076d0:	f7ff ff62 	bl	8007598 <LL_ADC_IsEnabled>
 80076d4:	4604      	mov	r4, r0
 80076d6:	4841      	ldr	r0, [pc, #260]	@ (80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80076d8:	f7ff ff5e 	bl	8007598 <LL_ADC_IsEnabled>
 80076dc:	4603      	mov	r3, r0
 80076de:	4323      	orrs	r3, r4
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	bf0c      	ite	eq
 80076e4:	2301      	moveq	r3, #1
 80076e6:	2300      	movne	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	e012      	b.n	8007712 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80076ec:	483c      	ldr	r0, [pc, #240]	@ (80077e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80076ee:	f7ff ff53 	bl	8007598 <LL_ADC_IsEnabled>
 80076f2:	4604      	mov	r4, r0
 80076f4:	483b      	ldr	r0, [pc, #236]	@ (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80076f6:	f7ff ff4f 	bl	8007598 <LL_ADC_IsEnabled>
 80076fa:	4603      	mov	r3, r0
 80076fc:	431c      	orrs	r4, r3
 80076fe:	483c      	ldr	r0, [pc, #240]	@ (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007700:	f7ff ff4a 	bl	8007598 <LL_ADC_IsEnabled>
 8007704:	4603      	mov	r3, r0
 8007706:	4323      	orrs	r3, r4
 8007708:	2b00      	cmp	r3, #0
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d056      	beq.n	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007716:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800771e:	f023 030f 	bic.w	r3, r3, #15
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	6811      	ldr	r1, [r2, #0]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	6892      	ldr	r2, [r2, #8]
 800772a:	430a      	orrs	r2, r1
 800772c:	431a      	orrs	r2, r3
 800772e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007730:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007732:	e047      	b.n	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007734:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800773c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800773e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007748:	d004      	beq.n	8007754 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a23      	ldr	r2, [pc, #140]	@ (80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d10f      	bne.n	8007774 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007754:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007758:	f7ff ff1e 	bl	8007598 <LL_ADC_IsEnabled>
 800775c:	4604      	mov	r4, r0
 800775e:	481f      	ldr	r0, [pc, #124]	@ (80077dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007760:	f7ff ff1a 	bl	8007598 <LL_ADC_IsEnabled>
 8007764:	4603      	mov	r3, r0
 8007766:	4323      	orrs	r3, r4
 8007768:	2b00      	cmp	r3, #0
 800776a:	bf0c      	ite	eq
 800776c:	2301      	moveq	r3, #1
 800776e:	2300      	movne	r3, #0
 8007770:	b2db      	uxtb	r3, r3
 8007772:	e012      	b.n	800779a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007774:	481a      	ldr	r0, [pc, #104]	@ (80077e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007776:	f7ff ff0f 	bl	8007598 <LL_ADC_IsEnabled>
 800777a:	4604      	mov	r4, r0
 800777c:	4819      	ldr	r0, [pc, #100]	@ (80077e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800777e:	f7ff ff0b 	bl	8007598 <LL_ADC_IsEnabled>
 8007782:	4603      	mov	r3, r0
 8007784:	431c      	orrs	r4, r3
 8007786:	481a      	ldr	r0, [pc, #104]	@ (80077f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007788:	f7ff ff06 	bl	8007598 <LL_ADC_IsEnabled>
 800778c:	4603      	mov	r3, r0
 800778e:	4323      	orrs	r3, r4
 8007790:	2b00      	cmp	r3, #0
 8007792:	bf0c      	ite	eq
 8007794:	2301      	moveq	r3, #1
 8007796:	2300      	movne	r3, #0
 8007798:	b2db      	uxtb	r3, r3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d012      	beq.n	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800779e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80077a6:	f023 030f 	bic.w	r3, r3, #15
 80077aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80077ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80077ae:	e009      	b.n	80077c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80077c2:	e000      	b.n	80077c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80077c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80077ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3784      	adds	r7, #132	@ 0x84
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd90      	pop	{r4, r7, pc}
 80077da:	bf00      	nop
 80077dc:	50000100 	.word	0x50000100
 80077e0:	50000400 	.word	0x50000400
 80077e4:	50000500 	.word	0x50000500
 80077e8:	50000300 	.word	0x50000300
 80077ec:	50000700 	.word	0x50000700
 80077f0:	50000600 	.word	0x50000600

080077f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007804:	4b0c      	ldr	r3, [pc, #48]	@ (8007838 <__NVIC_SetPriorityGrouping+0x44>)
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007810:	4013      	ands	r3, r2
 8007812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800781c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007820:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007826:	4a04      	ldr	r2, [pc, #16]	@ (8007838 <__NVIC_SetPriorityGrouping+0x44>)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	60d3      	str	r3, [r2, #12]
}
 800782c:	bf00      	nop
 800782e:	3714      	adds	r7, #20
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	e000ed00 	.word	0xe000ed00

0800783c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007840:	4b04      	ldr	r3, [pc, #16]	@ (8007854 <__NVIC_GetPriorityGrouping+0x18>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	0a1b      	lsrs	r3, r3, #8
 8007846:	f003 0307 	and.w	r3, r3, #7
}
 800784a:	4618      	mov	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	e000ed00 	.word	0xe000ed00

08007858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007866:	2b00      	cmp	r3, #0
 8007868:	db0b      	blt.n	8007882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	f003 021f 	and.w	r2, r3, #31
 8007870:	4907      	ldr	r1, [pc, #28]	@ (8007890 <__NVIC_EnableIRQ+0x38>)
 8007872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007876:	095b      	lsrs	r3, r3, #5
 8007878:	2001      	movs	r0, #1
 800787a:	fa00 f202 	lsl.w	r2, r0, r2
 800787e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	e000e100 	.word	0xe000e100

08007894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	db0a      	blt.n	80078be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	490c      	ldr	r1, [pc, #48]	@ (80078e0 <__NVIC_SetPriority+0x4c>)
 80078ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b2:	0112      	lsls	r2, r2, #4
 80078b4:	b2d2      	uxtb	r2, r2
 80078b6:	440b      	add	r3, r1
 80078b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078bc:	e00a      	b.n	80078d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	b2da      	uxtb	r2, r3
 80078c2:	4908      	ldr	r1, [pc, #32]	@ (80078e4 <__NVIC_SetPriority+0x50>)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	3b04      	subs	r3, #4
 80078cc:	0112      	lsls	r2, r2, #4
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	440b      	add	r3, r1
 80078d2:	761a      	strb	r2, [r3, #24]
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	e000e100 	.word	0xe000e100
 80078e4:	e000ed00 	.word	0xe000ed00

080078e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b089      	sub	sp, #36	@ 0x24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f1c3 0307 	rsb	r3, r3, #7
 8007902:	2b04      	cmp	r3, #4
 8007904:	bf28      	it	cs
 8007906:	2304      	movcs	r3, #4
 8007908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3304      	adds	r3, #4
 800790e:	2b06      	cmp	r3, #6
 8007910:	d902      	bls.n	8007918 <NVIC_EncodePriority+0x30>
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	3b03      	subs	r3, #3
 8007916:	e000      	b.n	800791a <NVIC_EncodePriority+0x32>
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800791c:	f04f 32ff 	mov.w	r2, #4294967295
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	fa02 f303 	lsl.w	r3, r2, r3
 8007926:	43da      	mvns	r2, r3
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	401a      	ands	r2, r3
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007930:	f04f 31ff 	mov.w	r1, #4294967295
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	fa01 f303 	lsl.w	r3, r1, r3
 800793a:	43d9      	mvns	r1, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007940:	4313      	orrs	r3, r2
         );
}
 8007942:	4618      	mov	r0, r3
 8007944:	3724      	adds	r7, #36	@ 0x24
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	3b01      	subs	r3, #1
 800795c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007960:	d301      	bcc.n	8007966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007962:	2301      	movs	r3, #1
 8007964:	e00f      	b.n	8007986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007966:	4a0a      	ldr	r2, [pc, #40]	@ (8007990 <SysTick_Config+0x40>)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3b01      	subs	r3, #1
 800796c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800796e:	210f      	movs	r1, #15
 8007970:	f04f 30ff 	mov.w	r0, #4294967295
 8007974:	f7ff ff8e 	bl	8007894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <SysTick_Config+0x40>)
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800797e:	4b04      	ldr	r3, [pc, #16]	@ (8007990 <SysTick_Config+0x40>)
 8007980:	2207      	movs	r2, #7
 8007982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	e000e010 	.word	0xe000e010

08007994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff ff29 	bl	80077f4 <__NVIC_SetPriorityGrouping>
}
 80079a2:	bf00      	nop
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}

080079aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079aa:	b580      	push	{r7, lr}
 80079ac:	b086      	sub	sp, #24
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	4603      	mov	r3, r0
 80079b2:	60b9      	str	r1, [r7, #8]
 80079b4:	607a      	str	r2, [r7, #4]
 80079b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079b8:	f7ff ff40 	bl	800783c <__NVIC_GetPriorityGrouping>
 80079bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	6978      	ldr	r0, [r7, #20]
 80079c4:	f7ff ff90 	bl	80078e8 <NVIC_EncodePriority>
 80079c8:	4602      	mov	r2, r0
 80079ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ce:	4611      	mov	r1, r2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff ff5f 	bl	8007894 <__NVIC_SetPriority>
}
 80079d6:	bf00      	nop
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b082      	sub	sp, #8
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	4603      	mov	r3, r0
 80079e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80079e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff ff33 	bl	8007858 <__NVIC_EnableIRQ>
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b082      	sub	sp, #8
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff ffa4 	bl	8007950 <SysTick_Config>
 8007a08:	4603      	mov	r3, r0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e08d      	b.n	8007b42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	4b47      	ldr	r3, [pc, #284]	@ (8007b4c <HAL_DMA_Init+0x138>)
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d80f      	bhi.n	8007a52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	4b45      	ldr	r3, [pc, #276]	@ (8007b50 <HAL_DMA_Init+0x13c>)
 8007a3a:	4413      	add	r3, r2
 8007a3c:	4a45      	ldr	r2, [pc, #276]	@ (8007b54 <HAL_DMA_Init+0x140>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	091b      	lsrs	r3, r3, #4
 8007a44:	009a      	lsls	r2, r3, #2
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a42      	ldr	r2, [pc, #264]	@ (8007b58 <HAL_DMA_Init+0x144>)
 8007a4e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a50:	e00e      	b.n	8007a70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	4b40      	ldr	r3, [pc, #256]	@ (8007b5c <HAL_DMA_Init+0x148>)
 8007a5a:	4413      	add	r3, r2
 8007a5c:	4a3d      	ldr	r2, [pc, #244]	@ (8007b54 <HAL_DMA_Init+0x140>)
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	091b      	lsrs	r3, r3, #4
 8007a64:	009a      	lsls	r2, r3, #2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8007b60 <HAL_DMA_Init+0x14c>)
 8007a6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a1b      	ldr	r3, [r3, #32]
 8007ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa82 	bl	8007fcc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ad0:	d102      	bne.n	8007ad8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007aec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d010      	beq.n	8007b18 <HAL_DMA_Init+0x104>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	d80c      	bhi.n	8007b18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 faa2 	bl	8008048 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	e008      	b.n	8007b2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	40020407 	.word	0x40020407
 8007b50:	bffdfff8 	.word	0xbffdfff8
 8007b54:	cccccccd 	.word	0xcccccccd
 8007b58:	40020000 	.word	0x40020000
 8007b5c:	bffdfbf8 	.word	0xbffdfbf8
 8007b60:	40020400 	.word	0x40020400

08007b64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_DMA_Start_IT+0x20>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e066      	b.n	8007c52 <HAL_DMA_Start_IT+0xee>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d155      	bne.n	8007c44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f022 0201 	bic.w	r2, r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 f9c7 	bl	8007f50 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d008      	beq.n	8007bdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 020e 	orr.w	r2, r2, #14
 8007bd8:	601a      	str	r2, [r3, #0]
 8007bda:	e00f      	b.n	8007bfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0204 	bic.w	r2, r2, #4
 8007bea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f042 020a 	orr.w	r2, r2, #10
 8007bfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d007      	beq.n	8007c1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d007      	beq.n	8007c32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f042 0201 	orr.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	e005      	b.n	8007c50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b085      	sub	sp, #20
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d005      	beq.n	8007c7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2204      	movs	r2, #4
 8007c76:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
 8007c7c:	e037      	b.n	8007cee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 020e 	bic.w	r2, r2, #14
 8007c8c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c9c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0201 	bic.w	r2, r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cb2:	f003 021f 	and.w	r2, r3, #31
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cba:	2101      	movs	r1, #1
 8007cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8007cc0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007cca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ce2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007cec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3714      	adds	r7, #20
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d00d      	beq.n	8007d40 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2204      	movs	r2, #4
 8007d28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	73fb      	strb	r3, [r7, #15]
 8007d3e:	e047      	b.n	8007dd0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f022 020e 	bic.w	r2, r2, #14
 8007d4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0201 	bic.w	r2, r2, #1
 8007d5e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d74:	f003 021f 	and.w	r2, r3, #31
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7c:	2101      	movs	r1, #1
 8007d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d82:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d8c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00c      	beq.n	8007db0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007da4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007dae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4798      	blx	r3
    }
  }
  return status;
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df6:	f003 031f 	and.w	r3, r3, #31
 8007dfa:	2204      	movs	r2, #4
 8007dfc:	409a      	lsls	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d026      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x7a>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d021      	beq.n	8007e54 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d107      	bne.n	8007e2e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f022 0204 	bic.w	r2, r2, #4
 8007e2c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e32:	f003 021f 	and.w	r2, r3, #31
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e3a:	2104      	movs	r1, #4
 8007e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8007e40:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d071      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007e52:	e06c      	b.n	8007f2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e58:	f003 031f 	and.w	r3, r3, #31
 8007e5c:	2202      	movs	r2, #2
 8007e5e:	409a      	lsls	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4013      	ands	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d02e      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d029      	beq.n	8007ec6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10b      	bne.n	8007e98 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 020a 	bic.w	r2, r2, #10
 8007e8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e9c:	f003 021f 	and.w	r2, r3, #31
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eaa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d038      	beq.n	8007f2e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007ec4:	e033      	b.n	8007f2e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eca:	f003 031f 	and.w	r3, r3, #31
 8007ece:	2208      	movs	r2, #8
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d02a      	beq.n	8007f30 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f003 0308 	and.w	r3, r3, #8
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d025      	beq.n	8007f30 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 020e 	bic.w	r2, r2, #14
 8007ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ef8:	f003 021f 	and.w	r2, r3, #31
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f00:	2101      	movs	r1, #1
 8007f02:	fa01 f202 	lsl.w	r2, r1, r2
 8007f06:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007f2e:	bf00      	nop
 8007f30:	bf00      	nop
}
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f66:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f78:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7e:	f003 021f 	and.w	r2, r3, #31
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f86:	2101      	movs	r1, #1
 8007f88:	fa01 f202 	lsl.w	r2, r1, r2
 8007f8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	2b10      	cmp	r3, #16
 8007f9c:	d108      	bne.n	8007fb0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007fae:	e007      	b.n	8007fc0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	60da      	str	r2, [r3, #12]
}
 8007fc0:	bf00      	nop
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	4b16      	ldr	r3, [pc, #88]	@ (8008034 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d802      	bhi.n	8007fe6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007fe0:	4b15      	ldr	r3, [pc, #84]	@ (8008038 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	e001      	b.n	8007fea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007fe6:	4b15      	ldr	r3, [pc, #84]	@ (800803c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007fe8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	3b08      	subs	r3, #8
 8007ff6:	4a12      	ldr	r2, [pc, #72]	@ (8008040 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ffc:	091b      	lsrs	r3, r3, #4
 8007ffe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008004:	089b      	lsrs	r3, r3, #2
 8008006:	009a      	lsls	r2, r3, #2
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	4413      	add	r3, r2
 800800c:	461a      	mov	r2, r3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a0b      	ldr	r2, [pc, #44]	@ (8008044 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008016:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 031f 	and.w	r3, r3, #31
 800801e:	2201      	movs	r2, #1
 8008020:	409a      	lsls	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40020407 	.word	0x40020407
 8008038:	40020800 	.word	0x40020800
 800803c:	40020820 	.word	0x40020820
 8008040:	cccccccd 	.word	0xcccccccd
 8008044:	40020880 	.word	0x40020880

08008048 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008048:	b480      	push	{r7}
 800804a:	b085      	sub	sp, #20
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	b2db      	uxtb	r3, r3
 8008056:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4b0b      	ldr	r3, [pc, #44]	@ (8008088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	461a      	mov	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a08      	ldr	r2, [pc, #32]	@ (800808c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800806a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3b01      	subs	r3, #1
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2201      	movs	r2, #1
 8008076:	409a      	lsls	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	1000823f 	.word	0x1000823f
 800808c:	40020940 	.word	0x40020940

08008090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800809e:	e15a      	b.n	8008356 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	2101      	movs	r1, #1
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	fa01 f303 	lsl.w	r3, r1, r3
 80080ac:	4013      	ands	r3, r2
 80080ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 814c 	beq.w	8008350 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d005      	beq.n	80080d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d130      	bne.n	8008132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	2203      	movs	r2, #3
 80080dc:	fa02 f303 	lsl.w	r3, r2, r3
 80080e0:	43db      	mvns	r3, r3
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4013      	ands	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	68da      	ldr	r2, [r3, #12]
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	fa02 f303 	lsl.w	r3, r2, r3
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008106:	2201      	movs	r2, #1
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	fa02 f303 	lsl.w	r3, r2, r3
 800810e:	43db      	mvns	r3, r3
 8008110:	693a      	ldr	r2, [r7, #16]
 8008112:	4013      	ands	r3, r2
 8008114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	091b      	lsrs	r3, r3, #4
 800811c:	f003 0201 	and.w	r2, r3, #1
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	fa02 f303 	lsl.w	r3, r2, r3
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	4313      	orrs	r3, r2
 800812a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	693a      	ldr	r2, [r7, #16]
 8008130:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b03      	cmp	r3, #3
 800813c:	d017      	beq.n	800816e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	2203      	movs	r2, #3
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	43db      	mvns	r3, r3
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4013      	ands	r3, r2
 8008154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	fa02 f303 	lsl.w	r3, r2, r3
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f003 0303 	and.w	r3, r3, #3
 8008176:	2b02      	cmp	r3, #2
 8008178:	d123      	bne.n	80081c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	08da      	lsrs	r2, r3, #3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	3208      	adds	r2, #8
 8008182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	220f      	movs	r2, #15
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	43db      	mvns	r3, r3
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4013      	ands	r3, r2
 800819c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	691a      	ldr	r2, [r3, #16]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	08da      	lsrs	r2, r3, #3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3208      	adds	r2, #8
 80081bc:	6939      	ldr	r1, [r7, #16]
 80081be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	2203      	movs	r2, #3
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	43db      	mvns	r3, r3
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	4013      	ands	r3, r2
 80081d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f003 0203 	and.w	r2, r3, #3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80a6 	beq.w	8008350 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008204:	4b5b      	ldr	r3, [pc, #364]	@ (8008374 <HAL_GPIO_Init+0x2e4>)
 8008206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008208:	4a5a      	ldr	r2, [pc, #360]	@ (8008374 <HAL_GPIO_Init+0x2e4>)
 800820a:	f043 0301 	orr.w	r3, r3, #1
 800820e:	6613      	str	r3, [r2, #96]	@ 0x60
 8008210:	4b58      	ldr	r3, [pc, #352]	@ (8008374 <HAL_GPIO_Init+0x2e4>)
 8008212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	60bb      	str	r3, [r7, #8]
 800821a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800821c:	4a56      	ldr	r2, [pc, #344]	@ (8008378 <HAL_GPIO_Init+0x2e8>)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	089b      	lsrs	r3, r3, #2
 8008222:	3302      	adds	r3, #2
 8008224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	220f      	movs	r2, #15
 8008234:	fa02 f303 	lsl.w	r3, r2, r3
 8008238:	43db      	mvns	r3, r3
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	4013      	ands	r3, r2
 800823e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008246:	d01f      	beq.n	8008288 <HAL_GPIO_Init+0x1f8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a4c      	ldr	r2, [pc, #304]	@ (800837c <HAL_GPIO_Init+0x2ec>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d019      	beq.n	8008284 <HAL_GPIO_Init+0x1f4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a4b      	ldr	r2, [pc, #300]	@ (8008380 <HAL_GPIO_Init+0x2f0>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d013      	beq.n	8008280 <HAL_GPIO_Init+0x1f0>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a4a      	ldr	r2, [pc, #296]	@ (8008384 <HAL_GPIO_Init+0x2f4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00d      	beq.n	800827c <HAL_GPIO_Init+0x1ec>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a49      	ldr	r2, [pc, #292]	@ (8008388 <HAL_GPIO_Init+0x2f8>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d007      	beq.n	8008278 <HAL_GPIO_Init+0x1e8>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a48      	ldr	r2, [pc, #288]	@ (800838c <HAL_GPIO_Init+0x2fc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d101      	bne.n	8008274 <HAL_GPIO_Init+0x1e4>
 8008270:	2305      	movs	r3, #5
 8008272:	e00a      	b.n	800828a <HAL_GPIO_Init+0x1fa>
 8008274:	2306      	movs	r3, #6
 8008276:	e008      	b.n	800828a <HAL_GPIO_Init+0x1fa>
 8008278:	2304      	movs	r3, #4
 800827a:	e006      	b.n	800828a <HAL_GPIO_Init+0x1fa>
 800827c:	2303      	movs	r3, #3
 800827e:	e004      	b.n	800828a <HAL_GPIO_Init+0x1fa>
 8008280:	2302      	movs	r3, #2
 8008282:	e002      	b.n	800828a <HAL_GPIO_Init+0x1fa>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <HAL_GPIO_Init+0x1fa>
 8008288:	2300      	movs	r3, #0
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	f002 0203 	and.w	r2, r2, #3
 8008290:	0092      	lsls	r2, r2, #2
 8008292:	4093      	lsls	r3, r2
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800829a:	4937      	ldr	r1, [pc, #220]	@ (8008378 <HAL_GPIO_Init+0x2e8>)
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	089b      	lsrs	r3, r3, #2
 80082a0:	3302      	adds	r3, #2
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082a8:	4b39      	ldr	r3, [pc, #228]	@ (8008390 <HAL_GPIO_Init+0x300>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	43db      	mvns	r3, r3
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4013      	ands	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80082cc:	4a30      	ldr	r2, [pc, #192]	@ (8008390 <HAL_GPIO_Init+0x300>)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80082d2:	4b2f      	ldr	r3, [pc, #188]	@ (8008390 <HAL_GPIO_Init+0x300>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	43db      	mvns	r3, r3
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4013      	ands	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d003      	beq.n	80082f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80082f6:	4a26      	ldr	r2, [pc, #152]	@ (8008390 <HAL_GPIO_Init+0x300>)
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80082fc:	4b24      	ldr	r3, [pc, #144]	@ (8008390 <HAL_GPIO_Init+0x300>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	43db      	mvns	r3, r3
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4013      	ands	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d003      	beq.n	8008320 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008320:	4a1b      	ldr	r2, [pc, #108]	@ (8008390 <HAL_GPIO_Init+0x300>)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008326:	4b1a      	ldr	r3, [pc, #104]	@ (8008390 <HAL_GPIO_Init+0x300>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	43db      	mvns	r3, r3
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4013      	ands	r3, r2
 8008334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4313      	orrs	r3, r2
 8008348:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800834a:	4a11      	ldr	r2, [pc, #68]	@ (8008390 <HAL_GPIO_Init+0x300>)
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	3301      	adds	r3, #1
 8008354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	fa22 f303 	lsr.w	r3, r2, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	f47f ae9d 	bne.w	80080a0 <HAL_GPIO_Init+0x10>
  }
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	371c      	adds	r7, #28
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	40021000 	.word	0x40021000
 8008378:	40010000 	.word	0x40010000
 800837c:	48000400 	.word	0x48000400
 8008380:	48000800 	.word	0x48000800
 8008384:	48000c00 	.word	0x48000c00
 8008388:	48001000 	.word	0x48001000
 800838c:	48001400 	.word	0x48001400
 8008390:	40010400 	.word	0x40010400

08008394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	807b      	strh	r3, [r7, #2]
 80083a0:	4613      	mov	r3, r2
 80083a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80083a4:	787b      	ldrb	r3, [r7, #1]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80083aa:	887a      	ldrh	r2, [r7, #2]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80083b0:	e002      	b.n	80083b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80083b2:	887a      	ldrh	r2, [r7, #2]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80083ce:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083d0:	695a      	ldr	r2, [r3, #20]
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	4013      	ands	r3, r2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083da:	4a05      	ldr	r2, [pc, #20]	@ (80083f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083dc:	88fb      	ldrh	r3, [r7, #6]
 80083de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083e0:	88fb      	ldrh	r3, [r7, #6]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fc fc20 	bl	8004c28 <HAL_GPIO_EXTI_Callback>
  }
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	40010400 	.word	0x40010400

080083f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d141      	bne.n	8008486 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008402:	4b4b      	ldr	r3, [pc, #300]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800840a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800840e:	d131      	bne.n	8008474 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008410:	4b47      	ldr	r3, [pc, #284]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008416:	4a46      	ldr	r2, [pc, #280]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800841c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008420:	4b43      	ldr	r3, [pc, #268]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008428:	4a41      	ldr	r2, [pc, #260]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800842a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800842e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008430:	4b40      	ldr	r3, [pc, #256]	@ (8008534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2232      	movs	r2, #50	@ 0x32
 8008436:	fb02 f303 	mul.w	r3, r2, r3
 800843a:	4a3f      	ldr	r2, [pc, #252]	@ (8008538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800843c:	fba2 2303 	umull	r2, r3, r2, r3
 8008440:	0c9b      	lsrs	r3, r3, #18
 8008442:	3301      	adds	r3, #1
 8008444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008446:	e002      	b.n	800844e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3b01      	subs	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800844e:	4b38      	ldr	r3, [pc, #224]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845a:	d102      	bne.n	8008462 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f2      	bne.n	8008448 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008462:	4b33      	ldr	r3, [pc, #204]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800846a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800846e:	d158      	bne.n	8008522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008470:	2303      	movs	r3, #3
 8008472:	e057      	b.n	8008524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008474:	4b2e      	ldr	r3, [pc, #184]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800847a:	4a2d      	ldr	r2, [pc, #180]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800847c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008484:	e04d      	b.n	8008522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800848c:	d141      	bne.n	8008512 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800848e:	4b28      	ldr	r3, [pc, #160]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800849a:	d131      	bne.n	8008500 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800849c:	4b24      	ldr	r3, [pc, #144]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800849e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084a2:	4a23      	ldr	r2, [pc, #140]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80084ac:	4b20      	ldr	r3, [pc, #128]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80084b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80084ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80084bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008534 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2232      	movs	r2, #50	@ 0x32
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
 80084c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008538 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80084c8:	fba2 2303 	umull	r2, r3, r2, r3
 80084cc:	0c9b      	lsrs	r3, r3, #18
 80084ce:	3301      	adds	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084d2:	e002      	b.n	80084da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084da:	4b15      	ldr	r3, [pc, #84]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e6:	d102      	bne.n	80084ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1f2      	bne.n	80084d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084ee:	4b10      	ldr	r3, [pc, #64]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80084f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084fa:	d112      	bne.n	8008522 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e011      	b.n	8008524 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008500:	4b0b      	ldr	r3, [pc, #44]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008506:	4a0a      	ldr	r2, [pc, #40]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800850c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008510:	e007      	b.n	8008522 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008512:	4b07      	ldr	r3, [pc, #28]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800851a:	4a05      	ldr	r2, [pc, #20]	@ (8008530 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800851c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008520:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	40007000 	.word	0x40007000
 8008534:	20000264 	.word	0x20000264
 8008538:	431bde83 	.word	0x431bde83

0800853c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008540:	4b05      	ldr	r3, [pc, #20]	@ (8008558 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	4a04      	ldr	r2, [pc, #16]	@ (8008558 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008546:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800854a:	6093      	str	r3, [r2, #8]
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	40007000 	.word	0x40007000

0800855c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e2fe      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d075      	beq.n	8008666 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800857a:	4b97      	ldr	r3, [pc, #604]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f003 030c 	and.w	r3, r3, #12
 8008582:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008584:	4b94      	ldr	r3, [pc, #592]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f003 0303 	and.w	r3, r3, #3
 800858c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	2b0c      	cmp	r3, #12
 8008592:	d102      	bne.n	800859a <HAL_RCC_OscConfig+0x3e>
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b03      	cmp	r3, #3
 8008598:	d002      	beq.n	80085a0 <HAL_RCC_OscConfig+0x44>
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b08      	cmp	r3, #8
 800859e:	d10b      	bne.n	80085b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085a0:	4b8d      	ldr	r3, [pc, #564]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d05b      	beq.n	8008664 <HAL_RCC_OscConfig+0x108>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d157      	bne.n	8008664 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e2d9      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c0:	d106      	bne.n	80085d0 <HAL_RCC_OscConfig+0x74>
 80085c2:	4b85      	ldr	r3, [pc, #532]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a84      	ldr	r2, [pc, #528]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	e01d      	b.n	800860c <HAL_RCC_OscConfig+0xb0>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085d8:	d10c      	bne.n	80085f4 <HAL_RCC_OscConfig+0x98>
 80085da:	4b7f      	ldr	r3, [pc, #508]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a7e      	ldr	r2, [pc, #504]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80085e4:	6013      	str	r3, [r2, #0]
 80085e6:	4b7c      	ldr	r3, [pc, #496]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a7b      	ldr	r2, [pc, #492]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	e00b      	b.n	800860c <HAL_RCC_OscConfig+0xb0>
 80085f4:	4b78      	ldr	r3, [pc, #480]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a77      	ldr	r2, [pc, #476]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80085fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085fe:	6013      	str	r3, [r2, #0]
 8008600:	4b75      	ldr	r3, [pc, #468]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a74      	ldr	r2, [pc, #464]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008606:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800860a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d013      	beq.n	800863c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008614:	f7fd fe24 	bl	8006260 <HAL_GetTick>
 8008618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800861a:	e008      	b.n	800862e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800861c:	f7fd fe20 	bl	8006260 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b64      	cmp	r3, #100	@ 0x64
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e29e      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800862e:	4b6a      	ldr	r3, [pc, #424]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0f0      	beq.n	800861c <HAL_RCC_OscConfig+0xc0>
 800863a:	e014      	b.n	8008666 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800863c:	f7fd fe10 	bl	8006260 <HAL_GetTick>
 8008640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008642:	e008      	b.n	8008656 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008644:	f7fd fe0c 	bl	8006260 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b64      	cmp	r3, #100	@ 0x64
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e28a      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008656:	4b60      	ldr	r3, [pc, #384]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f0      	bne.n	8008644 <HAL_RCC_OscConfig+0xe8>
 8008662:	e000      	b.n	8008666 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b00      	cmp	r3, #0
 8008670:	d075      	beq.n	800875e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008672:	4b59      	ldr	r3, [pc, #356]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f003 030c 	and.w	r3, r3, #12
 800867a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800867c:	4b56      	ldr	r3, [pc, #344]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f003 0303 	and.w	r3, r3, #3
 8008684:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	2b0c      	cmp	r3, #12
 800868a:	d102      	bne.n	8008692 <HAL_RCC_OscConfig+0x136>
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d002      	beq.n	8008698 <HAL_RCC_OscConfig+0x13c>
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	2b04      	cmp	r3, #4
 8008696:	d11f      	bne.n	80086d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008698:	4b4f      	ldr	r3, [pc, #316]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d005      	beq.n	80086b0 <HAL_RCC_OscConfig+0x154>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e25d      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086b0:	4b49      	ldr	r3, [pc, #292]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	061b      	lsls	r3, r3, #24
 80086be:	4946      	ldr	r1, [pc, #280]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80086c4:	4b45      	ldr	r3, [pc, #276]	@ (80087dc <HAL_RCC_OscConfig+0x280>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fd fd7d 	bl	80061c8 <HAL_InitTick>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d043      	beq.n	800875c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e249      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d023      	beq.n	8008728 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086e0:	4b3d      	ldr	r3, [pc, #244]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a3c      	ldr	r2, [pc, #240]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80086e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ec:	f7fd fdb8 	bl	8006260 <HAL_GetTick>
 80086f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80086f2:	e008      	b.n	8008706 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086f4:	f7fd fdb4 	bl	8006260 <HAL_GetTick>
 80086f8:	4602      	mov	r2, r0
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	1ad3      	subs	r3, r2, r3
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d901      	bls.n	8008706 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e232      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008706:	4b34      	ldr	r3, [pc, #208]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0f0      	beq.n	80086f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008712:	4b31      	ldr	r3, [pc, #196]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	061b      	lsls	r3, r3, #24
 8008720:	492d      	ldr	r1, [pc, #180]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	604b      	str	r3, [r1, #4]
 8008726:	e01a      	b.n	800875e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008728:	4b2b      	ldr	r3, [pc, #172]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a2a      	ldr	r2, [pc, #168]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 800872e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008734:	f7fd fd94 	bl	8006260 <HAL_GetTick>
 8008738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800873a:	e008      	b.n	800874e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800873c:	f7fd fd90 	bl	8006260 <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	1ad3      	subs	r3, r2, r3
 8008746:	2b02      	cmp	r3, #2
 8008748:	d901      	bls.n	800874e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e20e      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800874e:	4b22      	ldr	r3, [pc, #136]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1f0      	bne.n	800873c <HAL_RCC_OscConfig+0x1e0>
 800875a:	e000      	b.n	800875e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800875c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 0308 	and.w	r3, r3, #8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d041      	beq.n	80087ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d01c      	beq.n	80087ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008772:	4b19      	ldr	r3, [pc, #100]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 8008774:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008778:	4a17      	ldr	r2, [pc, #92]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008782:	f7fd fd6d 	bl	8006260 <HAL_GetTick>
 8008786:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008788:	e008      	b.n	800879c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800878a:	f7fd fd69 	bl	8006260 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d901      	bls.n	800879c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e1e7      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800879c:	4b0e      	ldr	r3, [pc, #56]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 800879e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0ef      	beq.n	800878a <HAL_RCC_OscConfig+0x22e>
 80087aa:	e020      	b.n	80087ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087ac:	4b0a      	ldr	r3, [pc, #40]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80087ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087b2:	4a09      	ldr	r2, [pc, #36]	@ (80087d8 <HAL_RCC_OscConfig+0x27c>)
 80087b4:	f023 0301 	bic.w	r3, r3, #1
 80087b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087bc:	f7fd fd50 	bl	8006260 <HAL_GetTick>
 80087c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087c2:	e00d      	b.n	80087e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087c4:	f7fd fd4c 	bl	8006260 <HAL_GetTick>
 80087c8:	4602      	mov	r2, r0
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d906      	bls.n	80087e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e1ca      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
 80087d6:	bf00      	nop
 80087d8:	40021000 	.word	0x40021000
 80087dc:	20000268 	.word	0x20000268
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80087e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80087e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1ea      	bne.n	80087c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0304 	and.w	r3, r3, #4
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 80a6 	beq.w	8008948 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087fc:	2300      	movs	r3, #0
 80087fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008800:	4b84      	ldr	r3, [pc, #528]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <HAL_RCC_OscConfig+0x2b4>
 800880c:	2301      	movs	r3, #1
 800880e:	e000      	b.n	8008812 <HAL_RCC_OscConfig+0x2b6>
 8008810:	2300      	movs	r3, #0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00d      	beq.n	8008832 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008816:	4b7f      	ldr	r3, [pc, #508]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800881a:	4a7e      	ldr	r2, [pc, #504]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 800881c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008820:	6593      	str	r3, [r2, #88]	@ 0x58
 8008822:	4b7c      	ldr	r3, [pc, #496]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800882e:	2301      	movs	r3, #1
 8008830:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008832:	4b79      	ldr	r3, [pc, #484]	@ (8008a18 <HAL_RCC_OscConfig+0x4bc>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800883a:	2b00      	cmp	r3, #0
 800883c:	d118      	bne.n	8008870 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800883e:	4b76      	ldr	r3, [pc, #472]	@ (8008a18 <HAL_RCC_OscConfig+0x4bc>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a75      	ldr	r2, [pc, #468]	@ (8008a18 <HAL_RCC_OscConfig+0x4bc>)
 8008844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800884a:	f7fd fd09 	bl	8006260 <HAL_GetTick>
 800884e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008850:	e008      	b.n	8008864 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008852:	f7fd fd05 	bl	8006260 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d901      	bls.n	8008864 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008860:	2303      	movs	r3, #3
 8008862:	e183      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008864:	4b6c      	ldr	r3, [pc, #432]	@ (8008a18 <HAL_RCC_OscConfig+0x4bc>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0f0      	beq.n	8008852 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d108      	bne.n	800888a <HAL_RCC_OscConfig+0x32e>
 8008878:	4b66      	ldr	r3, [pc, #408]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800887e:	4a65      	ldr	r2, [pc, #404]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008880:	f043 0301 	orr.w	r3, r3, #1
 8008884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008888:	e024      	b.n	80088d4 <HAL_RCC_OscConfig+0x378>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	689b      	ldr	r3, [r3, #8]
 800888e:	2b05      	cmp	r3, #5
 8008890:	d110      	bne.n	80088b4 <HAL_RCC_OscConfig+0x358>
 8008892:	4b60      	ldr	r3, [pc, #384]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008898:	4a5e      	ldr	r2, [pc, #376]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 800889a:	f043 0304 	orr.w	r3, r3, #4
 800889e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80088a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088a8:	4a5a      	ldr	r2, [pc, #360]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80088aa:	f043 0301 	orr.w	r3, r3, #1
 80088ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088b2:	e00f      	b.n	80088d4 <HAL_RCC_OscConfig+0x378>
 80088b4:	4b57      	ldr	r3, [pc, #348]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80088b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ba:	4a56      	ldr	r2, [pc, #344]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80088bc:	f023 0301 	bic.w	r3, r3, #1
 80088c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80088c4:	4b53      	ldr	r3, [pc, #332]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80088c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ca:	4a52      	ldr	r2, [pc, #328]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80088cc:	f023 0304 	bic.w	r3, r3, #4
 80088d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d016      	beq.n	800890a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088dc:	f7fd fcc0 	bl	8006260 <HAL_GetTick>
 80088e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088e2:	e00a      	b.n	80088fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088e4:	f7fd fcbc 	bl	8006260 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e138      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80088fa:	4b46      	ldr	r3, [pc, #280]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80088fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008900:	f003 0302 	and.w	r3, r3, #2
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0ed      	beq.n	80088e4 <HAL_RCC_OscConfig+0x388>
 8008908:	e015      	b.n	8008936 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800890a:	f7fd fca9 	bl	8006260 <HAL_GetTick>
 800890e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008910:	e00a      	b.n	8008928 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008912:	f7fd fca5 	bl	8006260 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008920:	4293      	cmp	r3, r2
 8008922:	d901      	bls.n	8008928 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e121      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008928:	4b3a      	ldr	r3, [pc, #232]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 800892a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1ed      	bne.n	8008912 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008936:	7ffb      	ldrb	r3, [r7, #31]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d105      	bne.n	8008948 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800893c:	4b35      	ldr	r3, [pc, #212]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 800893e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008940:	4a34      	ldr	r2, [pc, #208]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008946:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0320 	and.w	r3, r3, #32
 8008950:	2b00      	cmp	r3, #0
 8008952:	d03c      	beq.n	80089ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01c      	beq.n	8008996 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800895c:	4b2d      	ldr	r3, [pc, #180]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 800895e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008962:	4a2c      	ldr	r2, [pc, #176]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008964:	f043 0301 	orr.w	r3, r3, #1
 8008968:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800896c:	f7fd fc78 	bl	8006260 <HAL_GetTick>
 8008970:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008972:	e008      	b.n	8008986 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008974:	f7fd fc74 	bl	8006260 <HAL_GetTick>
 8008978:	4602      	mov	r2, r0
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	1ad3      	subs	r3, r2, r3
 800897e:	2b02      	cmp	r3, #2
 8008980:	d901      	bls.n	8008986 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008982:	2303      	movs	r3, #3
 8008984:	e0f2      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008986:	4b23      	ldr	r3, [pc, #140]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008988:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0ef      	beq.n	8008974 <HAL_RCC_OscConfig+0x418>
 8008994:	e01b      	b.n	80089ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008996:	4b1f      	ldr	r3, [pc, #124]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 8008998:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800899c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 800899e:	f023 0301 	bic.w	r3, r3, #1
 80089a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a6:	f7fd fc5b 	bl	8006260 <HAL_GetTick>
 80089aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089ac:	e008      	b.n	80089c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80089ae:	f7fd fc57 	bl	8006260 <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	2b02      	cmp	r3, #2
 80089ba:	d901      	bls.n	80089c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80089bc:	2303      	movs	r3, #3
 80089be:	e0d5      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80089c0:	4b14      	ldr	r3, [pc, #80]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80089c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1ef      	bne.n	80089ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80c9 	beq.w	8008b6a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089d8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	f003 030c 	and.w	r3, r3, #12
 80089e0:	2b0c      	cmp	r3, #12
 80089e2:	f000 8083 	beq.w	8008aec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69db      	ldr	r3, [r3, #28]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d15e      	bne.n	8008aac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ee:	4b09      	ldr	r3, [pc, #36]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a08      	ldr	r2, [pc, #32]	@ (8008a14 <HAL_RCC_OscConfig+0x4b8>)
 80089f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089fa:	f7fd fc31 	bl	8006260 <HAL_GetTick>
 80089fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a00:	e00c      	b.n	8008a1c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a02:	f7fd fc2d 	bl	8006260 <HAL_GetTick>
 8008a06:	4602      	mov	r2, r0
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	1ad3      	subs	r3, r2, r3
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d905      	bls.n	8008a1c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e0ab      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
 8008a14:	40021000 	.word	0x40021000
 8008a18:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008a1c:	4b55      	ldr	r3, [pc, #340]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1ec      	bne.n	8008a02 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a28:	4b52      	ldr	r3, [pc, #328]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008a2a:	68da      	ldr	r2, [r3, #12]
 8008a2c:	4b52      	ldr	r3, [pc, #328]	@ (8008b78 <HAL_RCC_OscConfig+0x61c>)
 8008a2e:	4013      	ands	r3, r2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	6a11      	ldr	r1, [r2, #32]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008a38:	3a01      	subs	r2, #1
 8008a3a:	0112      	lsls	r2, r2, #4
 8008a3c:	4311      	orrs	r1, r2
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008a42:	0212      	lsls	r2, r2, #8
 8008a44:	4311      	orrs	r1, r2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008a4a:	0852      	lsrs	r2, r2, #1
 8008a4c:	3a01      	subs	r2, #1
 8008a4e:	0552      	lsls	r2, r2, #21
 8008a50:	4311      	orrs	r1, r2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008a56:	0852      	lsrs	r2, r2, #1
 8008a58:	3a01      	subs	r2, #1
 8008a5a:	0652      	lsls	r2, r2, #25
 8008a5c:	4311      	orrs	r1, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008a62:	06d2      	lsls	r2, r2, #27
 8008a64:	430a      	orrs	r2, r1
 8008a66:	4943      	ldr	r1, [pc, #268]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a6c:	4b41      	ldr	r3, [pc, #260]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a40      	ldr	r2, [pc, #256]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008a72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a76:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008a78:	4b3e      	ldr	r3, [pc, #248]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	4a3d      	ldr	r2, [pc, #244]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a82:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a84:	f7fd fbec 	bl	8006260 <HAL_GetTick>
 8008a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a8a:	e008      	b.n	8008a9e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a8c:	f7fd fbe8 	bl	8006260 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e066      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a9e:	4b35      	ldr	r3, [pc, #212]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0f0      	beq.n	8008a8c <HAL_RCC_OscConfig+0x530>
 8008aaa:	e05e      	b.n	8008b6a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008aac:	4b31      	ldr	r3, [pc, #196]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a30      	ldr	r2, [pc, #192]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab8:	f7fd fbd2 	bl	8006260 <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ac0:	f7fd fbce 	bl	8006260 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e04c      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ad2:	4b28      	ldr	r3, [pc, #160]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008ade:	4b25      	ldr	r3, [pc, #148]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008ae0:	68da      	ldr	r2, [r3, #12]
 8008ae2:	4924      	ldr	r1, [pc, #144]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008ae4:	4b25      	ldr	r3, [pc, #148]	@ (8008b7c <HAL_RCC_OscConfig+0x620>)
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	60cb      	str	r3, [r1, #12]
 8008aea:	e03e      	b.n	8008b6a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d101      	bne.n	8008af8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e039      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008af8:	4b1e      	ldr	r3, [pc, #120]	@ (8008b74 <HAL_RCC_OscConfig+0x618>)
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f003 0203 	and.w	r2, r3, #3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d12c      	bne.n	8008b66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b16:	3b01      	subs	r3, #1
 8008b18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d123      	bne.n	8008b66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d11b      	bne.n	8008b66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d113      	bne.n	8008b66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b48:	085b      	lsrs	r3, r3, #1
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d109      	bne.n	8008b66 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5c:	085b      	lsrs	r3, r3, #1
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d001      	beq.n	8008b6a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e000      	b.n	8008b6c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3720      	adds	r7, #32
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	40021000 	.word	0x40021000
 8008b78:	019f800c 	.word	0x019f800c
 8008b7c:	feeefffc 	.word	0xfeeefffc

08008b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e11e      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008b98:	4b91      	ldr	r3, [pc, #580]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 030f 	and.w	r3, r3, #15
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d910      	bls.n	8008bc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ba6:	4b8e      	ldr	r3, [pc, #568]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f023 020f 	bic.w	r2, r3, #15
 8008bae:	498c      	ldr	r1, [pc, #560]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bb6:	4b8a      	ldr	r3, [pc, #552]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 030f 	and.w	r3, r3, #15
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d001      	beq.n	8008bc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e106      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d073      	beq.n	8008cbc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d129      	bne.n	8008c30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bdc:	4b81      	ldr	r3, [pc, #516]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e0f4      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008bec:	f000 f99e 	bl	8008f2c <RCC_GetSysClockFreqFromPLLSource>
 8008bf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	4a7c      	ldr	r2, [pc, #496]	@ (8008de8 <HAL_RCC_ClockConfig+0x268>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d93f      	bls.n	8008c7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008bfa:	4b7a      	ldr	r3, [pc, #488]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d009      	beq.n	8008c1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d033      	beq.n	8008c7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d12f      	bne.n	8008c7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c1a:	4b72      	ldr	r3, [pc, #456]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c22:	4a70      	ldr	r2, [pc, #448]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008c2a:	2380      	movs	r3, #128	@ 0x80
 8008c2c:	617b      	str	r3, [r7, #20]
 8008c2e:	e024      	b.n	8008c7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d107      	bne.n	8008c48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c38:	4b6a      	ldr	r3, [pc, #424]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d109      	bne.n	8008c58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e0c6      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c48:	4b66      	ldr	r3, [pc, #408]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d101      	bne.n	8008c58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008c54:	2301      	movs	r3, #1
 8008c56:	e0be      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008c58:	f000 f8ce 	bl	8008df8 <HAL_RCC_GetSysClockFreq>
 8008c5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4a61      	ldr	r2, [pc, #388]	@ (8008de8 <HAL_RCC_ClockConfig+0x268>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d909      	bls.n	8008c7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008c66:	4b5f      	ldr	r3, [pc, #380]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c6e:	4a5d      	ldr	r2, [pc, #372]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008c76:	2380      	movs	r3, #128	@ 0x80
 8008c78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008c7a:	4b5a      	ldr	r3, [pc, #360]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f023 0203 	bic.w	r2, r3, #3
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	4957      	ldr	r1, [pc, #348]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c8c:	f7fd fae8 	bl	8006260 <HAL_GetTick>
 8008c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c92:	e00a      	b.n	8008caa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c94:	f7fd fae4 	bl	8006260 <HAL_GetTick>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e095      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008caa:	4b4e      	ldr	r3, [pc, #312]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 020c 	and.w	r2, r3, #12
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d1eb      	bne.n	8008c94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 0302 	and.w	r3, r3, #2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d023      	beq.n	8008d10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0304 	and.w	r3, r3, #4
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008cd4:	4b43      	ldr	r3, [pc, #268]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	4a42      	ldr	r2, [pc, #264]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008cda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008cde:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d007      	beq.n	8008cfc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008cec:	4b3d      	ldr	r3, [pc, #244]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008cf4:	4a3b      	ldr	r2, [pc, #236]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008cf6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008cfa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cfc:	4b39      	ldr	r3, [pc, #228]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	4936      	ldr	r1, [pc, #216]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	608b      	str	r3, [r1, #8]
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b80      	cmp	r3, #128	@ 0x80
 8008d14:	d105      	bne.n	8008d22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008d16:	4b33      	ldr	r3, [pc, #204]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	4a32      	ldr	r2, [pc, #200]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008d1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008d20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d22:	4b2f      	ldr	r3, [pc, #188]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d21d      	bcs.n	8008d6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d30:	4b2b      	ldr	r3, [pc, #172]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f023 020f 	bic.w	r2, r3, #15
 8008d38:	4929      	ldr	r1, [pc, #164]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008d40:	f7fd fa8e 	bl	8006260 <HAL_GetTick>
 8008d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d46:	e00a      	b.n	8008d5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d48:	f7fd fa8a 	bl	8006260 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e03b      	b.n	8008dd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d5e:	4b20      	ldr	r3, [pc, #128]	@ (8008de0 <HAL_RCC_ClockConfig+0x260>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	683a      	ldr	r2, [r7, #0]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d1ed      	bne.n	8008d48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d008      	beq.n	8008d8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d78:	4b1a      	ldr	r3, [pc, #104]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	4917      	ldr	r1, [pc, #92]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008d86:	4313      	orrs	r3, r2
 8008d88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d009      	beq.n	8008daa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d96:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	00db      	lsls	r3, r3, #3
 8008da4:	490f      	ldr	r1, [pc, #60]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008daa:	f000 f825 	bl	8008df8 <HAL_RCC_GetSysClockFreq>
 8008dae:	4602      	mov	r2, r0
 8008db0:	4b0c      	ldr	r3, [pc, #48]	@ (8008de4 <HAL_RCC_ClockConfig+0x264>)
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	091b      	lsrs	r3, r3, #4
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	490c      	ldr	r1, [pc, #48]	@ (8008dec <HAL_RCC_ClockConfig+0x26c>)
 8008dbc:	5ccb      	ldrb	r3, [r1, r3]
 8008dbe:	f003 031f 	and.w	r3, r3, #31
 8008dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8008df0 <HAL_RCC_ClockConfig+0x270>)
 8008dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008dca:	4b0a      	ldr	r3, [pc, #40]	@ (8008df4 <HAL_RCC_ClockConfig+0x274>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fd f9fa 	bl	80061c8 <HAL_InitTick>
 8008dd4:	4603      	mov	r3, r0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40022000 	.word	0x40022000
 8008de4:	40021000 	.word	0x40021000
 8008de8:	04c4b400 	.word	0x04c4b400
 8008dec:	08011310 	.word	0x08011310
 8008df0:	20000264 	.word	0x20000264
 8008df4:	20000268 	.word	0x20000268

08008df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f003 030c 	and.w	r3, r3, #12
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d102      	bne.n	8008e10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	e047      	b.n	8008ea0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008e10:	4b27      	ldr	r3, [pc, #156]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f003 030c 	and.w	r3, r3, #12
 8008e18:	2b08      	cmp	r3, #8
 8008e1a:	d102      	bne.n	8008e22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008e1c:	4b26      	ldr	r3, [pc, #152]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e1e:	613b      	str	r3, [r7, #16]
 8008e20:	e03e      	b.n	8008ea0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008e22:	4b23      	ldr	r3, [pc, #140]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 030c 	and.w	r3, r3, #12
 8008e2a:	2b0c      	cmp	r3, #12
 8008e2c:	d136      	bne.n	8008e9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008e2e:	4b20      	ldr	r3, [pc, #128]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f003 0303 	and.w	r3, r3, #3
 8008e36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008e38:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e3a:	68db      	ldr	r3, [r3, #12]
 8008e3c:	091b      	lsrs	r3, r3, #4
 8008e3e:	f003 030f 	and.w	r3, r3, #15
 8008e42:	3301      	adds	r3, #1
 8008e44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d10c      	bne.n	8008e66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e54:	4a16      	ldr	r2, [pc, #88]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e56:	68d2      	ldr	r2, [r2, #12]
 8008e58:	0a12      	lsrs	r2, r2, #8
 8008e5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e5e:	fb02 f303 	mul.w	r3, r2, r3
 8008e62:	617b      	str	r3, [r7, #20]
      break;
 8008e64:	e00c      	b.n	8008e80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008e66:	4a13      	ldr	r2, [pc, #76]	@ (8008eb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	4a10      	ldr	r2, [pc, #64]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e70:	68d2      	ldr	r2, [r2, #12]
 8008e72:	0a12      	lsrs	r2, r2, #8
 8008e74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008e78:	fb02 f303 	mul.w	r3, r2, r3
 8008e7c:	617b      	str	r3, [r7, #20]
      break;
 8008e7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008e80:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	0e5b      	lsrs	r3, r3, #25
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	e001      	b.n	8008ea0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008ea0:	693b      	ldr	r3, [r7, #16]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	371c      	adds	r7, #28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40021000 	.word	0x40021000
 8008eb4:	00f42400 	.word	0x00f42400
 8008eb8:	016e3600 	.word	0x016e3600

08008ebc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ec0:	4b03      	ldr	r3, [pc, #12]	@ (8008ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	20000264 	.word	0x20000264

08008ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008ed8:	f7ff fff0 	bl	8008ebc <HAL_RCC_GetHCLKFreq>
 8008edc:	4602      	mov	r2, r0
 8008ede:	4b06      	ldr	r3, [pc, #24]	@ (8008ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	0a1b      	lsrs	r3, r3, #8
 8008ee4:	f003 0307 	and.w	r3, r3, #7
 8008ee8:	4904      	ldr	r1, [pc, #16]	@ (8008efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008eea:	5ccb      	ldrb	r3, [r1, r3]
 8008eec:	f003 031f 	and.w	r3, r3, #31
 8008ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	40021000 	.word	0x40021000
 8008efc:	08011320 	.word	0x08011320

08008f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008f04:	f7ff ffda 	bl	8008ebc <HAL_RCC_GetHCLKFreq>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	4b06      	ldr	r3, [pc, #24]	@ (8008f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	0adb      	lsrs	r3, r3, #11
 8008f10:	f003 0307 	and.w	r3, r3, #7
 8008f14:	4904      	ldr	r1, [pc, #16]	@ (8008f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f16:	5ccb      	ldrb	r3, [r1, r3]
 8008f18:	f003 031f 	and.w	r3, r3, #31
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	40021000 	.word	0x40021000
 8008f28:	08011320 	.word	0x08011320

08008f2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f32:	4b1e      	ldr	r3, [pc, #120]	@ (8008fac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f003 0303 	and.w	r3, r3, #3
 8008f3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	091b      	lsrs	r3, r3, #4
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b03      	cmp	r3, #3
 8008f4e:	d10c      	bne.n	8008f6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f50:	4a17      	ldr	r2, [pc, #92]	@ (8008fb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f58:	4a14      	ldr	r2, [pc, #80]	@ (8008fac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f5a:	68d2      	ldr	r2, [r2, #12]
 8008f5c:	0a12      	lsrs	r2, r2, #8
 8008f5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f62:	fb02 f303 	mul.w	r3, r2, r3
 8008f66:	617b      	str	r3, [r7, #20]
    break;
 8008f68:	e00c      	b.n	8008f84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008f6a:	4a12      	ldr	r2, [pc, #72]	@ (8008fb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f72:	4a0e      	ldr	r2, [pc, #56]	@ (8008fac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f74:	68d2      	ldr	r2, [r2, #12]
 8008f76:	0a12      	lsrs	r2, r2, #8
 8008f78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008f7c:	fb02 f303 	mul.w	r3, r2, r3
 8008f80:	617b      	str	r3, [r7, #20]
    break;
 8008f82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f84:	4b09      	ldr	r3, [pc, #36]	@ (8008fac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	0e5b      	lsrs	r3, r3, #25
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	3301      	adds	r3, #1
 8008f90:	005b      	lsls	r3, r3, #1
 8008f92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008f9e:	687b      	ldr	r3, [r7, #4]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	40021000 	.word	0x40021000
 8008fb0:	016e3600 	.word	0x016e3600
 8008fb4:	00f42400 	.word	0x00f42400

08008fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8098 	beq.w	8009106 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fda:	4b43      	ldr	r3, [pc, #268]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10d      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fe6:	4b40      	ldr	r3, [pc, #256]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fea:	4a3f      	ldr	r2, [pc, #252]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ff0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ffa:	60bb      	str	r3, [r7, #8]
 8008ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ffe:	2301      	movs	r3, #1
 8009000:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009002:	4b3a      	ldr	r3, [pc, #232]	@ (80090ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a39      	ldr	r2, [pc, #228]	@ (80090ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800900c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800900e:	f7fd f927 	bl	8006260 <HAL_GetTick>
 8009012:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009014:	e009      	b.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009016:	f7fd f923 	bl	8006260 <HAL_GetTick>
 800901a:	4602      	mov	r2, r0
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	2b02      	cmp	r3, #2
 8009022:	d902      	bls.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	74fb      	strb	r3, [r7, #19]
        break;
 8009028:	e005      	b.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800902a:	4b30      	ldr	r3, [pc, #192]	@ (80090ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0ef      	beq.n	8009016 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009036:	7cfb      	ldrb	r3, [r7, #19]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d159      	bne.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800903c:	4b2a      	ldr	r3, [pc, #168]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800903e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009042:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009046:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d01e      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	429a      	cmp	r2, r3
 8009056:	d019      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009058:	4b23      	ldr	r3, [pc, #140]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009062:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009064:	4b20      	ldr	r3, [pc, #128]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800906a:	4a1f      	ldr	r2, [pc, #124]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800906c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009074:	4b1c      	ldr	r3, [pc, #112]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907a:	4a1b      	ldr	r2, [pc, #108]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800907c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009084:	4a18      	ldr	r2, [pc, #96]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d016      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009096:	f7fd f8e3 	bl	8006260 <HAL_GetTick>
 800909a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800909c:	e00b      	b.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800909e:	f7fd f8df 	bl	8006260 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d902      	bls.n	80090b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	74fb      	strb	r3, [r7, #19]
            break;
 80090b4:	e006      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80090b6:	4b0c      	ldr	r3, [pc, #48]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d0ec      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80090c4:	7cfb      	ldrb	r3, [r7, #19]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090ca:	4b07      	ldr	r3, [pc, #28]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d8:	4903      	ldr	r1, [pc, #12]	@ (80090e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80090e0:	e008      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090e2:	7cfb      	ldrb	r3, [r7, #19]
 80090e4:	74bb      	strb	r3, [r7, #18]
 80090e6:	e005      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80090e8:	40021000 	.word	0x40021000
 80090ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f0:	7cfb      	ldrb	r3, [r7, #19]
 80090f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090f4:	7c7b      	ldrb	r3, [r7, #17]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d105      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090fa:	4ba7      	ldr	r3, [pc, #668]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090fe:	4aa6      	ldr	r2, [pc, #664]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009104:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0301 	and.w	r3, r3, #1
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00a      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009112:	4ba1      	ldr	r3, [pc, #644]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009118:	f023 0203 	bic.w	r2, r3, #3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	499d      	ldr	r1, [pc, #628]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009122:	4313      	orrs	r3, r2
 8009124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00a      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009134:	4b98      	ldr	r3, [pc, #608]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800913a:	f023 020c 	bic.w	r2, r3, #12
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	4995      	ldr	r1, [pc, #596]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009144:	4313      	orrs	r3, r2
 8009146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0304 	and.w	r3, r3, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009156:	4b90      	ldr	r3, [pc, #576]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800915c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	498c      	ldr	r1, [pc, #560]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009166:	4313      	orrs	r3, r2
 8009168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00a      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009178:	4b87      	ldr	r3, [pc, #540]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800917a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800917e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	4984      	ldr	r1, [pc, #528]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009188:	4313      	orrs	r3, r2
 800918a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0310 	and.w	r3, r3, #16
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800919a:	4b7f      	ldr	r3, [pc, #508]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800919c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	497b      	ldr	r1, [pc, #492]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0320 	and.w	r3, r3, #32
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00a      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80091bc:	4b76      	ldr	r3, [pc, #472]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091c2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	4973      	ldr	r1, [pc, #460]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091cc:	4313      	orrs	r3, r2
 80091ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00a      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091de:	4b6e      	ldr	r3, [pc, #440]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091e4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	496a      	ldr	r1, [pc, #424]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00a      	beq.n	8009216 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009200:	4b65      	ldr	r3, [pc, #404]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009206:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	4962      	ldr	r1, [pc, #392]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009210:	4313      	orrs	r3, r2
 8009212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00a      	beq.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009222:	4b5d      	ldr	r3, [pc, #372]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009228:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	4959      	ldr	r1, [pc, #356]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009232:	4313      	orrs	r3, r2
 8009234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00a      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009244:	4b54      	ldr	r3, [pc, #336]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009246:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800924a:	f023 0203 	bic.w	r2, r3, #3
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009252:	4951      	ldr	r1, [pc, #324]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009254:	4313      	orrs	r3, r2
 8009256:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00a      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009266:	4b4c      	ldr	r3, [pc, #304]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800926c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	4948      	ldr	r1, [pc, #288]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009276:	4313      	orrs	r3, r2
 8009278:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009284:	2b00      	cmp	r3, #0
 8009286:	d015      	beq.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009288:	4b43      	ldr	r3, [pc, #268]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800928a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800928e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009296:	4940      	ldr	r1, [pc, #256]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009298:	4313      	orrs	r3, r2
 800929a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092a6:	d105      	bne.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092a8:	4b3b      	ldr	r3, [pc, #236]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	4a3a      	ldr	r2, [pc, #232]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092b2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d015      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092c0:	4b35      	ldr	r3, [pc, #212]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ce:	4932      	ldr	r1, [pc, #200]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092de:	d105      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80092e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	4a2c      	ldr	r2, [pc, #176]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092ea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d015      	beq.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092f8:	4b27      	ldr	r3, [pc, #156]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009306:	4924      	ldr	r1, [pc, #144]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009308:	4313      	orrs	r3, r2
 800930a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009312:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009316:	d105      	bne.n	8009324 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009318:	4b1f      	ldr	r3, [pc, #124]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	4a1e      	ldr	r2, [pc, #120]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800931e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009322:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d015      	beq.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009330:	4b19      	ldr	r3, [pc, #100]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009336:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800933e:	4916      	ldr	r1, [pc, #88]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009340:	4313      	orrs	r3, r2
 8009342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800934a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800934e:	d105      	bne.n	800935c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009350:	4b11      	ldr	r3, [pc, #68]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	4a10      	ldr	r2, [pc, #64]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800935a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009364:	2b00      	cmp	r3, #0
 8009366:	d019      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009368:	4b0b      	ldr	r3, [pc, #44]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800936a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800936e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009376:	4908      	ldr	r1, [pc, #32]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009378:	4313      	orrs	r3, r2
 800937a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009386:	d109      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009388:	4b03      	ldr	r3, [pc, #12]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	4a02      	ldr	r2, [pc, #8]	@ (8009398 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800938e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009392:	60d3      	str	r3, [r2, #12]
 8009394:	e002      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009396:	bf00      	nop
 8009398:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d015      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80093a8:	4b29      	ldr	r3, [pc, #164]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093b6:	4926      	ldr	r1, [pc, #152]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093c6:	d105      	bne.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80093c8:	4b21      	ldr	r3, [pc, #132]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	4a20      	ldr	r2, [pc, #128]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d015      	beq.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80093e0:	4b1b      	ldr	r3, [pc, #108]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093ee:	4918      	ldr	r1, [pc, #96]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093fe:	d105      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009400:	4b13      	ldr	r3, [pc, #76]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	4a12      	ldr	r2, [pc, #72]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800940a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009414:	2b00      	cmp	r3, #0
 8009416:	d015      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009418:	4b0d      	ldr	r3, [pc, #52]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800941a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800941e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009426:	490a      	ldr	r1, [pc, #40]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009428:	4313      	orrs	r3, r2
 800942a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009432:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009436:	d105      	bne.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009438:	4b05      	ldr	r3, [pc, #20]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	4a04      	ldr	r2, [pc, #16]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800943e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009442:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009444:	7cbb      	ldrb	r3, [r7, #18]
}
 8009446:	4618      	mov	r0, r3
 8009448:	3718      	adds	r7, #24
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	40021000 	.word	0x40021000

08009454 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e09d      	b.n	80095a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946a:	2b00      	cmp	r3, #0
 800946c:	d108      	bne.n	8009480 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009476:	d009      	beq.n	800948c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	61da      	str	r2, [r3, #28]
 800947e:	e005      	b.n	800948c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009498:	b2db      	uxtb	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7fb ff9c 	bl	80053e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2202      	movs	r2, #2
 80094b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80094cc:	d902      	bls.n	80094d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80094ce:	2300      	movs	r3, #0
 80094d0:	60fb      	str	r3, [r7, #12]
 80094d2:	e002      	b.n	80094da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80094d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80094e2:	d007      	beq.n	80094f4 <HAL_SPI_Init+0xa0>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80094ec:	d002      	beq.n	80094f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009504:	431a      	orrs	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0302 	and.w	r3, r3, #2
 800950e:	431a      	orrs	r2, r3
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	f003 0301 	and.w	r3, r3, #1
 8009518:	431a      	orrs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	699b      	ldr	r3, [r3, #24]
 800951e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009522:	431a      	orrs	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	69db      	ldr	r3, [r3, #28]
 8009528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009536:	ea42 0103 	orr.w	r1, r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	0c1b      	lsrs	r3, r3, #16
 8009550:	f003 0204 	and.w	r2, r3, #4
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	431a      	orrs	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009570:	ea42 0103 	orr.w	r1, r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	430a      	orrs	r2, r1
 8009580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b08a      	sub	sp, #40	@ 0x28
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	60f8      	str	r0, [r7, #12]
 80095b2:	60b9      	str	r1, [r7, #8]
 80095b4:	607a      	str	r2, [r7, #4]
 80095b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80095b8:	2301      	movs	r3, #1
 80095ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095bc:	f7fc fe50 	bl	8006260 <HAL_GetTick>
 80095c0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095c8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80095d0:	887b      	ldrh	r3, [r7, #2]
 80095d2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80095d4:	887b      	ldrh	r3, [r7, #2]
 80095d6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095d8:	7ffb      	ldrb	r3, [r7, #31]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d00c      	beq.n	80095f8 <HAL_SPI_TransmitReceive+0x4e>
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80095e4:	d106      	bne.n	80095f4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d102      	bne.n	80095f4 <HAL_SPI_TransmitReceive+0x4a>
 80095ee:	7ffb      	ldrb	r3, [r7, #31]
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d001      	beq.n	80095f8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80095f4:	2302      	movs	r3, #2
 80095f6:	e1f3      	b.n	80099e0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d005      	beq.n	800960a <HAL_SPI_TransmitReceive+0x60>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <HAL_SPI_TransmitReceive+0x60>
 8009604:	887b      	ldrh	r3, [r7, #2]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e1e8      	b.n	80099e0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009614:	2b01      	cmp	r3, #1
 8009616:	d101      	bne.n	800961c <HAL_SPI_TransmitReceive+0x72>
 8009618:	2302      	movs	r3, #2
 800961a:	e1e1      	b.n	80099e0 <HAL_SPI_TransmitReceive+0x436>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800962a:	b2db      	uxtb	r3, r3
 800962c:	2b04      	cmp	r3, #4
 800962e:	d003      	beq.n	8009638 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2205      	movs	r2, #5
 8009634:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	887a      	ldrh	r2, [r7, #2]
 8009648:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	887a      	ldrh	r2, [r7, #2]
 8009650:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	887a      	ldrh	r2, [r7, #2]
 800965e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	887a      	ldrh	r2, [r7, #2]
 8009664:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800967a:	d802      	bhi.n	8009682 <HAL_SPI_TransmitReceive+0xd8>
 800967c:	8abb      	ldrh	r3, [r7, #20]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d908      	bls.n	8009694 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	685a      	ldr	r2, [r3, #4]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009690:	605a      	str	r2, [r3, #4]
 8009692:	e007      	b.n	80096a4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096a2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ae:	2b40      	cmp	r3, #64	@ 0x40
 80096b0:	d007      	beq.n	80096c2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096ca:	f240 8083 	bls.w	80097d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <HAL_SPI_TransmitReceive+0x132>
 80096d6:	8afb      	ldrh	r3, [r7, #22]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d16f      	bne.n	80097bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e0:	881a      	ldrh	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ec:	1c9a      	adds	r2, r3, #2
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	3b01      	subs	r3, #1
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009700:	e05c      	b.n	80097bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b02      	cmp	r3, #2
 800970e:	d11b      	bne.n	8009748 <HAL_SPI_TransmitReceive+0x19e>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d016      	beq.n	8009748 <HAL_SPI_TransmitReceive+0x19e>
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	2b01      	cmp	r3, #1
 800971e:	d113      	bne.n	8009748 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009724:	881a      	ldrh	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009730:	1c9a      	adds	r2, r3, #2
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800973a:	b29b      	uxth	r3, r3
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b01      	cmp	r3, #1
 8009754:	d11c      	bne.n	8009790 <HAL_SPI_TransmitReceive+0x1e6>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800975c:	b29b      	uxth	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d016      	beq.n	8009790 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68da      	ldr	r2, [r3, #12]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976c:	b292      	uxth	r2, r2
 800976e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009774:	1c9a      	adds	r2, r3, #2
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29a      	uxth	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800978c:	2301      	movs	r3, #1
 800978e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009790:	f7fc fd66 	bl	8006260 <HAL_GetTick>
 8009794:	4602      	mov	r2, r0
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800979c:	429a      	cmp	r2, r3
 800979e:	d80d      	bhi.n	80097bc <HAL_SPI_TransmitReceive+0x212>
 80097a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097a6:	d009      	beq.n	80097bc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e111      	b.n	80099e0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d19d      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x158>
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d197      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x158>
 80097d2:	e0e5      	b.n	80099a0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_SPI_TransmitReceive+0x23a>
 80097dc:	8afb      	ldrh	r3, [r7, #22]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	f040 80d1 	bne.w	8009986 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d912      	bls.n	8009814 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f2:	881a      	ldrh	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097fe:	1c9a      	adds	r2, r3, #2
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009808:	b29b      	uxth	r3, r3
 800980a:	3b02      	subs	r3, #2
 800980c:	b29a      	uxth	r2, r3
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009812:	e0b8      	b.n	8009986 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	330c      	adds	r3, #12
 800981e:	7812      	ldrb	r2, [r2, #0]
 8009820:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009826:	1c5a      	adds	r2, r3, #1
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009830:	b29b      	uxth	r3, r3
 8009832:	3b01      	subs	r3, #1
 8009834:	b29a      	uxth	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800983a:	e0a4      	b.n	8009986 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f003 0302 	and.w	r3, r3, #2
 8009846:	2b02      	cmp	r3, #2
 8009848:	d134      	bne.n	80098b4 <HAL_SPI_TransmitReceive+0x30a>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800984e:	b29b      	uxth	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d02f      	beq.n	80098b4 <HAL_SPI_TransmitReceive+0x30a>
 8009854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009856:	2b01      	cmp	r3, #1
 8009858:	d12c      	bne.n	80098b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800985e:	b29b      	uxth	r3, r3
 8009860:	2b01      	cmp	r3, #1
 8009862:	d912      	bls.n	800988a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009868:	881a      	ldrh	r2, [r3, #0]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009874:	1c9a      	adds	r2, r3, #2
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b02      	subs	r3, #2
 8009882:	b29a      	uxth	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009888:	e012      	b.n	80098b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	330c      	adds	r3, #12
 8009894:	7812      	ldrb	r2, [r2, #0]
 8009896:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800989c:	1c5a      	adds	r2, r3, #1
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098b0:	2300      	movs	r3, #0
 80098b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f003 0301 	and.w	r3, r3, #1
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d148      	bne.n	8009954 <HAL_SPI_TransmitReceive+0x3aa>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d042      	beq.n	8009954 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d923      	bls.n	8009922 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e4:	b292      	uxth	r2, r2
 80098e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ec:	1c9a      	adds	r2, r3, #2
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	3b02      	subs	r3, #2
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800990a:	b29b      	uxth	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	d81f      	bhi.n	8009950 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800991e:	605a      	str	r2, [r3, #4]
 8009920:	e016      	b.n	8009950 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f103 020c 	add.w	r2, r3, #12
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800992e:	7812      	ldrb	r2, [r2, #0]
 8009930:	b2d2      	uxtb	r2, r2
 8009932:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009944:	b29b      	uxth	r3, r3
 8009946:	3b01      	subs	r3, #1
 8009948:	b29a      	uxth	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009950:	2301      	movs	r3, #1
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009954:	f7fc fc84 	bl	8006260 <HAL_GetTick>
 8009958:	4602      	mov	r2, r0
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	1ad3      	subs	r3, r2, r3
 800995e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009960:	429a      	cmp	r2, r3
 8009962:	d803      	bhi.n	800996c <HAL_SPI_TransmitReceive+0x3c2>
 8009964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996a:	d102      	bne.n	8009972 <HAL_SPI_TransmitReceive+0x3c8>
 800996c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800996e:	2b00      	cmp	r3, #0
 8009970:	d109      	bne.n	8009986 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e02c      	b.n	80099e0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	f47f af55 	bne.w	800983c <HAL_SPI_TransmitReceive+0x292>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009998:	b29b      	uxth	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	f47f af4e 	bne.w	800983c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099a0:	6a3a      	ldr	r2, [r7, #32]
 80099a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f93d 	bl	8009c24 <SPI_EndRxTxTransaction>
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d008      	beq.n	80099c2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2220      	movs	r2, #32
 80099b4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e00e      	b.n	80099e0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e000      	b.n	80099e0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80099de:	2300      	movs	r3, #0
  }
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3728      	adds	r7, #40	@ 0x28
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	4613      	mov	r3, r2
 80099f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099f8:	f7fc fc32 	bl	8006260 <HAL_GetTick>
 80099fc:	4602      	mov	r2, r0
 80099fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	4413      	add	r3, r2
 8009a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a08:	f7fc fc2a 	bl	8006260 <HAL_GetTick>
 8009a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a0e:	4b39      	ldr	r3, [pc, #228]	@ (8009af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	015b      	lsls	r3, r3, #5
 8009a14:	0d1b      	lsrs	r3, r3, #20
 8009a16:	69fa      	ldr	r2, [r7, #28]
 8009a18:	fb02 f303 	mul.w	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a1e:	e054      	b.n	8009aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a26:	d050      	beq.n	8009aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a28:	f7fc fc1a 	bl	8006260 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d902      	bls.n	8009a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d13d      	bne.n	8009aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a56:	d111      	bne.n	8009a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a60:	d004      	beq.n	8009a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a6a:	d107      	bne.n	8009a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a84:	d10f      	bne.n	8009aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	e017      	b.n	8009aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	bf0c      	ite	eq
 8009ada:	2301      	moveq	r3, #1
 8009adc:	2300      	movne	r3, #0
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d19b      	bne.n	8009a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3720      	adds	r7, #32
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000264 	.word	0x20000264

08009af8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	@ 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b06:	2300      	movs	r3, #0
 8009b08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b0a:	f7fc fba9 	bl	8006260 <HAL_GetTick>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	1a9b      	subs	r3, r3, r2
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	4413      	add	r3, r2
 8009b18:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009b1a:	f7fc fba1 	bl	8006260 <HAL_GetTick>
 8009b1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	330c      	adds	r3, #12
 8009b26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b28:	4b3d      	ldr	r3, [pc, #244]	@ (8009c20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	00da      	lsls	r2, r3, #3
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	0d1b      	lsrs	r3, r3, #20
 8009b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b3a:	fb02 f303 	mul.w	r3, r2, r3
 8009b3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009b40:	e060      	b.n	8009c04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009b48:	d107      	bne.n	8009b5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d104      	bne.n	8009b5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009b50:	69fb      	ldr	r3, [r7, #28]
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009b58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b60:	d050      	beq.n	8009c04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b62:	f7fc fb7d 	bl	8006260 <HAL_GetTick>
 8009b66:	4602      	mov	r2, r0
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d902      	bls.n	8009b78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d13d      	bne.n	8009bf4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009b86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b90:	d111      	bne.n	8009bb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b9a:	d004      	beq.n	8009ba6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba4:	d107      	bne.n	8009bb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009bbe:	d10f      	bne.n	8009be0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009bde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009bf0:	2303      	movs	r3, #3
 8009bf2:	e010      	b.n	8009c16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	3b01      	subs	r3, #1
 8009c02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	689a      	ldr	r2, [r3, #8]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d196      	bne.n	8009b42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3728      	adds	r7, #40	@ 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	20000264 	.word	0x20000264

08009c24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af02      	add	r7, sp, #8
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f7ff ff5b 	bl	8009af8 <SPI_WaitFifoStateUntilTimeout>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d007      	beq.n	8009c58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c4c:	f043 0220 	orr.w	r2, r3, #32
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e027      	b.n	8009ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2180      	movs	r1, #128	@ 0x80
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f7ff fec0 	bl	80099e8 <SPI_WaitFlagStateUntilTimeout>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d007      	beq.n	8009c7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c72:	f043 0220 	orr.w	r2, r3, #32
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e014      	b.n	8009ca8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff ff34 	bl	8009af8 <SPI_WaitFifoStateUntilTimeout>
 8009c90:	4603      	mov	r3, r0
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d007      	beq.n	8009ca6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c9a:	f043 0220 	orr.w	r2, r3, #32
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e000      	b.n	8009ca8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e054      	b.n	8009d6c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d111      	bne.n	8009cf2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f001 ffd4 	bl	800bc84 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a23      	ldr	r2, [pc, #140]	@ (8009d74 <HAL_TIM_Base_Init+0xc4>)
 8009ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2202      	movs	r2, #2
 8009cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3304      	adds	r3, #4
 8009d02:	4619      	mov	r1, r3
 8009d04:	4610      	mov	r0, r2
 8009d06:	f001 fb1d 	bl	800b344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	08005c99 	.word	0x08005c99

08009d78 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d001      	beq.n	8009d90 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e04c      	b.n	8009e2a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a26      	ldr	r2, [pc, #152]	@ (8009e38 <HAL_TIM_Base_Start+0xc0>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d022      	beq.n	8009de8 <HAL_TIM_Base_Start+0x70>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009daa:	d01d      	beq.n	8009de8 <HAL_TIM_Base_Start+0x70>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a22      	ldr	r2, [pc, #136]	@ (8009e3c <HAL_TIM_Base_Start+0xc4>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d018      	beq.n	8009de8 <HAL_TIM_Base_Start+0x70>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a21      	ldr	r2, [pc, #132]	@ (8009e40 <HAL_TIM_Base_Start+0xc8>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d013      	beq.n	8009de8 <HAL_TIM_Base_Start+0x70>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e44 <HAL_TIM_Base_Start+0xcc>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00e      	beq.n	8009de8 <HAL_TIM_Base_Start+0x70>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a1e      	ldr	r2, [pc, #120]	@ (8009e48 <HAL_TIM_Base_Start+0xd0>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d009      	beq.n	8009de8 <HAL_TIM_Base_Start+0x70>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8009e4c <HAL_TIM_Base_Start+0xd4>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d004      	beq.n	8009de8 <HAL_TIM_Base_Start+0x70>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a1b      	ldr	r2, [pc, #108]	@ (8009e50 <HAL_TIM_Base_Start+0xd8>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d115      	bne.n	8009e14 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689a      	ldr	r2, [r3, #8]
 8009dee:	4b19      	ldr	r3, [pc, #100]	@ (8009e54 <HAL_TIM_Base_Start+0xdc>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2b06      	cmp	r3, #6
 8009df8:	d015      	beq.n	8009e26 <HAL_TIM_Base_Start+0xae>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e00:	d011      	beq.n	8009e26 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f042 0201 	orr.w	r2, r2, #1
 8009e10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e12:	e008      	b.n	8009e26 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	e000      	b.n	8009e28 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	40012c00 	.word	0x40012c00
 8009e3c:	40000400 	.word	0x40000400
 8009e40:	40000800 	.word	0x40000800
 8009e44:	40000c00 	.word	0x40000c00
 8009e48:	40013400 	.word	0x40013400
 8009e4c:	40014000 	.word	0x40014000
 8009e50:	40015000 	.word	0x40015000
 8009e54:	00010007 	.word	0x00010007

08009e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d001      	beq.n	8009e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e054      	b.n	8009f1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2202      	movs	r2, #2
 8009e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f042 0201 	orr.w	r2, r2, #1
 8009e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a26      	ldr	r2, [pc, #152]	@ (8009f28 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d022      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x80>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e9a:	d01d      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x80>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a22      	ldr	r2, [pc, #136]	@ (8009f2c <HAL_TIM_Base_Start_IT+0xd4>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d018      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x80>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a21      	ldr	r2, [pc, #132]	@ (8009f30 <HAL_TIM_Base_Start_IT+0xd8>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d013      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x80>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a1f      	ldr	r2, [pc, #124]	@ (8009f34 <HAL_TIM_Base_Start_IT+0xdc>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d00e      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x80>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8009f38 <HAL_TIM_Base_Start_IT+0xe0>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d009      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x80>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a1c      	ldr	r2, [pc, #112]	@ (8009f3c <HAL_TIM_Base_Start_IT+0xe4>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d004      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x80>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f40 <HAL_TIM_Base_Start_IT+0xe8>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d115      	bne.n	8009f04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689a      	ldr	r2, [r3, #8]
 8009ede:	4b19      	ldr	r3, [pc, #100]	@ (8009f44 <HAL_TIM_Base_Start_IT+0xec>)
 8009ee0:	4013      	ands	r3, r2
 8009ee2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2b06      	cmp	r3, #6
 8009ee8:	d015      	beq.n	8009f16 <HAL_TIM_Base_Start_IT+0xbe>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ef0:	d011      	beq.n	8009f16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0201 	orr.w	r2, r2, #1
 8009f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f02:	e008      	b.n	8009f16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f042 0201 	orr.w	r2, r2, #1
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	e000      	b.n	8009f18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3714      	adds	r7, #20
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	40012c00 	.word	0x40012c00
 8009f2c:	40000400 	.word	0x40000400
 8009f30:	40000800 	.word	0x40000800
 8009f34:	40000c00 	.word	0x40000c00
 8009f38:	40013400 	.word	0x40013400
 8009f3c:	40014000 	.word	0x40014000
 8009f40:	40015000 	.word	0x40015000
 8009f44:	00010007 	.word	0x00010007

08009f48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d101      	bne.n	8009f5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	e054      	b.n	800a004 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d111      	bne.n	8009f8a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 fe88 	bl	800bc84 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d102      	bne.n	8009f82 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	4a23      	ldr	r2, [pc, #140]	@ (800a00c <HAL_TIM_OC_Init+0xc4>)
 8009f80:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	3304      	adds	r3, #4
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	f001 f9d1 	bl	800b344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	0800a011 	.word	0x0800a011

0800a010 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e054      	b.n	800a0e0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d111      	bne.n	800a066 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 fe1a 	bl	800bc84 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a23      	ldr	r2, [pc, #140]	@ (800a0e8 <HAL_TIM_PWM_Init+0xc4>)
 800a05c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2202      	movs	r2, #2
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f001 f963 	bl	800b344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	0800a0ed 	.word	0x0800a0ed

0800a0ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d109      	bne.n	800a124 <HAL_TIM_PWM_Start+0x24>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a116:	b2db      	uxtb	r3, r3
 800a118:	2b01      	cmp	r3, #1
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	b2db      	uxtb	r3, r3
 800a122:	e03c      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b04      	cmp	r3, #4
 800a128:	d109      	bne.n	800a13e <HAL_TIM_PWM_Start+0x3e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b01      	cmp	r3, #1
 800a134:	bf14      	ite	ne
 800a136:	2301      	movne	r3, #1
 800a138:	2300      	moveq	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	e02f      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b08      	cmp	r3, #8
 800a142:	d109      	bne.n	800a158 <HAL_TIM_PWM_Start+0x58>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	2b01      	cmp	r3, #1
 800a14e:	bf14      	ite	ne
 800a150:	2301      	movne	r3, #1
 800a152:	2300      	moveq	r3, #0
 800a154:	b2db      	uxtb	r3, r3
 800a156:	e022      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	2b0c      	cmp	r3, #12
 800a15c:	d109      	bne.n	800a172 <HAL_TIM_PWM_Start+0x72>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a164:	b2db      	uxtb	r3, r3
 800a166:	2b01      	cmp	r3, #1
 800a168:	bf14      	ite	ne
 800a16a:	2301      	movne	r3, #1
 800a16c:	2300      	moveq	r3, #0
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	e015      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	2b10      	cmp	r3, #16
 800a176:	d109      	bne.n	800a18c <HAL_TIM_PWM_Start+0x8c>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b01      	cmp	r3, #1
 800a182:	bf14      	ite	ne
 800a184:	2301      	movne	r3, #1
 800a186:	2300      	moveq	r3, #0
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	e008      	b.n	800a19e <HAL_TIM_PWM_Start+0x9e>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b01      	cmp	r3, #1
 800a196:	bf14      	ite	ne
 800a198:	2301      	movne	r3, #1
 800a19a:	2300      	moveq	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e0a6      	b.n	800a2f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d104      	bne.n	800a1b6 <HAL_TIM_PWM_Start+0xb6>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1b4:	e023      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d104      	bne.n	800a1c6 <HAL_TIM_PWM_Start+0xc6>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2202      	movs	r2, #2
 800a1c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1c4:	e01b      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	d104      	bne.n	800a1d6 <HAL_TIM_PWM_Start+0xd6>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1d4:	e013      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b0c      	cmp	r3, #12
 800a1da:	d104      	bne.n	800a1e6 <HAL_TIM_PWM_Start+0xe6>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2202      	movs	r2, #2
 800a1e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1e4:	e00b      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b10      	cmp	r3, #16
 800a1ea:	d104      	bne.n	800a1f6 <HAL_TIM_PWM_Start+0xf6>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1f4:	e003      	b.n	800a1fe <HAL_TIM_PWM_Start+0xfe>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2201      	movs	r2, #1
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	4618      	mov	r0, r3
 800a208:	f001 fd16 	bl	800bc38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a3a      	ldr	r2, [pc, #232]	@ (800a2fc <HAL_TIM_PWM_Start+0x1fc>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d018      	beq.n	800a248 <HAL_TIM_PWM_Start+0x148>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a39      	ldr	r2, [pc, #228]	@ (800a300 <HAL_TIM_PWM_Start+0x200>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d013      	beq.n	800a248 <HAL_TIM_PWM_Start+0x148>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a37      	ldr	r2, [pc, #220]	@ (800a304 <HAL_TIM_PWM_Start+0x204>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00e      	beq.n	800a248 <HAL_TIM_PWM_Start+0x148>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a36      	ldr	r2, [pc, #216]	@ (800a308 <HAL_TIM_PWM_Start+0x208>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d009      	beq.n	800a248 <HAL_TIM_PWM_Start+0x148>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a34      	ldr	r2, [pc, #208]	@ (800a30c <HAL_TIM_PWM_Start+0x20c>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d004      	beq.n	800a248 <HAL_TIM_PWM_Start+0x148>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a33      	ldr	r2, [pc, #204]	@ (800a310 <HAL_TIM_PWM_Start+0x210>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d101      	bne.n	800a24c <HAL_TIM_PWM_Start+0x14c>
 800a248:	2301      	movs	r3, #1
 800a24a:	e000      	b.n	800a24e <HAL_TIM_PWM_Start+0x14e>
 800a24c:	2300      	movs	r3, #0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a260:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a25      	ldr	r2, [pc, #148]	@ (800a2fc <HAL_TIM_PWM_Start+0x1fc>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d022      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0x1b2>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a274:	d01d      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0x1b2>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a26      	ldr	r2, [pc, #152]	@ (800a314 <HAL_TIM_PWM_Start+0x214>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d018      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0x1b2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a24      	ldr	r2, [pc, #144]	@ (800a318 <HAL_TIM_PWM_Start+0x218>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d013      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0x1b2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a23      	ldr	r2, [pc, #140]	@ (800a31c <HAL_TIM_PWM_Start+0x21c>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d00e      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0x1b2>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a19      	ldr	r2, [pc, #100]	@ (800a300 <HAL_TIM_PWM_Start+0x200>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d009      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0x1b2>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a18      	ldr	r2, [pc, #96]	@ (800a304 <HAL_TIM_PWM_Start+0x204>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d004      	beq.n	800a2b2 <HAL_TIM_PWM_Start+0x1b2>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a18      	ldr	r2, [pc, #96]	@ (800a310 <HAL_TIM_PWM_Start+0x210>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d115      	bne.n	800a2de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	4b19      	ldr	r3, [pc, #100]	@ (800a320 <HAL_TIM_PWM_Start+0x220>)
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	2b06      	cmp	r3, #6
 800a2c2:	d015      	beq.n	800a2f0 <HAL_TIM_PWM_Start+0x1f0>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ca:	d011      	beq.n	800a2f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f042 0201 	orr.w	r2, r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2dc:	e008      	b.n	800a2f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f042 0201 	orr.w	r2, r2, #1
 800a2ec:	601a      	str	r2, [r3, #0]
 800a2ee:	e000      	b.n	800a2f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	40012c00 	.word	0x40012c00
 800a300:	40013400 	.word	0x40013400
 800a304:	40014000 	.word	0x40014000
 800a308:	40014400 	.word	0x40014400
 800a30c:	40014800 	.word	0x40014800
 800a310:	40015000 	.word	0x40015000
 800a314:	40000400 	.word	0x40000400
 800a318:	40000800 	.word	0x40000800
 800a31c:	40000c00 	.word	0x40000c00
 800a320:	00010007 	.word	0x00010007

0800a324 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d101      	bne.n	800a338 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e04c      	b.n	800a3d2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d111      	bne.n	800a368 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 fc99 	bl	800bc84 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a356:	2b00      	cmp	r3, #0
 800a358:	d102      	bne.n	800a360 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4a1f      	ldr	r2, [pc, #124]	@ (800a3dc <HAL_TIM_OnePulse_Init+0xb8>)
 800a35e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	3304      	adds	r3, #4
 800a378:	4619      	mov	r1, r3
 800a37a:	4610      	mov	r0, r2
 800a37c:	f000 ffe2 	bl	800b344 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f022 0208 	bic.w	r2, r2, #8
 800a38e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6819      	ldr	r1, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	683a      	ldr	r2, [r7, #0]
 800a39c:	430a      	orrs	r2, r1
 800a39e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3708      	adds	r7, #8
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	0800a3e1 	.word	0x0800a3e1

0800a3e0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b084      	sub	sp, #16
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a404:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a40c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a414:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a41c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d108      	bne.n	800a436 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d105      	bne.n	800a436 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a42a:	7b7b      	ldrb	r3, [r7, #13]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d102      	bne.n	800a436 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a430:	7b3b      	ldrb	r3, [r7, #12]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d001      	beq.n	800a43a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e059      	b.n	800a4ee <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2202      	movs	r2, #2
 800a43e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2202      	movs	r2, #2
 800a446:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2202      	movs	r2, #2
 800a456:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68da      	ldr	r2, [r3, #12]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f042 0202 	orr.w	r2, r2, #2
 800a468:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	68da      	ldr	r2, [r3, #12]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f042 0204 	orr.w	r2, r2, #4
 800a478:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2201      	movs	r2, #1
 800a480:	2100      	movs	r1, #0
 800a482:	4618      	mov	r0, r3
 800a484:	f001 fbd8 	bl	800bc38 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2201      	movs	r2, #1
 800a48e:	2104      	movs	r1, #4
 800a490:	4618      	mov	r0, r3
 800a492:	f001 fbd1 	bl	800bc38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a17      	ldr	r2, [pc, #92]	@ (800a4f8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d018      	beq.n	800a4d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a15      	ldr	r2, [pc, #84]	@ (800a4fc <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d013      	beq.n	800a4d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a14      	ldr	r2, [pc, #80]	@ (800a500 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d00e      	beq.n	800a4d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a12      	ldr	r2, [pc, #72]	@ (800a504 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d009      	beq.n	800a4d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	4a11      	ldr	r2, [pc, #68]	@ (800a508 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d004      	beq.n	800a4d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a0f      	ldr	r2, [pc, #60]	@ (800a50c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d101      	bne.n	800a4d6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d007      	beq.n	800a4ec <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	40012c00 	.word	0x40012c00
 800a4fc:	40013400 	.word	0x40013400
 800a500:	40014000 	.word	0x40014000
 800a504:	40014400 	.word	0x40014400
 800a508:	40014800 	.word	0x40014800
 800a50c:	40015000 	.word	0x40015000

0800a510 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b086      	sub	sp, #24
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d101      	bne.n	800a524 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	e0a2      	b.n	800a66a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d111      	bne.n	800a554 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f001 fba3 	bl	800bc84 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a542:	2b00      	cmp	r3, #0
 800a544:	d102      	bne.n	800a54c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a4a      	ldr	r2, [pc, #296]	@ (800a674 <HAL_TIM_Encoder_Init+0x164>)
 800a54a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6812      	ldr	r2, [r2, #0]
 800a566:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3304      	adds	r3, #4
 800a578:	4619      	mov	r1, r3
 800a57a:	4610      	mov	r0, r2
 800a57c:	f000 fee2 	bl	800b344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6a1b      	ldr	r3, [r3, #32]
 800a596:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5a8:	f023 0303 	bic.w	r3, r3, #3
 800a5ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	689a      	ldr	r2, [r3, #8]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	021b      	lsls	r3, r3, #8
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a5c6:	f023 030c 	bic.w	r3, r3, #12
 800a5ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	68da      	ldr	r2, [r3, #12]
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	69db      	ldr	r3, [r3, #28]
 800a5e0:	021b      	lsls	r3, r3, #8
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	691b      	ldr	r3, [r3, #16]
 800a5ee:	011a      	lsls	r2, r3, #4
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	031b      	lsls	r3, r3, #12
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a604:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a60c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	685a      	ldr	r2, [r3, #4]
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	695b      	ldr	r3, [r3, #20]
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	4313      	orrs	r3, r2
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	4313      	orrs	r3, r2
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	697a      	ldr	r2, [r7, #20]
 800a626:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	08005db1 	.word	0x08005db1

0800a678 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a688:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a690:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a698:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d110      	bne.n	800a6ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d102      	bne.n	800a6b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a6ae:	7b7b      	ldrb	r3, [r7, #13]
 800a6b0:	2b01      	cmp	r3, #1
 800a6b2:	d001      	beq.n	800a6b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e069      	b.n	800a78c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2202      	movs	r2, #2
 800a6bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2202      	movs	r2, #2
 800a6c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6c8:	e031      	b.n	800a72e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d110      	bne.n	800a6f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d102      	bne.n	800a6dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a6d6:	7b3b      	ldrb	r3, [r7, #12]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d001      	beq.n	800a6e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e055      	b.n	800a78c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2202      	movs	r2, #2
 800a6ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6f0:	e01d      	b.n	800a72e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d108      	bne.n	800a70a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d105      	bne.n	800a70a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6fe:	7b7b      	ldrb	r3, [r7, #13]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d102      	bne.n	800a70a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a704:	7b3b      	ldrb	r3, [r7, #12]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d001      	beq.n	800a70e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e03e      	b.n	800a78c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2202      	movs	r2, #2
 800a71a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2202      	movs	r2, #2
 800a722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2202      	movs	r2, #2
 800a72a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_TIM_Encoder_Start+0xc4>
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	2b04      	cmp	r3, #4
 800a738:	d008      	beq.n	800a74c <HAL_TIM_Encoder_Start+0xd4>
 800a73a:	e00f      	b.n	800a75c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2201      	movs	r2, #1
 800a742:	2100      	movs	r1, #0
 800a744:	4618      	mov	r0, r3
 800a746:	f001 fa77 	bl	800bc38 <TIM_CCxChannelCmd>
      break;
 800a74a:	e016      	b.n	800a77a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2201      	movs	r2, #1
 800a752:	2104      	movs	r1, #4
 800a754:	4618      	mov	r0, r3
 800a756:	f001 fa6f 	bl	800bc38 <TIM_CCxChannelCmd>
      break;
 800a75a:	e00e      	b.n	800a77a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2201      	movs	r2, #1
 800a762:	2100      	movs	r1, #0
 800a764:	4618      	mov	r0, r3
 800a766:	f001 fa67 	bl	800bc38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	2201      	movs	r2, #1
 800a770:	2104      	movs	r1, #4
 800a772:	4618      	mov	r0, r3
 800a774:	f001 fa60 	bl	800bc38 <TIM_CCxChannelCmd>
      break;
 800a778:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f042 0201 	orr.w	r2, r2, #1
 800a788:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f003 0302 	and.w	r3, r3, #2
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d026      	beq.n	800a804 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d021      	beq.n	800a804 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f06f 0202 	mvn.w	r2, #2
 800a7c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	f003 0303 	and.w	r3, r3, #3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d005      	beq.n	800a7ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	4798      	blx	r3
 800a7e8:	e009      	b.n	800a7fe <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	f003 0304 	and.w	r3, r3, #4
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d026      	beq.n	800a85c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	2b00      	cmp	r3, #0
 800a816:	d021      	beq.n	800a85c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f06f 0204 	mvn.w	r2, #4
 800a820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2202      	movs	r2, #2
 800a826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a832:	2b00      	cmp	r3, #0
 800a834:	d005      	beq.n	800a842 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	4798      	blx	r3
 800a840:	e009      	b.n	800a856 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2200      	movs	r2, #0
 800a85a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	f003 0308 	and.w	r3, r3, #8
 800a862:	2b00      	cmp	r3, #0
 800a864:	d026      	beq.n	800a8b4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f003 0308 	and.w	r3, r3, #8
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d021      	beq.n	800a8b4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f06f 0208 	mvn.w	r2, #8
 800a878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2204      	movs	r2, #4
 800a87e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	69db      	ldr	r3, [r3, #28]
 800a886:	f003 0303 	and.w	r3, r3, #3
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	4798      	blx	r3
 800a898:	e009      	b.n	800a8ae <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f003 0310 	and.w	r3, r3, #16
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d026      	beq.n	800a90c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f003 0310 	and.w	r3, r3, #16
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d021      	beq.n	800a90c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f06f 0210 	mvn.w	r2, #16
 800a8d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2208      	movs	r2, #8
 800a8d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	69db      	ldr	r3, [r3, #28]
 800a8de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d005      	beq.n	800a8f2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
 800a8f0:	e009      	b.n	800a906 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	f003 0301 	and.w	r3, r3, #1
 800a912:	2b00      	cmp	r3, #0
 800a914:	d00e      	beq.n	800a934 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d009      	beq.n	800a934 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f06f 0201 	mvn.w	r2, #1
 800a928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d104      	bne.n	800a948 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00e      	beq.n	800a966 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d009      	beq.n	800a966 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a95a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00e      	beq.n	800a98e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a976:	2b00      	cmp	r3, #0
 800a978:	d009      	beq.n	800a98e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00e      	beq.n	800a9b6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d009      	beq.n	800a9b6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	f003 0320 	and.w	r3, r3, #32
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00e      	beq.n	800a9de <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f003 0320 	and.w	r3, r3, #32
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d009      	beq.n	800a9de <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f06f 0220 	mvn.w	r2, #32
 800a9d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00e      	beq.n	800aa06 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a9fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00e      	beq.n	800aa2e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d009      	beq.n	800aa2e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800aa22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00e      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d009      	beq.n	800aa56 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aa4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00e      	beq.n	800aa7e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aa72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa94:	2300      	movs	r3, #0
 800aa96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <HAL_TIM_OC_ConfigChannel+0x1e>
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	e066      	b.n	800ab74 <HAL_TIM_OC_ConfigChannel+0xec>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b14      	cmp	r3, #20
 800aab2:	d857      	bhi.n	800ab64 <HAL_TIM_OC_ConfigChannel+0xdc>
 800aab4:	a201      	add	r2, pc, #4	@ (adr r2, 800aabc <HAL_TIM_OC_ConfigChannel+0x34>)
 800aab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaba:	bf00      	nop
 800aabc:	0800ab11 	.word	0x0800ab11
 800aac0:	0800ab65 	.word	0x0800ab65
 800aac4:	0800ab65 	.word	0x0800ab65
 800aac8:	0800ab65 	.word	0x0800ab65
 800aacc:	0800ab1f 	.word	0x0800ab1f
 800aad0:	0800ab65 	.word	0x0800ab65
 800aad4:	0800ab65 	.word	0x0800ab65
 800aad8:	0800ab65 	.word	0x0800ab65
 800aadc:	0800ab2d 	.word	0x0800ab2d
 800aae0:	0800ab65 	.word	0x0800ab65
 800aae4:	0800ab65 	.word	0x0800ab65
 800aae8:	0800ab65 	.word	0x0800ab65
 800aaec:	0800ab3b 	.word	0x0800ab3b
 800aaf0:	0800ab65 	.word	0x0800ab65
 800aaf4:	0800ab65 	.word	0x0800ab65
 800aaf8:	0800ab65 	.word	0x0800ab65
 800aafc:	0800ab49 	.word	0x0800ab49
 800ab00:	0800ab65 	.word	0x0800ab65
 800ab04:	0800ab65 	.word	0x0800ab65
 800ab08:	0800ab65 	.word	0x0800ab65
 800ab0c:	0800ab57 	.word	0x0800ab57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f000 fcc8 	bl	800b4ac <TIM_OC1_SetConfig>
      break;
 800ab1c:	e025      	b.n	800ab6a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 fd5b 	bl	800b5e0 <TIM_OC2_SetConfig>
      break;
 800ab2a:	e01e      	b.n	800ab6a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68b9      	ldr	r1, [r7, #8]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f000 fde8 	bl	800b708 <TIM_OC3_SetConfig>
      break;
 800ab38:	e017      	b.n	800ab6a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 fe73 	bl	800b82c <TIM_OC4_SetConfig>
      break;
 800ab46:	e010      	b.n	800ab6a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68b9      	ldr	r1, [r7, #8]
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 ff00 	bl	800b954 <TIM_OC5_SetConfig>
      break;
 800ab54:	e009      	b.n	800ab6a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	68b9      	ldr	r1, [r7, #8]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 ff63 	bl	800ba28 <TIM_OC6_SetConfig>
      break;
 800ab62:	e002      	b.n	800ab6a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	75fb      	strb	r3, [r7, #23]
      break;
 800ab68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3718      	adds	r7, #24
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d101      	bne.n	800ab9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab96:	2302      	movs	r3, #2
 800ab98:	e0ff      	b.n	800ad9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2b14      	cmp	r3, #20
 800aba6:	f200 80f0 	bhi.w	800ad8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800abaa:	a201      	add	r2, pc, #4	@ (adr r2, 800abb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb0:	0800ac05 	.word	0x0800ac05
 800abb4:	0800ad8b 	.word	0x0800ad8b
 800abb8:	0800ad8b 	.word	0x0800ad8b
 800abbc:	0800ad8b 	.word	0x0800ad8b
 800abc0:	0800ac45 	.word	0x0800ac45
 800abc4:	0800ad8b 	.word	0x0800ad8b
 800abc8:	0800ad8b 	.word	0x0800ad8b
 800abcc:	0800ad8b 	.word	0x0800ad8b
 800abd0:	0800ac87 	.word	0x0800ac87
 800abd4:	0800ad8b 	.word	0x0800ad8b
 800abd8:	0800ad8b 	.word	0x0800ad8b
 800abdc:	0800ad8b 	.word	0x0800ad8b
 800abe0:	0800acc7 	.word	0x0800acc7
 800abe4:	0800ad8b 	.word	0x0800ad8b
 800abe8:	0800ad8b 	.word	0x0800ad8b
 800abec:	0800ad8b 	.word	0x0800ad8b
 800abf0:	0800ad09 	.word	0x0800ad09
 800abf4:	0800ad8b 	.word	0x0800ad8b
 800abf8:	0800ad8b 	.word	0x0800ad8b
 800abfc:	0800ad8b 	.word	0x0800ad8b
 800ac00:	0800ad49 	.word	0x0800ad49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f000 fc4e 	bl	800b4ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	699a      	ldr	r2, [r3, #24]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 0208 	orr.w	r2, r2, #8
 800ac1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	699a      	ldr	r2, [r3, #24]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f022 0204 	bic.w	r2, r2, #4
 800ac2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	6999      	ldr	r1, [r3, #24]
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	691a      	ldr	r2, [r3, #16]
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	430a      	orrs	r2, r1
 800ac40:	619a      	str	r2, [r3, #24]
      break;
 800ac42:	e0a5      	b.n	800ad90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68b9      	ldr	r1, [r7, #8]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 fcc8 	bl	800b5e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	699a      	ldr	r2, [r3, #24]
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	699a      	ldr	r2, [r3, #24]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6999      	ldr	r1, [r3, #24]
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	021a      	lsls	r2, r3, #8
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	430a      	orrs	r2, r1
 800ac82:	619a      	str	r2, [r3, #24]
      break;
 800ac84:	e084      	b.n	800ad90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68b9      	ldr	r1, [r7, #8]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 fd3b 	bl	800b708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69da      	ldr	r2, [r3, #28]
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f042 0208 	orr.w	r2, r2, #8
 800aca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	69da      	ldr	r2, [r3, #28]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0204 	bic.w	r2, r2, #4
 800acb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	69d9      	ldr	r1, [r3, #28]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	691a      	ldr	r2, [r3, #16]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	430a      	orrs	r2, r1
 800acc2:	61da      	str	r2, [r3, #28]
      break;
 800acc4:	e064      	b.n	800ad90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68b9      	ldr	r1, [r7, #8]
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fdad 	bl	800b82c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	69da      	ldr	r2, [r3, #28]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ace0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69da      	ldr	r2, [r3, #28]
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	69d9      	ldr	r1, [r3, #28]
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	021a      	lsls	r2, r3, #8
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	430a      	orrs	r2, r1
 800ad04:	61da      	str	r2, [r3, #28]
      break;
 800ad06:	e043      	b.n	800ad90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68b9      	ldr	r1, [r7, #8]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fe20 	bl	800b954 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f042 0208 	orr.w	r2, r2, #8
 800ad22:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f022 0204 	bic.w	r2, r2, #4
 800ad32:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	691a      	ldr	r2, [r3, #16]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	430a      	orrs	r2, r1
 800ad44:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ad46:	e023      	b.n	800ad90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 fe6a 	bl	800ba28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad62:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad72:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	021a      	lsls	r2, r3, #8
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	430a      	orrs	r2, r1
 800ad86:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ad88:	e002      	b.n	800ad90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop

0800ada4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d101      	bne.n	800adc0 <HAL_TIM_ConfigClockSource+0x1c>
 800adbc:	2302      	movs	r3, #2
 800adbe:	e0f6      	b.n	800afae <HAL_TIM_ConfigClockSource+0x20a>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2202      	movs	r2, #2
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	689b      	ldr	r3, [r3, #8]
 800add6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800adde:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ade2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ade4:	68bb      	ldr	r3, [r7, #8]
 800ade6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a6f      	ldr	r2, [pc, #444]	@ (800afb8 <HAL_TIM_ConfigClockSource+0x214>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	f000 80c1 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae00:	4a6d      	ldr	r2, [pc, #436]	@ (800afb8 <HAL_TIM_ConfigClockSource+0x214>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	f200 80c6 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae08:	4a6c      	ldr	r2, [pc, #432]	@ (800afbc <HAL_TIM_ConfigClockSource+0x218>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	f000 80b9 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae10:	4a6a      	ldr	r2, [pc, #424]	@ (800afbc <HAL_TIM_ConfigClockSource+0x218>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	f200 80be 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae18:	4a69      	ldr	r2, [pc, #420]	@ (800afc0 <HAL_TIM_ConfigClockSource+0x21c>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	f000 80b1 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae20:	4a67      	ldr	r2, [pc, #412]	@ (800afc0 <HAL_TIM_ConfigClockSource+0x21c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	f200 80b6 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae28:	4a66      	ldr	r2, [pc, #408]	@ (800afc4 <HAL_TIM_ConfigClockSource+0x220>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	f000 80a9 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae30:	4a64      	ldr	r2, [pc, #400]	@ (800afc4 <HAL_TIM_ConfigClockSource+0x220>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	f200 80ae 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae38:	4a63      	ldr	r2, [pc, #396]	@ (800afc8 <HAL_TIM_ConfigClockSource+0x224>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	f000 80a1 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae40:	4a61      	ldr	r2, [pc, #388]	@ (800afc8 <HAL_TIM_ConfigClockSource+0x224>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	f200 80a6 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae48:	4a60      	ldr	r2, [pc, #384]	@ (800afcc <HAL_TIM_ConfigClockSource+0x228>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	f000 8099 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae50:	4a5e      	ldr	r2, [pc, #376]	@ (800afcc <HAL_TIM_ConfigClockSource+0x228>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	f200 809e 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ae5c:	f000 8091 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ae64:	f200 8096 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae6c:	f000 8089 	beq.w	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800ae70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ae74:	f200 808e 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae7c:	d03e      	beq.n	800aefc <HAL_TIM_ConfigClockSource+0x158>
 800ae7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae82:	f200 8087 	bhi.w	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae8a:	f000 8086 	beq.w	800af9a <HAL_TIM_ConfigClockSource+0x1f6>
 800ae8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae92:	d87f      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae94:	2b70      	cmp	r3, #112	@ 0x70
 800ae96:	d01a      	beq.n	800aece <HAL_TIM_ConfigClockSource+0x12a>
 800ae98:	2b70      	cmp	r3, #112	@ 0x70
 800ae9a:	d87b      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800ae9c:	2b60      	cmp	r3, #96	@ 0x60
 800ae9e:	d050      	beq.n	800af42 <HAL_TIM_ConfigClockSource+0x19e>
 800aea0:	2b60      	cmp	r3, #96	@ 0x60
 800aea2:	d877      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aea4:	2b50      	cmp	r3, #80	@ 0x50
 800aea6:	d03c      	beq.n	800af22 <HAL_TIM_ConfigClockSource+0x17e>
 800aea8:	2b50      	cmp	r3, #80	@ 0x50
 800aeaa:	d873      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aeac:	2b40      	cmp	r3, #64	@ 0x40
 800aeae:	d058      	beq.n	800af62 <HAL_TIM_ConfigClockSource+0x1be>
 800aeb0:	2b40      	cmp	r3, #64	@ 0x40
 800aeb2:	d86f      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aeb4:	2b30      	cmp	r3, #48	@ 0x30
 800aeb6:	d064      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800aeb8:	2b30      	cmp	r3, #48	@ 0x30
 800aeba:	d86b      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aebc:	2b20      	cmp	r3, #32
 800aebe:	d060      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800aec0:	2b20      	cmp	r3, #32
 800aec2:	d867      	bhi.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d05c      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800aec8:	2b10      	cmp	r3, #16
 800aeca:	d05a      	beq.n	800af82 <HAL_TIM_ConfigClockSource+0x1de>
 800aecc:	e062      	b.n	800af94 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aede:	f000 fe8b 	bl	800bbf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aef0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	609a      	str	r2, [r3, #8]
      break;
 800aefa:	e04f      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af0c:	f000 fe74 	bl	800bbf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af1e:	609a      	str	r2, [r3, #8]
      break;
 800af20:	e03c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af2e:	461a      	mov	r2, r3
 800af30:	f000 fde6 	bl	800bb00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	2150      	movs	r1, #80	@ 0x50
 800af3a:	4618      	mov	r0, r3
 800af3c:	f000 fe3f 	bl	800bbbe <TIM_ITRx_SetConfig>
      break;
 800af40:	e02c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af4e:	461a      	mov	r2, r3
 800af50:	f000 fe05 	bl	800bb5e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2160      	movs	r1, #96	@ 0x60
 800af5a:	4618      	mov	r0, r3
 800af5c:	f000 fe2f 	bl	800bbbe <TIM_ITRx_SetConfig>
      break;
 800af60:	e01c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af6e:	461a      	mov	r2, r3
 800af70:	f000 fdc6 	bl	800bb00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2140      	movs	r1, #64	@ 0x40
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fe1f 	bl	800bbbe <TIM_ITRx_SetConfig>
      break;
 800af80:	e00c      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4619      	mov	r1, r3
 800af8c:	4610      	mov	r0, r2
 800af8e:	f000 fe16 	bl	800bbbe <TIM_ITRx_SetConfig>
      break;
 800af92:	e003      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	73fb      	strb	r3, [r7, #15]
      break;
 800af98:	e000      	b.n	800af9c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800af9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800afac:	7bfb      	ldrb	r3, [r7, #15]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	00100070 	.word	0x00100070
 800afbc:	00100060 	.word	0x00100060
 800afc0:	00100050 	.word	0x00100050
 800afc4:	00100040 	.word	0x00100040
 800afc8:	00100030 	.word	0x00100030
 800afcc:	00100020 	.word	0x00100020

0800afd0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800afd8:	bf00      	nop
 800afda:	370c      	adds	r7, #12
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b084:	b480      	push	{r7}
 800b086:	b087      	sub	sp, #28
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	460b      	mov	r3, r1
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b092:	2300      	movs	r3, #0
 800b094:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d101      	bne.n	800b0a0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	e14a      	b.n	800b336 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0a6:	b2db      	uxtb	r3, r3
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	f040 80dd 	bne.w	800b268 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800b0ae:	7afb      	ldrb	r3, [r7, #11]
 800b0b0:	2b1f      	cmp	r3, #31
 800b0b2:	f200 80d6 	bhi.w	800b262 <HAL_TIM_RegisterCallback+0x1de>
 800b0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0bc <HAL_TIM_RegisterCallback+0x38>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b13d 	.word	0x0800b13d
 800b0c0:	0800b145 	.word	0x0800b145
 800b0c4:	0800b14d 	.word	0x0800b14d
 800b0c8:	0800b155 	.word	0x0800b155
 800b0cc:	0800b15d 	.word	0x0800b15d
 800b0d0:	0800b165 	.word	0x0800b165
 800b0d4:	0800b16d 	.word	0x0800b16d
 800b0d8:	0800b175 	.word	0x0800b175
 800b0dc:	0800b17d 	.word	0x0800b17d
 800b0e0:	0800b185 	.word	0x0800b185
 800b0e4:	0800b18d 	.word	0x0800b18d
 800b0e8:	0800b195 	.word	0x0800b195
 800b0ec:	0800b19d 	.word	0x0800b19d
 800b0f0:	0800b1a5 	.word	0x0800b1a5
 800b0f4:	0800b1af 	.word	0x0800b1af
 800b0f8:	0800b1b9 	.word	0x0800b1b9
 800b0fc:	0800b1c3 	.word	0x0800b1c3
 800b100:	0800b1cd 	.word	0x0800b1cd
 800b104:	0800b1d7 	.word	0x0800b1d7
 800b108:	0800b1e1 	.word	0x0800b1e1
 800b10c:	0800b1eb 	.word	0x0800b1eb
 800b110:	0800b1f5 	.word	0x0800b1f5
 800b114:	0800b1ff 	.word	0x0800b1ff
 800b118:	0800b209 	.word	0x0800b209
 800b11c:	0800b213 	.word	0x0800b213
 800b120:	0800b21d 	.word	0x0800b21d
 800b124:	0800b227 	.word	0x0800b227
 800b128:	0800b231 	.word	0x0800b231
 800b12c:	0800b23b 	.word	0x0800b23b
 800b130:	0800b245 	.word	0x0800b245
 800b134:	0800b24f 	.word	0x0800b24f
 800b138:	0800b259 	.word	0x0800b259
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b142:	e0f7      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b14a:	e0f3      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b152:	e0ef      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b15a:	e0eb      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b162:	e0e7      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b16a:	e0e3      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b172:	e0df      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b17a:	e0db      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b182:	e0d7      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b18a:	e0d3      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b192:	e0cf      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b19a:	e0cb      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b1a2:	e0c7      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b1ac:	e0c2      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b1b6:	e0bd      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b1c0:	e0b8      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b1ca:	e0b3      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b1d4:	e0ae      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b1de:	e0a9      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b1e8:	e0a4      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b1f2:	e09f      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b1fc:	e09a      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b206:	e095      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b210:	e090      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b21a:	e08b      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b224:	e086      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b22e:	e081      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b238:	e07c      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b242:	e077      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	687a      	ldr	r2, [r7, #4]
 800b248:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b24c:	e072      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b256:	e06d      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b260:	e068      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	75fb      	strb	r3, [r7, #23]
        break;
 800b266:	e065      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	d15d      	bne.n	800b330 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	2b0d      	cmp	r3, #13
 800b278:	d857      	bhi.n	800b32a <HAL_TIM_RegisterCallback+0x2a6>
 800b27a:	a201      	add	r2, pc, #4	@ (adr r2, 800b280 <HAL_TIM_RegisterCallback+0x1fc>)
 800b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b280:	0800b2b9 	.word	0x0800b2b9
 800b284:	0800b2c1 	.word	0x0800b2c1
 800b288:	0800b2c9 	.word	0x0800b2c9
 800b28c:	0800b2d1 	.word	0x0800b2d1
 800b290:	0800b2d9 	.word	0x0800b2d9
 800b294:	0800b2e1 	.word	0x0800b2e1
 800b298:	0800b2e9 	.word	0x0800b2e9
 800b29c:	0800b2f1 	.word	0x0800b2f1
 800b2a0:	0800b2f9 	.word	0x0800b2f9
 800b2a4:	0800b301 	.word	0x0800b301
 800b2a8:	0800b309 	.word	0x0800b309
 800b2ac:	0800b311 	.word	0x0800b311
 800b2b0:	0800b319 	.word	0x0800b319
 800b2b4:	0800b321 	.word	0x0800b321
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b2be:	e039      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b2c6:	e035      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	687a      	ldr	r2, [r7, #4]
 800b2cc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b2ce:	e031      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b2d6:	e02d      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b2de:	e029      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b2e6:	e025      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b2ee:	e021      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b2f6:	e01d      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b2fe:	e019      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b306:	e015      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	687a      	ldr	r2, [r7, #4]
 800b30c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b30e:	e011      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b316:	e00d      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b31e:	e009      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b328:	e004      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	75fb      	strb	r3, [r7, #23]
        break;
 800b32e:	e001      	b.n	800b334 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b334:	7dfb      	ldrb	r3, [r7, #23]
}
 800b336:	4618      	mov	r0, r3
 800b338:	371c      	adds	r7, #28
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop

0800b344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a4c      	ldr	r2, [pc, #304]	@ (800b488 <TIM_Base_SetConfig+0x144>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d017      	beq.n	800b38c <TIM_Base_SetConfig+0x48>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b362:	d013      	beq.n	800b38c <TIM_Base_SetConfig+0x48>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a49      	ldr	r2, [pc, #292]	@ (800b48c <TIM_Base_SetConfig+0x148>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00f      	beq.n	800b38c <TIM_Base_SetConfig+0x48>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a48      	ldr	r2, [pc, #288]	@ (800b490 <TIM_Base_SetConfig+0x14c>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d00b      	beq.n	800b38c <TIM_Base_SetConfig+0x48>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a47      	ldr	r2, [pc, #284]	@ (800b494 <TIM_Base_SetConfig+0x150>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d007      	beq.n	800b38c <TIM_Base_SetConfig+0x48>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a46      	ldr	r2, [pc, #280]	@ (800b498 <TIM_Base_SetConfig+0x154>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d003      	beq.n	800b38c <TIM_Base_SetConfig+0x48>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a45      	ldr	r2, [pc, #276]	@ (800b49c <TIM_Base_SetConfig+0x158>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d108      	bne.n	800b39e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a39      	ldr	r2, [pc, #228]	@ (800b488 <TIM_Base_SetConfig+0x144>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d023      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3ac:	d01f      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a36      	ldr	r2, [pc, #216]	@ (800b48c <TIM_Base_SetConfig+0x148>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d01b      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a35      	ldr	r2, [pc, #212]	@ (800b490 <TIM_Base_SetConfig+0x14c>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d017      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a34      	ldr	r2, [pc, #208]	@ (800b494 <TIM_Base_SetConfig+0x150>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d013      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a33      	ldr	r2, [pc, #204]	@ (800b498 <TIM_Base_SetConfig+0x154>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d00f      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a33      	ldr	r2, [pc, #204]	@ (800b4a0 <TIM_Base_SetConfig+0x15c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d00b      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a32      	ldr	r2, [pc, #200]	@ (800b4a4 <TIM_Base_SetConfig+0x160>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d007      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a31      	ldr	r2, [pc, #196]	@ (800b4a8 <TIM_Base_SetConfig+0x164>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d003      	beq.n	800b3ee <TIM_Base_SetConfig+0xaa>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a2c      	ldr	r2, [pc, #176]	@ (800b49c <TIM_Base_SetConfig+0x158>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d108      	bne.n	800b400 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	4313      	orrs	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	695b      	ldr	r3, [r3, #20]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	689a      	ldr	r2, [r3, #8]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a18      	ldr	r2, [pc, #96]	@ (800b488 <TIM_Base_SetConfig+0x144>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d013      	beq.n	800b454 <TIM_Base_SetConfig+0x110>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a1a      	ldr	r2, [pc, #104]	@ (800b498 <TIM_Base_SetConfig+0x154>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d00f      	beq.n	800b454 <TIM_Base_SetConfig+0x110>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1a      	ldr	r2, [pc, #104]	@ (800b4a0 <TIM_Base_SetConfig+0x15c>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d00b      	beq.n	800b454 <TIM_Base_SetConfig+0x110>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a19      	ldr	r2, [pc, #100]	@ (800b4a4 <TIM_Base_SetConfig+0x160>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d007      	beq.n	800b454 <TIM_Base_SetConfig+0x110>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a18      	ldr	r2, [pc, #96]	@ (800b4a8 <TIM_Base_SetConfig+0x164>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_Base_SetConfig+0x110>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a13      	ldr	r2, [pc, #76]	@ (800b49c <TIM_Base_SetConfig+0x158>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d103      	bne.n	800b45c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	691a      	ldr	r2, [r3, #16]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	f003 0301 	and.w	r3, r3, #1
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d105      	bne.n	800b47a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	f023 0201 	bic.w	r2, r3, #1
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	611a      	str	r2, [r3, #16]
  }
}
 800b47a:	bf00      	nop
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	40012c00 	.word	0x40012c00
 800b48c:	40000400 	.word	0x40000400
 800b490:	40000800 	.word	0x40000800
 800b494:	40000c00 	.word	0x40000c00
 800b498:	40013400 	.word	0x40013400
 800b49c:	40015000 	.word	0x40015000
 800b4a0:	40014000 	.word	0x40014000
 800b4a4:	40014400 	.word	0x40014400
 800b4a8:	40014800 	.word	0x40014800

0800b4ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a1b      	ldr	r3, [r3, #32]
 800b4c0:	f023 0201 	bic.w	r2, r3, #1
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f023 0303 	bic.w	r3, r3, #3
 800b4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	f023 0302 	bic.w	r3, r3, #2
 800b4f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	697a      	ldr	r2, [r7, #20]
 800b500:	4313      	orrs	r3, r2
 800b502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	4a30      	ldr	r2, [pc, #192]	@ (800b5c8 <TIM_OC1_SetConfig+0x11c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d013      	beq.n	800b534 <TIM_OC1_SetConfig+0x88>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4a2f      	ldr	r2, [pc, #188]	@ (800b5cc <TIM_OC1_SetConfig+0x120>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d00f      	beq.n	800b534 <TIM_OC1_SetConfig+0x88>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4a2e      	ldr	r2, [pc, #184]	@ (800b5d0 <TIM_OC1_SetConfig+0x124>)
 800b518:	4293      	cmp	r3, r2
 800b51a:	d00b      	beq.n	800b534 <TIM_OC1_SetConfig+0x88>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4a2d      	ldr	r2, [pc, #180]	@ (800b5d4 <TIM_OC1_SetConfig+0x128>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d007      	beq.n	800b534 <TIM_OC1_SetConfig+0x88>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a2c      	ldr	r2, [pc, #176]	@ (800b5d8 <TIM_OC1_SetConfig+0x12c>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d003      	beq.n	800b534 <TIM_OC1_SetConfig+0x88>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4a2b      	ldr	r2, [pc, #172]	@ (800b5dc <TIM_OC1_SetConfig+0x130>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d10c      	bne.n	800b54e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f023 0308 	bic.w	r3, r3, #8
 800b53a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	4313      	orrs	r3, r2
 800b544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	f023 0304 	bic.w	r3, r3, #4
 800b54c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	4a1d      	ldr	r2, [pc, #116]	@ (800b5c8 <TIM_OC1_SetConfig+0x11c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d013      	beq.n	800b57e <TIM_OC1_SetConfig+0xd2>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	4a1c      	ldr	r2, [pc, #112]	@ (800b5cc <TIM_OC1_SetConfig+0x120>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d00f      	beq.n	800b57e <TIM_OC1_SetConfig+0xd2>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4a1b      	ldr	r2, [pc, #108]	@ (800b5d0 <TIM_OC1_SetConfig+0x124>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d00b      	beq.n	800b57e <TIM_OC1_SetConfig+0xd2>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4a1a      	ldr	r2, [pc, #104]	@ (800b5d4 <TIM_OC1_SetConfig+0x128>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d007      	beq.n	800b57e <TIM_OC1_SetConfig+0xd2>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	4a19      	ldr	r2, [pc, #100]	@ (800b5d8 <TIM_OC1_SetConfig+0x12c>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d003      	beq.n	800b57e <TIM_OC1_SetConfig+0xd2>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	4a18      	ldr	r2, [pc, #96]	@ (800b5dc <TIM_OC1_SetConfig+0x130>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d111      	bne.n	800b5a2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b58c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	695b      	ldr	r3, [r3, #20]
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	4313      	orrs	r3, r2
 800b596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	693a      	ldr	r2, [r7, #16]
 800b5a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	68fa      	ldr	r2, [r7, #12]
 800b5ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	697a      	ldr	r2, [r7, #20]
 800b5ba:	621a      	str	r2, [r3, #32]
}
 800b5bc:	bf00      	nop
 800b5be:	371c      	adds	r7, #28
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	40012c00 	.word	0x40012c00
 800b5cc:	40013400 	.word	0x40013400
 800b5d0:	40014000 	.word	0x40014000
 800b5d4:	40014400 	.word	0x40014400
 800b5d8:	40014800 	.word	0x40014800
 800b5dc:	40015000 	.word	0x40015000

0800b5e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	f023 0210 	bic.w	r2, r3, #16
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b60e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	021b      	lsls	r3, r3, #8
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	4313      	orrs	r3, r2
 800b626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f023 0320 	bic.w	r3, r3, #32
 800b62e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	4313      	orrs	r3, r2
 800b63a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a2c      	ldr	r2, [pc, #176]	@ (800b6f0 <TIM_OC2_SetConfig+0x110>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d007      	beq.n	800b654 <TIM_OC2_SetConfig+0x74>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	4a2b      	ldr	r2, [pc, #172]	@ (800b6f4 <TIM_OC2_SetConfig+0x114>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d003      	beq.n	800b654 <TIM_OC2_SetConfig+0x74>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a2a      	ldr	r2, [pc, #168]	@ (800b6f8 <TIM_OC2_SetConfig+0x118>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d10d      	bne.n	800b670 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b65a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	011b      	lsls	r3, r3, #4
 800b662:	697a      	ldr	r2, [r7, #20]
 800b664:	4313      	orrs	r3, r2
 800b666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b66e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	4a1f      	ldr	r2, [pc, #124]	@ (800b6f0 <TIM_OC2_SetConfig+0x110>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d013      	beq.n	800b6a0 <TIM_OC2_SetConfig+0xc0>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	4a1e      	ldr	r2, [pc, #120]	@ (800b6f4 <TIM_OC2_SetConfig+0x114>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00f      	beq.n	800b6a0 <TIM_OC2_SetConfig+0xc0>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	4a1e      	ldr	r2, [pc, #120]	@ (800b6fc <TIM_OC2_SetConfig+0x11c>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d00b      	beq.n	800b6a0 <TIM_OC2_SetConfig+0xc0>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4a1d      	ldr	r2, [pc, #116]	@ (800b700 <TIM_OC2_SetConfig+0x120>)
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d007      	beq.n	800b6a0 <TIM_OC2_SetConfig+0xc0>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4a1c      	ldr	r2, [pc, #112]	@ (800b704 <TIM_OC2_SetConfig+0x124>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d003      	beq.n	800b6a0 <TIM_OC2_SetConfig+0xc0>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	4a17      	ldr	r2, [pc, #92]	@ (800b6f8 <TIM_OC2_SetConfig+0x118>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d113      	bne.n	800b6c8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b6a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	009b      	lsls	r3, r3, #2
 800b6c2:	693a      	ldr	r2, [r7, #16]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685a      	ldr	r2, [r3, #4]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	697a      	ldr	r2, [r7, #20]
 800b6e0:	621a      	str	r2, [r3, #32]
}
 800b6e2:	bf00      	nop
 800b6e4:	371c      	adds	r7, #28
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	40012c00 	.word	0x40012c00
 800b6f4:	40013400 	.word	0x40013400
 800b6f8:	40015000 	.word	0x40015000
 800b6fc:	40014000 	.word	0x40014000
 800b700:	40014400 	.word	0x40014400
 800b704:	40014800 	.word	0x40014800

0800b708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a1b      	ldr	r3, [r3, #32]
 800b716:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a1b      	ldr	r3, [r3, #32]
 800b71c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	69db      	ldr	r3, [r3, #28]
 800b72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f023 0303 	bic.w	r3, r3, #3
 800b742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	4313      	orrs	r3, r2
 800b74c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	021b      	lsls	r3, r3, #8
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	4313      	orrs	r3, r2
 800b760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4a2b      	ldr	r2, [pc, #172]	@ (800b814 <TIM_OC3_SetConfig+0x10c>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d007      	beq.n	800b77a <TIM_OC3_SetConfig+0x72>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a2a      	ldr	r2, [pc, #168]	@ (800b818 <TIM_OC3_SetConfig+0x110>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d003      	beq.n	800b77a <TIM_OC3_SetConfig+0x72>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a29      	ldr	r2, [pc, #164]	@ (800b81c <TIM_OC3_SetConfig+0x114>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d10d      	bne.n	800b796 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b780:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	021b      	lsls	r3, r3, #8
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a1e      	ldr	r2, [pc, #120]	@ (800b814 <TIM_OC3_SetConfig+0x10c>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d013      	beq.n	800b7c6 <TIM_OC3_SetConfig+0xbe>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b818 <TIM_OC3_SetConfig+0x110>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d00f      	beq.n	800b7c6 <TIM_OC3_SetConfig+0xbe>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b820 <TIM_OC3_SetConfig+0x118>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d00b      	beq.n	800b7c6 <TIM_OC3_SetConfig+0xbe>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b824 <TIM_OC3_SetConfig+0x11c>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d007      	beq.n	800b7c6 <TIM_OC3_SetConfig+0xbe>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4a1b      	ldr	r2, [pc, #108]	@ (800b828 <TIM_OC3_SetConfig+0x120>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d003      	beq.n	800b7c6 <TIM_OC3_SetConfig+0xbe>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	4a16      	ldr	r2, [pc, #88]	@ (800b81c <TIM_OC3_SetConfig+0x114>)
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	d113      	bne.n	800b7ee <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	011b      	lsls	r3, r3, #4
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	011b      	lsls	r3, r3, #4
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	621a      	str	r2, [r3, #32]
}
 800b808:	bf00      	nop
 800b80a:	371c      	adds	r7, #28
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr
 800b814:	40012c00 	.word	0x40012c00
 800b818:	40013400 	.word	0x40013400
 800b81c:	40015000 	.word	0x40015000
 800b820:	40014000 	.word	0x40014000
 800b824:	40014400 	.word	0x40014400
 800b828:	40014800 	.word	0x40014800

0800b82c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b087      	sub	sp, #28
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a1b      	ldr	r3, [r3, #32]
 800b83a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	69db      	ldr	r3, [r3, #28]
 800b852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b85a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	021b      	lsls	r3, r3, #8
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	4313      	orrs	r3, r2
 800b872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b87a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	031b      	lsls	r3, r3, #12
 800b882:	697a      	ldr	r2, [r7, #20]
 800b884:	4313      	orrs	r3, r2
 800b886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4a2c      	ldr	r2, [pc, #176]	@ (800b93c <TIM_OC4_SetConfig+0x110>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d007      	beq.n	800b8a0 <TIM_OC4_SetConfig+0x74>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	4a2b      	ldr	r2, [pc, #172]	@ (800b940 <TIM_OC4_SetConfig+0x114>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d003      	beq.n	800b8a0 <TIM_OC4_SetConfig+0x74>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a2a      	ldr	r2, [pc, #168]	@ (800b944 <TIM_OC4_SetConfig+0x118>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d10d      	bne.n	800b8bc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	68db      	ldr	r3, [r3, #12]
 800b8ac:	031b      	lsls	r3, r3, #12
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	4a1f      	ldr	r2, [pc, #124]	@ (800b93c <TIM_OC4_SetConfig+0x110>)
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d013      	beq.n	800b8ec <TIM_OC4_SetConfig+0xc0>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b940 <TIM_OC4_SetConfig+0x114>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d00f      	beq.n	800b8ec <TIM_OC4_SetConfig+0xc0>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b948 <TIM_OC4_SetConfig+0x11c>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d00b      	beq.n	800b8ec <TIM_OC4_SetConfig+0xc0>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a1d      	ldr	r2, [pc, #116]	@ (800b94c <TIM_OC4_SetConfig+0x120>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d007      	beq.n	800b8ec <TIM_OC4_SetConfig+0xc0>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a1c      	ldr	r2, [pc, #112]	@ (800b950 <TIM_OC4_SetConfig+0x124>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d003      	beq.n	800b8ec <TIM_OC4_SetConfig+0xc0>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4a17      	ldr	r2, [pc, #92]	@ (800b944 <TIM_OC4_SetConfig+0x118>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d113      	bne.n	800b914 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	019b      	lsls	r3, r3, #6
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	4313      	orrs	r3, r2
 800b906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	699b      	ldr	r3, [r3, #24]
 800b90c:	019b      	lsls	r3, r3, #6
 800b90e:	693a      	ldr	r2, [r7, #16]
 800b910:	4313      	orrs	r3, r2
 800b912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	68fa      	ldr	r2, [r7, #12]
 800b91e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	621a      	str	r2, [r3, #32]
}
 800b92e:	bf00      	nop
 800b930:	371c      	adds	r7, #28
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr
 800b93a:	bf00      	nop
 800b93c:	40012c00 	.word	0x40012c00
 800b940:	40013400 	.word	0x40013400
 800b944:	40015000 	.word	0x40015000
 800b948:	40014000 	.word	0x40014000
 800b94c:	40014400 	.word	0x40014400
 800b950:	40014800 	.word	0x40014800

0800b954 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b954:	b480      	push	{r7}
 800b956:	b087      	sub	sp, #28
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a1b      	ldr	r3, [r3, #32]
 800b962:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	4313      	orrs	r3, r2
 800b990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b998:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	041b      	lsls	r3, r3, #16
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a19      	ldr	r2, [pc, #100]	@ (800ba10 <TIM_OC5_SetConfig+0xbc>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d013      	beq.n	800b9d6 <TIM_OC5_SetConfig+0x82>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a18      	ldr	r2, [pc, #96]	@ (800ba14 <TIM_OC5_SetConfig+0xc0>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d00f      	beq.n	800b9d6 <TIM_OC5_SetConfig+0x82>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	4a17      	ldr	r2, [pc, #92]	@ (800ba18 <TIM_OC5_SetConfig+0xc4>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d00b      	beq.n	800b9d6 <TIM_OC5_SetConfig+0x82>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a16      	ldr	r2, [pc, #88]	@ (800ba1c <TIM_OC5_SetConfig+0xc8>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d007      	beq.n	800b9d6 <TIM_OC5_SetConfig+0x82>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a15      	ldr	r2, [pc, #84]	@ (800ba20 <TIM_OC5_SetConfig+0xcc>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d003      	beq.n	800b9d6 <TIM_OC5_SetConfig+0x82>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a14      	ldr	r2, [pc, #80]	@ (800ba24 <TIM_OC5_SetConfig+0xd0>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d109      	bne.n	800b9ea <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	695b      	ldr	r3, [r3, #20]
 800b9e2:	021b      	lsls	r3, r3, #8
 800b9e4:	697a      	ldr	r2, [r7, #20]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	697a      	ldr	r2, [r7, #20]
 800b9ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68fa      	ldr	r2, [r7, #12]
 800b9f4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	621a      	str	r2, [r3, #32]
}
 800ba04:	bf00      	nop
 800ba06:	371c      	adds	r7, #28
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	40012c00 	.word	0x40012c00
 800ba14:	40013400 	.word	0x40013400
 800ba18:	40014000 	.word	0x40014000
 800ba1c:	40014400 	.word	0x40014400
 800ba20:	40014800 	.word	0x40014800
 800ba24:	40015000 	.word	0x40015000

0800ba28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b087      	sub	sp, #28
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	021b      	lsls	r3, r3, #8
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	051b      	lsls	r3, r3, #20
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	4313      	orrs	r3, r2
 800ba7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a1a      	ldr	r2, [pc, #104]	@ (800bae8 <TIM_OC6_SetConfig+0xc0>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d013      	beq.n	800baac <TIM_OC6_SetConfig+0x84>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4a19      	ldr	r2, [pc, #100]	@ (800baec <TIM_OC6_SetConfig+0xc4>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d00f      	beq.n	800baac <TIM_OC6_SetConfig+0x84>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	4a18      	ldr	r2, [pc, #96]	@ (800baf0 <TIM_OC6_SetConfig+0xc8>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d00b      	beq.n	800baac <TIM_OC6_SetConfig+0x84>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a17      	ldr	r2, [pc, #92]	@ (800baf4 <TIM_OC6_SetConfig+0xcc>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d007      	beq.n	800baac <TIM_OC6_SetConfig+0x84>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	4a16      	ldr	r2, [pc, #88]	@ (800baf8 <TIM_OC6_SetConfig+0xd0>)
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d003      	beq.n	800baac <TIM_OC6_SetConfig+0x84>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a15      	ldr	r2, [pc, #84]	@ (800bafc <TIM_OC6_SetConfig+0xd4>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d109      	bne.n	800bac0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bab2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	695b      	ldr	r3, [r3, #20]
 800bab8:	029b      	lsls	r3, r3, #10
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	4313      	orrs	r3, r2
 800babe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	68fa      	ldr	r2, [r7, #12]
 800baca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	685a      	ldr	r2, [r3, #4]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	621a      	str	r2, [r3, #32]
}
 800bada:	bf00      	nop
 800badc:	371c      	adds	r7, #28
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	40012c00 	.word	0x40012c00
 800baec:	40013400 	.word	0x40013400
 800baf0:	40014000 	.word	0x40014000
 800baf4:	40014400 	.word	0x40014400
 800baf8:	40014800 	.word	0x40014800
 800bafc:	40015000 	.word	0x40015000

0800bb00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b087      	sub	sp, #28
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6a1b      	ldr	r3, [r3, #32]
 800bb10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6a1b      	ldr	r3, [r3, #32]
 800bb16:	f023 0201 	bic.w	r2, r3, #1
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	011b      	lsls	r3, r3, #4
 800bb30:	693a      	ldr	r2, [r7, #16]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f023 030a 	bic.w	r3, r3, #10
 800bb3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	4313      	orrs	r3, r2
 800bb44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	693a      	ldr	r2, [r7, #16]
 800bb4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	621a      	str	r2, [r3, #32]
}
 800bb52:	bf00      	nop
 800bb54:	371c      	adds	r7, #28
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb5e:	b480      	push	{r7}
 800bb60:	b087      	sub	sp, #28
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	60b9      	str	r1, [r7, #8]
 800bb68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	f023 0210 	bic.w	r2, r3, #16
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	031b      	lsls	r3, r3, #12
 800bb8e:	693a      	ldr	r2, [r7, #16]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bb9a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	697a      	ldr	r2, [r7, #20]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	621a      	str	r2, [r3, #32]
}
 800bbb2:	bf00      	nop
 800bbb4:	371c      	adds	r7, #28
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	689b      	ldr	r3, [r3, #8]
 800bbcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bbd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	f043 0307 	orr.w	r3, r3, #7
 800bbe4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	609a      	str	r2, [r3, #8]
}
 800bbec:	bf00      	nop
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	021a      	lsls	r2, r3, #8
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	609a      	str	r2, [r3, #8]
}
 800bc2c:	bf00      	nop
 800bc2e:	371c      	adds	r7, #28
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b087      	sub	sp, #28
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	60b9      	str	r1, [r7, #8]
 800bc42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	f003 031f 	and.w	r3, r3, #31
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6a1a      	ldr	r2, [r3, #32]
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	43db      	mvns	r3, r3
 800bc5a:	401a      	ands	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a1a      	ldr	r2, [r3, #32]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f003 031f 	and.w	r3, r3, #31
 800bc6a:	6879      	ldr	r1, [r7, #4]
 800bc6c:	fa01 f303 	lsl.w	r3, r1, r3
 800bc70:	431a      	orrs	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	621a      	str	r2, [r3, #32]
}
 800bc76:	bf00      	nop
 800bc78:	371c      	adds	r7, #28
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
	...

0800bc84 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a26      	ldr	r2, [pc, #152]	@ (800bd28 <TIM_ResetCallback+0xa4>)
 800bc90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a25      	ldr	r2, [pc, #148]	@ (800bd2c <TIM_ResetCallback+0xa8>)
 800bc98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a24      	ldr	r2, [pc, #144]	@ (800bd30 <TIM_ResetCallback+0xac>)
 800bca0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	4a23      	ldr	r2, [pc, #140]	@ (800bd34 <TIM_ResetCallback+0xb0>)
 800bca8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a22      	ldr	r2, [pc, #136]	@ (800bd38 <TIM_ResetCallback+0xb4>)
 800bcb0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a21      	ldr	r2, [pc, #132]	@ (800bd3c <TIM_ResetCallback+0xb8>)
 800bcb8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a20      	ldr	r2, [pc, #128]	@ (800bd40 <TIM_ResetCallback+0xbc>)
 800bcc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a1f      	ldr	r2, [pc, #124]	@ (800bd44 <TIM_ResetCallback+0xc0>)
 800bcc8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a1e      	ldr	r2, [pc, #120]	@ (800bd48 <TIM_ResetCallback+0xc4>)
 800bcd0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a1d      	ldr	r2, [pc, #116]	@ (800bd4c <TIM_ResetCallback+0xc8>)
 800bcd8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a1c      	ldr	r2, [pc, #112]	@ (800bd50 <TIM_ResetCallback+0xcc>)
 800bce0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	4a1b      	ldr	r2, [pc, #108]	@ (800bd54 <TIM_ResetCallback+0xd0>)
 800bce8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a1a      	ldr	r2, [pc, #104]	@ (800bd58 <TIM_ResetCallback+0xd4>)
 800bcf0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a19      	ldr	r2, [pc, #100]	@ (800bd5c <TIM_ResetCallback+0xd8>)
 800bcf8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a18      	ldr	r2, [pc, #96]	@ (800bd60 <TIM_ResetCallback+0xdc>)
 800bd00:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a17      	ldr	r2, [pc, #92]	@ (800bd64 <TIM_ResetCallback+0xe0>)
 800bd08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a16      	ldr	r2, [pc, #88]	@ (800bd68 <TIM_ResetCallback+0xe4>)
 800bd10:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a15      	ldr	r2, [pc, #84]	@ (800bd6c <TIM_ResetCallback+0xe8>)
 800bd18:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr
 800bd28:	08004cb1 	.word	0x08004cb1
 800bd2c:	0800afd1 	.word	0x0800afd1
 800bd30:	0800b049 	.word	0x0800b049
 800bd34:	0800b05d 	.word	0x0800b05d
 800bd38:	0800aff9 	.word	0x0800aff9
 800bd3c:	0800b00d 	.word	0x0800b00d
 800bd40:	0800afe5 	.word	0x0800afe5
 800bd44:	0800b021 	.word	0x0800b021
 800bd48:	0800b035 	.word	0x0800b035
 800bd4c:	0800b071 	.word	0x0800b071
 800bd50:	0800bfc5 	.word	0x0800bfc5
 800bd54:	0800bfd9 	.word	0x0800bfd9
 800bd58:	0800bfed 	.word	0x0800bfed
 800bd5c:	0800c001 	.word	0x0800c001
 800bd60:	0800c015 	.word	0x0800c015
 800bd64:	0800c029 	.word	0x0800c029
 800bd68:	0800c03d 	.word	0x0800c03d
 800bd6c:	0800c051 	.word	0x0800c051

0800bd70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d101      	bne.n	800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd84:	2302      	movs	r3, #2
 800bd86:	e074      	b.n	800be72 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2202      	movs	r2, #2
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a34      	ldr	r2, [pc, #208]	@ (800be80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d009      	beq.n	800bdc6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a33      	ldr	r2, [pc, #204]	@ (800be84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d004      	beq.n	800bdc6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a31      	ldr	r2, [pc, #196]	@ (800be88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d108      	bne.n	800bdd8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bdcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bdde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bde2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a21      	ldr	r2, [pc, #132]	@ (800be80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d022      	beq.n	800be46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be08:	d01d      	beq.n	800be46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a1f      	ldr	r2, [pc, #124]	@ (800be8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d018      	beq.n	800be46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a1d      	ldr	r2, [pc, #116]	@ (800be90 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d013      	beq.n	800be46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a1c      	ldr	r2, [pc, #112]	@ (800be94 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d00e      	beq.n	800be46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a15      	ldr	r2, [pc, #84]	@ (800be84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d009      	beq.n	800be46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a18      	ldr	r2, [pc, #96]	@ (800be98 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d004      	beq.n	800be46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a11      	ldr	r2, [pc, #68]	@ (800be88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d10c      	bne.n	800be60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800be4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	4313      	orrs	r3, r2
 800be56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2201      	movs	r2, #1
 800be64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3714      	adds	r7, #20
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	40012c00 	.word	0x40012c00
 800be84:	40013400 	.word	0x40013400
 800be88:	40015000 	.word	0x40015000
 800be8c:	40000400 	.word	0x40000400
 800be90:	40000800 	.word	0x40000800
 800be94:	40000c00 	.word	0x40000c00
 800be98:	40014000 	.word	0x40014000

0800be9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d101      	bne.n	800beb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800beb4:	2302      	movs	r3, #2
 800beb6:	e078      	b.n	800bfaa <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2201      	movs	r2, #1
 800bebc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	4313      	orrs	r3, r2
 800becc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	4313      	orrs	r3, r2
 800beda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	695b      	ldr	r3, [r3, #20]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	699b      	ldr	r3, [r3, #24]
 800bf2c:	041b      	lsls	r3, r3, #16
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	69db      	ldr	r3, [r3, #28]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a1c      	ldr	r2, [pc, #112]	@ (800bfb8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d009      	beq.n	800bf5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a1b      	ldr	r2, [pc, #108]	@ (800bfbc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d004      	beq.n	800bf5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a19      	ldr	r2, [pc, #100]	@ (800bfc0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d11c      	bne.n	800bf98 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf68:	051b      	lsls	r3, r3, #20
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	6a1b      	ldr	r3, [r3, #32]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf86:	4313      	orrs	r3, r2
 800bf88:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf94:	4313      	orrs	r3, r2
 800bf96:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	40012c00 	.word	0x40012c00
 800bfbc:	40013400 	.word	0x40013400
 800bfc0:	40015000 	.word	0x40015000

0800bfc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c008:	bf00      	nop
 800c00a:	370c      	adds	r7, #12
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c01c:	bf00      	nop
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c030:	bf00      	nop
 800c032:	370c      	adds	r7, #12
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e050      	b.n	800c118 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d114      	bne.n	800c0aa <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 fe37 	bl	800ccfc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c094:	2b00      	cmp	r3, #0
 800c096:	d103      	bne.n	800c0a0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a21      	ldr	r2, [pc, #132]	@ (800c120 <HAL_UART_Init+0xbc>)
 800c09c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2224      	movs	r2, #36	@ 0x24
 800c0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681a      	ldr	r2, [r3, #0]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f022 0201 	bic.w	r2, r2, #1
 800c0c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f001 f964 	bl	800d398 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fe65 	bl	800cda0 <UART_SetConfig>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d101      	bne.n	800c0e0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	e01b      	b.n	800c118 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	685a      	ldr	r2, [r3, #4]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c0ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689a      	ldr	r2, [r3, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c0fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f042 0201 	orr.w	r2, r2, #1
 800c10e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 f9e3 	bl	800d4dc <UART_CheckIdleState>
 800c116:	4603      	mov	r3, r0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}
 800c120:	0800602d 	.word	0x0800602d

0800c124 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c124:	b480      	push	{r7}
 800c126:	b087      	sub	sp, #28
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	460b      	mov	r3, r1
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c132:	2300      	movs	r3, #0
 800c134:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d109      	bne.n	800c150 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c142:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e09c      	b.n	800c28a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c156:	2b20      	cmp	r3, #32
 800c158:	d16c      	bne.n	800c234 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c15a:	7afb      	ldrb	r3, [r7, #11]
 800c15c:	2b0c      	cmp	r3, #12
 800c15e:	d85e      	bhi.n	800c21e <HAL_UART_RegisterCallback+0xfa>
 800c160:	a201      	add	r2, pc, #4	@ (adr r2, 800c168 <HAL_UART_RegisterCallback+0x44>)
 800c162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c166:	bf00      	nop
 800c168:	0800c19d 	.word	0x0800c19d
 800c16c:	0800c1a7 	.word	0x0800c1a7
 800c170:	0800c1b1 	.word	0x0800c1b1
 800c174:	0800c1bb 	.word	0x0800c1bb
 800c178:	0800c1c5 	.word	0x0800c1c5
 800c17c:	0800c1cf 	.word	0x0800c1cf
 800c180:	0800c1d9 	.word	0x0800c1d9
 800c184:	0800c1e3 	.word	0x0800c1e3
 800c188:	0800c1ed 	.word	0x0800c1ed
 800c18c:	0800c1f7 	.word	0x0800c1f7
 800c190:	0800c201 	.word	0x0800c201
 800c194:	0800c20b 	.word	0x0800c20b
 800c198:	0800c215 	.word	0x0800c215
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c1a4:	e070      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c1ae:	e06b      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c1b8:	e066      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c1c2:	e061      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c1cc:	e05c      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c1d6:	e057      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c1e0:	e052      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c1ea:	e04d      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c1f4:	e048      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c1fe:	e043      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c208:	e03e      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c212:	e039      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c21c:	e034      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c224:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c22e:	2301      	movs	r3, #1
 800c230:	75fb      	strb	r3, [r7, #23]
        break;
 800c232:	e029      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d11a      	bne.n	800c274 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c23e:	7afb      	ldrb	r3, [r7, #11]
 800c240:	2b0b      	cmp	r3, #11
 800c242:	d002      	beq.n	800c24a <HAL_UART_RegisterCallback+0x126>
 800c244:	2b0c      	cmp	r3, #12
 800c246:	d005      	beq.n	800c254 <HAL_UART_RegisterCallback+0x130>
 800c248:	e009      	b.n	800c25e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c252:	e019      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c25c:	e014      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c264:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	75fb      	strb	r3, [r7, #23]
        break;
 800c272:	e009      	b.n	800c288 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c27a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c288:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	371c      	adds	r7, #28
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop

0800c298 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08a      	sub	sp, #40	@ 0x28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2ac:	2b20      	cmp	r3, #32
 800c2ae:	d137      	bne.n	800c320 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <HAL_UART_Receive_IT+0x24>
 800c2b6:	88fb      	ldrh	r3, [r7, #6]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d101      	bne.n	800c2c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	e030      	b.n	800c322 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a18      	ldr	r2, [pc, #96]	@ (800c32c <HAL_UART_Receive_IT+0x94>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d01f      	beq.n	800c310 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d018      	beq.n	800c310 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	e853 3f00 	ldrex	r3, [r3]
 800c2ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c2f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	461a      	mov	r2, r3
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	623b      	str	r3, [r7, #32]
 800c2fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c300:	69f9      	ldr	r1, [r7, #28]
 800c302:	6a3a      	ldr	r2, [r7, #32]
 800c304:	e841 2300 	strex	r3, r2, [r1]
 800c308:	61bb      	str	r3, [r7, #24]
   return(result);
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e6      	bne.n	800c2de <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c310:	88fb      	ldrh	r3, [r7, #6]
 800c312:	461a      	mov	r2, r3
 800c314:	68b9      	ldr	r1, [r7, #8]
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f001 f9f8 	bl	800d70c <UART_Start_Receive_IT>
 800c31c:	4603      	mov	r3, r0
 800c31e:	e000      	b.n	800c322 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c320:	2302      	movs	r3, #2
  }
}
 800c322:	4618      	mov	r0, r3
 800c324:	3728      	adds	r7, #40	@ 0x28
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	40008000 	.word	0x40008000

0800c330 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b08a      	sub	sp, #40	@ 0x28
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	4613      	mov	r3, r2
 800c33c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c344:	2b20      	cmp	r3, #32
 800c346:	d167      	bne.n	800c418 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d002      	beq.n	800c354 <HAL_UART_Transmit_DMA+0x24>
 800c34e:	88fb      	ldrh	r3, [r7, #6]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d101      	bne.n	800c358 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	e060      	b.n	800c41a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	88fa      	ldrh	r2, [r7, #6]
 800c362:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	88fa      	ldrh	r2, [r7, #6]
 800c36a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2200      	movs	r2, #0
 800c372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2221      	movs	r2, #33	@ 0x21
 800c37a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d028      	beq.n	800c3d8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c38a:	4a26      	ldr	r2, [pc, #152]	@ (800c424 <HAL_UART_Transmit_DMA+0xf4>)
 800c38c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c392:	4a25      	ldr	r2, [pc, #148]	@ (800c428 <HAL_UART_Transmit_DMA+0xf8>)
 800c394:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c39a:	4a24      	ldr	r2, [pc, #144]	@ (800c42c <HAL_UART_Transmit_DMA+0xfc>)
 800c39c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	3328      	adds	r3, #40	@ 0x28
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	f7fb fbd3 	bl	8007b64 <HAL_DMA_Start_IT>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d009      	beq.n	800c3d8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2210      	movs	r2, #16
 800c3c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2220      	movs	r2, #32
 800c3d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e020      	b.n	800c41a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2240      	movs	r2, #64	@ 0x40
 800c3de:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	3308      	adds	r3, #8
 800c3e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	3308      	adds	r3, #8
 800c3fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c400:	623a      	str	r2, [r7, #32]
 800c402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	69f9      	ldr	r1, [r7, #28]
 800c406:	6a3a      	ldr	r2, [r7, #32]
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e5      	bne.n	800c3e0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	e000      	b.n	800c41a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c418:	2302      	movs	r3, #2
  }
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3728      	adds	r7, #40	@ 0x28
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	0800da9f 	.word	0x0800da9f
 800c428:	0800db3d 	.word	0x0800db3d
 800c42c:	0800db5d 	.word	0x0800db5d

0800c430 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b09a      	sub	sp, #104	@ 0x68
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c43e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c440:	e853 3f00 	ldrex	r3, [r3]
 800c444:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c448:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c44c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	461a      	mov	r2, r3
 800c454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c456:	657b      	str	r3, [r7, #84]	@ 0x54
 800c458:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c45a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c45c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c45e:	e841 2300 	strex	r3, r2, [r1]
 800c462:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1e6      	bne.n	800c438 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	3308      	adds	r3, #8
 800c470:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c474:	e853 3f00 	ldrex	r3, [r3]
 800c478:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c47c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c480:	f023 0301 	bic.w	r3, r3, #1
 800c484:	663b      	str	r3, [r7, #96]	@ 0x60
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	3308      	adds	r3, #8
 800c48c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c48e:	643a      	str	r2, [r7, #64]	@ 0x40
 800c490:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c492:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1e3      	bne.n	800c46a <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d118      	bne.n	800c4dc <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4b0:	6a3b      	ldr	r3, [r7, #32]
 800c4b2:	e853 3f00 	ldrex	r3, [r3]
 800c4b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	f023 0310 	bic.w	r3, r3, #16
 800c4be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4ca:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4d0:	e841 2300 	strex	r3, r2, [r1]
 800c4d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1e6      	bne.n	800c4aa <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e6:	2b40      	cmp	r3, #64	@ 0x40
 800c4e8:	d13b      	bne.n	800c562 <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	e853 3f00 	ldrex	r3, [r3]
 800c4f8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c500:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	3308      	adds	r3, #8
 800c508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c50a:	61ba      	str	r2, [r7, #24]
 800c50c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c50e:	6979      	ldr	r1, [r7, #20]
 800c510:	69ba      	ldr	r2, [r7, #24]
 800c512:	e841 2300 	strex	r3, r2, [r1]
 800c516:	613b      	str	r3, [r7, #16]
   return(result);
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d1e5      	bne.n	800c4ea <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c524:	2b00      	cmp	r3, #0
 800c526:	d01c      	beq.n	800c562 <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c52e:	2200      	movs	r2, #0
 800c530:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c538:	4618      	mov	r0, r3
 800c53a:	f7fb fb8e 	bl	8007c5a <HAL_DMA_Abort>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d00e      	beq.n	800c562 <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fb fcf4 	bl	8007f38 <HAL_DMA_GetError>
 800c550:	4603      	mov	r3, r0
 800c552:	2b20      	cmp	r3, #32
 800c554:	d105      	bne.n	800c562 <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2210      	movs	r2, #16
 800c55a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c55e:	2303      	movs	r3, #3
 800c560:	e017      	b.n	800c592 <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2200      	movs	r2, #0
 800c566:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	220f      	movs	r2, #15
 800c570:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	699a      	ldr	r2, [r3, #24]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f042 0208 	orr.w	r2, r2, #8
 800c580:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2220      	movs	r2, #32
 800c586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3768      	adds	r7, #104	@ 0x68
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b0ba      	sub	sp, #232	@ 0xe8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c5c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c5c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c5ca:	4013      	ands	r3, r2
 800c5cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c5d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d11b      	bne.n	800c610 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5dc:	f003 0320 	and.w	r3, r3, #32
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d015      	beq.n	800c610 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5e8:	f003 0320 	and.w	r3, r3, #32
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d105      	bne.n	800c5fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c5f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d009      	beq.n	800c610 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c600:	2b00      	cmp	r3, #0
 800c602:	f000 8312 	beq.w	800cc2a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	4798      	blx	r3
      }
      return;
 800c60e:	e30c      	b.n	800cc2a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c614:	2b00      	cmp	r3, #0
 800c616:	f000 8129 	beq.w	800c86c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c61a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c61e:	4b90      	ldr	r3, [pc, #576]	@ (800c860 <HAL_UART_IRQHandler+0x2c4>)
 800c620:	4013      	ands	r3, r2
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c626:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c62a:	4b8e      	ldr	r3, [pc, #568]	@ (800c864 <HAL_UART_IRQHandler+0x2c8>)
 800c62c:	4013      	ands	r3, r2
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 811c 	beq.w	800c86c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c638:	f003 0301 	and.w	r3, r3, #1
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d011      	beq.n	800c664 <HAL_UART_IRQHandler+0xc8>
 800c640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2201      	movs	r2, #1
 800c652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c65a:	f043 0201 	orr.w	r2, r3, #1
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c668:	f003 0302 	and.w	r3, r3, #2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d011      	beq.n	800c694 <HAL_UART_IRQHandler+0xf8>
 800c670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c674:	f003 0301 	and.w	r3, r3, #1
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00b      	beq.n	800c694 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2202      	movs	r2, #2
 800c682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c68a:	f043 0204 	orr.w	r2, r3, #4
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c698:	f003 0304 	and.w	r3, r3, #4
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d011      	beq.n	800c6c4 <HAL_UART_IRQHandler+0x128>
 800c6a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6a4:	f003 0301 	and.w	r3, r3, #1
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d00b      	beq.n	800c6c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2204      	movs	r2, #4
 800c6b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6ba:	f043 0202 	orr.w	r2, r3, #2
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c6c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6c8:	f003 0308 	and.w	r3, r3, #8
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d017      	beq.n	800c700 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6d4:	f003 0320 	and.w	r3, r3, #32
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d105      	bne.n	800c6e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c6dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c6e0:	4b5f      	ldr	r3, [pc, #380]	@ (800c860 <HAL_UART_IRQHandler+0x2c4>)
 800c6e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00b      	beq.n	800c700 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2208      	movs	r2, #8
 800c6ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6f6:	f043 0208 	orr.w	r2, r3, #8
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d012      	beq.n	800c732 <HAL_UART_IRQHandler+0x196>
 800c70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c710:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d00c      	beq.n	800c732 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c720:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c728:	f043 0220 	orr.w	r2, r3, #32
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 8278 	beq.w	800cc2e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c742:	f003 0320 	and.w	r3, r3, #32
 800c746:	2b00      	cmp	r3, #0
 800c748:	d013      	beq.n	800c772 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c74e:	f003 0320 	and.w	r3, r3, #32
 800c752:	2b00      	cmp	r3, #0
 800c754:	d105      	bne.n	800c762 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c75a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d007      	beq.n	800c772 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c766:	2b00      	cmp	r3, #0
 800c768:	d003      	beq.n	800c772 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c778:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c786:	2b40      	cmp	r3, #64	@ 0x40
 800c788:	d005      	beq.n	800c796 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c78a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c78e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c792:	2b00      	cmp	r3, #0
 800c794:	d058      	beq.n	800c848 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f001 f91b 	bl	800d9d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a6:	2b40      	cmp	r3, #64	@ 0x40
 800c7a8:	d148      	bne.n	800c83c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3308      	adds	r3, #8
 800c7b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7b8:	e853 3f00 	ldrex	r3, [r3]
 800c7bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c7c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	3308      	adds	r3, #8
 800c7d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c7d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c7da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c7e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c7e6:	e841 2300 	strex	r3, r2, [r1]
 800c7ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c7ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1d9      	bne.n	800c7aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d017      	beq.n	800c830 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c806:	4a18      	ldr	r2, [pc, #96]	@ (800c868 <HAL_UART_IRQHandler+0x2cc>)
 800c808:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c810:	4618      	mov	r0, r3
 800c812:	f7fb fa7b 	bl	8007d0c <HAL_DMA_Abort_IT>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d01f      	beq.n	800c85c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c82a:	4610      	mov	r0, r2
 800c82c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c82e:	e015      	b.n	800c85c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c83a:	e00f      	b.n	800c85c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c846:	e009      	b.n	800c85c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c85a:	e1e8      	b.n	800cc2e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c85c:	bf00      	nop
    return;
 800c85e:	e1e6      	b.n	800cc2e <HAL_UART_IRQHandler+0x692>
 800c860:	10000001 	.word	0x10000001
 800c864:	04000120 	.word	0x04000120
 800c868:	0800dbe1 	.word	0x0800dbe1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c870:	2b01      	cmp	r3, #1
 800c872:	f040 8176 	bne.w	800cb62 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c87a:	f003 0310 	and.w	r3, r3, #16
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f000 816f 	beq.w	800cb62 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c888:	f003 0310 	and.w	r3, r3, #16
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f000 8168 	beq.w	800cb62 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2210      	movs	r2, #16
 800c898:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a4:	2b40      	cmp	r3, #64	@ 0x40
 800c8a6:	f040 80dc 	bne.w	800ca62 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c8b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 80b1 	beq.w	800ca24 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c8c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	f080 80a9 	bcs.w	800ca24 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c8d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0320 	and.w	r3, r3, #32
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	f040 8087 	bne.w	800c9fe <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c8fc:	e853 3f00 	ldrex	r3, [r3]
 800c900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c904:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c90c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	461a      	mov	r2, r3
 800c916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c91a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c91e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c922:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c926:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c92a:	e841 2300 	strex	r3, r2, [r1]
 800c92e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c932:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1da      	bne.n	800c8f0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	3308      	adds	r3, #8
 800c940:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c944:	e853 3f00 	ldrex	r3, [r3]
 800c948:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c94a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c94c:	f023 0301 	bic.w	r3, r3, #1
 800c950:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	3308      	adds	r3, #8
 800c95a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c95e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c962:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c964:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c966:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c96a:	e841 2300 	strex	r3, r2, [r1]
 800c96e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1e1      	bne.n	800c93a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3308      	adds	r3, #8
 800c97c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c98c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3308      	adds	r3, #8
 800c996:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c99a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c99c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c9a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c9a2:	e841 2300 	strex	r3, r2, [r1]
 800c9a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c9a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e3      	bne.n	800c976 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2220      	movs	r2, #32
 800c9b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9c4:	e853 3f00 	ldrex	r3, [r3]
 800c9c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c9ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9cc:	f023 0310 	bic.w	r3, r3, #16
 800c9d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	461a      	mov	r2, r3
 800c9da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9de:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9e0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c9e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c9e6:	e841 2300 	strex	r3, r2, [r1]
 800c9ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c9ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1e4      	bne.n	800c9bc <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7fb f92e 	bl	8007c5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2202      	movs	r2, #2
 800ca02:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800ca16:	b292      	uxth	r2, r2
 800ca18:	1a8a      	subs	r2, r1, r2
 800ca1a:	b292      	uxth	r2, r2
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ca22:	e106      	b.n	800cc32 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ca2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	f040 80ff 	bne.w	800cc32 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f003 0320 	and.w	r3, r3, #32
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	f040 80f5 	bne.w	800cc32 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2202      	movs	r2, #2
 800ca4c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ca5a:	4611      	mov	r1, r2
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	4798      	blx	r3
      return;
 800ca60:	e0e7      	b.n	800cc32 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 80d9 	beq.w	800cc36 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800ca84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f000 80d4 	beq.w	800cc36 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca96:	e853 3f00 	ldrex	r3, [r3]
 800ca9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ca9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800caa2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cab0:	647b      	str	r3, [r7, #68]	@ 0x44
 800cab2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cab8:	e841 2300 	strex	r3, r2, [r1]
 800cabc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cabe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1e4      	bne.n	800ca8e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	3308      	adds	r3, #8
 800caca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cace:	e853 3f00 	ldrex	r3, [r3]
 800cad2:	623b      	str	r3, [r7, #32]
   return(result);
 800cad4:	6a3b      	ldr	r3, [r7, #32]
 800cad6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cada:	f023 0301 	bic.w	r3, r3, #1
 800cade:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3308      	adds	r3, #8
 800cae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800caec:	633a      	str	r2, [r7, #48]	@ 0x30
 800caee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800caf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e1      	bne.n	800cac4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2220      	movs	r2, #32
 800cb04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	e853 3f00 	ldrex	r3, [r3]
 800cb20:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f023 0310 	bic.w	r3, r3, #16
 800cb28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	461a      	mov	r2, r3
 800cb32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cb36:	61fb      	str	r3, [r7, #28]
 800cb38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb3a:	69b9      	ldr	r1, [r7, #24]
 800cb3c:	69fa      	ldr	r2, [r7, #28]
 800cb3e:	e841 2300 	strex	r3, r2, [r1]
 800cb42:	617b      	str	r3, [r7, #20]
   return(result);
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d1e4      	bne.n	800cb14 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cb56:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800cb5a:	4611      	mov	r1, r2
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb60:	e069      	b.n	800cc36 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cb62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d010      	beq.n	800cb90 <HAL_UART_IRQHandler+0x5f4>
 800cb6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d00a      	beq.n	800cb90 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800cb82:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cb8e:	e055      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cb90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d014      	beq.n	800cbc6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cb9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d105      	bne.n	800cbb4 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cba8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d008      	beq.n	800cbc6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d03e      	beq.n	800cc3a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	4798      	blx	r3
    }
    return;
 800cbc4:	e039      	b.n	800cc3a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d009      	beq.n	800cbe6 <HAL_UART_IRQHandler+0x64a>
 800cbd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d003      	beq.n	800cbe6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f001 f812 	bl	800dc08 <UART_EndTransmit_IT>
    return;
 800cbe4:	e02a      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cbe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00b      	beq.n	800cc0a <HAL_UART_IRQHandler+0x66e>
 800cbf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbf6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d005      	beq.n	800cc0a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc08:	e018      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cc0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d012      	beq.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
 800cc16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	da0e      	bge.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cc28:	e008      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cc2a:	bf00      	nop
 800cc2c:	e006      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
    return;
 800cc2e:	bf00      	nop
 800cc30:	e004      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cc32:	bf00      	nop
 800cc34:	e002      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
      return;
 800cc36:	bf00      	nop
 800cc38:	e000      	b.n	800cc3c <HAL_UART_IRQHandler+0x6a0>
    return;
 800cc3a:	bf00      	nop
  }
}
 800cc3c:	37e8      	adds	r7, #232	@ 0xe8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop

0800cc44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc60:	bf00      	nop
 800cc62:	370c      	adds	r7, #12
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800cc74:	bf00      	nop
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	460b      	mov	r3, r1
 800ccee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccf0:	bf00      	nop
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b083      	sub	sp, #12
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a1a      	ldr	r2, [pc, #104]	@ (800cd70 <UART_InitCallbacksToDefault+0x74>)
 800cd08:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a19      	ldr	r2, [pc, #100]	@ (800cd74 <UART_InitCallbacksToDefault+0x78>)
 800cd10:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a18      	ldr	r2, [pc, #96]	@ (800cd78 <UART_InitCallbacksToDefault+0x7c>)
 800cd18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a17      	ldr	r2, [pc, #92]	@ (800cd7c <UART_InitCallbacksToDefault+0x80>)
 800cd20:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	4a16      	ldr	r2, [pc, #88]	@ (800cd80 <UART_InitCallbacksToDefault+0x84>)
 800cd28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	4a15      	ldr	r2, [pc, #84]	@ (800cd84 <UART_InitCallbacksToDefault+0x88>)
 800cd30:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a14      	ldr	r2, [pc, #80]	@ (800cd88 <UART_InitCallbacksToDefault+0x8c>)
 800cd38:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	4a13      	ldr	r2, [pc, #76]	@ (800cd8c <UART_InitCallbacksToDefault+0x90>)
 800cd40:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	4a12      	ldr	r2, [pc, #72]	@ (800cd90 <UART_InitCallbacksToDefault+0x94>)
 800cd48:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4a11      	ldr	r2, [pc, #68]	@ (800cd94 <UART_InitCallbacksToDefault+0x98>)
 800cd50:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	4a10      	ldr	r2, [pc, #64]	@ (800cd98 <UART_InitCallbacksToDefault+0x9c>)
 800cd58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a0f      	ldr	r2, [pc, #60]	@ (800cd9c <UART_InitCallbacksToDefault+0xa0>)
 800cd60:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr
 800cd70:	0800cc59 	.word	0x0800cc59
 800cd74:	0800cc45 	.word	0x0800cc45
 800cd78:	0800cc81 	.word	0x0800cc81
 800cd7c:	0800cc6d 	.word	0x0800cc6d
 800cd80:	0800cc95 	.word	0x0800cc95
 800cd84:	0800cca9 	.word	0x0800cca9
 800cd88:	0800ccbd 	.word	0x0800ccbd
 800cd8c:	0800ccd1 	.word	0x0800ccd1
 800cd90:	0800e6cd 	.word	0x0800e6cd
 800cd94:	0800e6e1 	.word	0x0800e6e1
 800cd98:	0800e6f5 	.word	0x0800e6f5
 800cd9c:	0800cce5 	.word	0x0800cce5

0800cda0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cda0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cda4:	b08c      	sub	sp, #48	@ 0x30
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdaa:	2300      	movs	r3, #0
 800cdac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	689a      	ldr	r2, [r3, #8]
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	431a      	orrs	r2, r3
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	695b      	ldr	r3, [r3, #20]
 800cdbe:	431a      	orrs	r2, r3
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	4313      	orrs	r3, r2
 800cdc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	4baa      	ldr	r3, [pc, #680]	@ (800d078 <UART_SetConfig+0x2d8>)
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	6812      	ldr	r2, [r2, #0]
 800cdd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cdd8:	430b      	orrs	r3, r1
 800cdda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	68da      	ldr	r2, [r3, #12]
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	430a      	orrs	r2, r1
 800cdf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a9f      	ldr	r2, [pc, #636]	@ (800d07c <UART_SetConfig+0x2dc>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d004      	beq.n	800ce0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	6a1b      	ldr	r3, [r3, #32]
 800ce06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ce16:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	6812      	ldr	r2, [r2, #0]
 800ce1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ce20:	430b      	orrs	r3, r1
 800ce22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2a:	f023 010f 	bic.w	r1, r3, #15
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a90      	ldr	r2, [pc, #576]	@ (800d080 <UART_SetConfig+0x2e0>)
 800ce40:	4293      	cmp	r3, r2
 800ce42:	d125      	bne.n	800ce90 <UART_SetConfig+0xf0>
 800ce44:	4b8f      	ldr	r3, [pc, #572]	@ (800d084 <UART_SetConfig+0x2e4>)
 800ce46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce4a:	f003 0303 	and.w	r3, r3, #3
 800ce4e:	2b03      	cmp	r3, #3
 800ce50:	d81a      	bhi.n	800ce88 <UART_SetConfig+0xe8>
 800ce52:	a201      	add	r2, pc, #4	@ (adr r2, 800ce58 <UART_SetConfig+0xb8>)
 800ce54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce58:	0800ce69 	.word	0x0800ce69
 800ce5c:	0800ce79 	.word	0x0800ce79
 800ce60:	0800ce71 	.word	0x0800ce71
 800ce64:	0800ce81 	.word	0x0800ce81
 800ce68:	2301      	movs	r3, #1
 800ce6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce6e:	e116      	b.n	800d09e <UART_SetConfig+0x2fe>
 800ce70:	2302      	movs	r3, #2
 800ce72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce76:	e112      	b.n	800d09e <UART_SetConfig+0x2fe>
 800ce78:	2304      	movs	r3, #4
 800ce7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce7e:	e10e      	b.n	800d09e <UART_SetConfig+0x2fe>
 800ce80:	2308      	movs	r3, #8
 800ce82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce86:	e10a      	b.n	800d09e <UART_SetConfig+0x2fe>
 800ce88:	2310      	movs	r3, #16
 800ce8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce8e:	e106      	b.n	800d09e <UART_SetConfig+0x2fe>
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a7c      	ldr	r2, [pc, #496]	@ (800d088 <UART_SetConfig+0x2e8>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d138      	bne.n	800cf0c <UART_SetConfig+0x16c>
 800ce9a:	4b7a      	ldr	r3, [pc, #488]	@ (800d084 <UART_SetConfig+0x2e4>)
 800ce9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cea0:	f003 030c 	and.w	r3, r3, #12
 800cea4:	2b0c      	cmp	r3, #12
 800cea6:	d82d      	bhi.n	800cf04 <UART_SetConfig+0x164>
 800cea8:	a201      	add	r2, pc, #4	@ (adr r2, 800ceb0 <UART_SetConfig+0x110>)
 800ceaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ceae:	bf00      	nop
 800ceb0:	0800cee5 	.word	0x0800cee5
 800ceb4:	0800cf05 	.word	0x0800cf05
 800ceb8:	0800cf05 	.word	0x0800cf05
 800cebc:	0800cf05 	.word	0x0800cf05
 800cec0:	0800cef5 	.word	0x0800cef5
 800cec4:	0800cf05 	.word	0x0800cf05
 800cec8:	0800cf05 	.word	0x0800cf05
 800cecc:	0800cf05 	.word	0x0800cf05
 800ced0:	0800ceed 	.word	0x0800ceed
 800ced4:	0800cf05 	.word	0x0800cf05
 800ced8:	0800cf05 	.word	0x0800cf05
 800cedc:	0800cf05 	.word	0x0800cf05
 800cee0:	0800cefd 	.word	0x0800cefd
 800cee4:	2300      	movs	r3, #0
 800cee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceea:	e0d8      	b.n	800d09e <UART_SetConfig+0x2fe>
 800ceec:	2302      	movs	r3, #2
 800ceee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cef2:	e0d4      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cef4:	2304      	movs	r3, #4
 800cef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cefa:	e0d0      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cefc:	2308      	movs	r3, #8
 800cefe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf02:	e0cc      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf04:	2310      	movs	r3, #16
 800cf06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf0a:	e0c8      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	4a5e      	ldr	r2, [pc, #376]	@ (800d08c <UART_SetConfig+0x2ec>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d125      	bne.n	800cf62 <UART_SetConfig+0x1c2>
 800cf16:	4b5b      	ldr	r3, [pc, #364]	@ (800d084 <UART_SetConfig+0x2e4>)
 800cf18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf1c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cf20:	2b30      	cmp	r3, #48	@ 0x30
 800cf22:	d016      	beq.n	800cf52 <UART_SetConfig+0x1b2>
 800cf24:	2b30      	cmp	r3, #48	@ 0x30
 800cf26:	d818      	bhi.n	800cf5a <UART_SetConfig+0x1ba>
 800cf28:	2b20      	cmp	r3, #32
 800cf2a:	d00a      	beq.n	800cf42 <UART_SetConfig+0x1a2>
 800cf2c:	2b20      	cmp	r3, #32
 800cf2e:	d814      	bhi.n	800cf5a <UART_SetConfig+0x1ba>
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <UART_SetConfig+0x19a>
 800cf34:	2b10      	cmp	r3, #16
 800cf36:	d008      	beq.n	800cf4a <UART_SetConfig+0x1aa>
 800cf38:	e00f      	b.n	800cf5a <UART_SetConfig+0x1ba>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf40:	e0ad      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf42:	2302      	movs	r3, #2
 800cf44:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf48:	e0a9      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf4a:	2304      	movs	r3, #4
 800cf4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf50:	e0a5      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf52:	2308      	movs	r3, #8
 800cf54:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf58:	e0a1      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf5a:	2310      	movs	r3, #16
 800cf5c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf60:	e09d      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a4a      	ldr	r2, [pc, #296]	@ (800d090 <UART_SetConfig+0x2f0>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d125      	bne.n	800cfb8 <UART_SetConfig+0x218>
 800cf6c:	4b45      	ldr	r3, [pc, #276]	@ (800d084 <UART_SetConfig+0x2e4>)
 800cf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cf76:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf78:	d016      	beq.n	800cfa8 <UART_SetConfig+0x208>
 800cf7a:	2bc0      	cmp	r3, #192	@ 0xc0
 800cf7c:	d818      	bhi.n	800cfb0 <UART_SetConfig+0x210>
 800cf7e:	2b80      	cmp	r3, #128	@ 0x80
 800cf80:	d00a      	beq.n	800cf98 <UART_SetConfig+0x1f8>
 800cf82:	2b80      	cmp	r3, #128	@ 0x80
 800cf84:	d814      	bhi.n	800cfb0 <UART_SetConfig+0x210>
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d002      	beq.n	800cf90 <UART_SetConfig+0x1f0>
 800cf8a:	2b40      	cmp	r3, #64	@ 0x40
 800cf8c:	d008      	beq.n	800cfa0 <UART_SetConfig+0x200>
 800cf8e:	e00f      	b.n	800cfb0 <UART_SetConfig+0x210>
 800cf90:	2300      	movs	r3, #0
 800cf92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf96:	e082      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cf98:	2302      	movs	r3, #2
 800cf9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cf9e:	e07e      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cfa0:	2304      	movs	r3, #4
 800cfa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfa6:	e07a      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cfa8:	2308      	movs	r3, #8
 800cfaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfae:	e076      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cfb0:	2310      	movs	r3, #16
 800cfb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfb6:	e072      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a35      	ldr	r2, [pc, #212]	@ (800d094 <UART_SetConfig+0x2f4>)
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	d12a      	bne.n	800d018 <UART_SetConfig+0x278>
 800cfc2:	4b30      	ldr	r3, [pc, #192]	@ (800d084 <UART_SetConfig+0x2e4>)
 800cfc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cfcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfd0:	d01a      	beq.n	800d008 <UART_SetConfig+0x268>
 800cfd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfd6:	d81b      	bhi.n	800d010 <UART_SetConfig+0x270>
 800cfd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfdc:	d00c      	beq.n	800cff8 <UART_SetConfig+0x258>
 800cfde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfe2:	d815      	bhi.n	800d010 <UART_SetConfig+0x270>
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d003      	beq.n	800cff0 <UART_SetConfig+0x250>
 800cfe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfec:	d008      	beq.n	800d000 <UART_SetConfig+0x260>
 800cfee:	e00f      	b.n	800d010 <UART_SetConfig+0x270>
 800cff0:	2300      	movs	r3, #0
 800cff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cff6:	e052      	b.n	800d09e <UART_SetConfig+0x2fe>
 800cff8:	2302      	movs	r3, #2
 800cffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cffe:	e04e      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d000:	2304      	movs	r3, #4
 800d002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d006:	e04a      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d008:	2308      	movs	r3, #8
 800d00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d00e:	e046      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d010:	2310      	movs	r3, #16
 800d012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d016:	e042      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a17      	ldr	r2, [pc, #92]	@ (800d07c <UART_SetConfig+0x2dc>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d13a      	bne.n	800d098 <UART_SetConfig+0x2f8>
 800d022:	4b18      	ldr	r3, [pc, #96]	@ (800d084 <UART_SetConfig+0x2e4>)
 800d024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d028:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d02c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d030:	d01a      	beq.n	800d068 <UART_SetConfig+0x2c8>
 800d032:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d036:	d81b      	bhi.n	800d070 <UART_SetConfig+0x2d0>
 800d038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d03c:	d00c      	beq.n	800d058 <UART_SetConfig+0x2b8>
 800d03e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d042:	d815      	bhi.n	800d070 <UART_SetConfig+0x2d0>
 800d044:	2b00      	cmp	r3, #0
 800d046:	d003      	beq.n	800d050 <UART_SetConfig+0x2b0>
 800d048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d04c:	d008      	beq.n	800d060 <UART_SetConfig+0x2c0>
 800d04e:	e00f      	b.n	800d070 <UART_SetConfig+0x2d0>
 800d050:	2300      	movs	r3, #0
 800d052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d056:	e022      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d058:	2302      	movs	r3, #2
 800d05a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d05e:	e01e      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d060:	2304      	movs	r3, #4
 800d062:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d066:	e01a      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d068:	2308      	movs	r3, #8
 800d06a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d06e:	e016      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d070:	2310      	movs	r3, #16
 800d072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d076:	e012      	b.n	800d09e <UART_SetConfig+0x2fe>
 800d078:	cfff69f3 	.word	0xcfff69f3
 800d07c:	40008000 	.word	0x40008000
 800d080:	40013800 	.word	0x40013800
 800d084:	40021000 	.word	0x40021000
 800d088:	40004400 	.word	0x40004400
 800d08c:	40004800 	.word	0x40004800
 800d090:	40004c00 	.word	0x40004c00
 800d094:	40005000 	.word	0x40005000
 800d098:	2310      	movs	r3, #16
 800d09a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4aae      	ldr	r2, [pc, #696]	@ (800d35c <UART_SetConfig+0x5bc>)
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	f040 8097 	bne.w	800d1d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d0aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d0ae:	2b08      	cmp	r3, #8
 800d0b0:	d823      	bhi.n	800d0fa <UART_SetConfig+0x35a>
 800d0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d0b8 <UART_SetConfig+0x318>)
 800d0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b8:	0800d0dd 	.word	0x0800d0dd
 800d0bc:	0800d0fb 	.word	0x0800d0fb
 800d0c0:	0800d0e5 	.word	0x0800d0e5
 800d0c4:	0800d0fb 	.word	0x0800d0fb
 800d0c8:	0800d0eb 	.word	0x0800d0eb
 800d0cc:	0800d0fb 	.word	0x0800d0fb
 800d0d0:	0800d0fb 	.word	0x0800d0fb
 800d0d4:	0800d0fb 	.word	0x0800d0fb
 800d0d8:	0800d0f3 	.word	0x0800d0f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d0dc:	f7fb fefa 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 800d0e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0e2:	e010      	b.n	800d106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d0e4:	4b9e      	ldr	r3, [pc, #632]	@ (800d360 <UART_SetConfig+0x5c0>)
 800d0e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0e8:	e00d      	b.n	800d106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d0ea:	f7fb fe85 	bl	8008df8 <HAL_RCC_GetSysClockFreq>
 800d0ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d0f0:	e009      	b.n	800d106 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d0f8:	e005      	b.n	800d106 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d104:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 8130 	beq.w	800d36e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d112:	4a94      	ldr	r2, [pc, #592]	@ (800d364 <UART_SetConfig+0x5c4>)
 800d114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d118:	461a      	mov	r2, r3
 800d11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d120:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	4613      	mov	r3, r2
 800d128:	005b      	lsls	r3, r3, #1
 800d12a:	4413      	add	r3, r2
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d305      	bcc.n	800d13e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d138:	69ba      	ldr	r2, [r7, #24]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d903      	bls.n	800d146 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d144:	e113      	b.n	800d36e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d148:	2200      	movs	r2, #0
 800d14a:	60bb      	str	r3, [r7, #8]
 800d14c:	60fa      	str	r2, [r7, #12]
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d152:	4a84      	ldr	r2, [pc, #528]	@ (800d364 <UART_SetConfig+0x5c4>)
 800d154:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d158:	b29b      	uxth	r3, r3
 800d15a:	2200      	movs	r2, #0
 800d15c:	603b      	str	r3, [r7, #0]
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d164:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d168:	f7f3 fe40 	bl	8000dec <__aeabi_uldivmod>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	4610      	mov	r0, r2
 800d172:	4619      	mov	r1, r3
 800d174:	f04f 0200 	mov.w	r2, #0
 800d178:	f04f 0300 	mov.w	r3, #0
 800d17c:	020b      	lsls	r3, r1, #8
 800d17e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d182:	0202      	lsls	r2, r0, #8
 800d184:	6979      	ldr	r1, [r7, #20]
 800d186:	6849      	ldr	r1, [r1, #4]
 800d188:	0849      	lsrs	r1, r1, #1
 800d18a:	2000      	movs	r0, #0
 800d18c:	460c      	mov	r4, r1
 800d18e:	4605      	mov	r5, r0
 800d190:	eb12 0804 	adds.w	r8, r2, r4
 800d194:	eb43 0905 	adc.w	r9, r3, r5
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	469a      	mov	sl, r3
 800d1a0:	4693      	mov	fp, r2
 800d1a2:	4652      	mov	r2, sl
 800d1a4:	465b      	mov	r3, fp
 800d1a6:	4640      	mov	r0, r8
 800d1a8:	4649      	mov	r1, r9
 800d1aa:	f7f3 fe1f 	bl	8000dec <__aeabi_uldivmod>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d1b6:	6a3b      	ldr	r3, [r7, #32]
 800d1b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d1bc:	d308      	bcc.n	800d1d0 <UART_SetConfig+0x430>
 800d1be:	6a3b      	ldr	r3, [r7, #32]
 800d1c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1c4:	d204      	bcs.n	800d1d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6a3a      	ldr	r2, [r7, #32]
 800d1cc:	60da      	str	r2, [r3, #12]
 800d1ce:	e0ce      	b.n	800d36e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d1d6:	e0ca      	b.n	800d36e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	69db      	ldr	r3, [r3, #28]
 800d1dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1e0:	d166      	bne.n	800d2b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d1e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d1e6:	2b08      	cmp	r3, #8
 800d1e8:	d827      	bhi.n	800d23a <UART_SetConfig+0x49a>
 800d1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d1f0 <UART_SetConfig+0x450>)
 800d1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1f0:	0800d215 	.word	0x0800d215
 800d1f4:	0800d21d 	.word	0x0800d21d
 800d1f8:	0800d225 	.word	0x0800d225
 800d1fc:	0800d23b 	.word	0x0800d23b
 800d200:	0800d22b 	.word	0x0800d22b
 800d204:	0800d23b 	.word	0x0800d23b
 800d208:	0800d23b 	.word	0x0800d23b
 800d20c:	0800d23b 	.word	0x0800d23b
 800d210:	0800d233 	.word	0x0800d233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d214:	f7fb fe5e 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 800d218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d21a:	e014      	b.n	800d246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d21c:	f7fb fe70 	bl	8008f00 <HAL_RCC_GetPCLK2Freq>
 800d220:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d222:	e010      	b.n	800d246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d224:	4b4e      	ldr	r3, [pc, #312]	@ (800d360 <UART_SetConfig+0x5c0>)
 800d226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d228:	e00d      	b.n	800d246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d22a:	f7fb fde5 	bl	8008df8 <HAL_RCC_GetSysClockFreq>
 800d22e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d230:	e009      	b.n	800d246 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d238:	e005      	b.n	800d246 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d244:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 8090 	beq.w	800d36e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d252:	4a44      	ldr	r2, [pc, #272]	@ (800d364 <UART_SetConfig+0x5c4>)
 800d254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d258:	461a      	mov	r2, r3
 800d25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d260:	005a      	lsls	r2, r3, #1
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	085b      	lsrs	r3, r3, #1
 800d268:	441a      	add	r2, r3
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d272:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d274:	6a3b      	ldr	r3, [r7, #32]
 800d276:	2b0f      	cmp	r3, #15
 800d278:	d916      	bls.n	800d2a8 <UART_SetConfig+0x508>
 800d27a:	6a3b      	ldr	r3, [r7, #32]
 800d27c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d280:	d212      	bcs.n	800d2a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	b29b      	uxth	r3, r3
 800d286:	f023 030f 	bic.w	r3, r3, #15
 800d28a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	085b      	lsrs	r3, r3, #1
 800d290:	b29b      	uxth	r3, r3
 800d292:	f003 0307 	and.w	r3, r3, #7
 800d296:	b29a      	uxth	r2, r3
 800d298:	8bfb      	ldrh	r3, [r7, #30]
 800d29a:	4313      	orrs	r3, r2
 800d29c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	8bfa      	ldrh	r2, [r7, #30]
 800d2a4:	60da      	str	r2, [r3, #12]
 800d2a6:	e062      	b.n	800d36e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d2ae:	e05e      	b.n	800d36e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d2b4:	2b08      	cmp	r3, #8
 800d2b6:	d828      	bhi.n	800d30a <UART_SetConfig+0x56a>
 800d2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c0 <UART_SetConfig+0x520>)
 800d2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2be:	bf00      	nop
 800d2c0:	0800d2e5 	.word	0x0800d2e5
 800d2c4:	0800d2ed 	.word	0x0800d2ed
 800d2c8:	0800d2f5 	.word	0x0800d2f5
 800d2cc:	0800d30b 	.word	0x0800d30b
 800d2d0:	0800d2fb 	.word	0x0800d2fb
 800d2d4:	0800d30b 	.word	0x0800d30b
 800d2d8:	0800d30b 	.word	0x0800d30b
 800d2dc:	0800d30b 	.word	0x0800d30b
 800d2e0:	0800d303 	.word	0x0800d303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2e4:	f7fb fdf6 	bl	8008ed4 <HAL_RCC_GetPCLK1Freq>
 800d2e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d2ea:	e014      	b.n	800d316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2ec:	f7fb fe08 	bl	8008f00 <HAL_RCC_GetPCLK2Freq>
 800d2f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d2f2:	e010      	b.n	800d316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2f4:	4b1a      	ldr	r3, [pc, #104]	@ (800d360 <UART_SetConfig+0x5c0>)
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d2f8:	e00d      	b.n	800d316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2fa:	f7fb fd7d 	bl	8008df8 <HAL_RCC_GetSysClockFreq>
 800d2fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d300:	e009      	b.n	800d316 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d308:	e005      	b.n	800d316 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d30a:	2300      	movs	r3, #0
 800d30c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d314:	bf00      	nop
    }

    if (pclk != 0U)
 800d316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d028      	beq.n	800d36e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d320:	4a10      	ldr	r2, [pc, #64]	@ (800d364 <UART_SetConfig+0x5c4>)
 800d322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d326:	461a      	mov	r2, r3
 800d328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	685b      	ldr	r3, [r3, #4]
 800d332:	085b      	lsrs	r3, r3, #1
 800d334:	441a      	add	r2, r3
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d33e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d340:	6a3b      	ldr	r3, [r7, #32]
 800d342:	2b0f      	cmp	r3, #15
 800d344:	d910      	bls.n	800d368 <UART_SetConfig+0x5c8>
 800d346:	6a3b      	ldr	r3, [r7, #32]
 800d348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d34c:	d20c      	bcs.n	800d368 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d34e:	6a3b      	ldr	r3, [r7, #32]
 800d350:	b29a      	uxth	r2, r3
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	60da      	str	r2, [r3, #12]
 800d358:	e009      	b.n	800d36e <UART_SetConfig+0x5ce>
 800d35a:	bf00      	nop
 800d35c:	40008000 	.word	0x40008000
 800d360:	00f42400 	.word	0x00f42400
 800d364:	08011328 	.word	0x08011328
      }
      else
      {
        ret = HAL_ERROR;
 800d368:	2301      	movs	r3, #1
 800d36a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2201      	movs	r2, #1
 800d372:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	2201      	movs	r2, #1
 800d37a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	2200      	movs	r2, #0
 800d382:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2200      	movs	r2, #0
 800d388:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d38a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3730      	adds	r7, #48	@ 0x30
 800d392:	46bd      	mov	sp, r7
 800d394:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3a4:	f003 0308 	and.w	r3, r3, #8
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00a      	beq.n	800d3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	430a      	orrs	r2, r1
 800d3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c6:	f003 0301 	and.w	r3, r3, #1
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00a      	beq.n	800d3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	430a      	orrs	r2, r1
 800d3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e8:	f003 0302 	and.w	r3, r3, #2
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d00a      	beq.n	800d406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	430a      	orrs	r2, r1
 800d404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d40a:	f003 0304 	and.w	r3, r3, #4
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00a      	beq.n	800d428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	685b      	ldr	r3, [r3, #4]
 800d418:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	430a      	orrs	r2, r1
 800d426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d42c:	f003 0310 	and.w	r3, r3, #16
 800d430:	2b00      	cmp	r3, #0
 800d432:	d00a      	beq.n	800d44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	430a      	orrs	r2, r1
 800d448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d44e:	f003 0320 	and.w	r3, r3, #32
 800d452:	2b00      	cmp	r3, #0
 800d454:	d00a      	beq.n	800d46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	689b      	ldr	r3, [r3, #8]
 800d45c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	430a      	orrs	r2, r1
 800d46a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01a      	beq.n	800d4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	430a      	orrs	r2, r1
 800d48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d496:	d10a      	bne.n	800d4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	685b      	ldr	r3, [r3, #4]
 800d4c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	430a      	orrs	r2, r1
 800d4ce:	605a      	str	r2, [r3, #4]
  }
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b098      	sub	sp, #96	@ 0x60
 800d4e0:	af02      	add	r7, sp, #8
 800d4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d4ec:	f7f8 feb8 	bl	8006260 <HAL_GetTick>
 800d4f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 0308 	and.w	r3, r3, #8
 800d4fc:	2b08      	cmp	r3, #8
 800d4fe:	d12f      	bne.n	800d560 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d504:	9300      	str	r3, [sp, #0]
 800d506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d508:	2200      	movs	r2, #0
 800d50a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f88e 	bl	800d630 <UART_WaitOnFlagUntilTimeout>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d022      	beq.n	800d560 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d522:	e853 3f00 	ldrex	r3, [r3]
 800d526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d52e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	461a      	mov	r2, r3
 800d536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d538:	647b      	str	r3, [r7, #68]	@ 0x44
 800d53a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d540:	e841 2300 	strex	r3, r2, [r1]
 800d544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1e6      	bne.n	800d51a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2220      	movs	r2, #32
 800d550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2200      	movs	r2, #0
 800d558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d55c:	2303      	movs	r3, #3
 800d55e:	e063      	b.n	800d628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f003 0304 	and.w	r3, r3, #4
 800d56a:	2b04      	cmp	r3, #4
 800d56c:	d149      	bne.n	800d602 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d56e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d576:	2200      	movs	r2, #0
 800d578:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 f857 	bl	800d630 <UART_WaitOnFlagUntilTimeout>
 800d582:	4603      	mov	r3, r0
 800d584:	2b00      	cmp	r3, #0
 800d586:	d03c      	beq.n	800d602 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d590:	e853 3f00 	ldrex	r3, [r3]
 800d594:	623b      	str	r3, [r7, #32]
   return(result);
 800d596:	6a3b      	ldr	r3, [r7, #32]
 800d598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5ae:	e841 2300 	strex	r3, r2, [r1]
 800d5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d1e6      	bne.n	800d588 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	3308      	adds	r3, #8
 800d5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	e853 3f00 	ldrex	r3, [r3]
 800d5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f023 0301 	bic.w	r3, r3, #1
 800d5d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d5da:	61fa      	str	r2, [r7, #28]
 800d5dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5de:	69b9      	ldr	r1, [r7, #24]
 800d5e0:	69fa      	ldr	r2, [r7, #28]
 800d5e2:	e841 2300 	strex	r3, r2, [r1]
 800d5e6:	617b      	str	r3, [r7, #20]
   return(result);
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1e5      	bne.n	800d5ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2220      	movs	r2, #32
 800d5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d5fe:	2303      	movs	r3, #3
 800d600:	e012      	b.n	800d628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2220      	movs	r2, #32
 800d606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2220      	movs	r2, #32
 800d60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2200      	movs	r2, #0
 800d61c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3758      	adds	r7, #88	@ 0x58
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	603b      	str	r3, [r7, #0]
 800d63c:	4613      	mov	r3, r2
 800d63e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d640:	e04f      	b.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d648:	d04b      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d64a:	f7f8 fe09 	bl	8006260 <HAL_GetTick>
 800d64e:	4602      	mov	r2, r0
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	69ba      	ldr	r2, [r7, #24]
 800d656:	429a      	cmp	r2, r3
 800d658:	d302      	bcc.n	800d660 <UART_WaitOnFlagUntilTimeout+0x30>
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d101      	bne.n	800d664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d660:	2303      	movs	r3, #3
 800d662:	e04e      	b.n	800d702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f003 0304 	and.w	r3, r3, #4
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d037      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b80      	cmp	r3, #128	@ 0x80
 800d676:	d034      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	2b40      	cmp	r3, #64	@ 0x40
 800d67c:	d031      	beq.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	69db      	ldr	r3, [r3, #28]
 800d684:	f003 0308 	and.w	r3, r3, #8
 800d688:	2b08      	cmp	r3, #8
 800d68a:	d110      	bne.n	800d6ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2208      	movs	r2, #8
 800d692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f000 f99c 	bl	800d9d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	2208      	movs	r2, #8
 800d69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e029      	b.n	800d702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d6b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d6bc:	d111      	bne.n	800d6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 f982 	bl	800d9d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	e00f      	b.n	800d702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	69da      	ldr	r2, [r3, #28]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	4013      	ands	r3, r2
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	bf0c      	ite	eq
 800d6f2:	2301      	moveq	r3, #1
 800d6f4:	2300      	movne	r3, #0
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	79fb      	ldrb	r3, [r7, #7]
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d0a0      	beq.n	800d642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3710      	adds	r7, #16
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
	...

0800d70c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b0a3      	sub	sp, #140	@ 0x8c
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	4613      	mov	r3, r2
 800d718:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	68ba      	ldr	r2, [r7, #8]
 800d71e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	88fa      	ldrh	r2, [r7, #6]
 800d724:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	88fa      	ldrh	r2, [r7, #6]
 800d72c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2200      	movs	r2, #0
 800d734:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	689b      	ldr	r3, [r3, #8]
 800d73a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d73e:	d10e      	bne.n	800d75e <UART_Start_Receive_IT+0x52>
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	691b      	ldr	r3, [r3, #16]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d105      	bne.n	800d754 <UART_Start_Receive_IT+0x48>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800d74e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d752:	e02d      	b.n	800d7b0 <UART_Start_Receive_IT+0xa4>
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	22ff      	movs	r2, #255	@ 0xff
 800d758:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d75c:	e028      	b.n	800d7b0 <UART_Start_Receive_IT+0xa4>
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10d      	bne.n	800d782 <UART_Start_Receive_IT+0x76>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d104      	bne.n	800d778 <UART_Start_Receive_IT+0x6c>
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	22ff      	movs	r2, #255	@ 0xff
 800d772:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d776:	e01b      	b.n	800d7b0 <UART_Start_Receive_IT+0xa4>
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	227f      	movs	r2, #127	@ 0x7f
 800d77c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d780:	e016      	b.n	800d7b0 <UART_Start_Receive_IT+0xa4>
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d78a:	d10d      	bne.n	800d7a8 <UART_Start_Receive_IT+0x9c>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	691b      	ldr	r3, [r3, #16]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d104      	bne.n	800d79e <UART_Start_Receive_IT+0x92>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	227f      	movs	r2, #127	@ 0x7f
 800d798:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d79c:	e008      	b.n	800d7b0 <UART_Start_Receive_IT+0xa4>
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	223f      	movs	r2, #63	@ 0x3f
 800d7a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800d7a6:	e003      	b.n	800d7b0 <UART_Start_Receive_IT+0xa4>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	2222      	movs	r2, #34	@ 0x22
 800d7bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	3308      	adds	r3, #8
 800d7c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d7ca:	e853 3f00 	ldrex	r3, [r3]
 800d7ce:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800d7d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7d2:	f043 0301 	orr.w	r3, r3, #1
 800d7d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	3308      	adds	r3, #8
 800d7e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800d7e4:	673a      	str	r2, [r7, #112]	@ 0x70
 800d7e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800d7ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d7ec:	e841 2300 	strex	r3, r2, [r1]
 800d7f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800d7f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d1e3      	bne.n	800d7c0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d7fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d800:	d14f      	bne.n	800d8a2 <UART_Start_Receive_IT+0x196>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d808:	88fa      	ldrh	r2, [r7, #6]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d349      	bcc.n	800d8a2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d816:	d107      	bne.n	800d828 <UART_Start_Receive_IT+0x11c>
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	691b      	ldr	r3, [r3, #16]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d103      	bne.n	800d828 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	4a47      	ldr	r2, [pc, #284]	@ (800d940 <UART_Start_Receive_IT+0x234>)
 800d824:	675a      	str	r2, [r3, #116]	@ 0x74
 800d826:	e002      	b.n	800d82e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	4a46      	ldr	r2, [pc, #280]	@ (800d944 <UART_Start_Receive_IT+0x238>)
 800d82c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d01a      	beq.n	800d86c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d83e:	e853 3f00 	ldrex	r3, [r3]
 800d842:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d84a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	461a      	mov	r2, r3
 800d854:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d858:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d85a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800d85e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d860:	e841 2300 	strex	r3, r2, [r1]
 800d864:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800d866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d1e4      	bne.n	800d836 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	3308      	adds	r3, #8
 800d872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d876:	e853 3f00 	ldrex	r3, [r3]
 800d87a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d87e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d882:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3308      	adds	r3, #8
 800d88a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800d88c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800d88e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d890:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d892:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d894:	e841 2300 	strex	r3, r2, [r1]
 800d898:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d89a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d1e5      	bne.n	800d86c <UART_Start_Receive_IT+0x160>
 800d8a0:	e046      	b.n	800d930 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8aa:	d107      	bne.n	800d8bc <UART_Start_Receive_IT+0x1b0>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	691b      	ldr	r3, [r3, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d103      	bne.n	800d8bc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	4a24      	ldr	r2, [pc, #144]	@ (800d948 <UART_Start_Receive_IT+0x23c>)
 800d8b8:	675a      	str	r2, [r3, #116]	@ 0x74
 800d8ba:	e002      	b.n	800d8c2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	4a23      	ldr	r2, [pc, #140]	@ (800d94c <UART_Start_Receive_IT+0x240>)
 800d8c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d019      	beq.n	800d8fe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8d2:	e853 3f00 	ldrex	r3, [r3]
 800d8d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8da:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800d8de:	677b      	str	r3, [r7, #116]	@ 0x74
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	461a      	mov	r2, r3
 800d8e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d8e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8ea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d8ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8f0:	e841 2300 	strex	r3, r2, [r1]
 800d8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1e6      	bne.n	800d8ca <UART_Start_Receive_IT+0x1be>
 800d8fc:	e018      	b.n	800d930 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d904:	697b      	ldr	r3, [r7, #20]
 800d906:	e853 3f00 	ldrex	r3, [r3]
 800d90a:	613b      	str	r3, [r7, #16]
   return(result);
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	f043 0320 	orr.w	r3, r3, #32
 800d912:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	461a      	mov	r2, r3
 800d91a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d91c:	623b      	str	r3, [r7, #32]
 800d91e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d920:	69f9      	ldr	r1, [r7, #28]
 800d922:	6a3a      	ldr	r2, [r7, #32]
 800d924:	e841 2300 	strex	r3, r2, [r1]
 800d928:	61bb      	str	r3, [r7, #24]
   return(result);
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1e6      	bne.n	800d8fe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	378c      	adds	r7, #140	@ 0x8c
 800d936:	46bd      	mov	sp, r7
 800d938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93c:	4770      	bx	lr
 800d93e:	bf00      	nop
 800d940:	0800e355 	.word	0x0800e355
 800d944:	0800dfe5 	.word	0x0800dfe5
 800d948:	0800de25 	.word	0x0800de25
 800d94c:	0800dc65 	.word	0x0800dc65

0800d950 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d950:	b480      	push	{r7}
 800d952:	b08f      	sub	sp, #60	@ 0x3c
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95e:	6a3b      	ldr	r3, [r7, #32]
 800d960:	e853 3f00 	ldrex	r3, [r3]
 800d964:	61fb      	str	r3, [r7, #28]
   return(result);
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d96c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d978:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d97a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d97c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d97e:	e841 2300 	strex	r3, r2, [r1]
 800d982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1e6      	bne.n	800d958 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	3308      	adds	r3, #8
 800d990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	e853 3f00 	ldrex	r3, [r3]
 800d998:	60bb      	str	r3, [r7, #8]
   return(result);
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d9a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3308      	adds	r3, #8
 800d9a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9aa:	61ba      	str	r2, [r7, #24]
 800d9ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ae:	6979      	ldr	r1, [r7, #20]
 800d9b0:	69ba      	ldr	r2, [r7, #24]
 800d9b2:	e841 2300 	strex	r3, r2, [r1]
 800d9b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d9b8:	693b      	ldr	r3, [r7, #16]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1e5      	bne.n	800d98a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d9c6:	bf00      	nop
 800d9c8:	373c      	adds	r7, #60	@ 0x3c
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr

0800d9d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9d2:	b480      	push	{r7}
 800d9d4:	b095      	sub	sp, #84	@ 0x54
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e2:	e853 3f00 	ldrex	r3, [r3]
 800d9e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d9fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da00:	e841 2300 	strex	r3, r2, [r1]
 800da04:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1e6      	bne.n	800d9da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3308      	adds	r3, #8
 800da12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da14:	6a3b      	ldr	r3, [r7, #32]
 800da16:	e853 3f00 	ldrex	r3, [r3]
 800da1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da22:	f023 0301 	bic.w	r3, r3, #1
 800da26:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3308      	adds	r3, #8
 800da2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da38:	e841 2300 	strex	r3, r2, [r1]
 800da3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1e3      	bne.n	800da0c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d118      	bne.n	800da7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	e853 3f00 	ldrex	r3, [r3]
 800da58:	60bb      	str	r3, [r7, #8]
   return(result);
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	f023 0310 	bic.w	r3, r3, #16
 800da60:	647b      	str	r3, [r7, #68]	@ 0x44
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	461a      	mov	r2, r3
 800da68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da6a:	61bb      	str	r3, [r7, #24]
 800da6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6e:	6979      	ldr	r1, [r7, #20]
 800da70:	69ba      	ldr	r2, [r7, #24]
 800da72:	e841 2300 	strex	r3, r2, [r1]
 800da76:	613b      	str	r3, [r7, #16]
   return(result);
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1e6      	bne.n	800da4c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2220      	movs	r2, #32
 800da82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800da92:	bf00      	nop
 800da94:	3754      	adds	r7, #84	@ 0x54
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr

0800da9e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b090      	sub	sp, #64	@ 0x40
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daaa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f003 0320 	and.w	r3, r3, #32
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d137      	bne.n	800db2a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800daba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dabc:	2200      	movs	r2, #0
 800dabe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	3308      	adds	r3, #8
 800dac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dacc:	e853 3f00 	ldrex	r3, [r3]
 800dad0:	623b      	str	r3, [r7, #32]
   return(result);
 800dad2:	6a3b      	ldr	r3, [r7, #32]
 800dad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	3308      	adds	r3, #8
 800dae0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dae2:	633a      	str	r2, [r7, #48]	@ 0x30
 800dae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daea:	e841 2300 	strex	r3, r2, [r1]
 800daee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800daf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1e5      	bne.n	800dac2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800daf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	e853 3f00 	ldrex	r3, [r3]
 800db02:	60fb      	str	r3, [r7, #12]
   return(result);
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800db0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	461a      	mov	r2, r3
 800db12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db14:	61fb      	str	r3, [r7, #28]
 800db16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db18:	69b9      	ldr	r1, [r7, #24]
 800db1a:	69fa      	ldr	r2, [r7, #28]
 800db1c:	e841 2300 	strex	r3, r2, [r1]
 800db20:	617b      	str	r3, [r7, #20]
   return(result);
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d1e6      	bne.n	800daf6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db28:	e004      	b.n	800db34 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800db2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db30:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800db32:	4798      	blx	r3
}
 800db34:	bf00      	nop
 800db36:	3740      	adds	r7, #64	@ 0x40
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db54:	bf00      	nop
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db68:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800db78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db84:	2b80      	cmp	r3, #128	@ 0x80
 800db86:	d109      	bne.n	800db9c <UART_DMAError+0x40>
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2b21      	cmp	r3, #33	@ 0x21
 800db8c:	d106      	bne.n	800db9c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db8e:	697b      	ldr	r3, [r7, #20]
 800db90:	2200      	movs	r2, #0
 800db92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800db96:	6978      	ldr	r0, [r7, #20]
 800db98:	f7ff feda 	bl	800d950 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dba6:	2b40      	cmp	r3, #64	@ 0x40
 800dba8:	d109      	bne.n	800dbbe <UART_DMAError+0x62>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2b22      	cmp	r3, #34	@ 0x22
 800dbae:	d106      	bne.n	800dbbe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dbb0:	697b      	ldr	r3, [r7, #20]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800dbb8:	6978      	ldr	r0, [r7, #20]
 800dbba:	f7ff ff0a 	bl	800d9d2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dbc4:	f043 0210 	orr.w	r2, r3, #16
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dbd4:	6978      	ldr	r0, [r7, #20]
 800dbd6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbd8:	bf00      	nop
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc00:	bf00      	nop
 800dc02:	3710      	adds	r7, #16
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b088      	sub	sp, #32
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	e853 3f00 	ldrex	r3, [r3]
 800dc1c:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc24:	61fb      	str	r3, [r7, #28]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	69fb      	ldr	r3, [r7, #28]
 800dc2e:	61bb      	str	r3, [r7, #24]
 800dc30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc32:	6979      	ldr	r1, [r7, #20]
 800dc34:	69ba      	ldr	r2, [r7, #24]
 800dc36:	e841 2300 	strex	r3, r2, [r1]
 800dc3a:	613b      	str	r3, [r7, #16]
   return(result);
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d1e6      	bne.n	800dc10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2220      	movs	r2, #32
 800dc46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc5a:	bf00      	nop
 800dc5c:	3720      	adds	r7, #32
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
	...

0800dc64 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b09c      	sub	sp, #112	@ 0x70
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dc72:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc7c:	2b22      	cmp	r3, #34	@ 0x22
 800dc7e:	f040 80c2 	bne.w	800de06 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc88:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dc8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800dc90:	b2d9      	uxtb	r1, r3
 800dc92:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800dc96:	b2da      	uxtb	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc9c:	400a      	ands	r2, r1
 800dc9e:	b2d2      	uxtb	r2, r2
 800dca0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dca6:	1c5a      	adds	r2, r3, #1
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	b29a      	uxth	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800dcc4:	b29b      	uxth	r3, r3
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	f040 80a5 	bne.w	800de16 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcd4:	e853 3f00 	ldrex	r3, [r3]
 800dcd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800dcda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	461a      	mov	r2, r3
 800dce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dcea:	65bb      	str	r3, [r7, #88]	@ 0x58
 800dcec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dcf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800dcf2:	e841 2300 	strex	r3, r2, [r1]
 800dcf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800dcf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1e6      	bne.n	800dccc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3308      	adds	r3, #8
 800dd04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd08:	e853 3f00 	ldrex	r3, [r3]
 800dd0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd10:	f023 0301 	bic.w	r3, r3, #1
 800dd14:	667b      	str	r3, [r7, #100]	@ 0x64
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3308      	adds	r3, #8
 800dd1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800dd1e:	647a      	str	r2, [r7, #68]	@ 0x44
 800dd20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd26:	e841 2300 	strex	r3, r2, [r1]
 800dd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1e5      	bne.n	800dcfe <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2220      	movs	r2, #32
 800dd36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a35      	ldr	r2, [pc, #212]	@ (800de20 <UART_RxISR_8BIT+0x1bc>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d01f      	beq.n	800dd90 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d018      	beq.n	800dd90 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd66:	e853 3f00 	ldrex	r3, [r3]
 800dd6a:	623b      	str	r3, [r7, #32]
   return(result);
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dd72:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	461a      	mov	r2, r3
 800dd7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800dd7c:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd84:	e841 2300 	strex	r3, r2, [r1]
 800dd88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1e6      	bne.n	800dd5e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d130      	bne.n	800ddfa <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	e853 3f00 	ldrex	r3, [r3]
 800ddaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f023 0310 	bic.w	r3, r3, #16
 800ddb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	461a      	mov	r2, r3
 800ddba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ddbc:	61fb      	str	r3, [r7, #28]
 800ddbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc0:	69b9      	ldr	r1, [r7, #24]
 800ddc2:	69fa      	ldr	r2, [r7, #28]
 800ddc4:	e841 2300 	strex	r3, r2, [r1]
 800ddc8:	617b      	str	r3, [r7, #20]
   return(result);
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d1e6      	bne.n	800dd9e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	69db      	ldr	r3, [r3, #28]
 800ddd6:	f003 0310 	and.w	r3, r3, #16
 800ddda:	2b10      	cmp	r3, #16
 800dddc:	d103      	bne.n	800dde6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	2210      	movs	r2, #16
 800dde4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ddf8:	e00d      	b.n	800de16 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	4798      	blx	r3
}
 800de04:	e007      	b.n	800de16 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	699a      	ldr	r2, [r3, #24]
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f042 0208 	orr.w	r2, r2, #8
 800de14:	619a      	str	r2, [r3, #24]
}
 800de16:	bf00      	nop
 800de18:	3770      	adds	r7, #112	@ 0x70
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	40008000 	.word	0x40008000

0800de24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b09c      	sub	sp, #112	@ 0x70
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de32:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800de3c:	2b22      	cmp	r3, #34	@ 0x22
 800de3e:	f040 80c2 	bne.w	800dfc6 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de50:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800de52:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800de56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800de5a:	4013      	ands	r3, r2
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de60:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800de66:	1c9a      	adds	r2, r3, #2
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de72:	b29b      	uxth	r3, r3
 800de74:	3b01      	subs	r3, #1
 800de76:	b29a      	uxth	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800de84:	b29b      	uxth	r3, r3
 800de86:	2b00      	cmp	r3, #0
 800de88:	f040 80a5 	bne.w	800dfd6 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de94:	e853 3f00 	ldrex	r3, [r3]
 800de98:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800de9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dea0:	667b      	str	r3, [r7, #100]	@ 0x64
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	461a      	mov	r2, r3
 800dea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800deaa:	657b      	str	r3, [r7, #84]	@ 0x54
 800deac:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800deb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800deb2:	e841 2300 	strex	r3, r2, [r1]
 800deb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800deb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1e6      	bne.n	800de8c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	3308      	adds	r3, #8
 800dec4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dec8:	e853 3f00 	ldrex	r3, [r3]
 800decc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ded0:	f023 0301 	bic.w	r3, r3, #1
 800ded4:	663b      	str	r3, [r7, #96]	@ 0x60
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	3308      	adds	r3, #8
 800dedc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800dede:	643a      	str	r2, [r7, #64]	@ 0x40
 800dee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dee6:	e841 2300 	strex	r3, r2, [r1]
 800deea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800deec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1e5      	bne.n	800debe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2220      	movs	r2, #32
 800def6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2200      	movs	r2, #0
 800defe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a35      	ldr	r2, [pc, #212]	@ (800dfe0 <UART_RxISR_16BIT+0x1bc>)
 800df0c:	4293      	cmp	r3, r2
 800df0e:	d01f      	beq.n	800df50 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d018      	beq.n	800df50 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	e853 3f00 	ldrex	r3, [r3]
 800df2a:	61fb      	str	r3, [r7, #28]
   return(result);
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800df32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	461a      	mov	r2, r3
 800df3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df3e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800df42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df44:	e841 2300 	strex	r3, r2, [r1]
 800df48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1e6      	bne.n	800df1e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df54:	2b01      	cmp	r3, #1
 800df56:	d130      	bne.n	800dfba <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	e853 3f00 	ldrex	r3, [r3]
 800df6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	f023 0310 	bic.w	r3, r3, #16
 800df72:	65bb      	str	r3, [r7, #88]	@ 0x58
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	461a      	mov	r2, r3
 800df7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800df7c:	61bb      	str	r3, [r7, #24]
 800df7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df80:	6979      	ldr	r1, [r7, #20]
 800df82:	69ba      	ldr	r2, [r7, #24]
 800df84:	e841 2300 	strex	r3, r2, [r1]
 800df88:	613b      	str	r3, [r7, #16]
   return(result);
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d1e6      	bne.n	800df5e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	f003 0310 	and.w	r3, r3, #16
 800df9a:	2b10      	cmp	r3, #16
 800df9c:	d103      	bne.n	800dfa6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2210      	movs	r2, #16
 800dfa4:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800dfb2:	4611      	mov	r1, r2
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dfb8:	e00d      	b.n	800dfd6 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	4798      	blx	r3
}
 800dfc4:	e007      	b.n	800dfd6 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	699a      	ldr	r2, [r3, #24]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f042 0208 	orr.w	r2, r2, #8
 800dfd4:	619a      	str	r2, [r3, #24]
}
 800dfd6:	bf00      	nop
 800dfd8:	3770      	adds	r7, #112	@ 0x70
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop
 800dfe0:	40008000 	.word	0x40008000

0800dfe4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b0ac      	sub	sp, #176	@ 0xb0
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dff2:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	69db      	ldr	r3, [r3, #28]
 800dffc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e01a:	2b22      	cmp	r3, #34	@ 0x22
 800e01c:	f040 8189 	bne.w	800e332 <UART_RxISR_8BIT_FIFOEN+0x34e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e026:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e02a:	e12c      	b.n	800e286 <UART_RxISR_8BIT_FIFOEN+0x2a2>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e032:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e036:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800e03a:	b2d9      	uxtb	r1, r3
 800e03c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800e040:	b2da      	uxtb	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e046:	400a      	ands	r2, r1
 800e048:	b2d2      	uxtb	r2, r2
 800e04a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e050:	1c5a      	adds	r2, r3, #1
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	3b01      	subs	r3, #1
 800e060:	b29a      	uxth	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	69db      	ldr	r3, [r3, #28]
 800e06e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e076:	f003 0307 	and.w	r3, r3, #7
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d055      	beq.n	800e12a <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e082:	f003 0301 	and.w	r3, r3, #1
 800e086:	2b00      	cmp	r3, #0
 800e088:	d011      	beq.n	800e0ae <UART_RxISR_8BIT_FIFOEN+0xca>
 800e08a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e092:	2b00      	cmp	r3, #0
 800e094:	d00b      	beq.n	800e0ae <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	2201      	movs	r2, #1
 800e09c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0a4:	f043 0201 	orr.w	r2, r3, #1
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0b2:	f003 0302 	and.w	r3, r3, #2
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d011      	beq.n	800e0de <UART_RxISR_8BIT_FIFOEN+0xfa>
 800e0ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e0be:	f003 0301 	and.w	r3, r3, #1
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00b      	beq.n	800e0de <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2202      	movs	r2, #2
 800e0cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0d4:	f043 0204 	orr.w	r2, r3, #4
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e0de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e0e2:	f003 0304 	and.w	r3, r3, #4
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d011      	beq.n	800e10e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800e0ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00b      	beq.n	800e10e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2204      	movs	r2, #4
 800e0fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e104:	f043 0202 	orr.w	r2, r3, #2
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e114:	2b00      	cmp	r3, #0
 800e116:	d008      	beq.n	800e12a <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e130:	b29b      	uxth	r3, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	f040 80a7 	bne.w	800e286 <UART_RxISR_8BIT_FIFOEN+0x2a2>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e140:	e853 3f00 	ldrex	r3, [r3]
 800e144:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800e146:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e14c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	461a      	mov	r2, r3
 800e156:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e15a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e15c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e15e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e160:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e162:	e841 2300 	strex	r3, r2, [r1]
 800e166:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800e168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d1e4      	bne.n	800e138 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	3308      	adds	r3, #8
 800e174:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e176:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e178:	e853 3f00 	ldrex	r3, [r3]
 800e17c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800e17e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e184:	f023 0301 	bic.w	r3, r3, #1
 800e188:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	3308      	adds	r3, #8
 800e192:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e196:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e198:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800e19c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e19e:	e841 2300 	strex	r3, r2, [r1]
 800e1a2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e1a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1e1      	bne.n	800e16e <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2220      	movs	r2, #32
 800e1ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a62      	ldr	r2, [pc, #392]	@ (800e34c <UART_RxISR_8BIT_FIFOEN+0x368>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d021      	beq.n	800e20c <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d01a      	beq.n	800e20c <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1de:	e853 3f00 	ldrex	r3, [r3]
 800e1e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e1e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e1ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e1f8:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1fa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1fc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e200:	e841 2300 	strex	r3, r2, [r1]
 800e204:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d1e4      	bne.n	800e1d6 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e210:	2b01      	cmp	r3, #1
 800e212:	d132      	bne.n	800e27a <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2200      	movs	r2, #0
 800e218:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e222:	e853 3f00 	ldrex	r3, [r3]
 800e226:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e22a:	f023 0310 	bic.w	r3, r3, #16
 800e22e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	461a      	mov	r2, r3
 800e238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e23c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e23e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e240:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e242:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e244:	e841 2300 	strex	r3, r2, [r1]
 800e248:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d1e4      	bne.n	800e21a <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	69db      	ldr	r3, [r3, #28]
 800e256:	f003 0310 	and.w	r3, r3, #16
 800e25a:	2b10      	cmp	r3, #16
 800e25c:	d103      	bne.n	800e266 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2210      	movs	r2, #16
 800e264:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e272:	4611      	mov	r1, r2
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e278:	e010      	b.n	800e29c <UART_RxISR_8BIT_FIFOEN+0x2b8>
          huart->RxCpltCallback(huart);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	4798      	blx	r3
        break;
 800e284:	e00a      	b.n	800e29c <UART_RxISR_8BIT_FIFOEN+0x2b8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e286:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d006      	beq.n	800e29c <UART_RxISR_8BIT_FIFOEN+0x2b8>
 800e28e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e292:	f003 0320 	and.w	r3, r3, #32
 800e296:	2b00      	cmp	r3, #0
 800e298:	f47f aec8 	bne.w	800e02c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e2a2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e2a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d049      	beq.n	800e342 <UART_RxISR_8BIT_FIFOEN+0x35e>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e2b4:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d242      	bcs.n	800e342 <UART_RxISR_8BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2c4:	6a3b      	ldr	r3, [r7, #32]
 800e2c6:	e853 3f00 	ldrex	r3, [r3]
 800e2ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e2d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	3308      	adds	r3, #8
 800e2dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e2e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e2e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2e8:	e841 2300 	strex	r3, r2, [r1]
 800e2ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e3      	bne.n	800e2bc <UART_RxISR_8BIT_FIFOEN+0x2d8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4a16      	ldr	r2, [pc, #88]	@ (800e350 <UART_RxISR_8BIT_FIFOEN+0x36c>)
 800e2f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	e853 3f00 	ldrex	r3, [r3]
 800e306:	60bb      	str	r3, [r7, #8]
   return(result);
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	f043 0320 	orr.w	r3, r3, #32
 800e30e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	461a      	mov	r2, r3
 800e318:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e31c:	61bb      	str	r3, [r7, #24]
 800e31e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e320:	6979      	ldr	r1, [r7, #20]
 800e322:	69ba      	ldr	r2, [r7, #24]
 800e324:	e841 2300 	strex	r3, r2, [r1]
 800e328:	613b      	str	r3, [r7, #16]
   return(result);
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d1e4      	bne.n	800e2fa <UART_RxISR_8BIT_FIFOEN+0x316>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e330:	e007      	b.n	800e342 <UART_RxISR_8BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	699a      	ldr	r2, [r3, #24]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f042 0208 	orr.w	r2, r2, #8
 800e340:	619a      	str	r2, [r3, #24]
}
 800e342:	bf00      	nop
 800e344:	37b0      	adds	r7, #176	@ 0xb0
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	40008000 	.word	0x40008000
 800e350:	0800dc65 	.word	0x0800dc65

0800e354 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b0ae      	sub	sp, #184	@ 0xb8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e362:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	69db      	ldr	r3, [r3, #28]
 800e36c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e38a:	2b22      	cmp	r3, #34	@ 0x22
 800e38c:	f040 818d 	bne.w	800e6aa <UART_RxISR_16BIT_FIFOEN+0x356>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e396:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e39a:	e130      	b.n	800e5fe <UART_RxISR_16BIT_FIFOEN+0x2aa>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800e3ae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800e3b2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800e3b6:	4013      	ands	r3, r2
 800e3b8:	b29a      	uxth	r2, r3
 800e3ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3c4:	1c9a      	adds	r2, r3, #2
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e3d0:	b29b      	uxth	r3, r3
 800e3d2:	3b01      	subs	r3, #1
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	69db      	ldr	r3, [r3, #28]
 800e3e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800e3e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e3ea:	f003 0307 	and.w	r3, r3, #7
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d055      	beq.n	800e49e <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e3f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d011      	beq.n	800e422 <UART_RxISR_16BIT_FIFOEN+0xce>
 800e3fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00b      	beq.n	800e422 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2201      	movs	r2, #1
 800e410:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e418:	f043 0201 	orr.w	r2, r3, #1
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e422:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e426:	f003 0302 	and.w	r3, r3, #2
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d011      	beq.n	800e452 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800e42e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e432:	f003 0301 	and.w	r3, r3, #1
 800e436:	2b00      	cmp	r3, #0
 800e438:	d00b      	beq.n	800e452 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2202      	movs	r2, #2
 800e440:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e448:	f043 0204 	orr.w	r2, r3, #4
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e452:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e456:	f003 0304 	and.w	r3, r3, #4
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d011      	beq.n	800e482 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800e45e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e462:	f003 0301 	and.w	r3, r3, #1
 800e466:	2b00      	cmp	r3, #0
 800e468:	d00b      	beq.n	800e482 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2204      	movs	r2, #4
 800e470:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e478:	f043 0202 	orr.w	r2, r3, #2
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d008      	beq.n	800e49e <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e4a4:	b29b      	uxth	r3, r3
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f040 80a9 	bne.w	800e5fe <UART_RxISR_16BIT_FIFOEN+0x2aa>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e4b4:	e853 3f00 	ldrex	r3, [r3]
 800e4b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e4ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e4bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e4ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e4d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e4d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e4da:	e841 2300 	strex	r3, r2, [r1]
 800e4de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e4e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1e2      	bne.n	800e4ac <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	3308      	adds	r3, #8
 800e4ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e4f0:	e853 3f00 	ldrex	r3, [r3]
 800e4f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e4f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e4fc:	f023 0301 	bic.w	r3, r3, #1
 800e500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	3308      	adds	r3, #8
 800e50a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e50e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e510:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e512:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e514:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e516:	e841 2300 	strex	r3, r2, [r1]
 800e51a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e51c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1e1      	bne.n	800e4e6 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	2220      	movs	r2, #32
 800e526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a62      	ldr	r2, [pc, #392]	@ (800e6c4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d021      	beq.n	800e584 <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	685b      	ldr	r3, [r3, #4]
 800e546:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d01a      	beq.n	800e584 <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e554:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e556:	e853 3f00 	ldrex	r3, [r3]
 800e55a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e55c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e55e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e562:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	461a      	mov	r2, r3
 800e56c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e570:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e572:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e574:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e576:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e578:	e841 2300 	strex	r3, r2, [r1]
 800e57c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e57e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e580:	2b00      	cmp	r3, #0
 800e582:	d1e4      	bne.n	800e54e <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d132      	bne.n	800e5f2 <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59a:	e853 3f00 	ldrex	r3, [r3]
 800e59e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e5a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5a2:	f023 0310 	bic.w	r3, r3, #16
 800e5a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e5b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e5b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e5ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e5bc:	e841 2300 	strex	r3, r2, [r1]
 800e5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d1e4      	bne.n	800e592 <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	69db      	ldr	r3, [r3, #28]
 800e5ce:	f003 0310 	and.w	r3, r3, #16
 800e5d2:	2b10      	cmp	r3, #16
 800e5d4:	d103      	bne.n	800e5de <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	2210      	movs	r2, #16
 800e5dc:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e5ea:	4611      	mov	r1, r2
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	4798      	blx	r3
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800e5f0:	e010      	b.n	800e614 <UART_RxISR_16BIT_FIFOEN+0x2c0>
          huart->RxCpltCallback(huart);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	4798      	blx	r3
        break;
 800e5fc:	e00a      	b.n	800e614 <UART_RxISR_16BIT_FIFOEN+0x2c0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800e5fe:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800e602:	2b00      	cmp	r3, #0
 800e604:	d006      	beq.n	800e614 <UART_RxISR_16BIT_FIFOEN+0x2c0>
 800e606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e60a:	f003 0320 	and.w	r3, r3, #32
 800e60e:	2b00      	cmp	r3, #0
 800e610:	f47f aec4 	bne.w	800e39c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800e61a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e61e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800e622:	2b00      	cmp	r3, #0
 800e624:	d049      	beq.n	800e6ba <UART_RxISR_16BIT_FIFOEN+0x366>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e62c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800e630:	429a      	cmp	r2, r3
 800e632:	d242      	bcs.n	800e6ba <UART_RxISR_16BIT_FIFOEN+0x366>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3308      	adds	r3, #8
 800e63a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63e:	e853 3f00 	ldrex	r3, [r3]
 800e642:	623b      	str	r3, [r7, #32]
   return(result);
 800e644:	6a3b      	ldr	r3, [r7, #32]
 800e646:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e64a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3308      	adds	r3, #8
 800e654:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e658:	633a      	str	r2, [r7, #48]	@ 0x30
 800e65a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e65e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e660:	e841 2300 	strex	r3, r2, [r1]
 800e664:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1e3      	bne.n	800e634 <UART_RxISR_16BIT_FIFOEN+0x2e0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4a16      	ldr	r2, [pc, #88]	@ (800e6c8 <UART_RxISR_16BIT_FIFOEN+0x374>)
 800e670:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	e853 3f00 	ldrex	r3, [r3]
 800e67e:	60fb      	str	r3, [r7, #12]
   return(result);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f043 0320 	orr.w	r3, r3, #32
 800e686:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	461a      	mov	r2, r3
 800e690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e694:	61fb      	str	r3, [r7, #28]
 800e696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e698:	69b9      	ldr	r1, [r7, #24]
 800e69a:	69fa      	ldr	r2, [r7, #28]
 800e69c:	e841 2300 	strex	r3, r2, [r1]
 800e6a0:	617b      	str	r3, [r7, #20]
   return(result);
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d1e4      	bne.n	800e672 <UART_RxISR_16BIT_FIFOEN+0x31e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e6a8:	e007      	b.n	800e6ba <UART_RxISR_16BIT_FIFOEN+0x366>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	699a      	ldr	r2, [r3, #24]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f042 0208 	orr.w	r2, r2, #8
 800e6b8:	619a      	str	r2, [r3, #24]
}
 800e6ba:	bf00      	nop
 800e6bc:	37b8      	adds	r7, #184	@ 0xb8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}
 800e6c2:	bf00      	nop
 800e6c4:	40008000 	.word	0x40008000
 800e6c8:	0800de25 	.word	0x0800de25

0800e6cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b083      	sub	sp, #12
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e6d4:	bf00      	nop
 800e6d6:	370c      	adds	r7, #12
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e6e8:	bf00      	nop
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e716:	2b01      	cmp	r3, #1
 800e718:	d101      	bne.n	800e71e <HAL_UARTEx_DisableFifoMode+0x16>
 800e71a:	2302      	movs	r3, #2
 800e71c:	e027      	b.n	800e76e <HAL_UARTEx_DisableFifoMode+0x66>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2201      	movs	r2, #1
 800e722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2224      	movs	r2, #36	@ 0x24
 800e72a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681a      	ldr	r2, [r3, #0]
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f022 0201 	bic.w	r2, r2, #1
 800e744:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e74c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2200      	movs	r2, #0
 800e752:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	68fa      	ldr	r2, [r7, #12]
 800e75a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2220      	movs	r2, #32
 800e760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e76c:	2300      	movs	r3, #0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b084      	sub	sp, #16
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
 800e782:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d101      	bne.n	800e792 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e78e:	2302      	movs	r3, #2
 800e790:	e02d      	b.n	800e7ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2201      	movs	r2, #1
 800e796:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2224      	movs	r2, #36	@ 0x24
 800e79e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f022 0201 	bic.w	r2, r2, #1
 800e7b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f850 	bl	800e874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2220      	movs	r2, #32
 800e7e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e7ec:	2300      	movs	r3, #0
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e7f6:	b580      	push	{r7, lr}
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
 800e7fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e806:	2b01      	cmp	r3, #1
 800e808:	d101      	bne.n	800e80e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e80a:	2302      	movs	r3, #2
 800e80c:	e02d      	b.n	800e86a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2201      	movs	r2, #1
 800e812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2224      	movs	r2, #36	@ 0x24
 800e81a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	681a      	ldr	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f022 0201 	bic.w	r2, r2, #1
 800e834:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	430a      	orrs	r2, r1
 800e848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f812 	bl	800e874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2220      	movs	r2, #32
 800e85c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2200      	movs	r2, #0
 800e864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
	...

0800e874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e874:	b480      	push	{r7}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e880:	2b00      	cmp	r3, #0
 800e882:	d108      	bne.n	800e896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2201      	movs	r2, #1
 800e890:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e894:	e031      	b.n	800e8fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e896:	2308      	movs	r3, #8
 800e898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e89a:	2308      	movs	r3, #8
 800e89c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	689b      	ldr	r3, [r3, #8]
 800e8a4:	0e5b      	lsrs	r3, r3, #25
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	f003 0307 	and.w	r3, r3, #7
 800e8ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	0f5b      	lsrs	r3, r3, #29
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	f003 0307 	and.w	r3, r3, #7
 800e8bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8be:	7bbb      	ldrb	r3, [r7, #14]
 800e8c0:	7b3a      	ldrb	r2, [r7, #12]
 800e8c2:	4911      	ldr	r1, [pc, #68]	@ (800e908 <UARTEx_SetNbDataToProcess+0x94>)
 800e8c4:	5c8a      	ldrb	r2, [r1, r2]
 800e8c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e8ca:	7b3a      	ldrb	r2, [r7, #12]
 800e8cc:	490f      	ldr	r1, [pc, #60]	@ (800e90c <UARTEx_SetNbDataToProcess+0x98>)
 800e8ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	7b7a      	ldrb	r2, [r7, #13]
 800e8e0:	4909      	ldr	r1, [pc, #36]	@ (800e908 <UARTEx_SetNbDataToProcess+0x94>)
 800e8e2:	5c8a      	ldrb	r2, [r1, r2]
 800e8e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8e8:	7b7a      	ldrb	r2, [r7, #13]
 800e8ea:	4908      	ldr	r1, [pc, #32]	@ (800e90c <UARTEx_SetNbDataToProcess+0x98>)
 800e8ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8f2:	b29a      	uxth	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e8fa:	bf00      	nop
 800e8fc:	3714      	adds	r7, #20
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop
 800e908:	08011340 	.word	0x08011340
 800e90c:	08011348 	.word	0x08011348

0800e910 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	ed93 7a06 	vldr	s14, [r3, #24]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	edd3 7a07 	vldr	s15, [r3, #28]
 800e926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	edd3 7a08 	vldr	s15, [r3, #32]
 800e930:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	edd3 7a06 	vldr	s15, [r3, #24]
 800e940:	eeb1 7a67 	vneg.f32	s14, s15
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	edd3 7a08 	vldr	s15, [r3, #32]
 800e94a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e94e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	6a1a      	ldr	r2, [r3, #32]
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d006      	beq.n	800e974 <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	330c      	adds	r3, #12
 800e96a:	220c      	movs	r2, #12
 800e96c:	2100      	movs	r1, #0
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 fcc4 	bl	800f2fc <memset>
  }

}
 800e974:	bf00      	nop
 800e976:	3708      	adds	r7, #8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e97c:	b480      	push	{r7}
 800e97e:	b08b      	sub	sp, #44	@ 0x2c
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	685b      	ldr	r3, [r3, #4]
 800e992:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	881b      	ldrh	r3, [r3, #0]
 800e99e:	461a      	mov	r2, r3
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	885b      	ldrh	r3, [r3, #2]
 800e9a4:	fb02 f303 	mul.w	r3, r2, r3
 800e9a8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e9ae:	e013      	b.n	800e9d8 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800e9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b2:	1d1a      	adds	r2, r3, #4
 800e9b4:	627a      	str	r2, [r7, #36]	@ 0x24
 800e9b6:	ed93 7a00 	vldr	s14, [r3]
 800e9ba:	6a3b      	ldr	r3, [r7, #32]
 800e9bc:	1d1a      	adds	r2, r3, #4
 800e9be:	623a      	str	r2, [r7, #32]
 800e9c0:	edd3 7a00 	vldr	s15, [r3]
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	1d1a      	adds	r2, r3, #4
 800e9c8:	61fa      	str	r2, [r7, #28]
 800e9ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9ce:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e9d2:	69bb      	ldr	r3, [r7, #24]
 800e9d4:	3b01      	subs	r3, #1
 800e9d6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1e8      	bne.n	800e9b0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e9de:	2300      	movs	r3, #0
 800e9e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800e9e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	372c      	adds	r7, #44	@ 0x2c
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f0:	4770      	bx	lr

0800e9f2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800e9f2:	b480      	push	{r7}
 800e9f4:	b085      	sub	sp, #20
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	60f8      	str	r0, [r7, #12]
 800e9fa:	607b      	str	r3, [r7, #4]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	817b      	strh	r3, [r7, #10]
 800ea00:	4613      	mov	r3, r2
 800ea02:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	897a      	ldrh	r2, [r7, #10]
 800ea08:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	893a      	ldrh	r2, [r7, #8]
 800ea0e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	687a      	ldr	r2, [r7, #4]
 800ea14:	605a      	str	r2, [r3, #4]
}
 800ea16:	bf00      	nop
 800ea18:	3714      	adds	r7, #20
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ea22:	b480      	push	{r7}
 800ea24:	b0bb      	sub	sp, #236	@ 0xec
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
 800ea2a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	685b      	ldr	r3, [r3, #4]
 800ea30:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	881b      	ldrh	r3, [r3, #0]
 800ea3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	885b      	ldrh	r3, [r3, #2]
 800ea42:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ea44:	f04f 0300 	mov.w	r3, #0
 800ea48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ea4c:	f04f 0300 	mov.w	r3, #0
 800ea50:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ea52:	2300      	movs	r3, #0
 800ea54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ea58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ea5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ea64:	e03b      	b.n	800eade <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ea66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ea72:	e00c      	b.n	800ea8e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ea74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea78:	1d1a      	adds	r2, r3, #4
 800ea7a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ea7e:	f04f 0200 	mov.w	r2, #0
 800ea82:	601a      	str	r2, [r3, #0]
        j--;
 800ea84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea88:	3b01      	subs	r3, #1
 800ea8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ea8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1ee      	bne.n	800ea74 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ea96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea9a:	1d1a      	adds	r2, r3, #4
 800ea9c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eaa0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800eaa4:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800eaa6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eab0:	e00c      	b.n	800eacc <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800eab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eab6:	1d1a      	adds	r2, r3, #4
 800eab8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800eabc:	f04f 0200 	mov.w	r2, #0
 800eac0:	601a      	str	r2, [r3, #0]
        j--;
 800eac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800eac6:	3b01      	subs	r3, #1
 800eac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800eacc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d1ee      	bne.n	800eab2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ead4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ead8:	3b01      	subs	r3, #1
 800eada:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800eade:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d1bf      	bne.n	800ea66 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800eae6:	2300      	movs	r3, #0
 800eae8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800eaec:	e2c7      	b.n	800f07e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800eaee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eaf2:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	885b      	ldrh	r3, [r3, #2]
 800eafc:	3301      	adds	r3, #1
 800eafe:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800eb02:	fb01 f303 	mul.w	r3, r1, r3
 800eb06:	009b      	lsls	r3, r3, #2
 800eb08:	4413      	add	r3, r2
 800eb0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800eb0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800eb18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800eb20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb24:	3301      	adds	r3, #1
 800eb26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eb2a:	e02c      	b.n	800eb86 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	685a      	ldr	r2, [r3, #4]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	885b      	ldrh	r3, [r3, #2]
 800eb34:	4619      	mov	r1, r3
 800eb36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb3a:	fb03 f101 	mul.w	r1, r3, r1
 800eb3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb42:	440b      	add	r3, r1
 800eb44:	009b      	lsls	r3, r3, #2
 800eb46:	4413      	add	r3, r2
 800eb48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800eb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800eb54:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800eb58:	eeb0 7ae7 	vabs.f32	s14, s15
 800eb5c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eb60:	eef0 7ae7 	vabs.f32	s15, s15
 800eb64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb6c:	dd06      	ble.n	800eb7c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800eb6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800eb76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800eb7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb80:	3301      	adds	r3, #1
 800eb82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eb86:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eb8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d3cd      	bcc.n	800eb2c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800eb90:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eb94:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9c:	f000 809b 	beq.w	800ecd6 <arm_mat_inverse_f32+0x2b4>
 800eba0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	f000 8094 	beq.w	800ecd6 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	885b      	ldrh	r3, [r3, #2]
 800ebc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ebc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ebc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ebca:	1ad3      	subs	r3, r2, r3
 800ebcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ebce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ebd2:	fb03 f202 	mul.w	r2, r3, r2
 800ebd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ebda:	4413      	add	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800ebe2:	4413      	add	r3, r2
 800ebe4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ebe8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ebea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ebee:	fb03 f202 	mul.w	r2, r3, r2
 800ebf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ebf6:	4413      	add	r3, r2
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ebfe:	4413      	add	r3, r2
 800ec00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec04:	2300      	movs	r3, #0
 800ec06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ec0a:	e018      	b.n	800ec3e <arm_mat_inverse_f32+0x21c>
 800ec0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec18:	1d1a      	adds	r2, r3, #4
 800ec1a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ec1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ec22:	6812      	ldr	r2, [r2, #0]
 800ec24:	601a      	str	r2, [r3, #0]
 800ec26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ec2a:	1d1a      	adds	r2, r3, #4
 800ec2c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ec30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec32:	601a      	str	r2, [r3, #0]
 800ec34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ec38:	3301      	adds	r3, #1
 800ec3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ec3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ec42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec44:	429a      	cmp	r2, r3
 800ec46:	dbe1      	blt.n	800ec0c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	885b      	ldrh	r3, [r3, #2]
 800ec5c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec66:	fb02 f303 	mul.w	r3, r2, r3
 800ec6a:	009b      	lsls	r3, r3, #2
 800ec6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ec70:	4413      	add	r3, r2
 800ec72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ec76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec7c:	fb02 f303 	mul.w	r3, r2, r3
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ec86:	4413      	add	r3, r2
 800ec88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec92:	e018      	b.n	800ecc6 <arm_mat_inverse_f32+0x2a4>
 800ec94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eca0:	1d1a      	adds	r2, r3, #4
 800eca2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800eca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ecaa:	6812      	ldr	r2, [r2, #0]
 800ecac:	601a      	str	r2, [r3, #0]
 800ecae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ecb2:	1d1a      	adds	r2, r3, #4
 800ecb4:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ecb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ecba:	601a      	str	r2, [r3, #0]
 800ecbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ecc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ecca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eccc:	429a      	cmp	r2, r3
 800ecce:	dbe1      	blt.n	800ec94 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ecd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d009      	beq.n	800ecf2 <arm_mat_inverse_f32+0x2d0>
 800ecde:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ece2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ece6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecea:	d102      	bne.n	800ecf2 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800ecec:	f06f 0304 	mvn.w	r3, #4
 800ecf0:	e208      	b.n	800f104 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800ecf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ecf6:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800ecfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ecfe:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	685b      	ldr	r3, [r3, #4]
 800ed06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	885b      	ldrh	r3, [r3, #2]
 800ed0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed1e:	fb03 f202 	mul.w	r2, r3, r2
 800ed22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed26:	4413      	add	r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800ed2e:	4413      	add	r3, r2
 800ed30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed34:	2300      	movs	r3, #0
 800ed36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed3a:	e011      	b.n	800ed60 <arm_mat_inverse_f32+0x33e>
 800ed3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed40:	1d1a      	adds	r2, r3, #4
 800ed42:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800ed46:	ed93 7a00 	vldr	s14, [r3]
 800ed4a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ed4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed52:	edc3 7a00 	vstr	s15, [r3]
 800ed56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed60:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ed64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed66:	429a      	cmp	r2, r3
 800ed68:	dbe8      	blt.n	800ed3c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	885b      	ldrh	r3, [r3, #2]
 800ed76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed80:	fb02 f303 	mul.w	r3, r2, r3
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ed90:	2300      	movs	r3, #0
 800ed92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ed96:	e011      	b.n	800edbc <arm_mat_inverse_f32+0x39a>
 800ed98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed9c:	1d1a      	adds	r2, r3, #4
 800ed9e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800eda2:	ed93 7a00 	vldr	s14, [r3]
 800eda6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800edaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edae:	edc3 7a00 	vstr	s15, [r3]
 800edb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800edb6:	3301      	adds	r3, #1
 800edb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800edbc:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800edc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc2:	429a      	cmp	r2, r3
 800edc4:	dbe8      	blt.n	800ed98 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800edc6:	2300      	movs	r3, #0
 800edc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800edcc:	e0ae      	b.n	800ef2c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	685a      	ldr	r2, [r3, #4]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	885b      	ldrh	r3, [r3, #2]
 800edd6:	4619      	mov	r1, r3
 800edd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eddc:	fb03 f101 	mul.w	r1, r3, r1
 800ede0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ede4:	440b      	add	r3, r1
 800ede6:	009b      	lsls	r3, r3, #2
 800ede8:	4413      	add	r3, r2
 800edea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800edee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	885b      	ldrh	r3, [r3, #2]
 800ee0c:	617b      	str	r3, [r7, #20]
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	613b      	str	r3, [r7, #16]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ee1e:	fb03 f202 	mul.w	r2, r3, r2
 800ee22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee26:	4413      	add	r3, r2
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ee2e:	4413      	add	r3, r2
 800ee30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee38:	fb03 f202 	mul.w	r2, r3, r2
 800ee3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ee40:	4413      	add	r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ee48:	4413      	add	r3, r2
 800ee4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee54:	e01a      	b.n	800ee8c <arm_mat_inverse_f32+0x46a>
 800ee56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ee5a:	1d1a      	adds	r2, r3, #4
 800ee5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ee60:	ed93 7a00 	vldr	s14, [r3]
 800ee64:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ee70:	1d1a      	adds	r2, r3, #4
 800ee72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ee76:	ed93 7a00 	vldr	s14, [r3]
 800ee7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee7e:	edc3 7a00 	vstr	s15, [r3]
 800ee82:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ee86:	3301      	adds	r3, #1
 800ee88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	dbdf      	blt.n	800ee56 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	885b      	ldrh	r3, [r3, #2]
 800eeaa:	60fb      	str	r3, [r7, #12]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	60bb      	str	r3, [r7, #8]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eeb6:	fb02 f303 	mul.w	r3, r2, r3
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800eec0:	4413      	add	r3, r2
 800eec2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eeca:	fb02 f303 	mul.w	r3, r2, r3
 800eece:	009b      	lsls	r3, r3, #2
 800eed0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eed4:	4413      	add	r3, r2
 800eed6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800eeda:	2300      	movs	r3, #0
 800eedc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eee0:	e01a      	b.n	800ef18 <arm_mat_inverse_f32+0x4f6>
 800eee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eee6:	1d1a      	adds	r2, r3, #4
 800eee8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800eeec:	ed93 7a00 	vldr	s14, [r3]
 800eef0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eefc:	1d1a      	adds	r2, r3, #4
 800eefe:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800ef02:	ed93 7a00 	vldr	s14, [r3]
 800ef06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef0a:	edc3 7a00 	vstr	s15, [r3]
 800ef0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ef12:	3301      	adds	r3, #1
 800ef14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ef18:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	dbdf      	blt.n	800eee2 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800ef22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ef26:	3301      	adds	r3, #1
 800ef28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ef2c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ef30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef32:	429a      	cmp	r2, r3
 800ef34:	f4ff af4b 	bcc.w	800edce <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ef38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ef40:	e092      	b.n	800f068 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685a      	ldr	r2, [r3, #4]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	885b      	ldrh	r3, [r3, #2]
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ef50:	fb03 f101 	mul.w	r1, r3, r1
 800ef54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef58:	440b      	add	r3, r1
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4413      	add	r3, r2
 800ef5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ef62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	685b      	ldr	r3, [r3, #4]
 800ef76:	677b      	str	r3, [r7, #116]	@ 0x74
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	885b      	ldrh	r3, [r3, #2]
 800ef7c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef84:	1ad3      	subs	r3, r2, r3
 800ef86:	623b      	str	r3, [r7, #32]
 800ef88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ef8e:	fb03 f202 	mul.w	r2, r3, r2
 800ef92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef96:	4413      	add	r3, r2
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ef9c:	4413      	add	r3, r2
 800ef9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800efa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800efa4:	fb03 f202 	mul.w	r2, r3, r2
 800efa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800efac:	4413      	add	r3, r2
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800efb2:	4413      	add	r3, r2
 800efb4:	677b      	str	r3, [r7, #116]	@ 0x74
 800efb6:	2300      	movs	r3, #0
 800efb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800efba:	e014      	b.n	800efe6 <arm_mat_inverse_f32+0x5c4>
 800efbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800efbe:	1d1a      	adds	r2, r3, #4
 800efc0:	677a      	str	r2, [r7, #116]	@ 0x74
 800efc2:	ed93 7a00 	vldr	s14, [r3]
 800efc6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800efca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800efd0:	1d1a      	adds	r2, r3, #4
 800efd2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800efd4:	ed93 7a00 	vldr	s14, [r3]
 800efd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efdc:	edc3 7a00 	vstr	s15, [r3]
 800efe0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800efe2:	3301      	adds	r3, #1
 800efe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800efe6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	429a      	cmp	r2, r3
 800efec:	dbe6      	blt.n	800efbc <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	885b      	ldrh	r3, [r3, #2]
 800effe:	61fb      	str	r3, [r7, #28]
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	61bb      	str	r3, [r7, #24]
 800f004:	69fb      	ldr	r3, [r7, #28]
 800f006:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f00a:	fb02 f303 	mul.w	r3, r2, r3
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f012:	4413      	add	r3, r2
 800f014:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f01a:	fb02 f303 	mul.w	r3, r2, r3
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f022:	4413      	add	r3, r2
 800f024:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f026:	2300      	movs	r3, #0
 800f028:	673b      	str	r3, [r7, #112]	@ 0x70
 800f02a:	e014      	b.n	800f056 <arm_mat_inverse_f32+0x634>
 800f02c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f02e:	1d1a      	adds	r2, r3, #4
 800f030:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f032:	ed93 7a00 	vldr	s14, [r3]
 800f036:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f03e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f040:	1d1a      	adds	r2, r3, #4
 800f042:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f044:	ed93 7a00 	vldr	s14, [r3]
 800f048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f04c:	edc3 7a00 	vstr	s15, [r3]
 800f050:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f052:	3301      	adds	r3, #1
 800f054:	673b      	str	r3, [r7, #112]	@ 0x70
 800f056:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	dbe6      	blt.n	800f02c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f05e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f062:	3301      	adds	r3, #1
 800f064:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f068:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f06c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f06e:	429a      	cmp	r2, r3
 800f070:	f4ff af67 	bcc.w	800ef42 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f078:	3301      	adds	r3, #1
 800f07a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f07e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f082:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f084:	429a      	cmp	r2, r3
 800f086:	f4ff ad32 	bcc.w	800eaee <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f08a:	2300      	movs	r3, #0
 800f08c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f094:	2b01      	cmp	r3, #1
 800f096:	d033      	beq.n	800f100 <arm_mat_inverse_f32+0x6de>
 800f098:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f09c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a4:	d12c      	bne.n	800f100 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f0b2:	e010      	b.n	800f0d6 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f0b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f0b8:	009b      	lsls	r3, r3, #2
 800f0ba:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f0bc:	4413      	add	r3, r2
 800f0be:	edd3 7a00 	vldr	s15, [r3]
 800f0c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ca:	d10d      	bne.n	800f0e8 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f0cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f0d0:	3301      	adds	r3, #1
 800f0d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f0d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f0da:	fb02 f303 	mul.w	r3, r2, r3
 800f0de:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f0e2:	429a      	cmp	r2, r3
 800f0e4:	d3e6      	bcc.n	800f0b4 <arm_mat_inverse_f32+0x692>
 800f0e6:	e000      	b.n	800f0ea <arm_mat_inverse_f32+0x6c8>
            break;
 800f0e8:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f0ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f0ee:	fb02 f303 	mul.w	r3, r2, r3
 800f0f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d102      	bne.n	800f100 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f0fa:	23fb      	movs	r3, #251	@ 0xfb
 800f0fc:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f100:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f104:	4618      	mov	r0, r3
 800f106:	37ec      	adds	r7, #236	@ 0xec
 800f108:	46bd      	mov	sp, r7
 800f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10e:	4770      	bx	lr

0800f110 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f110:	b480      	push	{r7}
 800f112:	b093      	sub	sp, #76	@ 0x4c
 800f114:	af00      	add	r7, sp, #0
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	685b      	ldr	r3, [r3, #4]
 800f12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	685b      	ldr	r3, [r3, #4]
 800f138:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	881b      	ldrh	r3, [r3, #0]
 800f13e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	885b      	ldrh	r3, [r3, #2]
 800f144:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	885b      	ldrh	r3, [r3, #2]
 800f14a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f14c:	2300      	movs	r3, #0
 800f14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f150:	8b7b      	ldrh	r3, [r7, #26]
 800f152:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f156:	009b      	lsls	r3, r3, #2
 800f158:	69fa      	ldr	r2, [r7, #28]
 800f15a:	4413      	add	r3, r2
 800f15c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f15e:	8b3b      	ldrh	r3, [r7, #24]
 800f160:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	685b      	ldr	r3, [r3, #4]
 800f166:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f168:	f04f 0300 	mov.w	r3, #0
 800f16c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f16e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f170:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f172:	8afb      	ldrh	r3, [r7, #22]
 800f174:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f176:	e017      	b.n	800f1a8 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f17a:	1d1a      	adds	r2, r3, #4
 800f17c:	647a      	str	r2, [r7, #68]	@ 0x44
 800f17e:	ed93 7a00 	vldr	s14, [r3]
 800f182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f184:	edd3 7a00 	vldr	s15, [r3]
 800f188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f18c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f190:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f194:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f198:	8b3b      	ldrh	r3, [r7, #24]
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f19e:	4413      	add	r3, r2
 800f1a0:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a4:	3b01      	subs	r3, #1
 800f1a6:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d1e4      	bne.n	800f178 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1b0:	1d1a      	adds	r2, r3, #4
 800f1b2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f1b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1b6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ba:	3b01      	subs	r3, #1
 800f1bc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f1be:	8b3a      	ldrh	r2, [r7, #24]
 800f1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c2:	1ad3      	subs	r3, r2, r3
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	6a3a      	ldr	r2, [r7, #32]
 800f1c8:	4413      	add	r3, r2
 800f1ca:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1ca      	bne.n	800f168 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f1d2:	8b3b      	ldrh	r3, [r7, #24]
 800f1d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f1d6:	4413      	add	r3, r2
 800f1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f1da:	8afb      	ldrh	r3, [r7, #22]
 800f1dc:	009b      	lsls	r3, r3, #2
 800f1de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f1e0:	4413      	add	r3, r2
 800f1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e6:	3b01      	subs	r3, #1
 800f1e8:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1b1      	bne.n	800f154 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f1f4:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	374c      	adds	r7, #76	@ 0x4c
 800f1fc:	46bd      	mov	sp, r7
 800f1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f202:	4770      	bx	lr

0800f204 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f204:	b480      	push	{r7}
 800f206:	b08b      	sub	sp, #44	@ 0x2c
 800f208:	af00      	add	r7, sp, #0
 800f20a:	60f8      	str	r0, [r7, #12]
 800f20c:	60b9      	str	r1, [r7, #8]
 800f20e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	685b      	ldr	r3, [r3, #4]
 800f21a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685b      	ldr	r3, [r3, #4]
 800f220:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	881b      	ldrh	r3, [r3, #0]
 800f226:	461a      	mov	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	885b      	ldrh	r3, [r3, #2]
 800f22c:	fb02 f303 	mul.w	r3, r2, r3
 800f230:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f236:	e013      	b.n	800f260 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23a:	1d1a      	adds	r2, r3, #4
 800f23c:	627a      	str	r2, [r7, #36]	@ 0x24
 800f23e:	ed93 7a00 	vldr	s14, [r3]
 800f242:	6a3b      	ldr	r3, [r7, #32]
 800f244:	1d1a      	adds	r2, r3, #4
 800f246:	623a      	str	r2, [r7, #32]
 800f248:	edd3 7a00 	vldr	s15, [r3]
 800f24c:	69fb      	ldr	r3, [r7, #28]
 800f24e:	1d1a      	adds	r2, r3, #4
 800f250:	61fa      	str	r2, [r7, #28]
 800f252:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f256:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f260:	69bb      	ldr	r3, [r7, #24]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d1e8      	bne.n	800f238 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f266:	2300      	movs	r3, #0
 800f268:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f26a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	372c      	adds	r7, #44	@ 0x2c
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f27a:	b480      	push	{r7}
 800f27c:	b08b      	sub	sp, #44	@ 0x2c
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	885b      	ldrh	r3, [r3, #2]
 800f29a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f29c:	89fb      	ldrh	r3, [r7, #14]
 800f29e:	61bb      	str	r3, [r7, #24]
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f2a4:	697b      	ldr	r3, [r7, #20]
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	4413      	add	r3, r2
 800f2ac:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f2ae:	89bb      	ldrh	r3, [r7, #12]
 800f2b0:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f2b2:	e00d      	b.n	800f2d0 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2b6:	1d1a      	adds	r2, r3, #4
 800f2b8:	627a      	str	r2, [r7, #36]	@ 0x24
 800f2ba:	681a      	ldr	r2, [r3, #0]
 800f2bc:	6a3b      	ldr	r3, [r7, #32]
 800f2be:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f2c0:	89fb      	ldrh	r3, [r7, #14]
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	6a3a      	ldr	r2, [r7, #32]
 800f2c6:	4413      	add	r3, r2
 800f2c8:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f2ca:	69fb      	ldr	r3, [r7, #28]
 800f2cc:	3b01      	subs	r3, #1
 800f2ce:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f2d0:	69fb      	ldr	r3, [r7, #28]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1ee      	bne.n	800f2b4 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f2d6:	697b      	ldr	r3, [r7, #20]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1dd      	bne.n	800f2a4 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f2ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	372c      	adds	r7, #44	@ 0x2c
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fa:	4770      	bx	lr

0800f2fc <memset>:
 800f2fc:	4402      	add	r2, r0
 800f2fe:	4603      	mov	r3, r0
 800f300:	4293      	cmp	r3, r2
 800f302:	d100      	bne.n	800f306 <memset+0xa>
 800f304:	4770      	bx	lr
 800f306:	f803 1b01 	strb.w	r1, [r3], #1
 800f30a:	e7f9      	b.n	800f300 <memset+0x4>

0800f30c <__errno>:
 800f30c:	4b01      	ldr	r3, [pc, #4]	@ (800f314 <__errno+0x8>)
 800f30e:	6818      	ldr	r0, [r3, #0]
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	20000270 	.word	0x20000270

0800f318 <__libc_init_array>:
 800f318:	b570      	push	{r4, r5, r6, lr}
 800f31a:	4d0d      	ldr	r5, [pc, #52]	@ (800f350 <__libc_init_array+0x38>)
 800f31c:	4c0d      	ldr	r4, [pc, #52]	@ (800f354 <__libc_init_array+0x3c>)
 800f31e:	1b64      	subs	r4, r4, r5
 800f320:	10a4      	asrs	r4, r4, #2
 800f322:	2600      	movs	r6, #0
 800f324:	42a6      	cmp	r6, r4
 800f326:	d109      	bne.n	800f33c <__libc_init_array+0x24>
 800f328:	4d0b      	ldr	r5, [pc, #44]	@ (800f358 <__libc_init_array+0x40>)
 800f32a:	4c0c      	ldr	r4, [pc, #48]	@ (800f35c <__libc_init_array+0x44>)
 800f32c:	f001 ffe2 	bl	80112f4 <_init>
 800f330:	1b64      	subs	r4, r4, r5
 800f332:	10a4      	asrs	r4, r4, #2
 800f334:	2600      	movs	r6, #0
 800f336:	42a6      	cmp	r6, r4
 800f338:	d105      	bne.n	800f346 <__libc_init_array+0x2e>
 800f33a:	bd70      	pop	{r4, r5, r6, pc}
 800f33c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f340:	4798      	blx	r3
 800f342:	3601      	adds	r6, #1
 800f344:	e7ee      	b.n	800f324 <__libc_init_array+0xc>
 800f346:	f855 3b04 	ldr.w	r3, [r5], #4
 800f34a:	4798      	blx	r3
 800f34c:	3601      	adds	r6, #1
 800f34e:	e7f2      	b.n	800f336 <__libc_init_array+0x1e>
 800f350:	08011770 	.word	0x08011770
 800f354:	08011770 	.word	0x08011770
 800f358:	08011770 	.word	0x08011770
 800f35c:	08011774 	.word	0x08011774

0800f360 <memcpy>:
 800f360:	440a      	add	r2, r1
 800f362:	4291      	cmp	r1, r2
 800f364:	f100 33ff 	add.w	r3, r0, #4294967295
 800f368:	d100      	bne.n	800f36c <memcpy+0xc>
 800f36a:	4770      	bx	lr
 800f36c:	b510      	push	{r4, lr}
 800f36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f372:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f376:	4291      	cmp	r1, r2
 800f378:	d1f9      	bne.n	800f36e <memcpy+0xe>
 800f37a:	bd10      	pop	{r4, pc}

0800f37c <acos>:
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	ed2d 8b02 	vpush	{d8}
 800f382:	ec55 4b10 	vmov	r4, r5, d0
 800f386:	f000 fa6b 	bl	800f860 <__ieee754_acos>
 800f38a:	4622      	mov	r2, r4
 800f38c:	462b      	mov	r3, r5
 800f38e:	4620      	mov	r0, r4
 800f390:	4629      	mov	r1, r5
 800f392:	eeb0 8a40 	vmov.f32	s16, s0
 800f396:	eef0 8a60 	vmov.f32	s17, s1
 800f39a:	f7f1 fb93 	bl	8000ac4 <__aeabi_dcmpun>
 800f39e:	b9a8      	cbnz	r0, 800f3cc <acos+0x50>
 800f3a0:	ec45 4b10 	vmov	d0, r4, r5
 800f3a4:	f000 f8ba 	bl	800f51c <fabs>
 800f3a8:	4b0c      	ldr	r3, [pc, #48]	@ (800f3dc <acos+0x60>)
 800f3aa:	ec51 0b10 	vmov	r0, r1, d0
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f7f1 fb7e 	bl	8000ab0 <__aeabi_dcmpgt>
 800f3b4:	b150      	cbz	r0, 800f3cc <acos+0x50>
 800f3b6:	f7ff ffa9 	bl	800f30c <__errno>
 800f3ba:	ecbd 8b02 	vpop	{d8}
 800f3be:	2321      	movs	r3, #33	@ 0x21
 800f3c0:	6003      	str	r3, [r0, #0]
 800f3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f3c6:	4806      	ldr	r0, [pc, #24]	@ (800f3e0 <acos+0x64>)
 800f3c8:	f000 b966 	b.w	800f698 <nan>
 800f3cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f3d0:	eef0 0a68 	vmov.f32	s1, s17
 800f3d4:	ecbd 8b02 	vpop	{d8}
 800f3d8:	bd38      	pop	{r3, r4, r5, pc}
 800f3da:	bf00      	nop
 800f3dc:	3ff00000 	.word	0x3ff00000
 800f3e0:	08011350 	.word	0x08011350

0800f3e4 <pow>:
 800f3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3e6:	ed2d 8b02 	vpush	{d8}
 800f3ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f3ee:	eef0 8a60 	vmov.f32	s17, s1
 800f3f2:	ec55 4b11 	vmov	r4, r5, d1
 800f3f6:	f000 fc8f 	bl	800fd18 <__ieee754_pow>
 800f3fa:	4622      	mov	r2, r4
 800f3fc:	462b      	mov	r3, r5
 800f3fe:	4620      	mov	r0, r4
 800f400:	4629      	mov	r1, r5
 800f402:	ec57 6b10 	vmov	r6, r7, d0
 800f406:	f7f1 fb5d 	bl	8000ac4 <__aeabi_dcmpun>
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d13b      	bne.n	800f486 <pow+0xa2>
 800f40e:	ec51 0b18 	vmov	r0, r1, d8
 800f412:	2200      	movs	r2, #0
 800f414:	2300      	movs	r3, #0
 800f416:	f7f1 fb23 	bl	8000a60 <__aeabi_dcmpeq>
 800f41a:	b1b8      	cbz	r0, 800f44c <pow+0x68>
 800f41c:	2200      	movs	r2, #0
 800f41e:	2300      	movs	r3, #0
 800f420:	4620      	mov	r0, r4
 800f422:	4629      	mov	r1, r5
 800f424:	f7f1 fb1c 	bl	8000a60 <__aeabi_dcmpeq>
 800f428:	2800      	cmp	r0, #0
 800f42a:	d146      	bne.n	800f4ba <pow+0xd6>
 800f42c:	ec45 4b10 	vmov	d0, r4, r5
 800f430:	f000 f924 	bl	800f67c <finite>
 800f434:	b338      	cbz	r0, 800f486 <pow+0xa2>
 800f436:	2200      	movs	r2, #0
 800f438:	2300      	movs	r3, #0
 800f43a:	4620      	mov	r0, r4
 800f43c:	4629      	mov	r1, r5
 800f43e:	f7f1 fb19 	bl	8000a74 <__aeabi_dcmplt>
 800f442:	b300      	cbz	r0, 800f486 <pow+0xa2>
 800f444:	f7ff ff62 	bl	800f30c <__errno>
 800f448:	2322      	movs	r3, #34	@ 0x22
 800f44a:	e01b      	b.n	800f484 <pow+0xa0>
 800f44c:	ec47 6b10 	vmov	d0, r6, r7
 800f450:	f000 f914 	bl	800f67c <finite>
 800f454:	b9e0      	cbnz	r0, 800f490 <pow+0xac>
 800f456:	eeb0 0a48 	vmov.f32	s0, s16
 800f45a:	eef0 0a68 	vmov.f32	s1, s17
 800f45e:	f000 f90d 	bl	800f67c <finite>
 800f462:	b1a8      	cbz	r0, 800f490 <pow+0xac>
 800f464:	ec45 4b10 	vmov	d0, r4, r5
 800f468:	f000 f908 	bl	800f67c <finite>
 800f46c:	b180      	cbz	r0, 800f490 <pow+0xac>
 800f46e:	4632      	mov	r2, r6
 800f470:	463b      	mov	r3, r7
 800f472:	4630      	mov	r0, r6
 800f474:	4639      	mov	r1, r7
 800f476:	f7f1 fb25 	bl	8000ac4 <__aeabi_dcmpun>
 800f47a:	2800      	cmp	r0, #0
 800f47c:	d0e2      	beq.n	800f444 <pow+0x60>
 800f47e:	f7ff ff45 	bl	800f30c <__errno>
 800f482:	2321      	movs	r3, #33	@ 0x21
 800f484:	6003      	str	r3, [r0, #0]
 800f486:	ecbd 8b02 	vpop	{d8}
 800f48a:	ec47 6b10 	vmov	d0, r6, r7
 800f48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f490:	2200      	movs	r2, #0
 800f492:	2300      	movs	r3, #0
 800f494:	4630      	mov	r0, r6
 800f496:	4639      	mov	r1, r7
 800f498:	f7f1 fae2 	bl	8000a60 <__aeabi_dcmpeq>
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d0f2      	beq.n	800f486 <pow+0xa2>
 800f4a0:	eeb0 0a48 	vmov.f32	s0, s16
 800f4a4:	eef0 0a68 	vmov.f32	s1, s17
 800f4a8:	f000 f8e8 	bl	800f67c <finite>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	d0ea      	beq.n	800f486 <pow+0xa2>
 800f4b0:	ec45 4b10 	vmov	d0, r4, r5
 800f4b4:	f000 f8e2 	bl	800f67c <finite>
 800f4b8:	e7c3      	b.n	800f442 <pow+0x5e>
 800f4ba:	4f01      	ldr	r7, [pc, #4]	@ (800f4c0 <pow+0xdc>)
 800f4bc:	2600      	movs	r6, #0
 800f4be:	e7e2      	b.n	800f486 <pow+0xa2>
 800f4c0:	3ff00000 	.word	0x3ff00000

0800f4c4 <sqrt>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	ed2d 8b02 	vpush	{d8}
 800f4ca:	ec55 4b10 	vmov	r4, r5, d0
 800f4ce:	f000 f8eb 	bl	800f6a8 <__ieee754_sqrt>
 800f4d2:	4622      	mov	r2, r4
 800f4d4:	462b      	mov	r3, r5
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	4629      	mov	r1, r5
 800f4da:	eeb0 8a40 	vmov.f32	s16, s0
 800f4de:	eef0 8a60 	vmov.f32	s17, s1
 800f4e2:	f7f1 faef 	bl	8000ac4 <__aeabi_dcmpun>
 800f4e6:	b990      	cbnz	r0, 800f50e <sqrt+0x4a>
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	f7f1 fac0 	bl	8000a74 <__aeabi_dcmplt>
 800f4f4:	b158      	cbz	r0, 800f50e <sqrt+0x4a>
 800f4f6:	f7ff ff09 	bl	800f30c <__errno>
 800f4fa:	2321      	movs	r3, #33	@ 0x21
 800f4fc:	6003      	str	r3, [r0, #0]
 800f4fe:	2200      	movs	r2, #0
 800f500:	2300      	movs	r3, #0
 800f502:	4610      	mov	r0, r2
 800f504:	4619      	mov	r1, r3
 800f506:	f7f1 f96d 	bl	80007e4 <__aeabi_ddiv>
 800f50a:	ec41 0b18 	vmov	d8, r0, r1
 800f50e:	eeb0 0a48 	vmov.f32	s0, s16
 800f512:	eef0 0a68 	vmov.f32	s1, s17
 800f516:	ecbd 8b02 	vpop	{d8}
 800f51a:	bd38      	pop	{r3, r4, r5, pc}

0800f51c <fabs>:
 800f51c:	ec51 0b10 	vmov	r0, r1, d0
 800f520:	4602      	mov	r2, r0
 800f522:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f526:	ec43 2b10 	vmov	d0, r2, r3
 800f52a:	4770      	bx	lr

0800f52c <sqrtf>:
 800f52c:	b508      	push	{r3, lr}
 800f52e:	ed2d 8b02 	vpush	{d8}
 800f532:	eeb0 8a40 	vmov.f32	s16, s0
 800f536:	f000 f98d 	bl	800f854 <__ieee754_sqrtf>
 800f53a:	eeb4 8a48 	vcmp.f32	s16, s16
 800f53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f542:	d60c      	bvs.n	800f55e <sqrtf+0x32>
 800f544:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f564 <sqrtf+0x38>
 800f548:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f550:	d505      	bpl.n	800f55e <sqrtf+0x32>
 800f552:	f7ff fedb 	bl	800f30c <__errno>
 800f556:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f55a:	2321      	movs	r3, #33	@ 0x21
 800f55c:	6003      	str	r3, [r0, #0]
 800f55e:	ecbd 8b02 	vpop	{d8}
 800f562:	bd08      	pop	{r3, pc}
 800f564:	00000000 	.word	0x00000000

0800f568 <cosf>:
 800f568:	ee10 3a10 	vmov	r3, s0
 800f56c:	b507      	push	{r0, r1, r2, lr}
 800f56e:	4a1e      	ldr	r2, [pc, #120]	@ (800f5e8 <cosf+0x80>)
 800f570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f574:	4293      	cmp	r3, r2
 800f576:	d806      	bhi.n	800f586 <cosf+0x1e>
 800f578:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f5ec <cosf+0x84>
 800f57c:	b003      	add	sp, #12
 800f57e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f582:	f001 b913 	b.w	80107ac <__kernel_cosf>
 800f586:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f58a:	d304      	bcc.n	800f596 <cosf+0x2e>
 800f58c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f590:	b003      	add	sp, #12
 800f592:	f85d fb04 	ldr.w	pc, [sp], #4
 800f596:	4668      	mov	r0, sp
 800f598:	f001 f9a8 	bl	80108ec <__ieee754_rem_pio2f>
 800f59c:	f000 0003 	and.w	r0, r0, #3
 800f5a0:	2801      	cmp	r0, #1
 800f5a2:	d009      	beq.n	800f5b8 <cosf+0x50>
 800f5a4:	2802      	cmp	r0, #2
 800f5a6:	d010      	beq.n	800f5ca <cosf+0x62>
 800f5a8:	b9b0      	cbnz	r0, 800f5d8 <cosf+0x70>
 800f5aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5ae:	ed9d 0a00 	vldr	s0, [sp]
 800f5b2:	f001 f8fb 	bl	80107ac <__kernel_cosf>
 800f5b6:	e7eb      	b.n	800f590 <cosf+0x28>
 800f5b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5bc:	ed9d 0a00 	vldr	s0, [sp]
 800f5c0:	f001 f94c 	bl	801085c <__kernel_sinf>
 800f5c4:	eeb1 0a40 	vneg.f32	s0, s0
 800f5c8:	e7e2      	b.n	800f590 <cosf+0x28>
 800f5ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5ce:	ed9d 0a00 	vldr	s0, [sp]
 800f5d2:	f001 f8eb 	bl	80107ac <__kernel_cosf>
 800f5d6:	e7f5      	b.n	800f5c4 <cosf+0x5c>
 800f5d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5dc:	ed9d 0a00 	vldr	s0, [sp]
 800f5e0:	2001      	movs	r0, #1
 800f5e2:	f001 f93b 	bl	801085c <__kernel_sinf>
 800f5e6:	e7d3      	b.n	800f590 <cosf+0x28>
 800f5e8:	3f490fd8 	.word	0x3f490fd8
 800f5ec:	00000000 	.word	0x00000000

0800f5f0 <sinf>:
 800f5f0:	ee10 3a10 	vmov	r3, s0
 800f5f4:	b507      	push	{r0, r1, r2, lr}
 800f5f6:	4a1f      	ldr	r2, [pc, #124]	@ (800f674 <sinf+0x84>)
 800f5f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5fc:	4293      	cmp	r3, r2
 800f5fe:	d807      	bhi.n	800f610 <sinf+0x20>
 800f600:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f678 <sinf+0x88>
 800f604:	2000      	movs	r0, #0
 800f606:	b003      	add	sp, #12
 800f608:	f85d eb04 	ldr.w	lr, [sp], #4
 800f60c:	f001 b926 	b.w	801085c <__kernel_sinf>
 800f610:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f614:	d304      	bcc.n	800f620 <sinf+0x30>
 800f616:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f61a:	b003      	add	sp, #12
 800f61c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f620:	4668      	mov	r0, sp
 800f622:	f001 f963 	bl	80108ec <__ieee754_rem_pio2f>
 800f626:	f000 0003 	and.w	r0, r0, #3
 800f62a:	2801      	cmp	r0, #1
 800f62c:	d00a      	beq.n	800f644 <sinf+0x54>
 800f62e:	2802      	cmp	r0, #2
 800f630:	d00f      	beq.n	800f652 <sinf+0x62>
 800f632:	b9c0      	cbnz	r0, 800f666 <sinf+0x76>
 800f634:	eddd 0a01 	vldr	s1, [sp, #4]
 800f638:	ed9d 0a00 	vldr	s0, [sp]
 800f63c:	2001      	movs	r0, #1
 800f63e:	f001 f90d 	bl	801085c <__kernel_sinf>
 800f642:	e7ea      	b.n	800f61a <sinf+0x2a>
 800f644:	eddd 0a01 	vldr	s1, [sp, #4]
 800f648:	ed9d 0a00 	vldr	s0, [sp]
 800f64c:	f001 f8ae 	bl	80107ac <__kernel_cosf>
 800f650:	e7e3      	b.n	800f61a <sinf+0x2a>
 800f652:	eddd 0a01 	vldr	s1, [sp, #4]
 800f656:	ed9d 0a00 	vldr	s0, [sp]
 800f65a:	2001      	movs	r0, #1
 800f65c:	f001 f8fe 	bl	801085c <__kernel_sinf>
 800f660:	eeb1 0a40 	vneg.f32	s0, s0
 800f664:	e7d9      	b.n	800f61a <sinf+0x2a>
 800f666:	eddd 0a01 	vldr	s1, [sp, #4]
 800f66a:	ed9d 0a00 	vldr	s0, [sp]
 800f66e:	f001 f89d 	bl	80107ac <__kernel_cosf>
 800f672:	e7f5      	b.n	800f660 <sinf+0x70>
 800f674:	3f490fd8 	.word	0x3f490fd8
 800f678:	00000000 	.word	0x00000000

0800f67c <finite>:
 800f67c:	b082      	sub	sp, #8
 800f67e:	ed8d 0b00 	vstr	d0, [sp]
 800f682:	9801      	ldr	r0, [sp, #4]
 800f684:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800f688:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800f68c:	0fc0      	lsrs	r0, r0, #31
 800f68e:	b002      	add	sp, #8
 800f690:	4770      	bx	lr
 800f692:	0000      	movs	r0, r0
 800f694:	0000      	movs	r0, r0
	...

0800f698 <nan>:
 800f698:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f6a0 <nan+0x8>
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	00000000 	.word	0x00000000
 800f6a4:	7ff80000 	.word	0x7ff80000

0800f6a8 <__ieee754_sqrt>:
 800f6a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	4a66      	ldr	r2, [pc, #408]	@ (800f848 <__ieee754_sqrt+0x1a0>)
 800f6ae:	ec55 4b10 	vmov	r4, r5, d0
 800f6b2:	43aa      	bics	r2, r5
 800f6b4:	462b      	mov	r3, r5
 800f6b6:	4621      	mov	r1, r4
 800f6b8:	d110      	bne.n	800f6dc <__ieee754_sqrt+0x34>
 800f6ba:	4622      	mov	r2, r4
 800f6bc:	4620      	mov	r0, r4
 800f6be:	4629      	mov	r1, r5
 800f6c0:	f7f0 ff66 	bl	8000590 <__aeabi_dmul>
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	460b      	mov	r3, r1
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	f7f0 fdaa 	bl	8000224 <__adddf3>
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	460d      	mov	r5, r1
 800f6d4:	ec45 4b10 	vmov	d0, r4, r5
 800f6d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6dc:	2d00      	cmp	r5, #0
 800f6de:	dc0e      	bgt.n	800f6fe <__ieee754_sqrt+0x56>
 800f6e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f6e4:	4322      	orrs	r2, r4
 800f6e6:	d0f5      	beq.n	800f6d4 <__ieee754_sqrt+0x2c>
 800f6e8:	b19d      	cbz	r5, 800f712 <__ieee754_sqrt+0x6a>
 800f6ea:	4622      	mov	r2, r4
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	4629      	mov	r1, r5
 800f6f0:	f7f0 fd96 	bl	8000220 <__aeabi_dsub>
 800f6f4:	4602      	mov	r2, r0
 800f6f6:	460b      	mov	r3, r1
 800f6f8:	f7f1 f874 	bl	80007e4 <__aeabi_ddiv>
 800f6fc:	e7e8      	b.n	800f6d0 <__ieee754_sqrt+0x28>
 800f6fe:	152a      	asrs	r2, r5, #20
 800f700:	d115      	bne.n	800f72e <__ieee754_sqrt+0x86>
 800f702:	2000      	movs	r0, #0
 800f704:	e009      	b.n	800f71a <__ieee754_sqrt+0x72>
 800f706:	0acb      	lsrs	r3, r1, #11
 800f708:	3a15      	subs	r2, #21
 800f70a:	0549      	lsls	r1, r1, #21
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d0fa      	beq.n	800f706 <__ieee754_sqrt+0x5e>
 800f710:	e7f7      	b.n	800f702 <__ieee754_sqrt+0x5a>
 800f712:	462a      	mov	r2, r5
 800f714:	e7fa      	b.n	800f70c <__ieee754_sqrt+0x64>
 800f716:	005b      	lsls	r3, r3, #1
 800f718:	3001      	adds	r0, #1
 800f71a:	02dc      	lsls	r4, r3, #11
 800f71c:	d5fb      	bpl.n	800f716 <__ieee754_sqrt+0x6e>
 800f71e:	1e44      	subs	r4, r0, #1
 800f720:	1b12      	subs	r2, r2, r4
 800f722:	f1c0 0420 	rsb	r4, r0, #32
 800f726:	fa21 f404 	lsr.w	r4, r1, r4
 800f72a:	4323      	orrs	r3, r4
 800f72c:	4081      	lsls	r1, r0
 800f72e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f732:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800f736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f73a:	07d2      	lsls	r2, r2, #31
 800f73c:	bf5c      	itt	pl
 800f73e:	005b      	lslpl	r3, r3, #1
 800f740:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f744:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f748:	bf58      	it	pl
 800f74a:	0049      	lslpl	r1, r1, #1
 800f74c:	2600      	movs	r6, #0
 800f74e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f752:	107f      	asrs	r7, r7, #1
 800f754:	0049      	lsls	r1, r1, #1
 800f756:	2016      	movs	r0, #22
 800f758:	4632      	mov	r2, r6
 800f75a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f75e:	1915      	adds	r5, r2, r4
 800f760:	429d      	cmp	r5, r3
 800f762:	bfde      	ittt	le
 800f764:	192a      	addle	r2, r5, r4
 800f766:	1b5b      	suble	r3, r3, r5
 800f768:	1936      	addle	r6, r6, r4
 800f76a:	0fcd      	lsrs	r5, r1, #31
 800f76c:	3801      	subs	r0, #1
 800f76e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800f772:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f776:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f77a:	d1f0      	bne.n	800f75e <__ieee754_sqrt+0xb6>
 800f77c:	4605      	mov	r5, r0
 800f77e:	2420      	movs	r4, #32
 800f780:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f784:	4293      	cmp	r3, r2
 800f786:	eb0c 0e00 	add.w	lr, ip, r0
 800f78a:	dc02      	bgt.n	800f792 <__ieee754_sqrt+0xea>
 800f78c:	d113      	bne.n	800f7b6 <__ieee754_sqrt+0x10e>
 800f78e:	458e      	cmp	lr, r1
 800f790:	d811      	bhi.n	800f7b6 <__ieee754_sqrt+0x10e>
 800f792:	f1be 0f00 	cmp.w	lr, #0
 800f796:	eb0e 000c 	add.w	r0, lr, ip
 800f79a:	da3f      	bge.n	800f81c <__ieee754_sqrt+0x174>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	db3d      	blt.n	800f81c <__ieee754_sqrt+0x174>
 800f7a0:	f102 0801 	add.w	r8, r2, #1
 800f7a4:	1a9b      	subs	r3, r3, r2
 800f7a6:	458e      	cmp	lr, r1
 800f7a8:	bf88      	it	hi
 800f7aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f7ae:	eba1 010e 	sub.w	r1, r1, lr
 800f7b2:	4465      	add	r5, ip
 800f7b4:	4642      	mov	r2, r8
 800f7b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f7ba:	3c01      	subs	r4, #1
 800f7bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f7c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f7c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f7c8:	d1dc      	bne.n	800f784 <__ieee754_sqrt+0xdc>
 800f7ca:	4319      	orrs	r1, r3
 800f7cc:	d01b      	beq.n	800f806 <__ieee754_sqrt+0x15e>
 800f7ce:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800f84c <__ieee754_sqrt+0x1a4>
 800f7d2:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800f850 <__ieee754_sqrt+0x1a8>
 800f7d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7da:	e9db 2300 	ldrd	r2, r3, [fp]
 800f7de:	f7f0 fd1f 	bl	8000220 <__aeabi_dsub>
 800f7e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	4640      	mov	r0, r8
 800f7ec:	4649      	mov	r1, r9
 800f7ee:	f7f1 f94b 	bl	8000a88 <__aeabi_dcmple>
 800f7f2:	b140      	cbz	r0, 800f806 <__ieee754_sqrt+0x15e>
 800f7f4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800f7f8:	e9da 0100 	ldrd	r0, r1, [sl]
 800f7fc:	e9db 2300 	ldrd	r2, r3, [fp]
 800f800:	d10e      	bne.n	800f820 <__ieee754_sqrt+0x178>
 800f802:	3601      	adds	r6, #1
 800f804:	4625      	mov	r5, r4
 800f806:	1073      	asrs	r3, r6, #1
 800f808:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800f80c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800f810:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800f814:	086b      	lsrs	r3, r5, #1
 800f816:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800f81a:	e759      	b.n	800f6d0 <__ieee754_sqrt+0x28>
 800f81c:	4690      	mov	r8, r2
 800f81e:	e7c1      	b.n	800f7a4 <__ieee754_sqrt+0xfc>
 800f820:	f7f0 fd00 	bl	8000224 <__adddf3>
 800f824:	e9da 8900 	ldrd	r8, r9, [sl]
 800f828:	4602      	mov	r2, r0
 800f82a:	460b      	mov	r3, r1
 800f82c:	4640      	mov	r0, r8
 800f82e:	4649      	mov	r1, r9
 800f830:	f7f1 f920 	bl	8000a74 <__aeabi_dcmplt>
 800f834:	b120      	cbz	r0, 800f840 <__ieee754_sqrt+0x198>
 800f836:	1cab      	adds	r3, r5, #2
 800f838:	bf08      	it	eq
 800f83a:	3601      	addeq	r6, #1
 800f83c:	3502      	adds	r5, #2
 800f83e:	e7e2      	b.n	800f806 <__ieee754_sqrt+0x15e>
 800f840:	1c6b      	adds	r3, r5, #1
 800f842:	f023 0501 	bic.w	r5, r3, #1
 800f846:	e7de      	b.n	800f806 <__ieee754_sqrt+0x15e>
 800f848:	7ff00000 	.word	0x7ff00000
 800f84c:	08011360 	.word	0x08011360
 800f850:	08011358 	.word	0x08011358

0800f854 <__ieee754_sqrtf>:
 800f854:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f858:	4770      	bx	lr
 800f85a:	0000      	movs	r0, r0
 800f85c:	0000      	movs	r0, r0
	...

0800f860 <__ieee754_acos>:
 800f860:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f864:	ec55 4b10 	vmov	r4, r5, d0
 800f868:	49b7      	ldr	r1, [pc, #732]	@ (800fb48 <__ieee754_acos+0x2e8>)
 800f86a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f86e:	428b      	cmp	r3, r1
 800f870:	d919      	bls.n	800f8a6 <__ieee754_acos+0x46>
 800f872:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800f876:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800f87a:	4323      	orrs	r3, r4
 800f87c:	d106      	bne.n	800f88c <__ieee754_acos+0x2c>
 800f87e:	2d00      	cmp	r5, #0
 800f880:	f340 8210 	ble.w	800fca4 <__ieee754_acos+0x444>
 800f884:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800fad8 <__ieee754_acos+0x278>
 800f888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88c:	4622      	mov	r2, r4
 800f88e:	462b      	mov	r3, r5
 800f890:	4620      	mov	r0, r4
 800f892:	4629      	mov	r1, r5
 800f894:	f7f0 fcc4 	bl	8000220 <__aeabi_dsub>
 800f898:	4602      	mov	r2, r0
 800f89a:	460b      	mov	r3, r1
 800f89c:	f7f0 ffa2 	bl	80007e4 <__aeabi_ddiv>
 800f8a0:	ec41 0b10 	vmov	d0, r0, r1
 800f8a4:	e7f0      	b.n	800f888 <__ieee754_acos+0x28>
 800f8a6:	49a9      	ldr	r1, [pc, #676]	@ (800fb4c <__ieee754_acos+0x2ec>)
 800f8a8:	428b      	cmp	r3, r1
 800f8aa:	f200 8085 	bhi.w	800f9b8 <__ieee754_acos+0x158>
 800f8ae:	4aa8      	ldr	r2, [pc, #672]	@ (800fb50 <__ieee754_acos+0x2f0>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	f240 81fa 	bls.w	800fcaa <__ieee754_acos+0x44a>
 800f8b6:	4622      	mov	r2, r4
 800f8b8:	462b      	mov	r3, r5
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	4629      	mov	r1, r5
 800f8be:	f7f0 fe67 	bl	8000590 <__aeabi_dmul>
 800f8c2:	a387      	add	r3, pc, #540	@ (adr r3, 800fae0 <__ieee754_acos+0x280>)
 800f8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c8:	4606      	mov	r6, r0
 800f8ca:	460f      	mov	r7, r1
 800f8cc:	f7f0 fe60 	bl	8000590 <__aeabi_dmul>
 800f8d0:	a385      	add	r3, pc, #532	@ (adr r3, 800fae8 <__ieee754_acos+0x288>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fca5 	bl	8000224 <__adddf3>
 800f8da:	4632      	mov	r2, r6
 800f8dc:	463b      	mov	r3, r7
 800f8de:	f7f0 fe57 	bl	8000590 <__aeabi_dmul>
 800f8e2:	a383      	add	r3, pc, #524	@ (adr r3, 800faf0 <__ieee754_acos+0x290>)
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	f7f0 fc9a 	bl	8000220 <__aeabi_dsub>
 800f8ec:	4632      	mov	r2, r6
 800f8ee:	463b      	mov	r3, r7
 800f8f0:	f7f0 fe4e 	bl	8000590 <__aeabi_dmul>
 800f8f4:	a380      	add	r3, pc, #512	@ (adr r3, 800faf8 <__ieee754_acos+0x298>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	f7f0 fc93 	bl	8000224 <__adddf3>
 800f8fe:	4632      	mov	r2, r6
 800f900:	463b      	mov	r3, r7
 800f902:	f7f0 fe45 	bl	8000590 <__aeabi_dmul>
 800f906:	a37e      	add	r3, pc, #504	@ (adr r3, 800fb00 <__ieee754_acos+0x2a0>)
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	f7f0 fc88 	bl	8000220 <__aeabi_dsub>
 800f910:	4632      	mov	r2, r6
 800f912:	463b      	mov	r3, r7
 800f914:	f7f0 fe3c 	bl	8000590 <__aeabi_dmul>
 800f918:	a37b      	add	r3, pc, #492	@ (adr r3, 800fb08 <__ieee754_acos+0x2a8>)
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f7f0 fc81 	bl	8000224 <__adddf3>
 800f922:	4632      	mov	r2, r6
 800f924:	463b      	mov	r3, r7
 800f926:	f7f0 fe33 	bl	8000590 <__aeabi_dmul>
 800f92a:	a379      	add	r3, pc, #484	@ (adr r3, 800fb10 <__ieee754_acos+0x2b0>)
 800f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f930:	4680      	mov	r8, r0
 800f932:	4689      	mov	r9, r1
 800f934:	4630      	mov	r0, r6
 800f936:	4639      	mov	r1, r7
 800f938:	f7f0 fe2a 	bl	8000590 <__aeabi_dmul>
 800f93c:	a376      	add	r3, pc, #472	@ (adr r3, 800fb18 <__ieee754_acos+0x2b8>)
 800f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f942:	f7f0 fc6d 	bl	8000220 <__aeabi_dsub>
 800f946:	4632      	mov	r2, r6
 800f948:	463b      	mov	r3, r7
 800f94a:	f7f0 fe21 	bl	8000590 <__aeabi_dmul>
 800f94e:	a374      	add	r3, pc, #464	@ (adr r3, 800fb20 <__ieee754_acos+0x2c0>)
 800f950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f954:	f7f0 fc66 	bl	8000224 <__adddf3>
 800f958:	4632      	mov	r2, r6
 800f95a:	463b      	mov	r3, r7
 800f95c:	f7f0 fe18 	bl	8000590 <__aeabi_dmul>
 800f960:	a371      	add	r3, pc, #452	@ (adr r3, 800fb28 <__ieee754_acos+0x2c8>)
 800f962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f966:	f7f0 fc5b 	bl	8000220 <__aeabi_dsub>
 800f96a:	4632      	mov	r2, r6
 800f96c:	463b      	mov	r3, r7
 800f96e:	f7f0 fe0f 	bl	8000590 <__aeabi_dmul>
 800f972:	4b78      	ldr	r3, [pc, #480]	@ (800fb54 <__ieee754_acos+0x2f4>)
 800f974:	2200      	movs	r2, #0
 800f976:	f7f0 fc55 	bl	8000224 <__adddf3>
 800f97a:	4602      	mov	r2, r0
 800f97c:	460b      	mov	r3, r1
 800f97e:	4640      	mov	r0, r8
 800f980:	4649      	mov	r1, r9
 800f982:	f7f0 ff2f 	bl	80007e4 <__aeabi_ddiv>
 800f986:	4622      	mov	r2, r4
 800f988:	462b      	mov	r3, r5
 800f98a:	f7f0 fe01 	bl	8000590 <__aeabi_dmul>
 800f98e:	4602      	mov	r2, r0
 800f990:	460b      	mov	r3, r1
 800f992:	a167      	add	r1, pc, #412	@ (adr r1, 800fb30 <__ieee754_acos+0x2d0>)
 800f994:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f998:	f7f0 fc42 	bl	8000220 <__aeabi_dsub>
 800f99c:	4602      	mov	r2, r0
 800f99e:	460b      	mov	r3, r1
 800f9a0:	4620      	mov	r0, r4
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	f7f0 fc3c 	bl	8000220 <__aeabi_dsub>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	a162      	add	r1, pc, #392	@ (adr r1, 800fb38 <__ieee754_acos+0x2d8>)
 800f9ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f9b2:	f7f0 fc35 	bl	8000220 <__aeabi_dsub>
 800f9b6:	e773      	b.n	800f8a0 <__ieee754_acos+0x40>
 800f9b8:	2d00      	cmp	r5, #0
 800f9ba:	f280 80cf 	bge.w	800fb5c <__ieee754_acos+0x2fc>
 800f9be:	4b65      	ldr	r3, [pc, #404]	@ (800fb54 <__ieee754_acos+0x2f4>)
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	4629      	mov	r1, r5
 800f9c6:	f7f0 fc2d 	bl	8000224 <__adddf3>
 800f9ca:	4b63      	ldr	r3, [pc, #396]	@ (800fb58 <__ieee754_acos+0x2f8>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	f7f0 fddf 	bl	8000590 <__aeabi_dmul>
 800f9d2:	a343      	add	r3, pc, #268	@ (adr r3, 800fae0 <__ieee754_acos+0x280>)
 800f9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d8:	4604      	mov	r4, r0
 800f9da:	460d      	mov	r5, r1
 800f9dc:	f7f0 fdd8 	bl	8000590 <__aeabi_dmul>
 800f9e0:	a341      	add	r3, pc, #260	@ (adr r3, 800fae8 <__ieee754_acos+0x288>)
 800f9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e6:	f7f0 fc1d 	bl	8000224 <__adddf3>
 800f9ea:	4622      	mov	r2, r4
 800f9ec:	462b      	mov	r3, r5
 800f9ee:	f7f0 fdcf 	bl	8000590 <__aeabi_dmul>
 800f9f2:	a33f      	add	r3, pc, #252	@ (adr r3, 800faf0 <__ieee754_acos+0x290>)
 800f9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f8:	f7f0 fc12 	bl	8000220 <__aeabi_dsub>
 800f9fc:	4622      	mov	r2, r4
 800f9fe:	462b      	mov	r3, r5
 800fa00:	f7f0 fdc6 	bl	8000590 <__aeabi_dmul>
 800fa04:	a33c      	add	r3, pc, #240	@ (adr r3, 800faf8 <__ieee754_acos+0x298>)
 800fa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa0a:	f7f0 fc0b 	bl	8000224 <__adddf3>
 800fa0e:	4622      	mov	r2, r4
 800fa10:	462b      	mov	r3, r5
 800fa12:	f7f0 fdbd 	bl	8000590 <__aeabi_dmul>
 800fa16:	a33a      	add	r3, pc, #232	@ (adr r3, 800fb00 <__ieee754_acos+0x2a0>)
 800fa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1c:	f7f0 fc00 	bl	8000220 <__aeabi_dsub>
 800fa20:	4622      	mov	r2, r4
 800fa22:	462b      	mov	r3, r5
 800fa24:	f7f0 fdb4 	bl	8000590 <__aeabi_dmul>
 800fa28:	a337      	add	r3, pc, #220	@ (adr r3, 800fb08 <__ieee754_acos+0x2a8>)
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	f7f0 fbf9 	bl	8000224 <__adddf3>
 800fa32:	4622      	mov	r2, r4
 800fa34:	462b      	mov	r3, r5
 800fa36:	f7f0 fdab 	bl	8000590 <__aeabi_dmul>
 800fa3a:	a335      	add	r3, pc, #212	@ (adr r3, 800fb10 <__ieee754_acos+0x2b0>)
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	4606      	mov	r6, r0
 800fa42:	460f      	mov	r7, r1
 800fa44:	4620      	mov	r0, r4
 800fa46:	4629      	mov	r1, r5
 800fa48:	f7f0 fda2 	bl	8000590 <__aeabi_dmul>
 800fa4c:	a332      	add	r3, pc, #200	@ (adr r3, 800fb18 <__ieee754_acos+0x2b8>)
 800fa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa52:	f7f0 fbe5 	bl	8000220 <__aeabi_dsub>
 800fa56:	4622      	mov	r2, r4
 800fa58:	462b      	mov	r3, r5
 800fa5a:	f7f0 fd99 	bl	8000590 <__aeabi_dmul>
 800fa5e:	a330      	add	r3, pc, #192	@ (adr r3, 800fb20 <__ieee754_acos+0x2c0>)
 800fa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa64:	f7f0 fbde 	bl	8000224 <__adddf3>
 800fa68:	4622      	mov	r2, r4
 800fa6a:	462b      	mov	r3, r5
 800fa6c:	f7f0 fd90 	bl	8000590 <__aeabi_dmul>
 800fa70:	a32d      	add	r3, pc, #180	@ (adr r3, 800fb28 <__ieee754_acos+0x2c8>)
 800fa72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa76:	f7f0 fbd3 	bl	8000220 <__aeabi_dsub>
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	462b      	mov	r3, r5
 800fa7e:	f7f0 fd87 	bl	8000590 <__aeabi_dmul>
 800fa82:	4b34      	ldr	r3, [pc, #208]	@ (800fb54 <__ieee754_acos+0x2f4>)
 800fa84:	2200      	movs	r2, #0
 800fa86:	f7f0 fbcd 	bl	8000224 <__adddf3>
 800fa8a:	ec45 4b10 	vmov	d0, r4, r5
 800fa8e:	4680      	mov	r8, r0
 800fa90:	4689      	mov	r9, r1
 800fa92:	f7ff fe09 	bl	800f6a8 <__ieee754_sqrt>
 800fa96:	ec55 4b10 	vmov	r4, r5, d0
 800fa9a:	4642      	mov	r2, r8
 800fa9c:	464b      	mov	r3, r9
 800fa9e:	4630      	mov	r0, r6
 800faa0:	4639      	mov	r1, r7
 800faa2:	f7f0 fe9f 	bl	80007e4 <__aeabi_ddiv>
 800faa6:	4622      	mov	r2, r4
 800faa8:	462b      	mov	r3, r5
 800faaa:	f7f0 fd71 	bl	8000590 <__aeabi_dmul>
 800faae:	a320      	add	r3, pc, #128	@ (adr r3, 800fb30 <__ieee754_acos+0x2d0>)
 800fab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fab4:	f7f0 fbb4 	bl	8000220 <__aeabi_dsub>
 800fab8:	4622      	mov	r2, r4
 800faba:	462b      	mov	r3, r5
 800fabc:	f7f0 fbb2 	bl	8000224 <__adddf3>
 800fac0:	4602      	mov	r2, r0
 800fac2:	460b      	mov	r3, r1
 800fac4:	f7f0 fbae 	bl	8000224 <__adddf3>
 800fac8:	4602      	mov	r2, r0
 800faca:	460b      	mov	r3, r1
 800facc:	a11c      	add	r1, pc, #112	@ (adr r1, 800fb40 <__ieee754_acos+0x2e0>)
 800face:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fad2:	e76e      	b.n	800f9b2 <__ieee754_acos+0x152>
 800fad4:	f3af 8000 	nop.w
	...
 800fae0:	0dfdf709 	.word	0x0dfdf709
 800fae4:	3f023de1 	.word	0x3f023de1
 800fae8:	7501b288 	.word	0x7501b288
 800faec:	3f49efe0 	.word	0x3f49efe0
 800faf0:	b5688f3b 	.word	0xb5688f3b
 800faf4:	3fa48228 	.word	0x3fa48228
 800faf8:	0e884455 	.word	0x0e884455
 800fafc:	3fc9c155 	.word	0x3fc9c155
 800fb00:	03eb6f7d 	.word	0x03eb6f7d
 800fb04:	3fd4d612 	.word	0x3fd4d612
 800fb08:	55555555 	.word	0x55555555
 800fb0c:	3fc55555 	.word	0x3fc55555
 800fb10:	b12e9282 	.word	0xb12e9282
 800fb14:	3fb3b8c5 	.word	0x3fb3b8c5
 800fb18:	1b8d0159 	.word	0x1b8d0159
 800fb1c:	3fe6066c 	.word	0x3fe6066c
 800fb20:	9c598ac8 	.word	0x9c598ac8
 800fb24:	40002ae5 	.word	0x40002ae5
 800fb28:	1c8a2d4b 	.word	0x1c8a2d4b
 800fb2c:	40033a27 	.word	0x40033a27
 800fb30:	33145c07 	.word	0x33145c07
 800fb34:	3c91a626 	.word	0x3c91a626
 800fb38:	54442d18 	.word	0x54442d18
 800fb3c:	3ff921fb 	.word	0x3ff921fb
 800fb40:	54442d18 	.word	0x54442d18
 800fb44:	400921fb 	.word	0x400921fb
 800fb48:	3fefffff 	.word	0x3fefffff
 800fb4c:	3fdfffff 	.word	0x3fdfffff
 800fb50:	3c600000 	.word	0x3c600000
 800fb54:	3ff00000 	.word	0x3ff00000
 800fb58:	3fe00000 	.word	0x3fe00000
 800fb5c:	4622      	mov	r2, r4
 800fb5e:	462b      	mov	r3, r5
 800fb60:	496b      	ldr	r1, [pc, #428]	@ (800fd10 <__ieee754_acos+0x4b0>)
 800fb62:	2000      	movs	r0, #0
 800fb64:	f7f0 fb5c 	bl	8000220 <__aeabi_dsub>
 800fb68:	4b6a      	ldr	r3, [pc, #424]	@ (800fd14 <__ieee754_acos+0x4b4>)
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	f7f0 fd10 	bl	8000590 <__aeabi_dmul>
 800fb70:	4604      	mov	r4, r0
 800fb72:	460d      	mov	r5, r1
 800fb74:	ec45 4b10 	vmov	d0, r4, r5
 800fb78:	f7ff fd96 	bl	800f6a8 <__ieee754_sqrt>
 800fb7c:	a34c      	add	r3, pc, #304	@ (adr r3, 800fcb0 <__ieee754_acos+0x450>)
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	4620      	mov	r0, r4
 800fb84:	4629      	mov	r1, r5
 800fb86:	ec59 8b10 	vmov	r8, r9, d0
 800fb8a:	f7f0 fd01 	bl	8000590 <__aeabi_dmul>
 800fb8e:	a34a      	add	r3, pc, #296	@ (adr r3, 800fcb8 <__ieee754_acos+0x458>)
 800fb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb94:	f7f0 fb46 	bl	8000224 <__adddf3>
 800fb98:	4622      	mov	r2, r4
 800fb9a:	462b      	mov	r3, r5
 800fb9c:	f7f0 fcf8 	bl	8000590 <__aeabi_dmul>
 800fba0:	a347      	add	r3, pc, #284	@ (adr r3, 800fcc0 <__ieee754_acos+0x460>)
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	f7f0 fb3b 	bl	8000220 <__aeabi_dsub>
 800fbaa:	4622      	mov	r2, r4
 800fbac:	462b      	mov	r3, r5
 800fbae:	f7f0 fcef 	bl	8000590 <__aeabi_dmul>
 800fbb2:	a345      	add	r3, pc, #276	@ (adr r3, 800fcc8 <__ieee754_acos+0x468>)
 800fbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb8:	f7f0 fb34 	bl	8000224 <__adddf3>
 800fbbc:	4622      	mov	r2, r4
 800fbbe:	462b      	mov	r3, r5
 800fbc0:	f7f0 fce6 	bl	8000590 <__aeabi_dmul>
 800fbc4:	a342      	add	r3, pc, #264	@ (adr r3, 800fcd0 <__ieee754_acos+0x470>)
 800fbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbca:	f7f0 fb29 	bl	8000220 <__aeabi_dsub>
 800fbce:	4622      	mov	r2, r4
 800fbd0:	462b      	mov	r3, r5
 800fbd2:	f7f0 fcdd 	bl	8000590 <__aeabi_dmul>
 800fbd6:	a340      	add	r3, pc, #256	@ (adr r3, 800fcd8 <__ieee754_acos+0x478>)
 800fbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbdc:	f7f0 fb22 	bl	8000224 <__adddf3>
 800fbe0:	4622      	mov	r2, r4
 800fbe2:	462b      	mov	r3, r5
 800fbe4:	f7f0 fcd4 	bl	8000590 <__aeabi_dmul>
 800fbe8:	a33d      	add	r3, pc, #244	@ (adr r3, 800fce0 <__ieee754_acos+0x480>)
 800fbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbee:	4682      	mov	sl, r0
 800fbf0:	468b      	mov	fp, r1
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	4629      	mov	r1, r5
 800fbf6:	f7f0 fccb 	bl	8000590 <__aeabi_dmul>
 800fbfa:	a33b      	add	r3, pc, #236	@ (adr r3, 800fce8 <__ieee754_acos+0x488>)
 800fbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc00:	f7f0 fb0e 	bl	8000220 <__aeabi_dsub>
 800fc04:	4622      	mov	r2, r4
 800fc06:	462b      	mov	r3, r5
 800fc08:	f7f0 fcc2 	bl	8000590 <__aeabi_dmul>
 800fc0c:	a338      	add	r3, pc, #224	@ (adr r3, 800fcf0 <__ieee754_acos+0x490>)
 800fc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc12:	f7f0 fb07 	bl	8000224 <__adddf3>
 800fc16:	4622      	mov	r2, r4
 800fc18:	462b      	mov	r3, r5
 800fc1a:	f7f0 fcb9 	bl	8000590 <__aeabi_dmul>
 800fc1e:	a336      	add	r3, pc, #216	@ (adr r3, 800fcf8 <__ieee754_acos+0x498>)
 800fc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc24:	f7f0 fafc 	bl	8000220 <__aeabi_dsub>
 800fc28:	4622      	mov	r2, r4
 800fc2a:	462b      	mov	r3, r5
 800fc2c:	f7f0 fcb0 	bl	8000590 <__aeabi_dmul>
 800fc30:	4b37      	ldr	r3, [pc, #220]	@ (800fd10 <__ieee754_acos+0x4b0>)
 800fc32:	2200      	movs	r2, #0
 800fc34:	f7f0 faf6 	bl	8000224 <__adddf3>
 800fc38:	4602      	mov	r2, r0
 800fc3a:	460b      	mov	r3, r1
 800fc3c:	4650      	mov	r0, sl
 800fc3e:	4659      	mov	r1, fp
 800fc40:	f7f0 fdd0 	bl	80007e4 <__aeabi_ddiv>
 800fc44:	4642      	mov	r2, r8
 800fc46:	464b      	mov	r3, r9
 800fc48:	f7f0 fca2 	bl	8000590 <__aeabi_dmul>
 800fc4c:	2600      	movs	r6, #0
 800fc4e:	4682      	mov	sl, r0
 800fc50:	468b      	mov	fp, r1
 800fc52:	4632      	mov	r2, r6
 800fc54:	464b      	mov	r3, r9
 800fc56:	4630      	mov	r0, r6
 800fc58:	4649      	mov	r1, r9
 800fc5a:	f7f0 fc99 	bl	8000590 <__aeabi_dmul>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	460b      	mov	r3, r1
 800fc62:	4620      	mov	r0, r4
 800fc64:	4629      	mov	r1, r5
 800fc66:	f7f0 fadb 	bl	8000220 <__aeabi_dsub>
 800fc6a:	4632      	mov	r2, r6
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	460d      	mov	r5, r1
 800fc70:	464b      	mov	r3, r9
 800fc72:	4640      	mov	r0, r8
 800fc74:	4649      	mov	r1, r9
 800fc76:	f7f0 fad5 	bl	8000224 <__adddf3>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	4620      	mov	r0, r4
 800fc80:	4629      	mov	r1, r5
 800fc82:	f7f0 fdaf 	bl	80007e4 <__aeabi_ddiv>
 800fc86:	4602      	mov	r2, r0
 800fc88:	460b      	mov	r3, r1
 800fc8a:	4650      	mov	r0, sl
 800fc8c:	4659      	mov	r1, fp
 800fc8e:	f7f0 fac9 	bl	8000224 <__adddf3>
 800fc92:	4632      	mov	r2, r6
 800fc94:	464b      	mov	r3, r9
 800fc96:	f7f0 fac5 	bl	8000224 <__adddf3>
 800fc9a:	4602      	mov	r2, r0
 800fc9c:	460b      	mov	r3, r1
 800fc9e:	f7f0 fac1 	bl	8000224 <__adddf3>
 800fca2:	e5fd      	b.n	800f8a0 <__ieee754_acos+0x40>
 800fca4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800fd00 <__ieee754_acos+0x4a0>
 800fca8:	e5ee      	b.n	800f888 <__ieee754_acos+0x28>
 800fcaa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800fd08 <__ieee754_acos+0x4a8>
 800fcae:	e5eb      	b.n	800f888 <__ieee754_acos+0x28>
 800fcb0:	0dfdf709 	.word	0x0dfdf709
 800fcb4:	3f023de1 	.word	0x3f023de1
 800fcb8:	7501b288 	.word	0x7501b288
 800fcbc:	3f49efe0 	.word	0x3f49efe0
 800fcc0:	b5688f3b 	.word	0xb5688f3b
 800fcc4:	3fa48228 	.word	0x3fa48228
 800fcc8:	0e884455 	.word	0x0e884455
 800fccc:	3fc9c155 	.word	0x3fc9c155
 800fcd0:	03eb6f7d 	.word	0x03eb6f7d
 800fcd4:	3fd4d612 	.word	0x3fd4d612
 800fcd8:	55555555 	.word	0x55555555
 800fcdc:	3fc55555 	.word	0x3fc55555
 800fce0:	b12e9282 	.word	0xb12e9282
 800fce4:	3fb3b8c5 	.word	0x3fb3b8c5
 800fce8:	1b8d0159 	.word	0x1b8d0159
 800fcec:	3fe6066c 	.word	0x3fe6066c
 800fcf0:	9c598ac8 	.word	0x9c598ac8
 800fcf4:	40002ae5 	.word	0x40002ae5
 800fcf8:	1c8a2d4b 	.word	0x1c8a2d4b
 800fcfc:	40033a27 	.word	0x40033a27
 800fd00:	54442d18 	.word	0x54442d18
 800fd04:	400921fb 	.word	0x400921fb
 800fd08:	54442d18 	.word	0x54442d18
 800fd0c:	3ff921fb 	.word	0x3ff921fb
 800fd10:	3ff00000 	.word	0x3ff00000
 800fd14:	3fe00000 	.word	0x3fe00000

0800fd18 <__ieee754_pow>:
 800fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd1c:	b091      	sub	sp, #68	@ 0x44
 800fd1e:	ed8d 1b00 	vstr	d1, [sp]
 800fd22:	e9dd 1900 	ldrd	r1, r9, [sp]
 800fd26:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800fd2a:	ea5a 0001 	orrs.w	r0, sl, r1
 800fd2e:	ec57 6b10 	vmov	r6, r7, d0
 800fd32:	d113      	bne.n	800fd5c <__ieee754_pow+0x44>
 800fd34:	19b3      	adds	r3, r6, r6
 800fd36:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800fd3a:	4152      	adcs	r2, r2
 800fd3c:	4298      	cmp	r0, r3
 800fd3e:	4b9a      	ldr	r3, [pc, #616]	@ (800ffa8 <__ieee754_pow+0x290>)
 800fd40:	4193      	sbcs	r3, r2
 800fd42:	f080 84ee 	bcs.w	8010722 <__ieee754_pow+0xa0a>
 800fd46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	4639      	mov	r1, r7
 800fd4e:	f7f0 fa69 	bl	8000224 <__adddf3>
 800fd52:	ec41 0b10 	vmov	d0, r0, r1
 800fd56:	b011      	add	sp, #68	@ 0x44
 800fd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5c:	4a93      	ldr	r2, [pc, #588]	@ (800ffac <__ieee754_pow+0x294>)
 800fd5e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800fd62:	4295      	cmp	r5, r2
 800fd64:	46b8      	mov	r8, r7
 800fd66:	4633      	mov	r3, r6
 800fd68:	d80a      	bhi.n	800fd80 <__ieee754_pow+0x68>
 800fd6a:	d104      	bne.n	800fd76 <__ieee754_pow+0x5e>
 800fd6c:	2e00      	cmp	r6, #0
 800fd6e:	d1ea      	bne.n	800fd46 <__ieee754_pow+0x2e>
 800fd70:	45aa      	cmp	sl, r5
 800fd72:	d8e8      	bhi.n	800fd46 <__ieee754_pow+0x2e>
 800fd74:	e001      	b.n	800fd7a <__ieee754_pow+0x62>
 800fd76:	4592      	cmp	sl, r2
 800fd78:	d802      	bhi.n	800fd80 <__ieee754_pow+0x68>
 800fd7a:	4592      	cmp	sl, r2
 800fd7c:	d10f      	bne.n	800fd9e <__ieee754_pow+0x86>
 800fd7e:	b171      	cbz	r1, 800fd9e <__ieee754_pow+0x86>
 800fd80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800fd84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800fd88:	ea58 0803 	orrs.w	r8, r8, r3
 800fd8c:	d1db      	bne.n	800fd46 <__ieee754_pow+0x2e>
 800fd8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd92:	18db      	adds	r3, r3, r3
 800fd94:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800fd98:	4152      	adcs	r2, r2
 800fd9a:	4598      	cmp	r8, r3
 800fd9c:	e7cf      	b.n	800fd3e <__ieee754_pow+0x26>
 800fd9e:	f1b8 0f00 	cmp.w	r8, #0
 800fda2:	46ab      	mov	fp, r5
 800fda4:	da43      	bge.n	800fe2e <__ieee754_pow+0x116>
 800fda6:	4a82      	ldr	r2, [pc, #520]	@ (800ffb0 <__ieee754_pow+0x298>)
 800fda8:	4592      	cmp	sl, r2
 800fdaa:	d856      	bhi.n	800fe5a <__ieee754_pow+0x142>
 800fdac:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800fdb0:	4592      	cmp	sl, r2
 800fdb2:	f240 84c5 	bls.w	8010740 <__ieee754_pow+0xa28>
 800fdb6:	ea4f 522a 	mov.w	r2, sl, asr #20
 800fdba:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800fdbe:	2a14      	cmp	r2, #20
 800fdc0:	dd18      	ble.n	800fdf4 <__ieee754_pow+0xdc>
 800fdc2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800fdc6:	fa21 f402 	lsr.w	r4, r1, r2
 800fdca:	fa04 f202 	lsl.w	r2, r4, r2
 800fdce:	428a      	cmp	r2, r1
 800fdd0:	f040 84b6 	bne.w	8010740 <__ieee754_pow+0xa28>
 800fdd4:	f004 0401 	and.w	r4, r4, #1
 800fdd8:	f1c4 0402 	rsb	r4, r4, #2
 800fddc:	2900      	cmp	r1, #0
 800fdde:	d159      	bne.n	800fe94 <__ieee754_pow+0x17c>
 800fde0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800fde4:	d148      	bne.n	800fe78 <__ieee754_pow+0x160>
 800fde6:	4632      	mov	r2, r6
 800fde8:	463b      	mov	r3, r7
 800fdea:	4630      	mov	r0, r6
 800fdec:	4639      	mov	r1, r7
 800fdee:	f7f0 fbcf 	bl	8000590 <__aeabi_dmul>
 800fdf2:	e7ae      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fdf4:	2900      	cmp	r1, #0
 800fdf6:	d14c      	bne.n	800fe92 <__ieee754_pow+0x17a>
 800fdf8:	f1c2 0214 	rsb	r2, r2, #20
 800fdfc:	fa4a f402 	asr.w	r4, sl, r2
 800fe00:	fa04 f202 	lsl.w	r2, r4, r2
 800fe04:	4552      	cmp	r2, sl
 800fe06:	f040 8498 	bne.w	801073a <__ieee754_pow+0xa22>
 800fe0a:	f004 0401 	and.w	r4, r4, #1
 800fe0e:	f1c4 0402 	rsb	r4, r4, #2
 800fe12:	4a68      	ldr	r2, [pc, #416]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fe14:	4592      	cmp	sl, r2
 800fe16:	d1e3      	bne.n	800fde0 <__ieee754_pow+0xc8>
 800fe18:	f1b9 0f00 	cmp.w	r9, #0
 800fe1c:	f280 8489 	bge.w	8010732 <__ieee754_pow+0xa1a>
 800fe20:	4964      	ldr	r1, [pc, #400]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fe22:	4632      	mov	r2, r6
 800fe24:	463b      	mov	r3, r7
 800fe26:	2000      	movs	r0, #0
 800fe28:	f7f0 fcdc 	bl	80007e4 <__aeabi_ddiv>
 800fe2c:	e791      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fe2e:	2400      	movs	r4, #0
 800fe30:	bb81      	cbnz	r1, 800fe94 <__ieee754_pow+0x17c>
 800fe32:	4a5e      	ldr	r2, [pc, #376]	@ (800ffac <__ieee754_pow+0x294>)
 800fe34:	4592      	cmp	sl, r2
 800fe36:	d1ec      	bne.n	800fe12 <__ieee754_pow+0xfa>
 800fe38:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800fe3c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800fe40:	431a      	orrs	r2, r3
 800fe42:	f000 846e 	beq.w	8010722 <__ieee754_pow+0xa0a>
 800fe46:	4b5c      	ldr	r3, [pc, #368]	@ (800ffb8 <__ieee754_pow+0x2a0>)
 800fe48:	429d      	cmp	r5, r3
 800fe4a:	d908      	bls.n	800fe5e <__ieee754_pow+0x146>
 800fe4c:	f1b9 0f00 	cmp.w	r9, #0
 800fe50:	f280 846b 	bge.w	801072a <__ieee754_pow+0xa12>
 800fe54:	2000      	movs	r0, #0
 800fe56:	2100      	movs	r1, #0
 800fe58:	e77b      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fe5a:	2402      	movs	r4, #2
 800fe5c:	e7e8      	b.n	800fe30 <__ieee754_pow+0x118>
 800fe5e:	f1b9 0f00 	cmp.w	r9, #0
 800fe62:	f04f 0000 	mov.w	r0, #0
 800fe66:	f04f 0100 	mov.w	r1, #0
 800fe6a:	f6bf af72 	bge.w	800fd52 <__ieee754_pow+0x3a>
 800fe6e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800fe72:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800fe76:	e76c      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fe78:	4a50      	ldr	r2, [pc, #320]	@ (800ffbc <__ieee754_pow+0x2a4>)
 800fe7a:	4591      	cmp	r9, r2
 800fe7c:	d10a      	bne.n	800fe94 <__ieee754_pow+0x17c>
 800fe7e:	f1b8 0f00 	cmp.w	r8, #0
 800fe82:	db07      	blt.n	800fe94 <__ieee754_pow+0x17c>
 800fe84:	ec47 6b10 	vmov	d0, r6, r7
 800fe88:	b011      	add	sp, #68	@ 0x44
 800fe8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe8e:	f7ff bc0b 	b.w	800f6a8 <__ieee754_sqrt>
 800fe92:	2400      	movs	r4, #0
 800fe94:	ec47 6b10 	vmov	d0, r6, r7
 800fe98:	9302      	str	r3, [sp, #8]
 800fe9a:	f7ff fb3f 	bl	800f51c <fabs>
 800fe9e:	9b02      	ldr	r3, [sp, #8]
 800fea0:	ec51 0b10 	vmov	r0, r1, d0
 800fea4:	bb43      	cbnz	r3, 800fef8 <__ieee754_pow+0x1e0>
 800fea6:	4b43      	ldr	r3, [pc, #268]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fea8:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800feac:	429a      	cmp	r2, r3
 800feae:	d000      	beq.n	800feb2 <__ieee754_pow+0x19a>
 800feb0:	bb15      	cbnz	r5, 800fef8 <__ieee754_pow+0x1e0>
 800feb2:	f1b9 0f00 	cmp.w	r9, #0
 800feb6:	da05      	bge.n	800fec4 <__ieee754_pow+0x1ac>
 800feb8:	4602      	mov	r2, r0
 800feba:	460b      	mov	r3, r1
 800febc:	2000      	movs	r0, #0
 800febe:	493d      	ldr	r1, [pc, #244]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800fec0:	f7f0 fc90 	bl	80007e4 <__aeabi_ddiv>
 800fec4:	f1b8 0f00 	cmp.w	r8, #0
 800fec8:	f6bf af43 	bge.w	800fd52 <__ieee754_pow+0x3a>
 800fecc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800fed0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800fed4:	4325      	orrs	r5, r4
 800fed6:	d108      	bne.n	800feea <__ieee754_pow+0x1d2>
 800fed8:	4602      	mov	r2, r0
 800feda:	460b      	mov	r3, r1
 800fedc:	4610      	mov	r0, r2
 800fede:	4619      	mov	r1, r3
 800fee0:	f7f0 f99e 	bl	8000220 <__aeabi_dsub>
 800fee4:	4602      	mov	r2, r0
 800fee6:	460b      	mov	r3, r1
 800fee8:	e79e      	b.n	800fe28 <__ieee754_pow+0x110>
 800feea:	2c01      	cmp	r4, #1
 800feec:	f47f af31 	bne.w	800fd52 <__ieee754_pow+0x3a>
 800fef0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fef4:	4619      	mov	r1, r3
 800fef6:	e72c      	b.n	800fd52 <__ieee754_pow+0x3a>
 800fef8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800fefc:	3b01      	subs	r3, #1
 800fefe:	ea53 0204 	orrs.w	r2, r3, r4
 800ff02:	d102      	bne.n	800ff0a <__ieee754_pow+0x1f2>
 800ff04:	4632      	mov	r2, r6
 800ff06:	463b      	mov	r3, r7
 800ff08:	e7e8      	b.n	800fedc <__ieee754_pow+0x1c4>
 800ff0a:	3c01      	subs	r4, #1
 800ff0c:	431c      	orrs	r4, r3
 800ff0e:	d016      	beq.n	800ff3e <__ieee754_pow+0x226>
 800ff10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ff98 <__ieee754_pow+0x280>
 800ff14:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ff18:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff1c:	f240 8110 	bls.w	8010140 <__ieee754_pow+0x428>
 800ff20:	4b27      	ldr	r3, [pc, #156]	@ (800ffc0 <__ieee754_pow+0x2a8>)
 800ff22:	459a      	cmp	sl, r3
 800ff24:	4b24      	ldr	r3, [pc, #144]	@ (800ffb8 <__ieee754_pow+0x2a0>)
 800ff26:	d916      	bls.n	800ff56 <__ieee754_pow+0x23e>
 800ff28:	429d      	cmp	r5, r3
 800ff2a:	d80b      	bhi.n	800ff44 <__ieee754_pow+0x22c>
 800ff2c:	f1b9 0f00 	cmp.w	r9, #0
 800ff30:	da0b      	bge.n	800ff4a <__ieee754_pow+0x232>
 800ff32:	2000      	movs	r0, #0
 800ff34:	b011      	add	sp, #68	@ 0x44
 800ff36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff3a:	f000 bec1 	b.w	8010cc0 <__math_oflow>
 800ff3e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800ffa0 <__ieee754_pow+0x288>
 800ff42:	e7e7      	b.n	800ff14 <__ieee754_pow+0x1fc>
 800ff44:	f1b9 0f00 	cmp.w	r9, #0
 800ff48:	dcf3      	bgt.n	800ff32 <__ieee754_pow+0x21a>
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	b011      	add	sp, #68	@ 0x44
 800ff4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff52:	f000 bead 	b.w	8010cb0 <__math_uflow>
 800ff56:	429d      	cmp	r5, r3
 800ff58:	d20c      	bcs.n	800ff74 <__ieee754_pow+0x25c>
 800ff5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff5e:	2200      	movs	r2, #0
 800ff60:	2300      	movs	r3, #0
 800ff62:	f7f0 fd87 	bl	8000a74 <__aeabi_dcmplt>
 800ff66:	3800      	subs	r0, #0
 800ff68:	bf18      	it	ne
 800ff6a:	2001      	movne	r0, #1
 800ff6c:	f1b9 0f00 	cmp.w	r9, #0
 800ff70:	daec      	bge.n	800ff4c <__ieee754_pow+0x234>
 800ff72:	e7df      	b.n	800ff34 <__ieee754_pow+0x21c>
 800ff74:	4b0f      	ldr	r3, [pc, #60]	@ (800ffb4 <__ieee754_pow+0x29c>)
 800ff76:	429d      	cmp	r5, r3
 800ff78:	f04f 0200 	mov.w	r2, #0
 800ff7c:	d922      	bls.n	800ffc4 <__ieee754_pow+0x2ac>
 800ff7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ff82:	2300      	movs	r3, #0
 800ff84:	f7f0 fd76 	bl	8000a74 <__aeabi_dcmplt>
 800ff88:	3800      	subs	r0, #0
 800ff8a:	bf18      	it	ne
 800ff8c:	2001      	movne	r0, #1
 800ff8e:	f1b9 0f00 	cmp.w	r9, #0
 800ff92:	dccf      	bgt.n	800ff34 <__ieee754_pow+0x21c>
 800ff94:	e7da      	b.n	800ff4c <__ieee754_pow+0x234>
 800ff96:	bf00      	nop
 800ff98:	00000000 	.word	0x00000000
 800ff9c:	3ff00000 	.word	0x3ff00000
 800ffa0:	00000000 	.word	0x00000000
 800ffa4:	bff00000 	.word	0xbff00000
 800ffa8:	fff00000 	.word	0xfff00000
 800ffac:	7ff00000 	.word	0x7ff00000
 800ffb0:	433fffff 	.word	0x433fffff
 800ffb4:	3ff00000 	.word	0x3ff00000
 800ffb8:	3fefffff 	.word	0x3fefffff
 800ffbc:	3fe00000 	.word	0x3fe00000
 800ffc0:	43f00000 	.word	0x43f00000
 800ffc4:	4b5a      	ldr	r3, [pc, #360]	@ (8010130 <__ieee754_pow+0x418>)
 800ffc6:	f7f0 f92b 	bl	8000220 <__aeabi_dsub>
 800ffca:	a351      	add	r3, pc, #324	@ (adr r3, 8010110 <__ieee754_pow+0x3f8>)
 800ffcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd0:	4604      	mov	r4, r0
 800ffd2:	460d      	mov	r5, r1
 800ffd4:	f7f0 fadc 	bl	8000590 <__aeabi_dmul>
 800ffd8:	a34f      	add	r3, pc, #316	@ (adr r3, 8010118 <__ieee754_pow+0x400>)
 800ffda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffde:	4606      	mov	r6, r0
 800ffe0:	460f      	mov	r7, r1
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	4629      	mov	r1, r5
 800ffe6:	f7f0 fad3 	bl	8000590 <__aeabi_dmul>
 800ffea:	4b52      	ldr	r3, [pc, #328]	@ (8010134 <__ieee754_pow+0x41c>)
 800ffec:	4682      	mov	sl, r0
 800ffee:	468b      	mov	fp, r1
 800fff0:	2200      	movs	r2, #0
 800fff2:	4620      	mov	r0, r4
 800fff4:	4629      	mov	r1, r5
 800fff6:	f7f0 facb 	bl	8000590 <__aeabi_dmul>
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	a148      	add	r1, pc, #288	@ (adr r1, 8010120 <__ieee754_pow+0x408>)
 8010000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010004:	f7f0 f90c 	bl	8000220 <__aeabi_dsub>
 8010008:	4622      	mov	r2, r4
 801000a:	462b      	mov	r3, r5
 801000c:	f7f0 fac0 	bl	8000590 <__aeabi_dmul>
 8010010:	4602      	mov	r2, r0
 8010012:	460b      	mov	r3, r1
 8010014:	2000      	movs	r0, #0
 8010016:	4948      	ldr	r1, [pc, #288]	@ (8010138 <__ieee754_pow+0x420>)
 8010018:	f7f0 f902 	bl	8000220 <__aeabi_dsub>
 801001c:	4622      	mov	r2, r4
 801001e:	4680      	mov	r8, r0
 8010020:	4689      	mov	r9, r1
 8010022:	462b      	mov	r3, r5
 8010024:	4620      	mov	r0, r4
 8010026:	4629      	mov	r1, r5
 8010028:	f7f0 fab2 	bl	8000590 <__aeabi_dmul>
 801002c:	4602      	mov	r2, r0
 801002e:	460b      	mov	r3, r1
 8010030:	4640      	mov	r0, r8
 8010032:	4649      	mov	r1, r9
 8010034:	f7f0 faac 	bl	8000590 <__aeabi_dmul>
 8010038:	a33b      	add	r3, pc, #236	@ (adr r3, 8010128 <__ieee754_pow+0x410>)
 801003a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003e:	f7f0 faa7 	bl	8000590 <__aeabi_dmul>
 8010042:	4602      	mov	r2, r0
 8010044:	460b      	mov	r3, r1
 8010046:	4650      	mov	r0, sl
 8010048:	4659      	mov	r1, fp
 801004a:	f7f0 f8e9 	bl	8000220 <__aeabi_dsub>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	4680      	mov	r8, r0
 8010054:	4689      	mov	r9, r1
 8010056:	4630      	mov	r0, r6
 8010058:	4639      	mov	r1, r7
 801005a:	f7f0 f8e3 	bl	8000224 <__adddf3>
 801005e:	2400      	movs	r4, #0
 8010060:	4632      	mov	r2, r6
 8010062:	463b      	mov	r3, r7
 8010064:	4620      	mov	r0, r4
 8010066:	460d      	mov	r5, r1
 8010068:	f7f0 f8da 	bl	8000220 <__aeabi_dsub>
 801006c:	4602      	mov	r2, r0
 801006e:	460b      	mov	r3, r1
 8010070:	4640      	mov	r0, r8
 8010072:	4649      	mov	r1, r9
 8010074:	f7f0 f8d4 	bl	8000220 <__aeabi_dsub>
 8010078:	e9dd 2300 	ldrd	r2, r3, [sp]
 801007c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010080:	2300      	movs	r3, #0
 8010082:	9304      	str	r3, [sp, #16]
 8010084:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010088:	4606      	mov	r6, r0
 801008a:	460f      	mov	r7, r1
 801008c:	465b      	mov	r3, fp
 801008e:	4652      	mov	r2, sl
 8010090:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010094:	f7f0 f8c4 	bl	8000220 <__aeabi_dsub>
 8010098:	4622      	mov	r2, r4
 801009a:	462b      	mov	r3, r5
 801009c:	f7f0 fa78 	bl	8000590 <__aeabi_dmul>
 80100a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100a4:	4680      	mov	r8, r0
 80100a6:	4689      	mov	r9, r1
 80100a8:	4630      	mov	r0, r6
 80100aa:	4639      	mov	r1, r7
 80100ac:	f7f0 fa70 	bl	8000590 <__aeabi_dmul>
 80100b0:	4602      	mov	r2, r0
 80100b2:	460b      	mov	r3, r1
 80100b4:	4640      	mov	r0, r8
 80100b6:	4649      	mov	r1, r9
 80100b8:	f7f0 f8b4 	bl	8000224 <__adddf3>
 80100bc:	465b      	mov	r3, fp
 80100be:	4606      	mov	r6, r0
 80100c0:	460f      	mov	r7, r1
 80100c2:	4652      	mov	r2, sl
 80100c4:	4620      	mov	r0, r4
 80100c6:	4629      	mov	r1, r5
 80100c8:	f7f0 fa62 	bl	8000590 <__aeabi_dmul>
 80100cc:	460b      	mov	r3, r1
 80100ce:	4602      	mov	r2, r0
 80100d0:	4680      	mov	r8, r0
 80100d2:	4689      	mov	r9, r1
 80100d4:	4630      	mov	r0, r6
 80100d6:	4639      	mov	r1, r7
 80100d8:	f7f0 f8a4 	bl	8000224 <__adddf3>
 80100dc:	4b17      	ldr	r3, [pc, #92]	@ (801013c <__ieee754_pow+0x424>)
 80100de:	4299      	cmp	r1, r3
 80100e0:	4604      	mov	r4, r0
 80100e2:	460d      	mov	r5, r1
 80100e4:	468b      	mov	fp, r1
 80100e6:	f340 820b 	ble.w	8010500 <__ieee754_pow+0x7e8>
 80100ea:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80100ee:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80100f2:	4303      	orrs	r3, r0
 80100f4:	f000 81ea 	beq.w	80104cc <__ieee754_pow+0x7b4>
 80100f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100fc:	2200      	movs	r2, #0
 80100fe:	2300      	movs	r3, #0
 8010100:	f7f0 fcb8 	bl	8000a74 <__aeabi_dcmplt>
 8010104:	3800      	subs	r0, #0
 8010106:	bf18      	it	ne
 8010108:	2001      	movne	r0, #1
 801010a:	e713      	b.n	800ff34 <__ieee754_pow+0x21c>
 801010c:	f3af 8000 	nop.w
 8010110:	60000000 	.word	0x60000000
 8010114:	3ff71547 	.word	0x3ff71547
 8010118:	f85ddf44 	.word	0xf85ddf44
 801011c:	3e54ae0b 	.word	0x3e54ae0b
 8010120:	55555555 	.word	0x55555555
 8010124:	3fd55555 	.word	0x3fd55555
 8010128:	652b82fe 	.word	0x652b82fe
 801012c:	3ff71547 	.word	0x3ff71547
 8010130:	3ff00000 	.word	0x3ff00000
 8010134:	3fd00000 	.word	0x3fd00000
 8010138:	3fe00000 	.word	0x3fe00000
 801013c:	408fffff 	.word	0x408fffff
 8010140:	4bd5      	ldr	r3, [pc, #852]	@ (8010498 <__ieee754_pow+0x780>)
 8010142:	ea08 0303 	and.w	r3, r8, r3
 8010146:	2200      	movs	r2, #0
 8010148:	b92b      	cbnz	r3, 8010156 <__ieee754_pow+0x43e>
 801014a:	4bd4      	ldr	r3, [pc, #848]	@ (801049c <__ieee754_pow+0x784>)
 801014c:	f7f0 fa20 	bl	8000590 <__aeabi_dmul>
 8010150:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010154:	468b      	mov	fp, r1
 8010156:	ea4f 532b 	mov.w	r3, fp, asr #20
 801015a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801015e:	4413      	add	r3, r2
 8010160:	930a      	str	r3, [sp, #40]	@ 0x28
 8010162:	4bcf      	ldr	r3, [pc, #828]	@ (80104a0 <__ieee754_pow+0x788>)
 8010164:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010168:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801016c:	459b      	cmp	fp, r3
 801016e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010172:	dd08      	ble.n	8010186 <__ieee754_pow+0x46e>
 8010174:	4bcb      	ldr	r3, [pc, #812]	@ (80104a4 <__ieee754_pow+0x78c>)
 8010176:	459b      	cmp	fp, r3
 8010178:	f340 81a5 	ble.w	80104c6 <__ieee754_pow+0x7ae>
 801017c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801017e:	3301      	adds	r3, #1
 8010180:	930a      	str	r3, [sp, #40]	@ 0x28
 8010182:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010186:	f04f 0a00 	mov.w	sl, #0
 801018a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801018e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010190:	4bc5      	ldr	r3, [pc, #788]	@ (80104a8 <__ieee754_pow+0x790>)
 8010192:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010196:	ed93 7b00 	vldr	d7, [r3]
 801019a:	4629      	mov	r1, r5
 801019c:	ec53 2b17 	vmov	r2, r3, d7
 80101a0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80101a4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80101a8:	f7f0 f83a 	bl	8000220 <__aeabi_dsub>
 80101ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80101b0:	4606      	mov	r6, r0
 80101b2:	460f      	mov	r7, r1
 80101b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101b8:	f7f0 f834 	bl	8000224 <__adddf3>
 80101bc:	4602      	mov	r2, r0
 80101be:	460b      	mov	r3, r1
 80101c0:	2000      	movs	r0, #0
 80101c2:	49ba      	ldr	r1, [pc, #744]	@ (80104ac <__ieee754_pow+0x794>)
 80101c4:	f7f0 fb0e 	bl	80007e4 <__aeabi_ddiv>
 80101c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80101cc:	4602      	mov	r2, r0
 80101ce:	460b      	mov	r3, r1
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	f7f0 f9dc 	bl	8000590 <__aeabi_dmul>
 80101d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101dc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80101e0:	106d      	asrs	r5, r5, #1
 80101e2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80101e6:	f04f 0b00 	mov.w	fp, #0
 80101ea:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80101ee:	4661      	mov	r1, ip
 80101f0:	2200      	movs	r2, #0
 80101f2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80101f6:	4658      	mov	r0, fp
 80101f8:	46e1      	mov	r9, ip
 80101fa:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80101fe:	4614      	mov	r4, r2
 8010200:	461d      	mov	r5, r3
 8010202:	f7f0 f9c5 	bl	8000590 <__aeabi_dmul>
 8010206:	4602      	mov	r2, r0
 8010208:	460b      	mov	r3, r1
 801020a:	4630      	mov	r0, r6
 801020c:	4639      	mov	r1, r7
 801020e:	f7f0 f807 	bl	8000220 <__aeabi_dsub>
 8010212:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010216:	4606      	mov	r6, r0
 8010218:	460f      	mov	r7, r1
 801021a:	4620      	mov	r0, r4
 801021c:	4629      	mov	r1, r5
 801021e:	f7ef ffff 	bl	8000220 <__aeabi_dsub>
 8010222:	4602      	mov	r2, r0
 8010224:	460b      	mov	r3, r1
 8010226:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801022a:	f7ef fff9 	bl	8000220 <__aeabi_dsub>
 801022e:	465a      	mov	r2, fp
 8010230:	464b      	mov	r3, r9
 8010232:	f7f0 f9ad 	bl	8000590 <__aeabi_dmul>
 8010236:	4602      	mov	r2, r0
 8010238:	460b      	mov	r3, r1
 801023a:	4630      	mov	r0, r6
 801023c:	4639      	mov	r1, r7
 801023e:	f7ef ffef 	bl	8000220 <__aeabi_dsub>
 8010242:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010246:	f7f0 f9a3 	bl	8000590 <__aeabi_dmul>
 801024a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801024e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010252:	4610      	mov	r0, r2
 8010254:	4619      	mov	r1, r3
 8010256:	f7f0 f99b 	bl	8000590 <__aeabi_dmul>
 801025a:	a37d      	add	r3, pc, #500	@ (adr r3, 8010450 <__ieee754_pow+0x738>)
 801025c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010260:	4604      	mov	r4, r0
 8010262:	460d      	mov	r5, r1
 8010264:	f7f0 f994 	bl	8000590 <__aeabi_dmul>
 8010268:	a37b      	add	r3, pc, #492	@ (adr r3, 8010458 <__ieee754_pow+0x740>)
 801026a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801026e:	f7ef ffd9 	bl	8000224 <__adddf3>
 8010272:	4622      	mov	r2, r4
 8010274:	462b      	mov	r3, r5
 8010276:	f7f0 f98b 	bl	8000590 <__aeabi_dmul>
 801027a:	a379      	add	r3, pc, #484	@ (adr r3, 8010460 <__ieee754_pow+0x748>)
 801027c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010280:	f7ef ffd0 	bl	8000224 <__adddf3>
 8010284:	4622      	mov	r2, r4
 8010286:	462b      	mov	r3, r5
 8010288:	f7f0 f982 	bl	8000590 <__aeabi_dmul>
 801028c:	a376      	add	r3, pc, #472	@ (adr r3, 8010468 <__ieee754_pow+0x750>)
 801028e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010292:	f7ef ffc7 	bl	8000224 <__adddf3>
 8010296:	4622      	mov	r2, r4
 8010298:	462b      	mov	r3, r5
 801029a:	f7f0 f979 	bl	8000590 <__aeabi_dmul>
 801029e:	a374      	add	r3, pc, #464	@ (adr r3, 8010470 <__ieee754_pow+0x758>)
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	f7ef ffbe 	bl	8000224 <__adddf3>
 80102a8:	4622      	mov	r2, r4
 80102aa:	462b      	mov	r3, r5
 80102ac:	f7f0 f970 	bl	8000590 <__aeabi_dmul>
 80102b0:	a371      	add	r3, pc, #452	@ (adr r3, 8010478 <__ieee754_pow+0x760>)
 80102b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b6:	f7ef ffb5 	bl	8000224 <__adddf3>
 80102ba:	4622      	mov	r2, r4
 80102bc:	4606      	mov	r6, r0
 80102be:	460f      	mov	r7, r1
 80102c0:	462b      	mov	r3, r5
 80102c2:	4620      	mov	r0, r4
 80102c4:	4629      	mov	r1, r5
 80102c6:	f7f0 f963 	bl	8000590 <__aeabi_dmul>
 80102ca:	4602      	mov	r2, r0
 80102cc:	460b      	mov	r3, r1
 80102ce:	4630      	mov	r0, r6
 80102d0:	4639      	mov	r1, r7
 80102d2:	f7f0 f95d 	bl	8000590 <__aeabi_dmul>
 80102d6:	465a      	mov	r2, fp
 80102d8:	4604      	mov	r4, r0
 80102da:	460d      	mov	r5, r1
 80102dc:	464b      	mov	r3, r9
 80102de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80102e2:	f7ef ff9f 	bl	8000224 <__adddf3>
 80102e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80102ea:	f7f0 f951 	bl	8000590 <__aeabi_dmul>
 80102ee:	4622      	mov	r2, r4
 80102f0:	462b      	mov	r3, r5
 80102f2:	f7ef ff97 	bl	8000224 <__adddf3>
 80102f6:	465a      	mov	r2, fp
 80102f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80102fc:	464b      	mov	r3, r9
 80102fe:	4658      	mov	r0, fp
 8010300:	4649      	mov	r1, r9
 8010302:	f7f0 f945 	bl	8000590 <__aeabi_dmul>
 8010306:	4b6a      	ldr	r3, [pc, #424]	@ (80104b0 <__ieee754_pow+0x798>)
 8010308:	2200      	movs	r2, #0
 801030a:	4606      	mov	r6, r0
 801030c:	460f      	mov	r7, r1
 801030e:	f7ef ff89 	bl	8000224 <__adddf3>
 8010312:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010316:	f7ef ff85 	bl	8000224 <__adddf3>
 801031a:	46d8      	mov	r8, fp
 801031c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010320:	460d      	mov	r5, r1
 8010322:	465a      	mov	r2, fp
 8010324:	460b      	mov	r3, r1
 8010326:	4640      	mov	r0, r8
 8010328:	4649      	mov	r1, r9
 801032a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801032e:	f7f0 f92f 	bl	8000590 <__aeabi_dmul>
 8010332:	465c      	mov	r4, fp
 8010334:	4680      	mov	r8, r0
 8010336:	4689      	mov	r9, r1
 8010338:	4b5d      	ldr	r3, [pc, #372]	@ (80104b0 <__ieee754_pow+0x798>)
 801033a:	2200      	movs	r2, #0
 801033c:	4620      	mov	r0, r4
 801033e:	4629      	mov	r1, r5
 8010340:	f7ef ff6e 	bl	8000220 <__aeabi_dsub>
 8010344:	4632      	mov	r2, r6
 8010346:	463b      	mov	r3, r7
 8010348:	f7ef ff6a 	bl	8000220 <__aeabi_dsub>
 801034c:	4602      	mov	r2, r0
 801034e:	460b      	mov	r3, r1
 8010350:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010354:	f7ef ff64 	bl	8000220 <__aeabi_dsub>
 8010358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801035c:	f7f0 f918 	bl	8000590 <__aeabi_dmul>
 8010360:	4622      	mov	r2, r4
 8010362:	4606      	mov	r6, r0
 8010364:	460f      	mov	r7, r1
 8010366:	462b      	mov	r3, r5
 8010368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801036c:	f7f0 f910 	bl	8000590 <__aeabi_dmul>
 8010370:	4602      	mov	r2, r0
 8010372:	460b      	mov	r3, r1
 8010374:	4630      	mov	r0, r6
 8010376:	4639      	mov	r1, r7
 8010378:	f7ef ff54 	bl	8000224 <__adddf3>
 801037c:	4606      	mov	r6, r0
 801037e:	460f      	mov	r7, r1
 8010380:	4602      	mov	r2, r0
 8010382:	460b      	mov	r3, r1
 8010384:	4640      	mov	r0, r8
 8010386:	4649      	mov	r1, r9
 8010388:	f7ef ff4c 	bl	8000224 <__adddf3>
 801038c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010390:	a33b      	add	r3, pc, #236	@ (adr r3, 8010480 <__ieee754_pow+0x768>)
 8010392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010396:	4658      	mov	r0, fp
 8010398:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801039c:	460d      	mov	r5, r1
 801039e:	f7f0 f8f7 	bl	8000590 <__aeabi_dmul>
 80103a2:	465c      	mov	r4, fp
 80103a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103a8:	4642      	mov	r2, r8
 80103aa:	464b      	mov	r3, r9
 80103ac:	4620      	mov	r0, r4
 80103ae:	4629      	mov	r1, r5
 80103b0:	f7ef ff36 	bl	8000220 <__aeabi_dsub>
 80103b4:	4602      	mov	r2, r0
 80103b6:	460b      	mov	r3, r1
 80103b8:	4630      	mov	r0, r6
 80103ba:	4639      	mov	r1, r7
 80103bc:	f7ef ff30 	bl	8000220 <__aeabi_dsub>
 80103c0:	a331      	add	r3, pc, #196	@ (adr r3, 8010488 <__ieee754_pow+0x770>)
 80103c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103c6:	f7f0 f8e3 	bl	8000590 <__aeabi_dmul>
 80103ca:	a331      	add	r3, pc, #196	@ (adr r3, 8010490 <__ieee754_pow+0x778>)
 80103cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d0:	4606      	mov	r6, r0
 80103d2:	460f      	mov	r7, r1
 80103d4:	4620      	mov	r0, r4
 80103d6:	4629      	mov	r1, r5
 80103d8:	f7f0 f8da 	bl	8000590 <__aeabi_dmul>
 80103dc:	4602      	mov	r2, r0
 80103de:	460b      	mov	r3, r1
 80103e0:	4630      	mov	r0, r6
 80103e2:	4639      	mov	r1, r7
 80103e4:	f7ef ff1e 	bl	8000224 <__adddf3>
 80103e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80103ea:	4b32      	ldr	r3, [pc, #200]	@ (80104b4 <__ieee754_pow+0x79c>)
 80103ec:	4413      	add	r3, r2
 80103ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f2:	f7ef ff17 	bl	8000224 <__adddf3>
 80103f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80103fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80103fc:	f7f0 f85e 	bl	80004bc <__aeabi_i2d>
 8010400:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010402:	4b2d      	ldr	r3, [pc, #180]	@ (80104b8 <__ieee754_pow+0x7a0>)
 8010404:	4413      	add	r3, r2
 8010406:	e9d3 8900 	ldrd	r8, r9, [r3]
 801040a:	4606      	mov	r6, r0
 801040c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010410:	460f      	mov	r7, r1
 8010412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010416:	f7ef ff05 	bl	8000224 <__adddf3>
 801041a:	4642      	mov	r2, r8
 801041c:	464b      	mov	r3, r9
 801041e:	f7ef ff01 	bl	8000224 <__adddf3>
 8010422:	4632      	mov	r2, r6
 8010424:	463b      	mov	r3, r7
 8010426:	f7ef fefd 	bl	8000224 <__adddf3>
 801042a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801042e:	4632      	mov	r2, r6
 8010430:	463b      	mov	r3, r7
 8010432:	4658      	mov	r0, fp
 8010434:	460d      	mov	r5, r1
 8010436:	f7ef fef3 	bl	8000220 <__aeabi_dsub>
 801043a:	4642      	mov	r2, r8
 801043c:	464b      	mov	r3, r9
 801043e:	f7ef feef 	bl	8000220 <__aeabi_dsub>
 8010442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010446:	f7ef feeb 	bl	8000220 <__aeabi_dsub>
 801044a:	465c      	mov	r4, fp
 801044c:	e036      	b.n	80104bc <__ieee754_pow+0x7a4>
 801044e:	bf00      	nop
 8010450:	4a454eef 	.word	0x4a454eef
 8010454:	3fca7e28 	.word	0x3fca7e28
 8010458:	93c9db65 	.word	0x93c9db65
 801045c:	3fcd864a 	.word	0x3fcd864a
 8010460:	a91d4101 	.word	0xa91d4101
 8010464:	3fd17460 	.word	0x3fd17460
 8010468:	518f264d 	.word	0x518f264d
 801046c:	3fd55555 	.word	0x3fd55555
 8010470:	db6fabff 	.word	0xdb6fabff
 8010474:	3fdb6db6 	.word	0x3fdb6db6
 8010478:	33333303 	.word	0x33333303
 801047c:	3fe33333 	.word	0x3fe33333
 8010480:	e0000000 	.word	0xe0000000
 8010484:	3feec709 	.word	0x3feec709
 8010488:	dc3a03fd 	.word	0xdc3a03fd
 801048c:	3feec709 	.word	0x3feec709
 8010490:	145b01f5 	.word	0x145b01f5
 8010494:	be3e2fe0 	.word	0xbe3e2fe0
 8010498:	7ff00000 	.word	0x7ff00000
 801049c:	43400000 	.word	0x43400000
 80104a0:	0003988e 	.word	0x0003988e
 80104a4:	000bb679 	.word	0x000bb679
 80104a8:	08011388 	.word	0x08011388
 80104ac:	3ff00000 	.word	0x3ff00000
 80104b0:	40080000 	.word	0x40080000
 80104b4:	08011368 	.word	0x08011368
 80104b8:	08011378 	.word	0x08011378
 80104bc:	4602      	mov	r2, r0
 80104be:	460b      	mov	r3, r1
 80104c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80104c4:	e5d6      	b.n	8010074 <__ieee754_pow+0x35c>
 80104c6:	f04f 0a01 	mov.w	sl, #1
 80104ca:	e65e      	b.n	801018a <__ieee754_pow+0x472>
 80104cc:	a3b5      	add	r3, pc, #724	@ (adr r3, 80107a4 <__ieee754_pow+0xa8c>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	4630      	mov	r0, r6
 80104d4:	4639      	mov	r1, r7
 80104d6:	f7ef fea5 	bl	8000224 <__adddf3>
 80104da:	4642      	mov	r2, r8
 80104dc:	e9cd 0100 	strd	r0, r1, [sp]
 80104e0:	464b      	mov	r3, r9
 80104e2:	4620      	mov	r0, r4
 80104e4:	4629      	mov	r1, r5
 80104e6:	f7ef fe9b 	bl	8000220 <__aeabi_dsub>
 80104ea:	4602      	mov	r2, r0
 80104ec:	460b      	mov	r3, r1
 80104ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80104f2:	f7f0 fadd 	bl	8000ab0 <__aeabi_dcmpgt>
 80104f6:	2800      	cmp	r0, #0
 80104f8:	f47f adfe 	bne.w	80100f8 <__ieee754_pow+0x3e0>
 80104fc:	4ba2      	ldr	r3, [pc, #648]	@ (8010788 <__ieee754_pow+0xa70>)
 80104fe:	e022      	b.n	8010546 <__ieee754_pow+0x82e>
 8010500:	4ca2      	ldr	r4, [pc, #648]	@ (801078c <__ieee754_pow+0xa74>)
 8010502:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010506:	42a3      	cmp	r3, r4
 8010508:	d919      	bls.n	801053e <__ieee754_pow+0x826>
 801050a:	4ba1      	ldr	r3, [pc, #644]	@ (8010790 <__ieee754_pow+0xa78>)
 801050c:	440b      	add	r3, r1
 801050e:	4303      	orrs	r3, r0
 8010510:	d009      	beq.n	8010526 <__ieee754_pow+0x80e>
 8010512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010516:	2200      	movs	r2, #0
 8010518:	2300      	movs	r3, #0
 801051a:	f7f0 faab 	bl	8000a74 <__aeabi_dcmplt>
 801051e:	3800      	subs	r0, #0
 8010520:	bf18      	it	ne
 8010522:	2001      	movne	r0, #1
 8010524:	e512      	b.n	800ff4c <__ieee754_pow+0x234>
 8010526:	4642      	mov	r2, r8
 8010528:	464b      	mov	r3, r9
 801052a:	f7ef fe79 	bl	8000220 <__aeabi_dsub>
 801052e:	4632      	mov	r2, r6
 8010530:	463b      	mov	r3, r7
 8010532:	f7f0 fab3 	bl	8000a9c <__aeabi_dcmpge>
 8010536:	2800      	cmp	r0, #0
 8010538:	d1eb      	bne.n	8010512 <__ieee754_pow+0x7fa>
 801053a:	4b96      	ldr	r3, [pc, #600]	@ (8010794 <__ieee754_pow+0xa7c>)
 801053c:	e003      	b.n	8010546 <__ieee754_pow+0x82e>
 801053e:	4a96      	ldr	r2, [pc, #600]	@ (8010798 <__ieee754_pow+0xa80>)
 8010540:	4293      	cmp	r3, r2
 8010542:	f240 80e7 	bls.w	8010714 <__ieee754_pow+0x9fc>
 8010546:	151b      	asrs	r3, r3, #20
 8010548:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 801054c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8010550:	fa4a fa03 	asr.w	sl, sl, r3
 8010554:	44da      	add	sl, fp
 8010556:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801055a:	4890      	ldr	r0, [pc, #576]	@ (801079c <__ieee754_pow+0xa84>)
 801055c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010560:	4108      	asrs	r0, r1
 8010562:	ea00 030a 	and.w	r3, r0, sl
 8010566:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801056a:	f1c1 0114 	rsb	r1, r1, #20
 801056e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010572:	fa4a fa01 	asr.w	sl, sl, r1
 8010576:	f1bb 0f00 	cmp.w	fp, #0
 801057a:	4640      	mov	r0, r8
 801057c:	4649      	mov	r1, r9
 801057e:	f04f 0200 	mov.w	r2, #0
 8010582:	bfb8      	it	lt
 8010584:	f1ca 0a00 	rsblt	sl, sl, #0
 8010588:	f7ef fe4a 	bl	8000220 <__aeabi_dsub>
 801058c:	4680      	mov	r8, r0
 801058e:	4689      	mov	r9, r1
 8010590:	4632      	mov	r2, r6
 8010592:	463b      	mov	r3, r7
 8010594:	4640      	mov	r0, r8
 8010596:	4649      	mov	r1, r9
 8010598:	f7ef fe44 	bl	8000224 <__adddf3>
 801059c:	2400      	movs	r4, #0
 801059e:	a36a      	add	r3, pc, #424	@ (adr r3, 8010748 <__ieee754_pow+0xa30>)
 80105a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a4:	4620      	mov	r0, r4
 80105a6:	460d      	mov	r5, r1
 80105a8:	f7ef fff2 	bl	8000590 <__aeabi_dmul>
 80105ac:	4642      	mov	r2, r8
 80105ae:	e9cd 0100 	strd	r0, r1, [sp]
 80105b2:	464b      	mov	r3, r9
 80105b4:	4620      	mov	r0, r4
 80105b6:	4629      	mov	r1, r5
 80105b8:	f7ef fe32 	bl	8000220 <__aeabi_dsub>
 80105bc:	4602      	mov	r2, r0
 80105be:	460b      	mov	r3, r1
 80105c0:	4630      	mov	r0, r6
 80105c2:	4639      	mov	r1, r7
 80105c4:	f7ef fe2c 	bl	8000220 <__aeabi_dsub>
 80105c8:	a361      	add	r3, pc, #388	@ (adr r3, 8010750 <__ieee754_pow+0xa38>)
 80105ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ce:	f7ef ffdf 	bl	8000590 <__aeabi_dmul>
 80105d2:	a361      	add	r3, pc, #388	@ (adr r3, 8010758 <__ieee754_pow+0xa40>)
 80105d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d8:	4680      	mov	r8, r0
 80105da:	4689      	mov	r9, r1
 80105dc:	4620      	mov	r0, r4
 80105de:	4629      	mov	r1, r5
 80105e0:	f7ef ffd6 	bl	8000590 <__aeabi_dmul>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	4640      	mov	r0, r8
 80105ea:	4649      	mov	r1, r9
 80105ec:	f7ef fe1a 	bl	8000224 <__adddf3>
 80105f0:	4604      	mov	r4, r0
 80105f2:	460d      	mov	r5, r1
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105fc:	f7ef fe12 	bl	8000224 <__adddf3>
 8010600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010604:	4680      	mov	r8, r0
 8010606:	4689      	mov	r9, r1
 8010608:	f7ef fe0a 	bl	8000220 <__aeabi_dsub>
 801060c:	4602      	mov	r2, r0
 801060e:	460b      	mov	r3, r1
 8010610:	4620      	mov	r0, r4
 8010612:	4629      	mov	r1, r5
 8010614:	f7ef fe04 	bl	8000220 <__aeabi_dsub>
 8010618:	4642      	mov	r2, r8
 801061a:	4606      	mov	r6, r0
 801061c:	460f      	mov	r7, r1
 801061e:	464b      	mov	r3, r9
 8010620:	4640      	mov	r0, r8
 8010622:	4649      	mov	r1, r9
 8010624:	f7ef ffb4 	bl	8000590 <__aeabi_dmul>
 8010628:	a34d      	add	r3, pc, #308	@ (adr r3, 8010760 <__ieee754_pow+0xa48>)
 801062a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062e:	4604      	mov	r4, r0
 8010630:	460d      	mov	r5, r1
 8010632:	f7ef ffad 	bl	8000590 <__aeabi_dmul>
 8010636:	a34c      	add	r3, pc, #304	@ (adr r3, 8010768 <__ieee754_pow+0xa50>)
 8010638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063c:	f7ef fdf0 	bl	8000220 <__aeabi_dsub>
 8010640:	4622      	mov	r2, r4
 8010642:	462b      	mov	r3, r5
 8010644:	f7ef ffa4 	bl	8000590 <__aeabi_dmul>
 8010648:	a349      	add	r3, pc, #292	@ (adr r3, 8010770 <__ieee754_pow+0xa58>)
 801064a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064e:	f7ef fde9 	bl	8000224 <__adddf3>
 8010652:	4622      	mov	r2, r4
 8010654:	462b      	mov	r3, r5
 8010656:	f7ef ff9b 	bl	8000590 <__aeabi_dmul>
 801065a:	a347      	add	r3, pc, #284	@ (adr r3, 8010778 <__ieee754_pow+0xa60>)
 801065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010660:	f7ef fdde 	bl	8000220 <__aeabi_dsub>
 8010664:	4622      	mov	r2, r4
 8010666:	462b      	mov	r3, r5
 8010668:	f7ef ff92 	bl	8000590 <__aeabi_dmul>
 801066c:	a344      	add	r3, pc, #272	@ (adr r3, 8010780 <__ieee754_pow+0xa68>)
 801066e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010672:	f7ef fdd7 	bl	8000224 <__adddf3>
 8010676:	4622      	mov	r2, r4
 8010678:	462b      	mov	r3, r5
 801067a:	f7ef ff89 	bl	8000590 <__aeabi_dmul>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	4640      	mov	r0, r8
 8010684:	4649      	mov	r1, r9
 8010686:	f7ef fdcb 	bl	8000220 <__aeabi_dsub>
 801068a:	4604      	mov	r4, r0
 801068c:	460d      	mov	r5, r1
 801068e:	4602      	mov	r2, r0
 8010690:	460b      	mov	r3, r1
 8010692:	4640      	mov	r0, r8
 8010694:	4649      	mov	r1, r9
 8010696:	f7ef ff7b 	bl	8000590 <__aeabi_dmul>
 801069a:	2200      	movs	r2, #0
 801069c:	e9cd 0100 	strd	r0, r1, [sp]
 80106a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80106a4:	4620      	mov	r0, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7ef fdba 	bl	8000220 <__aeabi_dsub>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106b4:	f7f0 f896 	bl	80007e4 <__aeabi_ddiv>
 80106b8:	4632      	mov	r2, r6
 80106ba:	4604      	mov	r4, r0
 80106bc:	460d      	mov	r5, r1
 80106be:	463b      	mov	r3, r7
 80106c0:	4640      	mov	r0, r8
 80106c2:	4649      	mov	r1, r9
 80106c4:	f7ef ff64 	bl	8000590 <__aeabi_dmul>
 80106c8:	4632      	mov	r2, r6
 80106ca:	463b      	mov	r3, r7
 80106cc:	f7ef fdaa 	bl	8000224 <__adddf3>
 80106d0:	4602      	mov	r2, r0
 80106d2:	460b      	mov	r3, r1
 80106d4:	4620      	mov	r0, r4
 80106d6:	4629      	mov	r1, r5
 80106d8:	f7ef fda2 	bl	8000220 <__aeabi_dsub>
 80106dc:	4642      	mov	r2, r8
 80106de:	464b      	mov	r3, r9
 80106e0:	f7ef fd9e 	bl	8000220 <__aeabi_dsub>
 80106e4:	460b      	mov	r3, r1
 80106e6:	4602      	mov	r2, r0
 80106e8:	492d      	ldr	r1, [pc, #180]	@ (80107a0 <__ieee754_pow+0xa88>)
 80106ea:	2000      	movs	r0, #0
 80106ec:	f7ef fd98 	bl	8000220 <__aeabi_dsub>
 80106f0:	ec41 0b10 	vmov	d0, r0, r1
 80106f4:	ee10 3a90 	vmov	r3, s1
 80106f8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80106fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010700:	da0b      	bge.n	801071a <__ieee754_pow+0xa02>
 8010702:	4650      	mov	r0, sl
 8010704:	f000 fa2c 	bl	8010b60 <scalbn>
 8010708:	ec51 0b10 	vmov	r0, r1, d0
 801070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010710:	f7ff bb6d 	b.w	800fdee <__ieee754_pow+0xd6>
 8010714:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010718:	e73a      	b.n	8010590 <__ieee754_pow+0x878>
 801071a:	ec51 0b10 	vmov	r0, r1, d0
 801071e:	4619      	mov	r1, r3
 8010720:	e7f4      	b.n	801070c <__ieee754_pow+0x9f4>
 8010722:	491f      	ldr	r1, [pc, #124]	@ (80107a0 <__ieee754_pow+0xa88>)
 8010724:	2000      	movs	r0, #0
 8010726:	f7ff bb14 	b.w	800fd52 <__ieee754_pow+0x3a>
 801072a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801072e:	f7ff bb10 	b.w	800fd52 <__ieee754_pow+0x3a>
 8010732:	4630      	mov	r0, r6
 8010734:	4639      	mov	r1, r7
 8010736:	f7ff bb0c 	b.w	800fd52 <__ieee754_pow+0x3a>
 801073a:	460c      	mov	r4, r1
 801073c:	f7ff bb69 	b.w	800fe12 <__ieee754_pow+0xfa>
 8010740:	2400      	movs	r4, #0
 8010742:	f7ff bb4b 	b.w	800fddc <__ieee754_pow+0xc4>
 8010746:	bf00      	nop
 8010748:	00000000 	.word	0x00000000
 801074c:	3fe62e43 	.word	0x3fe62e43
 8010750:	fefa39ef 	.word	0xfefa39ef
 8010754:	3fe62e42 	.word	0x3fe62e42
 8010758:	0ca86c39 	.word	0x0ca86c39
 801075c:	be205c61 	.word	0xbe205c61
 8010760:	72bea4d0 	.word	0x72bea4d0
 8010764:	3e663769 	.word	0x3e663769
 8010768:	c5d26bf1 	.word	0xc5d26bf1
 801076c:	3ebbbd41 	.word	0x3ebbbd41
 8010770:	af25de2c 	.word	0xaf25de2c
 8010774:	3f11566a 	.word	0x3f11566a
 8010778:	16bebd93 	.word	0x16bebd93
 801077c:	3f66c16c 	.word	0x3f66c16c
 8010780:	5555553e 	.word	0x5555553e
 8010784:	3fc55555 	.word	0x3fc55555
 8010788:	40900000 	.word	0x40900000
 801078c:	4090cbff 	.word	0x4090cbff
 8010790:	3f6f3400 	.word	0x3f6f3400
 8010794:	4090cc00 	.word	0x4090cc00
 8010798:	3fe00000 	.word	0x3fe00000
 801079c:	fff00000 	.word	0xfff00000
 80107a0:	3ff00000 	.word	0x3ff00000
 80107a4:	652b82fe 	.word	0x652b82fe
 80107a8:	3c971547 	.word	0x3c971547

080107ac <__kernel_cosf>:
 80107ac:	ee10 3a10 	vmov	r3, s0
 80107b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80107b4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80107b8:	eef0 6a40 	vmov.f32	s13, s0
 80107bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80107c0:	d204      	bcs.n	80107cc <__kernel_cosf+0x20>
 80107c2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80107c6:	ee17 2a90 	vmov	r2, s15
 80107ca:	b342      	cbz	r2, 801081e <__kernel_cosf+0x72>
 80107cc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80107d0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801083c <__kernel_cosf+0x90>
 80107d4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8010840 <__kernel_cosf+0x94>
 80107d8:	4a1a      	ldr	r2, [pc, #104]	@ (8010844 <__kernel_cosf+0x98>)
 80107da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80107de:	4293      	cmp	r3, r2
 80107e0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010848 <__kernel_cosf+0x9c>
 80107e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80107e8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801084c <__kernel_cosf+0xa0>
 80107ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80107f0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8010850 <__kernel_cosf+0xa4>
 80107f4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80107f8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8010854 <__kernel_cosf+0xa8>
 80107fc:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010800:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8010804:	ee26 6a07 	vmul.f32	s12, s12, s14
 8010808:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801080c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8010810:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010814:	d804      	bhi.n	8010820 <__kernel_cosf+0x74>
 8010816:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801081a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801081e:	4770      	bx	lr
 8010820:	4a0d      	ldr	r2, [pc, #52]	@ (8010858 <__kernel_cosf+0xac>)
 8010822:	4293      	cmp	r3, r2
 8010824:	bf9a      	itte	ls
 8010826:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801082a:	ee07 3a10 	vmovls	s14, r3
 801082e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8010832:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010836:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801083a:	e7ec      	b.n	8010816 <__kernel_cosf+0x6a>
 801083c:	ad47d74e 	.word	0xad47d74e
 8010840:	310f74f6 	.word	0x310f74f6
 8010844:	3e999999 	.word	0x3e999999
 8010848:	b493f27c 	.word	0xb493f27c
 801084c:	37d00d01 	.word	0x37d00d01
 8010850:	bab60b61 	.word	0xbab60b61
 8010854:	3d2aaaab 	.word	0x3d2aaaab
 8010858:	3f480000 	.word	0x3f480000

0801085c <__kernel_sinf>:
 801085c:	ee10 3a10 	vmov	r3, s0
 8010860:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010864:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8010868:	d204      	bcs.n	8010874 <__kernel_sinf+0x18>
 801086a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801086e:	ee17 3a90 	vmov	r3, s15
 8010872:	b35b      	cbz	r3, 80108cc <__kernel_sinf+0x70>
 8010874:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010878:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80108d0 <__kernel_sinf+0x74>
 801087c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80108d4 <__kernel_sinf+0x78>
 8010880:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010884:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80108d8 <__kernel_sinf+0x7c>
 8010888:	eee6 7a07 	vfma.f32	s15, s12, s14
 801088c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80108dc <__kernel_sinf+0x80>
 8010890:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010894:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80108e0 <__kernel_sinf+0x84>
 8010898:	ee60 6a07 	vmul.f32	s13, s0, s14
 801089c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80108a0:	b930      	cbnz	r0, 80108b0 <__kernel_sinf+0x54>
 80108a2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80108e4 <__kernel_sinf+0x88>
 80108a6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80108aa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80108ae:	4770      	bx	lr
 80108b0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80108b4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80108b8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80108bc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80108c0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80108e8 <__kernel_sinf+0x8c>
 80108c4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80108c8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80108cc:	4770      	bx	lr
 80108ce:	bf00      	nop
 80108d0:	2f2ec9d3 	.word	0x2f2ec9d3
 80108d4:	b2d72f34 	.word	0xb2d72f34
 80108d8:	3638ef1b 	.word	0x3638ef1b
 80108dc:	b9500d01 	.word	0xb9500d01
 80108e0:	3c088889 	.word	0x3c088889
 80108e4:	be2aaaab 	.word	0xbe2aaaab
 80108e8:	3e2aaaab 	.word	0x3e2aaaab

080108ec <__ieee754_rem_pio2f>:
 80108ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ee:	ee10 6a10 	vmov	r6, s0
 80108f2:	4b88      	ldr	r3, [pc, #544]	@ (8010b14 <__ieee754_rem_pio2f+0x228>)
 80108f4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80108f8:	429d      	cmp	r5, r3
 80108fa:	b087      	sub	sp, #28
 80108fc:	4604      	mov	r4, r0
 80108fe:	d805      	bhi.n	801090c <__ieee754_rem_pio2f+0x20>
 8010900:	2300      	movs	r3, #0
 8010902:	ed80 0a00 	vstr	s0, [r0]
 8010906:	6043      	str	r3, [r0, #4]
 8010908:	2000      	movs	r0, #0
 801090a:	e022      	b.n	8010952 <__ieee754_rem_pio2f+0x66>
 801090c:	4b82      	ldr	r3, [pc, #520]	@ (8010b18 <__ieee754_rem_pio2f+0x22c>)
 801090e:	429d      	cmp	r5, r3
 8010910:	d83a      	bhi.n	8010988 <__ieee754_rem_pio2f+0x9c>
 8010912:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8010916:	2e00      	cmp	r6, #0
 8010918:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8010b1c <__ieee754_rem_pio2f+0x230>
 801091c:	4a80      	ldr	r2, [pc, #512]	@ (8010b20 <__ieee754_rem_pio2f+0x234>)
 801091e:	f023 030f 	bic.w	r3, r3, #15
 8010922:	dd18      	ble.n	8010956 <__ieee754_rem_pio2f+0x6a>
 8010924:	4293      	cmp	r3, r2
 8010926:	ee70 7a47 	vsub.f32	s15, s0, s14
 801092a:	bf09      	itett	eq
 801092c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8010b24 <__ieee754_rem_pio2f+0x238>
 8010930:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8010b28 <__ieee754_rem_pio2f+0x23c>
 8010934:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8010b2c <__ieee754_rem_pio2f+0x240>
 8010938:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801093c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8010940:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010944:	ed80 7a00 	vstr	s14, [r0]
 8010948:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801094c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010950:	2001      	movs	r0, #1
 8010952:	b007      	add	sp, #28
 8010954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010956:	4293      	cmp	r3, r2
 8010958:	ee70 7a07 	vadd.f32	s15, s0, s14
 801095c:	bf09      	itett	eq
 801095e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8010b24 <__ieee754_rem_pio2f+0x238>
 8010962:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8010b28 <__ieee754_rem_pio2f+0x23c>
 8010966:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8010b2c <__ieee754_rem_pio2f+0x240>
 801096a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801096e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010976:	ed80 7a00 	vstr	s14, [r0]
 801097a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801097e:	edc0 7a01 	vstr	s15, [r0, #4]
 8010982:	f04f 30ff 	mov.w	r0, #4294967295
 8010986:	e7e4      	b.n	8010952 <__ieee754_rem_pio2f+0x66>
 8010988:	4b69      	ldr	r3, [pc, #420]	@ (8010b30 <__ieee754_rem_pio2f+0x244>)
 801098a:	429d      	cmp	r5, r3
 801098c:	d873      	bhi.n	8010a76 <__ieee754_rem_pio2f+0x18a>
 801098e:	f000 f8dd 	bl	8010b4c <fabsf>
 8010992:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8010b34 <__ieee754_rem_pio2f+0x248>
 8010996:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801099a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801099e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80109a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80109a6:	ee17 0a90 	vmov	r0, s15
 80109aa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010b1c <__ieee754_rem_pio2f+0x230>
 80109ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 80109b2:	281f      	cmp	r0, #31
 80109b4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8010b28 <__ieee754_rem_pio2f+0x23c>
 80109b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109bc:	eeb1 6a47 	vneg.f32	s12, s14
 80109c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80109c4:	ee16 1a90 	vmov	r1, s13
 80109c8:	dc09      	bgt.n	80109de <__ieee754_rem_pio2f+0xf2>
 80109ca:	4a5b      	ldr	r2, [pc, #364]	@ (8010b38 <__ieee754_rem_pio2f+0x24c>)
 80109cc:	1e47      	subs	r7, r0, #1
 80109ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80109d2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80109d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80109da:	4293      	cmp	r3, r2
 80109dc:	d107      	bne.n	80109ee <__ieee754_rem_pio2f+0x102>
 80109de:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80109e2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80109e6:	2a08      	cmp	r2, #8
 80109e8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80109ec:	dc14      	bgt.n	8010a18 <__ieee754_rem_pio2f+0x12c>
 80109ee:	6021      	str	r1, [r4, #0]
 80109f0:	ed94 7a00 	vldr	s14, [r4]
 80109f4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80109f8:	2e00      	cmp	r6, #0
 80109fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80109fe:	ed84 0a01 	vstr	s0, [r4, #4]
 8010a02:	daa6      	bge.n	8010952 <__ieee754_rem_pio2f+0x66>
 8010a04:	eeb1 7a47 	vneg.f32	s14, s14
 8010a08:	eeb1 0a40 	vneg.f32	s0, s0
 8010a0c:	ed84 7a00 	vstr	s14, [r4]
 8010a10:	ed84 0a01 	vstr	s0, [r4, #4]
 8010a14:	4240      	negs	r0, r0
 8010a16:	e79c      	b.n	8010952 <__ieee754_rem_pio2f+0x66>
 8010a18:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8010b24 <__ieee754_rem_pio2f+0x238>
 8010a1c:	eef0 6a40 	vmov.f32	s13, s0
 8010a20:	eee6 6a25 	vfma.f32	s13, s12, s11
 8010a24:	ee70 7a66 	vsub.f32	s15, s0, s13
 8010a28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010a2c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8010b2c <__ieee754_rem_pio2f+0x240>
 8010a30:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010a34:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010a38:	ee15 2a90 	vmov	r2, s11
 8010a3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010a40:	1a5b      	subs	r3, r3, r1
 8010a42:	2b19      	cmp	r3, #25
 8010a44:	dc04      	bgt.n	8010a50 <__ieee754_rem_pio2f+0x164>
 8010a46:	edc4 5a00 	vstr	s11, [r4]
 8010a4a:	eeb0 0a66 	vmov.f32	s0, s13
 8010a4e:	e7cf      	b.n	80109f0 <__ieee754_rem_pio2f+0x104>
 8010a50:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8010b3c <__ieee754_rem_pio2f+0x250>
 8010a54:	eeb0 0a66 	vmov.f32	s0, s13
 8010a58:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010a5c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010a60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8010b40 <__ieee754_rem_pio2f+0x254>
 8010a64:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010a68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010a6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010a70:	ed84 7a00 	vstr	s14, [r4]
 8010a74:	e7bc      	b.n	80109f0 <__ieee754_rem_pio2f+0x104>
 8010a76:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010a7a:	d306      	bcc.n	8010a8a <__ieee754_rem_pio2f+0x19e>
 8010a7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010a80:	edc0 7a01 	vstr	s15, [r0, #4]
 8010a84:	edc0 7a00 	vstr	s15, [r0]
 8010a88:	e73e      	b.n	8010908 <__ieee754_rem_pio2f+0x1c>
 8010a8a:	15ea      	asrs	r2, r5, #23
 8010a8c:	3a86      	subs	r2, #134	@ 0x86
 8010a8e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010a92:	ee07 3a90 	vmov	s15, r3
 8010a96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010a9a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8010b44 <__ieee754_rem_pio2f+0x258>
 8010a9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010aa6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010aaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010aae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010ab2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010ab6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010aba:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010abe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010ac2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aca:	edcd 7a05 	vstr	s15, [sp, #20]
 8010ace:	d11e      	bne.n	8010b0e <__ieee754_rem_pio2f+0x222>
 8010ad0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad8:	bf0c      	ite	eq
 8010ada:	2301      	moveq	r3, #1
 8010adc:	2302      	movne	r3, #2
 8010ade:	491a      	ldr	r1, [pc, #104]	@ (8010b48 <__ieee754_rem_pio2f+0x25c>)
 8010ae0:	9101      	str	r1, [sp, #4]
 8010ae2:	2102      	movs	r1, #2
 8010ae4:	9100      	str	r1, [sp, #0]
 8010ae6:	a803      	add	r0, sp, #12
 8010ae8:	4621      	mov	r1, r4
 8010aea:	f000 f957 	bl	8010d9c <__kernel_rem_pio2f>
 8010aee:	2e00      	cmp	r6, #0
 8010af0:	f6bf af2f 	bge.w	8010952 <__ieee754_rem_pio2f+0x66>
 8010af4:	edd4 7a00 	vldr	s15, [r4]
 8010af8:	eef1 7a67 	vneg.f32	s15, s15
 8010afc:	edc4 7a00 	vstr	s15, [r4]
 8010b00:	edd4 7a01 	vldr	s15, [r4, #4]
 8010b04:	eef1 7a67 	vneg.f32	s15, s15
 8010b08:	edc4 7a01 	vstr	s15, [r4, #4]
 8010b0c:	e782      	b.n	8010a14 <__ieee754_rem_pio2f+0x128>
 8010b0e:	2303      	movs	r3, #3
 8010b10:	e7e5      	b.n	8010ade <__ieee754_rem_pio2f+0x1f2>
 8010b12:	bf00      	nop
 8010b14:	3f490fd8 	.word	0x3f490fd8
 8010b18:	4016cbe3 	.word	0x4016cbe3
 8010b1c:	3fc90f80 	.word	0x3fc90f80
 8010b20:	3fc90fd0 	.word	0x3fc90fd0
 8010b24:	37354400 	.word	0x37354400
 8010b28:	37354443 	.word	0x37354443
 8010b2c:	2e85a308 	.word	0x2e85a308
 8010b30:	43490f80 	.word	0x43490f80
 8010b34:	3f22f984 	.word	0x3f22f984
 8010b38:	08011398 	.word	0x08011398
 8010b3c:	2e85a300 	.word	0x2e85a300
 8010b40:	248d3132 	.word	0x248d3132
 8010b44:	43800000 	.word	0x43800000
 8010b48:	08011418 	.word	0x08011418

08010b4c <fabsf>:
 8010b4c:	ee10 3a10 	vmov	r3, s0
 8010b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010b54:	ee00 3a10 	vmov	s0, r3
 8010b58:	4770      	bx	lr
 8010b5a:	0000      	movs	r0, r0
 8010b5c:	0000      	movs	r0, r0
	...

08010b60 <scalbn>:
 8010b60:	b570      	push	{r4, r5, r6, lr}
 8010b62:	ec55 4b10 	vmov	r4, r5, d0
 8010b66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8010b6a:	4606      	mov	r6, r0
 8010b6c:	462b      	mov	r3, r5
 8010b6e:	b991      	cbnz	r1, 8010b96 <scalbn+0x36>
 8010b70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8010b74:	4323      	orrs	r3, r4
 8010b76:	d03b      	beq.n	8010bf0 <scalbn+0x90>
 8010b78:	4b33      	ldr	r3, [pc, #204]	@ (8010c48 <scalbn+0xe8>)
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	2200      	movs	r2, #0
 8010b80:	f7ef fd06 	bl	8000590 <__aeabi_dmul>
 8010b84:	4b31      	ldr	r3, [pc, #196]	@ (8010c4c <scalbn+0xec>)
 8010b86:	429e      	cmp	r6, r3
 8010b88:	4604      	mov	r4, r0
 8010b8a:	460d      	mov	r5, r1
 8010b8c:	da0f      	bge.n	8010bae <scalbn+0x4e>
 8010b8e:	a326      	add	r3, pc, #152	@ (adr r3, 8010c28 <scalbn+0xc8>)
 8010b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b94:	e01e      	b.n	8010bd4 <scalbn+0x74>
 8010b96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8010b9a:	4291      	cmp	r1, r2
 8010b9c:	d10b      	bne.n	8010bb6 <scalbn+0x56>
 8010b9e:	4622      	mov	r2, r4
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	4629      	mov	r1, r5
 8010ba4:	f7ef fb3e 	bl	8000224 <__adddf3>
 8010ba8:	4604      	mov	r4, r0
 8010baa:	460d      	mov	r5, r1
 8010bac:	e020      	b.n	8010bf0 <scalbn+0x90>
 8010bae:	460b      	mov	r3, r1
 8010bb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8010bb4:	3936      	subs	r1, #54	@ 0x36
 8010bb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8010bba:	4296      	cmp	r6, r2
 8010bbc:	dd0d      	ble.n	8010bda <scalbn+0x7a>
 8010bbe:	2d00      	cmp	r5, #0
 8010bc0:	a11b      	add	r1, pc, #108	@ (adr r1, 8010c30 <scalbn+0xd0>)
 8010bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bc6:	da02      	bge.n	8010bce <scalbn+0x6e>
 8010bc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8010c38 <scalbn+0xd8>)
 8010bca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bce:	a318      	add	r3, pc, #96	@ (adr r3, 8010c30 <scalbn+0xd0>)
 8010bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd4:	f7ef fcdc 	bl	8000590 <__aeabi_dmul>
 8010bd8:	e7e6      	b.n	8010ba8 <scalbn+0x48>
 8010bda:	1872      	adds	r2, r6, r1
 8010bdc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8010be0:	428a      	cmp	r2, r1
 8010be2:	dcec      	bgt.n	8010bbe <scalbn+0x5e>
 8010be4:	2a00      	cmp	r2, #0
 8010be6:	dd06      	ble.n	8010bf6 <scalbn+0x96>
 8010be8:	f36f 531e 	bfc	r3, #20, #11
 8010bec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010bf0:	ec45 4b10 	vmov	d0, r4, r5
 8010bf4:	bd70      	pop	{r4, r5, r6, pc}
 8010bf6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8010bfa:	da08      	bge.n	8010c0e <scalbn+0xae>
 8010bfc:	2d00      	cmp	r5, #0
 8010bfe:	a10a      	add	r1, pc, #40	@ (adr r1, 8010c28 <scalbn+0xc8>)
 8010c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c04:	dac3      	bge.n	8010b8e <scalbn+0x2e>
 8010c06:	a10e      	add	r1, pc, #56	@ (adr r1, 8010c40 <scalbn+0xe0>)
 8010c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c0c:	e7bf      	b.n	8010b8e <scalbn+0x2e>
 8010c0e:	3236      	adds	r2, #54	@ 0x36
 8010c10:	f36f 531e 	bfc	r3, #20, #11
 8010c14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c18:	4620      	mov	r0, r4
 8010c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010c50 <scalbn+0xf0>)
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	2200      	movs	r2, #0
 8010c20:	e7d8      	b.n	8010bd4 <scalbn+0x74>
 8010c22:	bf00      	nop
 8010c24:	f3af 8000 	nop.w
 8010c28:	c2f8f359 	.word	0xc2f8f359
 8010c2c:	01a56e1f 	.word	0x01a56e1f
 8010c30:	8800759c 	.word	0x8800759c
 8010c34:	7e37e43c 	.word	0x7e37e43c
 8010c38:	8800759c 	.word	0x8800759c
 8010c3c:	fe37e43c 	.word	0xfe37e43c
 8010c40:	c2f8f359 	.word	0xc2f8f359
 8010c44:	81a56e1f 	.word	0x81a56e1f
 8010c48:	43500000 	.word	0x43500000
 8010c4c:	ffff3cb0 	.word	0xffff3cb0
 8010c50:	3c900000 	.word	0x3c900000

08010c54 <with_errno>:
 8010c54:	b510      	push	{r4, lr}
 8010c56:	ed2d 8b02 	vpush	{d8}
 8010c5a:	eeb0 8a40 	vmov.f32	s16, s0
 8010c5e:	eef0 8a60 	vmov.f32	s17, s1
 8010c62:	4604      	mov	r4, r0
 8010c64:	f7fe fb52 	bl	800f30c <__errno>
 8010c68:	eeb0 0a48 	vmov.f32	s0, s16
 8010c6c:	eef0 0a68 	vmov.f32	s1, s17
 8010c70:	ecbd 8b02 	vpop	{d8}
 8010c74:	6004      	str	r4, [r0, #0]
 8010c76:	bd10      	pop	{r4, pc}

08010c78 <xflow>:
 8010c78:	4603      	mov	r3, r0
 8010c7a:	b507      	push	{r0, r1, r2, lr}
 8010c7c:	ec51 0b10 	vmov	r0, r1, d0
 8010c80:	b183      	cbz	r3, 8010ca4 <xflow+0x2c>
 8010c82:	4602      	mov	r2, r0
 8010c84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010c88:	e9cd 2300 	strd	r2, r3, [sp]
 8010c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c90:	f7ef fc7e 	bl	8000590 <__aeabi_dmul>
 8010c94:	ec41 0b10 	vmov	d0, r0, r1
 8010c98:	2022      	movs	r0, #34	@ 0x22
 8010c9a:	b003      	add	sp, #12
 8010c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ca0:	f7ff bfd8 	b.w	8010c54 <with_errno>
 8010ca4:	4602      	mov	r2, r0
 8010ca6:	460b      	mov	r3, r1
 8010ca8:	e7ee      	b.n	8010c88 <xflow+0x10>
 8010caa:	0000      	movs	r0, r0
 8010cac:	0000      	movs	r0, r0
	...

08010cb0 <__math_uflow>:
 8010cb0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010cb8 <__math_uflow+0x8>
 8010cb4:	f7ff bfe0 	b.w	8010c78 <xflow>
 8010cb8:	00000000 	.word	0x00000000
 8010cbc:	10000000 	.word	0x10000000

08010cc0 <__math_oflow>:
 8010cc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010cc8 <__math_oflow+0x8>
 8010cc4:	f7ff bfd8 	b.w	8010c78 <xflow>
 8010cc8:	00000000 	.word	0x00000000
 8010ccc:	70000000 	.word	0x70000000

08010cd0 <scalbnf>:
 8010cd0:	ee10 3a10 	vmov	r3, s0
 8010cd4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010cd8:	d02b      	beq.n	8010d32 <scalbnf+0x62>
 8010cda:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8010cde:	d302      	bcc.n	8010ce6 <scalbnf+0x16>
 8010ce0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ce4:	4770      	bx	lr
 8010ce6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8010cea:	d123      	bne.n	8010d34 <scalbnf+0x64>
 8010cec:	4b24      	ldr	r3, [pc, #144]	@ (8010d80 <scalbnf+0xb0>)
 8010cee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010d84 <scalbnf+0xb4>
 8010cf2:	4298      	cmp	r0, r3
 8010cf4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010cf8:	db17      	blt.n	8010d2a <scalbnf+0x5a>
 8010cfa:	ee10 3a10 	vmov	r3, s0
 8010cfe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010d02:	3a19      	subs	r2, #25
 8010d04:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8010d08:	4288      	cmp	r0, r1
 8010d0a:	dd15      	ble.n	8010d38 <scalbnf+0x68>
 8010d0c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010d88 <scalbnf+0xb8>
 8010d10:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8010d8c <scalbnf+0xbc>
 8010d14:	ee10 3a10 	vmov	r3, s0
 8010d18:	eeb0 7a67 	vmov.f32	s14, s15
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	bfb8      	it	lt
 8010d20:	eef0 7a66 	vmovlt.f32	s15, s13
 8010d24:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010d28:	4770      	bx	lr
 8010d2a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010d90 <scalbnf+0xc0>
 8010d2e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010d32:	4770      	bx	lr
 8010d34:	0dd2      	lsrs	r2, r2, #23
 8010d36:	e7e5      	b.n	8010d04 <scalbnf+0x34>
 8010d38:	4410      	add	r0, r2
 8010d3a:	28fe      	cmp	r0, #254	@ 0xfe
 8010d3c:	dce6      	bgt.n	8010d0c <scalbnf+0x3c>
 8010d3e:	2800      	cmp	r0, #0
 8010d40:	dd06      	ble.n	8010d50 <scalbnf+0x80>
 8010d42:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010d46:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010d4a:	ee00 3a10 	vmov	s0, r3
 8010d4e:	4770      	bx	lr
 8010d50:	f110 0f16 	cmn.w	r0, #22
 8010d54:	da09      	bge.n	8010d6a <scalbnf+0x9a>
 8010d56:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010d90 <scalbnf+0xc0>
 8010d5a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010d94 <scalbnf+0xc4>
 8010d5e:	ee10 3a10 	vmov	r3, s0
 8010d62:	eeb0 7a67 	vmov.f32	s14, s15
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	e7d9      	b.n	8010d1e <scalbnf+0x4e>
 8010d6a:	3019      	adds	r0, #25
 8010d6c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010d70:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010d74:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010d98 <scalbnf+0xc8>
 8010d78:	ee07 3a90 	vmov	s15, r3
 8010d7c:	e7d7      	b.n	8010d2e <scalbnf+0x5e>
 8010d7e:	bf00      	nop
 8010d80:	ffff3cb0 	.word	0xffff3cb0
 8010d84:	4c000000 	.word	0x4c000000
 8010d88:	7149f2ca 	.word	0x7149f2ca
 8010d8c:	f149f2ca 	.word	0xf149f2ca
 8010d90:	0da24260 	.word	0x0da24260
 8010d94:	8da24260 	.word	0x8da24260
 8010d98:	33000000 	.word	0x33000000

08010d9c <__kernel_rem_pio2f>:
 8010d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010da0:	ed2d 8b04 	vpush	{d8-d9}
 8010da4:	b0d9      	sub	sp, #356	@ 0x164
 8010da6:	4690      	mov	r8, r2
 8010da8:	9001      	str	r0, [sp, #4]
 8010daa:	4ab6      	ldr	r2, [pc, #728]	@ (8011084 <__kernel_rem_pio2f+0x2e8>)
 8010dac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8010dae:	f118 0f04 	cmn.w	r8, #4
 8010db2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8010db6:	460f      	mov	r7, r1
 8010db8:	f103 3bff 	add.w	fp, r3, #4294967295
 8010dbc:	db26      	blt.n	8010e0c <__kernel_rem_pio2f+0x70>
 8010dbe:	f1b8 0203 	subs.w	r2, r8, #3
 8010dc2:	bf48      	it	mi
 8010dc4:	f108 0204 	addmi.w	r2, r8, #4
 8010dc8:	10d2      	asrs	r2, r2, #3
 8010dca:	1c55      	adds	r5, r2, #1
 8010dcc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010dce:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8011094 <__kernel_rem_pio2f+0x2f8>
 8010dd2:	00e8      	lsls	r0, r5, #3
 8010dd4:	eba2 060b 	sub.w	r6, r2, fp
 8010dd8:	9002      	str	r0, [sp, #8]
 8010dda:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8010dde:	eb0a 0c0b 	add.w	ip, sl, fp
 8010de2:	ac1c      	add	r4, sp, #112	@ 0x70
 8010de4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8010de8:	2000      	movs	r0, #0
 8010dea:	4560      	cmp	r0, ip
 8010dec:	dd10      	ble.n	8010e10 <__kernel_rem_pio2f+0x74>
 8010dee:	a91c      	add	r1, sp, #112	@ 0x70
 8010df0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010df4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010df8:	2600      	movs	r6, #0
 8010dfa:	4556      	cmp	r6, sl
 8010dfc:	dc24      	bgt.n	8010e48 <__kernel_rem_pio2f+0xac>
 8010dfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010e02:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8011094 <__kernel_rem_pio2f+0x2f8>
 8010e06:	4684      	mov	ip, r0
 8010e08:	2400      	movs	r4, #0
 8010e0a:	e016      	b.n	8010e3a <__kernel_rem_pio2f+0x9e>
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	e7dc      	b.n	8010dca <__kernel_rem_pio2f+0x2e>
 8010e10:	42c6      	cmn	r6, r0
 8010e12:	bf5d      	ittte	pl
 8010e14:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010e18:	ee07 1a90 	vmovpl	s15, r1
 8010e1c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010e20:	eef0 7a47 	vmovmi.f32	s15, s14
 8010e24:	ece4 7a01 	vstmia	r4!, {s15}
 8010e28:	3001      	adds	r0, #1
 8010e2a:	e7de      	b.n	8010dea <__kernel_rem_pio2f+0x4e>
 8010e2c:	ecfe 6a01 	vldmia	lr!, {s13}
 8010e30:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010e34:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010e38:	3401      	adds	r4, #1
 8010e3a:	455c      	cmp	r4, fp
 8010e3c:	ddf6      	ble.n	8010e2c <__kernel_rem_pio2f+0x90>
 8010e3e:	ece9 7a01 	vstmia	r9!, {s15}
 8010e42:	3601      	adds	r6, #1
 8010e44:	3004      	adds	r0, #4
 8010e46:	e7d8      	b.n	8010dfa <__kernel_rem_pio2f+0x5e>
 8010e48:	a908      	add	r1, sp, #32
 8010e4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010e4e:	9104      	str	r1, [sp, #16]
 8010e50:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8010e52:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8011090 <__kernel_rem_pio2f+0x2f4>
 8010e56:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 801108c <__kernel_rem_pio2f+0x2f0>
 8010e5a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010e5e:	9203      	str	r2, [sp, #12]
 8010e60:	4654      	mov	r4, sl
 8010e62:	00a2      	lsls	r2, r4, #2
 8010e64:	9205      	str	r2, [sp, #20]
 8010e66:	aa58      	add	r2, sp, #352	@ 0x160
 8010e68:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010e6c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8010e70:	a944      	add	r1, sp, #272	@ 0x110
 8010e72:	aa08      	add	r2, sp, #32
 8010e74:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010e78:	4694      	mov	ip, r2
 8010e7a:	4626      	mov	r6, r4
 8010e7c:	2e00      	cmp	r6, #0
 8010e7e:	dc4c      	bgt.n	8010f1a <__kernel_rem_pio2f+0x17e>
 8010e80:	4628      	mov	r0, r5
 8010e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e86:	f7ff ff23 	bl	8010cd0 <scalbnf>
 8010e8a:	eeb0 8a40 	vmov.f32	s16, s0
 8010e8e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8010e92:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010e96:	f000 f9e9 	bl	801126c <floorf>
 8010e9a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8010e9e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010ea2:	2d00      	cmp	r5, #0
 8010ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ea8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010eac:	ee17 9a90 	vmov	r9, s15
 8010eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010eb4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8010eb8:	dd41      	ble.n	8010f3e <__kernel_rem_pio2f+0x1a2>
 8010eba:	f104 3cff 	add.w	ip, r4, #4294967295
 8010ebe:	a908      	add	r1, sp, #32
 8010ec0:	f1c5 0e08 	rsb	lr, r5, #8
 8010ec4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8010ec8:	fa46 f00e 	asr.w	r0, r6, lr
 8010ecc:	4481      	add	r9, r0
 8010ece:	fa00 f00e 	lsl.w	r0, r0, lr
 8010ed2:	1a36      	subs	r6, r6, r0
 8010ed4:	f1c5 0007 	rsb	r0, r5, #7
 8010ed8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8010edc:	4106      	asrs	r6, r0
 8010ede:	2e00      	cmp	r6, #0
 8010ee0:	dd3c      	ble.n	8010f5c <__kernel_rem_pio2f+0x1c0>
 8010ee2:	f04f 0e00 	mov.w	lr, #0
 8010ee6:	f109 0901 	add.w	r9, r9, #1
 8010eea:	4670      	mov	r0, lr
 8010eec:	4574      	cmp	r4, lr
 8010eee:	dc68      	bgt.n	8010fc2 <__kernel_rem_pio2f+0x226>
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	dd03      	ble.n	8010efc <__kernel_rem_pio2f+0x160>
 8010ef4:	2d01      	cmp	r5, #1
 8010ef6:	d074      	beq.n	8010fe2 <__kernel_rem_pio2f+0x246>
 8010ef8:	2d02      	cmp	r5, #2
 8010efa:	d07d      	beq.n	8010ff8 <__kernel_rem_pio2f+0x25c>
 8010efc:	2e02      	cmp	r6, #2
 8010efe:	d12d      	bne.n	8010f5c <__kernel_rem_pio2f+0x1c0>
 8010f00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f04:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010f08:	b340      	cbz	r0, 8010f5c <__kernel_rem_pio2f+0x1c0>
 8010f0a:	4628      	mov	r0, r5
 8010f0c:	9306      	str	r3, [sp, #24]
 8010f0e:	f7ff fedf 	bl	8010cd0 <scalbnf>
 8010f12:	9b06      	ldr	r3, [sp, #24]
 8010f14:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010f18:	e020      	b.n	8010f5c <__kernel_rem_pio2f+0x1c0>
 8010f1a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010f1e:	3e01      	subs	r6, #1
 8010f20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f28:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010f2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010f30:	ecac 0a01 	vstmia	ip!, {s0}
 8010f34:	ed30 0a01 	vldmdb	r0!, {s0}
 8010f38:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010f3c:	e79e      	b.n	8010e7c <__kernel_rem_pio2f+0xe0>
 8010f3e:	d105      	bne.n	8010f4c <__kernel_rem_pio2f+0x1b0>
 8010f40:	1e60      	subs	r0, r4, #1
 8010f42:	a908      	add	r1, sp, #32
 8010f44:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010f48:	11f6      	asrs	r6, r6, #7
 8010f4a:	e7c8      	b.n	8010ede <__kernel_rem_pio2f+0x142>
 8010f4c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010f50:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f58:	da31      	bge.n	8010fbe <__kernel_rem_pio2f+0x222>
 8010f5a:	2600      	movs	r6, #0
 8010f5c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f64:	f040 8098 	bne.w	8011098 <__kernel_rem_pio2f+0x2fc>
 8010f68:	1e60      	subs	r0, r4, #1
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	4550      	cmp	r0, sl
 8010f6e:	da4b      	bge.n	8011008 <__kernel_rem_pio2f+0x26c>
 8010f70:	2a00      	cmp	r2, #0
 8010f72:	d065      	beq.n	8011040 <__kernel_rem_pio2f+0x2a4>
 8010f74:	3c01      	subs	r4, #1
 8010f76:	ab08      	add	r3, sp, #32
 8010f78:	3d08      	subs	r5, #8
 8010f7a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d0f8      	beq.n	8010f74 <__kernel_rem_pio2f+0x1d8>
 8010f82:	4628      	mov	r0, r5
 8010f84:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010f88:	f7ff fea2 	bl	8010cd0 <scalbnf>
 8010f8c:	1c63      	adds	r3, r4, #1
 8010f8e:	aa44      	add	r2, sp, #272	@ 0x110
 8010f90:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8011090 <__kernel_rem_pio2f+0x2f4>
 8010f94:	0099      	lsls	r1, r3, #2
 8010f96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010f9a:	4623      	mov	r3, r4
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	f280 80a9 	bge.w	80110f4 <__kernel_rem_pio2f+0x358>
 8010fa2:	4623      	mov	r3, r4
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f2c0 80c7 	blt.w	8011138 <__kernel_rem_pio2f+0x39c>
 8010faa:	aa44      	add	r2, sp, #272	@ 0x110
 8010fac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8010fb0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8011088 <__kernel_rem_pio2f+0x2ec>
 8010fb4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8011094 <__kernel_rem_pio2f+0x2f8>
 8010fb8:	2000      	movs	r0, #0
 8010fba:	1ae2      	subs	r2, r4, r3
 8010fbc:	e0b1      	b.n	8011122 <__kernel_rem_pio2f+0x386>
 8010fbe:	2602      	movs	r6, #2
 8010fc0:	e78f      	b.n	8010ee2 <__kernel_rem_pio2f+0x146>
 8010fc2:	f852 1b04 	ldr.w	r1, [r2], #4
 8010fc6:	b948      	cbnz	r0, 8010fdc <__kernel_rem_pio2f+0x240>
 8010fc8:	b121      	cbz	r1, 8010fd4 <__kernel_rem_pio2f+0x238>
 8010fca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8010fce:	f842 1c04 	str.w	r1, [r2, #-4]
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	f10e 0e01 	add.w	lr, lr, #1
 8010fd8:	4608      	mov	r0, r1
 8010fda:	e787      	b.n	8010eec <__kernel_rem_pio2f+0x150>
 8010fdc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8010fe0:	e7f5      	b.n	8010fce <__kernel_rem_pio2f+0x232>
 8010fe2:	f104 3cff 	add.w	ip, r4, #4294967295
 8010fe6:	aa08      	add	r2, sp, #32
 8010fe8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8010fec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8010ff0:	a908      	add	r1, sp, #32
 8010ff2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010ff6:	e781      	b.n	8010efc <__kernel_rem_pio2f+0x160>
 8010ff8:	f104 3cff 	add.w	ip, r4, #4294967295
 8010ffc:	aa08      	add	r2, sp, #32
 8010ffe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8011002:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011006:	e7f3      	b.n	8010ff0 <__kernel_rem_pio2f+0x254>
 8011008:	a908      	add	r1, sp, #32
 801100a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801100e:	3801      	subs	r0, #1
 8011010:	430a      	orrs	r2, r1
 8011012:	e7ab      	b.n	8010f6c <__kernel_rem_pio2f+0x1d0>
 8011014:	3201      	adds	r2, #1
 8011016:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801101a:	2e00      	cmp	r6, #0
 801101c:	d0fa      	beq.n	8011014 <__kernel_rem_pio2f+0x278>
 801101e:	9905      	ldr	r1, [sp, #20]
 8011020:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8011024:	eb0d 0001 	add.w	r0, sp, r1
 8011028:	18e6      	adds	r6, r4, r3
 801102a:	a91c      	add	r1, sp, #112	@ 0x70
 801102c:	f104 0c01 	add.w	ip, r4, #1
 8011030:	384c      	subs	r0, #76	@ 0x4c
 8011032:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8011036:	4422      	add	r2, r4
 8011038:	4562      	cmp	r2, ip
 801103a:	da04      	bge.n	8011046 <__kernel_rem_pio2f+0x2aa>
 801103c:	4614      	mov	r4, r2
 801103e:	e710      	b.n	8010e62 <__kernel_rem_pio2f+0xc6>
 8011040:	9804      	ldr	r0, [sp, #16]
 8011042:	2201      	movs	r2, #1
 8011044:	e7e7      	b.n	8011016 <__kernel_rem_pio2f+0x27a>
 8011046:	9903      	ldr	r1, [sp, #12]
 8011048:	f8dd e004 	ldr.w	lr, [sp, #4]
 801104c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8011050:	9105      	str	r1, [sp, #20]
 8011052:	ee07 1a90 	vmov	s15, r1
 8011056:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801105a:	2400      	movs	r4, #0
 801105c:	ece6 7a01 	vstmia	r6!, {s15}
 8011060:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8011094 <__kernel_rem_pio2f+0x2f8>
 8011064:	46b1      	mov	r9, r6
 8011066:	455c      	cmp	r4, fp
 8011068:	dd04      	ble.n	8011074 <__kernel_rem_pio2f+0x2d8>
 801106a:	ece0 7a01 	vstmia	r0!, {s15}
 801106e:	f10c 0c01 	add.w	ip, ip, #1
 8011072:	e7e1      	b.n	8011038 <__kernel_rem_pio2f+0x29c>
 8011074:	ecfe 6a01 	vldmia	lr!, {s13}
 8011078:	ed39 7a01 	vldmdb	r9!, {s14}
 801107c:	3401      	adds	r4, #1
 801107e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011082:	e7f0      	b.n	8011066 <__kernel_rem_pio2f+0x2ca>
 8011084:	0801175c 	.word	0x0801175c
 8011088:	08011730 	.word	0x08011730
 801108c:	43800000 	.word	0x43800000
 8011090:	3b800000 	.word	0x3b800000
 8011094:	00000000 	.word	0x00000000
 8011098:	9b02      	ldr	r3, [sp, #8]
 801109a:	eeb0 0a48 	vmov.f32	s0, s16
 801109e:	eba3 0008 	sub.w	r0, r3, r8
 80110a2:	f7ff fe15 	bl	8010cd0 <scalbnf>
 80110a6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801108c <__kernel_rem_pio2f+0x2f0>
 80110aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80110ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110b2:	db19      	blt.n	80110e8 <__kernel_rem_pio2f+0x34c>
 80110b4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8011090 <__kernel_rem_pio2f+0x2f4>
 80110b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80110bc:	aa08      	add	r2, sp, #32
 80110be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110c2:	3508      	adds	r5, #8
 80110c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80110cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80110d4:	ee10 3a10 	vmov	r3, s0
 80110d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80110dc:	ee17 3a90 	vmov	r3, s15
 80110e0:	3401      	adds	r4, #1
 80110e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80110e6:	e74c      	b.n	8010f82 <__kernel_rem_pio2f+0x1e6>
 80110e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80110ec:	aa08      	add	r2, sp, #32
 80110ee:	ee10 3a10 	vmov	r3, s0
 80110f2:	e7f6      	b.n	80110e2 <__kernel_rem_pio2f+0x346>
 80110f4:	a808      	add	r0, sp, #32
 80110f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80110fa:	9001      	str	r0, [sp, #4]
 80110fc:	ee07 0a90 	vmov	s15, r0
 8011100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011104:	3b01      	subs	r3, #1
 8011106:	ee67 7a80 	vmul.f32	s15, s15, s0
 801110a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801110e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011112:	e743      	b.n	8010f9c <__kernel_rem_pio2f+0x200>
 8011114:	ecfc 6a01 	vldmia	ip!, {s13}
 8011118:	ecb5 7a01 	vldmia	r5!, {s14}
 801111c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011120:	3001      	adds	r0, #1
 8011122:	4550      	cmp	r0, sl
 8011124:	dc01      	bgt.n	801112a <__kernel_rem_pio2f+0x38e>
 8011126:	4290      	cmp	r0, r2
 8011128:	ddf4      	ble.n	8011114 <__kernel_rem_pio2f+0x378>
 801112a:	a858      	add	r0, sp, #352	@ 0x160
 801112c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8011130:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8011134:	3b01      	subs	r3, #1
 8011136:	e735      	b.n	8010fa4 <__kernel_rem_pio2f+0x208>
 8011138:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801113a:	2b02      	cmp	r3, #2
 801113c:	dc09      	bgt.n	8011152 <__kernel_rem_pio2f+0x3b6>
 801113e:	2b00      	cmp	r3, #0
 8011140:	dc27      	bgt.n	8011192 <__kernel_rem_pio2f+0x3f6>
 8011142:	d040      	beq.n	80111c6 <__kernel_rem_pio2f+0x42a>
 8011144:	f009 0007 	and.w	r0, r9, #7
 8011148:	b059      	add	sp, #356	@ 0x164
 801114a:	ecbd 8b04 	vpop	{d8-d9}
 801114e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011152:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8011154:	2b03      	cmp	r3, #3
 8011156:	d1f5      	bne.n	8011144 <__kernel_rem_pio2f+0x3a8>
 8011158:	aa30      	add	r2, sp, #192	@ 0xc0
 801115a:	1f0b      	subs	r3, r1, #4
 801115c:	4413      	add	r3, r2
 801115e:	461a      	mov	r2, r3
 8011160:	4620      	mov	r0, r4
 8011162:	2800      	cmp	r0, #0
 8011164:	dc50      	bgt.n	8011208 <__kernel_rem_pio2f+0x46c>
 8011166:	4622      	mov	r2, r4
 8011168:	2a01      	cmp	r2, #1
 801116a:	dc5d      	bgt.n	8011228 <__kernel_rem_pio2f+0x48c>
 801116c:	ab30      	add	r3, sp, #192	@ 0xc0
 801116e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8011094 <__kernel_rem_pio2f+0x2f8>
 8011172:	440b      	add	r3, r1
 8011174:	2c01      	cmp	r4, #1
 8011176:	dc67      	bgt.n	8011248 <__kernel_rem_pio2f+0x4ac>
 8011178:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801117c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8011180:	2e00      	cmp	r6, #0
 8011182:	d167      	bne.n	8011254 <__kernel_rem_pio2f+0x4b8>
 8011184:	edc7 6a00 	vstr	s13, [r7]
 8011188:	ed87 7a01 	vstr	s14, [r7, #4]
 801118c:	edc7 7a02 	vstr	s15, [r7, #8]
 8011190:	e7d8      	b.n	8011144 <__kernel_rem_pio2f+0x3a8>
 8011192:	ab30      	add	r3, sp, #192	@ 0xc0
 8011194:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8011094 <__kernel_rem_pio2f+0x2f8>
 8011198:	440b      	add	r3, r1
 801119a:	4622      	mov	r2, r4
 801119c:	2a00      	cmp	r2, #0
 801119e:	da24      	bge.n	80111ea <__kernel_rem_pio2f+0x44e>
 80111a0:	b34e      	cbz	r6, 80111f6 <__kernel_rem_pio2f+0x45a>
 80111a2:	eef1 7a47 	vneg.f32	s15, s14
 80111a6:	edc7 7a00 	vstr	s15, [r7]
 80111aa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80111ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111b2:	aa31      	add	r2, sp, #196	@ 0xc4
 80111b4:	2301      	movs	r3, #1
 80111b6:	429c      	cmp	r4, r3
 80111b8:	da20      	bge.n	80111fc <__kernel_rem_pio2f+0x460>
 80111ba:	b10e      	cbz	r6, 80111c0 <__kernel_rem_pio2f+0x424>
 80111bc:	eef1 7a67 	vneg.f32	s15, s15
 80111c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80111c4:	e7be      	b.n	8011144 <__kernel_rem_pio2f+0x3a8>
 80111c6:	ab30      	add	r3, sp, #192	@ 0xc0
 80111c8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8011094 <__kernel_rem_pio2f+0x2f8>
 80111cc:	440b      	add	r3, r1
 80111ce:	2c00      	cmp	r4, #0
 80111d0:	da05      	bge.n	80111de <__kernel_rem_pio2f+0x442>
 80111d2:	b10e      	cbz	r6, 80111d8 <__kernel_rem_pio2f+0x43c>
 80111d4:	eef1 7a67 	vneg.f32	s15, s15
 80111d8:	edc7 7a00 	vstr	s15, [r7]
 80111dc:	e7b2      	b.n	8011144 <__kernel_rem_pio2f+0x3a8>
 80111de:	ed33 7a01 	vldmdb	r3!, {s14}
 80111e2:	3c01      	subs	r4, #1
 80111e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80111e8:	e7f1      	b.n	80111ce <__kernel_rem_pio2f+0x432>
 80111ea:	ed73 7a01 	vldmdb	r3!, {s15}
 80111ee:	3a01      	subs	r2, #1
 80111f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80111f4:	e7d2      	b.n	801119c <__kernel_rem_pio2f+0x400>
 80111f6:	eef0 7a47 	vmov.f32	s15, s14
 80111fa:	e7d4      	b.n	80111a6 <__kernel_rem_pio2f+0x40a>
 80111fc:	ecb2 7a01 	vldmia	r2!, {s14}
 8011200:	3301      	adds	r3, #1
 8011202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011206:	e7d6      	b.n	80111b6 <__kernel_rem_pio2f+0x41a>
 8011208:	ed72 7a01 	vldmdb	r2!, {s15}
 801120c:	edd2 6a01 	vldr	s13, [r2, #4]
 8011210:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011214:	3801      	subs	r0, #1
 8011216:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801121a:	ed82 7a00 	vstr	s14, [r2]
 801121e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011222:	edc2 7a01 	vstr	s15, [r2, #4]
 8011226:	e79c      	b.n	8011162 <__kernel_rem_pio2f+0x3c6>
 8011228:	ed73 7a01 	vldmdb	r3!, {s15}
 801122c:	edd3 6a01 	vldr	s13, [r3, #4]
 8011230:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011234:	3a01      	subs	r2, #1
 8011236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801123a:	ed83 7a00 	vstr	s14, [r3]
 801123e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011242:	edc3 7a01 	vstr	s15, [r3, #4]
 8011246:	e78f      	b.n	8011168 <__kernel_rem_pio2f+0x3cc>
 8011248:	ed33 7a01 	vldmdb	r3!, {s14}
 801124c:	3c01      	subs	r4, #1
 801124e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011252:	e78f      	b.n	8011174 <__kernel_rem_pio2f+0x3d8>
 8011254:	eef1 6a66 	vneg.f32	s13, s13
 8011258:	eeb1 7a47 	vneg.f32	s14, s14
 801125c:	edc7 6a00 	vstr	s13, [r7]
 8011260:	ed87 7a01 	vstr	s14, [r7, #4]
 8011264:	eef1 7a67 	vneg.f32	s15, s15
 8011268:	e790      	b.n	801118c <__kernel_rem_pio2f+0x3f0>
 801126a:	bf00      	nop

0801126c <floorf>:
 801126c:	ee10 3a10 	vmov	r3, s0
 8011270:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011274:	3a7f      	subs	r2, #127	@ 0x7f
 8011276:	2a16      	cmp	r2, #22
 8011278:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801127c:	dc2b      	bgt.n	80112d6 <floorf+0x6a>
 801127e:	2a00      	cmp	r2, #0
 8011280:	da12      	bge.n	80112a8 <floorf+0x3c>
 8011282:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80112e8 <floorf+0x7c>
 8011286:	ee30 0a27 	vadd.f32	s0, s0, s15
 801128a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011292:	dd06      	ble.n	80112a2 <floorf+0x36>
 8011294:	2b00      	cmp	r3, #0
 8011296:	da24      	bge.n	80112e2 <floorf+0x76>
 8011298:	2900      	cmp	r1, #0
 801129a:	4b14      	ldr	r3, [pc, #80]	@ (80112ec <floorf+0x80>)
 801129c:	bf08      	it	eq
 801129e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80112a2:	ee00 3a10 	vmov	s0, r3
 80112a6:	4770      	bx	lr
 80112a8:	4911      	ldr	r1, [pc, #68]	@ (80112f0 <floorf+0x84>)
 80112aa:	4111      	asrs	r1, r2
 80112ac:	420b      	tst	r3, r1
 80112ae:	d0fa      	beq.n	80112a6 <floorf+0x3a>
 80112b0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80112e8 <floorf+0x7c>
 80112b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80112b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80112bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112c0:	ddef      	ble.n	80112a2 <floorf+0x36>
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	bfbe      	ittt	lt
 80112c6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80112ca:	fa40 f202 	asrlt.w	r2, r0, r2
 80112ce:	189b      	addlt	r3, r3, r2
 80112d0:	ea23 0301 	bic.w	r3, r3, r1
 80112d4:	e7e5      	b.n	80112a2 <floorf+0x36>
 80112d6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80112da:	d3e4      	bcc.n	80112a6 <floorf+0x3a>
 80112dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80112e0:	4770      	bx	lr
 80112e2:	2300      	movs	r3, #0
 80112e4:	e7dd      	b.n	80112a2 <floorf+0x36>
 80112e6:	bf00      	nop
 80112e8:	7149f2ca 	.word	0x7149f2ca
 80112ec:	bf800000 	.word	0xbf800000
 80112f0:	007fffff 	.word	0x007fffff

080112f4 <_init>:
 80112f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112f6:	bf00      	nop
 80112f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112fa:	bc08      	pop	{r3}
 80112fc:	469e      	mov	lr, r3
 80112fe:	4770      	bx	lr

08011300 <_fini>:
 8011300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011302:	bf00      	nop
 8011304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011306:	bc08      	pop	{r3}
 8011308:	469e      	mov	lr, r3
 801130a:	4770      	bx	lr
